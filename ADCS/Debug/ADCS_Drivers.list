
ADCS_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  0800e4b8  0800e4b8  0000f4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f000  0800f000  000111e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f000  0800f000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f008  0800f008  000111e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f008  0800f008  00010008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f00c  0800f00c  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800f010  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  200001e8  0800f1f8  000111e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  0800f1f8  000118dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128f5  00000000  00000000  00011211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f4  00000000  00000000  00023b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00026500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0b  00000000  00000000  000276d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a018  00000000  00000000  000284db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c79  00000000  00000000  000424f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c98  00000000  00000000  0005816c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ece04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006484  00000000  00000000  000ece48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f32cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e4a0 	.word	0x0800e4a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800e4a0 	.word	0x0800e4a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <__aeabi_d2lz>:
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	2200      	movs	r2, #0
 80010b4:	2300      	movs	r3, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	f7ff fc7f 	bl	80009bc <__aeabi_dcmplt>
 80010be:	b928      	cbnz	r0, 80010cc <__aeabi_d2lz+0x1c>
 80010c0:	4620      	mov	r0, r4
 80010c2:	4629      	mov	r1, r5
 80010c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010c8:	f000 b80a 	b.w	80010e0 <__aeabi_d2ulz>
 80010cc:	4620      	mov	r0, r4
 80010ce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010d2:	f000 f805 	bl	80010e0 <__aeabi_d2ulz>
 80010d6:	4240      	negs	r0, r0
 80010d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010dc:	bd38      	pop	{r3, r4, r5, pc}
 80010de:	bf00      	nop

080010e0 <__aeabi_d2ulz>:
 80010e0:	b5d0      	push	{r4, r6, r7, lr}
 80010e2:	2200      	movs	r2, #0
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <__aeabi_d2ulz+0x34>)
 80010e6:	4606      	mov	r6, r0
 80010e8:	460f      	mov	r7, r1
 80010ea:	f7ff f9f5 	bl	80004d8 <__aeabi_dmul>
 80010ee:	f7ff fccb 	bl	8000a88 <__aeabi_d2uiz>
 80010f2:	4604      	mov	r4, r0
 80010f4:	f7ff f976 	bl	80003e4 <__aeabi_ui2d>
 80010f8:	2200      	movs	r2, #0
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <__aeabi_d2ulz+0x38>)
 80010fc:	f7ff f9ec 	bl	80004d8 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4630      	mov	r0, r6
 8001106:	4639      	mov	r1, r7
 8001108:	f7ff f82e 	bl	8000168 <__aeabi_dsub>
 800110c:	f7ff fcbc 	bl	8000a88 <__aeabi_d2uiz>
 8001110:	4621      	mov	r1, r4
 8001112:	bdd0      	pop	{r4, r6, r7, pc}
 8001114:	3df00000 	.word	0x3df00000
 8001118:	41f00000 	.word	0x41f00000

0800111c <GPS_Init>:
#include "math.h"

/**
 * @brief Initialize GPS driver
 */
GPS_Status GPS_Init(GPS_Handle* gps, UART_HandleTypeDef* huart) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
    if (gps == NULL || huart == NULL) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <GPS_Init+0x16>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <GPS_Init+0x1a>
        return GPS_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e027      	b.n	8001186 <GPS_Init+0x6a>
    }

    // Initialize GPS handle
    memset(gps, 0, sizeof(GPS_Handle));
 8001136:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800113a:	2100      	movs	r1, #0
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f009 fb14 	bl	800a76a <memset>
    gps->huart = huart;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	601a      	str	r2, [r3, #0]
    gps->buffer_head = 0;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
    gps->buffer_tail = 0;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    gps->nmea_index = 0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
    gps->fix_available = 0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da

    // Start UART reception in interrupt mode (single byte)
    if (HAL_UART_Receive_IT(gps->huart, &gps->rx_byte, 1) != HAL_OK) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001172:	2201      	movs	r2, #1
 8001174:	4619      	mov	r1, r3
 8001176:	f007 f956 	bl	8008426 <HAL_UART_Receive_IT>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <GPS_Init+0x68>
        return GPS_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <GPS_Init+0x6a>
    }

    return GPS_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <GPS_Process>:

/**
 * @brief Process incoming GPS data
 */
GPS_Status GPS_Process(GPS_Handle* gps) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
    // Process data in circular buffer
    while (gps->buffer_head != gps->buffer_tail) {
 8001196:	e06f      	b.n	8001278 <GPS_Process+0xea>
        uint8_t byte = gps->buffer[gps->buffer_tail];
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	791b      	ldrb	r3, [r3, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
        gps->buffer_tail = (gps->buffer_tail + 1) % GPS_BUFFER_SIZE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80011ae:	3301      	adds	r3, #1
 80011b0:	425a      	negs	r2, r3
 80011b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011ba:	bf58      	it	pl
 80011bc:	4253      	negpl	r3, r2
 80011be:	b29a      	uxth	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

        // NMEA sentence starts with '$'
        if (byte == GPS_NMEA_START) {
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	2b24      	cmp	r3, #36	@ 0x24
 80011ca:	d112      	bne.n	80011f2 <GPS_Process+0x64>
            gps->nmea_index = 0;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
            gps->nmea_buffer[gps->nmea_index++] = byte;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	b291      	uxth	r1, r2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	f8a2 128a 	strh.w	r1, [r2, #650]	@ 0x28a
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
 80011f0:	e042      	b.n	8001278 <GPS_Process+0xea>
        }
        // Add byte to NMEA buffer if we've seen a start character
        else if (gps->nmea_index > 0) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d03d      	beq.n	8001278 <GPS_Process+0xea>
            // Check for buffer overflow
            if (gps->nmea_index >= GPS_NMEA_SIZE - 1) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001202:	2b7e      	cmp	r3, #126	@ 0x7e
 8001204:	d904      	bls.n	8001210 <GPS_Process+0x82>
                gps->nmea_index = 0; // Reset and wait for next sentence
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                continue;
 800120e:	e033      	b.n	8001278 <GPS_Process+0xea>
            }

            gps->nmea_buffer[gps->nmea_index++] = byte;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	b291      	uxth	r1, r2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	f8a2 128a 	strh.w	r1, [r2, #650]	@ 0x28a
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209

            // End of NMEA sentence (newline or carriage return)
            if (byte == GPS_NMEA_END || byte == '\r') {
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b0a      	cmp	r3, #10
 8001230:	d002      	beq.n	8001238 <GPS_Process+0xaa>
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b0d      	cmp	r3, #13
 8001236:	d11f      	bne.n	8001278 <GPS_Process+0xea>
                gps->nmea_buffer[gps->nmea_index] = '\0'; // Null terminate
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209

                // Parse the NMEA sentence
                NMEA_Type type = GPS_ParseNMEASentence(gps, gps->nmea_buffer, NULL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f203 2309 	addw	r3, r3, #521	@ 0x209
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f847 	bl	80012e8 <GPS_ParseNMEASentence>
 800125a:	4603      	mov	r3, r0
 800125c:	73bb      	strb	r3, [r7, #14]

                if (type != NMEA_UNKNOWN) {
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <GPS_Process+0xe2>
                    // Update last update timestamp
                    gps->last_update = HAL_GetTick();
 8001264:	f002 fd14 	bl	8003c90 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
                }

                // Reset NMEA buffer index
                gps->nmea_index = 0;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
    while (gps->buffer_head != gps->buffer_tail) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8001284:	429a      	cmp	r2, r3
 8001286:	d187      	bne.n	8001198 <GPS_Process+0xa>
            }
        }
    }

    return GPS_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <GPS_UART_RxCpltCallback>:

/**
 * @brief UART RX complete callback - to be called from HAL_UART_RxCpltCallback
 */
void GPS_UART_RxCpltCallback(GPS_Handle* gps) {
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    // Add received byte to circular buffer
    gps->buffer[gps->buffer_head] = gps->rx_byte;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80012a0:	4619      	mov	r1, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 2208 	ldrb.w	r2, [r3, #520]	@ 0x208
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	440b      	add	r3, r1
 80012ac:	711a      	strb	r2, [r3, #4]
    gps->buffer_head = (gps->buffer_head + 1) % GPS_BUFFER_SIZE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80012b4:	3301      	adds	r3, #1
 80012b6:	425a      	negs	r2, r3
 80012b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012c0:	bf58      	it	pl
 80012c2:	4253      	negpl	r3, r2
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

    // Restart UART reception
    HAL_UART_Receive_IT(gps->huart, &gps->rx_byte, 1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80012d6:	2201      	movs	r2, #1
 80012d8:	4619      	mov	r1, r3
 80012da:	f007 f8a4 	bl	8008426 <HAL_UART_Receive_IT>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <GPS_ParseNMEASentence>:

/**
 * @brief Parse NMEA sentence and direct to appropriate parser
 */
NMEA_Type GPS_ParseNMEASentence(GPS_Handle* gps, char* nmea, UART_HandleTypeDef* debug_huart) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
    // Check if the sentence starts with "$GP"
    if (strncmp(nmea, "$GP", 3) != 0) {
 80012f4:	2203      	movs	r2, #3
 80012f6:	4917      	ldr	r1, [pc, #92]	@ (8001354 <GPS_ParseNMEASentence+0x6c>)
 80012f8:	68b8      	ldr	r0, [r7, #8]
 80012fa:	f009 fa3e 	bl	800a77a <strncmp>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <GPS_ParseNMEASentence+0x20>
        return NMEA_UNKNOWN;
 8001304:	2300      	movs	r3, #0
 8001306:	e021      	b.n	800134c <GPS_ParseNMEASentence+0x64>
    }

    // Identify NMEA sentence type
    if (strncmp(nmea + 3, "GGA", 3) == 0) {
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	3303      	adds	r3, #3
 800130c:	2203      	movs	r2, #3
 800130e:	4912      	ldr	r1, [pc, #72]	@ (8001358 <GPS_ParseNMEASentence+0x70>)
 8001310:	4618      	mov	r0, r3
 8001312:	f009 fa32 	bl	800a77a <strncmp>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d106      	bne.n	800132a <GPS_ParseNMEASentence+0x42>
        GPS_ParseGPGGA(gps, nmea, debug_huart);
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 f81d 	bl	8001360 <GPS_ParseGPGGA>
        return NMEA_GPGGA;
 8001326:	2301      	movs	r3, #1
 8001328:	e010      	b.n	800134c <GPS_ParseNMEASentence+0x64>
    } else if (strncmp(nmea + 3, "RMC", 3) == 0) {
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3303      	adds	r3, #3
 800132e:	2203      	movs	r2, #3
 8001330:	490a      	ldr	r1, [pc, #40]	@ (800135c <GPS_ParseNMEASentence+0x74>)
 8001332:	4618      	mov	r0, r3
 8001334:	f009 fa21 	bl	800a77a <strncmp>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <GPS_ParseNMEASentence+0x62>
        GPS_ParseGPRMC(gps, nmea);
 800133e:	68b9      	ldr	r1, [r7, #8]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 fb67 	bl	8001a14 <GPS_ParseGPRMC>
        return NMEA_GPRMC;
 8001346:	2302      	movs	r3, #2
 8001348:	e000      	b.n	800134c <GPS_ParseNMEASentence+0x64>
    }

    return NMEA_UNKNOWN;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	0800e4b8 	.word	0x0800e4b8
 8001358:	0800e4bc 	.word	0x0800e4bc
 800135c:	0800e4c0 	.word	0x0800e4c0

08001360 <GPS_ParseGPGGA>:
/**
 * @brief Parse GPGGA sentence (Global Positioning System Fix Data)
 * Format: $GPGGA,time,lat,N/S,lon,E/W,fix,sats,hdop,alt,M,geoid,M,age,ref*cs
 * Example: $GPGGA,045104.000,3014.1985,N,09749.2873,W,1,09,1.2,211.6,M,-22.5,M,,000062
 */
GPS_Status GPS_ParseGPGGA(GPS_Handle* gps, char* nmea, UART_HandleTypeDef* debug_huart) {
 8001360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001364:	b0d2      	sub	sp, #328	@ 0x148
 8001366:	af04      	add	r7, sp, #16
 8001368:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800136c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001370:	6018      	str	r0, [r3, #0]
 8001372:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001376:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800137a:	6019      	str	r1, [r3, #0]
 800137c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001380:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001384:	601a      	str	r2, [r3, #0]
    char* token;
    char* saveptr;
    int token_index = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    char nmea_copy[GPS_NMEA_SIZE]; // Create a copy of the NMEA string to avoid modifying the original
    char debug_buffer[128]; // Local buffer for debug messages

    // Copy the NMEA string to avoid strtok_r modifying the original
    strncpy(nmea_copy, nmea, GPS_NMEA_SIZE - 1);
 800138c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001390:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001394:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001398:	227f      	movs	r2, #127	@ 0x7f
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	f009 f9ff 	bl	800a79e <strncpy>
    nmea_copy[GPS_NMEA_SIZE - 1] = '\0'; // Ensure null termination
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

    // First token is the message ID ($GPGGA)
    token = strtok_r(nmea_copy, ",", &saveptr);
 80013a6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013aa:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80013ae:	49c4      	ldr	r1, [pc, #784]	@ (80016c0 <GPS_ParseGPGGA+0x360>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f009 fa2f 	bl	800a814 <strtok_r>
 80013b6:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
    if (token == NULL) return GPS_INVALID_DATA;
 80013ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 82fc 	bne.w	80019bc <GPS_ParseGPGGA+0x65c>
 80013c4:	2304      	movs	r3, #4
 80013c6:	e308      	b.n	80019da <GPS_ParseGPGGA+0x67a>

    // Parse remaining tokens
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
        token_index++;
 80013c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013cc:	3301      	adds	r3, #1
 80013ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

        switch (token_index) {
 80013d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013d6:	3b01      	subs	r3, #1
 80013d8:	2b08      	cmp	r3, #8
 80013da:	f200 82ef 	bhi.w	80019bc <GPS_ParseGPGGA+0x65c>
 80013de:	a201      	add	r2, pc, #4	@ (adr r2, 80013e4 <GPS_ParseGPGGA+0x84>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	08001409 	.word	0x08001409
 80013e8:	080014e3 	.word	0x080014e3
 80013ec:	080016cd 	.word	0x080016cd
 80013f0:	080016fd 	.word	0x080016fd
 80013f4:	080018c9 	.word	0x080018c9
 80013f8:	080018f7 	.word	0x080018f7
 80013fc:	08001957 	.word	0x08001957
 8001400:	08001973 	.word	0x08001973
 8001404:	0800198f 	.word	0x0800198f
            case 1: // Time (format: hhmmss.sss)
                if (strlen(token) >= 6) {
 8001408:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800140c:	f7fe fea0 	bl	8000150 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	2b05      	cmp	r3, #5
 8001414:	f240 82c9 	bls.w	80019aa <GPS_ParseGPGGA+0x64a>
                    gps->time.hour = (token[0] - '0') * 10 + (token[1] - '0');
 8001418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3b30      	subs	r3, #48	@ 0x30
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	b2da      	uxtb	r2, r3
 800142c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001430:	3301      	adds	r3, #1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3b30      	subs	r3, #48	@ 0x30
 800143a:	b2da      	uxtb	r2, r3
 800143c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001440:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0
                    gps->time.minute = (token[2] - '0') * 10 + (token[3] - '0');
 800144a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800144e:	3302      	adds	r3, #2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3b30      	subs	r3, #48	@ 0x30
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	4413      	add	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001464:	3303      	adds	r3, #3
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	3b30      	subs	r3, #48	@ 0x30
 800146e:	b2da      	uxtb	r2, r3
 8001470:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001474:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f883 22d1 	strb.w	r2, [r3, #721]	@ 0x2d1
                    gps->time.second = (token[4] - '0') * 10 + (token[5] - '0');
 800147e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001482:	3304      	adds	r3, #4
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	3b30      	subs	r3, #48	@ 0x30
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001498:	3305      	adds	r3, #5
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4413      	add	r3, r2
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	3b30      	subs	r3, #48	@ 0x30
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f883 22d2 	strb.w	r2, [r3, #722]	@ 0x2d2

                    if (strlen(token) > 7) { // Check if milliseconds present
 80014b2:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80014b6:	f7fe fe4b 	bl	8000150 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b07      	cmp	r3, #7
 80014be:	f240 8274 	bls.w	80019aa <GPS_ParseGPGGA+0x64a>
                        gps->time.millisecond = atoi(&token[7]);
 80014c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014c6:	3307      	adds	r3, #7
 80014c8:	4618      	mov	r0, r3
 80014ca:	f007 fd3e 	bl	8008f4a <atoi>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8a3 22d4 	strh.w	r2, [r3, #724]	@ 0x2d4
                    }
                }
                break;
 80014e0:	e263      	b.n	80019aa <GPS_ParseGPGGA+0x64a>

            case 2: // Latitude (format: ddmm.mmmm)
                if (strlen(token) > 0) {
 80014e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8260 	beq.w	80019ae <GPS_ParseGPGGA+0x64e>
                    // Extract degrees (first 2 digits)
                    int degrees = ((token[0] - '0') * 10) + (token[1] - '0');
 80014ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	461a      	mov	r2, r3
 8001502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001506:	3301      	adds	r3, #1
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	3b30      	subs	r3, #48	@ 0x30
 800150c:	4413      	add	r3, r2
 800150e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

                    // Extract minutes (remaining digits)
                    double minutes = ((token[2] - '0') * 10) + (token[3] - '0');  // whole minutes
 8001512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001516:	3302      	adds	r3, #2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	461a      	mov	r2, r3
 8001528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800152c:	3303      	adds	r3, #3
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3b30      	subs	r3, #48	@ 0x30
 8001532:	4413      	add	r3, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe ff65 	bl	8000404 <__aeabi_i2d>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                    if (token[4] == '.') {  // handle decimal part
 8001542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001546:	3304      	adds	r3, #4
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b2e      	cmp	r3, #46	@ 0x2e
 800154c:	d15b      	bne.n	8001606 <GPS_ParseGPGGA+0x2a6>
                        minutes += (token[5] - '0') * 0.1000;
 800154e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001552:	3305      	adds	r3, #5
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	3b30      	subs	r3, #48	@ 0x30
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ff53 	bl	8000404 <__aeabi_i2d>
 800155e:	a350      	add	r3, pc, #320	@ (adr r3, 80016a0 <GPS_ParseGPGGA+0x340>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7fe ffb8 	bl	80004d8 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8001570:	f7fe fdfc 	bl	800016c <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                        minutes += (token[6] - '0') * 0.0100;
 800157c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001580:	3306      	adds	r3, #6
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	3b30      	subs	r3, #48	@ 0x30
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ff3c 	bl	8000404 <__aeabi_i2d>
 800158c:	a346      	add	r3, pc, #280	@ (adr r3, 80016a8 <GPS_ParseGPGGA+0x348>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7fe ffa1 	bl	80004d8 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800159e:	f7fe fde5 	bl	800016c <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                        minutes += (token[7] - '0') * 0.0010;
 80015aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80015ae:	3307      	adds	r3, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3b30      	subs	r3, #48	@ 0x30
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff25 	bl	8000404 <__aeabi_i2d>
 80015ba:	a33d      	add	r3, pc, #244	@ (adr r3, 80016b0 <GPS_ParseGPGGA+0x350>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe ff8a 	bl	80004d8 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80015cc:	f7fe fdce 	bl	800016c <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                        minutes += (token[8] - '0') * 0.0001;
 80015d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80015dc:	3308      	adds	r3, #8
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3b30      	subs	r3, #48	@ 0x30
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff0e 	bl	8000404 <__aeabi_i2d>
 80015e8:	a333      	add	r3, pc, #204	@ (adr r3, 80016b8 <GPS_ParseGPGGA+0x358>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7fe ff73 	bl	80004d8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80015fa:	f7fe fdb7 	bl	800016c <__adddf3>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                    }

                    // Convert to decimal degrees
                    gps->position.latitude = degrees + (minutes / 60.0);
 8001606:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800160a:	f7fe fefb 	bl	8000404 <__aeabi_i2d>
 800160e:	4682      	mov	sl, r0
 8001610:	468b      	mov	fp, r1
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <GPS_ParseGPGGA+0x364>)
 8001618:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800161c:	f7ff f886 	bl	800072c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4650      	mov	r0, sl
 8001626:	4659      	mov	r1, fp
 8001628:	f7fe fda0 	bl	800016c <__adddf3>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001634:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8001638:	6809      	ldr	r1, [r1, #0]
 800163a:	e9c1 23a4 	strd	r2, r3, [r1, #656]	@ 0x290

                    // Debug output if debug UART is provided
                    if (debug_huart != NULL) {
 800163e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001642:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 81b0 	beq.w	80019ae <GPS_ParseGPGGA+0x64e>
                        sprintf(debug_buffer, "Debug Lat: str=%s, deg=%d, min=%.4f, final=%.6f\r\n",
 800164e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001652:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 800165c:	f107 0010 	add.w	r0, r7, #16
 8001660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001664:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001668:	e9cd 2300 	strd	r2, r3, [sp]
 800166c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001670:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001674:	4914      	ldr	r1, [pc, #80]	@ (80016c8 <GPS_ParseGPGGA+0x368>)
 8001676:	f009 f815 	bl	800a6a4 <siprintf>
                                token, degrees, minutes, gps->position.latitude);
                        HAL_UART_Transmit(debug_huart, (uint8_t*)debug_buffer, strlen(debug_buffer), 100);
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fd66 	bl	8000150 <strlen>
 8001684:	4603      	mov	r3, r0
 8001686:	b29a      	uxth	r2, r3
 8001688:	f107 0110 	add.w	r1, r7, #16
 800168c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001690:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8001694:	2364      	movs	r3, #100	@ 0x64
 8001696:	6800      	ldr	r0, [r0, #0]
 8001698:	f006 fe3a 	bl	8008310 <HAL_UART_Transmit>
                    }
                }
                break;
 800169c:	e187      	b.n	80019ae <GPS_ParseGPGGA+0x64e>
 800169e:	bf00      	nop
 80016a0:	9999999a 	.word	0x9999999a
 80016a4:	3fb99999 	.word	0x3fb99999
 80016a8:	47ae147b 	.word	0x47ae147b
 80016ac:	3f847ae1 	.word	0x3f847ae1
 80016b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80016b4:	3f50624d 	.word	0x3f50624d
 80016b8:	eb1c432d 	.word	0xeb1c432d
 80016bc:	3f1a36e2 	.word	0x3f1a36e2
 80016c0:	0800e4c4 	.word	0x0800e4c4
 80016c4:	404e0000 	.word	0x404e0000
 80016c8:	0800e4c8 	.word	0x0800e4c8

            case 3: // N/S indicator
                if (token[0] == 'S') {
 80016cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b53      	cmp	r3, #83	@ 0x53
 80016d4:	f040 816d 	bne.w	80019b2 <GPS_ParseGPGGA+0x652>
                    gps->position.latitude = -gps->position.latitude;
 80016d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 80016e6:	4614      	mov	r4, r2
 80016e8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80016ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e9c3 45a4 	strd	r4, r5, [r3, #656]	@ 0x290
                }
                break;
 80016fa:	e15a      	b.n	80019b2 <GPS_ParseGPGGA+0x652>

            case 4: // Longitude (format: dddmm.mmmm)
                if (strlen(token) > 0) {
 80016fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8157 	beq.w	80019b6 <GPS_ParseGPGGA+0x656>
                    // Extract degrees (first 3 digits)
                    int degrees = ((token[0] - '0') * 100) +
 8001708:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	3b30      	subs	r3, #48	@ 0x30
 8001710:	2264      	movs	r2, #100	@ 0x64
 8001712:	fb02 f103 	mul.w	r1, r2, r3
                                 ((token[1] - '0') * 10) +
 8001716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800171a:	3301      	adds	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
                    int degrees = ((token[0] - '0') * 100) +
 800172a:	18ca      	adds	r2, r1, r3
                                 (token[2] - '0');
 800172c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001730:	3302      	adds	r3, #2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3b30      	subs	r3, #48	@ 0x30
                    int degrees = ((token[0] - '0') * 100) +
 8001736:	4413      	add	r3, r2
 8001738:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

                    // Extract minutes (remaining digits)
                    double minutes = ((token[3] - '0') * 10) + (token[4] - '0');  // whole minutes
 800173c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001740:	3303      	adds	r3, #3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	461a      	mov	r2, r3
 8001752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001756:	3304      	adds	r3, #4
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	3b30      	subs	r3, #48	@ 0x30
 800175c:	4413      	add	r3, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fe50 	bl	8000404 <__aeabi_i2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                    if (token[5] == '.') {  // handle decimal part
 800176c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001770:	3305      	adds	r3, #5
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b2e      	cmp	r3, #46	@ 0x2e
 8001776:	d15b      	bne.n	8001830 <GPS_ParseGPGGA+0x4d0>
                        minutes += (token[6] - '0') * 0.1000;
 8001778:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800177c:	3306      	adds	r3, #6
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3b30      	subs	r3, #48	@ 0x30
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe3e 	bl	8000404 <__aeabi_i2d>
 8001788:	a397      	add	r3, pc, #604	@ (adr r3, 80019e8 <GPS_ParseGPGGA+0x688>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe fea3 	bl	80004d8 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800179a:	f7fe fce7 	bl	800016c <__adddf3>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                        minutes += (token[7] - '0') * 0.0100;
 80017a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80017aa:	3307      	adds	r3, #7
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3b30      	subs	r3, #48	@ 0x30
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fe27 	bl	8000404 <__aeabi_i2d>
 80017b6:	a38e      	add	r3, pc, #568	@ (adr r3, 80019f0 <GPS_ParseGPGGA+0x690>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe fe8c 	bl	80004d8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80017c8:	f7fe fcd0 	bl	800016c <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                        minutes += (token[8] - '0') * 0.0010;
 80017d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80017d8:	3308      	adds	r3, #8
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	3b30      	subs	r3, #48	@ 0x30
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fe10 	bl	8000404 <__aeabi_i2d>
 80017e4:	a384      	add	r3, pc, #528	@ (adr r3, 80019f8 <GPS_ParseGPGGA+0x698>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe fe75 	bl	80004d8 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80017f6:	f7fe fcb9 	bl	800016c <__adddf3>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                        minutes += (token[9] - '0') * 0.0001;
 8001802:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001806:	3309      	adds	r3, #9
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	3b30      	subs	r3, #48	@ 0x30
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fdf9 	bl	8000404 <__aeabi_i2d>
 8001812:	a37b      	add	r3, pc, #492	@ (adr r3, 8001a00 <GPS_ParseGPGGA+0x6a0>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fe5e 	bl	80004d8 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001824:	f7fe fca2 	bl	800016c <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                    }

                    // Convert to decimal degrees
                    gps->position.longitude = degrees + (minutes / 60.0);
 8001830:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8001834:	f7fe fde6 	bl	8000404 <__aeabi_i2d>
 8001838:	4682      	mov	sl, r0
 800183a:	468b      	mov	fp, r1
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b71      	ldr	r3, [pc, #452]	@ (8001a08 <GPS_ParseGPGGA+0x6a8>)
 8001842:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001846:	f7fe ff71 	bl	800072c <__aeabi_ddiv>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4650      	mov	r0, sl
 8001850:	4659      	mov	r1, fp
 8001852:	f7fe fc8b 	bl	800016c <__adddf3>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800185e:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8001862:	6809      	ldr	r1, [r1, #0]
 8001864:	e9c1 23a6 	strd	r2, r3, [r1, #664]	@ 0x298

                    // Debug output if debug UART is provided
                    if (debug_huart != NULL) {
 8001868:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800186c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 809f 	beq.w	80019b6 <GPS_ParseGPGGA+0x656>
                        sprintf(debug_buffer, "Debug Lon: str=%s, deg=%d, min=%.4f, final=%.6f\r\n",
 8001878:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800187c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 8001886:	f107 0010 	add.w	r0, r7, #16
 800188a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800188e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001892:	e9cd 2300 	strd	r2, r3, [sp]
 8001896:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800189a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800189e:	495b      	ldr	r1, [pc, #364]	@ (8001a0c <GPS_ParseGPGGA+0x6ac>)
 80018a0:	f008 ff00 	bl	800a6a4 <siprintf>
                                token, degrees, minutes, gps->position.longitude);
                        HAL_UART_Transmit(debug_huart, (uint8_t*)debug_buffer, strlen(debug_buffer), 100);
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fc51 	bl	8000150 <strlen>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f107 0110 	add.w	r1, r7, #16
 80018b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018ba:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80018be:	2364      	movs	r3, #100	@ 0x64
 80018c0:	6800      	ldr	r0, [r0, #0]
 80018c2:	f006 fd25 	bl	8008310 <HAL_UART_Transmit>
                    }
                }
                break;
 80018c6:	e076      	b.n	80019b6 <GPS_ParseGPGGA+0x656>

            case 5: // E/W indicator
                if (token[0] == 'W') {
 80018c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b57      	cmp	r3, #87	@ 0x57
 80018d0:	d173      	bne.n	80019ba <GPS_ParseGPGGA+0x65a>
                    gps->position.longitude = -gps->position.longitude;
 80018d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 80018e0:	4690      	mov	r8, r2
 80018e2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80018e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	e9c3 89a6 	strd	r8, r9, [r3, #664]	@ 0x298
                }
                break;
 80018f4:	e061      	b.n	80019ba <GPS_ParseGPGGA+0x65a>

            case 6: // Fix quality
                gps->position.fix = (GPS_FixType)atoi(token);
 80018f6:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80018fa:	f007 fb26 	bl	8008f4a <atoi>
 80018fe:	4603      	mov	r3, r0
 8001900:	b2da      	uxtb	r2, r3
 8001902:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001906:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
                gps->fix_available = (gps->position.fix > GPS_FIX_NONE) ? 1 : 0;
 8001910:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001914:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800192e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da
                gps->position.valid = gps->fix_available;
 8001938:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800193c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f893 22da 	ldrb.w	r2, [r3, #730]	@ 0x2da
 8001946:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800194a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
                break;
 8001954:	e032      	b.n	80019bc <GPS_ParseGPGGA+0x65c>

            case 7: // Number of satellites
                gps->position.satellites = atoi(token);
 8001956:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800195a:	f007 faf6 	bl	8008f4a <atoi>
 800195e:	4603      	mov	r3, r0
 8001960:	b2da      	uxtb	r2, r3
 8001962:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001966:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
                break;
 8001970:	e024      	b.n	80019bc <GPS_ParseGPGGA+0x65c>

            case 8: // HDOP
                gps->position.hdop = atof(token);
 8001972:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001976:	f007 fae5 	bl	8008f44 <atof>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001982:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8001986:	6809      	ldr	r1, [r1, #0]
 8001988:	e9c1 23b0 	strd	r2, r3, [r1, #704]	@ 0x2c0
                break;
 800198c:	e016      	b.n	80019bc <GPS_ParseGPGGA+0x65c>

            case 9: // Altitude
                gps->position.altitude = atof(token);
 800198e:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001992:	f007 fad7 	bl	8008f44 <atof>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800199e:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 80019a2:	6809      	ldr	r1, [r1, #0]
 80019a4:	e9c1 23a8 	strd	r2, r3, [r1, #672]	@ 0x2a0
                break;
 80019a8:	e008      	b.n	80019bc <GPS_ParseGPGGA+0x65c>
                break;
 80019aa:	bf00      	nop
 80019ac:	e006      	b.n	80019bc <GPS_ParseGPGGA+0x65c>
                break;
 80019ae:	bf00      	nop
 80019b0:	e004      	b.n	80019bc <GPS_ParseGPGGA+0x65c>
                break;
 80019b2:	bf00      	nop
 80019b4:	e002      	b.n	80019bc <GPS_ParseGPGGA+0x65c>
                break;
 80019b6:	bf00      	nop
 80019b8:	e000      	b.n	80019bc <GPS_ParseGPGGA+0x65c>
                break;
 80019ba:	bf00      	nop
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
 80019bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019c0:	461a      	mov	r2, r3
 80019c2:	4913      	ldr	r1, [pc, #76]	@ (8001a10 <GPS_ParseGPGGA+0x6b0>)
 80019c4:	2000      	movs	r0, #0
 80019c6:	f008 ff25 	bl	800a814 <strtok_r>
 80019ca:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 80019ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f47f acf8 	bne.w	80013c8 <GPS_ParseGPGGA+0x68>
        }
    }

    return GPS_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80019e0:	46bd      	mov	sp, r7
 80019e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019e6:	bf00      	nop
 80019e8:	9999999a 	.word	0x9999999a
 80019ec:	3fb99999 	.word	0x3fb99999
 80019f0:	47ae147b 	.word	0x47ae147b
 80019f4:	3f847ae1 	.word	0x3f847ae1
 80019f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019fc:	3f50624d 	.word	0x3f50624d
 8001a00:	eb1c432d 	.word	0xeb1c432d
 8001a04:	3f1a36e2 	.word	0x3f1a36e2
 8001a08:	404e0000 	.word	0x404e0000
 8001a0c:	0800e4fc 	.word	0x0800e4fc
 8001a10:	0800e530 	.word	0x0800e530

08001a14 <GPS_ParseGPRMC>:
/**
 * @brief Parse GPRMC sentence (Recommended Minimum Navigation Information)
 * Format: $GPRMC,time,status,lat,N/S,lon,E/W,spd,cog,date,mv,mvE/W,mode*cs
 * Example: $GPRMC,045103.000,A,3014.1984,N,09749.2872,W,0.67,161.46,030913,,,A*7C
 */
GPS_Status GPS_ParseGPRMC(GPS_Handle* gps, char* nmea) {
 8001a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a18:	b0b0      	sub	sp, #192	@ 0xc0
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
    char* token;
    char* saveptr;
    int token_index = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    char nmea_copy[GPS_NMEA_SIZE]; // Create a copy of the NMEA string to avoid modifying the original

    // Copy the NMEA string to avoid strtok_r modifying the original
    strncpy(nmea_copy, nmea, GPS_NMEA_SIZE - 1);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	227f      	movs	r2, #127	@ 0x7f
 8001a2c:	6839      	ldr	r1, [r7, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f008 feb5 	bl	800a79e <strncpy>
    nmea_copy[GPS_NMEA_SIZE - 1] = '\0'; // Ensure null termination
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

    // First token is the message ID ($GPRMC)
    token = strtok_r(nmea_copy, ",", &saveptr);
 8001a3a:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	49c5      	ldr	r1, [pc, #788]	@ (8001d58 <GPS_ParseGPRMC+0x344>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f008 fee5 	bl	800a814 <strtok_r>
 8001a4a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    if (token == NULL) return GPS_INVALID_DATA;
 8001a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 818d 	bne.w	8001d72 <GPS_ParseGPRMC+0x35e>
 8001a58:	2304      	movs	r3, #4
 8001a5a:	e1a2      	b.n	8001da2 <GPS_ParseGPRMC+0x38e>

    // Parse remaining tokens
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
        token_index++;
 8001a5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a60:	3301      	adds	r3, #1
 8001a62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

        switch (token_index) {
 8001a66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	f200 8180 	bhi.w	8001d72 <GPS_ParseGPRMC+0x35e>
 8001a72:	a201      	add	r2, pc, #4	@ (adr r2, 8001a78 <GPS_ParseGPRMC+0x64>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001a9d 	.word	0x08001a9d
 8001a7c:	08001b57 	.word	0x08001b57
 8001a80:	08001b71 	.word	0x08001b71
 8001a84:	08001be1 	.word	0x08001be1
 8001a88:	08001c01 	.word	0x08001c01
 8001a8c:	08001c71 	.word	0x08001c71
 8001a90:	08001c8f 	.word	0x08001c8f
 8001a94:	08001ca3 	.word	0x08001ca3
 8001a98:	08001cb7 	.word	0x08001cb7
            case 1: // Time (format: hhmmss.sss)
                if (strlen(token) >= 6) {
 8001a9c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001aa0:	f7fe fb56 	bl	8000150 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	f240 8154 	bls.w	8001d54 <GPS_ParseGPRMC+0x340>
                    gps->time.hour = (token[0] - '0') * 10 + (token[1] - '0');
 8001aac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	3b30      	subs	r3, #48	@ 0x30
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	3b30      	subs	r3, #48	@ 0x30
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0
                    gps->time.minute = (token[2] - '0') * 10 + (token[3] - '0');
 8001ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ada:	3302      	adds	r3, #2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	3b30      	subs	r3, #48	@ 0x30
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001af0:	3303      	adds	r3, #3
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	3b30      	subs	r3, #48	@ 0x30
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f883 22d1 	strb.w	r2, [r3, #721]	@ 0x2d1
                    gps->time.second = (token[4] - '0') * 10 + (token[5] - '0');
 8001b02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b06:	3304      	adds	r3, #4
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3b30      	subs	r3, #48	@ 0x30
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b1c:	3305      	adds	r3, #5
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3b30      	subs	r3, #48	@ 0x30
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f883 22d2 	strb.w	r2, [r3, #722]	@ 0x2d2

                    if (strlen(token) > 7) { // Check if milliseconds present
 8001b2e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001b32:	f7fe fb0d 	bl	8000150 <strlen>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b07      	cmp	r3, #7
 8001b3a:	f240 810b 	bls.w	8001d54 <GPS_ParseGPRMC+0x340>
                        gps->time.millisecond = atoi(&token[7]);
 8001b3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b42:	3307      	adds	r3, #7
 8001b44:	4618      	mov	r0, r3
 8001b46:	f007 fa00 	bl	8008f4a <atoi>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8a3 22d4 	strh.w	r2, [r3, #724]	@ 0x2d4
                    }
                }
                break;
 8001b54:	e0fe      	b.n	8001d54 <GPS_ParseGPRMC+0x340>

            case 2: // Status (A=valid, V=invalid)
                gps->position.valid = (token[0] == 'A') ? 1 : 0;
 8001b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b41      	cmp	r3, #65	@ 0x41
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
                break;
 8001b6e:	e100      	b.n	8001d72 <GPS_ParseGPRMC+0x35e>

            case 3: // Latitude (format: ddmm.mmmm)
                if (strlen(token) > 0) {
 8001b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80f2 	beq.w	8001d60 <GPS_ParseGPRMC+0x34c>
                    char deg_str[3];
                    strncpy(deg_str, token, 2);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	2202      	movs	r2, #2
 8001b82:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8001b86:	4618      	mov	r0, r3
 8001b88:	f008 fe09 	bl	800a79e <strncpy>
                    deg_str[2] = '\0';
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	74bb      	strb	r3, [r7, #18]

                    int degrees = atoi(deg_str);
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	4618      	mov	r0, r3
 8001b96:	f007 f9d8 	bl	8008f4a <atoi>
 8001b9a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                    double minutes = atof(token + 2);  // Get the minutes part
 8001b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f007 f9cd 	bl	8008f44 <atof>
 8001baa:	e9c7 0126 	strd	r0, r1, [r7, #152]	@ 0x98
                    gps->position.latitude = degrees + (minutes / 60.0);
 8001bae:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001bb2:	f7fe fc27 	bl	8000404 <__aeabi_i2d>
 8001bb6:	4682      	mov	sl, r0
 8001bb8:	468b      	mov	fp, r1
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	4b67      	ldr	r3, [pc, #412]	@ (8001d5c <GPS_ParseGPRMC+0x348>)
 8001bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001bc4:	f7fe fdb2 	bl	800072c <__aeabi_ddiv>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4650      	mov	r0, sl
 8001bce:	4659      	mov	r1, fp
 8001bd0:	f7fe facc 	bl	800016c <__adddf3>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	e9c1 23a4 	strd	r2, r3, [r1, #656]	@ 0x290
                }
                break;
 8001bde:	e0bf      	b.n	8001d60 <GPS_ParseGPRMC+0x34c>

            case 4: // N/S indicator
                if (token[0] == 'S') {
 8001be0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b53      	cmp	r3, #83	@ 0x53
 8001be8:	f040 80bc 	bne.w	8001d64 <GPS_ParseGPRMC+0x350>
                    gps->position.latitude = -gps->position.latitude;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 8001bf2:	4614      	mov	r4, r2
 8001bf4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	e9c3 45a4 	strd	r4, r5, [r3, #656]	@ 0x290
                }
                break;
 8001bfe:	e0b1      	b.n	8001d64 <GPS_ParseGPRMC+0x350>

            case 5: // Longitude (format: dddmm.mmmm)
                if (strlen(token) > 0) {
 8001c00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 80ae 	beq.w	8001d68 <GPS_ParseGPRMC+0x354>
                    char deg_str[4];
                    strncpy(deg_str, token, 3);
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2203      	movs	r2, #3
 8001c12:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8001c16:	4618      	mov	r0, r3
 8001c18:	f008 fdc1 	bl	800a79e <strncpy>
                    deg_str[3] = '\0';
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]

                    int degrees = atoi(deg_str);
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4618      	mov	r0, r3
 8001c26:	f007 f990 	bl	8008f4a <atoi>
 8001c2a:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
                    double minutes = atof(token + 3);  // Get the minutes part
 8001c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c32:	3303      	adds	r3, #3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f007 f985 	bl	8008f44 <atof>
 8001c3a:	e9c7 012a 	strd	r0, r1, [r7, #168]	@ 0xa8
                    gps->position.longitude = degrees + (minutes / 60.0);
 8001c3e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001c42:	f7fe fbdf 	bl	8000404 <__aeabi_i2d>
 8001c46:	4682      	mov	sl, r0
 8001c48:	468b      	mov	fp, r1
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <GPS_ParseGPRMC+0x348>)
 8001c50:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001c54:	f7fe fd6a 	bl	800072c <__aeabi_ddiv>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4650      	mov	r0, sl
 8001c5e:	4659      	mov	r1, fp
 8001c60:	f7fe fa84 	bl	800016c <__adddf3>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	e9c1 23a6 	strd	r2, r3, [r1, #664]	@ 0x298
                }
                break;
 8001c6e:	e07b      	b.n	8001d68 <GPS_ParseGPRMC+0x354>

            case 6: // E/W indicator
                if (token[0] == 'W') {
 8001c70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b57      	cmp	r3, #87	@ 0x57
 8001c78:	d178      	bne.n	8001d6c <GPS_ParseGPRMC+0x358>
                    gps->position.longitude = -gps->position.longitude;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 8001c80:	4690      	mov	r8, r2
 8001c82:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	e9c3 89a6 	strd	r8, r9, [r3, #664]	@ 0x298
                }
                break;
 8001c8c:	e06e      	b.n	8001d6c <GPS_ParseGPRMC+0x358>

            case 7: // Speed over ground (knots)
                gps->position.speed = atof(token);
 8001c8e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001c92:	f007 f957 	bl	8008f44 <atof>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	e9c1 23aa 	strd	r2, r3, [r1, #680]	@ 0x2a8
                break;
 8001ca0:	e067      	b.n	8001d72 <GPS_ParseGPRMC+0x35e>

            case 8: // Course over ground (degrees)
                gps->position.course = atof(token);
 8001ca2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001ca6:	f007 f94d 	bl	8008f44 <atof>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	e9c1 23ac 	strd	r2, r3, [r1, #688]	@ 0x2b0
                break;
 8001cb4:	e05d      	b.n	8001d72 <GPS_ParseGPRMC+0x35e>

            case 9: // Date (format: ddmmyy)
                if (strlen(token) == 6) {
 8001cb6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001cba:	f7fe fa49 	bl	8000150 <strlen>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d155      	bne.n	8001d70 <GPS_ParseGPRMC+0x35c>
                    gps->time.day = (token[0] - '0') * 10 + (token[1] - '0');
 8001cc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3b30      	subs	r3, #48	@ 0x30
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cdc:	3301      	adds	r3, #1
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3b30      	subs	r3, #48	@ 0x30
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f883 22d6 	strb.w	r2, [r3, #726]	@ 0x2d6
                    gps->time.month = (token[2] - '0') * 10 + (token[3] - '0');
 8001cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	3b30      	subs	r3, #48	@ 0x30
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d08:	3303      	adds	r3, #3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3b30      	subs	r3, #48	@ 0x30
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f883 22d7 	strb.w	r2, [r3, #727]	@ 0x2d7
                    // Convert 2-digit year to full year
                    int year = (token[4] - '0') * 10 + (token[5] - '0');
 8001d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d1e:	3304      	adds	r3, #4
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d34:	3305      	adds	r3, #5
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	3b30      	subs	r3, #48	@ 0x30
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                    gps->time.year = 2000 + year; // Assuming years after 2000
 8001d40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8a3 22d8 	strh.w	r2, [r3, #728]	@ 0x2d8
                }
                break;
 8001d52:	e00d      	b.n	8001d70 <GPS_ParseGPRMC+0x35c>
                break;
 8001d54:	bf00      	nop
 8001d56:	e00c      	b.n	8001d72 <GPS_ParseGPRMC+0x35e>
 8001d58:	0800e4c4 	.word	0x0800e4c4
 8001d5c:	404e0000 	.word	0x404e0000
                break;
 8001d60:	bf00      	nop
 8001d62:	e006      	b.n	8001d72 <GPS_ParseGPRMC+0x35e>
                break;
 8001d64:	bf00      	nop
 8001d66:	e004      	b.n	8001d72 <GPS_ParseGPRMC+0x35e>
                break;
 8001d68:	bf00      	nop
 8001d6a:	e002      	b.n	8001d72 <GPS_ParseGPRMC+0x35e>
                break;
 8001d6c:	bf00      	nop
 8001d6e:	e000      	b.n	8001d72 <GPS_ParseGPRMC+0x35e>
                break;
 8001d70:	bf00      	nop
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
 8001d72:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d76:	461a      	mov	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	@ (8001dac <GPS_ParseGPRMC+0x398>)
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f008 fd4a 	bl	800a814 <strtok_r>
 8001d80:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
 8001d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f ae67 	bne.w	8001a5c <GPS_ParseGPRMC+0x48>
        }
    }

    // If position is valid, set fix available
    if (gps->position.valid) {
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 32c9 	ldrb.w	r3, [r3, #713]	@ 0x2c9
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <GPS_ParseGPRMC+0x38c>
        gps->fix_available = 1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da
    }

    return GPS_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	37c0      	adds	r7, #192	@ 0xc0
 8001da6:	46bd      	mov	sp, r7
 8001da8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dac:	0800e530 	.word	0x0800e530

08001db0 <GPS_GetPosition>:

/**
 * @brief Get current GPS position
 */
GPS_Status GPS_GetPosition(GPS_Handle* gps, GPS_Position* position) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
    if (!gps->fix_available) {
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 32da 	ldrb.w	r3, [r3, #730]	@ 0x2da
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <GPS_GetPosition+0x18>
        return GPS_NO_FIX;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e008      	b.n	8001dda <GPS_GetPosition+0x2a>
    }

    // Copy position data
    memcpy(position, &gps->position, sizeof(GPS_Position));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8001dce:	2240      	movs	r2, #64	@ 0x40
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6838      	ldr	r0, [r7, #0]
 8001dd4:	f008 fda7 	bl	800a926 <memcpy>

    return GPS_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <GPS_GetTime>:

/**
 * @brief Get current GPS time
 */
GPS_Status GPS_GetTime(GPS_Handle* gps, GPS_Time* time) {
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
    // Copy time data
    memcpy(time, &gps->time, sizeof(GPS_Time));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001df2:	220a      	movs	r2, #10
 8001df4:	4619      	mov	r1, r3
 8001df6:	6838      	ldr	r0, [r7, #0]
 8001df8:	f008 fd95 	bl	800a926 <memcpy>

    return GPS_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <GPS_HasFix>:

/**
 * @brief Check if GPS has a valid fix
 */
uint8_t GPS_HasFix(GPS_Handle* gps) {
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
    return gps->fix_available;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 32da 	ldrb.w	r3, [r3, #730]	@ 0x2da
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
	...

08001e20 <GPS_GetECEFPosition>:
}

/**
 * @brief Convert GPS coordinates to ECEF coordinates
 */
GPS_Status GPS_GetECEFPosition(GPS_Handle* gps, ECEF_Position* ecef) {
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b08a      	sub	sp, #40	@ 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
    if (!gps->fix_available) {
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 32da 	ldrb.w	r3, [r3, #730]	@ 0x2da
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <GPS_GetECEFPosition+0x18>
        return GPS_NO_FIX;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0ce      	b.n	8001fd6 <GPS_GetECEFPosition+0x1b6>
    }

    // Convert latitude and longitude to radians
    double lat = gps->position.latitude * PI / 180.0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	e9d3 01a4 	ldrd	r0, r1, [r3, #656]	@ 0x290
 8001e3e:	a368      	add	r3, pc, #416	@ (adr r3, 8001fe0 <GPS_GetECEFPosition+0x1c0>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fb48 	bl	80004d8 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b6a      	ldr	r3, [pc, #424]	@ (8002000 <GPS_GetECEFPosition+0x1e0>)
 8001e56:	f7fe fc69 	bl	800072c <__aeabi_ddiv>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double lon = gps->position.longitude * PI / 180.0;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	e9d3 01a6 	ldrd	r0, r1, [r3, #664]	@ 0x298
 8001e68:	a35d      	add	r3, pc, #372	@ (adr r3, 8001fe0 <GPS_GetECEFPosition+0x1c0>)
 8001e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6e:	f7fe fb33 	bl	80004d8 <__aeabi_dmul>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b60      	ldr	r3, [pc, #384]	@ (8002000 <GPS_GetECEFPosition+0x1e0>)
 8001e80:	f7fe fc54 	bl	800072c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double alt = gps->position.altitude;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	@ 0x2a0
 8001e92:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Calculate N (radius of curvature in prime vertical)
    double N = GPS_WGS84_A / sqrt(1 - GPS_WGS84_E2 * sin(lat) * sin(lat));
 8001e96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e9a:	f00b fa55 	bl	800d348 <sin>
 8001e9e:	a352      	add	r3, pc, #328	@ (adr r3, 8001fe8 <GPS_GetECEFPosition+0x1c8>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fb18 	bl	80004d8 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4614      	mov	r4, r2
 8001eae:	461d      	mov	r5, r3
 8001eb0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001eb4:	f00b fa48 	bl	800d348 <sin>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fb0a 	bl	80004d8 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	f04f 0000 	mov.w	r0, #0
 8001ecc:	494d      	ldr	r1, [pc, #308]	@ (8002004 <GPS_GetECEFPosition+0x1e4>)
 8001ece:	f7fe f94b 	bl	8000168 <__aeabi_dsub>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f00b f9cb 	bl	800d274 <sqrt>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	a143      	add	r1, pc, #268	@ (adr r1, 8001ff0 <GPS_GetECEFPosition+0x1d0>)
 8001ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ee8:	f7fe fc20 	bl	800072c <__aeabi_ddiv>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Calculate ECEF coordinates
    ecef->x = (N + alt) * cos(lat) * cos(lon);
 8001ef4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ef8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001efc:	f7fe f936 	bl	800016c <__adddf3>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4614      	mov	r4, r2
 8001f06:	461d      	mov	r5, r3
 8001f08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f0c:	f00b f9d6 	bl	800d2bc <cos>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fade 	bl	80004d8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4614      	mov	r4, r2
 8001f22:	461d      	mov	r5, r3
 8001f24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f28:	f00b f9c8 	bl	800d2bc <cos>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4620      	mov	r0, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f7fe fad0 	bl	80004d8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	e9c1 2300 	strd	r2, r3, [r1]
    ecef->y = (N + alt) * cos(lat) * sin(lon);
 8001f42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f4a:	f7fe f90f 	bl	800016c <__adddf3>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4614      	mov	r4, r2
 8001f54:	461d      	mov	r5, r3
 8001f56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f5a:	f00b f9af 	bl	800d2bc <cos>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4620      	mov	r0, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	f7fe fab7 	bl	80004d8 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	461d      	mov	r5, r3
 8001f72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f76:	f00b f9e7 	bl	800d348 <sin>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe faa9 	bl	80004d8 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    ecef->z = (N * (1 - GPS_WGS84_E2) + alt) * sin(lat);
 8001f90:	a319      	add	r3, pc, #100	@ (adr r3, 8001ff8 <GPS_GetECEFPosition+0x1d8>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f9a:	f7fe fa9d 	bl	80004d8 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001faa:	f7fe f8df 	bl	800016c <__adddf3>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4614      	mov	r4, r2
 8001fb4:	461d      	mov	r5, r3
 8001fb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fba:	f00b f9c5 	bl	800d348 <sin>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	f7fe fa87 	bl	80004d8 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	6839      	ldr	r1, [r7, #0]
 8001fd0:	e9c1 2304 	strd	r2, r3, [r1, #16]

    return GPS_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3728      	adds	r7, #40	@ 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	54442d18 	.word	0x54442d18
 8001fe4:	400921fb 	.word	0x400921fb
 8001fe8:	f1fe9383 	.word	0xf1fe9383
 8001fec:	3f7b6b90 	.word	0x3f7b6b90
 8001ff0:	40000000 	.word	0x40000000
 8001ff4:	415854a6 	.word	0x415854a6
 8001ff8:	de1c02d9 	.word	0xde1c02d9
 8001ffc:	3fefc928 	.word	0x3fefc928
 8002000:	40668000 	.word	0x40668000
 8002004:	3ff00000 	.word	0x3ff00000

08002008 <GPS_GetECIPosition>:
 * @brief Convert GPS coordinates to ECI coordinates
 * @note This is a simplified conversion that doesn't account for precession,
 *       nutation, or polar motion. For more accurate results, these effects
 *       should be included.
 */
GPS_Status GPS_GetECIPosition(GPS_Handle* gps, ECI_Position* eci) {
 8002008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800200c:	b09c      	sub	sp, #112	@ 0x70
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
    if (!gps->fix_available) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 32da 	ldrb.w	r3, [r3, #730]	@ 0x2da
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <GPS_GetECIPosition+0x1a>
        return GPS_NO_FIX;
 800201e:	2303      	movs	r3, #3
 8002020:	e252      	b.n	80024c8 <GPS_GetECIPosition+0x4c0>
    }

    // First get ECEF coordinates
    ECEF_Position ecef;
    GPS_Status status = GPS_GetECEFPosition(gps, &ecef);
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	4619      	mov	r1, r3
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff fef9 	bl	8001e20 <GPS_GetECEFPosition>
 800202e:	4603      	mov	r3, r0
 8002030:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (status != GPS_OK) {
 8002034:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <GPS_GetECIPosition+0x3a>
        return status;
 800203c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002040:	e242      	b.n	80024c8 <GPS_GetECIPosition+0x4c0>
    }

    // Calculate GMST (Greenwich Mean Sidereal Time)
    // This is a simplified calculation - for better accuracy, use a proper GMST calculation
    double hours = gps->time.hour + gps->time.minute/60.0 + gps->time.second/3600.0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 32d0 	ldrb.w	r3, [r3, #720]	@ 0x2d0
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f9db 	bl	8000404 <__aeabi_i2d>
 800204e:	4680      	mov	r8, r0
 8002050:	4689      	mov	r9, r1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 32d1 	ldrb.w	r3, [r3, #721]	@ 0x2d1
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe f9d3 	bl	8000404 <__aeabi_i2d>
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4bbf      	ldr	r3, [pc, #764]	@ (8002360 <GPS_GetECIPosition+0x358>)
 8002064:	f7fe fb62 	bl	800072c <__aeabi_ddiv>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4640      	mov	r0, r8
 800206e:	4649      	mov	r1, r9
 8002070:	f7fe f87c 	bl	800016c <__adddf3>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4690      	mov	r8, r2
 800207a:	4699      	mov	r9, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 32d2 	ldrb.w	r3, [r3, #722]	@ 0x2d2
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe f9be 	bl	8000404 <__aeabi_i2d>
 8002088:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002310 <GPS_GetECIPosition+0x308>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fb4d 	bl	800072c <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4640      	mov	r0, r8
 8002098:	4649      	mov	r1, r9
 800209a:	f7fe f867 	bl	800016c <__adddf3>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double days = gps->time.day + (hours/24.0);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 32d6 	ldrb.w	r3, [r3, #726]	@ 0x2d6
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe f9a9 	bl	8000404 <__aeabi_i2d>
 80020b2:	4680      	mov	r8, r0
 80020b4:	4689      	mov	r9, r1
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	4baa      	ldr	r3, [pc, #680]	@ (8002364 <GPS_GetECIPosition+0x35c>)
 80020bc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80020c0:	f7fe fb34 	bl	800072c <__aeabi_ddiv>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4640      	mov	r0, r8
 80020ca:	4649      	mov	r1, r9
 80020cc:	f7fe f84e 	bl	800016c <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double months = gps->time.month;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 32d7 	ldrb.w	r3, [r3, #727]	@ 0x2d7
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f980 	bl	80003e4 <__aeabi_ui2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double years = gps->time.year;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8b3 32d8 	ldrh.w	r3, [r3, #728]	@ 0x2d8
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f976 	bl	80003e4 <__aeabi_ui2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    // Calculate Julian Date
    double jd = 367 * years - (int)((7 * (years + (int)((months + 9) / 12))) / 4) +
 8002100:	a385      	add	r3, pc, #532	@ (adr r3, 8002318 <GPS_GetECIPosition+0x310>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800210a:	f7fe f9e5 	bl	80004d8 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4690      	mov	r8, r2
 8002114:	4699      	mov	r9, r3
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	4b93      	ldr	r3, [pc, #588]	@ (8002368 <GPS_GetECIPosition+0x360>)
 800211c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002120:	f7fe f824 	bl	800016c <__adddf3>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b8e      	ldr	r3, [pc, #568]	@ (800236c <GPS_GetECIPosition+0x364>)
 8002132:	f7fe fafb 	bl	800072c <__aeabi_ddiv>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fc7b 	bl	8000a38 <__aeabi_d2iz>
 8002142:	4603      	mov	r3, r0
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f95d 	bl	8000404 <__aeabi_i2d>
 800214a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800214e:	f7fe f80d 	bl	800016c <__adddf3>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	4b84      	ldr	r3, [pc, #528]	@ (8002370 <GPS_GetECIPosition+0x368>)
 8002160:	f7fe f9ba 	bl	80004d8 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b80      	ldr	r3, [pc, #512]	@ (8002374 <GPS_GetECIPosition+0x36c>)
 8002172:	f7fe fadb 	bl	800072c <__aeabi_ddiv>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f7fe fc5b 	bl	8000a38 <__aeabi_d2iz>
 8002182:	4603      	mov	r3, r0
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f93d 	bl	8000404 <__aeabi_i2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4640      	mov	r0, r8
 8002190:	4649      	mov	r1, r9
 8002192:	f7fd ffe9 	bl	8000168 <__aeabi_dsub>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4690      	mov	r8, r2
 800219c:	4699      	mov	r9, r3
                (int)((275 * months) / 9) + days + 1721013.5;
 800219e:	a360      	add	r3, pc, #384	@ (adr r3, 8002320 <GPS_GetECIPosition+0x318>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80021a8:	f7fe f996 	bl	80004d8 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002368 <GPS_GetECIPosition+0x360>)
 80021ba:	f7fe fab7 	bl	800072c <__aeabi_ddiv>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	f7fe fc37 	bl	8000a38 <__aeabi_d2iz>
 80021ca:	4603      	mov	r3, r0
    double jd = 367 * years - (int)((7 * (years + (int)((months + 9) / 12))) / 4) +
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f919 	bl	8000404 <__aeabi_i2d>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4640      	mov	r0, r8
 80021d8:	4649      	mov	r1, r9
 80021da:	f7fd ffc7 	bl	800016c <__adddf3>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
                (int)((275 * months) / 9) + days + 1721013.5;
 80021e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021ea:	f7fd ffbf 	bl	800016c <__adddf3>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
    double jd = 367 * years - (int)((7 * (years + (int)((months + 9) / 12))) / 4) +
 80021f6:	a34c      	add	r3, pc, #304	@ (adr r3, 8002328 <GPS_GetECIPosition+0x320>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fd ffb6 	bl	800016c <__adddf3>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // Calculate GMST in radians
    double t = (jd - 2451545.0) / 36525.0;
 8002208:	a349      	add	r3, pc, #292	@ (adr r3, 8002330 <GPS_GetECIPosition+0x328>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002212:	f7fd ffa9 	bl	8000168 <__aeabi_dsub>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	a346      	add	r3, pc, #280	@ (adr r3, 8002338 <GPS_GetECIPosition+0x330>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fe fa82 	bl	800072c <__aeabi_ddiv>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double gmst = 280.46061837 + 360.98564736629 * (jd - 2451545.0) +
 8002230:	a33f      	add	r3, pc, #252	@ (adr r3, 8002330 <GPS_GetECIPosition+0x328>)
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800223a:	f7fd ff95 	bl	8000168 <__aeabi_dsub>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	a33e      	add	r3, pc, #248	@ (adr r3, 8002340 <GPS_GetECIPosition+0x338>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	f7fe f944 	bl	80004d8 <__aeabi_dmul>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	a33b      	add	r3, pc, #236	@ (adr r3, 8002348 <GPS_GetECIPosition+0x340>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f7fd ff85 	bl	800016c <__adddf3>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4690      	mov	r8, r2
 8002268:	4699      	mov	r9, r3
                  0.000387933 * t * t - t * t * t / 38710000.0;
 800226a:	a339      	add	r3, pc, #228	@ (adr r3, 8002350 <GPS_GetECIPosition+0x348>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002274:	f7fe f930 	bl	80004d8 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002284:	f7fe f928 	bl	80004d8 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
    double gmst = 280.46061837 + 360.98564736629 * (jd - 2451545.0) +
 800228c:	4640      	mov	r0, r8
 800228e:	4649      	mov	r1, r9
 8002290:	f7fd ff6c 	bl	800016c <__adddf3>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4690      	mov	r8, r2
 800229a:	4699      	mov	r9, r3
                  0.000387933 * t * t - t * t * t / 38710000.0;
 800229c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022a4:	f7fe f918 	bl	80004d8 <__aeabi_dmul>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022b4:	f7fe f910 	bl	80004d8 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	a325      	add	r3, pc, #148	@ (adr r3, 8002358 <GPS_GetECIPosition+0x350>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fe fa31 	bl	800072c <__aeabi_ddiv>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
    double gmst = 280.46061837 + 360.98564736629 * (jd - 2451545.0) +
 80022ce:	4640      	mov	r0, r8
 80022d0:	4649      	mov	r1, r9
 80022d2:	f7fd ff49 	bl	8000168 <__aeabi_dsub>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

    // Normalize GMST to 0-360 degrees
    while (gmst > 360.0) gmst -= 360.0;
 80022de:	e00a      	b.n	80022f6 <GPS_GetECIPosition+0x2ee>
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <GPS_GetECIPosition+0x370>)
 80022e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80022ea:	f7fd ff3d 	bl	8000168 <__aeabi_dsub>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002378 <GPS_GetECIPosition+0x370>)
 80022fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002300:	f7fe fb7a 	bl	80009f8 <__aeabi_dcmpgt>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ea      	bne.n	80022e0 <GPS_GetECIPosition+0x2d8>
    while (gmst < 0.0) gmst += 360.0;
 800230a:	e042      	b.n	8002392 <GPS_GetECIPosition+0x38a>
 800230c:	f3af 8000 	nop.w
 8002310:	00000000 	.word	0x00000000
 8002314:	40ac2000 	.word	0x40ac2000
 8002318:	00000000 	.word	0x00000000
 800231c:	4076f000 	.word	0x4076f000
 8002320:	00000000 	.word	0x00000000
 8002324:	40713000 	.word	0x40713000
 8002328:	80000000 	.word	0x80000000
 800232c:	413a42b5 	.word	0x413a42b5
 8002330:	80000000 	.word	0x80000000
 8002334:	4142b42c 	.word	0x4142b42c
 8002338:	00000000 	.word	0x00000000
 800233c:	40e1d5a0 	.word	0x40e1d5a0
 8002340:	362c39aa 	.word	0x362c39aa
 8002344:	40768fc5 	.word	0x40768fc5
 8002348:	b15e3164 	.word	0xb15e3164
 800234c:	4071875e 	.word	0x4071875e
 8002350:	8c4c4b7f 	.word	0x8c4c4b7f
 8002354:	3f396c6f 	.word	0x3f396c6f
 8002358:	80000000 	.word	0x80000000
 800235c:	41827557 	.word	0x41827557
 8002360:	404e0000 	.word	0x404e0000
 8002364:	40380000 	.word	0x40380000
 8002368:	40220000 	.word	0x40220000
 800236c:	40280000 	.word	0x40280000
 8002370:	401c0000 	.word	0x401c0000
 8002374:	40100000 	.word	0x40100000
 8002378:	40768000 	.word	0x40768000
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	4b59      	ldr	r3, [pc, #356]	@ (80024e8 <GPS_GetECIPosition+0x4e0>)
 8002382:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002386:	f7fd fef1 	bl	800016c <__adddf3>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800239e:	f7fe fb0d 	bl	80009bc <__aeabi_dcmplt>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e9      	bne.n	800237c <GPS_GetECIPosition+0x374>

    // Convert to radians
    double theta = gmst * PI / 180.0;
 80023a8:	a34b      	add	r3, pc, #300	@ (adr r3, 80024d8 <GPS_GetECIPosition+0x4d0>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023b2:	f7fe f891 	bl	80004d8 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	4b4a      	ldr	r3, [pc, #296]	@ (80024ec <GPS_GetECIPosition+0x4e4>)
 80023c4:	f7fe f9b2 	bl	800072c <__aeabi_ddiv>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Convert ECEF to ECI
    eci->x = ecef.x * cos(theta) - ecef.y * sin(theta);
 80023d0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80023d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023d8:	f00a ff70 	bl	800d2bc <cos>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4640      	mov	r0, r8
 80023e2:	4649      	mov	r1, r9
 80023e4:	f7fe f878 	bl	80004d8 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4692      	mov	sl, r2
 80023ee:	469b      	mov	fp, r3
 80023f0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023f8:	f00a ffa6 	bl	800d348 <sin>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4640      	mov	r0, r8
 8002402:	4649      	mov	r1, r9
 8002404:	f7fe f868 	bl	80004d8 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4650      	mov	r0, sl
 800240e:	4659      	mov	r1, fp
 8002410:	f7fd feaa 	bl	8000168 <__aeabi_dsub>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	e9c1 2300 	strd	r2, r3, [r1]
    eci->y = ecef.x * sin(theta) + ecef.y * cos(theta);
 800241e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002422:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002426:	f00a ff8f 	bl	800d348 <sin>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4640      	mov	r0, r8
 8002430:	4649      	mov	r1, r9
 8002432:	f7fe f851 	bl	80004d8 <__aeabi_dmul>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4692      	mov	sl, r2
 800243c:	469b      	mov	fp, r3
 800243e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002442:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002446:	f00a ff39 	bl	800d2bc <cos>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4640      	mov	r0, r8
 8002450:	4649      	mov	r1, r9
 8002452:	f7fe f841 	bl	80004d8 <__aeabi_dmul>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4650      	mov	r0, sl
 800245c:	4659      	mov	r1, fp
 800245e:	f7fd fe85 	bl	800016c <__adddf3>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	e9c1 2302 	strd	r2, r3, [r1, #8]
    eci->z = ecef.z;
 800246c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	e9c1 2304 	strd	r2, r3, [r1, #16]

    // Calculate velocities (simplified - only accounts for Earth's rotation)
    double omega_earth = EARTH_ROTATION_RATE; // Earth's rotation rate in rad/s
 8002476:	a31a      	add	r3, pc, #104	@ (adr r3, 80024e0 <GPS_GetECIPosition+0x4d8>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    eci->vx = -omega_earth * eci->y;
 8002480:	6a3c      	ldr	r4, [r7, #32]
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800248e:	4620      	mov	r0, r4
 8002490:	4629      	mov	r1, r5
 8002492:	f7fe f821 	bl	80004d8 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    eci->vy = omega_earth * eci->x;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024aa:	f7fe f815 	bl	80004d8 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    eci->vz = 0.0;
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    return GPS_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3770      	adds	r7, #112	@ 0x70
 80024cc:	46bd      	mov	sp, r7
 80024ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d2:	bf00      	nop
 80024d4:	f3af 8000 	nop.w
 80024d8:	54442d18 	.word	0x54442d18
 80024dc:	400921fb 	.word	0x400921fb
 80024e0:	d157db65 	.word	0xd157db65
 80024e4:	3f131da7 	.word	0x3f131da7
 80024e8:	40768000 	.word	0x40768000
 80024ec:	40668000 	.word	0x40668000

080024f0 <PrintDebugMessage>:

/**
 * @brief Print debug message via UART1
 * @param message String message to print
 */
void PrintDebugMessage(const char* message) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 100);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7fd fe29 	bl	8000150 <strlen>
 80024fe:	4603      	mov	r3, r0
 8002500:	b29a      	uxth	r2, r3
 8002502:	2364      	movs	r3, #100	@ 0x64
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4803      	ldr	r0, [pc, #12]	@ (8002514 <PrintDebugMessage+0x24>)
 8002508:	f005 ff02 	bl	8008310 <HAL_UART_Transmit>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200002d0 	.word	0x200002d0

08002518 <TestGPSData>:

/**
 * @brief Test GPS data by retrieving and displaying position, time, and coordinates
 */
void TestGPSData(void) {
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251a:	b0ad      	sub	sp, #180	@ 0xb4
 800251c:	af06      	add	r7, sp, #24
    GPS_Time time;
    ECEF_Position ecef;
    ECI_Position eci;

    // Print separator for readability
    PrintDebugMessage("\r\n--------- GPS TEST ---------\r\n");
 800251e:	4861      	ldr	r0, [pc, #388]	@ (80026a4 <TestGPSData+0x18c>)
 8002520:	f7ff ffe6 	bl	80024f0 <PrintDebugMessage>

    // Check if GPS has fix
    if (GPS_HasFix(&gps_handle)) {
 8002524:	4860      	ldr	r0, [pc, #384]	@ (80026a8 <TestGPSData+0x190>)
 8002526:	f7ff fc6e 	bl	8001e06 <GPS_HasFix>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80af 	beq.w	8002690 <TestGPSData+0x178>
        PrintDebugMessage("GPS Fix: VALID\r\n");
 8002532:	485e      	ldr	r0, [pc, #376]	@ (80026ac <TestGPSData+0x194>)
 8002534:	f7ff ffdc 	bl	80024f0 <PrintDebugMessage>

        // Get and display position
        if (GPS_GetPosition(&gps_handle, &position) == GPS_OK) {
 8002538:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800253c:	4619      	mov	r1, r3
 800253e:	485a      	ldr	r0, [pc, #360]	@ (80026a8 <TestGPSData+0x190>)
 8002540:	f7ff fc36 	bl	8001db0 <GPS_GetPosition>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d130      	bne.n	80025ac <TestGPSData+0x94>
            sprintf(debug_buffer, "Latitude: %.6f\r\nLongitude: %.6f\r\nAltitude: %.2f m\r\n",
 800254a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800254e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800255a:	e9cd 2300 	strd	r2, r3, [sp]
 800255e:	4622      	mov	r2, r4
 8002560:	462b      	mov	r3, r5
 8002562:	4953      	ldr	r1, [pc, #332]	@ (80026b0 <TestGPSData+0x198>)
 8002564:	4853      	ldr	r0, [pc, #332]	@ (80026b4 <TestGPSData+0x19c>)
 8002566:	f008 f89d 	bl	800a6a4 <siprintf>
                    position.latitude, position.longitude, position.altitude);
            PrintDebugMessage(debug_buffer);
 800256a:	4852      	ldr	r0, [pc, #328]	@ (80026b4 <TestGPSData+0x19c>)
 800256c:	f7ff ffc0 	bl	80024f0 <PrintDebugMessage>

            sprintf(debug_buffer, "Satellites: %d\r\nHDOP: %.2f\r\n",
                    position.satellites, position.hdop);
 8002570:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
            sprintf(debug_buffer, "Satellites: %d\r\nHDOP: %.2f\r\n",
 8002574:	4619      	mov	r1, r3
 8002576:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800257a:	e9cd 2300 	strd	r2, r3, [sp]
 800257e:	460a      	mov	r2, r1
 8002580:	494d      	ldr	r1, [pc, #308]	@ (80026b8 <TestGPSData+0x1a0>)
 8002582:	484c      	ldr	r0, [pc, #304]	@ (80026b4 <TestGPSData+0x19c>)
 8002584:	f008 f88e 	bl	800a6a4 <siprintf>
            PrintDebugMessage(debug_buffer);
 8002588:	484a      	ldr	r0, [pc, #296]	@ (80026b4 <TestGPSData+0x19c>)
 800258a:	f7ff ffb1 	bl	80024f0 <PrintDebugMessage>

            sprintf(debug_buffer, "Speed: %.2f knots\r\nCourse: %.2f degrees\r\n",
 800258e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002592:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002596:	e9cd 2300 	strd	r2, r3, [sp]
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4947      	ldr	r1, [pc, #284]	@ (80026bc <TestGPSData+0x1a4>)
 80025a0:	4844      	ldr	r0, [pc, #272]	@ (80026b4 <TestGPSData+0x19c>)
 80025a2:	f008 f87f 	bl	800a6a4 <siprintf>
                    position.speed, position.course);
            PrintDebugMessage(debug_buffer);
 80025a6:	4843      	ldr	r0, [pc, #268]	@ (80026b4 <TestGPSData+0x19c>)
 80025a8:	f7ff ffa2 	bl	80024f0 <PrintDebugMessage>
        }

        // Get and display time
        if (GPS_GetTime(&gps_handle, &time) == GPS_OK) {
 80025ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80025b0:	4619      	mov	r1, r3
 80025b2:	483d      	ldr	r0, [pc, #244]	@ (80026a8 <TestGPSData+0x190>)
 80025b4:	f7ff fc15 	bl	8001de2 <GPS_GetTime>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d11d      	bne.n	80025fa <TestGPSData+0xe2>
            sprintf(debug_buffer, "UTC Time: %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
                    time.day, time.month, time.year,
 80025be:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
            sprintf(debug_buffer, "UTC Time: %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 80025c2:	461d      	mov	r5, r3
                    time.day, time.month, time.year,
 80025c4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
            sprintf(debug_buffer, "UTC Time: %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 80025c8:	461e      	mov	r6, r3
                    time.day, time.month, time.year,
 80025ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
                    time.hour, time.minute, time.second, time.millisecond);
 80025ce:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80025d2:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 80025d6:	f897 004e 	ldrb.w	r0, [r7, #78]	@ 0x4e
 80025da:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
            sprintf(debug_buffer, "UTC Time: %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 80025de:	9404      	str	r4, [sp, #16]
 80025e0:	9003      	str	r0, [sp, #12]
 80025e2:	9102      	str	r1, [sp, #8]
 80025e4:	9201      	str	r2, [sp, #4]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4633      	mov	r3, r6
 80025ea:	462a      	mov	r2, r5
 80025ec:	4934      	ldr	r1, [pc, #208]	@ (80026c0 <TestGPSData+0x1a8>)
 80025ee:	4831      	ldr	r0, [pc, #196]	@ (80026b4 <TestGPSData+0x19c>)
 80025f0:	f008 f858 	bl	800a6a4 <siprintf>
            PrintDebugMessage(debug_buffer);
 80025f4:	482f      	ldr	r0, [pc, #188]	@ (80026b4 <TestGPSData+0x19c>)
 80025f6:	f7ff ff7b 	bl	80024f0 <PrintDebugMessage>
        }

        // Get and display ECEF coordinates
        if (GPS_GetECEFPosition(&gps_handle, &ecef) == GPS_OK) {
 80025fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025fe:	4619      	mov	r1, r3
 8002600:	4829      	ldr	r0, [pc, #164]	@ (80026a8 <TestGPSData+0x190>)
 8002602:	f7ff fc0d 	bl	8001e20 <GPS_GetECEFPosition>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d112      	bne.n	8002632 <TestGPSData+0x11a>
            sprintf(debug_buffer, "ECEF Position:\r\nX: %.2f m\r\nY: %.2f m\r\nZ: %.2f m\r\n",
 800260c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002614:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800261c:	e9cd 2300 	strd	r2, r3, [sp]
 8002620:	4622      	mov	r2, r4
 8002622:	462b      	mov	r3, r5
 8002624:	4927      	ldr	r1, [pc, #156]	@ (80026c4 <TestGPSData+0x1ac>)
 8002626:	4823      	ldr	r0, [pc, #140]	@ (80026b4 <TestGPSData+0x19c>)
 8002628:	f008 f83c 	bl	800a6a4 <siprintf>
                    ecef.x, ecef.y, ecef.z);
            PrintDebugMessage(debug_buffer);
 800262c:	4821      	ldr	r0, [pc, #132]	@ (80026b4 <TestGPSData+0x19c>)
 800262e:	f7ff ff5f 	bl	80024f0 <PrintDebugMessage>
        }

        // Get and display ECI coordinates
        if (GPS_GetECIPosition(&gps_handle, &eci) == GPS_OK) {
 8002632:	463b      	mov	r3, r7
 8002634:	4619      	mov	r1, r3
 8002636:	481c      	ldr	r0, [pc, #112]	@ (80026a8 <TestGPSData+0x190>)
 8002638:	f7ff fce6 	bl	8002008 <GPS_GetECIPosition>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d129      	bne.n	8002696 <TestGPSData+0x17e>
            sprintf(debug_buffer, "ECI Position:\r\nX: %.2f m\r\nY: %.2f m\r\nZ: %.2f m\r\n",
 8002642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800264e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002652:	e9cd 2300 	strd	r2, r3, [sp]
 8002656:	4622      	mov	r2, r4
 8002658:	462b      	mov	r3, r5
 800265a:	491b      	ldr	r1, [pc, #108]	@ (80026c8 <TestGPSData+0x1b0>)
 800265c:	4815      	ldr	r0, [pc, #84]	@ (80026b4 <TestGPSData+0x19c>)
 800265e:	f008 f821 	bl	800a6a4 <siprintf>
                    eci.x, eci.y, eci.z);
            PrintDebugMessage(debug_buffer);
 8002662:	4814      	ldr	r0, [pc, #80]	@ (80026b4 <TestGPSData+0x19c>)
 8002664:	f7ff ff44 	bl	80024f0 <PrintDebugMessage>

            sprintf(debug_buffer, "ECI Velocity:\r\nVx: %.2f m/s\r\nVy: %.2f m/s\r\nVz: %.2f m/s\r\n",
 8002668:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800266c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002670:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002678:	e9cd 2300 	strd	r2, r3, [sp]
 800267c:	4622      	mov	r2, r4
 800267e:	462b      	mov	r3, r5
 8002680:	4912      	ldr	r1, [pc, #72]	@ (80026cc <TestGPSData+0x1b4>)
 8002682:	480c      	ldr	r0, [pc, #48]	@ (80026b4 <TestGPSData+0x19c>)
 8002684:	f008 f80e 	bl	800a6a4 <siprintf>
                    eci.vx, eci.vy, eci.vz);
            PrintDebugMessage(debug_buffer);
 8002688:	480a      	ldr	r0, [pc, #40]	@ (80026b4 <TestGPSData+0x19c>)
 800268a:	f7ff ff31 	bl	80024f0 <PrintDebugMessage>
 800268e:	e002      	b.n	8002696 <TestGPSData+0x17e>
        }
    } else {
        PrintDebugMessage("GPS Fix: NO FIX\r\n");
 8002690:	480f      	ldr	r0, [pc, #60]	@ (80026d0 <TestGPSData+0x1b8>)
 8002692:	f7ff ff2d 	bl	80024f0 <PrintDebugMessage>
    }

    PrintDebugMessage("-----------------------------\r\n");
 8002696:	480f      	ldr	r0, [pc, #60]	@ (80026d4 <TestGPSData+0x1bc>)
 8002698:	f7ff ff2a 	bl	80024f0 <PrintDebugMessage>
}
 800269c:	bf00      	nop
 800269e:	379c      	adds	r7, #156	@ 0x9c
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a4:	0800e5e8 	.word	0x0800e5e8
 80026a8:	20000460 	.word	0x20000460
 80026ac:	0800e60c 	.word	0x0800e60c
 80026b0:	0800e620 	.word	0x0800e620
 80026b4:	20000360 	.word	0x20000360
 80026b8:	0800e654 	.word	0x0800e654
 80026bc:	0800e674 	.word	0x0800e674
 80026c0:	0800e6a0 	.word	0x0800e6a0
 80026c4:	0800e6d0 	.word	0x0800e6d0
 80026c8:	0800e704 	.word	0x0800e704
 80026cc:	0800e738 	.word	0x0800e738
 80026d0:	0800e774 	.word	0x0800e774
 80026d4:	0800e788 	.word	0x0800e788

080026d8 <TestMPU6050Data>:

/**
 * @brief Test MPU6050 data by retrieving and displaying accelerometer and gyroscope readings
 */
void TestMPU6050Data(void) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
    // Read all data from MPU6050
    if (MPU6050_ReadAllData(&mpu6050_handle) == MPU6050_OK) {
 80026dc:	4808      	ldr	r0, [pc, #32]	@ (8002700 <TestMPU6050Data+0x28>)
 80026de:	f000 fc9d 	bl	800301c <MPU6050_ReadAllData>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <TestMPU6050Data+0x1e>
        // Print data through debug UART
        MPU6050_Print(&mpu6050_handle, &huart1);
 80026e8:	4906      	ldr	r1, [pc, #24]	@ (8002704 <TestMPU6050Data+0x2c>)
 80026ea:	4805      	ldr	r0, [pc, #20]	@ (8002700 <TestMPU6050Data+0x28>)
 80026ec:	f000 fe3a 	bl	8003364 <MPU6050_Print>

        // Call motor control update function
        UpdateMotorControl();
 80026f0:	f000 f80c 	bl	800270c <UpdateMotorControl>
    } else {
        PrintDebugMessage("Error reading MPU6050 data\r\n");
    }
}
 80026f4:	e002      	b.n	80026fc <TestMPU6050Data+0x24>
        PrintDebugMessage("Error reading MPU6050 data\r\n");
 80026f6:	4804      	ldr	r0, [pc, #16]	@ (8002708 <TestMPU6050Data+0x30>)
 80026f8:	f7ff fefa 	bl	80024f0 <PrintDebugMessage>
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000740 	.word	0x20000740
 8002704:	200002d0 	.word	0x200002d0
 8002708:	0800e7a8 	.word	0x0800e7a8

0800270c <UpdateMotorControl>:

/**
 * @brief Update motor control based on MPU6050 readings
 * This is a simple placeholder for the future PID controller
 */
void UpdateMotorControl(void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
    // Simple proportional control for demonstration purposes
    // Will be replaced with full PID controller later

    // Use gyro data for motor control (more responsive for orientation control)
    // X-axis control
    float x_position = mpu6050_handle.scaledGyro.x;
 8002712:	4b58      	ldr	r3, [pc, #352]	@ (8002874 <UpdateMotorControl+0x168>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	607b      	str	r3, [r7, #4]

    // Map gyro readings to PWM values (0-1000)
    // Note: This is very basic and will be replaced with PID controller
    if (x_position > 5.0f) {
 8002718:	4957      	ldr	r1, [pc, #348]	@ (8002878 <UpdateMotorControl+0x16c>)
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fc9e 	bl	800105c <__aeabi_fcmpgt>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d014      	beq.n	8002750 <UpdateMotorControl+0x44>
        // Tilting right - reduce right motor speed
        motor_x_pwm = 500 - (uint16_t)((x_position - 5.0f) * 20.0f);
 8002726:	4954      	ldr	r1, [pc, #336]	@ (8002878 <UpdateMotorControl+0x16c>)
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7fe f9d1 	bl	8000ad0 <__aeabi_fsub>
 800272e:	4603      	mov	r3, r0
 8002730:	4952      	ldr	r1, [pc, #328]	@ (800287c <UpdateMotorControl+0x170>)
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fad6 	bl	8000ce4 <__aeabi_fmul>
 8002738:	4603      	mov	r3, r0
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fc98 	bl	8001070 <__aeabi_f2uiz>
 8002740:	4603      	mov	r3, r0
 8002742:	b29b      	uxth	r3, r3
 8002744:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002748:	b29a      	uxth	r2, r3
 800274a:	4b4d      	ldr	r3, [pc, #308]	@ (8002880 <UpdateMotorControl+0x174>)
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	e02b      	b.n	80027a8 <UpdateMotorControl+0x9c>
        if (motor_x_pwm < 0) motor_x_pwm = 0;
    } else if (x_position < -5.0f) {
 8002750:	494c      	ldr	r1, [pc, #304]	@ (8002884 <UpdateMotorControl+0x178>)
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7fe fc64 	bl	8001020 <__aeabi_fcmplt>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d020      	beq.n	80027a0 <UpdateMotorControl+0x94>
        // Tilting left - increase right motor speed
        motor_x_pwm = 500 + (uint16_t)((-x_position - 5.0f) * 20.0f);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002764:	4944      	ldr	r1, [pc, #272]	@ (8002878 <UpdateMotorControl+0x16c>)
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe f9b2 	bl	8000ad0 <__aeabi_fsub>
 800276c:	4603      	mov	r3, r0
 800276e:	4943      	ldr	r1, [pc, #268]	@ (800287c <UpdateMotorControl+0x170>)
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fab7 	bl	8000ce4 <__aeabi_fmul>
 8002776:	4603      	mov	r3, r0
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fc79 	bl	8001070 <__aeabi_f2uiz>
 800277e:	4603      	mov	r3, r0
 8002780:	b29b      	uxth	r3, r3
 8002782:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b3d      	ldr	r3, [pc, #244]	@ (8002880 <UpdateMotorControl+0x174>)
 800278a:	801a      	strh	r2, [r3, #0]
        if (motor_x_pwm > 999) motor_x_pwm = 999;
 800278c:	4b3c      	ldr	r3, [pc, #240]	@ (8002880 <UpdateMotorControl+0x174>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002794:	d308      	bcc.n	80027a8 <UpdateMotorControl+0x9c>
 8002796:	4b3a      	ldr	r3, [pc, #232]	@ (8002880 <UpdateMotorControl+0x174>)
 8002798:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	e003      	b.n	80027a8 <UpdateMotorControl+0x9c>
    } else {
        // Near level - maintain moderate speed
        motor_x_pwm = 500;
 80027a0:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <UpdateMotorControl+0x174>)
 80027a2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80027a6:	801a      	strh	r2, [r3, #0]
    }

    // Y-axis control
    float y_position = mpu6050_handle.scaledGyro.y;
 80027a8:	4b32      	ldr	r3, [pc, #200]	@ (8002874 <UpdateMotorControl+0x168>)
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	603b      	str	r3, [r7, #0]

    // Map gyro readings to PWM values (0-1000)
    if (y_position > 5.0f) {
 80027ae:	4932      	ldr	r1, [pc, #200]	@ (8002878 <UpdateMotorControl+0x16c>)
 80027b0:	6838      	ldr	r0, [r7, #0]
 80027b2:	f7fe fc53 	bl	800105c <__aeabi_fcmpgt>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d014      	beq.n	80027e6 <UpdateMotorControl+0xda>
        // Tilting forward - reduce forward motor speed
        motor_y_pwm = 500 - (uint16_t)((y_position - 5.0f) * 20.0f);
 80027bc:	492e      	ldr	r1, [pc, #184]	@ (8002878 <UpdateMotorControl+0x16c>)
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	f7fe f986 	bl	8000ad0 <__aeabi_fsub>
 80027c4:	4603      	mov	r3, r0
 80027c6:	492d      	ldr	r1, [pc, #180]	@ (800287c <UpdateMotorControl+0x170>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fa8b 	bl	8000ce4 <__aeabi_fmul>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fc4d 	bl	8001070 <__aeabi_f2uiz>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 80027de:	b29a      	uxth	r2, r3
 80027e0:	4b29      	ldr	r3, [pc, #164]	@ (8002888 <UpdateMotorControl+0x17c>)
 80027e2:	801a      	strh	r2, [r3, #0]
 80027e4:	e02b      	b.n	800283e <UpdateMotorControl+0x132>
        if (motor_y_pwm < 0) motor_y_pwm = 0;
    } else if (y_position < -5.0f) {
 80027e6:	4927      	ldr	r1, [pc, #156]	@ (8002884 <UpdateMotorControl+0x178>)
 80027e8:	6838      	ldr	r0, [r7, #0]
 80027ea:	f7fe fc19 	bl	8001020 <__aeabi_fcmplt>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <UpdateMotorControl+0x12a>
        // Tilting backward - increase forward motor speed
        motor_y_pwm = 500 + (uint16_t)((-y_position - 5.0f) * 20.0f);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80027fa:	491f      	ldr	r1, [pc, #124]	@ (8002878 <UpdateMotorControl+0x16c>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe f967 	bl	8000ad0 <__aeabi_fsub>
 8002802:	4603      	mov	r3, r0
 8002804:	491d      	ldr	r1, [pc, #116]	@ (800287c <UpdateMotorControl+0x170>)
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fa6c 	bl	8000ce4 <__aeabi_fmul>
 800280c:	4603      	mov	r3, r0
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fc2e 	bl	8001070 <__aeabi_f2uiz>
 8002814:	4603      	mov	r3, r0
 8002816:	b29b      	uxth	r3, r3
 8002818:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800281c:	b29a      	uxth	r2, r3
 800281e:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <UpdateMotorControl+0x17c>)
 8002820:	801a      	strh	r2, [r3, #0]
        if (motor_y_pwm > 999) motor_y_pwm = 999;
 8002822:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <UpdateMotorControl+0x17c>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800282a:	d308      	bcc.n	800283e <UpdateMotorControl+0x132>
 800282c:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <UpdateMotorControl+0x17c>)
 800282e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	e003      	b.n	800283e <UpdateMotorControl+0x132>
    } else {
        // Near level - maintain moderate speed
        motor_y_pwm = 500;
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <UpdateMotorControl+0x17c>)
 8002838:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800283c:	801a      	strh	r2, [r3, #0]
    }

    // Update PWM channels for motors
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_x_pwm);
 800283e:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <UpdateMotorControl+0x174>)
 8002840:	881a      	ldrh	r2, [r3, #0]
 8002842:	4b12      	ldr	r3, [pc, #72]	@ (800288c <UpdateMotorControl+0x180>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_y_pwm);
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <UpdateMotorControl+0x17c>)
 800284a:	881a      	ldrh	r2, [r3, #0]
 800284c:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <UpdateMotorControl+0x180>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	639a      	str	r2, [r3, #56]	@ 0x38

    // Print motor control values
    sprintf(debug_buffer, "Motor PWM - X: %d, Y: %d\r\n", motor_x_pwm, motor_y_pwm);
 8002852:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <UpdateMotorControl+0x174>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <UpdateMotorControl+0x17c>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	490c      	ldr	r1, [pc, #48]	@ (8002890 <UpdateMotorControl+0x184>)
 800285e:	480d      	ldr	r0, [pc, #52]	@ (8002894 <UpdateMotorControl+0x188>)
 8002860:	f007 ff20 	bl	800a6a4 <siprintf>
    PrintDebugMessage(debug_buffer);
 8002864:	480b      	ldr	r0, [pc, #44]	@ (8002894 <UpdateMotorControl+0x188>)
 8002866:	f7ff fe43 	bl	80024f0 <PrintDebugMessage>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000740 	.word	0x20000740
 8002878:	40a00000 	.word	0x40a00000
 800287c:	41a00000 	.word	0x41a00000
 8002880:	20000784 	.word	0x20000784
 8002884:	c0a00000 	.word	0xc0a00000
 8002888:	20000786 	.word	0x20000786
 800288c:	20000288 	.word	0x20000288
 8002890:	0800e7c8 	.word	0x0800e7c8
 8002894:	20000360 	.word	0x20000360

08002898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800289e:	f001 f99f 	bl	8003be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028a2:	f000 f899 	bl	80029d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028a6:	f000 f9f3 	bl	8002c90 <MX_GPIO_Init>
  MX_ADC1_Init();
 80028aa:	f000 f8e5 	bl	8002a78 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80028ae:	f000 f99b 	bl	8002be8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80028b2:	f000 f935 	bl	8002b20 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80028b6:	f000 f9c1 	bl	8002c3c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80028ba:	f000 f903 	bl	8002ac4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize GPS with UART3 for GPS communication
  PrintDebugMessage("\r\n\r\nCubeSat System Starting...\r\n");
 80028be:	4835      	ldr	r0, [pc, #212]	@ (8002994 <main+0xfc>)
 80028c0:	f7ff fe16 	bl	80024f0 <PrintDebugMessage>

  // Initialize GPS
  PrintDebugMessage("Initializing GPS module...\r\n");
 80028c4:	4834      	ldr	r0, [pc, #208]	@ (8002998 <main+0x100>)
 80028c6:	f7ff fe13 	bl	80024f0 <PrintDebugMessage>
  GPS_Status gps_status = GPS_Init(&gps_handle, &huart3);
 80028ca:	4934      	ldr	r1, [pc, #208]	@ (800299c <main+0x104>)
 80028cc:	4834      	ldr	r0, [pc, #208]	@ (80029a0 <main+0x108>)
 80028ce:	f7fe fc25 	bl	800111c <GPS_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
  if (gps_status == GPS_OK) {
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <main+0x4c>
      PrintDebugMessage("GPS Initialized Successfully\r\n");
 80028dc:	4831      	ldr	r0, [pc, #196]	@ (80029a4 <main+0x10c>)
 80028de:	f7ff fe07 	bl	80024f0 <PrintDebugMessage>
 80028e2:	e002      	b.n	80028ea <main+0x52>
  } else {
      PrintDebugMessage("GPS Initialization Failed\r\n");
 80028e4:	4830      	ldr	r0, [pc, #192]	@ (80029a8 <main+0x110>)
 80028e6:	f7ff fe03 	bl	80024f0 <PrintDebugMessage>
  }

  // Initialize MPU6050
  PrintDebugMessage("Initializing MPU6050 module...\r\n");
 80028ea:	4830      	ldr	r0, [pc, #192]	@ (80029ac <main+0x114>)
 80028ec:	f7ff fe00 	bl	80024f0 <PrintDebugMessage>
  MPU6050_Status mpu_status = MPU6050_Init(&mpu6050_handle, &hi2c1);
 80028f0:	492f      	ldr	r1, [pc, #188]	@ (80029b0 <main+0x118>)
 80028f2:	4830      	ldr	r0, [pc, #192]	@ (80029b4 <main+0x11c>)
 80028f4:	f000 fa26 	bl	8002d44 <MPU6050_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	71bb      	strb	r3, [r7, #6]
  if (mpu_status == MPU6050_OK) {
 80028fc:	79bb      	ldrb	r3, [r7, #6]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d114      	bne.n	800292c <main+0x94>
      PrintDebugMessage("MPU6050 Initialized Successfully\r\n");
 8002902:	482d      	ldr	r0, [pc, #180]	@ (80029b8 <main+0x120>)
 8002904:	f7ff fdf4 	bl	80024f0 <PrintDebugMessage>

      // Calibrate MPU6050
      PrintDebugMessage("Calibrating MPU6050...\r\n");
 8002908:	482c      	ldr	r0, [pc, #176]	@ (80029bc <main+0x124>)
 800290a:	f7ff fdf1 	bl	80024f0 <PrintDebugMessage>
      if (MPU6050_Calibrate(&mpu6050_handle, 100) == MPU6050_OK) {
 800290e:	2164      	movs	r1, #100	@ 0x64
 8002910:	4828      	ldr	r0, [pc, #160]	@ (80029b4 <main+0x11c>)
 8002912:	f000 fcba 	bl	800328a <MPU6050_Calibrate>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d103      	bne.n	8002924 <main+0x8c>
          PrintDebugMessage("MPU6050 Calibration Complete\r\n");
 800291c:	4828      	ldr	r0, [pc, #160]	@ (80029c0 <main+0x128>)
 800291e:	f7ff fde7 	bl	80024f0 <PrintDebugMessage>
 8002922:	e006      	b.n	8002932 <main+0x9a>
      } else {
          PrintDebugMessage("MPU6050 Calibration Failed\r\n");
 8002924:	4827      	ldr	r0, [pc, #156]	@ (80029c4 <main+0x12c>)
 8002926:	f7ff fde3 	bl	80024f0 <PrintDebugMessage>
 800292a:	e002      	b.n	8002932 <main+0x9a>
      }
  } else {
      PrintDebugMessage("MPU6050 Initialization Failed\r\n");
 800292c:	4826      	ldr	r0, [pc, #152]	@ (80029c8 <main+0x130>)
 800292e:	f7ff fddf 	bl	80024f0 <PrintDebugMessage>
  }

  // Start PWM for motor control
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // X-axis motor
 8002932:	2100      	movs	r1, #0
 8002934:	4825      	ldr	r0, [pc, #148]	@ (80029cc <main+0x134>)
 8002936:	f005 f8bf 	bl	8007ab8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);  // Y-axis motor
 800293a:	2104      	movs	r1, #4
 800293c:	4823      	ldr	r0, [pc, #140]	@ (80029cc <main+0x134>)
 800293e:	f005 f8bb 	bl	8007ab8 <HAL_TIM_PWM_Start>

  // Set initial motor speeds to mid-range (500 out of 999)
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 500);
 8002942:	4b22      	ldr	r3, [pc, #136]	@ (80029cc <main+0x134>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);
 800294c:	4b1f      	ldr	r3, [pc, #124]	@ (80029cc <main+0x134>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002954:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Process GPS data
    GPS_Process(&gps_handle);
 8002956:	4812      	ldr	r0, [pc, #72]	@ (80029a0 <main+0x108>)
 8002958:	f7fe fc19 	bl	800118e <GPS_Process>

    // Periodically test and display GPS data
    uint32_t current_time = HAL_GetTick();
 800295c:	f001 f998 	bl	8003c90 <HAL_GetTick>
 8002960:	6038      	str	r0, [r7, #0]
    if (current_time - last_gps_test_time >= GPS_TEST_INTERVAL) {
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <main+0x138>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800296e:	d304      	bcc.n	800297a <main+0xe2>
        last_gps_test_time = current_time;
 8002970:	4a17      	ldr	r2, [pc, #92]	@ (80029d0 <main+0x138>)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6013      	str	r3, [r2, #0]
        TestGPSData();
 8002976:	f7ff fdcf 	bl	8002518 <TestGPSData>
    }

    // Periodically test and display MPU6050 data
    if (current_time - last_mpu_test_time >= MPU6050_TEST_INTERVAL) {
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <main+0x13c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002986:	d3e6      	bcc.n	8002956 <main+0xbe>
        last_mpu_test_time = current_time;
 8002988:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <main+0x13c>)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6013      	str	r3, [r2, #0]
        TestMPU6050Data();
 800298e:	f7ff fea3 	bl	80026d8 <TestMPU6050Data>
  {
 8002992:	e7e0      	b.n	8002956 <main+0xbe>
 8002994:	0800e7e4 	.word	0x0800e7e4
 8002998:	0800e808 	.word	0x0800e808
 800299c:	20000318 	.word	0x20000318
 80029a0:	20000460 	.word	0x20000460
 80029a4:	0800e828 	.word	0x0800e828
 80029a8:	0800e848 	.word	0x0800e848
 80029ac:	0800e864 	.word	0x0800e864
 80029b0:	20000234 	.word	0x20000234
 80029b4:	20000740 	.word	0x20000740
 80029b8:	0800e888 	.word	0x0800e888
 80029bc:	0800e8ac 	.word	0x0800e8ac
 80029c0:	0800e8c8 	.word	0x0800e8c8
 80029c4:	0800e8e8 	.word	0x0800e8e8
 80029c8:	0800e908 	.word	0x0800e908
 80029cc:	20000288 	.word	0x20000288
 80029d0:	2000077c 	.word	0x2000077c
 80029d4:	20000780 	.word	0x20000780

080029d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b094      	sub	sp, #80	@ 0x50
 80029dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029e2:	2228      	movs	r2, #40	@ 0x28
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f007 febf 	bl	800a76a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a10:	2310      	movs	r3, #16
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fb35 	bl	800708c <HAL_RCC_OscConfig>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002a28:	f000 f986 	bl	8002d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a2c:	230f      	movs	r3, #15
 8002a2e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 fda2 	bl	8007590 <HAL_RCC_ClockConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002a52:	f000 f971 	bl	8002d38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a56:	2302      	movs	r3, #2
 8002a58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 ff23 	bl	80078ac <HAL_RCCEx_PeriphCLKConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a6c:	f000 f964 	bl	8002d38 <Error_Handler>
  }
}
 8002a70:	bf00      	nop
 8002a72:	3750      	adds	r7, #80	@ 0x50
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <MX_ADC1_Init+0x44>)
 8002a7e:	4a10      	ldr	r2, [pc, #64]	@ (8002ac0 <MX_ADC1_Init+0x48>)
 8002a80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <MX_ADC1_Init+0x44>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <MX_ADC1_Init+0x44>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <MX_ADC1_Init+0x44>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <MX_ADC1_Init+0x44>)
 8002a96:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002a9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a9c:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <MX_ADC1_Init+0x44>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <MX_ADC1_Init+0x44>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aa8:	4804      	ldr	r0, [pc, #16]	@ (8002abc <MX_ADC1_Init+0x44>)
 8002aaa:	f001 f91f 	bl	8003cec <HAL_ADC_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 8002ab4:	f000 f940 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000204 	.word	0x20000204
 8002ac0:	40012400 	.word	0x40012400

08002ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002aca:	4a13      	ldr	r2, [pc, #76]	@ (8002b18 <MX_I2C1_Init+0x54>)
 8002acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ace:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002ad0:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <MX_I2C1_Init+0x58>)
 8002ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ada:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ae6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002af4:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b00:	4804      	ldr	r0, [pc, #16]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002b02:	f001 fd77 	bl	80045f4 <HAL_I2C_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b0c:	f000 f914 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000234 	.word	0x20000234
 8002b18:	40005400 	.word	0x40005400
 8002b1c:	000186a0 	.word	0x000186a0

08002b20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b26:	f107 0320 	add.w	r3, r7, #32
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	611a      	str	r2, [r3, #16]
 8002b3e:	615a      	str	r2, [r3, #20]
 8002b40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b42:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002b44:	4a27      	ldr	r2, [pc, #156]	@ (8002be4 <MX_TIM4_Init+0xc4>)
 8002b46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8002b48:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4e:	4b24      	ldr	r3, [pc, #144]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002b54:	4b22      	ldr	r3, [pc, #136]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002b56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5c:	4b20      	ldr	r3, [pc, #128]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b62:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002b64:	2280      	movs	r2, #128	@ 0x80
 8002b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b68:	481d      	ldr	r0, [pc, #116]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002b6a:	f004 ff55 	bl	8007a18 <HAL_TIM_PWM_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002b74:	f000 f8e0 	bl	8002d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b80:	f107 0320 	add.w	r3, r7, #32
 8002b84:	4619      	mov	r1, r3
 8002b86:	4816      	ldr	r0, [pc, #88]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002b88:	f005 fb14 	bl	80081b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002b92:	f000 f8d1 	bl	8002d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b96:	2360      	movs	r3, #96	@ 0x60
 8002b98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	2200      	movs	r2, #0
 8002baa:	4619      	mov	r1, r3
 8002bac:	480c      	ldr	r0, [pc, #48]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002bae:	f005 f825 	bl	8007bfc <HAL_TIM_PWM_ConfigChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002bb8:	f000 f8be 	bl	8002d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4807      	ldr	r0, [pc, #28]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002bc4:	f005 f81a 	bl	8007bfc <HAL_TIM_PWM_ConfigChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002bce:	f000 f8b3 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002bd2:	4803      	ldr	r0, [pc, #12]	@ (8002be0 <MX_TIM4_Init+0xc0>)
 8002bd4:	f000 fe0a 	bl	80037ec <HAL_TIM_MspPostInit>

}
 8002bd8:	bf00      	nop
 8002bda:	3728      	adds	r7, #40	@ 0x28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000288 	.word	0x20000288
 8002be4:	40000800 	.word	0x40000800

08002be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bec:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	@ (8002c38 <MX_USART1_UART_Init+0x50>)
 8002bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002bf4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	@ (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c0c:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c0e:	220c      	movs	r2, #12
 8002c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c1e:	4805      	ldr	r0, [pc, #20]	@ (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c20:	f005 fb26 	bl	8008270 <HAL_UART_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c2a:	f000 f885 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200002d0 	.word	0x200002d0
 8002c38:	40013800 	.word	0x40013800

08002c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <MX_USART3_UART_Init+0x4c>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	@ (8002c8c <MX_USART3_UART_Init+0x50>)
 8002c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <MX_USART3_UART_Init+0x4c>)
 8002c48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <MX_USART3_UART_Init+0x4c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <MX_USART3_UART_Init+0x4c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <MX_USART3_UART_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c60:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <MX_USART3_UART_Init+0x4c>)
 8002c62:	220c      	movs	r2, #12
 8002c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c66:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <MX_USART3_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <MX_USART3_UART_Init+0x4c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	@ (8002c88 <MX_USART3_UART_Init+0x4c>)
 8002c74:	f005 fafc 	bl	8008270 <HAL_UART_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c7e:	f000 f85b 	bl	8002d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000318 	.word	0x20000318
 8002c8c:	40004800 	.word	0x40004800

08002c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca4:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <MX_GPIO_Init+0x78>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a17      	ldr	r2, [pc, #92]	@ (8002d08 <MX_GPIO_Init+0x78>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <MX_GPIO_Init+0x78>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <MX_GPIO_Init+0x78>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4a11      	ldr	r2, [pc, #68]	@ (8002d08 <MX_GPIO_Init+0x78>)
 8002cc2:	f043 0308 	orr.w	r3, r3, #8
 8002cc6:	6193      	str	r3, [r2, #24]
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <MX_GPIO_Init+0x78>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|IN1_Pin|GPIO_PIN_15|IN2_Pin
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f248 013e 	movw	r1, #32830	@ 0x803e
 8002cda:	480c      	ldr	r0, [pc, #48]	@ (8002d0c <MX_GPIO_Init+0x7c>)
 8002cdc:	f001 fc72 	bl	80045c4 <HAL_GPIO_WritePin>
                          |IN3_Pin|IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 IN1_Pin PB15 IN2_Pin
                           IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|IN1_Pin|GPIO_PIN_15|IN2_Pin
 8002ce0:	f248 033e 	movw	r3, #32830	@ 0x803e
 8002ce4:	60bb      	str	r3, [r7, #8]
                          |IN3_Pin|IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4804      	ldr	r0, [pc, #16]	@ (8002d0c <MX_GPIO_Init+0x7c>)
 8002cfa:	f001 fadf 	bl	80042bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010c00 	.word	0x40010c00

08002d10 <HAL_UART_RxCpltCallback>:
/**
 * @brief UART RX Complete callback
 * @param huart UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a04      	ldr	r2, [pc, #16]	@ (8002d30 <HAL_UART_RxCpltCallback+0x20>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d102      	bne.n	8002d28 <HAL_UART_RxCpltCallback+0x18>
    // Call GPS driver callback
    GPS_UART_RxCpltCallback(&gps_handle);
 8002d22:	4804      	ldr	r0, [pc, #16]	@ (8002d34 <HAL_UART_RxCpltCallback+0x24>)
 8002d24:	f7fe fab5 	bl	8001292 <GPS_UART_RxCpltCallback>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40004800 	.word	0x40004800
 8002d34:	20000460 	.word	0x20000460

08002d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d3c:	b672      	cpsid	i
}
 8002d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <Error_Handler+0x8>

08002d44 <MPU6050_Init>:
 * @brief Initialize the MPU6050
 * @param hdev MPU6050 handle
 * @param hi2c I2C handle pointer
 * @return Status
 */
MPU6050_Status MPU6050_Init(MPU6050_Handle *hdev, I2C_HandleTypeDef *hi2c) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
    uint8_t check;
    MPU6050_Status status;

    /* Store I2C handle */
    hdev->hi2c = hi2c;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	601a      	str	r2, [r3, #0]
    hdev->address = MPU6050_ADDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	22d0      	movs	r2, #208	@ 0xd0
 8002d58:	711a      	strb	r2, [r3, #4]
    hdev->calibDelay = 50; // Default calibration delay 50ms
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2232      	movs	r2, #50	@ 0x32
 8002d5e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Initialize raw and scaled data structures */
    memset(&hdev->rawAccel, 0, sizeof(hdev->rawAccel));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3308      	adds	r3, #8
 8002d64:	2206      	movs	r2, #6
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f007 fcfe 	bl	800a76a <memset>
    memset(&hdev->rawGyro, 0, sizeof(hdev->rawGyro));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	330e      	adds	r3, #14
 8002d72:	2206      	movs	r2, #6
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f007 fcf7 	bl	800a76a <memset>
    memset(&hdev->scaledAccel, 0, sizeof(hdev->scaledAccel));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	220c      	movs	r2, #12
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f007 fcf0 	bl	800a76a <memset>
    memset(&hdev->scaledGyro, 0, sizeof(hdev->scaledGyro));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3320      	adds	r3, #32
 8002d8e:	220c      	movs	r2, #12
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f007 fce9 	bl	800a76a <memset>
    hdev->temperature = 0.0f;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Check if device is responding */
    status = MPU6050_ReadRegister(hdev, MPU6050_REG_WHO_AM_I, &check);
 8002da0:	f107 030e 	add.w	r3, r7, #14
 8002da4:	461a      	mov	r2, r3
 8002da6:	2175      	movs	r1, #117	@ 0x75
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fbc3 	bl	8003534 <MPU6050_ReadRegister>
 8002dae:	4603      	mov	r3, r0
 8002db0:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK || check != MPU6050_DEVICE_ID) {
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <MPU6050_Init+0x7a>
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	2b68      	cmp	r3, #104	@ 0x68
 8002dbc:	d001      	beq.n	8002dc2 <MPU6050_Init+0x7e>
        return MPU6050_NO_DEVICE;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e039      	b.n	8002e36 <MPU6050_Init+0xf2>
    }

    /* Wake up the MPU6050 */
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_PWR_MGMT_1, 0x00);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	216b      	movs	r1, #107	@ 0x6b
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fbff 	bl	80035ca <MPU6050_WriteRegister>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MPU6050_Init+0x96>
        return status;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	e02d      	b.n	8002e36 <MPU6050_Init+0xf2>
    }

    /* Set sample rate divider */
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_SMPLRT_DIV, 0x07); // 1kHz / (1 + 7) = 125Hz
 8002dda:	2207      	movs	r2, #7
 8002ddc:	2119      	movs	r1, #25
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fbf3 	bl	80035ca <MPU6050_WriteRegister>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MPU6050_Init+0xae>
        return status;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	e021      	b.n	8002e36 <MPU6050_Init+0xf2>
    }

    /* Set DLPF bandwidth to 42Hz */
    status = MPU6050_SetDLPF(hdev, MPU6050_DLPF_BW_42);
 8002df2:	2103      	movs	r1, #3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8ff 	bl	8002ff8 <MPU6050_SetDLPF>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MPU6050_Init+0xc4>
        return status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	e016      	b.n	8002e36 <MPU6050_Init+0xf2>
    }

    /* Set gyroscope scale to ±500 °/s */
    status = MPU6050_SetGyroScale(hdev, MPU6050_GYRO_FS_500);
 8002e08:	2108      	movs	r1, #8
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f818 	bl	8002e40 <MPU6050_SetGyroScale>
 8002e10:	4603      	mov	r3, r0
 8002e12:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MPU6050_Init+0xda>
        return status;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	e00b      	b.n	8002e36 <MPU6050_Init+0xf2>
    }

    /* Set accelerometer scale to ±4g */
    status = MPU6050_SetAccelScale(hdev, MPU6050_ACCEL_FS_4G);
 8002e1e:	2108      	movs	r1, #8
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f87d 	bl	8002f20 <MPU6050_SetAccelScale>
 8002e26:	4603      	mov	r3, r0
 8002e28:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MPU6050_Init+0xf0>
        return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	e000      	b.n	8002e36 <MPU6050_Init+0xf2>
    }

    return MPU6050_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <MPU6050_SetGyroScale>:
 * @brief Set gyroscope full scale range
 * @param hdev MPU6050 handle
 * @param scale Scale selection (MPU6050_GYRO_FS_xxx)
 * @return Status
 */
MPU6050_Status MPU6050_SetGyroScale(MPU6050_Handle *hdev, uint8_t scale) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
    MPU6050_Status status;

    /* Set gyroscope scale */
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_GYRO_CONFIG, scale);
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	211b      	movs	r1, #27
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fbb9 	bl	80035ca <MPU6050_WriteRegister>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MPU6050_SetGyroScale+0x26>
        return status;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	e04f      	b.n	8002f06 <MPU6050_SetGyroScale+0xc6>
    }

    /* Store current scale selection */
    hdev->gyroScale = scale;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	715a      	strb	r2, [r3, #5]

    /* Calculate scale factor based on selection */
    switch (scale) {
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	2b18      	cmp	r3, #24
 8002e70:	d844      	bhi.n	8002efc <MPU6050_SetGyroScale+0xbc>
 8002e72:	a201      	add	r2, pc, #4	@ (adr r2, 8002e78 <MPU6050_SetGyroScale+0x38>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002edd 	.word	0x08002edd
 8002e7c:	08002efd 	.word	0x08002efd
 8002e80:	08002efd 	.word	0x08002efd
 8002e84:	08002efd 	.word	0x08002efd
 8002e88:	08002efd 	.word	0x08002efd
 8002e8c:	08002efd 	.word	0x08002efd
 8002e90:	08002efd 	.word	0x08002efd
 8002e94:	08002efd 	.word	0x08002efd
 8002e98:	08002ee5 	.word	0x08002ee5
 8002e9c:	08002efd 	.word	0x08002efd
 8002ea0:	08002efd 	.word	0x08002efd
 8002ea4:	08002efd 	.word	0x08002efd
 8002ea8:	08002efd 	.word	0x08002efd
 8002eac:	08002efd 	.word	0x08002efd
 8002eb0:	08002efd 	.word	0x08002efd
 8002eb4:	08002efd 	.word	0x08002efd
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002efd 	.word	0x08002efd
 8002ec0:	08002efd 	.word	0x08002efd
 8002ec4:	08002efd 	.word	0x08002efd
 8002ec8:	08002efd 	.word	0x08002efd
 8002ecc:	08002efd 	.word	0x08002efd
 8002ed0:	08002efd 	.word	0x08002efd
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002ef5 	.word	0x08002ef5
        case MPU6050_GYRO_FS_250:
            hdev->gyroScaleFactor = 131.0f; // 131 LSB/(°/s)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a0c      	ldr	r2, [pc, #48]	@ (8002f10 <MPU6050_SetGyroScale+0xd0>)
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002ee2:	e00f      	b.n	8002f04 <MPU6050_SetGyroScale+0xc4>
        case MPU6050_GYRO_FS_500:
            hdev->gyroScaleFactor = 65.5f;  // 65.5 LSB/(°/s)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <MPU6050_SetGyroScale+0xd4>)
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002eea:	e00b      	b.n	8002f04 <MPU6050_SetGyroScale+0xc4>
        case MPU6050_GYRO_FS_1000:
            hdev->gyroScaleFactor = 32.8f;  // 32.8 LSB/(°/s)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <MPU6050_SetGyroScale+0xd8>)
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002ef2:	e007      	b.n	8002f04 <MPU6050_SetGyroScale+0xc4>
        case MPU6050_GYRO_FS_2000:
            hdev->gyroScaleFactor = 16.4f;  // 16.4 LSB/(°/s)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a09      	ldr	r2, [pc, #36]	@ (8002f1c <MPU6050_SetGyroScale+0xdc>)
 8002ef8:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002efa:	e003      	b.n	8002f04 <MPU6050_SetGyroScale+0xc4>
        default:
            hdev->gyroScaleFactor = 65.5f;  // Default to ±500 °/s
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a05      	ldr	r2, [pc, #20]	@ (8002f14 <MPU6050_SetGyroScale+0xd4>)
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002f02:	bf00      	nop
    }

    return MPU6050_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	43030000 	.word	0x43030000
 8002f14:	42830000 	.word	0x42830000
 8002f18:	42033333 	.word	0x42033333
 8002f1c:	41833333 	.word	0x41833333

08002f20 <MPU6050_SetAccelScale>:
 * @brief Set accelerometer full scale range
 * @param hdev MPU6050 handle
 * @param scale Scale selection (MPU6050_ACCEL_FS_xxx)
 * @return Status
 */
MPU6050_Status MPU6050_SetAccelScale(MPU6050_Handle *hdev, uint8_t scale) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
    MPU6050_Status status;

    /* Set accelerometer scale */
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_ACCEL_CONFIG, scale);
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	211c      	movs	r1, #28
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fb49 	bl	80035ca <MPU6050_WriteRegister>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MPU6050_SetAccelScale+0x26>
        return status;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	e054      	b.n	8002ff0 <MPU6050_SetAccelScale+0xd0>
    }

    /* Store current scale selection */
    hdev->accelScale = scale;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	719a      	strb	r2, [r3, #6]

    /* Calculate scale factor based on selection */
    switch (scale) {
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	2b18      	cmp	r3, #24
 8002f50:	d848      	bhi.n	8002fe4 <MPU6050_SetAccelScale+0xc4>
 8002f52:	a201      	add	r2, pc, #4	@ (adr r2, 8002f58 <MPU6050_SetAccelScale+0x38>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	08002fbd 	.word	0x08002fbd
 8002f5c:	08002fe5 	.word	0x08002fe5
 8002f60:	08002fe5 	.word	0x08002fe5
 8002f64:	08002fe5 	.word	0x08002fe5
 8002f68:	08002fe5 	.word	0x08002fe5
 8002f6c:	08002fe5 	.word	0x08002fe5
 8002f70:	08002fe5 	.word	0x08002fe5
 8002f74:	08002fe5 	.word	0x08002fe5
 8002f78:	08002fc7 	.word	0x08002fc7
 8002f7c:	08002fe5 	.word	0x08002fe5
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	08002fe5 	.word	0x08002fe5
 8002f88:	08002fe5 	.word	0x08002fe5
 8002f8c:	08002fe5 	.word	0x08002fe5
 8002f90:	08002fe5 	.word	0x08002fe5
 8002f94:	08002fe5 	.word	0x08002fe5
 8002f98:	08002fd1 	.word	0x08002fd1
 8002f9c:	08002fe5 	.word	0x08002fe5
 8002fa0:	08002fe5 	.word	0x08002fe5
 8002fa4:	08002fe5 	.word	0x08002fe5
 8002fa8:	08002fe5 	.word	0x08002fe5
 8002fac:	08002fe5 	.word	0x08002fe5
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08002fe5 	.word	0x08002fe5
 8002fb8:	08002fdb 	.word	0x08002fdb
        case MPU6050_ACCEL_FS_2G:
            hdev->accelScaleFactor = 16384.0f; // 16384 LSB/g
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8002fc2:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002fc4:	e013      	b.n	8002fee <MPU6050_SetAccelScale+0xce>
        case MPU6050_ACCEL_FS_4G:
            hdev->accelScaleFactor = 8192.0f;  // 8192 LSB/g
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8002fcc:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002fce:	e00e      	b.n	8002fee <MPU6050_SetAccelScale+0xce>
        case MPU6050_ACCEL_FS_8G:
            hdev->accelScaleFactor = 4096.0f;  // 4096 LSB/g
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8002fd6:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002fd8:	e009      	b.n	8002fee <MPU6050_SetAccelScale+0xce>
        case MPU6050_ACCEL_FS_16G:
            hdev->accelScaleFactor = 2048.0f;  // 2048 LSB/g
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8002fe0:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002fe2:	e004      	b.n	8002fee <MPU6050_SetAccelScale+0xce>
        default:
            hdev->accelScaleFactor = 8192.0f;  // Default to ±4g
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8002fea:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002fec:	bf00      	nop
    }

    return MPU6050_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <MPU6050_SetDLPF>:
 * @brief Set digital low pass filter bandwidth
 * @param hdev MPU6050 handle
 * @param bandwidth Bandwidth selection (MPU6050_DLPF_BW_xxx)
 * @return Status
 */
MPU6050_Status MPU6050_SetDLPF(MPU6050_Handle *hdev, uint8_t bandwidth) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
    return MPU6050_WriteRegister(hdev, MPU6050_REG_CONFIG, bandwidth);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	461a      	mov	r2, r3
 8003008:	211a      	movs	r1, #26
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fadd 	bl	80035ca <MPU6050_WriteRegister>
 8003010:	4603      	mov	r3, r0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <MPU6050_ReadAllData>:
/**
 * @brief Read all data from MPU6050 (accelerometer, gyroscope, temperature)
 * @param hdev MPU6050 handle
 * @return Status
 */
MPU6050_Status MPU6050_ReadAllData(MPU6050_Handle *hdev) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
    uint8_t data[14];
    MPU6050_Status status;

    /* Read all sensor data starting from ACCEL_XOUT_H (14 bytes total) */
    status = MPU6050_ReadRegisters(hdev, MPU6050_REG_ACCEL_XOUT_H, data, 14);
 8003024:	f107 020c 	add.w	r2, r7, #12
 8003028:	230e      	movs	r3, #14
 800302a:	213b      	movs	r1, #59	@ 0x3b
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 faa4 	bl	800357a <MPU6050_ReadRegisters>
 8003032:	4603      	mov	r3, r0
 8003034:	77fb      	strb	r3, [r7, #31]
    if (status != MPU6050_OK) {
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MPU6050_ReadAllData+0x24>
        return status;
 800303c:	7ffb      	ldrb	r3, [r7, #31]
 800303e:	e0b6      	b.n	80031ae <MPU6050_ReadAllData+0x192>
    }

    /* Parse accelerometer data */
    hdev->rawAccel.x = (int16_t)((data[0] << 8) | data[1]);
 8003040:	7b3b      	ldrb	r3, [r7, #12]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	b21a      	sxth	r2, r3
 8003046:	7b7b      	ldrb	r3, [r7, #13]
 8003048:	b21b      	sxth	r3, r3
 800304a:	4313      	orrs	r3, r2
 800304c:	b21a      	sxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	811a      	strh	r2, [r3, #8]
    hdev->rawAccel.y = (int16_t)((data[2] << 8) | data[3]);
 8003052:	7bbb      	ldrb	r3, [r7, #14]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	b21a      	sxth	r2, r3
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	b21b      	sxth	r3, r3
 800305c:	4313      	orrs	r3, r2
 800305e:	b21a      	sxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	815a      	strh	r2, [r3, #10]
    hdev->rawAccel.z = (int16_t)((data[4] << 8) | data[5]);
 8003064:	7c3b      	ldrb	r3, [r7, #16]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	b21a      	sxth	r2, r3
 800306a:	7c7b      	ldrb	r3, [r7, #17]
 800306c:	b21b      	sxth	r3, r3
 800306e:	4313      	orrs	r3, r2
 8003070:	b21a      	sxth	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	819a      	strh	r2, [r3, #12]

    /* Parse temperature data */
    int16_t rawTemp = (int16_t)((data[6] << 8) | data[7]);
 8003076:	7cbb      	ldrb	r3, [r7, #18]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	b21a      	sxth	r2, r3
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	b21b      	sxth	r3, r3
 8003080:	4313      	orrs	r3, r2
 8003082:	83bb      	strh	r3, [r7, #28]
    hdev->temperature = (float)rawTemp / 340.0f + 36.53f; // MPU6050 formula from datasheet
 8003084:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fdd7 	bl	8000c3c <__aeabi_i2f>
 800308e:	4603      	mov	r3, r0
 8003090:	4949      	ldr	r1, [pc, #292]	@ (80031b8 <MPU6050_ReadAllData+0x19c>)
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd feda 	bl	8000e4c <__aeabi_fdiv>
 8003098:	4603      	mov	r3, r0
 800309a:	4948      	ldr	r1, [pc, #288]	@ (80031bc <MPU6050_ReadAllData+0x1a0>)
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fd19 	bl	8000ad4 <__addsf3>
 80030a2:	4603      	mov	r3, r0
 80030a4:	461a      	mov	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Parse gyroscope data */
    hdev->rawGyro.x = (int16_t)((data[8] << 8) | data[9]);
 80030aa:	7d3b      	ldrb	r3, [r7, #20]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b21a      	sxth	r2, r3
 80030b0:	7d7b      	ldrb	r3, [r7, #21]
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	4313      	orrs	r3, r2
 80030b6:	b21a      	sxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	81da      	strh	r2, [r3, #14]
    hdev->rawGyro.y = (int16_t)((data[10] << 8) | data[11]);
 80030bc:	7dbb      	ldrb	r3, [r7, #22]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	b21a      	sxth	r2, r3
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b21a      	sxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	821a      	strh	r2, [r3, #16]
    hdev->rawGyro.z = (int16_t)((data[12] << 8) | data[13]);
 80030ce:	7e3b      	ldrb	r3, [r7, #24]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	b21a      	sxth	r2, r3
 80030d4:	7e7b      	ldrb	r3, [r7, #25]
 80030d6:	b21b      	sxth	r3, r3
 80030d8:	4313      	orrs	r3, r2
 80030da:	b21a      	sxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	825a      	strh	r2, [r3, #18]

    /* Convert to scaled values */
    hdev->scaledAccel.x = (float)hdev->rawAccel.x / hdev->accelScaleFactor;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fda8 	bl	8000c3c <__aeabi_i2f>
 80030ec:	4602      	mov	r2, r0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f2:	4619      	mov	r1, r3
 80030f4:	4610      	mov	r0, r2
 80030f6:	f7fd fea9 	bl	8000e4c <__aeabi_fdiv>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	615a      	str	r2, [r3, #20]
    hdev->scaledAccel.y = (float)hdev->rawAccel.y / hdev->accelScaleFactor;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fd97 	bl	8000c3c <__aeabi_i2f>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f7fd fe98 	bl	8000e4c <__aeabi_fdiv>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
    hdev->scaledAccel.z = (float)hdev->rawAccel.z / hdev->accelScaleFactor;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd fd86 	bl	8000c3c <__aeabi_i2f>
 8003130:	4602      	mov	r2, r0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f7fd fe87 	bl	8000e4c <__aeabi_fdiv>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	61da      	str	r2, [r3, #28]

    hdev->scaledGyro.x = (float)hdev->rawGyro.x / hdev->gyroScaleFactor;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd fd75 	bl	8000c3c <__aeabi_i2f>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f7fd fe76 	bl	8000e4c <__aeabi_fdiv>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	621a      	str	r2, [r3, #32]
    hdev->scaledGyro.y = (float)hdev->rawGyro.y / hdev->gyroScaleFactor;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fd64 	bl	8000c3c <__aeabi_i2f>
 8003174:	4602      	mov	r2, r0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f7fd fe65 	bl	8000e4c <__aeabi_fdiv>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24
    hdev->scaledGyro.z = (float)hdev->rawGyro.z / hdev->gyroScaleFactor;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fd53 	bl	8000c3c <__aeabi_i2f>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f7fd fe54 	bl	8000e4c <__aeabi_fdiv>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28

    return MPU6050_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	43aa0000 	.word	0x43aa0000
 80031bc:	42121eb8 	.word	0x42121eb8

080031c0 <MPU6050_ReadGyroscopeData>:
/**
 * @brief Read gyroscope data only
 * @param hdev MPU6050 handle
 * @return Status
 */
MPU6050_Status MPU6050_ReadGyroscopeData(MPU6050_Handle *hdev) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    MPU6050_Status status;

    /* Read gyroscope data (6 bytes total) */
    status = MPU6050_ReadRegisters(hdev, MPU6050_REG_GYRO_XOUT_H, data, 6);
 80031c8:	f107 0208 	add.w	r2, r7, #8
 80031cc:	2306      	movs	r3, #6
 80031ce:	2143      	movs	r1, #67	@ 0x43
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f9d2 	bl	800357a <MPU6050_ReadRegisters>
 80031d6:	4603      	mov	r3, r0
 80031d8:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MPU6050_ReadGyroscopeData+0x24>
        return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	e04e      	b.n	8003282 <MPU6050_ReadGyroscopeData+0xc2>
    }

    /* Parse data */
    hdev->rawGyro.x = (int16_t)((data[0] << 8) | data[1]);
 80031e4:	7a3b      	ldrb	r3, [r7, #8]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	b21a      	sxth	r2, r3
 80031ea:	7a7b      	ldrb	r3, [r7, #9]
 80031ec:	b21b      	sxth	r3, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	81da      	strh	r2, [r3, #14]
    hdev->rawGyro.y = (int16_t)((data[2] << 8) | data[3]);
 80031f6:	7abb      	ldrb	r3, [r7, #10]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	b21a      	sxth	r2, r3
 80031fc:	7afb      	ldrb	r3, [r7, #11]
 80031fe:	b21b      	sxth	r3, r3
 8003200:	4313      	orrs	r3, r2
 8003202:	b21a      	sxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	821a      	strh	r2, [r3, #16]
    hdev->rawGyro.z = (int16_t)((data[4] << 8) | data[5]);
 8003208:	7b3b      	ldrb	r3, [r7, #12]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	b21a      	sxth	r2, r3
 800320e:	7b7b      	ldrb	r3, [r7, #13]
 8003210:	b21b      	sxth	r3, r3
 8003212:	4313      	orrs	r3, r2
 8003214:	b21a      	sxth	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	825a      	strh	r2, [r3, #18]

    /* Convert to scaled values */
    hdev->scaledGyro.x = (float)hdev->rawGyro.x / hdev->gyroScaleFactor;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd fd0b 	bl	8000c3c <__aeabi_i2f>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7fd fe0c 	bl	8000e4c <__aeabi_fdiv>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]
    hdev->scaledGyro.y = (float)hdev->rawGyro.y / hdev->gyroScaleFactor;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fcfa 	bl	8000c3c <__aeabi_i2f>
 8003248:	4602      	mov	r2, r0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7fd fdfb 	bl	8000e4c <__aeabi_fdiv>
 8003256:	4603      	mov	r3, r0
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdev->scaledGyro.z = (float)hdev->rawGyro.z / hdev->gyroScaleFactor;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd fce9 	bl	8000c3c <__aeabi_i2f>
 800326a:	4602      	mov	r2, r0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f7fd fdea 	bl	8000e4c <__aeabi_fdiv>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	629a      	str	r2, [r3, #40]	@ 0x28

    return MPU6050_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <MPU6050_Calibrate>:
 * @brief Calibrate the MPU6050 by calculating gyro offset
 * @param hdev MPU6050 handle
 * @param numSamples Number of samples to use for calibration
 * @return Status
 */
MPU6050_Status MPU6050_Calibrate(MPU6050_Handle *hdev, uint16_t numSamples) {
 800328a:	b580      	push	{r7, lr}
 800328c:	b088      	sub	sp, #32
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	807b      	strh	r3, [r7, #2]
    int32_t gyroXSum = 0, gyroYSum = 0, gyroZSum = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
    MPU6050_Status status;

    /* Collect multiple samples for better accuracy */
    for (uint16_t i = 0; i < numSamples; i++) {
 80032a2:	2300      	movs	r3, #0
 80032a4:	827b      	strh	r3, [r7, #18]
 80032a6:	e026      	b.n	80032f6 <MPU6050_Calibrate+0x6c>
        status = MPU6050_ReadGyroscopeData(hdev);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ff89 	bl	80031c0 <MPU6050_ReadGyroscopeData>
 80032ae:	4603      	mov	r3, r0
 80032b0:	72fb      	strb	r3, [r7, #11]
        if (status != MPU6050_OK) {
 80032b2:	7afb      	ldrb	r3, [r7, #11]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MPU6050_Calibrate+0x32>
            return status;
 80032b8:	7afb      	ldrb	r3, [r7, #11]
 80032ba:	e04e      	b.n	800335a <MPU6050_Calibrate+0xd0>
        }

        gyroXSum += hdev->rawGyro.x;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80032c2:	461a      	mov	r2, r3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	61fb      	str	r3, [r7, #28]
        gyroYSum += hdev->rawGyro.y;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80032d0:	461a      	mov	r2, r3
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        gyroZSum += hdev->rawGyro.z;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80032de:	461a      	mov	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4413      	add	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

        /* Short delay between measurements */
        HAL_Delay(hdev->calibDelay);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fcda 	bl	8003ca4 <HAL_Delay>
    for (uint16_t i = 0; i < numSamples; i++) {
 80032f0:	8a7b      	ldrh	r3, [r7, #18]
 80032f2:	3301      	adds	r3, #1
 80032f4:	827b      	strh	r3, [r7, #18]
 80032f6:	8a7a      	ldrh	r2, [r7, #18]
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d3d4      	bcc.n	80032a8 <MPU6050_Calibrate+0x1e>
    }

    /* Calculate average offsets */
    int16_t gyroXOffset = gyroXSum / numSamples;
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	fb92 f3f3 	sdiv	r3, r2, r3
 8003306:	823b      	strh	r3, [r7, #16]
    int16_t gyroYOffset = gyroYSum / numSamples;
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003310:	81fb      	strh	r3, [r7, #14]
    int16_t gyroZOffset = gyroZSum / numSamples;
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	fb92 f3f3 	sdiv	r3, r2, r3
 800331a:	81bb      	strh	r3, [r7, #12]

    /* Apply offsets to subsequent readings */
    hdev->rawGyro.x -= gyroXOffset;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003322:	b29a      	uxth	r2, r3
 8003324:	8a3b      	ldrh	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	b29b      	uxth	r3, r3
 800332a:	b21a      	sxth	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	81da      	strh	r2, [r3, #14]
    hdev->rawGyro.y -= gyroYOffset;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003336:	b29a      	uxth	r2, r3
 8003338:	89fb      	ldrh	r3, [r7, #14]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	b29b      	uxth	r3, r3
 800333e:	b21a      	sxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	821a      	strh	r2, [r3, #16]
    hdev->rawGyro.z -= gyroZOffset;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800334a:	b29a      	uxth	r2, r3
 800334c:	89bb      	ldrh	r3, [r7, #12]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	b29b      	uxth	r3, r3
 8003352:	b21a      	sxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	825a      	strh	r2, [r3, #18]

    return MPU6050_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <MPU6050_Print>:
/**
 * @brief Print MPU6050 data to UART
 * @param hdev MPU6050 handle
 * @param huart UART handle pointer
 */
void MPU6050_Print(MPU6050_Handle *hdev, UART_HandleTypeDef *huart) {
 8003364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003368:	b0c6      	sub	sp, #280	@ 0x118
 800336a:	af04      	add	r7, sp, #16
 800336c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003374:	6018      	str	r0, [r3, #0]
 8003376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800337a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800337e:	6019      	str	r1, [r3, #0]
    char buffer[256];

    sprintf(buffer, "\r\n--------- MPU6050 DATA ---------\r\n");
 8003380:	f107 0308 	add.w	r3, r7, #8
 8003384:	4966      	ldr	r1, [pc, #408]	@ (8003520 <MPU6050_Print+0x1bc>)
 8003386:	4618      	mov	r0, r3
 8003388:	f007 f98c 	bl	800a6a4 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	4618      	mov	r0, r3
 8003392:	f7fc fedd 	bl	8000150 <strlen>
 8003396:	4603      	mov	r3, r0
 8003398:	b29a      	uxth	r2, r3
 800339a:	f107 0108 	add.w	r1, r7, #8
 800339e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033a2:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 80033a6:	2364      	movs	r3, #100	@ 0x64
 80033a8:	6800      	ldr	r0, [r0, #0]
 80033aa:	f004 ffb1 	bl	8008310 <HAL_UART_Transmit>

    sprintf(buffer, "Accel (g): X=%.3f, Y=%.3f, Z=%.3f\r\n",
            hdev->scaledAccel.x, hdev->scaledAccel.y, hdev->scaledAccel.z);
 80033ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
    sprintf(buffer, "Accel (g): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd f834 	bl	8000428 <__aeabi_f2d>
 80033c0:	4680      	mov	r8, r0
 80033c2:	4689      	mov	r9, r1
            hdev->scaledAccel.x, hdev->scaledAccel.y, hdev->scaledAccel.z);
 80033c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
    sprintf(buffer, "Accel (g): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd f829 	bl	8000428 <__aeabi_f2d>
 80033d6:	4604      	mov	r4, r0
 80033d8:	460d      	mov	r5, r1
            hdev->scaledAccel.x, hdev->scaledAccel.y, hdev->scaledAccel.z);
 80033da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
    sprintf(buffer, "Accel (g): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f81e 	bl	8000428 <__aeabi_f2d>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	f107 0008 	add.w	r0, r7, #8
 80033f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033f8:	e9cd 4500 	strd	r4, r5, [sp]
 80033fc:	4642      	mov	r2, r8
 80033fe:	464b      	mov	r3, r9
 8003400:	4948      	ldr	r1, [pc, #288]	@ (8003524 <MPU6050_Print+0x1c0>)
 8003402:	f007 f94f 	bl	800a6a4 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	4618      	mov	r0, r3
 800340c:	f7fc fea0 	bl	8000150 <strlen>
 8003410:	4603      	mov	r3, r0
 8003412:	b29a      	uxth	r2, r3
 8003414:	f107 0108 	add.w	r1, r7, #8
 8003418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800341c:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8003420:	2364      	movs	r3, #100	@ 0x64
 8003422:	6800      	ldr	r0, [r0, #0]
 8003424:	f004 ff74 	bl	8008310 <HAL_UART_Transmit>

    sprintf(buffer, "Gyro (deg/s): X=%.3f, Y=%.3f, Z=%.3f\r\n",
            hdev->scaledGyro.x, hdev->scaledGyro.y, hdev->scaledGyro.z);
 8003428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800342c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1b      	ldr	r3, [r3, #32]
    sprintf(buffer, "Gyro (deg/s): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 8003434:	4618      	mov	r0, r3
 8003436:	f7fc fff7 	bl	8000428 <__aeabi_f2d>
 800343a:	4680      	mov	r8, r0
 800343c:	4689      	mov	r9, r1
            hdev->scaledGyro.x, hdev->scaledGyro.y, hdev->scaledGyro.z);
 800343e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    sprintf(buffer, "Gyro (deg/s): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 800344a:	4618      	mov	r0, r3
 800344c:	f7fc ffec 	bl	8000428 <__aeabi_f2d>
 8003450:	4604      	mov	r4, r0
 8003452:	460d      	mov	r5, r1
            hdev->scaledGyro.x, hdev->scaledGyro.y, hdev->scaledGyro.z);
 8003454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    sprintf(buffer, "Gyro (deg/s): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 8003460:	4618      	mov	r0, r3
 8003462:	f7fc ffe1 	bl	8000428 <__aeabi_f2d>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	f107 0008 	add.w	r0, r7, #8
 800346e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003472:	e9cd 4500 	strd	r4, r5, [sp]
 8003476:	4642      	mov	r2, r8
 8003478:	464b      	mov	r3, r9
 800347a:	492b      	ldr	r1, [pc, #172]	@ (8003528 <MPU6050_Print+0x1c4>)
 800347c:	f007 f912 	bl	800a6a4 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 8003480:	f107 0308 	add.w	r3, r7, #8
 8003484:	4618      	mov	r0, r3
 8003486:	f7fc fe63 	bl	8000150 <strlen>
 800348a:	4603      	mov	r3, r0
 800348c:	b29a      	uxth	r2, r3
 800348e:	f107 0108 	add.w	r1, r7, #8
 8003492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003496:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 800349a:	2364      	movs	r3, #100	@ 0x64
 800349c:	6800      	ldr	r0, [r0, #0]
 800349e:	f004 ff37 	bl	8008310 <HAL_UART_Transmit>

    sprintf(buffer, "Temperature: %.2f C\r\n", hdev->temperature);
 80034a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fc ffba 	bl	8000428 <__aeabi_f2d>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	f107 0008 	add.w	r0, r7, #8
 80034bc:	491b      	ldr	r1, [pc, #108]	@ (800352c <MPU6050_Print+0x1c8>)
 80034be:	f007 f8f1 	bl	800a6a4 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 80034c2:	f107 0308 	add.w	r3, r7, #8
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fc fe42 	bl	8000150 <strlen>
 80034cc:	4603      	mov	r3, r0
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	f107 0108 	add.w	r1, r7, #8
 80034d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80034d8:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 80034dc:	2364      	movs	r3, #100	@ 0x64
 80034de:	6800      	ldr	r0, [r0, #0]
 80034e0:	f004 ff16 	bl	8008310 <HAL_UART_Transmit>

    sprintf(buffer, "--------------------------------\r\n");
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	4911      	ldr	r1, [pc, #68]	@ (8003530 <MPU6050_Print+0x1cc>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f007 f8da 	bl	800a6a4 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 80034f0:	f107 0308 	add.w	r3, r7, #8
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fc fe2b 	bl	8000150 <strlen>
 80034fa:	4603      	mov	r3, r0
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	f107 0108 	add.w	r1, r7, #8
 8003502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003506:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 800350a:	2364      	movs	r3, #100	@ 0x64
 800350c:	6800      	ldr	r0, [r0, #0]
 800350e:	f004 feff 	bl	8008310 <HAL_UART_Transmit>
}
 8003512:	bf00      	nop
 8003514:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003518:	46bd      	mov	sp, r7
 800351a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800351e:	bf00      	nop
 8003520:	0800e928 	.word	0x0800e928
 8003524:	0800e950 	.word	0x0800e950
 8003528:	0800e974 	.word	0x0800e974
 800352c:	0800e99c 	.word	0x0800e99c
 8003530:	0800e9b4 	.word	0x0800e9b4

08003534 <MPU6050_ReadRegister>:
 * @param hdev MPU6050 handle
 * @param reg Register address
 * @param data Pointer to data buffer
 * @return Status
 */
static MPU6050_Status MPU6050_ReadRegister(MPU6050_Handle *hdev, uint8_t reg, uint8_t *data) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	@ 0x28
 8003538:	af04      	add	r7, sp, #16
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	460b      	mov	r3, r1
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	791b      	ldrb	r3, [r3, #4]
 800354a:	4619      	mov	r1, r3
 800354c:	7afb      	ldrb	r3, [r7, #11]
 800354e:	b29a      	uxth	r2, r3
 8003550:	2364      	movs	r3, #100	@ 0x64
 8003552:	9302      	str	r3, [sp, #8]
 8003554:	2301      	movs	r3, #1
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2301      	movs	r3, #1
 800355e:	f001 fa9b 	bl	8004a98 <HAL_I2C_Mem_Read>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <MPU6050_ReadRegisters>:
 * @param reg Starting register address
 * @param data Pointer to data buffer
 * @param length Number of bytes to read
 * @return Status
 */
static MPU6050_Status MPU6050_ReadRegisters(MPU6050_Handle *hdev, uint8_t reg, uint8_t *data, uint8_t length) {
 800357a:	b590      	push	{r4, r7, lr}
 800357c:	b08b      	sub	sp, #44	@ 0x2c
 800357e:	af04      	add	r7, sp, #16
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	461a      	mov	r2, r3
 8003586:	460b      	mov	r3, r1
 8003588:	72fb      	strb	r3, [r7, #11]
 800358a:	4613      	mov	r3, r2
 800358c:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, data, length, 100);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	791b      	ldrb	r3, [r3, #4]
 8003596:	461c      	mov	r4, r3
 8003598:	7afb      	ldrb	r3, [r7, #11]
 800359a:	b29a      	uxth	r2, r3
 800359c:	7abb      	ldrb	r3, [r7, #10]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2164      	movs	r1, #100	@ 0x64
 80035a2:	9102      	str	r1, [sp, #8]
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2301      	movs	r3, #1
 80035ac:	4621      	mov	r1, r4
 80035ae:	f001 fa73 	bl	8004a98 <HAL_I2C_Mem_Read>
 80035b2:	4603      	mov	r3, r0
 80035b4:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}

080035ca <MPU6050_WriteRegister>:
 * @param hdev MPU6050 handle
 * @param reg Register address
 * @param data Data to write
 * @return Status
 */
static MPU6050_Status MPU6050_WriteRegister(MPU6050_Handle *hdev, uint8_t reg, uint8_t data) {
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b088      	sub	sp, #32
 80035ce:	af04      	add	r7, sp, #16
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	70fb      	strb	r3, [r7, #3]
 80035d6:	4613      	mov	r3, r2
 80035d8:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Write(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	791b      	ldrb	r3, [r3, #4]
 80035e2:	4619      	mov	r1, r3
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	2364      	movs	r3, #100	@ 0x64
 80035ea:	9302      	str	r3, [sp, #8]
 80035ec:	2301      	movs	r3, #1
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	1cbb      	adds	r3, r7, #2
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2301      	movs	r3, #1
 80035f6:	f001 f955 	bl	80048a4 <HAL_I2C_Mem_Write>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]

    return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800361a:	4b15      	ldr	r3, [pc, #84]	@ (8003670 <HAL_MspInit+0x5c>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	4a14      	ldr	r2, [pc, #80]	@ (8003670 <HAL_MspInit+0x5c>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6193      	str	r3, [r2, #24]
 8003626:	4b12      	ldr	r3, [pc, #72]	@ (8003670 <HAL_MspInit+0x5c>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <HAL_MspInit+0x5c>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	4a0e      	ldr	r2, [pc, #56]	@ (8003670 <HAL_MspInit+0x5c>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363c:	61d3      	str	r3, [r2, #28]
 800363e:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <HAL_MspInit+0x5c>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800364a:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HAL_MspInit+0x60>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <HAL_MspInit+0x60>)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	40021000 	.word	0x40021000
 8003674:	40010000 	.word	0x40010000

08003678 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003680:	f107 0310 	add.w	r3, r7, #16
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a14      	ldr	r2, [pc, #80]	@ (80036e4 <HAL_ADC_MspInit+0x6c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d121      	bne.n	80036dc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003698:	4b13      	ldr	r3, [pc, #76]	@ (80036e8 <HAL_ADC_MspInit+0x70>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	4a12      	ldr	r2, [pc, #72]	@ (80036e8 <HAL_ADC_MspInit+0x70>)
 800369e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a2:	6193      	str	r3, [r2, #24]
 80036a4:	4b10      	ldr	r3, [pc, #64]	@ (80036e8 <HAL_ADC_MspInit+0x70>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b0:	4b0d      	ldr	r3, [pc, #52]	@ (80036e8 <HAL_ADC_MspInit+0x70>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	4a0c      	ldr	r2, [pc, #48]	@ (80036e8 <HAL_ADC_MspInit+0x70>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	6193      	str	r3, [r2, #24]
 80036bc:	4b0a      	ldr	r3, [pc, #40]	@ (80036e8 <HAL_ADC_MspInit+0x70>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80036c8:	231f      	movs	r3, #31
 80036ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036cc:	2303      	movs	r3, #3
 80036ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d0:	f107 0310 	add.w	r3, r7, #16
 80036d4:	4619      	mov	r1, r3
 80036d6:	4805      	ldr	r0, [pc, #20]	@ (80036ec <HAL_ADC_MspInit+0x74>)
 80036d8:	f000 fdf0 	bl	80042bc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80036dc:	bf00      	nop
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40012400 	.word	0x40012400
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40010800 	.word	0x40010800

080036f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	@ 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a25      	ldr	r2, [pc, #148]	@ (80037a0 <HAL_I2C_MspInit+0xb0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d142      	bne.n	8003796 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003710:	4b24      	ldr	r3, [pc, #144]	@ (80037a4 <HAL_I2C_MspInit+0xb4>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4a23      	ldr	r2, [pc, #140]	@ (80037a4 <HAL_I2C_MspInit+0xb4>)
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	6193      	str	r3, [r2, #24]
 800371c:	4b21      	ldr	r3, [pc, #132]	@ (80037a4 <HAL_I2C_MspInit+0xb4>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003728:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800372c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800372e:	2312      	movs	r3, #18
 8003730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003732:	2303      	movs	r3, #3
 8003734:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003736:	f107 0314 	add.w	r3, r7, #20
 800373a:	4619      	mov	r1, r3
 800373c:	481a      	ldr	r0, [pc, #104]	@ (80037a8 <HAL_I2C_MspInit+0xb8>)
 800373e:	f000 fdbd 	bl	80042bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003742:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_I2C_MspInit+0xbc>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
 8003758:	4a14      	ldr	r2, [pc, #80]	@ (80037ac <HAL_I2C_MspInit+0xbc>)
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800375e:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <HAL_I2C_MspInit+0xb4>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4a10      	ldr	r2, [pc, #64]	@ (80037a4 <HAL_I2C_MspInit+0xb4>)
 8003764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003768:	61d3      	str	r3, [r2, #28]
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <HAL_I2C_MspInit+0xb4>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	2100      	movs	r1, #0
 800377a:	201f      	movs	r0, #31
 800377c:	f000 fca7 	bl	80040ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003780:	201f      	movs	r0, #31
 8003782:	f000 fcc0 	bl	8004106 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	2100      	movs	r1, #0
 800378a:	2020      	movs	r0, #32
 800378c:	f000 fc9f 	bl	80040ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003790:	2020      	movs	r0, #32
 8003792:	f000 fcb8 	bl	8004106 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003796:	bf00      	nop
 8003798:	3728      	adds	r7, #40	@ 0x28
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40005400 	.word	0x40005400
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40010c00 	.word	0x40010c00
 80037ac:	40010000 	.word	0x40010000

080037b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a09      	ldr	r2, [pc, #36]	@ (80037e4 <HAL_TIM_PWM_MspInit+0x34>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10b      	bne.n	80037da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037c2:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_TIM_PWM_MspInit+0x38>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4a08      	ldr	r2, [pc, #32]	@ (80037e8 <HAL_TIM_PWM_MspInit+0x38>)
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	61d3      	str	r3, [r2, #28]
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_TIM_PWM_MspInit+0x38>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a0f      	ldr	r2, [pc, #60]	@ (8003844 <HAL_TIM_MspPostInit+0x58>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d117      	bne.n	800383c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380c:	4b0e      	ldr	r3, [pc, #56]	@ (8003848 <HAL_TIM_MspPostInit+0x5c>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	4a0d      	ldr	r2, [pc, #52]	@ (8003848 <HAL_TIM_MspPostInit+0x5c>)
 8003812:	f043 0308 	orr.w	r3, r3, #8
 8003816:	6193      	str	r3, [r2, #24]
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_TIM_MspPostInit+0x5c>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003824:	23c0      	movs	r3, #192	@ 0xc0
 8003826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2302      	movs	r3, #2
 800382e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003830:	f107 0310 	add.w	r3, r7, #16
 8003834:	4619      	mov	r1, r3
 8003836:	4805      	ldr	r0, [pc, #20]	@ (800384c <HAL_TIM_MspPostInit+0x60>)
 8003838:	f000 fd40 	bl	80042bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800383c:	bf00      	nop
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40000800 	.word	0x40000800
 8003848:	40021000 	.word	0x40021000
 800384c:	40010c00 	.word	0x40010c00

08003850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 0318 	add.w	r3, r7, #24
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3c      	ldr	r2, [pc, #240]	@ (800395c <HAL_UART_MspInit+0x10c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d132      	bne.n	80038d6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003870:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <HAL_UART_MspInit+0x110>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a3a      	ldr	r2, [pc, #232]	@ (8003960 <HAL_UART_MspInit+0x110>)
 8003876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b38      	ldr	r3, [pc, #224]	@ (8003960 <HAL_UART_MspInit+0x110>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003888:	4b35      	ldr	r3, [pc, #212]	@ (8003960 <HAL_UART_MspInit+0x110>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	4a34      	ldr	r2, [pc, #208]	@ (8003960 <HAL_UART_MspInit+0x110>)
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	6193      	str	r3, [r2, #24]
 8003894:	4b32      	ldr	r3, [pc, #200]	@ (8003960 <HAL_UART_MspInit+0x110>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
 80038a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038aa:	2303      	movs	r3, #3
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ae:	f107 0318 	add.w	r3, r7, #24
 80038b2:	4619      	mov	r1, r3
 80038b4:	482b      	ldr	r0, [pc, #172]	@ (8003964 <HAL_UART_MspInit+0x114>)
 80038b6:	f000 fd01 	bl	80042bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c8:	f107 0318 	add.w	r3, r7, #24
 80038cc:	4619      	mov	r1, r3
 80038ce:	4825      	ldr	r0, [pc, #148]	@ (8003964 <HAL_UART_MspInit+0x114>)
 80038d0:	f000 fcf4 	bl	80042bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80038d4:	e03e      	b.n	8003954 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a23      	ldr	r2, [pc, #140]	@ (8003968 <HAL_UART_MspInit+0x118>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d139      	bne.n	8003954 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003960 <HAL_UART_MspInit+0x110>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003960 <HAL_UART_MspInit+0x110>)
 80038e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ea:	61d3      	str	r3, [r2, #28]
 80038ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <HAL_UART_MspInit+0x110>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f8:	4b19      	ldr	r3, [pc, #100]	@ (8003960 <HAL_UART_MspInit+0x110>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <HAL_UART_MspInit+0x110>)
 80038fe:	f043 0308 	orr.w	r3, r3, #8
 8003902:	6193      	str	r3, [r2, #24]
 8003904:	4b16      	ldr	r3, [pc, #88]	@ (8003960 <HAL_UART_MspInit+0x110>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800391a:	2303      	movs	r3, #3
 800391c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391e:	f107 0318 	add.w	r3, r7, #24
 8003922:	4619      	mov	r1, r3
 8003924:	4811      	ldr	r0, [pc, #68]	@ (800396c <HAL_UART_MspInit+0x11c>)
 8003926:	f000 fcc9 	bl	80042bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800392a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800392e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003938:	f107 0318 	add.w	r3, r7, #24
 800393c:	4619      	mov	r1, r3
 800393e:	480b      	ldr	r0, [pc, #44]	@ (800396c <HAL_UART_MspInit+0x11c>)
 8003940:	f000 fcbc 	bl	80042bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	2027      	movs	r0, #39	@ 0x27
 800394a:	f000 fbc0 	bl	80040ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800394e:	2027      	movs	r0, #39	@ 0x27
 8003950:	f000 fbd9 	bl	8004106 <HAL_NVIC_EnableIRQ>
}
 8003954:	bf00      	nop
 8003956:	3728      	adds	r7, #40	@ 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40013800 	.word	0x40013800
 8003960:	40021000 	.word	0x40021000
 8003964:	40010800 	.word	0x40010800
 8003968:	40004800 	.word	0x40004800
 800396c:	40010c00 	.word	0x40010c00

08003970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <NMI_Handler+0x4>

08003978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <HardFault_Handler+0x4>

08003980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <MemManage_Handler+0x4>

08003988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <BusFault_Handler+0x4>

08003990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <UsageFault_Handler+0x4>

08003998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c0:	f000 f954 	bl	8003c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80039cc:	4802      	ldr	r0, [pc, #8]	@ (80039d8 <I2C1_EV_IRQHandler+0x10>)
 80039ce:	f001 fad7 	bl	8004f80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000234 	.word	0x20000234

080039dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80039e0:	4802      	ldr	r0, [pc, #8]	@ (80039ec <I2C1_ER_IRQHandler+0x10>)
 80039e2:	f001 fc20 	bl	8005226 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000234 	.word	0x20000234

080039f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039f4:	4802      	ldr	r0, [pc, #8]	@ (8003a00 <USART3_IRQHandler+0x10>)
 80039f6:	f004 fd3b 	bl	8008470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000318 	.word	0x20000318

08003a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return 1;
 8003a08:	2301      	movs	r3, #1
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <_kill>:

int _kill(int pid, int sig)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a1c:	f006 ff48 	bl	800a8b0 <__errno>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2216      	movs	r2, #22
 8003a24:	601a      	str	r2, [r3, #0]
  return -1;
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <_exit>:

void _exit (int status)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ffe7 	bl	8003a12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <_exit+0x12>

08003a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e00a      	b.n	8003a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a5a:	f3af 8000 	nop.w
 8003a5e:	4601      	mov	r1, r0
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	60ba      	str	r2, [r7, #8]
 8003a66:	b2ca      	uxtb	r2, r1
 8003a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	dbf0      	blt.n	8003a5a <_read+0x12>
  }

  return len;
 8003a78:	687b      	ldr	r3, [r7, #4]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e009      	b.n	8003aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	60ba      	str	r2, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	dbf1      	blt.n	8003a94 <_write+0x12>
  }
  return len;
 8003ab0:	687b      	ldr	r3, [r7, #4]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <_close>:

int _close(int file)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ae0:	605a      	str	r2, [r3, #4]
  return 0;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <_isatty>:

int _isatty(int file)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003af6:	2301      	movs	r3, #1
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
	...

08003b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b24:	4a14      	ldr	r2, [pc, #80]	@ (8003b78 <_sbrk+0x5c>)
 8003b26:	4b15      	ldr	r3, [pc, #84]	@ (8003b7c <_sbrk+0x60>)
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b30:	4b13      	ldr	r3, [pc, #76]	@ (8003b80 <_sbrk+0x64>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b38:	4b11      	ldr	r3, [pc, #68]	@ (8003b80 <_sbrk+0x64>)
 8003b3a:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <_sbrk+0x68>)
 8003b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b3e:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <_sbrk+0x64>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d207      	bcs.n	8003b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b4c:	f006 feb0 	bl	800a8b0 <__errno>
 8003b50:	4603      	mov	r3, r0
 8003b52:	220c      	movs	r2, #12
 8003b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5a:	e009      	b.n	8003b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b5c:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <_sbrk+0x64>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b62:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <_sbrk+0x64>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	4a05      	ldr	r2, [pc, #20]	@ (8003b80 <_sbrk+0x64>)
 8003b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20005000 	.word	0x20005000
 8003b7c:	00000400 	.word	0x00000400
 8003b80:	20000788 	.word	0x20000788
 8003b84:	200008e0 	.word	0x200008e0

08003b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b94:	f7ff fff8 	bl	8003b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b98:	480b      	ldr	r0, [pc, #44]	@ (8003bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b9a:	490c      	ldr	r1, [pc, #48]	@ (8003bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba0:	e002      	b.n	8003ba8 <LoopCopyDataInit>

08003ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba6:	3304      	adds	r3, #4

08003ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bac:	d3f9      	bcc.n	8003ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bae:	4a09      	ldr	r2, [pc, #36]	@ (8003bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003bb0:	4c09      	ldr	r4, [pc, #36]	@ (8003bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bb4:	e001      	b.n	8003bba <LoopFillZerobss>

08003bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb8:	3204      	adds	r2, #4

08003bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bbc:	d3fb      	bcc.n	8003bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bbe:	f006 fe7d 	bl	800a8bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bc2:	f7fe fe69 	bl	8002898 <main>
  bx lr
 8003bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8003bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bcc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003bd0:	0800f010 	.word	0x0800f010
  ldr r2, =_sbss
 8003bd4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003bd8:	200008dc 	.word	0x200008dc

08003bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bdc:	e7fe      	b.n	8003bdc <ADC1_2_IRQHandler>
	...

08003be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003be4:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <HAL_Init+0x28>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a07      	ldr	r2, [pc, #28]	@ (8003c08 <HAL_Init+0x28>)
 8003bea:	f043 0310 	orr.w	r3, r3, #16
 8003bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf0:	2003      	movs	r0, #3
 8003bf2:	f000 fa61 	bl	80040b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bf6:	200f      	movs	r0, #15
 8003bf8:	f000 f808 	bl	8003c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bfc:	f7ff fd0a 	bl	8003614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40022000 	.word	0x40022000

08003c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c14:	4b12      	ldr	r3, [pc, #72]	@ (8003c60 <HAL_InitTick+0x54>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <HAL_InitTick+0x58>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fa79 	bl	8004122 <HAL_SYSTICK_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00e      	b.n	8003c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b0f      	cmp	r3, #15
 8003c3e:	d80a      	bhi.n	8003c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c40:	2200      	movs	r2, #0
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	f000 fa41 	bl	80040ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c4c:	4a06      	ldr	r2, [pc, #24]	@ (8003c68 <HAL_InitTick+0x5c>)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000000 	.word	0x20000000
 8003c64:	20000008 	.word	0x20000008
 8003c68:	20000004 	.word	0x20000004

08003c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c70:	4b05      	ldr	r3, [pc, #20]	@ (8003c88 <HAL_IncTick+0x1c>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_IncTick+0x20>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	4a03      	ldr	r2, [pc, #12]	@ (8003c8c <HAL_IncTick+0x20>)
 8003c7e:	6013      	str	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	20000008 	.word	0x20000008
 8003c8c:	2000078c 	.word	0x2000078c

08003c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return uwTick;
 8003c94:	4b02      	ldr	r3, [pc, #8]	@ (8003ca0 <HAL_GetTick+0x10>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	2000078c 	.word	0x2000078c

08003ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cac:	f7ff fff0 	bl	8003c90 <HAL_GetTick>
 8003cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d005      	beq.n	8003cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <HAL_Delay+0x44>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cca:	bf00      	nop
 8003ccc:	f7ff ffe0 	bl	8003c90 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d8f7      	bhi.n	8003ccc <HAL_Delay+0x28>
  {
  }
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000008 	.word	0x20000008

08003cec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e0be      	b.n	8003e8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fca4 	bl	8003678 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8b3 	bl	8003e9c <ADC_ConversionStop_Disable>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 8099 	bne.w	8003e7a <HAL_ADC_Init+0x18e>
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 8095 	bne.w	8003e7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d58:	f023 0302 	bic.w	r3, r3, #2
 8003d5c:	f043 0202 	orr.w	r2, r3, #2
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7b1b      	ldrb	r3, [r3, #12]
 8003d72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d84:	d003      	beq.n	8003d8e <HAL_ADC_Init+0xa2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d102      	bne.n	8003d94 <HAL_ADC_Init+0xa8>
 8003d8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d92:	e000      	b.n	8003d96 <HAL_ADC_Init+0xaa>
 8003d94:	2300      	movs	r3, #0
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7d1b      	ldrb	r3, [r3, #20]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d119      	bne.n	8003dd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	7b1b      	ldrb	r3, [r3, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	035a      	lsls	r2, r3, #13
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e00b      	b.n	8003dd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	f043 0220 	orr.w	r2, r3, #32
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	f043 0201 	orr.w	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	4b28      	ldr	r3, [pc, #160]	@ (8003e94 <HAL_ADC_Init+0x1a8>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e08:	d003      	beq.n	8003e12 <HAL_ADC_Init+0x126>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d104      	bne.n	8003e1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	051b      	lsls	r3, r3, #20
 8003e1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	4b18      	ldr	r3, [pc, #96]	@ (8003e98 <HAL_ADC_Init+0x1ac>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d10b      	bne.n	8003e58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e56:	e018      	b.n	8003e8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	f023 0312 	bic.w	r3, r3, #18
 8003e60:	f043 0210 	orr.w	r2, r3, #16
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	f043 0201 	orr.w	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e78:	e007      	b.n	8003e8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7e:	f043 0210 	orr.w	r2, r3, #16
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	ffe1f7fd 	.word	0xffe1f7fd
 8003e98:	ff1f0efe 	.word	0xff1f0efe

08003e9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d12e      	bne.n	8003f14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ec6:	f7ff fee3 	bl	8003c90 <HAL_GetTick>
 8003eca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ecc:	e01b      	b.n	8003f06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ece:	f7ff fedf 	bl	8003c90 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d914      	bls.n	8003f06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10d      	bne.n	8003f06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	f043 0210 	orr.w	r2, r3, #16
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e007      	b.n	8003f16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d0dc      	beq.n	8003ece <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f30:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f52:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	60d3      	str	r3, [r2, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f6c:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <__NVIC_GetPriorityGrouping+0x18>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	f003 0307 	and.w	r3, r3, #7
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db0b      	blt.n	8003fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	f003 021f 	and.w	r2, r3, #31
 8003f9c:	4906      	ldr	r1, [pc, #24]	@ (8003fb8 <__NVIC_EnableIRQ+0x34>)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	e000e100 	.word	0xe000e100

08003fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	6039      	str	r1, [r7, #0]
 8003fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	db0a      	blt.n	8003fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	490c      	ldr	r1, [pc, #48]	@ (8004008 <__NVIC_SetPriority+0x4c>)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	0112      	lsls	r2, r2, #4
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	440b      	add	r3, r1
 8003fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fe4:	e00a      	b.n	8003ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	4908      	ldr	r1, [pc, #32]	@ (800400c <__NVIC_SetPriority+0x50>)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	3b04      	subs	r3, #4
 8003ff4:	0112      	lsls	r2, r2, #4
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	761a      	strb	r2, [r3, #24]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	e000e100 	.word	0xe000e100
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	@ 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f1c3 0307 	rsb	r3, r3, #7
 800402a:	2b04      	cmp	r3, #4
 800402c:	bf28      	it	cs
 800402e:	2304      	movcs	r3, #4
 8004030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	3304      	adds	r3, #4
 8004036:	2b06      	cmp	r3, #6
 8004038:	d902      	bls.n	8004040 <NVIC_EncodePriority+0x30>
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3b03      	subs	r3, #3
 800403e:	e000      	b.n	8004042 <NVIC_EncodePriority+0x32>
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004044:	f04f 32ff 	mov.w	r2, #4294967295
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43da      	mvns	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	401a      	ands	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004058:	f04f 31ff 	mov.w	r1, #4294967295
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	43d9      	mvns	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004068:	4313      	orrs	r3, r2
         );
}
 800406a:	4618      	mov	r0, r3
 800406c:	3724      	adds	r7, #36	@ 0x24
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3b01      	subs	r3, #1
 8004080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004084:	d301      	bcc.n	800408a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004086:	2301      	movs	r3, #1
 8004088:	e00f      	b.n	80040aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800408a:	4a0a      	ldr	r2, [pc, #40]	@ (80040b4 <SysTick_Config+0x40>)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3b01      	subs	r3, #1
 8004090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004092:	210f      	movs	r1, #15
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	f7ff ff90 	bl	8003fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800409c:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <SysTick_Config+0x40>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040a2:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <SysTick_Config+0x40>)
 80040a4:	2207      	movs	r2, #7
 80040a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	e000e010 	.word	0xe000e010

080040b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff2d 	bl	8003f20 <__NVIC_SetPriorityGrouping>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b086      	sub	sp, #24
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4603      	mov	r3, r0
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e0:	f7ff ff42 	bl	8003f68 <__NVIC_GetPriorityGrouping>
 80040e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	6978      	ldr	r0, [r7, #20]
 80040ec:	f7ff ff90 	bl	8004010 <NVIC_EncodePriority>
 80040f0:	4602      	mov	r2, r0
 80040f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff5f 	bl	8003fbc <__NVIC_SetPriority>
}
 80040fe:	bf00      	nop
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	4603      	mov	r3, r0
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff ff35 	bl	8003f84 <__NVIC_EnableIRQ>
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ffa2 	bl	8004074 <SysTick_Config>
 8004130:	4603      	mov	r3, r0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d008      	beq.n	8004164 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e020      	b.n	80041a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 020e 	bic.w	r2, r2, #14
 8004172:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f202 	lsl.w	r2, r1, r2
 8004192:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d005      	beq.n	80041d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2204      	movs	r2, #4
 80041cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	e051      	b.n	8004278 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 020e 	bic.w	r2, r2, #14
 80041e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0201 	bic.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a22      	ldr	r2, [pc, #136]	@ (8004284 <HAL_DMA_Abort_IT+0xd4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d029      	beq.n	8004252 <HAL_DMA_Abort_IT+0xa2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a21      	ldr	r2, [pc, #132]	@ (8004288 <HAL_DMA_Abort_IT+0xd8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <HAL_DMA_Abort_IT+0x9e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1f      	ldr	r2, [pc, #124]	@ (800428c <HAL_DMA_Abort_IT+0xdc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01a      	beq.n	8004248 <HAL_DMA_Abort_IT+0x98>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1e      	ldr	r2, [pc, #120]	@ (8004290 <HAL_DMA_Abort_IT+0xe0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d012      	beq.n	8004242 <HAL_DMA_Abort_IT+0x92>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1c      	ldr	r2, [pc, #112]	@ (8004294 <HAL_DMA_Abort_IT+0xe4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00a      	beq.n	800423c <HAL_DMA_Abort_IT+0x8c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1b      	ldr	r2, [pc, #108]	@ (8004298 <HAL_DMA_Abort_IT+0xe8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d102      	bne.n	8004236 <HAL_DMA_Abort_IT+0x86>
 8004230:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004234:	e00e      	b.n	8004254 <HAL_DMA_Abort_IT+0xa4>
 8004236:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800423a:	e00b      	b.n	8004254 <HAL_DMA_Abort_IT+0xa4>
 800423c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004240:	e008      	b.n	8004254 <HAL_DMA_Abort_IT+0xa4>
 8004242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004246:	e005      	b.n	8004254 <HAL_DMA_Abort_IT+0xa4>
 8004248:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800424c:	e002      	b.n	8004254 <HAL_DMA_Abort_IT+0xa4>
 800424e:	2310      	movs	r3, #16
 8004250:	e000      	b.n	8004254 <HAL_DMA_Abort_IT+0xa4>
 8004252:	2301      	movs	r3, #1
 8004254:	4a11      	ldr	r2, [pc, #68]	@ (800429c <HAL_DMA_Abort_IT+0xec>)
 8004256:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
    } 
  }
  return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40020008 	.word	0x40020008
 8004288:	4002001c 	.word	0x4002001c
 800428c:	40020030 	.word	0x40020030
 8004290:	40020044 	.word	0x40020044
 8004294:	40020058 	.word	0x40020058
 8004298:	4002006c 	.word	0x4002006c
 800429c:	40020000 	.word	0x40020000

080042a0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80042ae:	b2db      	uxtb	r3, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042bc:	b480      	push	{r7}
 80042be:	b08b      	sub	sp, #44	@ 0x2c
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042ca:	2300      	movs	r3, #0
 80042cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ce:	e169      	b.n	80045a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042d0:	2201      	movs	r2, #1
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	f040 8158 	bne.w	800459e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4a9a      	ldr	r2, [pc, #616]	@ (800455c <HAL_GPIO_Init+0x2a0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d05e      	beq.n	80043b6 <HAL_GPIO_Init+0xfa>
 80042f8:	4a98      	ldr	r2, [pc, #608]	@ (800455c <HAL_GPIO_Init+0x2a0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d875      	bhi.n	80043ea <HAL_GPIO_Init+0x12e>
 80042fe:	4a98      	ldr	r2, [pc, #608]	@ (8004560 <HAL_GPIO_Init+0x2a4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d058      	beq.n	80043b6 <HAL_GPIO_Init+0xfa>
 8004304:	4a96      	ldr	r2, [pc, #600]	@ (8004560 <HAL_GPIO_Init+0x2a4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d86f      	bhi.n	80043ea <HAL_GPIO_Init+0x12e>
 800430a:	4a96      	ldr	r2, [pc, #600]	@ (8004564 <HAL_GPIO_Init+0x2a8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d052      	beq.n	80043b6 <HAL_GPIO_Init+0xfa>
 8004310:	4a94      	ldr	r2, [pc, #592]	@ (8004564 <HAL_GPIO_Init+0x2a8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d869      	bhi.n	80043ea <HAL_GPIO_Init+0x12e>
 8004316:	4a94      	ldr	r2, [pc, #592]	@ (8004568 <HAL_GPIO_Init+0x2ac>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d04c      	beq.n	80043b6 <HAL_GPIO_Init+0xfa>
 800431c:	4a92      	ldr	r2, [pc, #584]	@ (8004568 <HAL_GPIO_Init+0x2ac>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d863      	bhi.n	80043ea <HAL_GPIO_Init+0x12e>
 8004322:	4a92      	ldr	r2, [pc, #584]	@ (800456c <HAL_GPIO_Init+0x2b0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d046      	beq.n	80043b6 <HAL_GPIO_Init+0xfa>
 8004328:	4a90      	ldr	r2, [pc, #576]	@ (800456c <HAL_GPIO_Init+0x2b0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d85d      	bhi.n	80043ea <HAL_GPIO_Init+0x12e>
 800432e:	2b12      	cmp	r3, #18
 8004330:	d82a      	bhi.n	8004388 <HAL_GPIO_Init+0xcc>
 8004332:	2b12      	cmp	r3, #18
 8004334:	d859      	bhi.n	80043ea <HAL_GPIO_Init+0x12e>
 8004336:	a201      	add	r2, pc, #4	@ (adr r2, 800433c <HAL_GPIO_Init+0x80>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	080043b7 	.word	0x080043b7
 8004340:	08004391 	.word	0x08004391
 8004344:	080043a3 	.word	0x080043a3
 8004348:	080043e5 	.word	0x080043e5
 800434c:	080043eb 	.word	0x080043eb
 8004350:	080043eb 	.word	0x080043eb
 8004354:	080043eb 	.word	0x080043eb
 8004358:	080043eb 	.word	0x080043eb
 800435c:	080043eb 	.word	0x080043eb
 8004360:	080043eb 	.word	0x080043eb
 8004364:	080043eb 	.word	0x080043eb
 8004368:	080043eb 	.word	0x080043eb
 800436c:	080043eb 	.word	0x080043eb
 8004370:	080043eb 	.word	0x080043eb
 8004374:	080043eb 	.word	0x080043eb
 8004378:	080043eb 	.word	0x080043eb
 800437c:	080043eb 	.word	0x080043eb
 8004380:	08004399 	.word	0x08004399
 8004384:	080043ad 	.word	0x080043ad
 8004388:	4a79      	ldr	r2, [pc, #484]	@ (8004570 <HAL_GPIO_Init+0x2b4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800438e:	e02c      	b.n	80043ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	623b      	str	r3, [r7, #32]
          break;
 8004396:	e029      	b.n	80043ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	3304      	adds	r3, #4
 800439e:	623b      	str	r3, [r7, #32]
          break;
 80043a0:	e024      	b.n	80043ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	3308      	adds	r3, #8
 80043a8:	623b      	str	r3, [r7, #32]
          break;
 80043aa:	e01f      	b.n	80043ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	330c      	adds	r3, #12
 80043b2:	623b      	str	r3, [r7, #32]
          break;
 80043b4:	e01a      	b.n	80043ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043be:	2304      	movs	r3, #4
 80043c0:	623b      	str	r3, [r7, #32]
          break;
 80043c2:	e013      	b.n	80043ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043cc:	2308      	movs	r3, #8
 80043ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	611a      	str	r2, [r3, #16]
          break;
 80043d6:	e009      	b.n	80043ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043d8:	2308      	movs	r3, #8
 80043da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	615a      	str	r2, [r3, #20]
          break;
 80043e2:	e003      	b.n	80043ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043e4:	2300      	movs	r3, #0
 80043e6:	623b      	str	r3, [r7, #32]
          break;
 80043e8:	e000      	b.n	80043ec <HAL_GPIO_Init+0x130>
          break;
 80043ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2bff      	cmp	r3, #255	@ 0xff
 80043f0:	d801      	bhi.n	80043f6 <HAL_GPIO_Init+0x13a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	e001      	b.n	80043fa <HAL_GPIO_Init+0x13e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2bff      	cmp	r3, #255	@ 0xff
 8004400:	d802      	bhi.n	8004408 <HAL_GPIO_Init+0x14c>
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	e002      	b.n	800440e <HAL_GPIO_Init+0x152>
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	3b08      	subs	r3, #8
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	210f      	movs	r1, #15
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	fa01 f303 	lsl.w	r3, r1, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	401a      	ands	r2, r3
 8004420:	6a39      	ldr	r1, [r7, #32]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	fa01 f303 	lsl.w	r3, r1, r3
 8004428:	431a      	orrs	r2, r3
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80b1 	beq.w	800459e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800443c:	4b4d      	ldr	r3, [pc, #308]	@ (8004574 <HAL_GPIO_Init+0x2b8>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	4a4c      	ldr	r2, [pc, #304]	@ (8004574 <HAL_GPIO_Init+0x2b8>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6193      	str	r3, [r2, #24]
 8004448:	4b4a      	ldr	r3, [pc, #296]	@ (8004574 <HAL_GPIO_Init+0x2b8>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004454:	4a48      	ldr	r2, [pc, #288]	@ (8004578 <HAL_GPIO_Init+0x2bc>)
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	3302      	adds	r3, #2
 800445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004460:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	220f      	movs	r2, #15
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4013      	ands	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a40      	ldr	r2, [pc, #256]	@ (800457c <HAL_GPIO_Init+0x2c0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_GPIO_Init+0x1ec>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a3f      	ldr	r2, [pc, #252]	@ (8004580 <HAL_GPIO_Init+0x2c4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00d      	beq.n	80044a4 <HAL_GPIO_Init+0x1e8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a3e      	ldr	r2, [pc, #248]	@ (8004584 <HAL_GPIO_Init+0x2c8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d007      	beq.n	80044a0 <HAL_GPIO_Init+0x1e4>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a3d      	ldr	r2, [pc, #244]	@ (8004588 <HAL_GPIO_Init+0x2cc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d101      	bne.n	800449c <HAL_GPIO_Init+0x1e0>
 8004498:	2303      	movs	r3, #3
 800449a:	e006      	b.n	80044aa <HAL_GPIO_Init+0x1ee>
 800449c:	2304      	movs	r3, #4
 800449e:	e004      	b.n	80044aa <HAL_GPIO_Init+0x1ee>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e002      	b.n	80044aa <HAL_GPIO_Init+0x1ee>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <HAL_GPIO_Init+0x1ee>
 80044a8:	2300      	movs	r3, #0
 80044aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ac:	f002 0203 	and.w	r2, r2, #3
 80044b0:	0092      	lsls	r2, r2, #2
 80044b2:	4093      	lsls	r3, r2
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044ba:	492f      	ldr	r1, [pc, #188]	@ (8004578 <HAL_GPIO_Init+0x2bc>)
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	3302      	adds	r3, #2
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d006      	beq.n	80044e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044d4:	4b2d      	ldr	r3, [pc, #180]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	492c      	ldr	r1, [pc, #176]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	4313      	orrs	r3, r2
 80044de:	608b      	str	r3, [r1, #8]
 80044e0:	e006      	b.n	80044f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044e2:	4b2a      	ldr	r3, [pc, #168]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	4928      	ldr	r1, [pc, #160]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044fc:	4b23      	ldr	r3, [pc, #140]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	4922      	ldr	r1, [pc, #136]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	4313      	orrs	r3, r2
 8004506:	60cb      	str	r3, [r1, #12]
 8004508:	e006      	b.n	8004518 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800450a:	4b20      	ldr	r3, [pc, #128]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	43db      	mvns	r3, r3
 8004512:	491e      	ldr	r1, [pc, #120]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 8004514:	4013      	ands	r3, r2
 8004516:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d006      	beq.n	8004532 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004524:	4b19      	ldr	r3, [pc, #100]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	4918      	ldr	r1, [pc, #96]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
 8004530:	e006      	b.n	8004540 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004532:	4b16      	ldr	r3, [pc, #88]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	43db      	mvns	r3, r3
 800453a:	4914      	ldr	r1, [pc, #80]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 800453c:	4013      	ands	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d021      	beq.n	8004590 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800454c:	4b0f      	ldr	r3, [pc, #60]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	490e      	ldr	r1, [pc, #56]	@ (800458c <HAL_GPIO_Init+0x2d0>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e021      	b.n	800459e <HAL_GPIO_Init+0x2e2>
 800455a:	bf00      	nop
 800455c:	10320000 	.word	0x10320000
 8004560:	10310000 	.word	0x10310000
 8004564:	10220000 	.word	0x10220000
 8004568:	10210000 	.word	0x10210000
 800456c:	10120000 	.word	0x10120000
 8004570:	10110000 	.word	0x10110000
 8004574:	40021000 	.word	0x40021000
 8004578:	40010000 	.word	0x40010000
 800457c:	40010800 	.word	0x40010800
 8004580:	40010c00 	.word	0x40010c00
 8004584:	40011000 	.word	0x40011000
 8004588:	40011400 	.word	0x40011400
 800458c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HAL_GPIO_Init+0x304>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	43db      	mvns	r3, r3
 8004598:	4909      	ldr	r1, [pc, #36]	@ (80045c0 <HAL_GPIO_Init+0x304>)
 800459a:	4013      	ands	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	3301      	adds	r3, #1
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	fa22 f303 	lsr.w	r3, r2, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f47f ae8e 	bne.w	80042d0 <HAL_GPIO_Init+0x14>
  }
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop
 80045b8:	372c      	adds	r7, #44	@ 0x2c
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	40010400 	.word	0x40010400

080045c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	807b      	strh	r3, [r7, #2]
 80045d0:	4613      	mov	r3, r2
 80045d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045d4:	787b      	ldrb	r3, [r7, #1]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045da:	887a      	ldrh	r2, [r7, #2]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045e0:	e003      	b.n	80045ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045e2:	887b      	ldrh	r3, [r7, #2]
 80045e4:	041a      	lsls	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	611a      	str	r2, [r3, #16]
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr

080045f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e12b      	b.n	800485e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff f868 	bl	80036f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	@ 0x24
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004658:	f003 f8e2 	bl	8007820 <HAL_RCC_GetPCLK1Freq>
 800465c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4a81      	ldr	r2, [pc, #516]	@ (8004868 <HAL_I2C_Init+0x274>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d807      	bhi.n	8004678 <HAL_I2C_Init+0x84>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a80      	ldr	r2, [pc, #512]	@ (800486c <HAL_I2C_Init+0x278>)
 800466c:	4293      	cmp	r3, r2
 800466e:	bf94      	ite	ls
 8004670:	2301      	movls	r3, #1
 8004672:	2300      	movhi	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e006      	b.n	8004686 <HAL_I2C_Init+0x92>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4a7d      	ldr	r2, [pc, #500]	@ (8004870 <HAL_I2C_Init+0x27c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	bf94      	ite	ls
 8004680:	2301      	movls	r3, #1
 8004682:	2300      	movhi	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0e7      	b.n	800485e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a78      	ldr	r2, [pc, #480]	@ (8004874 <HAL_I2C_Init+0x280>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	0c9b      	lsrs	r3, r3, #18
 8004698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a6a      	ldr	r2, [pc, #424]	@ (8004868 <HAL_I2C_Init+0x274>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d802      	bhi.n	80046c8 <HAL_I2C_Init+0xd4>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	3301      	adds	r3, #1
 80046c6:	e009      	b.n	80046dc <HAL_I2C_Init+0xe8>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	4a69      	ldr	r2, [pc, #420]	@ (8004878 <HAL_I2C_Init+0x284>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	099b      	lsrs	r3, r3, #6
 80046da:	3301      	adds	r3, #1
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	495c      	ldr	r1, [pc, #368]	@ (8004868 <HAL_I2C_Init+0x274>)
 80046f8:	428b      	cmp	r3, r1
 80046fa:	d819      	bhi.n	8004730 <HAL_I2C_Init+0x13c>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1e59      	subs	r1, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fbb1 f3f3 	udiv	r3, r1, r3
 800470a:	1c59      	adds	r1, r3, #1
 800470c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004710:	400b      	ands	r3, r1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_I2C_Init+0x138>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1e59      	subs	r1, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	fbb1 f3f3 	udiv	r3, r1, r3
 8004724:	3301      	adds	r3, #1
 8004726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800472a:	e051      	b.n	80047d0 <HAL_I2C_Init+0x1dc>
 800472c:	2304      	movs	r3, #4
 800472e:	e04f      	b.n	80047d0 <HAL_I2C_Init+0x1dc>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d111      	bne.n	800475c <HAL_I2C_Init+0x168>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	1e58      	subs	r0, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6859      	ldr	r1, [r3, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	440b      	add	r3, r1
 8004746:	fbb0 f3f3 	udiv	r3, r0, r3
 800474a:	3301      	adds	r3, #1
 800474c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004750:	2b00      	cmp	r3, #0
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	e012      	b.n	8004782 <HAL_I2C_Init+0x18e>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1e58      	subs	r0, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	0099      	lsls	r1, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004772:	3301      	adds	r3, #1
 8004774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004778:	2b00      	cmp	r3, #0
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_I2C_Init+0x196>
 8004786:	2301      	movs	r3, #1
 8004788:	e022      	b.n	80047d0 <HAL_I2C_Init+0x1dc>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10e      	bne.n	80047b0 <HAL_I2C_Init+0x1bc>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1e58      	subs	r0, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	440b      	add	r3, r1
 80047a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ae:	e00f      	b.n	80047d0 <HAL_I2C_Init+0x1dc>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1e58      	subs	r0, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6859      	ldr	r1, [r3, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	0099      	lsls	r1, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c6:	3301      	adds	r3, #1
 80047c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	6809      	ldr	r1, [r1, #0]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6911      	ldr	r1, [r2, #16]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68d2      	ldr	r2, [r2, #12]
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	430b      	orrs	r3, r1
 8004812:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	000186a0 	.word	0x000186a0
 800486c:	001e847f 	.word	0x001e847f
 8004870:	003d08ff 	.word	0x003d08ff
 8004874:	431bde83 	.word	0x431bde83
 8004878:	10624dd3 	.word	0x10624dd3

0800487c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d103      	bne.n	800489a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]
  }
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	4608      	mov	r0, r1
 80048ae:	4611      	mov	r1, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	817b      	strh	r3, [r7, #10]
 80048b6:	460b      	mov	r3, r1
 80048b8:	813b      	strh	r3, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048be:	f7ff f9e7 	bl	8003c90 <HAL_GetTick>
 80048c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	f040 80d9 	bne.w	8004a84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	2319      	movs	r3, #25
 80048d8:	2201      	movs	r2, #1
 80048da:	496d      	ldr	r1, [pc, #436]	@ (8004a90 <HAL_I2C_Mem_Write+0x1ec>)
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f002 f953 	bl	8006b88 <I2C_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
 80048ea:	e0cc      	b.n	8004a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Mem_Write+0x56>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e0c5      	b.n	8004a86 <HAL_I2C_Mem_Write+0x1e2>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d007      	beq.n	8004920 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800492e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2221      	movs	r2, #33	@ 0x21
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2240      	movs	r2, #64	@ 0x40
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004950:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a4d      	ldr	r2, [pc, #308]	@ (8004a94 <HAL_I2C_Mem_Write+0x1f0>)
 8004960:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004962:	88f8      	ldrh	r0, [r7, #6]
 8004964:	893a      	ldrh	r2, [r7, #8]
 8004966:	8979      	ldrh	r1, [r7, #10]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	4603      	mov	r3, r0
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f001 fee2 	bl	800673c <I2C_RequestMemoryWrite>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d052      	beq.n	8004a24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e081      	b.n	8004a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f002 fa18 	bl	8006dbc <I2C_WaitOnTXEFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00d      	beq.n	80049ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	2b04      	cmp	r3, #4
 8004998:	d107      	bne.n	80049aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e06b      	b.n	8004a86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	781a      	ldrb	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d11b      	bne.n	8004a24 <HAL_I2C_Mem_Write+0x180>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d017      	beq.n	8004a24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1aa      	bne.n	8004982 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f002 fa0b 	bl	8006e4c <I2C_WaitOnBTFFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00d      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d107      	bne.n	8004a54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e016      	b.n	8004a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e000      	b.n	8004a86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	00100002 	.word	0x00100002
 8004a94:	ffff0000 	.word	0xffff0000

08004a98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08c      	sub	sp, #48	@ 0x30
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	817b      	strh	r3, [r7, #10]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	813b      	strh	r3, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ab6:	f7ff f8eb 	bl	8003c90 <HAL_GetTick>
 8004aba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	f040 8250 	bne.w	8004f6a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	2319      	movs	r3, #25
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4982      	ldr	r1, [pc, #520]	@ (8004cdc <HAL_I2C_Mem_Read+0x244>)
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f002 f857 	bl	8006b88 <I2C_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e243      	b.n	8004f6c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_I2C_Mem_Read+0x5a>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e23c      	b.n	8004f6c <HAL_I2C_Mem_Read+0x4d4>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d007      	beq.n	8004b18 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2222      	movs	r2, #34	@ 0x22
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2240      	movs	r2, #64	@ 0x40
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a62      	ldr	r2, [pc, #392]	@ (8004ce0 <HAL_I2C_Mem_Read+0x248>)
 8004b58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b5a:	88f8      	ldrh	r0, [r7, #6]
 8004b5c:	893a      	ldrh	r2, [r7, #8]
 8004b5e:	8979      	ldrh	r1, [r7, #10]
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	9301      	str	r3, [sp, #4]
 8004b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	4603      	mov	r3, r0
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f001 fe7c 	bl	8006868 <I2C_RequestMemoryRead>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e1f8      	b.n	8004f6c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d113      	bne.n	8004baa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	e1cc      	b.n	8004f44 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d11e      	bne.n	8004bf0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bc2:	b672      	cpsid	i
}
 8004bc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bec:	b662      	cpsie	i
}
 8004bee:	e035      	b.n	8004c5c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d11e      	bne.n	8004c36 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c08:	b672      	cpsid	i
}
 8004c0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c32:	b662      	cpsie	i
}
 8004c34:	e012      	b.n	8004c5c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c44:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004c5c:	e172      	b.n	8004f44 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	f200 811f 	bhi.w	8004ea6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d123      	bne.n	8004cb8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f002 f963 	bl	8006f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e173      	b.n	8004f6c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cb6:	e145      	b.n	8004f44 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d152      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4906      	ldr	r1, [pc, #24]	@ (8004ce4 <HAL_I2C_Mem_Read+0x24c>)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f001 ff5c 	bl	8006b88 <I2C_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d008      	beq.n	8004ce8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e148      	b.n	8004f6c <HAL_I2C_Mem_Read+0x4d4>
 8004cda:	bf00      	nop
 8004cdc:	00100002 	.word	0x00100002
 8004ce0:	ffff0000 	.word	0xffff0000
 8004ce4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004ce8:	b672      	cpsid	i
}
 8004cea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d2e:	b662      	cpsie	i
}
 8004d30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d64:	e0ee      	b.n	8004f44 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4981      	ldr	r1, [pc, #516]	@ (8004f74 <HAL_I2C_Mem_Read+0x4dc>)
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f001 ff09 	bl	8006b88 <I2C_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0f5      	b.n	8004f6c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d90:	b672      	cpsid	i
}
 8004d92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dc6:	4b6c      	ldr	r3, [pc, #432]	@ (8004f78 <HAL_I2C_Mem_Read+0x4e0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	08db      	lsrs	r3, r3, #3
 8004dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f7c <HAL_I2C_Mem_Read+0x4e4>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	0a1a      	lsrs	r2, r3, #8
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	00da      	lsls	r2, r3, #3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d118      	bne.n	8004e1e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004e0e:	b662      	cpsie	i
}
 8004e10:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e0a6      	b.n	8004f6c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d1d9      	bne.n	8004de0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e6e:	b662      	cpsie	i
}
 8004e70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ea4:	e04e      	b.n	8004f44 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f002 f848 	bl	8006f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e058      	b.n	8004f6c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d124      	bne.n	8004f44 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d107      	bne.n	8004f12 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f10:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f47f ae88 	bne.w	8004c5e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004f6a:	2302      	movs	r3, #2
  }
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3728      	adds	r7, #40	@ 0x28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	00010004 	.word	0x00010004
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	14f8b589 	.word	0x14f8b589

08004f80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fa0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d003      	beq.n	8004fb8 <HAL_I2C_EV_IRQHandler+0x38>
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b40      	cmp	r3, #64	@ 0x40
 8004fb4:	f040 80b1 	bne.w	800511a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10d      	bne.n	8004fee <HAL_I2C_EV_IRQHandler+0x6e>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004fd8:	d003      	beq.n	8004fe2 <HAL_I2C_EV_IRQHandler+0x62>
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004fe0:	d101      	bne.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x66>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_I2C_EV_IRQHandler+0x68>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f000 8114 	beq.w	8005216 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00b      	beq.n	8005010 <HAL_I2C_EV_IRQHandler+0x90>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d006      	beq.n	8005010 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f002 f827 	bl	8007056 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fd74 	bl	8005af6 <I2C_Master_SB>
 800500e:	e083      	b.n	8005118 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <HAL_I2C_EV_IRQHandler+0xac>
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fdeb 	bl	8005c00 <I2C_Master_ADD10>
 800502a:	e075      	b.n	8005118 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <HAL_I2C_EV_IRQHandler+0xc8>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fe06 	bl	8005c52 <I2C_Master_ADDR>
 8005046:	e067      	b.n	8005118 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d036      	beq.n	80050c0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800505c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005060:	f000 80db 	beq.w	800521a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00d      	beq.n	800508a <HAL_I2C_EV_IRQHandler+0x10a>
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_I2C_EV_IRQHandler+0x10a>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f9d4 	bl	8005430 <I2C_MasterTransmit_TXE>
 8005088:	e046      	b.n	8005118 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80c2 	beq.w	800521a <HAL_I2C_EV_IRQHandler+0x29a>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80bc 	beq.w	800521a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050a2:	7bbb      	ldrb	r3, [r7, #14]
 80050a4:	2b21      	cmp	r3, #33	@ 0x21
 80050a6:	d103      	bne.n	80050b0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fa5d 	bl	8005568 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050ae:	e0b4      	b.n	800521a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b40      	cmp	r3, #64	@ 0x40
 80050b4:	f040 80b1 	bne.w	800521a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 facb 	bl	8005654 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050be:	e0ac      	b.n	800521a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ce:	f000 80a4 	beq.w	800521a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <HAL_I2C_EV_IRQHandler+0x178>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_I2C_EV_IRQHandler+0x178>
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fb47 	bl	8005784 <I2C_MasterReceive_RXNE>
 80050f6:	e00f      	b.n	8005118 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 808b 	beq.w	800521a <HAL_I2C_EV_IRQHandler+0x29a>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8085 	beq.w	800521a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fbff 	bl	8005914 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005116:	e080      	b.n	800521a <HAL_I2C_EV_IRQHandler+0x29a>
 8005118:	e07f      	b.n	800521a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d004      	beq.n	800512c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	e007      	b.n	800513c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d011      	beq.n	800516a <HAL_I2C_EV_IRQHandler+0x1ea>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00c      	beq.n	800516a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005160:	69b9      	ldr	r1, [r7, #24]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 ffcc 	bl	8006100 <I2C_Slave_ADDR>
 8005168:	e05a      	b.n	8005220 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_I2C_EV_IRQHandler+0x206>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f001 f806 	bl	8006190 <I2C_Slave_STOPF>
 8005184:	e04c      	b.n	8005220 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005186:	7bbb      	ldrb	r3, [r7, #14]
 8005188:	2b21      	cmp	r3, #33	@ 0x21
 800518a:	d002      	beq.n	8005192 <HAL_I2C_EV_IRQHandler+0x212>
 800518c:	7bbb      	ldrb	r3, [r7, #14]
 800518e:	2b29      	cmp	r3, #41	@ 0x29
 8005190:	d120      	bne.n	80051d4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00d      	beq.n	80051b8 <HAL_I2C_EV_IRQHandler+0x238>
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_I2C_EV_IRQHandler+0x238>
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d103      	bne.n	80051b8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fee9 	bl	8005f88 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051b6:	e032      	b.n	800521e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d02d      	beq.n	800521e <HAL_I2C_EV_IRQHandler+0x29e>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d028      	beq.n	800521e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 ff18 	bl	8006002 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051d2:	e024      	b.n	800521e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <HAL_I2C_EV_IRQHandler+0x27a>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_I2C_EV_IRQHandler+0x27a>
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 ff25 	bl	8006042 <I2C_SlaveReceive_RXNE>
 80051f8:	e012      	b.n	8005220 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 ff55 	bl	80060be <I2C_SlaveReceive_BTF>
 8005214:	e004      	b.n	8005220 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005216:	bf00      	nop
 8005218:	e002      	b.n	8005220 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800521a:	bf00      	nop
 800521c:	e000      	b.n	8005220 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800521e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b08a      	sub	sp, #40	@ 0x28
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800523e:	2300      	movs	r3, #0
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005248:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <HAL_I2C_ER_IRQHandler+0x5a>
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d010      	beq.n	8005280 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800526e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800527e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <HAL_I2C_ER_IRQHandler+0x80>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	f043 0302 	orr.w	r3, r3, #2
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80052a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d03e      	beq.n	800532e <HAL_I2C_ER_IRQHandler+0x108>
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d039      	beq.n	800532e <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80052ba:	7efb      	ldrb	r3, [r7, #27]
 80052bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80052d4:	7ebb      	ldrb	r3, [r7, #26]
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d112      	bne.n	8005300 <HAL_I2C_ER_IRQHandler+0xda>
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10f      	bne.n	8005300 <HAL_I2C_ER_IRQHandler+0xda>
 80052e0:	7cfb      	ldrb	r3, [r7, #19]
 80052e2:	2b21      	cmp	r3, #33	@ 0x21
 80052e4:	d008      	beq.n	80052f8 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80052e6:	7cfb      	ldrb	r3, [r7, #19]
 80052e8:	2b29      	cmp	r3, #41	@ 0x29
 80052ea:	d005      	beq.n	80052f8 <HAL_I2C_ER_IRQHandler+0xd2>
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	2b28      	cmp	r3, #40	@ 0x28
 80052f0:	d106      	bne.n	8005300 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b21      	cmp	r3, #33	@ 0x21
 80052f6:	d103      	bne.n	8005300 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 f879 	bl	80063f0 <I2C_Slave_AF>
 80052fe:	e016      	b.n	800532e <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005308:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	f043 0304 	orr.w	r3, r3, #4
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005312:	7efb      	ldrb	r3, [r7, #27]
 8005314:	2b10      	cmp	r3, #16
 8005316:	d002      	beq.n	800531e <HAL_I2C_ER_IRQHandler+0xf8>
 8005318:	7efb      	ldrb	r3, [r7, #27]
 800531a:	2b40      	cmp	r3, #64	@ 0x40
 800531c:	d107      	bne.n	800532e <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <HAL_I2C_ER_IRQHandler+0x12e>
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	f043 0308 	orr.w	r3, r3, #8
 8005348:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005352:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 f8b6 	bl	80064d8 <I2C_ITError>
  }
}
 800536c:	bf00      	nop
 800536e:	3728      	adds	r7, #40	@ 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	70fb      	strb	r3, [r7, #3]
 80053c8:	4613      	mov	r3, r2
 80053ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005446:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005452:	2b00      	cmp	r3, #0
 8005454:	d150      	bne.n	80054f8 <I2C_MasterTransmit_TXE+0xc8>
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	2b21      	cmp	r3, #33	@ 0x21
 800545a:	d14d      	bne.n	80054f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b08      	cmp	r3, #8
 8005460:	d01d      	beq.n	800549e <I2C_MasterTransmit_TXE+0x6e>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b20      	cmp	r3, #32
 8005466:	d01a      	beq.n	800549e <I2C_MasterTransmit_TXE+0x6e>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800546e:	d016      	beq.n	800549e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800547e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2211      	movs	r2, #17
 8005484:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff6c 	bl	8005374 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800549c:	e060      	b.n	8005560 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b40      	cmp	r3, #64	@ 0x40
 80054d6:	d107      	bne.n	80054e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff ff81 	bl	80053e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054e6:	e03b      	b.n	8005560 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff ff3f 	bl	8005374 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054f6:	e033      	b.n	8005560 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b21      	cmp	r3, #33	@ 0x21
 80054fc:	d005      	beq.n	800550a <I2C_MasterTransmit_TXE+0xda>
 80054fe:	7bbb      	ldrb	r3, [r7, #14]
 8005500:	2b40      	cmp	r3, #64	@ 0x40
 8005502:	d12d      	bne.n	8005560 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b22      	cmp	r3, #34	@ 0x22
 8005508:	d12a      	bne.n	8005560 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d108      	bne.n	8005526 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005522:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005524:	e01c      	b.n	8005560 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b40      	cmp	r3, #64	@ 0x40
 8005530:	d103      	bne.n	800553a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f88e 	bl	8005654 <I2C_MemoryTransmit_TXE_BTF>
}
 8005538:	e012      	b.n	8005560 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553e:	781a      	ldrb	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800555e:	e7ff      	b.n	8005560 <I2C_MasterTransmit_TXE+0x130>
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b21      	cmp	r3, #33	@ 0x21
 8005580:	d164      	bne.n	800564c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d012      	beq.n	80055b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80055b0:	e04c      	b.n	800564c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d01d      	beq.n	80055f4 <I2C_MasterTransmit_BTF+0x8c>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	d01a      	beq.n	80055f4 <I2C_MasterTransmit_BTF+0x8c>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055c4:	d016      	beq.n	80055f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2211      	movs	r2, #17
 80055da:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff fec1 	bl	8005374 <HAL_I2C_MasterTxCpltCallback>
}
 80055f2:	e02b      	b.n	800564c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005602:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005612:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b40      	cmp	r3, #64	@ 0x40
 800562c:	d107      	bne.n	800563e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff fed6 	bl	80053e8 <HAL_I2C_MemTxCpltCallback>
}
 800563c:	e006      	b.n	800564c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fe94 	bl	8005374 <HAL_I2C_MasterTxCpltCallback>
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005662:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11d      	bne.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d10b      	bne.n	800568c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005678:	b2da      	uxtb	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800568a:	e077      	b.n	800577c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005690:	b29b      	uxth	r3, r3
 8005692:	121b      	asrs	r3, r3, #8
 8005694:	b2da      	uxtb	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056a6:	e069      	b.n	800577c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d10b      	bne.n	80056c8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056c6:	e059      	b.n	800577c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d152      	bne.n	8005776 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b22      	cmp	r3, #34	@ 0x22
 80056d4:	d10d      	bne.n	80056f2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056f0:	e044      	b.n	800577c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d015      	beq.n	8005728 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b21      	cmp	r3, #33	@ 0x21
 8005700:	d112      	bne.n	8005728 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005726:	e029      	b.n	800577c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d124      	bne.n	800577c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b21      	cmp	r3, #33	@ 0x21
 8005736:	d121      	bne.n	800577c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005746:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005756:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fe3a 	bl	80053e8 <HAL_I2C_MemTxCpltCallback>
}
 8005774:	e002      	b.n	800577c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff f880 	bl	800487c <I2C_Flush_DR>
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b22      	cmp	r3, #34	@ 0x22
 8005796:	f040 80b9 	bne.w	800590c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d921      	bls.n	80057f2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b03      	cmp	r3, #3
 80057dc:	f040 8096 	bne.w	800590c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ee:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80057f0:	e08c      	b.n	800590c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d07f      	beq.n	80058fa <I2C_MasterReceive_RXNE+0x176>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d002      	beq.n	8005806 <I2C_MasterReceive_RXNE+0x82>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d179      	bne.n	80058fa <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 fb68 	bl	8006edc <I2C_WaitOnSTOPRequestThroughIT>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d14c      	bne.n	80058ac <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005820:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005830:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b40      	cmp	r3, #64	@ 0x40
 800586a:	d10a      	bne.n	8005882 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fdbd 	bl	80053fa <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005880:	e044      	b.n	800590c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b08      	cmp	r3, #8
 800588e:	d002      	beq.n	8005896 <I2C_MasterReceive_RXNE+0x112>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b20      	cmp	r3, #32
 8005894:	d103      	bne.n	800589e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	631a      	str	r2, [r3, #48]	@ 0x30
 800589c:	e002      	b.n	80058a4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2212      	movs	r2, #18
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fd6e 	bl	8005386 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058aa:	e02f      	b.n	800590c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fd8a 	bl	800540c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058f8:	e008      	b.n	800590c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005908:	605a      	str	r2, [r3, #4]
}
 800590a:	e7ff      	b.n	800590c <I2C_MasterReceive_RXNE+0x188>
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b04      	cmp	r3, #4
 800592a:	d11b      	bne.n	8005964 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800593a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005962:	e0c4      	b.n	8005aee <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b03      	cmp	r3, #3
 800596c:	d129      	bne.n	80059c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800597c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b04      	cmp	r3, #4
 8005982:	d00a      	beq.n	800599a <I2C_MasterReceive_BTF+0x86>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d007      	beq.n	800599a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005998:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80059c0:	e095      	b.n	8005aee <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d17d      	bne.n	8005ac8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d002      	beq.n	80059d8 <I2C_MasterReceive_BTF+0xc4>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d108      	bne.n	80059ea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	e016      	b.n	8005a18 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d002      	beq.n	80059f6 <I2C_MasterReceive_BTF+0xe2>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d108      	bne.n	8005a08 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e007      	b.n	8005a18 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a16:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a72:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b40      	cmp	r3, #64	@ 0x40
 8005a86:	d10a      	bne.n	8005a9e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fcaf 	bl	80053fa <HAL_I2C_MemRxCpltCallback>
}
 8005a9c:	e027      	b.n	8005aee <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d002      	beq.n	8005ab2 <I2C_MasterReceive_BTF+0x19e>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d103      	bne.n	8005aba <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ab8:	e002      	b.n	8005ac0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2212      	movs	r2, #18
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff fc60 	bl	8005386 <HAL_I2C_MasterRxCpltCallback>
}
 8005ac6:	e012      	b.n	8005aee <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b40      	cmp	r3, #64	@ 0x40
 8005b08:	d117      	bne.n	8005b3a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b22:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b24:	e067      	b.n	8005bf6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	611a      	str	r2, [r3, #16]
}
 8005b38:	e05d      	b.n	8005bf6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b42:	d133      	bne.n	8005bac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b21      	cmp	r3, #33	@ 0x21
 8005b4e:	d109      	bne.n	8005b64 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b60:	611a      	str	r2, [r3, #16]
 8005b62:	e008      	b.n	8005b76 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d004      	beq.n	8005b88 <I2C_Master_SB+0x92>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d108      	bne.n	8005b9a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d032      	beq.n	8005bf6 <I2C_Master_SB+0x100>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02d      	beq.n	8005bf6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba8:	605a      	str	r2, [r3, #4]
}
 8005baa:	e024      	b.n	8005bf6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10e      	bne.n	8005bd2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	11db      	asrs	r3, r3, #7
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 0306 	and.w	r3, r3, #6
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f063 030f 	orn	r3, r3, #15
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	611a      	str	r2, [r3, #16]
}
 8005bd0:	e011      	b.n	8005bf6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10d      	bne.n	8005bf6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	11db      	asrs	r3, r3, #7
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 0306 	and.w	r3, r3, #6
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f063 030e 	orn	r3, r3, #14
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	611a      	str	r2, [r3, #16]
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <I2C_Master_ADD10+0x26>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d108      	bne.n	8005c38 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <I2C_Master_ADD10+0x48>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c46:	605a      	str	r2, [r3, #4]
  }
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b091      	sub	sp, #68	@ 0x44
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b22      	cmp	r3, #34	@ 0x22
 8005c7a:	f040 8174 	bne.w	8005f66 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10f      	bne.n	8005ca6 <I2C_Master_ADDR+0x54>
 8005c86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005c8a:	2b40      	cmp	r3, #64	@ 0x40
 8005c8c:	d10b      	bne.n	8005ca6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	e16b      	b.n	8005f7e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11d      	bne.n	8005cea <I2C_Master_ADDR+0x98>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cb6:	d118      	bne.n	8005cea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cdc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ce8:	e149      	b.n	8005f7e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d113      	bne.n	8005d1c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e120      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	f040 808a 	bne.w	8005e3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d2e:	d137      	bne.n	8005da0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d3e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d4e:	d113      	bne.n	8005d78 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d5e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d60:	2300      	movs	r3, #0
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	e0f2      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	623b      	str	r3, [r7, #32]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	623b      	str	r3, [r7, #32]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e0de      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d02e      	beq.n	8005e04 <I2C_Master_ADDR+0x1b2>
 8005da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d02b      	beq.n	8005e04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dae:	2b12      	cmp	r3, #18
 8005db0:	d102      	bne.n	8005db8 <I2C_Master_ADDR+0x166>
 8005db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d125      	bne.n	8005e04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d00e      	beq.n	8005ddc <I2C_Master_ADDR+0x18a>
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d00b      	beq.n	8005ddc <I2C_Master_ADDR+0x18a>
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d008      	beq.n	8005ddc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e007      	b.n	8005dec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005dea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	e0ac      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e14:	2300      	movs	r3, #0
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e090      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d158      	bne.n	8005ef8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d021      	beq.n	8005e90 <I2C_Master_ADDR+0x23e>
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d01e      	beq.n	8005e90 <I2C_Master_ADDR+0x23e>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d01b      	beq.n	8005e90 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e012      	b.n	8005eb6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e9e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ec4:	d14b      	bne.n	8005f5e <I2C_Master_ADDR+0x30c>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ecc:	d00b      	beq.n	8005ee6 <I2C_Master_ADDR+0x294>
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d008      	beq.n	8005ee6 <I2C_Master_ADDR+0x294>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d005      	beq.n	8005ee6 <I2C_Master_ADDR+0x294>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d002      	beq.n	8005ee6 <I2C_Master_ADDR+0x294>
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d13b      	bne.n	8005f5e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	e032      	b.n	8005f5e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f06:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f16:	d117      	bne.n	8005f48 <I2C_Master_ADDR+0x2f6>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f1e:	d00b      	beq.n	8005f38 <I2C_Master_ADDR+0x2e6>
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d008      	beq.n	8005f38 <I2C_Master_ADDR+0x2e6>
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d005      	beq.n	8005f38 <I2C_Master_ADDR+0x2e6>
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d002      	beq.n	8005f38 <I2C_Master_ADDR+0x2e6>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d107      	bne.n	8005f48 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f46:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f64:	e00b      	b.n	8005f7e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
}
 8005f7c:	e7ff      	b.n	8005f7e <I2C_Master_ADDR+0x32c>
 8005f7e:	bf00      	nop
 8005f80:	3744      	adds	r7, #68	@ 0x44
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d02b      	beq.n	8005ffa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	781a      	ldrb	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d114      	bne.n	8005ffa <I2C_SlaveTransmit_TXE+0x72>
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b29      	cmp	r3, #41	@ 0x29
 8005fd4:	d111      	bne.n	8005ffa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fe4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2221      	movs	r2, #33	@ 0x21
 8005fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2228      	movs	r2, #40	@ 0x28
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff f9cf 	bl	8005398 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d011      	beq.n	8006038 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006050:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d02c      	beq.n	80060b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d114      	bne.n	80060b6 <I2C_SlaveReceive_RXNE+0x74>
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006090:	d111      	bne.n	80060b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2222      	movs	r2, #34	@ 0x22
 80060a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2228      	movs	r2, #40	@ 0x28
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff f97a 	bl	80053aa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800611a:	2b28      	cmp	r3, #40	@ 0x28
 800611c:	d125      	bne.n	800616a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800612c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	81bb      	strh	r3, [r7, #12]
 800614c:	e002      	b.n	8006154 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800615c:	89ba      	ldrh	r2, [r7, #12]
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff f92a 	bl	80053bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006168:	e00e      	b.n	8006188 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616a:	2300      	movs	r3, #0
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80061b0:	2300      	movs	r3, #0
 80061b2:	60bb      	str	r3, [r7, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ec:	d172      	bne.n	80062d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	2b22      	cmp	r3, #34	@ 0x22
 80061f2:	d002      	beq.n	80061fa <I2C_Slave_STOPF+0x6a>
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80061f8:	d135      	bne.n	8006266 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	f043 0204 	orr.w	r2, r3, #4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800622c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe f834 	bl	80042a0 <HAL_DMA_GetState>
 8006238:	4603      	mov	r3, r0
 800623a:	2b01      	cmp	r3, #1
 800623c:	d049      	beq.n	80062d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006242:	4a69      	ldr	r2, [pc, #420]	@ (80063e8 <I2C_Slave_STOPF+0x258>)
 8006244:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	4618      	mov	r0, r3
 800624c:	f7fd ffb0 	bl	80041b0 <HAL_DMA_Abort_IT>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d03d      	beq.n	80062d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006264:	e035      	b.n	80062d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b29a      	uxth	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d005      	beq.n	800628a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	f043 0204 	orr.w	r2, r3, #4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006298:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fd fffe 	bl	80042a0 <HAL_DMA_GetState>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d014      	beq.n	80062d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ae:	4a4e      	ldr	r2, [pc, #312]	@ (80063e8 <I2C_Slave_STOPF+0x258>)
 80062b0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fd ff7a 	bl	80041b0 <HAL_DMA_Abort_IT>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
 80062d0:	e000      	b.n	80062d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d03e      	beq.n	800635c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d112      	bne.n	8006312 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691a      	ldr	r2, [r3, #16]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631c:	2b40      	cmp	r3, #64	@ 0x40
 800631e:	d112      	bne.n	8006346 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006354:	f043 0204 	orr.w	r2, r3, #4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8b7 	bl	80064d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800636a:	e039      	b.n	80063e0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006370:	d109      	bne.n	8006386 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2228      	movs	r2, #40	@ 0x28
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff f812 	bl	80053aa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b28      	cmp	r3, #40	@ 0x28
 8006390:	d111      	bne.n	80063b6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a15      	ldr	r2, [pc, #84]	@ (80063ec <I2C_Slave_STOPF+0x25c>)
 8006396:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff f811 	bl	80053d6 <HAL_I2C_ListenCpltCallback>
}
 80063b4:	e014      	b.n	80063e0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ba:	2b22      	cmp	r3, #34	@ 0x22
 80063bc:	d002      	beq.n	80063c4 <I2C_Slave_STOPF+0x234>
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	2b22      	cmp	r3, #34	@ 0x22
 80063c2:	d10d      	bne.n	80063e0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fe ffe5 	bl	80053aa <HAL_I2C_SlaveRxCpltCallback>
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	08006a39 	.word	0x08006a39
 80063ec:	ffff0000 	.word	0xffff0000

080063f0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d002      	beq.n	8006412 <I2C_Slave_AF+0x22>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b20      	cmp	r3, #32
 8006410:	d129      	bne.n	8006466 <I2C_Slave_AF+0x76>
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	2b28      	cmp	r3, #40	@ 0x28
 8006416:	d126      	bne.n	8006466 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a2e      	ldr	r2, [pc, #184]	@ (80064d4 <I2C_Slave_AF+0xe4>)
 800641c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800642c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006436:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006446:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fe ffb9 	bl	80053d6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006464:	e031      	b.n	80064ca <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b21      	cmp	r3, #33	@ 0x21
 800646a:	d129      	bne.n	80064c0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a19      	ldr	r2, [pc, #100]	@ (80064d4 <I2C_Slave_AF+0xe4>)
 8006470:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2221      	movs	r2, #33	@ 0x21
 8006476:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006496:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064b0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fe f9e2 	bl	800487c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fe ff6d 	bl	8005398 <HAL_I2C_SlaveTxCpltCallback>
}
 80064be:	e004      	b.n	80064ca <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064c8:	615a      	str	r2, [r3, #20]
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	ffff0000 	.word	0xffff0000

080064d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d002      	beq.n	80064fc <I2C_ITError+0x24>
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b40      	cmp	r3, #64	@ 0x40
 80064fa:	d10a      	bne.n	8006512 <I2C_ITError+0x3a>
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b22      	cmp	r3, #34	@ 0x22
 8006500:	d107      	bne.n	8006512 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006510:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006518:	2b28      	cmp	r3, #40	@ 0x28
 800651a:	d107      	bne.n	800652c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2228      	movs	r2, #40	@ 0x28
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800652a:	e015      	b.n	8006558 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006536:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800653a:	d00a      	beq.n	8006552 <I2C_ITError+0x7a>
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b60      	cmp	r3, #96	@ 0x60
 8006540:	d007      	beq.n	8006552 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006566:	d162      	bne.n	800662e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006576:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800657c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b01      	cmp	r3, #1
 8006584:	d020      	beq.n	80065c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658a:	4a6a      	ldr	r2, [pc, #424]	@ (8006734 <I2C_ITError+0x25c>)
 800658c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006592:	4618      	mov	r0, r3
 8006594:	f7fd fe0c 	bl	80041b0 <HAL_DMA_Abort_IT>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8089 	beq.w	80066b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065c2:	4610      	mov	r0, r2
 80065c4:	4798      	blx	r3
 80065c6:	e074      	b.n	80066b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	4a59      	ldr	r2, [pc, #356]	@ (8006734 <I2C_ITError+0x25c>)
 80065ce:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fd fdeb 	bl	80041b0 <HAL_DMA_Abort_IT>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d068      	beq.n	80066b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ea:	2b40      	cmp	r3, #64	@ 0x40
 80065ec:	d10b      	bne.n	8006606 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0201 	bic.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
 800662c:	e041      	b.n	80066b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b60      	cmp	r3, #96	@ 0x60
 8006638:	d125      	bne.n	8006686 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006652:	2b40      	cmp	r3, #64	@ 0x40
 8006654:	d10b      	bne.n	800666e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0201 	bic.w	r2, r2, #1
 800667c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fe fecd 	bl	800541e <HAL_I2C_AbortCpltCallback>
 8006684:	e015      	b.n	80066b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006690:	2b40      	cmp	r3, #64	@ 0x40
 8006692:	d10b      	bne.n	80066ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7fe fead 	bl	800540c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10e      	bne.n	80066e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b04      	cmp	r3, #4
 8006702:	d113      	bne.n	800672c <I2C_ITError+0x254>
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	2b28      	cmp	r3, #40	@ 0x28
 8006708:	d110      	bne.n	800672c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a0a      	ldr	r2, [pc, #40]	@ (8006738 <I2C_ITError+0x260>)
 800670e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fe fe55 	bl	80053d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	08006a39 	.word	0x08006a39
 8006738:	ffff0000 	.word	0xffff0000

0800673c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4603      	mov	r3, r0
 800674c:	817b      	strh	r3, [r7, #10]
 800674e:	460b      	mov	r3, r1
 8006750:	813b      	strh	r3, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006764:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	2200      	movs	r2, #0
 800676e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fa08 	bl	8006b88 <I2C_WaitOnFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00d      	beq.n	800679a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800678c:	d103      	bne.n	8006796 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006794:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e05f      	b.n	800685a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800679a:	897b      	ldrh	r3, [r7, #10]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	6a3a      	ldr	r2, [r7, #32]
 80067ae:	492d      	ldr	r1, [pc, #180]	@ (8006864 <I2C_RequestMemoryWrite+0x128>)
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fa63 	bl	8006c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e04c      	b.n	800685a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c0:	2300      	movs	r3, #0
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d8:	6a39      	ldr	r1, [r7, #32]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 faee 	bl	8006dbc <I2C_WaitOnTXEFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00d      	beq.n	8006802 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d107      	bne.n	80067fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e02b      	b.n	800685a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006802:	88fb      	ldrh	r3, [r7, #6]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d105      	bne.n	8006814 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006808:	893b      	ldrh	r3, [r7, #8]
 800680a:	b2da      	uxtb	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	611a      	str	r2, [r3, #16]
 8006812:	e021      	b.n	8006858 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006814:	893b      	ldrh	r3, [r7, #8]
 8006816:	0a1b      	lsrs	r3, r3, #8
 8006818:	b29b      	uxth	r3, r3
 800681a:	b2da      	uxtb	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006824:	6a39      	ldr	r1, [r7, #32]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fac8 	bl	8006dbc <I2C_WaitOnTXEFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	2b04      	cmp	r3, #4
 8006838:	d107      	bne.n	800684a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006848:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e005      	b.n	800685a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800684e:	893b      	ldrh	r3, [r7, #8]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	00010002 	.word	0x00010002

08006868 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	4608      	mov	r0, r1
 8006872:	4611      	mov	r1, r2
 8006874:	461a      	mov	r2, r3
 8006876:	4603      	mov	r3, r0
 8006878:	817b      	strh	r3, [r7, #10]
 800687a:	460b      	mov	r3, r1
 800687c:	813b      	strh	r3, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006890:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f96a 	bl	8006b88 <I2C_WaitOnFlagUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00d      	beq.n	80068d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c8:	d103      	bne.n	80068d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e0aa      	b.n	8006a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068d6:	897b      	ldrh	r3, [r7, #10]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80068e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	6a3a      	ldr	r2, [r7, #32]
 80068ea:	4952      	ldr	r1, [pc, #328]	@ (8006a34 <I2C_RequestMemoryRead+0x1cc>)
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f9c5 	bl	8006c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e097      	b.n	8006a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006914:	6a39      	ldr	r1, [r7, #32]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 fa50 	bl	8006dbc <I2C_WaitOnTXEFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00d      	beq.n	800693e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006926:	2b04      	cmp	r3, #4
 8006928:	d107      	bne.n	800693a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006938:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e076      	b.n	8006a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d105      	bne.n	8006950 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006944:	893b      	ldrh	r3, [r7, #8]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	611a      	str	r2, [r3, #16]
 800694e:	e021      	b.n	8006994 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006950:	893b      	ldrh	r3, [r7, #8]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	b29b      	uxth	r3, r3
 8006956:	b2da      	uxtb	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800695e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006960:	6a39      	ldr	r1, [r7, #32]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 fa2a 	bl	8006dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00d      	beq.n	800698a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	2b04      	cmp	r3, #4
 8006974:	d107      	bne.n	8006986 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006984:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e050      	b.n	8006a2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800698a:	893b      	ldrh	r3, [r7, #8]
 800698c:	b2da      	uxtb	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006996:	6a39      	ldr	r1, [r7, #32]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fa0f 	bl	8006dbc <I2C_WaitOnTXEFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00d      	beq.n	80069c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d107      	bne.n	80069bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e035      	b.n	8006a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f8d3 	bl	8006b88 <I2C_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00d      	beq.n	8006a04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069f6:	d103      	bne.n	8006a00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e013      	b.n	8006a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a04:	897b      	ldrh	r3, [r7, #10]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	6a3a      	ldr	r2, [r7, #32]
 8006a18:	4906      	ldr	r1, [pc, #24]	@ (8006a34 <I2C_RequestMemoryRead+0x1cc>)
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 f92e 	bl	8006c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	00010002 	.word	0x00010002

08006a38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a52:	4b4b      	ldr	r3, [pc, #300]	@ (8006b80 <I2C_DMAAbort+0x148>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	08db      	lsrs	r3, r3, #3
 8006a58:	4a4a      	ldr	r2, [pc, #296]	@ (8006b84 <I2C_DMAAbort+0x14c>)
 8006a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5e:	0a1a      	lsrs	r2, r3, #8
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	00da      	lsls	r2, r3, #3
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	f043 0220 	orr.w	r2, r3, #32
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006a7e:	e00a      	b.n	8006a96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a94:	d0ea      	beq.n	8006a6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ac4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad8:	2200      	movs	r2, #0
 8006ada:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae8:	2200      	movs	r2, #0
 8006aea:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b60      	cmp	r3, #96	@ 0x60
 8006b06:	d10e      	bne.n	8006b26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b1e:	6978      	ldr	r0, [r7, #20]
 8006b20:	f7fe fc7d 	bl	800541e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b24:	e027      	b.n	8006b76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b26:	7cfb      	ldrb	r3, [r7, #19]
 8006b28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b2c:	2b28      	cmp	r3, #40	@ 0x28
 8006b2e:	d117      	bne.n	8006b60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2200      	movs	r2, #0
 8006b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2228      	movs	r2, #40	@ 0x28
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006b5e:	e007      	b.n	8006b70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006b70:	6978      	ldr	r0, [r7, #20]
 8006b72:	f7fe fc4b 	bl	800540c <HAL_I2C_ErrorCallback>
}
 8006b76:	bf00      	nop
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000000 	.word	0x20000000
 8006b84:	14f8b589 	.word	0x14f8b589

08006b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b98:	e048      	b.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d044      	beq.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba2:	f7fd f875 	bl	8003c90 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d139      	bne.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	0c1b      	lsrs	r3, r3, #16
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d10d      	bne.n	8006bde <I2C_WaitOnFlagUntilTimeout+0x56>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	43da      	mvns	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bf0c      	ite	eq
 8006bd4:	2301      	moveq	r3, #1
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	e00c      	b.n	8006bf8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	43da      	mvns	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	4013      	ands	r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d116      	bne.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c18:	f043 0220 	orr.w	r2, r3, #32
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e023      	b.n	8006c74 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	0c1b      	lsrs	r3, r3, #16
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d10d      	bne.n	8006c52 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	43da      	mvns	r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4013      	ands	r3, r2
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	bf0c      	ite	eq
 8006c48:	2301      	moveq	r3, #1
 8006c4a:	2300      	movne	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	e00c      	b.n	8006c6c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	43da      	mvns	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	bf0c      	ite	eq
 8006c64:	2301      	moveq	r3, #1
 8006c66:	2300      	movne	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d093      	beq.n	8006b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c8a:	e071      	b.n	8006d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9a:	d123      	bne.n	8006ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006caa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd0:	f043 0204 	orr.w	r2, r3, #4
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e067      	b.n	8006db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d041      	beq.n	8006d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cec:	f7fc ffd0 	bl	8003c90 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d302      	bcc.n	8006d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d136      	bne.n	8006d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	0c1b      	lsrs	r3, r3, #16
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d10c      	bne.n	8006d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	43da      	mvns	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4013      	ands	r3, r2
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	e00b      	b.n	8006d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	43da      	mvns	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4013      	ands	r3, r2
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d016      	beq.n	8006d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5c:	f043 0220 	orr.w	r2, r3, #32
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e021      	b.n	8006db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	0c1b      	lsrs	r3, r3, #16
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d10c      	bne.n	8006d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	43da      	mvns	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	4013      	ands	r3, r2
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bf14      	ite	ne
 8006d8c:	2301      	movne	r3, #1
 8006d8e:	2300      	moveq	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	e00b      	b.n	8006dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	43da      	mvns	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bf14      	ite	ne
 8006da6:	2301      	movne	r3, #1
 8006da8:	2300      	moveq	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f47f af6d 	bne.w	8006c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dc8:	e034      	b.n	8006e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f915 	bl	8006ffa <I2C_IsAcknowledgeFailed>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e034      	b.n	8006e44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d028      	beq.n	8006e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de2:	f7fc ff55 	bl	8003c90 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d302      	bcc.n	8006df8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d11d      	bne.n	8006e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e02:	2b80      	cmp	r3, #128	@ 0x80
 8006e04:	d016      	beq.n	8006e34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e20:	f043 0220 	orr.w	r2, r3, #32
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e007      	b.n	8006e44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3e:	2b80      	cmp	r3, #128	@ 0x80
 8006e40:	d1c3      	bne.n	8006dca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e58:	e034      	b.n	8006ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f8cd 	bl	8006ffa <I2C_IsAcknowledgeFailed>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e034      	b.n	8006ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d028      	beq.n	8006ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e72:	f7fc ff0d 	bl	8003c90 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d302      	bcc.n	8006e88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11d      	bne.n	8006ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d016      	beq.n	8006ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb0:	f043 0220 	orr.w	r2, r3, #32
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e007      	b.n	8006ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d1c3      	bne.n	8006e5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ee8:	4b13      	ldr	r3, [pc, #76]	@ (8006f38 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	08db      	lsrs	r3, r3, #3
 8006eee:	4a13      	ldr	r2, [pc, #76]	@ (8006f3c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef4:	0a1a      	lsrs	r2, r3, #8
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d107      	bne.n	8006f1a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	f043 0220 	orr.w	r2, r3, #32
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e008      	b.n	8006f2c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f28:	d0e9      	beq.n	8006efe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bc80      	pop	{r7}
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000000 	.word	0x20000000
 8006f3c:	14f8b589 	.word	0x14f8b589

08006f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f4c:	e049      	b.n	8006fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	f003 0310 	and.w	r3, r3, #16
 8006f58:	2b10      	cmp	r3, #16
 8006f5a:	d119      	bne.n	8006f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0210 	mvn.w	r2, #16
 8006f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e030      	b.n	8006ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f90:	f7fc fe7e 	bl	8003c90 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d302      	bcc.n	8006fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d11d      	bne.n	8006fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb0:	2b40      	cmp	r3, #64	@ 0x40
 8006fb2:	d016      	beq.n	8006fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fce:	f043 0220 	orr.w	r2, r3, #32
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e007      	b.n	8006ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fec:	2b40      	cmp	r3, #64	@ 0x40
 8006fee:	d1ae      	bne.n	8006f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800700c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007010:	d11b      	bne.n	800704a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800701a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007036:	f043 0204 	orr.w	r2, r3, #4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr

08007056 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007066:	d103      	bne.n	8007070 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800706e:	e007      	b.n	8007080 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007074:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007078:	d102      	bne.n	8007080 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2208      	movs	r2, #8
 800707e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr
	...

0800708c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e272      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8087 	beq.w	80071ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070ac:	4b92      	ldr	r3, [pc, #584]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f003 030c 	and.w	r3, r3, #12
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d00c      	beq.n	80070d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80070b8:	4b8f      	ldr	r3, [pc, #572]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f003 030c 	and.w	r3, r3, #12
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d112      	bne.n	80070ea <HAL_RCC_OscConfig+0x5e>
 80070c4:	4b8c      	ldr	r3, [pc, #560]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d0:	d10b      	bne.n	80070ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d2:	4b89      	ldr	r3, [pc, #548]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d06c      	beq.n	80071b8 <HAL_RCC_OscConfig+0x12c>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d168      	bne.n	80071b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e24c      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070f2:	d106      	bne.n	8007102 <HAL_RCC_OscConfig+0x76>
 80070f4:	4b80      	ldr	r3, [pc, #512]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a7f      	ldr	r2, [pc, #508]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80070fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	e02e      	b.n	8007160 <HAL_RCC_OscConfig+0xd4>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10c      	bne.n	8007124 <HAL_RCC_OscConfig+0x98>
 800710a:	4b7b      	ldr	r3, [pc, #492]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a7a      	ldr	r2, [pc, #488]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	4b78      	ldr	r3, [pc, #480]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a77      	ldr	r2, [pc, #476]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800711c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e01d      	b.n	8007160 <HAL_RCC_OscConfig+0xd4>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800712c:	d10c      	bne.n	8007148 <HAL_RCC_OscConfig+0xbc>
 800712e:	4b72      	ldr	r3, [pc, #456]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a71      	ldr	r2, [pc, #452]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	4b6f      	ldr	r3, [pc, #444]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a6e      	ldr	r2, [pc, #440]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	e00b      	b.n	8007160 <HAL_RCC_OscConfig+0xd4>
 8007148:	4b6b      	ldr	r3, [pc, #428]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a6a      	ldr	r2, [pc, #424]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800714e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	4b68      	ldr	r3, [pc, #416]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a67      	ldr	r2, [pc, #412]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800715a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800715e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d013      	beq.n	8007190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007168:	f7fc fd92 	bl	8003c90 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007170:	f7fc fd8e 	bl	8003c90 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	@ 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e200      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007182:	4b5d      	ldr	r3, [pc, #372]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0xe4>
 800718e:	e014      	b.n	80071ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007190:	f7fc fd7e 	bl	8003c90 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007198:	f7fc fd7a 	bl	8003c90 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	@ 0x64
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e1ec      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071aa:	4b53      	ldr	r3, [pc, #332]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <HAL_RCC_OscConfig+0x10c>
 80071b6:	e000      	b.n	80071ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d063      	beq.n	800728e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071c6:	4b4c      	ldr	r3, [pc, #304]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f003 030c 	and.w	r3, r3, #12
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80071d2:	4b49      	ldr	r3, [pc, #292]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f003 030c 	and.w	r3, r3, #12
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d11c      	bne.n	8007218 <HAL_RCC_OscConfig+0x18c>
 80071de:	4b46      	ldr	r3, [pc, #280]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d116      	bne.n	8007218 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ea:	4b43      	ldr	r3, [pc, #268]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <HAL_RCC_OscConfig+0x176>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d001      	beq.n	8007202 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e1c0      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007202:	4b3d      	ldr	r3, [pc, #244]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	4939      	ldr	r1, [pc, #228]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007212:	4313      	orrs	r3, r2
 8007214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007216:	e03a      	b.n	800728e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d020      	beq.n	8007262 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007220:	4b36      	ldr	r3, [pc, #216]	@ (80072fc <HAL_RCC_OscConfig+0x270>)
 8007222:	2201      	movs	r2, #1
 8007224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007226:	f7fc fd33 	bl	8003c90 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722c:	e008      	b.n	8007240 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800722e:	f7fc fd2f 	bl	8003c90 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e1a1      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007240:	4b2d      	ldr	r3, [pc, #180]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0f0      	beq.n	800722e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800724c:	4b2a      	ldr	r3, [pc, #168]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	4927      	ldr	r1, [pc, #156]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 800725c:	4313      	orrs	r3, r2
 800725e:	600b      	str	r3, [r1, #0]
 8007260:	e015      	b.n	800728e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007262:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <HAL_RCC_OscConfig+0x270>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007268:	f7fc fd12 	bl	8003c90 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007270:	f7fc fd0e 	bl	8003c90 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e180      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007282:	4b1d      	ldr	r3, [pc, #116]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f0      	bne.n	8007270 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d03a      	beq.n	8007310 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d019      	beq.n	80072d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072a2:	4b17      	ldr	r3, [pc, #92]	@ (8007300 <HAL_RCC_OscConfig+0x274>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072a8:	f7fc fcf2 	bl	8003c90 <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072b0:	f7fc fcee 	bl	8003c90 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e160      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <HAL_RCC_OscConfig+0x26c>)
 80072c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0f0      	beq.n	80072b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80072ce:	2001      	movs	r0, #1
 80072d0:	f000 face 	bl	8007870 <RCC_Delay>
 80072d4:	e01c      	b.n	8007310 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <HAL_RCC_OscConfig+0x274>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072dc:	f7fc fcd8 	bl	8003c90 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072e2:	e00f      	b.n	8007304 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072e4:	f7fc fcd4 	bl	8003c90 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d908      	bls.n	8007304 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e146      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
 80072f6:	bf00      	nop
 80072f8:	40021000 	.word	0x40021000
 80072fc:	42420000 	.word	0x42420000
 8007300:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007304:	4b92      	ldr	r3, [pc, #584]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e9      	bne.n	80072e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 80a6 	beq.w	800746a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800731e:	2300      	movs	r3, #0
 8007320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007322:	4b8b      	ldr	r3, [pc, #556]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10d      	bne.n	800734a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800732e:	4b88      	ldr	r3, [pc, #544]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	4a87      	ldr	r2, [pc, #540]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007338:	61d3      	str	r3, [r2, #28]
 800733a:	4b85      	ldr	r3, [pc, #532]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007346:	2301      	movs	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800734a:	4b82      	ldr	r3, [pc, #520]	@ (8007554 <HAL_RCC_OscConfig+0x4c8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d118      	bne.n	8007388 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007356:	4b7f      	ldr	r3, [pc, #508]	@ (8007554 <HAL_RCC_OscConfig+0x4c8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a7e      	ldr	r2, [pc, #504]	@ (8007554 <HAL_RCC_OscConfig+0x4c8>)
 800735c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007362:	f7fc fc95 	bl	8003c90 <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007368:	e008      	b.n	800737c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800736a:	f7fc fc91 	bl	8003c90 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b64      	cmp	r3, #100	@ 0x64
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e103      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800737c:	4b75      	ldr	r3, [pc, #468]	@ (8007554 <HAL_RCC_OscConfig+0x4c8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0f0      	beq.n	800736a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d106      	bne.n	800739e <HAL_RCC_OscConfig+0x312>
 8007390:	4b6f      	ldr	r3, [pc, #444]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	4a6e      	ldr	r2, [pc, #440]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007396:	f043 0301 	orr.w	r3, r3, #1
 800739a:	6213      	str	r3, [r2, #32]
 800739c:	e02d      	b.n	80073fa <HAL_RCC_OscConfig+0x36e>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <HAL_RCC_OscConfig+0x334>
 80073a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	4a69      	ldr	r2, [pc, #420]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	6213      	str	r3, [r2, #32]
 80073b2:	4b67      	ldr	r3, [pc, #412]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	4a66      	ldr	r2, [pc, #408]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073b8:	f023 0304 	bic.w	r3, r3, #4
 80073bc:	6213      	str	r3, [r2, #32]
 80073be:	e01c      	b.n	80073fa <HAL_RCC_OscConfig+0x36e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	2b05      	cmp	r3, #5
 80073c6:	d10c      	bne.n	80073e2 <HAL_RCC_OscConfig+0x356>
 80073c8:	4b61      	ldr	r3, [pc, #388]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	4a60      	ldr	r2, [pc, #384]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073ce:	f043 0304 	orr.w	r3, r3, #4
 80073d2:	6213      	str	r3, [r2, #32]
 80073d4:	4b5e      	ldr	r3, [pc, #376]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073da:	f043 0301 	orr.w	r3, r3, #1
 80073de:	6213      	str	r3, [r2, #32]
 80073e0:	e00b      	b.n	80073fa <HAL_RCC_OscConfig+0x36e>
 80073e2:	4b5b      	ldr	r3, [pc, #364]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	4a5a      	ldr	r2, [pc, #360]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073e8:	f023 0301 	bic.w	r3, r3, #1
 80073ec:	6213      	str	r3, [r2, #32]
 80073ee:	4b58      	ldr	r3, [pc, #352]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	4a57      	ldr	r2, [pc, #348]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80073f4:	f023 0304 	bic.w	r3, r3, #4
 80073f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d015      	beq.n	800742e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007402:	f7fc fc45 	bl	8003c90 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007408:	e00a      	b.n	8007420 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740a:	f7fc fc41 	bl	8003c90 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e0b1      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007420:	4b4b      	ldr	r3, [pc, #300]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0ee      	beq.n	800740a <HAL_RCC_OscConfig+0x37e>
 800742c:	e014      	b.n	8007458 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800742e:	f7fc fc2f 	bl	8003c90 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007434:	e00a      	b.n	800744c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007436:	f7fc fc2b 	bl	8003c90 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007444:	4293      	cmp	r3, r2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e09b      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800744c:	4b40      	ldr	r3, [pc, #256]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ee      	bne.n	8007436 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d105      	bne.n	800746a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800745e:	4b3c      	ldr	r3, [pc, #240]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	4a3b      	ldr	r2, [pc, #236]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007468:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 8087 	beq.w	8007582 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007474:	4b36      	ldr	r3, [pc, #216]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f003 030c 	and.w	r3, r3, #12
 800747c:	2b08      	cmp	r3, #8
 800747e:	d061      	beq.n	8007544 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d146      	bne.n	8007516 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007488:	4b33      	ldr	r3, [pc, #204]	@ (8007558 <HAL_RCC_OscConfig+0x4cc>)
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800748e:	f7fc fbff 	bl	8003c90 <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007494:	e008      	b.n	80074a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007496:	f7fc fbfb 	bl	8003c90 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e06d      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074a8:	4b29      	ldr	r3, [pc, #164]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1f0      	bne.n	8007496 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074bc:	d108      	bne.n	80074d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074be:	4b24      	ldr	r3, [pc, #144]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	4921      	ldr	r1, [pc, #132]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a19      	ldr	r1, [r3, #32]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	430b      	orrs	r3, r1
 80074e2:	491b      	ldr	r1, [pc, #108]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007558 <HAL_RCC_OscConfig+0x4cc>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ee:	f7fc fbcf 	bl	8003c90 <HAL_GetTick>
 80074f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074f4:	e008      	b.n	8007508 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f6:	f7fc fbcb 	bl	8003c90 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e03d      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007508:	4b11      	ldr	r3, [pc, #68]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0f0      	beq.n	80074f6 <HAL_RCC_OscConfig+0x46a>
 8007514:	e035      	b.n	8007582 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007516:	4b10      	ldr	r3, [pc, #64]	@ (8007558 <HAL_RCC_OscConfig+0x4cc>)
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800751c:	f7fc fbb8 	bl	8003c90 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007524:	f7fc fbb4 	bl	8003c90 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e026      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007536:	4b06      	ldr	r3, [pc, #24]	@ (8007550 <HAL_RCC_OscConfig+0x4c4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f0      	bne.n	8007524 <HAL_RCC_OscConfig+0x498>
 8007542:	e01e      	b.n	8007582 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d107      	bne.n	800755c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e019      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
 8007550:	40021000 	.word	0x40021000
 8007554:	40007000 	.word	0x40007000
 8007558:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800755c:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <HAL_RCC_OscConfig+0x500>)
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	429a      	cmp	r2, r3
 800756e:	d106      	bne.n	800757e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800757a:	429a      	cmp	r2, r3
 800757c:	d001      	beq.n	8007582 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40021000 	.word	0x40021000

08007590 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e0d0      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d910      	bls.n	80075d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075b2:	4b67      	ldr	r3, [pc, #412]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f023 0207 	bic.w	r2, r3, #7
 80075ba:	4965      	ldr	r1, [pc, #404]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	4313      	orrs	r3, r2
 80075c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075c2:	4b63      	ldr	r3, [pc, #396]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d001      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0b8      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d020      	beq.n	8007622 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075ec:	4b59      	ldr	r3, [pc, #356]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	4a58      	ldr	r2, [pc, #352]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80075f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007604:	4b53      	ldr	r3, [pc, #332]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a52      	ldr	r2, [pc, #328]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800760a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800760e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007610:	4b50      	ldr	r3, [pc, #320]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	494d      	ldr	r1, [pc, #308]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d040      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d107      	bne.n	8007646 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007636:	4b47      	ldr	r3, [pc, #284]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d115      	bne.n	800766e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e07f      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d107      	bne.n	800765e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800764e:	4b41      	ldr	r3, [pc, #260]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e073      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800765e:	4b3d      	ldr	r3, [pc, #244]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e06b      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800766e:	4b39      	ldr	r3, [pc, #228]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f023 0203 	bic.w	r2, r3, #3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4936      	ldr	r1, [pc, #216]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800767c:	4313      	orrs	r3, r2
 800767e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007680:	f7fc fb06 	bl	8003c90 <HAL_GetTick>
 8007684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007686:	e00a      	b.n	800769e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007688:	f7fc fb02 	bl	8003c90 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007696:	4293      	cmp	r3, r2
 8007698:	d901      	bls.n	800769e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e053      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800769e:	4b2d      	ldr	r3, [pc, #180]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f003 020c 	and.w	r2, r3, #12
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d1eb      	bne.n	8007688 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076b0:	4b27      	ldr	r3, [pc, #156]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d210      	bcs.n	80076e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076be:	4b24      	ldr	r3, [pc, #144]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f023 0207 	bic.w	r2, r3, #7
 80076c6:	4922      	ldr	r1, [pc, #136]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ce:	4b20      	ldr	r3, [pc, #128]	@ (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d001      	beq.n	80076e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e032      	b.n	8007746 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ec:	4b19      	ldr	r3, [pc, #100]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4916      	ldr	r1, [pc, #88]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800770a:	4b12      	ldr	r3, [pc, #72]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	490e      	ldr	r1, [pc, #56]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 800771a:	4313      	orrs	r3, r2
 800771c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800771e:	f000 f821 	bl	8007764 <HAL_RCC_GetSysClockFreq>
 8007722:	4602      	mov	r2, r0
 8007724:	4b0b      	ldr	r3, [pc, #44]	@ (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	490a      	ldr	r1, [pc, #40]	@ (8007758 <HAL_RCC_ClockConfig+0x1c8>)
 8007730:	5ccb      	ldrb	r3, [r1, r3]
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	4a09      	ldr	r2, [pc, #36]	@ (800775c <HAL_RCC_ClockConfig+0x1cc>)
 8007738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800773a:	4b09      	ldr	r3, [pc, #36]	@ (8007760 <HAL_RCC_ClockConfig+0x1d0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f7fc fa64 	bl	8003c0c <HAL_InitTick>

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40022000 	.word	0x40022000
 8007754:	40021000 	.word	0x40021000
 8007758:	0800e9d8 	.word	0x0800e9d8
 800775c:	20000000 	.word	0x20000000
 8007760:	20000004 	.word	0x20000004

08007764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	2300      	movs	r3, #0
 8007778:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800777e:	4b1e      	ldr	r3, [pc, #120]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b04      	cmp	r3, #4
 800778c:	d002      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0x30>
 800778e:	2b08      	cmp	r3, #8
 8007790:	d003      	beq.n	800779a <HAL_RCC_GetSysClockFreq+0x36>
 8007792:	e027      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007794:	4b19      	ldr	r3, [pc, #100]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x98>)
 8007796:	613b      	str	r3, [r7, #16]
      break;
 8007798:	e027      	b.n	80077ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	0c9b      	lsrs	r3, r3, #18
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	4a17      	ldr	r2, [pc, #92]	@ (8007800 <HAL_RCC_GetSysClockFreq+0x9c>)
 80077a4:	5cd3      	ldrb	r3, [r2, r3]
 80077a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d010      	beq.n	80077d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80077b2:	4b11      	ldr	r3, [pc, #68]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	0c5b      	lsrs	r3, r3, #17
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	4a11      	ldr	r2, [pc, #68]	@ (8007804 <HAL_RCC_GetSysClockFreq+0xa0>)
 80077be:	5cd3      	ldrb	r3, [r2, r3]
 80077c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a0d      	ldr	r2, [pc, #52]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x98>)
 80077c6:	fb03 f202 	mul.w	r2, r3, r2
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e004      	b.n	80077de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007808 <HAL_RCC_GetSysClockFreq+0xa4>)
 80077d8:	fb02 f303 	mul.w	r3, r2, r3
 80077dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	613b      	str	r3, [r7, #16]
      break;
 80077e2:	e002      	b.n	80077ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80077e4:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x98>)
 80077e6:	613b      	str	r3, [r7, #16]
      break;
 80077e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077ea:	693b      	ldr	r3, [r7, #16]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40021000 	.word	0x40021000
 80077fc:	007a1200 	.word	0x007a1200
 8007800:	0800e9f0 	.word	0x0800e9f0
 8007804:	0800ea00 	.word	0x0800ea00
 8007808:	003d0900 	.word	0x003d0900

0800780c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007810:	4b02      	ldr	r3, [pc, #8]	@ (800781c <HAL_RCC_GetHCLKFreq+0x10>)
 8007812:	681b      	ldr	r3, [r3, #0]
}
 8007814:	4618      	mov	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr
 800781c:	20000000 	.word	0x20000000

08007820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007824:	f7ff fff2 	bl	800780c <HAL_RCC_GetHCLKFreq>
 8007828:	4602      	mov	r2, r0
 800782a:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	4903      	ldr	r1, [pc, #12]	@ (8007844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007836:	5ccb      	ldrb	r3, [r1, r3]
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800783c:	4618      	mov	r0, r3
 800783e:	bd80      	pop	{r7, pc}
 8007840:	40021000 	.word	0x40021000
 8007844:	0800e9e8 	.word	0x0800e9e8

08007848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800784c:	f7ff ffde 	bl	800780c <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b05      	ldr	r3, [pc, #20]	@ (8007868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	0adb      	lsrs	r3, r3, #11
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4903      	ldr	r1, [pc, #12]	@ (800786c <HAL_RCC_GetPCLK2Freq+0x24>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40021000 	.word	0x40021000
 800786c:	0800e9e8 	.word	0x0800e9e8

08007870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007878:	4b0a      	ldr	r3, [pc, #40]	@ (80078a4 <RCC_Delay+0x34>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a0a      	ldr	r2, [pc, #40]	@ (80078a8 <RCC_Delay+0x38>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	0a5b      	lsrs	r3, r3, #9
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	fb02 f303 	mul.w	r3, r2, r3
 800788a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800788c:	bf00      	nop
  }
  while (Delay --);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1e5a      	subs	r2, r3, #1
 8007892:	60fa      	str	r2, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1f9      	bne.n	800788c <RCC_Delay+0x1c>
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr
 80078a4:	20000000 	.word	0x20000000
 80078a8:	10624dd3 	.word	0x10624dd3

080078ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d07d      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80078c8:	2300      	movs	r3, #0
 80078ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078cc:	4b4f      	ldr	r3, [pc, #316]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10d      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078d8:	4b4c      	ldr	r3, [pc, #304]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	4a4b      	ldr	r2, [pc, #300]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078e2:	61d3      	str	r3, [r2, #28]
 80078e4:	4b49      	ldr	r3, [pc, #292]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078f0:	2301      	movs	r3, #1
 80078f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078f4:	4b46      	ldr	r3, [pc, #280]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d118      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007900:	4b43      	ldr	r3, [pc, #268]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a42      	ldr	r2, [pc, #264]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800790a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800790c:	f7fc f9c0 	bl	8003c90 <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007912:	e008      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007914:	f7fc f9bc 	bl	8003c90 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b64      	cmp	r3, #100	@ 0x64
 8007920:	d901      	bls.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e06d      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007926:	4b3a      	ldr	r3, [pc, #232]	@ (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0f0      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007932:	4b36      	ldr	r3, [pc, #216]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800793a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d02e      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	429a      	cmp	r2, r3
 800794e:	d027      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007950:	4b2e      	ldr	r3, [pc, #184]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007958:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800795a:	4b2e      	ldr	r3, [pc, #184]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800795c:	2201      	movs	r2, #1
 800795e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007960:	4b2c      	ldr	r3, [pc, #176]	@ (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007966:	4a29      	ldr	r2, [pc, #164]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d014      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007976:	f7fc f98b 	bl	8003c90 <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800797c:	e00a      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800797e:	f7fc f987 	bl	8003c90 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800798c:	4293      	cmp	r3, r2
 800798e:	d901      	bls.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e036      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007994:	4b1d      	ldr	r3, [pc, #116]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0ee      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079a0:	4b1a      	ldr	r3, [pc, #104]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	4917      	ldr	r1, [pc, #92]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d105      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079b8:	4b14      	ldr	r3, [pc, #80]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	4a13      	ldr	r2, [pc, #76]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d008      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079d0:	4b0e      	ldr	r3, [pc, #56]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	490b      	ldr	r1, [pc, #44]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d008      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079ee:	4b07      	ldr	r3, [pc, #28]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	4904      	ldr	r1, [pc, #16]	@ (8007a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	40007000 	.word	0x40007000
 8007a14:	42420440 	.word	0x42420440

08007a18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e041      	b.n	8007aae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7fb feb6 	bl	80037b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	4619      	mov	r1, r3
 8007a56:	4610      	mov	r0, r2
 8007a58:	f000 f992 	bl	8007d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <HAL_TIM_PWM_Start+0x24>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	e022      	b.n	8007b22 <HAL_TIM_PWM_Start+0x6a>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d109      	bne.n	8007af6 <HAL_TIM_PWM_Start+0x3e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	e015      	b.n	8007b22 <HAL_TIM_PWM_Start+0x6a>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d109      	bne.n	8007b10 <HAL_TIM_PWM_Start+0x58>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	e008      	b.n	8007b22 <HAL_TIM_PWM_Start+0x6a>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e05e      	b.n	8007be8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_PWM_Start+0x82>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b38:	e013      	b.n	8007b62 <HAL_TIM_PWM_Start+0xaa>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_PWM_Start+0x92>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b48:	e00b      	b.n	8007b62 <HAL_TIM_PWM_Start+0xaa>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_PWM_Start+0xa2>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b58:	e003      	b.n	8007b62 <HAL_TIM_PWM_Start+0xaa>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2201      	movs	r2, #1
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fafe 	bl	800816c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a1e      	ldr	r2, [pc, #120]	@ (8007bf0 <HAL_TIM_PWM_Start+0x138>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d107      	bne.n	8007b8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a18      	ldr	r2, [pc, #96]	@ (8007bf0 <HAL_TIM_PWM_Start+0x138>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00e      	beq.n	8007bb2 <HAL_TIM_PWM_Start+0xfa>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9c:	d009      	beq.n	8007bb2 <HAL_TIM_PWM_Start+0xfa>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a14      	ldr	r2, [pc, #80]	@ (8007bf4 <HAL_TIM_PWM_Start+0x13c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_TIM_PWM_Start+0xfa>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a12      	ldr	r2, [pc, #72]	@ (8007bf8 <HAL_TIM_PWM_Start+0x140>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d111      	bne.n	8007bd6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b06      	cmp	r3, #6
 8007bc2:	d010      	beq.n	8007be6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0201 	orr.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd4:	e007      	b.n	8007be6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0201 	orr.w	r2, r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40012c00 	.word	0x40012c00
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40000800 	.word	0x40000800

08007bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c16:	2302      	movs	r3, #2
 8007c18:	e0ae      	b.n	8007d78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b0c      	cmp	r3, #12
 8007c26:	f200 809f 	bhi.w	8007d68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c65 	.word	0x08007c65
 8007c34:	08007d69 	.word	0x08007d69
 8007c38:	08007d69 	.word	0x08007d69
 8007c3c:	08007d69 	.word	0x08007d69
 8007c40:	08007ca5 	.word	0x08007ca5
 8007c44:	08007d69 	.word	0x08007d69
 8007c48:	08007d69 	.word	0x08007d69
 8007c4c:	08007d69 	.word	0x08007d69
 8007c50:	08007ce7 	.word	0x08007ce7
 8007c54:	08007d69 	.word	0x08007d69
 8007c58:	08007d69 	.word	0x08007d69
 8007c5c:	08007d69 	.word	0x08007d69
 8007c60:	08007d27 	.word	0x08007d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f8f6 	bl	8007e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699a      	ldr	r2, [r3, #24]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0208 	orr.w	r2, r2, #8
 8007c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699a      	ldr	r2, [r3, #24]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0204 	bic.w	r2, r2, #4
 8007c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6999      	ldr	r1, [r3, #24]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	691a      	ldr	r2, [r3, #16]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	619a      	str	r2, [r3, #24]
      break;
 8007ca2:	e064      	b.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 f93c 	bl	8007f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6999      	ldr	r1, [r3, #24]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	021a      	lsls	r2, r3, #8
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	619a      	str	r2, [r3, #24]
      break;
 8007ce4:	e043      	b.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 f985 	bl	8007ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69da      	ldr	r2, [r3, #28]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0208 	orr.w	r2, r2, #8
 8007d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69da      	ldr	r2, [r3, #28]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0204 	bic.w	r2, r2, #4
 8007d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69d9      	ldr	r1, [r3, #28]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	61da      	str	r2, [r3, #28]
      break;
 8007d24:	e023      	b.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f9cf 	bl	80080d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69da      	ldr	r2, [r3, #28]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	69d9      	ldr	r1, [r3, #28]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	021a      	lsls	r2, r3, #8
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	61da      	str	r2, [r3, #28]
      break;
 8007d66:	e002      	b.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a2f      	ldr	r2, [pc, #188]	@ (8007e50 <TIM_Base_SetConfig+0xd0>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00b      	beq.n	8007db0 <TIM_Base_SetConfig+0x30>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d9e:	d007      	beq.n	8007db0 <TIM_Base_SetConfig+0x30>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a2c      	ldr	r2, [pc, #176]	@ (8007e54 <TIM_Base_SetConfig+0xd4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_Base_SetConfig+0x30>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a2b      	ldr	r2, [pc, #172]	@ (8007e58 <TIM_Base_SetConfig+0xd8>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d108      	bne.n	8007dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a22      	ldr	r2, [pc, #136]	@ (8007e50 <TIM_Base_SetConfig+0xd0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00b      	beq.n	8007de2 <TIM_Base_SetConfig+0x62>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dd0:	d007      	beq.n	8007de2 <TIM_Base_SetConfig+0x62>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8007e54 <TIM_Base_SetConfig+0xd4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d003      	beq.n	8007de2 <TIM_Base_SetConfig+0x62>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8007e58 <TIM_Base_SetConfig+0xd8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d108      	bne.n	8007df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8007e50 <TIM_Base_SetConfig+0xd0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d103      	bne.n	8007e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f023 0201 	bic.w	r2, r3, #1
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	611a      	str	r2, [r3, #16]
  }
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr
 8007e50:	40012c00 	.word	0x40012c00
 8007e54:	40000400 	.word	0x40000400
 8007e58:	40000800 	.word	0x40000800

08007e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	f023 0201 	bic.w	r2, r3, #1
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f023 0302 	bic.w	r3, r3, #2
 8007ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f24 <TIM_OC1_SetConfig+0xc8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d10c      	bne.n	8007ed2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f023 0308 	bic.w	r3, r3, #8
 8007ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f023 0304 	bic.w	r3, r3, #4
 8007ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a13      	ldr	r2, [pc, #76]	@ (8007f24 <TIM_OC1_SetConfig+0xc8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d111      	bne.n	8007efe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00

08007f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	f023 0210 	bic.w	r2, r3, #16
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f023 0320 	bic.w	r3, r3, #32
 8007f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff8 <TIM_OC2_SetConfig+0xd0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d10d      	bne.n	8007fa4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a14      	ldr	r2, [pc, #80]	@ (8007ff8 <TIM_OC2_SetConfig+0xd0>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d113      	bne.n	8007fd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	621a      	str	r2, [r3, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr
 8007ff8:	40012c00 	.word	0x40012c00

08007ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800802a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0303 	bic.w	r3, r3, #3
 8008032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	021b      	lsls	r3, r3, #8
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	4313      	orrs	r3, r2
 8008050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a1d      	ldr	r2, [pc, #116]	@ (80080cc <TIM_OC3_SetConfig+0xd0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d10d      	bne.n	8008076 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	4313      	orrs	r3, r2
 800806c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a14      	ldr	r2, [pc, #80]	@ (80080cc <TIM_OC3_SetConfig+0xd0>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d113      	bne.n	80080a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800808c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4313      	orrs	r3, r2
 8008098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	011b      	lsls	r3, r3, #4
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	621a      	str	r2, [r3, #32]
}
 80080c0:	bf00      	nop
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40012c00 	.word	0x40012c00

080080d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800811a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	031b      	lsls	r3, r3, #12
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4313      	orrs	r3, r2
 8008126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a0f      	ldr	r2, [pc, #60]	@ (8008168 <TIM_OC4_SetConfig+0x98>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d109      	bne.n	8008144 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	019b      	lsls	r3, r3, #6
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4313      	orrs	r3, r2
 8008142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	bc80      	pop	{r7}
 8008166:	4770      	bx	lr
 8008168:	40012c00 	.word	0x40012c00

0800816c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	2201      	movs	r2, #1
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a1a      	ldr	r2, [r3, #32]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	43db      	mvns	r3, r3
 800818e:	401a      	ands	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a1a      	ldr	r2, [r3, #32]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	431a      	orrs	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bc80      	pop	{r7}
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e046      	b.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a16      	ldr	r2, [pc, #88]	@ (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00e      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008218:	d009      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a12      	ldr	r2, [pc, #72]	@ (8008268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d004      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a10      	ldr	r2, [pc, #64]	@ (800826c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d10c      	bne.n	8008248 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4313      	orrs	r3, r2
 800823e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800

08008270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e042      	b.n	8008308 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fb fada 	bl	8003850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2224      	movs	r2, #36	@ 0x24
 80082a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fdb7 	bl	8008e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691a      	ldr	r2, [r3, #16]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	695a      	ldr	r2, [r3, #20]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08a      	sub	sp, #40	@ 0x28
 8008314:	af02      	add	r7, sp, #8
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	4613      	mov	r3, r2
 800831e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b20      	cmp	r3, #32
 800832e:	d175      	bne.n	800841c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <HAL_UART_Transmit+0x2c>
 8008336:	88fb      	ldrh	r3, [r7, #6]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e06e      	b.n	800841e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2221      	movs	r2, #33	@ 0x21
 800834a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800834e:	f7fb fc9f 	bl	8003c90 <HAL_GetTick>
 8008352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	88fa      	ldrh	r2, [r7, #6]
 8008358:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008368:	d108      	bne.n	800837c <HAL_UART_Transmit+0x6c>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d104      	bne.n	800837c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	61bb      	str	r3, [r7, #24]
 800837a:	e003      	b.n	8008384 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008384:	e02e      	b.n	80083e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2200      	movs	r2, #0
 800838e:	2180      	movs	r1, #128	@ 0x80
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 fb1c 	bl	80089ce <UART_WaitOnFlagUntilTimeout>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2220      	movs	r2, #32
 80083a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e03a      	b.n	800841e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10b      	bne.n	80083c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	3302      	adds	r3, #2
 80083c2:	61bb      	str	r3, [r7, #24]
 80083c4:	e007      	b.n	80083d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	781a      	ldrb	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	3301      	adds	r3, #1
 80083d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083da:	b29b      	uxth	r3, r3
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1cb      	bne.n	8008386 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2200      	movs	r2, #0
 80083f6:	2140      	movs	r1, #64	@ 0x40
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fae8 	bl	80089ce <UART_WaitOnFlagUntilTimeout>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d005      	beq.n	8008410 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e006      	b.n	800841e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	e000      	b.n	800841e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800841c:	2302      	movs	r3, #2
  }
}
 800841e:	4618      	mov	r0, r3
 8008420:	3720      	adds	r7, #32
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	4613      	mov	r3, r2
 8008432:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b20      	cmp	r3, #32
 800843e:	d112      	bne.n	8008466 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <HAL_UART_Receive_IT+0x26>
 8008446:	88fb      	ldrh	r3, [r7, #6]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e00b      	b.n	8008468 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	461a      	mov	r2, r3
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fb0f 	bl	8008a80 <UART_Start_Receive_IT>
 8008462:	4603      	mov	r3, r0
 8008464:	e000      	b.n	8008468 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008466:	2302      	movs	r3, #2
  }
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b0ba      	sub	sp, #232	@ 0xe8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008496:	2300      	movs	r3, #0
 8008498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800849c:	2300      	movs	r3, #0
 800849e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80084ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10f      	bne.n	80084d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d009      	beq.n	80084d6 <HAL_UART_IRQHandler+0x66>
 80084c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fbec 	bl	8008cac <UART_Receive_IT>
      return;
 80084d4:	e25b      	b.n	800898e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80084d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 80de 	beq.w	800869c <HAL_UART_IRQHandler+0x22c>
 80084e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d106      	bne.n	80084fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 80d1 	beq.w	800869c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00b      	beq.n	800851e <HAL_UART_IRQHandler+0xae>
 8008506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800850a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	f043 0201 	orr.w	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800851e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008522:	f003 0304 	and.w	r3, r3, #4
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00b      	beq.n	8008542 <HAL_UART_IRQHandler+0xd2>
 800852a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800853a:	f043 0202 	orr.w	r2, r3, #2
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00b      	beq.n	8008566 <HAL_UART_IRQHandler+0xf6>
 800854e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855e:	f043 0204 	orr.w	r2, r3, #4
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d011      	beq.n	8008596 <HAL_UART_IRQHandler+0x126>
 8008572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d105      	bne.n	800858a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800857e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800858e:	f043 0208 	orr.w	r2, r3, #8
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 81f2 	beq.w	8008984 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <HAL_UART_IRQHandler+0x14e>
 80085ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fb77 	bl	8008cac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	bf14      	ite	ne
 80085cc:	2301      	movne	r3, #1
 80085ce:	2300      	moveq	r3, #0
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d103      	bne.n	80085ea <HAL_UART_IRQHandler+0x17a>
 80085e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d04f      	beq.n	800868a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa81 	bl	8008af2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d041      	beq.n	8008682 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3314      	adds	r3, #20
 8008604:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008614:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800861c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3314      	adds	r3, #20
 8008626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800862a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800862e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008636:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1d9      	bne.n	80085fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d013      	beq.n	800867a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008656:	4a7e      	ldr	r2, [pc, #504]	@ (8008850 <HAL_UART_IRQHandler+0x3e0>)
 8008658:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865e:	4618      	mov	r0, r3
 8008660:	f7fb fda6 	bl	80041b0 <HAL_DMA_Abort_IT>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800866e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008678:	e00e      	b.n	8008698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f993 	bl	80089a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008680:	e00a      	b.n	8008698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f98f 	bl	80089a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008688:	e006      	b.n	8008698 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f98b 	bl	80089a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008696:	e175      	b.n	8008984 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008698:	bf00      	nop
    return;
 800869a:	e173      	b.n	8008984 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	f040 814f 	bne.w	8008944 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086aa:	f003 0310 	and.w	r3, r3, #16
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 8148 	beq.w	8008944 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 8141 	beq.w	8008944 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086c2:	2300      	movs	r3, #0
 80086c4:	60bb      	str	r3, [r7, #8]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	60bb      	str	r3, [r7, #8]
 80086d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80b6 	beq.w	8008854 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8145 	beq.w	8008988 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008706:	429a      	cmp	r2, r3
 8008708:	f080 813e 	bcs.w	8008988 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008712:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	2b20      	cmp	r3, #32
 800871c:	f000 8088 	beq.w	8008830 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	330c      	adds	r3, #12
 8008726:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008736:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800873a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800873e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	330c      	adds	r3, #12
 8008748:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800874c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008750:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008758:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1d9      	bne.n	8008720 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3314      	adds	r3, #20
 8008772:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800877c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800877e:	f023 0301 	bic.w	r3, r3, #1
 8008782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3314      	adds	r3, #20
 800878c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008790:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008794:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008798:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e1      	bne.n	800876c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3314      	adds	r3, #20
 80087ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3314      	adds	r3, #20
 80087c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80087cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80087da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e3      	bne.n	80087a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80087fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008800:	f023 0310 	bic.w	r3, r3, #16
 8008804:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	330c      	adds	r3, #12
 800880e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008812:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008814:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008818:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e3      	bne.n	80087ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882a:	4618      	mov	r0, r3
 800882c:	f7fb fc85 	bl	800413a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800883e:	b29b      	uxth	r3, r3
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	b29b      	uxth	r3, r3
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f8b6 	bl	80089b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800884c:	e09c      	b.n	8008988 <HAL_UART_IRQHandler+0x518>
 800884e:	bf00      	nop
 8008850:	08008bb7 	.word	0x08008bb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800885c:	b29b      	uxth	r3, r3
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008868:	b29b      	uxth	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 808e 	beq.w	800898c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 8089 	beq.w	800898c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	330c      	adds	r3, #12
 8008880:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800888a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008890:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	330c      	adds	r3, #12
 800889a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800889e:	647a      	str	r2, [r7, #68]	@ 0x44
 80088a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e3      	bne.n	800887a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3314      	adds	r3, #20
 80088b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	623b      	str	r3, [r7, #32]
   return(result);
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	f023 0301 	bic.w	r3, r3, #1
 80088c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3314      	adds	r3, #20
 80088d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80088d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80088d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e3      	bne.n	80088b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	330c      	adds	r3, #12
 80088fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	60fb      	str	r3, [r7, #12]
   return(result);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0310 	bic.w	r3, r3, #16
 800890e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	330c      	adds	r3, #12
 8008918:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800891c:	61fa      	str	r2, [r7, #28]
 800891e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008920:	69b9      	ldr	r1, [r7, #24]
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	e841 2300 	strex	r3, r2, [r1]
 8008928:	617b      	str	r3, [r7, #20]
   return(result);
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e3      	bne.n	80088f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008936:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f83b 	bl	80089b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008942:	e023      	b.n	800898c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800894c:	2b00      	cmp	r3, #0
 800894e:	d009      	beq.n	8008964 <HAL_UART_IRQHandler+0x4f4>
 8008950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f93e 	bl	8008bde <UART_Transmit_IT>
    return;
 8008962:	e014      	b.n	800898e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00e      	beq.n	800898e <HAL_UART_IRQHandler+0x51e>
 8008970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008978:	2b00      	cmp	r3, #0
 800897a:	d008      	beq.n	800898e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f97d 	bl	8008c7c <UART_EndTransmit_IT>
    return;
 8008982:	e004      	b.n	800898e <HAL_UART_IRQHandler+0x51e>
    return;
 8008984:	bf00      	nop
 8008986:	e002      	b.n	800898e <HAL_UART_IRQHandler+0x51e>
      return;
 8008988:	bf00      	nop
 800898a:	e000      	b.n	800898e <HAL_UART_IRQHandler+0x51e>
      return;
 800898c:	bf00      	nop
  }
}
 800898e:	37e8      	adds	r7, #232	@ 0xe8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bc80      	pop	{r7}
 80089a4:	4770      	bx	lr

080089a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b086      	sub	sp, #24
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	603b      	str	r3, [r7, #0]
 80089da:	4613      	mov	r3, r2
 80089dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089de:	e03b      	b.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d037      	beq.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e8:	f7fb f952 	bl	8003c90 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	6a3a      	ldr	r2, [r7, #32]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d302      	bcc.n	80089fe <UART_WaitOnFlagUntilTimeout+0x30>
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e03a      	b.n	8008a78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d023      	beq.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b80      	cmp	r3, #128	@ 0x80
 8008a14:	d020      	beq.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b40      	cmp	r3, #64	@ 0x40
 8008a1a:	d01d      	beq.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b08      	cmp	r3, #8
 8008a28:	d116      	bne.n	8008a58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 f856 	bl	8008af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2208      	movs	r2, #8
 8008a4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e00f      	b.n	8008a78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	4013      	ands	r3, r2
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	461a      	mov	r2, r3
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d0b4      	beq.n	80089e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	88fa      	ldrh	r2, [r7, #6]
 8008a98:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	88fa      	ldrh	r2, [r7, #6]
 8008a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2222      	movs	r2, #34	@ 0x22
 8008aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d007      	beq.n	8008ac6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ac4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	695a      	ldr	r2, [r3, #20]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f042 0201 	orr.w	r2, r2, #1
 8008ad4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0220 	orr.w	r2, r2, #32
 8008ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr

08008af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b095      	sub	sp, #84	@ 0x54
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	330c      	adds	r3, #12
 8008b00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e5      	bne.n	8008afa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3314      	adds	r3, #20
 8008b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	f023 0301 	bic.w	r3, r3, #1
 8008b44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3314      	adds	r3, #20
 8008b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e5      	bne.n	8008b2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d119      	bne.n	8008b9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	330c      	adds	r3, #12
 8008b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	e853 3f00 	ldrex	r3, [r3]
 8008b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f023 0310 	bic.w	r3, r3, #16
 8008b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	330c      	adds	r3, #12
 8008b88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b8a:	61ba      	str	r2, [r7, #24]
 8008b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6979      	ldr	r1, [r7, #20]
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	613b      	str	r3, [r7, #16]
   return(result);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e5      	bne.n	8008b6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008bac:	bf00      	nop
 8008bae:	3754      	adds	r7, #84	@ 0x54
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr

08008bb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fee8 	bl	80089a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b085      	sub	sp, #20
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b21      	cmp	r3, #33	@ 0x21
 8008bf0:	d13e      	bne.n	8008c70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bfa:	d114      	bne.n	8008c26 <UART_Transmit_IT+0x48>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d110      	bne.n	8008c26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	1c9a      	adds	r2, r3, #2
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	621a      	str	r2, [r3, #32]
 8008c24:	e008      	b.n	8008c38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	1c59      	adds	r1, r3, #1
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6211      	str	r1, [r2, #32]
 8008c30:	781a      	ldrb	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	4619      	mov	r1, r3
 8008c46:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10f      	bne.n	8008c6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e000      	b.n	8008c72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c70:	2302      	movs	r3, #2
  }
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bc80      	pop	{r7}
 8008c7a:	4770      	bx	lr

08008c7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff fe79 	bl	8008994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08c      	sub	sp, #48	@ 0x30
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b22      	cmp	r3, #34	@ 0x22
 8008cbe:	f040 80ae 	bne.w	8008e1e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cca:	d117      	bne.n	8008cfc <UART_Receive_IT+0x50>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d113      	bne.n	8008cfc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf4:	1c9a      	adds	r2, r3, #2
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	629a      	str	r2, [r3, #40]	@ 0x28
 8008cfa:	e026      	b.n	8008d4a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d0e:	d007      	beq.n	8008d20 <UART_Receive_IT+0x74>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <UART_Receive_IT+0x82>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d106      	bne.n	8008d2e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2a:	701a      	strb	r2, [r3, #0]
 8008d2c:	e008      	b.n	8008d40 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	4619      	mov	r1, r3
 8008d58:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d15d      	bne.n	8008e1a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 0220 	bic.w	r2, r2, #32
 8008d6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68da      	ldr	r2, [r3, #12]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	695a      	ldr	r2, [r3, #20]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 0201 	bic.w	r2, r2, #1
 8008d8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d135      	bne.n	8008e10 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	330c      	adds	r3, #12
 8008db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f023 0310 	bic.w	r3, r3, #16
 8008dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	330c      	adds	r3, #12
 8008dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dca:	623a      	str	r2, [r7, #32]
 8008dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	69f9      	ldr	r1, [r7, #28]
 8008dd0:	6a3a      	ldr	r2, [r7, #32]
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e5      	bne.n	8008daa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0310 	and.w	r3, r3, #16
 8008de8:	2b10      	cmp	r3, #16
 8008dea:	d10a      	bne.n	8008e02 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7ff fdd5 	bl	80089b8 <HAL_UARTEx_RxEventCallback>
 8008e0e:	e002      	b.n	8008e16 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7f9 ff7d 	bl	8002d10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	e002      	b.n	8008e20 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e000      	b.n	8008e20 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e1e:	2302      	movs	r3, #2
  }
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3730      	adds	r7, #48	@ 0x30
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008e62:	f023 030c 	bic.w	r3, r3, #12
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8008f3c <UART_SetConfig+0x114>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d103      	bne.n	8008e98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008e90:	f7fe fcda 	bl	8007848 <HAL_RCC_GetPCLK2Freq>
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	e002      	b.n	8008e9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008e98:	f7fe fcc2 	bl	8007820 <HAL_RCC_GetPCLK1Freq>
 8008e9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009a      	lsls	r2, r3, #2
 8008ea8:	441a      	add	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb4:	4a22      	ldr	r2, [pc, #136]	@ (8008f40 <UART_SetConfig+0x118>)
 8008eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eba:	095b      	lsrs	r3, r3, #5
 8008ebc:	0119      	lsls	r1, r3, #4
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009a      	lsls	r2, r3, #2
 8008ec8:	441a      	add	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f40 <UART_SetConfig+0x118>)
 8008ed6:	fba3 0302 	umull	r0, r3, r3, r2
 8008eda:	095b      	lsrs	r3, r3, #5
 8008edc:	2064      	movs	r0, #100	@ 0x64
 8008ede:	fb00 f303 	mul.w	r3, r0, r3
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	3332      	adds	r3, #50	@ 0x32
 8008ee8:	4a15      	ldr	r2, [pc, #84]	@ (8008f40 <UART_SetConfig+0x118>)
 8008eea:	fba2 2303 	umull	r2, r3, r2, r3
 8008eee:	095b      	lsrs	r3, r3, #5
 8008ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ef4:	4419      	add	r1, r3
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	009a      	lsls	r2, r3, #2
 8008f00:	441a      	add	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <UART_SetConfig+0x118>)
 8008f0e:	fba3 0302 	umull	r0, r3, r3, r2
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	2064      	movs	r0, #100	@ 0x64
 8008f16:	fb00 f303 	mul.w	r3, r0, r3
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	3332      	adds	r3, #50	@ 0x32
 8008f20:	4a07      	ldr	r2, [pc, #28]	@ (8008f40 <UART_SetConfig+0x118>)
 8008f22:	fba2 2303 	umull	r2, r3, r2, r3
 8008f26:	095b      	lsrs	r3, r3, #5
 8008f28:	f003 020f 	and.w	r2, r3, #15
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	440a      	add	r2, r1
 8008f32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008f34:	bf00      	nop
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	40013800 	.word	0x40013800
 8008f40:	51eb851f 	.word	0x51eb851f

08008f44 <atof>:
 8008f44:	2100      	movs	r1, #0
 8008f46:	f000 bdff 	b.w	8009b48 <strtod>

08008f4a <atoi>:
 8008f4a:	220a      	movs	r2, #10
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	f000 be81 	b.w	8009c54 <strtol>

08008f52 <sulp>:
 8008f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f56:	460f      	mov	r7, r1
 8008f58:	4690      	mov	r8, r2
 8008f5a:	f003 fb05 	bl	800c568 <__ulp>
 8008f5e:	4604      	mov	r4, r0
 8008f60:	460d      	mov	r5, r1
 8008f62:	f1b8 0f00 	cmp.w	r8, #0
 8008f66:	d011      	beq.n	8008f8c <sulp+0x3a>
 8008f68:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008f6c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dd0b      	ble.n	8008f8c <sulp+0x3a>
 8008f74:	2400      	movs	r4, #0
 8008f76:	051b      	lsls	r3, r3, #20
 8008f78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008f7c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008f80:	4622      	mov	r2, r4
 8008f82:	462b      	mov	r3, r5
 8008f84:	f7f7 faa8 	bl	80004d8 <__aeabi_dmul>
 8008f88:	4604      	mov	r4, r0
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	4629      	mov	r1, r5
 8008f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f94:	0000      	movs	r0, r0
	...

08008f98 <_strtod_l>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	b09f      	sub	sp, #124	@ 0x7c
 8008f9e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008fa6:	f04f 0a00 	mov.w	sl, #0
 8008faa:	f04f 0b00 	mov.w	fp, #0
 8008fae:	460a      	mov	r2, r1
 8008fb0:	9005      	str	r0, [sp, #20]
 8008fb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fb4:	7811      	ldrb	r1, [r2, #0]
 8008fb6:	292b      	cmp	r1, #43	@ 0x2b
 8008fb8:	d048      	beq.n	800904c <_strtod_l+0xb4>
 8008fba:	d836      	bhi.n	800902a <_strtod_l+0x92>
 8008fbc:	290d      	cmp	r1, #13
 8008fbe:	d830      	bhi.n	8009022 <_strtod_l+0x8a>
 8008fc0:	2908      	cmp	r1, #8
 8008fc2:	d830      	bhi.n	8009026 <_strtod_l+0x8e>
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	d039      	beq.n	800903c <_strtod_l+0xa4>
 8008fc8:	2200      	movs	r2, #0
 8008fca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008fcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008fce:	782a      	ldrb	r2, [r5, #0]
 8008fd0:	2a30      	cmp	r2, #48	@ 0x30
 8008fd2:	f040 80b1 	bne.w	8009138 <_strtod_l+0x1a0>
 8008fd6:	786a      	ldrb	r2, [r5, #1]
 8008fd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008fdc:	2a58      	cmp	r2, #88	@ 0x58
 8008fde:	d16c      	bne.n	80090ba <_strtod_l+0x122>
 8008fe0:	9302      	str	r3, [sp, #8]
 8008fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fe4:	4a8e      	ldr	r2, [pc, #568]	@ (8009220 <_strtod_l+0x288>)
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	ab1a      	add	r3, sp, #104	@ 0x68
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	9805      	ldr	r0, [sp, #20]
 8008fee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ff0:	a919      	add	r1, sp, #100	@ 0x64
 8008ff2:	f002 fbad 	bl	800b750 <__gethex>
 8008ff6:	f010 060f 	ands.w	r6, r0, #15
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	d005      	beq.n	800900a <_strtod_l+0x72>
 8008ffe:	2e06      	cmp	r6, #6
 8009000:	d126      	bne.n	8009050 <_strtod_l+0xb8>
 8009002:	2300      	movs	r3, #0
 8009004:	3501      	adds	r5, #1
 8009006:	9519      	str	r5, [sp, #100]	@ 0x64
 8009008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800900a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 8584 	bne.w	8009b1a <_strtod_l+0xb82>
 8009012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009014:	b1bb      	cbz	r3, 8009046 <_strtod_l+0xae>
 8009016:	4650      	mov	r0, sl
 8009018:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800901c:	b01f      	add	sp, #124	@ 0x7c
 800901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009022:	2920      	cmp	r1, #32
 8009024:	d1d0      	bne.n	8008fc8 <_strtod_l+0x30>
 8009026:	3201      	adds	r2, #1
 8009028:	e7c3      	b.n	8008fb2 <_strtod_l+0x1a>
 800902a:	292d      	cmp	r1, #45	@ 0x2d
 800902c:	d1cc      	bne.n	8008fc8 <_strtod_l+0x30>
 800902e:	2101      	movs	r1, #1
 8009030:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009032:	1c51      	adds	r1, r2, #1
 8009034:	9119      	str	r1, [sp, #100]	@ 0x64
 8009036:	7852      	ldrb	r2, [r2, #1]
 8009038:	2a00      	cmp	r2, #0
 800903a:	d1c7      	bne.n	8008fcc <_strtod_l+0x34>
 800903c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800903e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009040:	2b00      	cmp	r3, #0
 8009042:	f040 8568 	bne.w	8009b16 <_strtod_l+0xb7e>
 8009046:	4650      	mov	r0, sl
 8009048:	4659      	mov	r1, fp
 800904a:	e7e7      	b.n	800901c <_strtod_l+0x84>
 800904c:	2100      	movs	r1, #0
 800904e:	e7ef      	b.n	8009030 <_strtod_l+0x98>
 8009050:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009052:	b13a      	cbz	r2, 8009064 <_strtod_l+0xcc>
 8009054:	2135      	movs	r1, #53	@ 0x35
 8009056:	a81c      	add	r0, sp, #112	@ 0x70
 8009058:	f003 fb76 	bl	800c748 <__copybits>
 800905c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800905e:	9805      	ldr	r0, [sp, #20]
 8009060:	f002 ff50 	bl	800bf04 <_Bfree>
 8009064:	3e01      	subs	r6, #1
 8009066:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009068:	2e04      	cmp	r6, #4
 800906a:	d806      	bhi.n	800907a <_strtod_l+0xe2>
 800906c:	e8df f006 	tbb	[pc, r6]
 8009070:	201d0314 	.word	0x201d0314
 8009074:	14          	.byte	0x14
 8009075:	00          	.byte	0x00
 8009076:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800907a:	05e1      	lsls	r1, r4, #23
 800907c:	bf48      	it	mi
 800907e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009082:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009086:	0d1b      	lsrs	r3, r3, #20
 8009088:	051b      	lsls	r3, r3, #20
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1bd      	bne.n	800900a <_strtod_l+0x72>
 800908e:	f001 fc0f 	bl	800a8b0 <__errno>
 8009092:	2322      	movs	r3, #34	@ 0x22
 8009094:	6003      	str	r3, [r0, #0]
 8009096:	e7b8      	b.n	800900a <_strtod_l+0x72>
 8009098:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800909c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80090a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090a8:	e7e7      	b.n	800907a <_strtod_l+0xe2>
 80090aa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009224 <_strtod_l+0x28c>
 80090ae:	e7e4      	b.n	800907a <_strtod_l+0xe2>
 80090b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80090b4:	f04f 3aff 	mov.w	sl, #4294967295
 80090b8:	e7df      	b.n	800907a <_strtod_l+0xe2>
 80090ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	9219      	str	r2, [sp, #100]	@ 0x64
 80090c0:	785b      	ldrb	r3, [r3, #1]
 80090c2:	2b30      	cmp	r3, #48	@ 0x30
 80090c4:	d0f9      	beq.n	80090ba <_strtod_l+0x122>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d09f      	beq.n	800900a <_strtod_l+0x72>
 80090ca:	2301      	movs	r3, #1
 80090cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090d0:	220a      	movs	r2, #10
 80090d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80090d4:	2300      	movs	r3, #0
 80090d6:	461f      	mov	r7, r3
 80090d8:	9308      	str	r3, [sp, #32]
 80090da:	930a      	str	r3, [sp, #40]	@ 0x28
 80090dc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80090de:	7805      	ldrb	r5, [r0, #0]
 80090e0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80090e4:	b2d9      	uxtb	r1, r3
 80090e6:	2909      	cmp	r1, #9
 80090e8:	d928      	bls.n	800913c <_strtod_l+0x1a4>
 80090ea:	2201      	movs	r2, #1
 80090ec:	494e      	ldr	r1, [pc, #312]	@ (8009228 <_strtod_l+0x290>)
 80090ee:	f001 fb44 	bl	800a77a <strncmp>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d032      	beq.n	800915c <_strtod_l+0x1c4>
 80090f6:	2000      	movs	r0, #0
 80090f8:	462a      	mov	r2, r5
 80090fa:	4681      	mov	r9, r0
 80090fc:	463d      	mov	r5, r7
 80090fe:	4603      	mov	r3, r0
 8009100:	2a65      	cmp	r2, #101	@ 0x65
 8009102:	d001      	beq.n	8009108 <_strtod_l+0x170>
 8009104:	2a45      	cmp	r2, #69	@ 0x45
 8009106:	d114      	bne.n	8009132 <_strtod_l+0x19a>
 8009108:	b91d      	cbnz	r5, 8009112 <_strtod_l+0x17a>
 800910a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800910c:	4302      	orrs	r2, r0
 800910e:	d095      	beq.n	800903c <_strtod_l+0xa4>
 8009110:	2500      	movs	r5, #0
 8009112:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009114:	1c62      	adds	r2, r4, #1
 8009116:	9219      	str	r2, [sp, #100]	@ 0x64
 8009118:	7862      	ldrb	r2, [r4, #1]
 800911a:	2a2b      	cmp	r2, #43	@ 0x2b
 800911c:	d077      	beq.n	800920e <_strtod_l+0x276>
 800911e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009120:	d07b      	beq.n	800921a <_strtod_l+0x282>
 8009122:	f04f 0c00 	mov.w	ip, #0
 8009126:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800912a:	2909      	cmp	r1, #9
 800912c:	f240 8082 	bls.w	8009234 <_strtod_l+0x29c>
 8009130:	9419      	str	r4, [sp, #100]	@ 0x64
 8009132:	f04f 0800 	mov.w	r8, #0
 8009136:	e0a2      	b.n	800927e <_strtod_l+0x2e6>
 8009138:	2300      	movs	r3, #0
 800913a:	e7c7      	b.n	80090cc <_strtod_l+0x134>
 800913c:	2f08      	cmp	r7, #8
 800913e:	bfd5      	itete	le
 8009140:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009142:	9908      	ldrgt	r1, [sp, #32]
 8009144:	fb02 3301 	mlale	r3, r2, r1, r3
 8009148:	fb02 3301 	mlagt	r3, r2, r1, r3
 800914c:	f100 0001 	add.w	r0, r0, #1
 8009150:	bfd4      	ite	le
 8009152:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009154:	9308      	strgt	r3, [sp, #32]
 8009156:	3701      	adds	r7, #1
 8009158:	9019      	str	r0, [sp, #100]	@ 0x64
 800915a:	e7bf      	b.n	80090dc <_strtod_l+0x144>
 800915c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	9219      	str	r2, [sp, #100]	@ 0x64
 8009162:	785a      	ldrb	r2, [r3, #1]
 8009164:	b37f      	cbz	r7, 80091c6 <_strtod_l+0x22e>
 8009166:	4681      	mov	r9, r0
 8009168:	463d      	mov	r5, r7
 800916a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800916e:	2b09      	cmp	r3, #9
 8009170:	d912      	bls.n	8009198 <_strtod_l+0x200>
 8009172:	2301      	movs	r3, #1
 8009174:	e7c4      	b.n	8009100 <_strtod_l+0x168>
 8009176:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009178:	3001      	adds	r0, #1
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	9219      	str	r2, [sp, #100]	@ 0x64
 800917e:	785a      	ldrb	r2, [r3, #1]
 8009180:	2a30      	cmp	r2, #48	@ 0x30
 8009182:	d0f8      	beq.n	8009176 <_strtod_l+0x1de>
 8009184:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009188:	2b08      	cmp	r3, #8
 800918a:	f200 84cb 	bhi.w	8009b24 <_strtod_l+0xb8c>
 800918e:	4681      	mov	r9, r0
 8009190:	2000      	movs	r0, #0
 8009192:	4605      	mov	r5, r0
 8009194:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009196:	930c      	str	r3, [sp, #48]	@ 0x30
 8009198:	3a30      	subs	r2, #48	@ 0x30
 800919a:	f100 0301 	add.w	r3, r0, #1
 800919e:	d02a      	beq.n	80091f6 <_strtod_l+0x25e>
 80091a0:	4499      	add	r9, r3
 80091a2:	210a      	movs	r1, #10
 80091a4:	462b      	mov	r3, r5
 80091a6:	eb00 0c05 	add.w	ip, r0, r5
 80091aa:	4563      	cmp	r3, ip
 80091ac:	d10d      	bne.n	80091ca <_strtod_l+0x232>
 80091ae:	1c69      	adds	r1, r5, #1
 80091b0:	4401      	add	r1, r0
 80091b2:	4428      	add	r0, r5
 80091b4:	2808      	cmp	r0, #8
 80091b6:	dc16      	bgt.n	80091e6 <_strtod_l+0x24e>
 80091b8:	230a      	movs	r3, #10
 80091ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091bc:	fb03 2300 	mla	r3, r3, r0, r2
 80091c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80091c2:	2300      	movs	r3, #0
 80091c4:	e018      	b.n	80091f8 <_strtod_l+0x260>
 80091c6:	4638      	mov	r0, r7
 80091c8:	e7da      	b.n	8009180 <_strtod_l+0x1e8>
 80091ca:	2b08      	cmp	r3, #8
 80091cc:	f103 0301 	add.w	r3, r3, #1
 80091d0:	dc03      	bgt.n	80091da <_strtod_l+0x242>
 80091d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80091d4:	434e      	muls	r6, r1
 80091d6:	960a      	str	r6, [sp, #40]	@ 0x28
 80091d8:	e7e7      	b.n	80091aa <_strtod_l+0x212>
 80091da:	2b10      	cmp	r3, #16
 80091dc:	bfde      	ittt	le
 80091de:	9e08      	ldrle	r6, [sp, #32]
 80091e0:	434e      	mulle	r6, r1
 80091e2:	9608      	strle	r6, [sp, #32]
 80091e4:	e7e1      	b.n	80091aa <_strtod_l+0x212>
 80091e6:	280f      	cmp	r0, #15
 80091e8:	dceb      	bgt.n	80091c2 <_strtod_l+0x22a>
 80091ea:	230a      	movs	r3, #10
 80091ec:	9808      	ldr	r0, [sp, #32]
 80091ee:	fb03 2300 	mla	r3, r3, r0, r2
 80091f2:	9308      	str	r3, [sp, #32]
 80091f4:	e7e5      	b.n	80091c2 <_strtod_l+0x22a>
 80091f6:	4629      	mov	r1, r5
 80091f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091fa:	460d      	mov	r5, r1
 80091fc:	1c50      	adds	r0, r2, #1
 80091fe:	9019      	str	r0, [sp, #100]	@ 0x64
 8009200:	7852      	ldrb	r2, [r2, #1]
 8009202:	4618      	mov	r0, r3
 8009204:	e7b1      	b.n	800916a <_strtod_l+0x1d2>
 8009206:	f04f 0900 	mov.w	r9, #0
 800920a:	2301      	movs	r3, #1
 800920c:	e77d      	b.n	800910a <_strtod_l+0x172>
 800920e:	f04f 0c00 	mov.w	ip, #0
 8009212:	1ca2      	adds	r2, r4, #2
 8009214:	9219      	str	r2, [sp, #100]	@ 0x64
 8009216:	78a2      	ldrb	r2, [r4, #2]
 8009218:	e785      	b.n	8009126 <_strtod_l+0x18e>
 800921a:	f04f 0c01 	mov.w	ip, #1
 800921e:	e7f8      	b.n	8009212 <_strtod_l+0x27a>
 8009220:	0800ea18 	.word	0x0800ea18
 8009224:	7ff00000 	.word	0x7ff00000
 8009228:	0800ea02 	.word	0x0800ea02
 800922c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800922e:	1c51      	adds	r1, r2, #1
 8009230:	9119      	str	r1, [sp, #100]	@ 0x64
 8009232:	7852      	ldrb	r2, [r2, #1]
 8009234:	2a30      	cmp	r2, #48	@ 0x30
 8009236:	d0f9      	beq.n	800922c <_strtod_l+0x294>
 8009238:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800923c:	2908      	cmp	r1, #8
 800923e:	f63f af78 	bhi.w	8009132 <_strtod_l+0x19a>
 8009242:	f04f 080a 	mov.w	r8, #10
 8009246:	3a30      	subs	r2, #48	@ 0x30
 8009248:	920e      	str	r2, [sp, #56]	@ 0x38
 800924a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800924c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800924e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009250:	1c56      	adds	r6, r2, #1
 8009252:	9619      	str	r6, [sp, #100]	@ 0x64
 8009254:	7852      	ldrb	r2, [r2, #1]
 8009256:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800925a:	f1be 0f09 	cmp.w	lr, #9
 800925e:	d939      	bls.n	80092d4 <_strtod_l+0x33c>
 8009260:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009262:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009266:	1a76      	subs	r6, r6, r1
 8009268:	2e08      	cmp	r6, #8
 800926a:	dc03      	bgt.n	8009274 <_strtod_l+0x2dc>
 800926c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800926e:	4588      	cmp	r8, r1
 8009270:	bfa8      	it	ge
 8009272:	4688      	movge	r8, r1
 8009274:	f1bc 0f00 	cmp.w	ip, #0
 8009278:	d001      	beq.n	800927e <_strtod_l+0x2e6>
 800927a:	f1c8 0800 	rsb	r8, r8, #0
 800927e:	2d00      	cmp	r5, #0
 8009280:	d14e      	bne.n	8009320 <_strtod_l+0x388>
 8009282:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009284:	4308      	orrs	r0, r1
 8009286:	f47f aec0 	bne.w	800900a <_strtod_l+0x72>
 800928a:	2b00      	cmp	r3, #0
 800928c:	f47f aed6 	bne.w	800903c <_strtod_l+0xa4>
 8009290:	2a69      	cmp	r2, #105	@ 0x69
 8009292:	d028      	beq.n	80092e6 <_strtod_l+0x34e>
 8009294:	dc25      	bgt.n	80092e2 <_strtod_l+0x34a>
 8009296:	2a49      	cmp	r2, #73	@ 0x49
 8009298:	d025      	beq.n	80092e6 <_strtod_l+0x34e>
 800929a:	2a4e      	cmp	r2, #78	@ 0x4e
 800929c:	f47f aece 	bne.w	800903c <_strtod_l+0xa4>
 80092a0:	499a      	ldr	r1, [pc, #616]	@ (800950c <_strtod_l+0x574>)
 80092a2:	a819      	add	r0, sp, #100	@ 0x64
 80092a4:	f002 fc76 	bl	800bb94 <__match>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	f43f aec7 	beq.w	800903c <_strtod_l+0xa4>
 80092ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b28      	cmp	r3, #40	@ 0x28
 80092b4:	d12e      	bne.n	8009314 <_strtod_l+0x37c>
 80092b6:	4996      	ldr	r1, [pc, #600]	@ (8009510 <_strtod_l+0x578>)
 80092b8:	aa1c      	add	r2, sp, #112	@ 0x70
 80092ba:	a819      	add	r0, sp, #100	@ 0x64
 80092bc:	f002 fc7e 	bl	800bbbc <__hexnan>
 80092c0:	2805      	cmp	r0, #5
 80092c2:	d127      	bne.n	8009314 <_strtod_l+0x37c>
 80092c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80092c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80092ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80092ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80092d2:	e69a      	b.n	800900a <_strtod_l+0x72>
 80092d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80092d6:	fb08 2101 	mla	r1, r8, r1, r2
 80092da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80092de:	920e      	str	r2, [sp, #56]	@ 0x38
 80092e0:	e7b5      	b.n	800924e <_strtod_l+0x2b6>
 80092e2:	2a6e      	cmp	r2, #110	@ 0x6e
 80092e4:	e7da      	b.n	800929c <_strtod_l+0x304>
 80092e6:	498b      	ldr	r1, [pc, #556]	@ (8009514 <_strtod_l+0x57c>)
 80092e8:	a819      	add	r0, sp, #100	@ 0x64
 80092ea:	f002 fc53 	bl	800bb94 <__match>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f43f aea4 	beq.w	800903c <_strtod_l+0xa4>
 80092f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092f6:	4988      	ldr	r1, [pc, #544]	@ (8009518 <_strtod_l+0x580>)
 80092f8:	3b01      	subs	r3, #1
 80092fa:	a819      	add	r0, sp, #100	@ 0x64
 80092fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80092fe:	f002 fc49 	bl	800bb94 <__match>
 8009302:	b910      	cbnz	r0, 800930a <_strtod_l+0x372>
 8009304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009306:	3301      	adds	r3, #1
 8009308:	9319      	str	r3, [sp, #100]	@ 0x64
 800930a:	f04f 0a00 	mov.w	sl, #0
 800930e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800951c <_strtod_l+0x584>
 8009312:	e67a      	b.n	800900a <_strtod_l+0x72>
 8009314:	4882      	ldr	r0, [pc, #520]	@ (8009520 <_strtod_l+0x588>)
 8009316:	f001 fb15 	bl	800a944 <nan>
 800931a:	4682      	mov	sl, r0
 800931c:	468b      	mov	fp, r1
 800931e:	e674      	b.n	800900a <_strtod_l+0x72>
 8009320:	eba8 0309 	sub.w	r3, r8, r9
 8009324:	2f00      	cmp	r7, #0
 8009326:	bf08      	it	eq
 8009328:	462f      	moveq	r7, r5
 800932a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800932c:	2d10      	cmp	r5, #16
 800932e:	462c      	mov	r4, r5
 8009330:	9309      	str	r3, [sp, #36]	@ 0x24
 8009332:	bfa8      	it	ge
 8009334:	2410      	movge	r4, #16
 8009336:	f7f7 f855 	bl	80003e4 <__aeabi_ui2d>
 800933a:	2d09      	cmp	r5, #9
 800933c:	4682      	mov	sl, r0
 800933e:	468b      	mov	fp, r1
 8009340:	dc11      	bgt.n	8009366 <_strtod_l+0x3ce>
 8009342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009344:	2b00      	cmp	r3, #0
 8009346:	f43f ae60 	beq.w	800900a <_strtod_l+0x72>
 800934a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800934c:	dd76      	ble.n	800943c <_strtod_l+0x4a4>
 800934e:	2b16      	cmp	r3, #22
 8009350:	dc5d      	bgt.n	800940e <_strtod_l+0x476>
 8009352:	4974      	ldr	r1, [pc, #464]	@ (8009524 <_strtod_l+0x58c>)
 8009354:	4652      	mov	r2, sl
 8009356:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800935a:	465b      	mov	r3, fp
 800935c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009360:	f7f7 f8ba 	bl	80004d8 <__aeabi_dmul>
 8009364:	e7d9      	b.n	800931a <_strtod_l+0x382>
 8009366:	4b6f      	ldr	r3, [pc, #444]	@ (8009524 <_strtod_l+0x58c>)
 8009368:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800936c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009370:	f7f7 f8b2 	bl	80004d8 <__aeabi_dmul>
 8009374:	4682      	mov	sl, r0
 8009376:	9808      	ldr	r0, [sp, #32]
 8009378:	468b      	mov	fp, r1
 800937a:	f7f7 f833 	bl	80003e4 <__aeabi_ui2d>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4650      	mov	r0, sl
 8009384:	4659      	mov	r1, fp
 8009386:	f7f6 fef1 	bl	800016c <__adddf3>
 800938a:	2d0f      	cmp	r5, #15
 800938c:	4682      	mov	sl, r0
 800938e:	468b      	mov	fp, r1
 8009390:	ddd7      	ble.n	8009342 <_strtod_l+0x3aa>
 8009392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009394:	1b2c      	subs	r4, r5, r4
 8009396:	441c      	add	r4, r3
 8009398:	2c00      	cmp	r4, #0
 800939a:	f340 8096 	ble.w	80094ca <_strtod_l+0x532>
 800939e:	f014 030f 	ands.w	r3, r4, #15
 80093a2:	d00a      	beq.n	80093ba <_strtod_l+0x422>
 80093a4:	495f      	ldr	r1, [pc, #380]	@ (8009524 <_strtod_l+0x58c>)
 80093a6:	4652      	mov	r2, sl
 80093a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093b0:	465b      	mov	r3, fp
 80093b2:	f7f7 f891 	bl	80004d8 <__aeabi_dmul>
 80093b6:	4682      	mov	sl, r0
 80093b8:	468b      	mov	fp, r1
 80093ba:	f034 040f 	bics.w	r4, r4, #15
 80093be:	d073      	beq.n	80094a8 <_strtod_l+0x510>
 80093c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80093c4:	dd48      	ble.n	8009458 <_strtod_l+0x4c0>
 80093c6:	2400      	movs	r4, #0
 80093c8:	46a0      	mov	r8, r4
 80093ca:	46a1      	mov	r9, r4
 80093cc:	940a      	str	r4, [sp, #40]	@ 0x28
 80093ce:	2322      	movs	r3, #34	@ 0x22
 80093d0:	f04f 0a00 	mov.w	sl, #0
 80093d4:	9a05      	ldr	r2, [sp, #20]
 80093d6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800951c <_strtod_l+0x584>
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f43f ae13 	beq.w	800900a <_strtod_l+0x72>
 80093e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093e6:	9805      	ldr	r0, [sp, #20]
 80093e8:	f002 fd8c 	bl	800bf04 <_Bfree>
 80093ec:	4649      	mov	r1, r9
 80093ee:	9805      	ldr	r0, [sp, #20]
 80093f0:	f002 fd88 	bl	800bf04 <_Bfree>
 80093f4:	4641      	mov	r1, r8
 80093f6:	9805      	ldr	r0, [sp, #20]
 80093f8:	f002 fd84 	bl	800bf04 <_Bfree>
 80093fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093fe:	9805      	ldr	r0, [sp, #20]
 8009400:	f002 fd80 	bl	800bf04 <_Bfree>
 8009404:	4621      	mov	r1, r4
 8009406:	9805      	ldr	r0, [sp, #20]
 8009408:	f002 fd7c 	bl	800bf04 <_Bfree>
 800940c:	e5fd      	b.n	800900a <_strtod_l+0x72>
 800940e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009410:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009414:	4293      	cmp	r3, r2
 8009416:	dbbc      	blt.n	8009392 <_strtod_l+0x3fa>
 8009418:	4c42      	ldr	r4, [pc, #264]	@ (8009524 <_strtod_l+0x58c>)
 800941a:	f1c5 050f 	rsb	r5, r5, #15
 800941e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009422:	4652      	mov	r2, sl
 8009424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009428:	465b      	mov	r3, fp
 800942a:	f7f7 f855 	bl	80004d8 <__aeabi_dmul>
 800942e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009430:	1b5d      	subs	r5, r3, r5
 8009432:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009436:	e9d4 2300 	ldrd	r2, r3, [r4]
 800943a:	e791      	b.n	8009360 <_strtod_l+0x3c8>
 800943c:	3316      	adds	r3, #22
 800943e:	dba8      	blt.n	8009392 <_strtod_l+0x3fa>
 8009440:	4b38      	ldr	r3, [pc, #224]	@ (8009524 <_strtod_l+0x58c>)
 8009442:	eba9 0808 	sub.w	r8, r9, r8
 8009446:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800944a:	4650      	mov	r0, sl
 800944c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009450:	4659      	mov	r1, fp
 8009452:	f7f7 f96b 	bl	800072c <__aeabi_ddiv>
 8009456:	e760      	b.n	800931a <_strtod_l+0x382>
 8009458:	4b33      	ldr	r3, [pc, #204]	@ (8009528 <_strtod_l+0x590>)
 800945a:	4650      	mov	r0, sl
 800945c:	9308      	str	r3, [sp, #32]
 800945e:	2300      	movs	r3, #0
 8009460:	4659      	mov	r1, fp
 8009462:	461e      	mov	r6, r3
 8009464:	1124      	asrs	r4, r4, #4
 8009466:	2c01      	cmp	r4, #1
 8009468:	dc21      	bgt.n	80094ae <_strtod_l+0x516>
 800946a:	b10b      	cbz	r3, 8009470 <_strtod_l+0x4d8>
 800946c:	4682      	mov	sl, r0
 800946e:	468b      	mov	fp, r1
 8009470:	492d      	ldr	r1, [pc, #180]	@ (8009528 <_strtod_l+0x590>)
 8009472:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009476:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800947a:	4652      	mov	r2, sl
 800947c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009480:	465b      	mov	r3, fp
 8009482:	f7f7 f829 	bl	80004d8 <__aeabi_dmul>
 8009486:	4b25      	ldr	r3, [pc, #148]	@ (800951c <_strtod_l+0x584>)
 8009488:	460a      	mov	r2, r1
 800948a:	400b      	ands	r3, r1
 800948c:	4927      	ldr	r1, [pc, #156]	@ (800952c <_strtod_l+0x594>)
 800948e:	4682      	mov	sl, r0
 8009490:	428b      	cmp	r3, r1
 8009492:	d898      	bhi.n	80093c6 <_strtod_l+0x42e>
 8009494:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009498:	428b      	cmp	r3, r1
 800949a:	bf86      	itte	hi
 800949c:	f04f 3aff 	movhi.w	sl, #4294967295
 80094a0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009530 <_strtod_l+0x598>
 80094a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80094a8:	2300      	movs	r3, #0
 80094aa:	9308      	str	r3, [sp, #32]
 80094ac:	e07a      	b.n	80095a4 <_strtod_l+0x60c>
 80094ae:	07e2      	lsls	r2, r4, #31
 80094b0:	d505      	bpl.n	80094be <_strtod_l+0x526>
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f7f7 f80e 	bl	80004d8 <__aeabi_dmul>
 80094bc:	2301      	movs	r3, #1
 80094be:	9a08      	ldr	r2, [sp, #32]
 80094c0:	3601      	adds	r6, #1
 80094c2:	3208      	adds	r2, #8
 80094c4:	1064      	asrs	r4, r4, #1
 80094c6:	9208      	str	r2, [sp, #32]
 80094c8:	e7cd      	b.n	8009466 <_strtod_l+0x4ce>
 80094ca:	d0ed      	beq.n	80094a8 <_strtod_l+0x510>
 80094cc:	4264      	negs	r4, r4
 80094ce:	f014 020f 	ands.w	r2, r4, #15
 80094d2:	d00a      	beq.n	80094ea <_strtod_l+0x552>
 80094d4:	4b13      	ldr	r3, [pc, #76]	@ (8009524 <_strtod_l+0x58c>)
 80094d6:	4650      	mov	r0, sl
 80094d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094dc:	4659      	mov	r1, fp
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f7f7 f923 	bl	800072c <__aeabi_ddiv>
 80094e6:	4682      	mov	sl, r0
 80094e8:	468b      	mov	fp, r1
 80094ea:	1124      	asrs	r4, r4, #4
 80094ec:	d0dc      	beq.n	80094a8 <_strtod_l+0x510>
 80094ee:	2c1f      	cmp	r4, #31
 80094f0:	dd20      	ble.n	8009534 <_strtod_l+0x59c>
 80094f2:	2400      	movs	r4, #0
 80094f4:	46a0      	mov	r8, r4
 80094f6:	46a1      	mov	r9, r4
 80094f8:	940a      	str	r4, [sp, #40]	@ 0x28
 80094fa:	2322      	movs	r3, #34	@ 0x22
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	f04f 0a00 	mov.w	sl, #0
 8009502:	f04f 0b00 	mov.w	fp, #0
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	e768      	b.n	80093dc <_strtod_l+0x444>
 800950a:	bf00      	nop
 800950c:	0800eb66 	.word	0x0800eb66
 8009510:	0800ea04 	.word	0x0800ea04
 8009514:	0800eb5e 	.word	0x0800eb5e
 8009518:	0800eb98 	.word	0x0800eb98
 800951c:	7ff00000 	.word	0x7ff00000
 8009520:	0800ee24 	.word	0x0800ee24
 8009524:	0800ed10 	.word	0x0800ed10
 8009528:	0800ece8 	.word	0x0800ece8
 800952c:	7ca00000 	.word	0x7ca00000
 8009530:	7fefffff 	.word	0x7fefffff
 8009534:	f014 0310 	ands.w	r3, r4, #16
 8009538:	bf18      	it	ne
 800953a:	236a      	movne	r3, #106	@ 0x6a
 800953c:	4650      	mov	r0, sl
 800953e:	9308      	str	r3, [sp, #32]
 8009540:	4659      	mov	r1, fp
 8009542:	2300      	movs	r3, #0
 8009544:	4ea9      	ldr	r6, [pc, #676]	@ (80097ec <_strtod_l+0x854>)
 8009546:	07e2      	lsls	r2, r4, #31
 8009548:	d504      	bpl.n	8009554 <_strtod_l+0x5bc>
 800954a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800954e:	f7f6 ffc3 	bl	80004d8 <__aeabi_dmul>
 8009552:	2301      	movs	r3, #1
 8009554:	1064      	asrs	r4, r4, #1
 8009556:	f106 0608 	add.w	r6, r6, #8
 800955a:	d1f4      	bne.n	8009546 <_strtod_l+0x5ae>
 800955c:	b10b      	cbz	r3, 8009562 <_strtod_l+0x5ca>
 800955e:	4682      	mov	sl, r0
 8009560:	468b      	mov	fp, r1
 8009562:	9b08      	ldr	r3, [sp, #32]
 8009564:	b1b3      	cbz	r3, 8009594 <_strtod_l+0x5fc>
 8009566:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800956a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800956e:	2b00      	cmp	r3, #0
 8009570:	4659      	mov	r1, fp
 8009572:	dd0f      	ble.n	8009594 <_strtod_l+0x5fc>
 8009574:	2b1f      	cmp	r3, #31
 8009576:	dd57      	ble.n	8009628 <_strtod_l+0x690>
 8009578:	2b34      	cmp	r3, #52	@ 0x34
 800957a:	bfd8      	it	le
 800957c:	f04f 33ff 	movle.w	r3, #4294967295
 8009580:	f04f 0a00 	mov.w	sl, #0
 8009584:	bfcf      	iteee	gt
 8009586:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800958a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800958e:	4093      	lslle	r3, r2
 8009590:	ea03 0b01 	andle.w	fp, r3, r1
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	4650      	mov	r0, sl
 800959a:	4659      	mov	r1, fp
 800959c:	f7f7 fa04 	bl	80009a8 <__aeabi_dcmpeq>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d1a6      	bne.n	80094f2 <_strtod_l+0x55a>
 80095a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095a6:	463a      	mov	r2, r7
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80095ac:	462b      	mov	r3, r5
 80095ae:	9805      	ldr	r0, [sp, #20]
 80095b0:	f002 fd10 	bl	800bfd4 <__s2b>
 80095b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f43f af05 	beq.w	80093c6 <_strtod_l+0x42e>
 80095bc:	2400      	movs	r4, #0
 80095be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095c0:	eba9 0308 	sub.w	r3, r9, r8
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	bfa8      	it	ge
 80095c8:	2300      	movge	r3, #0
 80095ca:	46a0      	mov	r8, r4
 80095cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80095ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80095d2:	9316      	str	r3, [sp, #88]	@ 0x58
 80095d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d6:	9805      	ldr	r0, [sp, #20]
 80095d8:	6859      	ldr	r1, [r3, #4]
 80095da:	f002 fc53 	bl	800be84 <_Balloc>
 80095de:	4681      	mov	r9, r0
 80095e0:	2800      	cmp	r0, #0
 80095e2:	f43f aef4 	beq.w	80093ce <_strtod_l+0x436>
 80095e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e8:	300c      	adds	r0, #12
 80095ea:	691a      	ldr	r2, [r3, #16]
 80095ec:	f103 010c 	add.w	r1, r3, #12
 80095f0:	3202      	adds	r2, #2
 80095f2:	0092      	lsls	r2, r2, #2
 80095f4:	f001 f997 	bl	800a926 <memcpy>
 80095f8:	ab1c      	add	r3, sp, #112	@ 0x70
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	4652      	mov	r2, sl
 8009602:	465b      	mov	r3, fp
 8009604:	9805      	ldr	r0, [sp, #20]
 8009606:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800960a:	f003 f815 	bl	800c638 <__d2b>
 800960e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009610:	2800      	cmp	r0, #0
 8009612:	f43f aedc 	beq.w	80093ce <_strtod_l+0x436>
 8009616:	2101      	movs	r1, #1
 8009618:	9805      	ldr	r0, [sp, #20]
 800961a:	f002 fd71 	bl	800c100 <__i2b>
 800961e:	4680      	mov	r8, r0
 8009620:	b948      	cbnz	r0, 8009636 <_strtod_l+0x69e>
 8009622:	f04f 0800 	mov.w	r8, #0
 8009626:	e6d2      	b.n	80093ce <_strtod_l+0x436>
 8009628:	f04f 32ff 	mov.w	r2, #4294967295
 800962c:	fa02 f303 	lsl.w	r3, r2, r3
 8009630:	ea03 0a0a 	and.w	sl, r3, sl
 8009634:	e7ae      	b.n	8009594 <_strtod_l+0x5fc>
 8009636:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009638:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800963a:	2d00      	cmp	r5, #0
 800963c:	bfab      	itete	ge
 800963e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009640:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009642:	18ef      	addge	r7, r5, r3
 8009644:	1b5e      	sublt	r6, r3, r5
 8009646:	9b08      	ldr	r3, [sp, #32]
 8009648:	bfa8      	it	ge
 800964a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800964c:	eba5 0503 	sub.w	r5, r5, r3
 8009650:	4415      	add	r5, r2
 8009652:	4b67      	ldr	r3, [pc, #412]	@ (80097f0 <_strtod_l+0x858>)
 8009654:	f105 35ff 	add.w	r5, r5, #4294967295
 8009658:	bfb8      	it	lt
 800965a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800965c:	429d      	cmp	r5, r3
 800965e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009662:	da50      	bge.n	8009706 <_strtod_l+0x76e>
 8009664:	1b5b      	subs	r3, r3, r5
 8009666:	2b1f      	cmp	r3, #31
 8009668:	f04f 0101 	mov.w	r1, #1
 800966c:	eba2 0203 	sub.w	r2, r2, r3
 8009670:	dc3d      	bgt.n	80096ee <_strtod_l+0x756>
 8009672:	fa01 f303 	lsl.w	r3, r1, r3
 8009676:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009678:	2300      	movs	r3, #0
 800967a:	9310      	str	r3, [sp, #64]	@ 0x40
 800967c:	18bd      	adds	r5, r7, r2
 800967e:	9b08      	ldr	r3, [sp, #32]
 8009680:	42af      	cmp	r7, r5
 8009682:	4416      	add	r6, r2
 8009684:	441e      	add	r6, r3
 8009686:	463b      	mov	r3, r7
 8009688:	bfa8      	it	ge
 800968a:	462b      	movge	r3, r5
 800968c:	42b3      	cmp	r3, r6
 800968e:	bfa8      	it	ge
 8009690:	4633      	movge	r3, r6
 8009692:	2b00      	cmp	r3, #0
 8009694:	bfc2      	ittt	gt
 8009696:	1aed      	subgt	r5, r5, r3
 8009698:	1af6      	subgt	r6, r6, r3
 800969a:	1aff      	subgt	r7, r7, r3
 800969c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800969e:	2b00      	cmp	r3, #0
 80096a0:	dd16      	ble.n	80096d0 <_strtod_l+0x738>
 80096a2:	4641      	mov	r1, r8
 80096a4:	461a      	mov	r2, r3
 80096a6:	9805      	ldr	r0, [sp, #20]
 80096a8:	f002 fde8 	bl	800c27c <__pow5mult>
 80096ac:	4680      	mov	r8, r0
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d0b7      	beq.n	8009622 <_strtod_l+0x68a>
 80096b2:	4601      	mov	r1, r0
 80096b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80096b6:	9805      	ldr	r0, [sp, #20]
 80096b8:	f002 fd38 	bl	800c12c <__multiply>
 80096bc:	900e      	str	r0, [sp, #56]	@ 0x38
 80096be:	2800      	cmp	r0, #0
 80096c0:	f43f ae85 	beq.w	80093ce <_strtod_l+0x436>
 80096c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096c6:	9805      	ldr	r0, [sp, #20]
 80096c8:	f002 fc1c 	bl	800bf04 <_Bfree>
 80096cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80096d0:	2d00      	cmp	r5, #0
 80096d2:	dc1d      	bgt.n	8009710 <_strtod_l+0x778>
 80096d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dd23      	ble.n	8009722 <_strtod_l+0x78a>
 80096da:	4649      	mov	r1, r9
 80096dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80096de:	9805      	ldr	r0, [sp, #20]
 80096e0:	f002 fdcc 	bl	800c27c <__pow5mult>
 80096e4:	4681      	mov	r9, r0
 80096e6:	b9e0      	cbnz	r0, 8009722 <_strtod_l+0x78a>
 80096e8:	f04f 0900 	mov.w	r9, #0
 80096ec:	e66f      	b.n	80093ce <_strtod_l+0x436>
 80096ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80096f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80096f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80096fa:	35e2      	adds	r5, #226	@ 0xe2
 80096fc:	fa01 f305 	lsl.w	r3, r1, r5
 8009700:	9310      	str	r3, [sp, #64]	@ 0x40
 8009702:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009704:	e7ba      	b.n	800967c <_strtod_l+0x6e4>
 8009706:	2300      	movs	r3, #0
 8009708:	9310      	str	r3, [sp, #64]	@ 0x40
 800970a:	2301      	movs	r3, #1
 800970c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800970e:	e7b5      	b.n	800967c <_strtod_l+0x6e4>
 8009710:	462a      	mov	r2, r5
 8009712:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009714:	9805      	ldr	r0, [sp, #20]
 8009716:	f002 fe0b 	bl	800c330 <__lshift>
 800971a:	901a      	str	r0, [sp, #104]	@ 0x68
 800971c:	2800      	cmp	r0, #0
 800971e:	d1d9      	bne.n	80096d4 <_strtod_l+0x73c>
 8009720:	e655      	b.n	80093ce <_strtod_l+0x436>
 8009722:	2e00      	cmp	r6, #0
 8009724:	dd07      	ble.n	8009736 <_strtod_l+0x79e>
 8009726:	4649      	mov	r1, r9
 8009728:	4632      	mov	r2, r6
 800972a:	9805      	ldr	r0, [sp, #20]
 800972c:	f002 fe00 	bl	800c330 <__lshift>
 8009730:	4681      	mov	r9, r0
 8009732:	2800      	cmp	r0, #0
 8009734:	d0d8      	beq.n	80096e8 <_strtod_l+0x750>
 8009736:	2f00      	cmp	r7, #0
 8009738:	dd08      	ble.n	800974c <_strtod_l+0x7b4>
 800973a:	4641      	mov	r1, r8
 800973c:	463a      	mov	r2, r7
 800973e:	9805      	ldr	r0, [sp, #20]
 8009740:	f002 fdf6 	bl	800c330 <__lshift>
 8009744:	4680      	mov	r8, r0
 8009746:	2800      	cmp	r0, #0
 8009748:	f43f ae41 	beq.w	80093ce <_strtod_l+0x436>
 800974c:	464a      	mov	r2, r9
 800974e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009750:	9805      	ldr	r0, [sp, #20]
 8009752:	f002 fe75 	bl	800c440 <__mdiff>
 8009756:	4604      	mov	r4, r0
 8009758:	2800      	cmp	r0, #0
 800975a:	f43f ae38 	beq.w	80093ce <_strtod_l+0x436>
 800975e:	68c3      	ldr	r3, [r0, #12]
 8009760:	4641      	mov	r1, r8
 8009762:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009764:	2300      	movs	r3, #0
 8009766:	60c3      	str	r3, [r0, #12]
 8009768:	f002 fe4e 	bl	800c408 <__mcmp>
 800976c:	2800      	cmp	r0, #0
 800976e:	da45      	bge.n	80097fc <_strtod_l+0x864>
 8009770:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009772:	ea53 030a 	orrs.w	r3, r3, sl
 8009776:	d16b      	bne.n	8009850 <_strtod_l+0x8b8>
 8009778:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800977c:	2b00      	cmp	r3, #0
 800977e:	d167      	bne.n	8009850 <_strtod_l+0x8b8>
 8009780:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009784:	0d1b      	lsrs	r3, r3, #20
 8009786:	051b      	lsls	r3, r3, #20
 8009788:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800978c:	d960      	bls.n	8009850 <_strtod_l+0x8b8>
 800978e:	6963      	ldr	r3, [r4, #20]
 8009790:	b913      	cbnz	r3, 8009798 <_strtod_l+0x800>
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	2b01      	cmp	r3, #1
 8009796:	dd5b      	ble.n	8009850 <_strtod_l+0x8b8>
 8009798:	4621      	mov	r1, r4
 800979a:	2201      	movs	r2, #1
 800979c:	9805      	ldr	r0, [sp, #20]
 800979e:	f002 fdc7 	bl	800c330 <__lshift>
 80097a2:	4641      	mov	r1, r8
 80097a4:	4604      	mov	r4, r0
 80097a6:	f002 fe2f 	bl	800c408 <__mcmp>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	dd50      	ble.n	8009850 <_strtod_l+0x8b8>
 80097ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097b2:	9a08      	ldr	r2, [sp, #32]
 80097b4:	0d1b      	lsrs	r3, r3, #20
 80097b6:	051b      	lsls	r3, r3, #20
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	d06a      	beq.n	8009892 <_strtod_l+0x8fa>
 80097bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80097c0:	d867      	bhi.n	8009892 <_strtod_l+0x8fa>
 80097c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80097c6:	f67f ae98 	bls.w	80094fa <_strtod_l+0x562>
 80097ca:	4650      	mov	r0, sl
 80097cc:	4659      	mov	r1, fp
 80097ce:	4b09      	ldr	r3, [pc, #36]	@ (80097f4 <_strtod_l+0x85c>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	f7f6 fe81 	bl	80004d8 <__aeabi_dmul>
 80097d6:	4b08      	ldr	r3, [pc, #32]	@ (80097f8 <_strtod_l+0x860>)
 80097d8:	4682      	mov	sl, r0
 80097da:	400b      	ands	r3, r1
 80097dc:	468b      	mov	fp, r1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f47f ae00 	bne.w	80093e4 <_strtod_l+0x44c>
 80097e4:	2322      	movs	r3, #34	@ 0x22
 80097e6:	9a05      	ldr	r2, [sp, #20]
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	e5fb      	b.n	80093e4 <_strtod_l+0x44c>
 80097ec:	0800ea30 	.word	0x0800ea30
 80097f0:	fffffc02 	.word	0xfffffc02
 80097f4:	39500000 	.word	0x39500000
 80097f8:	7ff00000 	.word	0x7ff00000
 80097fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009800:	d165      	bne.n	80098ce <_strtod_l+0x936>
 8009802:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009808:	b35a      	cbz	r2, 8009862 <_strtod_l+0x8ca>
 800980a:	4a99      	ldr	r2, [pc, #612]	@ (8009a70 <_strtod_l+0xad8>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d12b      	bne.n	8009868 <_strtod_l+0x8d0>
 8009810:	9b08      	ldr	r3, [sp, #32]
 8009812:	4651      	mov	r1, sl
 8009814:	b303      	cbz	r3, 8009858 <_strtod_l+0x8c0>
 8009816:	465a      	mov	r2, fp
 8009818:	4b96      	ldr	r3, [pc, #600]	@ (8009a74 <_strtod_l+0xadc>)
 800981a:	4013      	ands	r3, r2
 800981c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009820:	f04f 32ff 	mov.w	r2, #4294967295
 8009824:	d81b      	bhi.n	800985e <_strtod_l+0x8c6>
 8009826:	0d1b      	lsrs	r3, r3, #20
 8009828:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800982c:	fa02 f303 	lsl.w	r3, r2, r3
 8009830:	4299      	cmp	r1, r3
 8009832:	d119      	bne.n	8009868 <_strtod_l+0x8d0>
 8009834:	4b90      	ldr	r3, [pc, #576]	@ (8009a78 <_strtod_l+0xae0>)
 8009836:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009838:	429a      	cmp	r2, r3
 800983a:	d102      	bne.n	8009842 <_strtod_l+0x8aa>
 800983c:	3101      	adds	r1, #1
 800983e:	f43f adc6 	beq.w	80093ce <_strtod_l+0x436>
 8009842:	f04f 0a00 	mov.w	sl, #0
 8009846:	4b8b      	ldr	r3, [pc, #556]	@ (8009a74 <_strtod_l+0xadc>)
 8009848:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800984a:	401a      	ands	r2, r3
 800984c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009850:	9b08      	ldr	r3, [sp, #32]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1b9      	bne.n	80097ca <_strtod_l+0x832>
 8009856:	e5c5      	b.n	80093e4 <_strtod_l+0x44c>
 8009858:	f04f 33ff 	mov.w	r3, #4294967295
 800985c:	e7e8      	b.n	8009830 <_strtod_l+0x898>
 800985e:	4613      	mov	r3, r2
 8009860:	e7e6      	b.n	8009830 <_strtod_l+0x898>
 8009862:	ea53 030a 	orrs.w	r3, r3, sl
 8009866:	d0a2      	beq.n	80097ae <_strtod_l+0x816>
 8009868:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800986a:	b1db      	cbz	r3, 80098a4 <_strtod_l+0x90c>
 800986c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800986e:	4213      	tst	r3, r2
 8009870:	d0ee      	beq.n	8009850 <_strtod_l+0x8b8>
 8009872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009874:	4650      	mov	r0, sl
 8009876:	4659      	mov	r1, fp
 8009878:	9a08      	ldr	r2, [sp, #32]
 800987a:	b1bb      	cbz	r3, 80098ac <_strtod_l+0x914>
 800987c:	f7ff fb69 	bl	8008f52 <sulp>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009888:	f7f6 fc70 	bl	800016c <__adddf3>
 800988c:	4682      	mov	sl, r0
 800988e:	468b      	mov	fp, r1
 8009890:	e7de      	b.n	8009850 <_strtod_l+0x8b8>
 8009892:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009896:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800989a:	f04f 3aff 	mov.w	sl, #4294967295
 800989e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80098a2:	e7d5      	b.n	8009850 <_strtod_l+0x8b8>
 80098a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098a6:	ea13 0f0a 	tst.w	r3, sl
 80098aa:	e7e1      	b.n	8009870 <_strtod_l+0x8d8>
 80098ac:	f7ff fb51 	bl	8008f52 <sulp>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098b8:	f7f6 fc56 	bl	8000168 <__aeabi_dsub>
 80098bc:	2200      	movs	r2, #0
 80098be:	2300      	movs	r3, #0
 80098c0:	4682      	mov	sl, r0
 80098c2:	468b      	mov	fp, r1
 80098c4:	f7f7 f870 	bl	80009a8 <__aeabi_dcmpeq>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d0c1      	beq.n	8009850 <_strtod_l+0x8b8>
 80098cc:	e615      	b.n	80094fa <_strtod_l+0x562>
 80098ce:	4641      	mov	r1, r8
 80098d0:	4620      	mov	r0, r4
 80098d2:	f002 ff09 	bl	800c6e8 <__ratio>
 80098d6:	2200      	movs	r2, #0
 80098d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80098dc:	4606      	mov	r6, r0
 80098de:	460f      	mov	r7, r1
 80098e0:	f7f7 f876 	bl	80009d0 <__aeabi_dcmple>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d06d      	beq.n	80099c4 <_strtod_l+0xa2c>
 80098e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d178      	bne.n	80099e0 <_strtod_l+0xa48>
 80098ee:	f1ba 0f00 	cmp.w	sl, #0
 80098f2:	d156      	bne.n	80099a2 <_strtod_l+0xa0a>
 80098f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d158      	bne.n	80099b0 <_strtod_l+0xa18>
 80098fe:	2200      	movs	r2, #0
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	4b5d      	ldr	r3, [pc, #372]	@ (8009a7c <_strtod_l+0xae4>)
 8009906:	f7f7 f859 	bl	80009bc <__aeabi_dcmplt>
 800990a:	2800      	cmp	r0, #0
 800990c:	d157      	bne.n	80099be <_strtod_l+0xa26>
 800990e:	4630      	mov	r0, r6
 8009910:	4639      	mov	r1, r7
 8009912:	2200      	movs	r2, #0
 8009914:	4b5a      	ldr	r3, [pc, #360]	@ (8009a80 <_strtod_l+0xae8>)
 8009916:	f7f6 fddf 	bl	80004d8 <__aeabi_dmul>
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009922:	9606      	str	r6, [sp, #24]
 8009924:	9307      	str	r3, [sp, #28]
 8009926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800992a:	4d52      	ldr	r5, [pc, #328]	@ (8009a74 <_strtod_l+0xadc>)
 800992c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009932:	401d      	ands	r5, r3
 8009934:	4b53      	ldr	r3, [pc, #332]	@ (8009a84 <_strtod_l+0xaec>)
 8009936:	429d      	cmp	r5, r3
 8009938:	f040 80aa 	bne.w	8009a90 <_strtod_l+0xaf8>
 800993c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800993e:	4650      	mov	r0, sl
 8009940:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009944:	4659      	mov	r1, fp
 8009946:	f002 fe0f 	bl	800c568 <__ulp>
 800994a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800994e:	f7f6 fdc3 	bl	80004d8 <__aeabi_dmul>
 8009952:	4652      	mov	r2, sl
 8009954:	465b      	mov	r3, fp
 8009956:	f7f6 fc09 	bl	800016c <__adddf3>
 800995a:	460b      	mov	r3, r1
 800995c:	4945      	ldr	r1, [pc, #276]	@ (8009a74 <_strtod_l+0xadc>)
 800995e:	4a4a      	ldr	r2, [pc, #296]	@ (8009a88 <_strtod_l+0xaf0>)
 8009960:	4019      	ands	r1, r3
 8009962:	4291      	cmp	r1, r2
 8009964:	4682      	mov	sl, r0
 8009966:	d942      	bls.n	80099ee <_strtod_l+0xa56>
 8009968:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800996a:	4b43      	ldr	r3, [pc, #268]	@ (8009a78 <_strtod_l+0xae0>)
 800996c:	429a      	cmp	r2, r3
 800996e:	d103      	bne.n	8009978 <_strtod_l+0x9e0>
 8009970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009972:	3301      	adds	r3, #1
 8009974:	f43f ad2b 	beq.w	80093ce <_strtod_l+0x436>
 8009978:	f04f 3aff 	mov.w	sl, #4294967295
 800997c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009a78 <_strtod_l+0xae0>
 8009980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009982:	9805      	ldr	r0, [sp, #20]
 8009984:	f002 fabe 	bl	800bf04 <_Bfree>
 8009988:	4649      	mov	r1, r9
 800998a:	9805      	ldr	r0, [sp, #20]
 800998c:	f002 faba 	bl	800bf04 <_Bfree>
 8009990:	4641      	mov	r1, r8
 8009992:	9805      	ldr	r0, [sp, #20]
 8009994:	f002 fab6 	bl	800bf04 <_Bfree>
 8009998:	4621      	mov	r1, r4
 800999a:	9805      	ldr	r0, [sp, #20]
 800999c:	f002 fab2 	bl	800bf04 <_Bfree>
 80099a0:	e618      	b.n	80095d4 <_strtod_l+0x63c>
 80099a2:	f1ba 0f01 	cmp.w	sl, #1
 80099a6:	d103      	bne.n	80099b0 <_strtod_l+0xa18>
 80099a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f43f ada5 	beq.w	80094fa <_strtod_l+0x562>
 80099b0:	2200      	movs	r2, #0
 80099b2:	4b36      	ldr	r3, [pc, #216]	@ (8009a8c <_strtod_l+0xaf4>)
 80099b4:	2600      	movs	r6, #0
 80099b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80099ba:	4f30      	ldr	r7, [pc, #192]	@ (8009a7c <_strtod_l+0xae4>)
 80099bc:	e7b3      	b.n	8009926 <_strtod_l+0x98e>
 80099be:	2600      	movs	r6, #0
 80099c0:	4f2f      	ldr	r7, [pc, #188]	@ (8009a80 <_strtod_l+0xae8>)
 80099c2:	e7ac      	b.n	800991e <_strtod_l+0x986>
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009a80 <_strtod_l+0xae8>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	f7f6 fd84 	bl	80004d8 <__aeabi_dmul>
 80099d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d0a1      	beq.n	800991e <_strtod_l+0x986>
 80099da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80099de:	e7a2      	b.n	8009926 <_strtod_l+0x98e>
 80099e0:	2200      	movs	r2, #0
 80099e2:	4b26      	ldr	r3, [pc, #152]	@ (8009a7c <_strtod_l+0xae4>)
 80099e4:	4616      	mov	r6, r2
 80099e6:	461f      	mov	r7, r3
 80099e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80099ec:	e79b      	b.n	8009926 <_strtod_l+0x98e>
 80099ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80099f2:	9b08      	ldr	r3, [sp, #32]
 80099f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1c1      	bne.n	8009980 <_strtod_l+0x9e8>
 80099fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a00:	0d1b      	lsrs	r3, r3, #20
 8009a02:	051b      	lsls	r3, r3, #20
 8009a04:	429d      	cmp	r5, r3
 8009a06:	d1bb      	bne.n	8009980 <_strtod_l+0x9e8>
 8009a08:	4630      	mov	r0, r6
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	f7f7 fb50 	bl	80010b0 <__aeabi_d2lz>
 8009a10:	f7f6 fd34 	bl	800047c <__aeabi_l2d>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4630      	mov	r0, r6
 8009a1a:	4639      	mov	r1, r7
 8009a1c:	f7f6 fba4 	bl	8000168 <__aeabi_dsub>
 8009a20:	460b      	mov	r3, r1
 8009a22:	4602      	mov	r2, r0
 8009a24:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009a28:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a2e:	ea46 060a 	orr.w	r6, r6, sl
 8009a32:	431e      	orrs	r6, r3
 8009a34:	d069      	beq.n	8009b0a <_strtod_l+0xb72>
 8009a36:	a30a      	add	r3, pc, #40	@ (adr r3, 8009a60 <_strtod_l+0xac8>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f7f6 ffbe 	bl	80009bc <__aeabi_dcmplt>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f47f accf 	bne.w	80093e4 <_strtod_l+0x44c>
 8009a46:	a308      	add	r3, pc, #32	@ (adr r3, 8009a68 <_strtod_l+0xad0>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a50:	f7f6 ffd2 	bl	80009f8 <__aeabi_dcmpgt>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d093      	beq.n	8009980 <_strtod_l+0x9e8>
 8009a58:	e4c4      	b.n	80093e4 <_strtod_l+0x44c>
 8009a5a:	bf00      	nop
 8009a5c:	f3af 8000 	nop.w
 8009a60:	94a03595 	.word	0x94a03595
 8009a64:	3fdfffff 	.word	0x3fdfffff
 8009a68:	35afe535 	.word	0x35afe535
 8009a6c:	3fe00000 	.word	0x3fe00000
 8009a70:	000fffff 	.word	0x000fffff
 8009a74:	7ff00000 	.word	0x7ff00000
 8009a78:	7fefffff 	.word	0x7fefffff
 8009a7c:	3ff00000 	.word	0x3ff00000
 8009a80:	3fe00000 	.word	0x3fe00000
 8009a84:	7fe00000 	.word	0x7fe00000
 8009a88:	7c9fffff 	.word	0x7c9fffff
 8009a8c:	bff00000 	.word	0xbff00000
 8009a90:	9b08      	ldr	r3, [sp, #32]
 8009a92:	b323      	cbz	r3, 8009ade <_strtod_l+0xb46>
 8009a94:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009a98:	d821      	bhi.n	8009ade <_strtod_l+0xb46>
 8009a9a:	a327      	add	r3, pc, #156	@ (adr r3, 8009b38 <_strtod_l+0xba0>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	f7f6 ff94 	bl	80009d0 <__aeabi_dcmple>
 8009aa8:	b1a0      	cbz	r0, 8009ad4 <_strtod_l+0xb3c>
 8009aaa:	4639      	mov	r1, r7
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7f6 ffeb 	bl	8000a88 <__aeabi_d2uiz>
 8009ab2:	2801      	cmp	r0, #1
 8009ab4:	bf38      	it	cc
 8009ab6:	2001      	movcc	r0, #1
 8009ab8:	f7f6 fc94 	bl	80003e4 <__aeabi_ui2d>
 8009abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009abe:	4606      	mov	r6, r0
 8009ac0:	460f      	mov	r7, r1
 8009ac2:	b9fb      	cbnz	r3, 8009b04 <_strtod_l+0xb6c>
 8009ac4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ac8:	9014      	str	r0, [sp, #80]	@ 0x50
 8009aca:	9315      	str	r3, [sp, #84]	@ 0x54
 8009acc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009ad0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ad4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ad6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009ada:	1b5b      	subs	r3, r3, r5
 8009adc:	9311      	str	r3, [sp, #68]	@ 0x44
 8009ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ae2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009ae6:	f002 fd3f 	bl	800c568 <__ulp>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	4650      	mov	r0, sl
 8009af0:	4659      	mov	r1, fp
 8009af2:	f7f6 fcf1 	bl	80004d8 <__aeabi_dmul>
 8009af6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009afa:	f7f6 fb37 	bl	800016c <__adddf3>
 8009afe:	4682      	mov	sl, r0
 8009b00:	468b      	mov	fp, r1
 8009b02:	e776      	b.n	80099f2 <_strtod_l+0xa5a>
 8009b04:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009b08:	e7e0      	b.n	8009acc <_strtod_l+0xb34>
 8009b0a:	a30d      	add	r3, pc, #52	@ (adr r3, 8009b40 <_strtod_l+0xba8>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f7f6 ff54 	bl	80009bc <__aeabi_dcmplt>
 8009b14:	e79e      	b.n	8009a54 <_strtod_l+0xabc>
 8009b16:	2300      	movs	r3, #0
 8009b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b1c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	f7ff ba77 	b.w	8009012 <_strtod_l+0x7a>
 8009b24:	2a65      	cmp	r2, #101	@ 0x65
 8009b26:	f43f ab6e 	beq.w	8009206 <_strtod_l+0x26e>
 8009b2a:	2a45      	cmp	r2, #69	@ 0x45
 8009b2c:	f43f ab6b 	beq.w	8009206 <_strtod_l+0x26e>
 8009b30:	2301      	movs	r3, #1
 8009b32:	f7ff bba6 	b.w	8009282 <_strtod_l+0x2ea>
 8009b36:	bf00      	nop
 8009b38:	ffc00000 	.word	0xffc00000
 8009b3c:	41dfffff 	.word	0x41dfffff
 8009b40:	94a03595 	.word	0x94a03595
 8009b44:	3fcfffff 	.word	0x3fcfffff

08009b48 <strtod>:
 8009b48:	460a      	mov	r2, r1
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	4802      	ldr	r0, [pc, #8]	@ (8009b58 <strtod+0x10>)
 8009b4e:	4b03      	ldr	r3, [pc, #12]	@ (8009b5c <strtod+0x14>)
 8009b50:	6800      	ldr	r0, [r0, #0]
 8009b52:	f7ff ba21 	b.w	8008f98 <_strtod_l>
 8009b56:	bf00      	nop
 8009b58:	20000184 	.word	0x20000184
 8009b5c:	20000018 	.word	0x20000018

08009b60 <_strtol_l.constprop.0>:
 8009b60:	2b24      	cmp	r3, #36	@ 0x24
 8009b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b66:	4686      	mov	lr, r0
 8009b68:	4690      	mov	r8, r2
 8009b6a:	d801      	bhi.n	8009b70 <_strtol_l.constprop.0+0x10>
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d106      	bne.n	8009b7e <_strtol_l.constprop.0+0x1e>
 8009b70:	f000 fe9e 	bl	800a8b0 <__errno>
 8009b74:	2316      	movs	r3, #22
 8009b76:	6003      	str	r3, [r0, #0]
 8009b78:	2000      	movs	r0, #0
 8009b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b7e:	460d      	mov	r5, r1
 8009b80:	4833      	ldr	r0, [pc, #204]	@ (8009c50 <_strtol_l.constprop.0+0xf0>)
 8009b82:	462a      	mov	r2, r5
 8009b84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b88:	5d06      	ldrb	r6, [r0, r4]
 8009b8a:	f016 0608 	ands.w	r6, r6, #8
 8009b8e:	d1f8      	bne.n	8009b82 <_strtol_l.constprop.0+0x22>
 8009b90:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b92:	d12d      	bne.n	8009bf0 <_strtol_l.constprop.0+0x90>
 8009b94:	2601      	movs	r6, #1
 8009b96:	782c      	ldrb	r4, [r5, #0]
 8009b98:	1c95      	adds	r5, r2, #2
 8009b9a:	f033 0210 	bics.w	r2, r3, #16
 8009b9e:	d109      	bne.n	8009bb4 <_strtol_l.constprop.0+0x54>
 8009ba0:	2c30      	cmp	r4, #48	@ 0x30
 8009ba2:	d12a      	bne.n	8009bfa <_strtol_l.constprop.0+0x9a>
 8009ba4:	782a      	ldrb	r2, [r5, #0]
 8009ba6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009baa:	2a58      	cmp	r2, #88	@ 0x58
 8009bac:	d125      	bne.n	8009bfa <_strtol_l.constprop.0+0x9a>
 8009bae:	2310      	movs	r3, #16
 8009bb0:	786c      	ldrb	r4, [r5, #1]
 8009bb2:	3502      	adds	r5, #2
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009bba:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009bbe:	fbbc f9f3 	udiv	r9, ip, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	fb03 ca19 	mls	sl, r3, r9, ip
 8009bc8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009bcc:	2f09      	cmp	r7, #9
 8009bce:	d81b      	bhi.n	8009c08 <_strtol_l.constprop.0+0xa8>
 8009bd0:	463c      	mov	r4, r7
 8009bd2:	42a3      	cmp	r3, r4
 8009bd4:	dd27      	ble.n	8009c26 <_strtol_l.constprop.0+0xc6>
 8009bd6:	1c57      	adds	r7, r2, #1
 8009bd8:	d007      	beq.n	8009bea <_strtol_l.constprop.0+0x8a>
 8009bda:	4581      	cmp	r9, r0
 8009bdc:	d320      	bcc.n	8009c20 <_strtol_l.constprop.0+0xc0>
 8009bde:	d101      	bne.n	8009be4 <_strtol_l.constprop.0+0x84>
 8009be0:	45a2      	cmp	sl, r4
 8009be2:	db1d      	blt.n	8009c20 <_strtol_l.constprop.0+0xc0>
 8009be4:	2201      	movs	r2, #1
 8009be6:	fb00 4003 	mla	r0, r0, r3, r4
 8009bea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bee:	e7eb      	b.n	8009bc8 <_strtol_l.constprop.0+0x68>
 8009bf0:	2c2b      	cmp	r4, #43	@ 0x2b
 8009bf2:	bf04      	itt	eq
 8009bf4:	782c      	ldrbeq	r4, [r5, #0]
 8009bf6:	1c95      	addeq	r5, r2, #2
 8009bf8:	e7cf      	b.n	8009b9a <_strtol_l.constprop.0+0x3a>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1da      	bne.n	8009bb4 <_strtol_l.constprop.0+0x54>
 8009bfe:	2c30      	cmp	r4, #48	@ 0x30
 8009c00:	bf0c      	ite	eq
 8009c02:	2308      	moveq	r3, #8
 8009c04:	230a      	movne	r3, #10
 8009c06:	e7d5      	b.n	8009bb4 <_strtol_l.constprop.0+0x54>
 8009c08:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c0c:	2f19      	cmp	r7, #25
 8009c0e:	d801      	bhi.n	8009c14 <_strtol_l.constprop.0+0xb4>
 8009c10:	3c37      	subs	r4, #55	@ 0x37
 8009c12:	e7de      	b.n	8009bd2 <_strtol_l.constprop.0+0x72>
 8009c14:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c18:	2f19      	cmp	r7, #25
 8009c1a:	d804      	bhi.n	8009c26 <_strtol_l.constprop.0+0xc6>
 8009c1c:	3c57      	subs	r4, #87	@ 0x57
 8009c1e:	e7d8      	b.n	8009bd2 <_strtol_l.constprop.0+0x72>
 8009c20:	f04f 32ff 	mov.w	r2, #4294967295
 8009c24:	e7e1      	b.n	8009bea <_strtol_l.constprop.0+0x8a>
 8009c26:	1c53      	adds	r3, r2, #1
 8009c28:	d108      	bne.n	8009c3c <_strtol_l.constprop.0+0xdc>
 8009c2a:	2322      	movs	r3, #34	@ 0x22
 8009c2c:	4660      	mov	r0, ip
 8009c2e:	f8ce 3000 	str.w	r3, [lr]
 8009c32:	f1b8 0f00 	cmp.w	r8, #0
 8009c36:	d0a0      	beq.n	8009b7a <_strtol_l.constprop.0+0x1a>
 8009c38:	1e69      	subs	r1, r5, #1
 8009c3a:	e006      	b.n	8009c4a <_strtol_l.constprop.0+0xea>
 8009c3c:	b106      	cbz	r6, 8009c40 <_strtol_l.constprop.0+0xe0>
 8009c3e:	4240      	negs	r0, r0
 8009c40:	f1b8 0f00 	cmp.w	r8, #0
 8009c44:	d099      	beq.n	8009b7a <_strtol_l.constprop.0+0x1a>
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	d1f6      	bne.n	8009c38 <_strtol_l.constprop.0+0xd8>
 8009c4a:	f8c8 1000 	str.w	r1, [r8]
 8009c4e:	e794      	b.n	8009b7a <_strtol_l.constprop.0+0x1a>
 8009c50:	0800ea59 	.word	0x0800ea59

08009c54 <strtol>:
 8009c54:	4613      	mov	r3, r2
 8009c56:	460a      	mov	r2, r1
 8009c58:	4601      	mov	r1, r0
 8009c5a:	4802      	ldr	r0, [pc, #8]	@ (8009c64 <strtol+0x10>)
 8009c5c:	6800      	ldr	r0, [r0, #0]
 8009c5e:	f7ff bf7f 	b.w	8009b60 <_strtol_l.constprop.0>
 8009c62:	bf00      	nop
 8009c64:	20000184 	.word	0x20000184

08009c68 <__cvt>:
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c6e:	461d      	mov	r5, r3
 8009c70:	bfbb      	ittet	lt
 8009c72:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009c76:	461d      	movlt	r5, r3
 8009c78:	2300      	movge	r3, #0
 8009c7a:	232d      	movlt	r3, #45	@ 0x2d
 8009c7c:	b088      	sub	sp, #32
 8009c7e:	4614      	mov	r4, r2
 8009c80:	bfb8      	it	lt
 8009c82:	4614      	movlt	r4, r2
 8009c84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c86:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009c88:	7013      	strb	r3, [r2, #0]
 8009c8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009c90:	f023 0820 	bic.w	r8, r3, #32
 8009c94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c98:	d005      	beq.n	8009ca6 <__cvt+0x3e>
 8009c9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009c9e:	d100      	bne.n	8009ca2 <__cvt+0x3a>
 8009ca0:	3601      	adds	r6, #1
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e000      	b.n	8009ca8 <__cvt+0x40>
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	aa07      	add	r2, sp, #28
 8009caa:	9204      	str	r2, [sp, #16]
 8009cac:	aa06      	add	r2, sp, #24
 8009cae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009cb2:	e9cd 3600 	strd	r3, r6, [sp]
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	462b      	mov	r3, r5
 8009cba:	f000 fed1 	bl	800aa60 <_dtoa_r>
 8009cbe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009cc2:	4607      	mov	r7, r0
 8009cc4:	d119      	bne.n	8009cfa <__cvt+0x92>
 8009cc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009cc8:	07db      	lsls	r3, r3, #31
 8009cca:	d50e      	bpl.n	8009cea <__cvt+0x82>
 8009ccc:	eb00 0906 	add.w	r9, r0, r6
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f6 fe66 	bl	80009a8 <__aeabi_dcmpeq>
 8009cdc:	b108      	cbz	r0, 8009ce2 <__cvt+0x7a>
 8009cde:	f8cd 901c 	str.w	r9, [sp, #28]
 8009ce2:	2230      	movs	r2, #48	@ 0x30
 8009ce4:	9b07      	ldr	r3, [sp, #28]
 8009ce6:	454b      	cmp	r3, r9
 8009ce8:	d31e      	bcc.n	8009d28 <__cvt+0xc0>
 8009cea:	4638      	mov	r0, r7
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009cf0:	1bdb      	subs	r3, r3, r7
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	b008      	add	sp, #32
 8009cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cfe:	eb00 0906 	add.w	r9, r0, r6
 8009d02:	d1e5      	bne.n	8009cd0 <__cvt+0x68>
 8009d04:	7803      	ldrb	r3, [r0, #0]
 8009d06:	2b30      	cmp	r3, #48	@ 0x30
 8009d08:	d10a      	bne.n	8009d20 <__cvt+0xb8>
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4629      	mov	r1, r5
 8009d12:	f7f6 fe49 	bl	80009a8 <__aeabi_dcmpeq>
 8009d16:	b918      	cbnz	r0, 8009d20 <__cvt+0xb8>
 8009d18:	f1c6 0601 	rsb	r6, r6, #1
 8009d1c:	f8ca 6000 	str.w	r6, [sl]
 8009d20:	f8da 3000 	ldr.w	r3, [sl]
 8009d24:	4499      	add	r9, r3
 8009d26:	e7d3      	b.n	8009cd0 <__cvt+0x68>
 8009d28:	1c59      	adds	r1, r3, #1
 8009d2a:	9107      	str	r1, [sp, #28]
 8009d2c:	701a      	strb	r2, [r3, #0]
 8009d2e:	e7d9      	b.n	8009ce4 <__cvt+0x7c>

08009d30 <__exponent>:
 8009d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d32:	2900      	cmp	r1, #0
 8009d34:	bfb6      	itet	lt
 8009d36:	232d      	movlt	r3, #45	@ 0x2d
 8009d38:	232b      	movge	r3, #43	@ 0x2b
 8009d3a:	4249      	neglt	r1, r1
 8009d3c:	2909      	cmp	r1, #9
 8009d3e:	7002      	strb	r2, [r0, #0]
 8009d40:	7043      	strb	r3, [r0, #1]
 8009d42:	dd29      	ble.n	8009d98 <__exponent+0x68>
 8009d44:	f10d 0307 	add.w	r3, sp, #7
 8009d48:	461d      	mov	r5, r3
 8009d4a:	270a      	movs	r7, #10
 8009d4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d50:	461a      	mov	r2, r3
 8009d52:	fb07 1416 	mls	r4, r7, r6, r1
 8009d56:	3430      	adds	r4, #48	@ 0x30
 8009d58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	2c63      	cmp	r4, #99	@ 0x63
 8009d60:	4631      	mov	r1, r6
 8009d62:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d66:	dcf1      	bgt.n	8009d4c <__exponent+0x1c>
 8009d68:	3130      	adds	r1, #48	@ 0x30
 8009d6a:	1e94      	subs	r4, r2, #2
 8009d6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d70:	4623      	mov	r3, r4
 8009d72:	1c41      	adds	r1, r0, #1
 8009d74:	42ab      	cmp	r3, r5
 8009d76:	d30a      	bcc.n	8009d8e <__exponent+0x5e>
 8009d78:	f10d 0309 	add.w	r3, sp, #9
 8009d7c:	1a9b      	subs	r3, r3, r2
 8009d7e:	42ac      	cmp	r4, r5
 8009d80:	bf88      	it	hi
 8009d82:	2300      	movhi	r3, #0
 8009d84:	3302      	adds	r3, #2
 8009d86:	4403      	add	r3, r0
 8009d88:	1a18      	subs	r0, r3, r0
 8009d8a:	b003      	add	sp, #12
 8009d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d96:	e7ed      	b.n	8009d74 <__exponent+0x44>
 8009d98:	2330      	movs	r3, #48	@ 0x30
 8009d9a:	3130      	adds	r1, #48	@ 0x30
 8009d9c:	7083      	strb	r3, [r0, #2]
 8009d9e:	70c1      	strb	r1, [r0, #3]
 8009da0:	1d03      	adds	r3, r0, #4
 8009da2:	e7f1      	b.n	8009d88 <__exponent+0x58>

08009da4 <_printf_float>:
 8009da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da8:	b091      	sub	sp, #68	@ 0x44
 8009daa:	460c      	mov	r4, r1
 8009dac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009db0:	4616      	mov	r6, r2
 8009db2:	461f      	mov	r7, r3
 8009db4:	4605      	mov	r5, r0
 8009db6:	f000 fd31 	bl	800a81c <_localeconv_r>
 8009dba:	6803      	ldr	r3, [r0, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	9308      	str	r3, [sp, #32]
 8009dc0:	f7f6 f9c6 	bl	8000150 <strlen>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	930e      	str	r3, [sp, #56]	@ 0x38
 8009dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dcc:	9009      	str	r0, [sp, #36]	@ 0x24
 8009dce:	3307      	adds	r3, #7
 8009dd0:	f023 0307 	bic.w	r3, r3, #7
 8009dd4:	f103 0208 	add.w	r2, r3, #8
 8009dd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ddc:	f8d4 b000 	ldr.w	fp, [r4]
 8009de0:	f8c8 2000 	str.w	r2, [r8]
 8009de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009de8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009dec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009df2:	f04f 32ff 	mov.w	r2, #4294967295
 8009df6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009dfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009dfe:	4b9c      	ldr	r3, [pc, #624]	@ (800a070 <_printf_float+0x2cc>)
 8009e00:	f7f6 fe04 	bl	8000a0c <__aeabi_dcmpun>
 8009e04:	bb70      	cbnz	r0, 8009e64 <_printf_float+0xc0>
 8009e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	4b98      	ldr	r3, [pc, #608]	@ (800a070 <_printf_float+0x2cc>)
 8009e10:	f7f6 fdde 	bl	80009d0 <__aeabi_dcmple>
 8009e14:	bb30      	cbnz	r0, 8009e64 <_printf_float+0xc0>
 8009e16:	2200      	movs	r2, #0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	f7f6 fdcd 	bl	80009bc <__aeabi_dcmplt>
 8009e22:	b110      	cbz	r0, 8009e2a <_printf_float+0x86>
 8009e24:	232d      	movs	r3, #45	@ 0x2d
 8009e26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e2a:	4a92      	ldr	r2, [pc, #584]	@ (800a074 <_printf_float+0x2d0>)
 8009e2c:	4b92      	ldr	r3, [pc, #584]	@ (800a078 <_printf_float+0x2d4>)
 8009e2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e32:	bf94      	ite	ls
 8009e34:	4690      	movls	r8, r2
 8009e36:	4698      	movhi	r8, r3
 8009e38:	2303      	movs	r3, #3
 8009e3a:	f04f 0900 	mov.w	r9, #0
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	f02b 0304 	bic.w	r3, fp, #4
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	4633      	mov	r3, r6
 8009e48:	4621      	mov	r1, r4
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	9700      	str	r7, [sp, #0]
 8009e4e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009e50:	f000 f9d4 	bl	800a1fc <_printf_common>
 8009e54:	3001      	adds	r0, #1
 8009e56:	f040 8090 	bne.w	8009f7a <_printf_float+0x1d6>
 8009e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5e:	b011      	add	sp, #68	@ 0x44
 8009e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	4642      	mov	r2, r8
 8009e66:	464b      	mov	r3, r9
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fdce 	bl	8000a0c <__aeabi_dcmpun>
 8009e70:	b148      	cbz	r0, 8009e86 <_printf_float+0xe2>
 8009e72:	464b      	mov	r3, r9
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bfb8      	it	lt
 8009e78:	232d      	movlt	r3, #45	@ 0x2d
 8009e7a:	4a80      	ldr	r2, [pc, #512]	@ (800a07c <_printf_float+0x2d8>)
 8009e7c:	bfb8      	it	lt
 8009e7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e82:	4b7f      	ldr	r3, [pc, #508]	@ (800a080 <_printf_float+0x2dc>)
 8009e84:	e7d3      	b.n	8009e2e <_printf_float+0x8a>
 8009e86:	6863      	ldr	r3, [r4, #4]
 8009e88:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	d13f      	bne.n	8009f10 <_printf_float+0x16c>
 8009e90:	2306      	movs	r3, #6
 8009e92:	6063      	str	r3, [r4, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	9206      	str	r2, [sp, #24]
 8009e9e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009ea0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009ea4:	aa0d      	add	r2, sp, #52	@ 0x34
 8009ea6:	9203      	str	r2, [sp, #12]
 8009ea8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009eac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009eb0:	6863      	ldr	r3, [r4, #4]
 8009eb2:	4642      	mov	r2, r8
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	464b      	mov	r3, r9
 8009eba:	910a      	str	r1, [sp, #40]	@ 0x28
 8009ebc:	f7ff fed4 	bl	8009c68 <__cvt>
 8009ec0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	2947      	cmp	r1, #71	@ 0x47
 8009ec6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009ec8:	d128      	bne.n	8009f1c <_printf_float+0x178>
 8009eca:	1cc8      	adds	r0, r1, #3
 8009ecc:	db02      	blt.n	8009ed4 <_printf_float+0x130>
 8009ece:	6863      	ldr	r3, [r4, #4]
 8009ed0:	4299      	cmp	r1, r3
 8009ed2:	dd40      	ble.n	8009f56 <_printf_float+0x1b2>
 8009ed4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ed8:	fa5f fa8a 	uxtb.w	sl, sl
 8009edc:	4652      	mov	r2, sl
 8009ede:	3901      	subs	r1, #1
 8009ee0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ee4:	910d      	str	r1, [sp, #52]	@ 0x34
 8009ee6:	f7ff ff23 	bl	8009d30 <__exponent>
 8009eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009eec:	4681      	mov	r9, r0
 8009eee:	1813      	adds	r3, r2, r0
 8009ef0:	2a01      	cmp	r2, #1
 8009ef2:	6123      	str	r3, [r4, #16]
 8009ef4:	dc02      	bgt.n	8009efc <_printf_float+0x158>
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	07d2      	lsls	r2, r2, #31
 8009efa:	d501      	bpl.n	8009f00 <_printf_float+0x15c>
 8009efc:	3301      	adds	r3, #1
 8009efe:	6123      	str	r3, [r4, #16]
 8009f00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d09e      	beq.n	8009e46 <_printf_float+0xa2>
 8009f08:	232d      	movs	r3, #45	@ 0x2d
 8009f0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f0e:	e79a      	b.n	8009e46 <_printf_float+0xa2>
 8009f10:	2947      	cmp	r1, #71	@ 0x47
 8009f12:	d1bf      	bne.n	8009e94 <_printf_float+0xf0>
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1bd      	bne.n	8009e94 <_printf_float+0xf0>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e7ba      	b.n	8009e92 <_printf_float+0xee>
 8009f1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f20:	d9dc      	bls.n	8009edc <_printf_float+0x138>
 8009f22:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f26:	d118      	bne.n	8009f5a <_printf_float+0x1b6>
 8009f28:	2900      	cmp	r1, #0
 8009f2a:	6863      	ldr	r3, [r4, #4]
 8009f2c:	dd0b      	ble.n	8009f46 <_printf_float+0x1a2>
 8009f2e:	6121      	str	r1, [r4, #16]
 8009f30:	b913      	cbnz	r3, 8009f38 <_printf_float+0x194>
 8009f32:	6822      	ldr	r2, [r4, #0]
 8009f34:	07d0      	lsls	r0, r2, #31
 8009f36:	d502      	bpl.n	8009f3e <_printf_float+0x19a>
 8009f38:	3301      	adds	r3, #1
 8009f3a:	440b      	add	r3, r1
 8009f3c:	6123      	str	r3, [r4, #16]
 8009f3e:	f04f 0900 	mov.w	r9, #0
 8009f42:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f44:	e7dc      	b.n	8009f00 <_printf_float+0x15c>
 8009f46:	b913      	cbnz	r3, 8009f4e <_printf_float+0x1aa>
 8009f48:	6822      	ldr	r2, [r4, #0]
 8009f4a:	07d2      	lsls	r2, r2, #31
 8009f4c:	d501      	bpl.n	8009f52 <_printf_float+0x1ae>
 8009f4e:	3302      	adds	r3, #2
 8009f50:	e7f4      	b.n	8009f3c <_printf_float+0x198>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e7f2      	b.n	8009f3c <_printf_float+0x198>
 8009f56:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f5c:	4299      	cmp	r1, r3
 8009f5e:	db05      	blt.n	8009f6c <_printf_float+0x1c8>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	6121      	str	r1, [r4, #16]
 8009f64:	07d8      	lsls	r0, r3, #31
 8009f66:	d5ea      	bpl.n	8009f3e <_printf_float+0x19a>
 8009f68:	1c4b      	adds	r3, r1, #1
 8009f6a:	e7e7      	b.n	8009f3c <_printf_float+0x198>
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	bfcc      	ite	gt
 8009f70:	2201      	movgt	r2, #1
 8009f72:	f1c1 0202 	rsble	r2, r1, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	e7e0      	b.n	8009f3c <_printf_float+0x198>
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	055a      	lsls	r2, r3, #21
 8009f7e:	d407      	bmi.n	8009f90 <_printf_float+0x1ec>
 8009f80:	6923      	ldr	r3, [r4, #16]
 8009f82:	4642      	mov	r2, r8
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	d12b      	bne.n	8009fe6 <_printf_float+0x242>
 8009f8e:	e764      	b.n	8009e5a <_printf_float+0xb6>
 8009f90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f94:	f240 80dc 	bls.w	800a150 <_printf_float+0x3ac>
 8009f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f7f6 fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d033      	beq.n	800a010 <_printf_float+0x26c>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4631      	mov	r1, r6
 8009fac:	4628      	mov	r0, r5
 8009fae:	4a35      	ldr	r2, [pc, #212]	@ (800a084 <_printf_float+0x2e0>)
 8009fb0:	47b8      	blx	r7
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	f43f af51 	beq.w	8009e5a <_printf_float+0xb6>
 8009fb8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009fbc:	4543      	cmp	r3, r8
 8009fbe:	db02      	blt.n	8009fc6 <_printf_float+0x222>
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	07d8      	lsls	r0, r3, #31
 8009fc4:	d50f      	bpl.n	8009fe6 <_printf_float+0x242>
 8009fc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f43f af42 	beq.w	8009e5a <_printf_float+0xb6>
 8009fd6:	f04f 0900 	mov.w	r9, #0
 8009fda:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fde:	f104 0a1a 	add.w	sl, r4, #26
 8009fe2:	45c8      	cmp	r8, r9
 8009fe4:	dc09      	bgt.n	8009ffa <_printf_float+0x256>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	079b      	lsls	r3, r3, #30
 8009fea:	f100 8102 	bmi.w	800a1f2 <_printf_float+0x44e>
 8009fee:	68e0      	ldr	r0, [r4, #12]
 8009ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff2:	4298      	cmp	r0, r3
 8009ff4:	bfb8      	it	lt
 8009ff6:	4618      	movlt	r0, r3
 8009ff8:	e731      	b.n	8009e5e <_printf_float+0xba>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4631      	mov	r1, r6
 800a000:	4628      	mov	r0, r5
 800a002:	47b8      	blx	r7
 800a004:	3001      	adds	r0, #1
 800a006:	f43f af28 	beq.w	8009e5a <_printf_float+0xb6>
 800a00a:	f109 0901 	add.w	r9, r9, #1
 800a00e:	e7e8      	b.n	8009fe2 <_printf_float+0x23e>
 800a010:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a012:	2b00      	cmp	r3, #0
 800a014:	dc38      	bgt.n	800a088 <_printf_float+0x2e4>
 800a016:	2301      	movs	r3, #1
 800a018:	4631      	mov	r1, r6
 800a01a:	4628      	mov	r0, r5
 800a01c:	4a19      	ldr	r2, [pc, #100]	@ (800a084 <_printf_float+0x2e0>)
 800a01e:	47b8      	blx	r7
 800a020:	3001      	adds	r0, #1
 800a022:	f43f af1a 	beq.w	8009e5a <_printf_float+0xb6>
 800a026:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a02a:	ea59 0303 	orrs.w	r3, r9, r3
 800a02e:	d102      	bne.n	800a036 <_printf_float+0x292>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	07d9      	lsls	r1, r3, #31
 800a034:	d5d7      	bpl.n	8009fe6 <_printf_float+0x242>
 800a036:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a03a:	4631      	mov	r1, r6
 800a03c:	4628      	mov	r0, r5
 800a03e:	47b8      	blx	r7
 800a040:	3001      	adds	r0, #1
 800a042:	f43f af0a 	beq.w	8009e5a <_printf_float+0xb6>
 800a046:	f04f 0a00 	mov.w	sl, #0
 800a04a:	f104 0b1a 	add.w	fp, r4, #26
 800a04e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a050:	425b      	negs	r3, r3
 800a052:	4553      	cmp	r3, sl
 800a054:	dc01      	bgt.n	800a05a <_printf_float+0x2b6>
 800a056:	464b      	mov	r3, r9
 800a058:	e793      	b.n	8009f82 <_printf_float+0x1de>
 800a05a:	2301      	movs	r3, #1
 800a05c:	465a      	mov	r2, fp
 800a05e:	4631      	mov	r1, r6
 800a060:	4628      	mov	r0, r5
 800a062:	47b8      	blx	r7
 800a064:	3001      	adds	r0, #1
 800a066:	f43f aef8 	beq.w	8009e5a <_printf_float+0xb6>
 800a06a:	f10a 0a01 	add.w	sl, sl, #1
 800a06e:	e7ee      	b.n	800a04e <_printf_float+0x2aa>
 800a070:	7fefffff 	.word	0x7fefffff
 800a074:	0800eb59 	.word	0x0800eb59
 800a078:	0800eb5d 	.word	0x0800eb5d
 800a07c:	0800eb61 	.word	0x0800eb61
 800a080:	0800eb65 	.word	0x0800eb65
 800a084:	0800eb69 	.word	0x0800eb69
 800a088:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a08a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a08e:	4553      	cmp	r3, sl
 800a090:	bfa8      	it	ge
 800a092:	4653      	movge	r3, sl
 800a094:	2b00      	cmp	r3, #0
 800a096:	4699      	mov	r9, r3
 800a098:	dc36      	bgt.n	800a108 <_printf_float+0x364>
 800a09a:	f04f 0b00 	mov.w	fp, #0
 800a09e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0a2:	f104 021a 	add.w	r2, r4, #26
 800a0a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0aa:	eba3 0309 	sub.w	r3, r3, r9
 800a0ae:	455b      	cmp	r3, fp
 800a0b0:	dc31      	bgt.n	800a116 <_printf_float+0x372>
 800a0b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0b4:	459a      	cmp	sl, r3
 800a0b6:	dc3a      	bgt.n	800a12e <_printf_float+0x38a>
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	07da      	lsls	r2, r3, #31
 800a0bc:	d437      	bmi.n	800a12e <_printf_float+0x38a>
 800a0be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0c0:	ebaa 0903 	sub.w	r9, sl, r3
 800a0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0c6:	ebaa 0303 	sub.w	r3, sl, r3
 800a0ca:	4599      	cmp	r9, r3
 800a0cc:	bfa8      	it	ge
 800a0ce:	4699      	movge	r9, r3
 800a0d0:	f1b9 0f00 	cmp.w	r9, #0
 800a0d4:	dc33      	bgt.n	800a13e <_printf_float+0x39a>
 800a0d6:	f04f 0800 	mov.w	r8, #0
 800a0da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0de:	f104 0b1a 	add.w	fp, r4, #26
 800a0e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a0e8:	eba3 0309 	sub.w	r3, r3, r9
 800a0ec:	4543      	cmp	r3, r8
 800a0ee:	f77f af7a 	ble.w	8009fe6 <_printf_float+0x242>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	465a      	mov	r2, fp
 800a0f6:	4631      	mov	r1, r6
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	47b8      	blx	r7
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	f43f aeac 	beq.w	8009e5a <_printf_float+0xb6>
 800a102:	f108 0801 	add.w	r8, r8, #1
 800a106:	e7ec      	b.n	800a0e2 <_printf_float+0x33e>
 800a108:	4642      	mov	r2, r8
 800a10a:	4631      	mov	r1, r6
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b8      	blx	r7
 800a110:	3001      	adds	r0, #1
 800a112:	d1c2      	bne.n	800a09a <_printf_float+0x2f6>
 800a114:	e6a1      	b.n	8009e5a <_printf_float+0xb6>
 800a116:	2301      	movs	r3, #1
 800a118:	4631      	mov	r1, r6
 800a11a:	4628      	mov	r0, r5
 800a11c:	920a      	str	r2, [sp, #40]	@ 0x28
 800a11e:	47b8      	blx	r7
 800a120:	3001      	adds	r0, #1
 800a122:	f43f ae9a 	beq.w	8009e5a <_printf_float+0xb6>
 800a126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a128:	f10b 0b01 	add.w	fp, fp, #1
 800a12c:	e7bb      	b.n	800a0a6 <_printf_float+0x302>
 800a12e:	4631      	mov	r1, r6
 800a130:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a134:	4628      	mov	r0, r5
 800a136:	47b8      	blx	r7
 800a138:	3001      	adds	r0, #1
 800a13a:	d1c0      	bne.n	800a0be <_printf_float+0x31a>
 800a13c:	e68d      	b.n	8009e5a <_printf_float+0xb6>
 800a13e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a140:	464b      	mov	r3, r9
 800a142:	4631      	mov	r1, r6
 800a144:	4628      	mov	r0, r5
 800a146:	4442      	add	r2, r8
 800a148:	47b8      	blx	r7
 800a14a:	3001      	adds	r0, #1
 800a14c:	d1c3      	bne.n	800a0d6 <_printf_float+0x332>
 800a14e:	e684      	b.n	8009e5a <_printf_float+0xb6>
 800a150:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a154:	f1ba 0f01 	cmp.w	sl, #1
 800a158:	dc01      	bgt.n	800a15e <_printf_float+0x3ba>
 800a15a:	07db      	lsls	r3, r3, #31
 800a15c:	d536      	bpl.n	800a1cc <_printf_float+0x428>
 800a15e:	2301      	movs	r3, #1
 800a160:	4642      	mov	r2, r8
 800a162:	4631      	mov	r1, r6
 800a164:	4628      	mov	r0, r5
 800a166:	47b8      	blx	r7
 800a168:	3001      	adds	r0, #1
 800a16a:	f43f ae76 	beq.w	8009e5a <_printf_float+0xb6>
 800a16e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a172:	4631      	mov	r1, r6
 800a174:	4628      	mov	r0, r5
 800a176:	47b8      	blx	r7
 800a178:	3001      	adds	r0, #1
 800a17a:	f43f ae6e 	beq.w	8009e5a <_printf_float+0xb6>
 800a17e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a182:	2200      	movs	r2, #0
 800a184:	2300      	movs	r3, #0
 800a186:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a18a:	f7f6 fc0d 	bl	80009a8 <__aeabi_dcmpeq>
 800a18e:	b9c0      	cbnz	r0, 800a1c2 <_printf_float+0x41e>
 800a190:	4653      	mov	r3, sl
 800a192:	f108 0201 	add.w	r2, r8, #1
 800a196:	4631      	mov	r1, r6
 800a198:	4628      	mov	r0, r5
 800a19a:	47b8      	blx	r7
 800a19c:	3001      	adds	r0, #1
 800a19e:	d10c      	bne.n	800a1ba <_printf_float+0x416>
 800a1a0:	e65b      	b.n	8009e5a <_printf_float+0xb6>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	465a      	mov	r2, fp
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	47b8      	blx	r7
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	f43f ae54 	beq.w	8009e5a <_printf_float+0xb6>
 800a1b2:	f108 0801 	add.w	r8, r8, #1
 800a1b6:	45d0      	cmp	r8, sl
 800a1b8:	dbf3      	blt.n	800a1a2 <_printf_float+0x3fe>
 800a1ba:	464b      	mov	r3, r9
 800a1bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a1c0:	e6e0      	b.n	8009f84 <_printf_float+0x1e0>
 800a1c2:	f04f 0800 	mov.w	r8, #0
 800a1c6:	f104 0b1a 	add.w	fp, r4, #26
 800a1ca:	e7f4      	b.n	800a1b6 <_printf_float+0x412>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4642      	mov	r2, r8
 800a1d0:	e7e1      	b.n	800a196 <_printf_float+0x3f2>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	464a      	mov	r2, r9
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	4628      	mov	r0, r5
 800a1da:	47b8      	blx	r7
 800a1dc:	3001      	adds	r0, #1
 800a1de:	f43f ae3c 	beq.w	8009e5a <_printf_float+0xb6>
 800a1e2:	f108 0801 	add.w	r8, r8, #1
 800a1e6:	68e3      	ldr	r3, [r4, #12]
 800a1e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a1ea:	1a5b      	subs	r3, r3, r1
 800a1ec:	4543      	cmp	r3, r8
 800a1ee:	dcf0      	bgt.n	800a1d2 <_printf_float+0x42e>
 800a1f0:	e6fd      	b.n	8009fee <_printf_float+0x24a>
 800a1f2:	f04f 0800 	mov.w	r8, #0
 800a1f6:	f104 0919 	add.w	r9, r4, #25
 800a1fa:	e7f4      	b.n	800a1e6 <_printf_float+0x442>

0800a1fc <_printf_common>:
 800a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	4616      	mov	r6, r2
 800a202:	4698      	mov	r8, r3
 800a204:	688a      	ldr	r2, [r1, #8]
 800a206:	690b      	ldr	r3, [r1, #16]
 800a208:	4607      	mov	r7, r0
 800a20a:	4293      	cmp	r3, r2
 800a20c:	bfb8      	it	lt
 800a20e:	4613      	movlt	r3, r2
 800a210:	6033      	str	r3, [r6, #0]
 800a212:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a216:	460c      	mov	r4, r1
 800a218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a21c:	b10a      	cbz	r2, 800a222 <_printf_common+0x26>
 800a21e:	3301      	adds	r3, #1
 800a220:	6033      	str	r3, [r6, #0]
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	0699      	lsls	r1, r3, #26
 800a226:	bf42      	ittt	mi
 800a228:	6833      	ldrmi	r3, [r6, #0]
 800a22a:	3302      	addmi	r3, #2
 800a22c:	6033      	strmi	r3, [r6, #0]
 800a22e:	6825      	ldr	r5, [r4, #0]
 800a230:	f015 0506 	ands.w	r5, r5, #6
 800a234:	d106      	bne.n	800a244 <_printf_common+0x48>
 800a236:	f104 0a19 	add.w	sl, r4, #25
 800a23a:	68e3      	ldr	r3, [r4, #12]
 800a23c:	6832      	ldr	r2, [r6, #0]
 800a23e:	1a9b      	subs	r3, r3, r2
 800a240:	42ab      	cmp	r3, r5
 800a242:	dc2b      	bgt.n	800a29c <_printf_common+0xa0>
 800a244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	3b00      	subs	r3, #0
 800a24c:	bf18      	it	ne
 800a24e:	2301      	movne	r3, #1
 800a250:	0692      	lsls	r2, r2, #26
 800a252:	d430      	bmi.n	800a2b6 <_printf_common+0xba>
 800a254:	4641      	mov	r1, r8
 800a256:	4638      	mov	r0, r7
 800a258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a25c:	47c8      	blx	r9
 800a25e:	3001      	adds	r0, #1
 800a260:	d023      	beq.n	800a2aa <_printf_common+0xae>
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	6922      	ldr	r2, [r4, #16]
 800a266:	f003 0306 	and.w	r3, r3, #6
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	bf14      	ite	ne
 800a26e:	2500      	movne	r5, #0
 800a270:	6833      	ldreq	r3, [r6, #0]
 800a272:	f04f 0600 	mov.w	r6, #0
 800a276:	bf08      	it	eq
 800a278:	68e5      	ldreq	r5, [r4, #12]
 800a27a:	f104 041a 	add.w	r4, r4, #26
 800a27e:	bf08      	it	eq
 800a280:	1aed      	subeq	r5, r5, r3
 800a282:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a286:	bf08      	it	eq
 800a288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a28c:	4293      	cmp	r3, r2
 800a28e:	bfc4      	itt	gt
 800a290:	1a9b      	subgt	r3, r3, r2
 800a292:	18ed      	addgt	r5, r5, r3
 800a294:	42b5      	cmp	r5, r6
 800a296:	d11a      	bne.n	800a2ce <_printf_common+0xd2>
 800a298:	2000      	movs	r0, #0
 800a29a:	e008      	b.n	800a2ae <_printf_common+0xb2>
 800a29c:	2301      	movs	r3, #1
 800a29e:	4652      	mov	r2, sl
 800a2a0:	4641      	mov	r1, r8
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	47c8      	blx	r9
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d103      	bne.n	800a2b2 <_printf_common+0xb6>
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	3501      	adds	r5, #1
 800a2b4:	e7c1      	b.n	800a23a <_printf_common+0x3e>
 800a2b6:	2030      	movs	r0, #48	@ 0x30
 800a2b8:	18e1      	adds	r1, r4, r3
 800a2ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2c4:	4422      	add	r2, r4
 800a2c6:	3302      	adds	r3, #2
 800a2c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2cc:	e7c2      	b.n	800a254 <_printf_common+0x58>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4641      	mov	r1, r8
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	47c8      	blx	r9
 800a2d8:	3001      	adds	r0, #1
 800a2da:	d0e6      	beq.n	800a2aa <_printf_common+0xae>
 800a2dc:	3601      	adds	r6, #1
 800a2de:	e7d9      	b.n	800a294 <_printf_common+0x98>

0800a2e0 <_printf_i>:
 800a2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	7e0f      	ldrb	r7, [r1, #24]
 800a2e6:	4691      	mov	r9, r2
 800a2e8:	2f78      	cmp	r7, #120	@ 0x78
 800a2ea:	4680      	mov	r8, r0
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	469a      	mov	sl, r3
 800a2f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2f6:	d807      	bhi.n	800a308 <_printf_i+0x28>
 800a2f8:	2f62      	cmp	r7, #98	@ 0x62
 800a2fa:	d80a      	bhi.n	800a312 <_printf_i+0x32>
 800a2fc:	2f00      	cmp	r7, #0
 800a2fe:	f000 80d3 	beq.w	800a4a8 <_printf_i+0x1c8>
 800a302:	2f58      	cmp	r7, #88	@ 0x58
 800a304:	f000 80ba 	beq.w	800a47c <_printf_i+0x19c>
 800a308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a30c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a310:	e03a      	b.n	800a388 <_printf_i+0xa8>
 800a312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a316:	2b15      	cmp	r3, #21
 800a318:	d8f6      	bhi.n	800a308 <_printf_i+0x28>
 800a31a:	a101      	add	r1, pc, #4	@ (adr r1, 800a320 <_printf_i+0x40>)
 800a31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a320:	0800a379 	.word	0x0800a379
 800a324:	0800a38d 	.word	0x0800a38d
 800a328:	0800a309 	.word	0x0800a309
 800a32c:	0800a309 	.word	0x0800a309
 800a330:	0800a309 	.word	0x0800a309
 800a334:	0800a309 	.word	0x0800a309
 800a338:	0800a38d 	.word	0x0800a38d
 800a33c:	0800a309 	.word	0x0800a309
 800a340:	0800a309 	.word	0x0800a309
 800a344:	0800a309 	.word	0x0800a309
 800a348:	0800a309 	.word	0x0800a309
 800a34c:	0800a48f 	.word	0x0800a48f
 800a350:	0800a3b7 	.word	0x0800a3b7
 800a354:	0800a449 	.word	0x0800a449
 800a358:	0800a309 	.word	0x0800a309
 800a35c:	0800a309 	.word	0x0800a309
 800a360:	0800a4b1 	.word	0x0800a4b1
 800a364:	0800a309 	.word	0x0800a309
 800a368:	0800a3b7 	.word	0x0800a3b7
 800a36c:	0800a309 	.word	0x0800a309
 800a370:	0800a309 	.word	0x0800a309
 800a374:	0800a451 	.word	0x0800a451
 800a378:	6833      	ldr	r3, [r6, #0]
 800a37a:	1d1a      	adds	r2, r3, #4
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6032      	str	r2, [r6, #0]
 800a380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a388:	2301      	movs	r3, #1
 800a38a:	e09e      	b.n	800a4ca <_printf_i+0x1ea>
 800a38c:	6833      	ldr	r3, [r6, #0]
 800a38e:	6820      	ldr	r0, [r4, #0]
 800a390:	1d19      	adds	r1, r3, #4
 800a392:	6031      	str	r1, [r6, #0]
 800a394:	0606      	lsls	r6, r0, #24
 800a396:	d501      	bpl.n	800a39c <_printf_i+0xbc>
 800a398:	681d      	ldr	r5, [r3, #0]
 800a39a:	e003      	b.n	800a3a4 <_printf_i+0xc4>
 800a39c:	0645      	lsls	r5, r0, #25
 800a39e:	d5fb      	bpl.n	800a398 <_printf_i+0xb8>
 800a3a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3a4:	2d00      	cmp	r5, #0
 800a3a6:	da03      	bge.n	800a3b0 <_printf_i+0xd0>
 800a3a8:	232d      	movs	r3, #45	@ 0x2d
 800a3aa:	426d      	negs	r5, r5
 800a3ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3b0:	230a      	movs	r3, #10
 800a3b2:	4859      	ldr	r0, [pc, #356]	@ (800a518 <_printf_i+0x238>)
 800a3b4:	e011      	b.n	800a3da <_printf_i+0xfa>
 800a3b6:	6821      	ldr	r1, [r4, #0]
 800a3b8:	6833      	ldr	r3, [r6, #0]
 800a3ba:	0608      	lsls	r0, r1, #24
 800a3bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3c0:	d402      	bmi.n	800a3c8 <_printf_i+0xe8>
 800a3c2:	0649      	lsls	r1, r1, #25
 800a3c4:	bf48      	it	mi
 800a3c6:	b2ad      	uxthmi	r5, r5
 800a3c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3ca:	6033      	str	r3, [r6, #0]
 800a3cc:	bf14      	ite	ne
 800a3ce:	230a      	movne	r3, #10
 800a3d0:	2308      	moveq	r3, #8
 800a3d2:	4851      	ldr	r0, [pc, #324]	@ (800a518 <_printf_i+0x238>)
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3da:	6866      	ldr	r6, [r4, #4]
 800a3dc:	2e00      	cmp	r6, #0
 800a3de:	bfa8      	it	ge
 800a3e0:	6821      	ldrge	r1, [r4, #0]
 800a3e2:	60a6      	str	r6, [r4, #8]
 800a3e4:	bfa4      	itt	ge
 800a3e6:	f021 0104 	bicge.w	r1, r1, #4
 800a3ea:	6021      	strge	r1, [r4, #0]
 800a3ec:	b90d      	cbnz	r5, 800a3f2 <_printf_i+0x112>
 800a3ee:	2e00      	cmp	r6, #0
 800a3f0:	d04b      	beq.n	800a48a <_printf_i+0x1aa>
 800a3f2:	4616      	mov	r6, r2
 800a3f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3f8:	fb03 5711 	mls	r7, r3, r1, r5
 800a3fc:	5dc7      	ldrb	r7, [r0, r7]
 800a3fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a402:	462f      	mov	r7, r5
 800a404:	42bb      	cmp	r3, r7
 800a406:	460d      	mov	r5, r1
 800a408:	d9f4      	bls.n	800a3f4 <_printf_i+0x114>
 800a40a:	2b08      	cmp	r3, #8
 800a40c:	d10b      	bne.n	800a426 <_printf_i+0x146>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	07df      	lsls	r7, r3, #31
 800a412:	d508      	bpl.n	800a426 <_printf_i+0x146>
 800a414:	6923      	ldr	r3, [r4, #16]
 800a416:	6861      	ldr	r1, [r4, #4]
 800a418:	4299      	cmp	r1, r3
 800a41a:	bfde      	ittt	le
 800a41c:	2330      	movle	r3, #48	@ 0x30
 800a41e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a422:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a426:	1b92      	subs	r2, r2, r6
 800a428:	6122      	str	r2, [r4, #16]
 800a42a:	464b      	mov	r3, r9
 800a42c:	4621      	mov	r1, r4
 800a42e:	4640      	mov	r0, r8
 800a430:	f8cd a000 	str.w	sl, [sp]
 800a434:	aa03      	add	r2, sp, #12
 800a436:	f7ff fee1 	bl	800a1fc <_printf_common>
 800a43a:	3001      	adds	r0, #1
 800a43c:	d14a      	bne.n	800a4d4 <_printf_i+0x1f4>
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	b004      	add	sp, #16
 800a444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	f043 0320 	orr.w	r3, r3, #32
 800a44e:	6023      	str	r3, [r4, #0]
 800a450:	2778      	movs	r7, #120	@ 0x78
 800a452:	4832      	ldr	r0, [pc, #200]	@ (800a51c <_printf_i+0x23c>)
 800a454:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	6831      	ldr	r1, [r6, #0]
 800a45c:	061f      	lsls	r7, r3, #24
 800a45e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a462:	d402      	bmi.n	800a46a <_printf_i+0x18a>
 800a464:	065f      	lsls	r7, r3, #25
 800a466:	bf48      	it	mi
 800a468:	b2ad      	uxthmi	r5, r5
 800a46a:	6031      	str	r1, [r6, #0]
 800a46c:	07d9      	lsls	r1, r3, #31
 800a46e:	bf44      	itt	mi
 800a470:	f043 0320 	orrmi.w	r3, r3, #32
 800a474:	6023      	strmi	r3, [r4, #0]
 800a476:	b11d      	cbz	r5, 800a480 <_printf_i+0x1a0>
 800a478:	2310      	movs	r3, #16
 800a47a:	e7ab      	b.n	800a3d4 <_printf_i+0xf4>
 800a47c:	4826      	ldr	r0, [pc, #152]	@ (800a518 <_printf_i+0x238>)
 800a47e:	e7e9      	b.n	800a454 <_printf_i+0x174>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	f023 0320 	bic.w	r3, r3, #32
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	e7f6      	b.n	800a478 <_printf_i+0x198>
 800a48a:	4616      	mov	r6, r2
 800a48c:	e7bd      	b.n	800a40a <_printf_i+0x12a>
 800a48e:	6833      	ldr	r3, [r6, #0]
 800a490:	6825      	ldr	r5, [r4, #0]
 800a492:	1d18      	adds	r0, r3, #4
 800a494:	6961      	ldr	r1, [r4, #20]
 800a496:	6030      	str	r0, [r6, #0]
 800a498:	062e      	lsls	r6, r5, #24
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	d501      	bpl.n	800a4a2 <_printf_i+0x1c2>
 800a49e:	6019      	str	r1, [r3, #0]
 800a4a0:	e002      	b.n	800a4a8 <_printf_i+0x1c8>
 800a4a2:	0668      	lsls	r0, r5, #25
 800a4a4:	d5fb      	bpl.n	800a49e <_printf_i+0x1be>
 800a4a6:	8019      	strh	r1, [r3, #0]
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4616      	mov	r6, r2
 800a4ac:	6123      	str	r3, [r4, #16]
 800a4ae:	e7bc      	b.n	800a42a <_printf_i+0x14a>
 800a4b0:	6833      	ldr	r3, [r6, #0]
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	1d1a      	adds	r2, r3, #4
 800a4b6:	6032      	str	r2, [r6, #0]
 800a4b8:	681e      	ldr	r6, [r3, #0]
 800a4ba:	6862      	ldr	r2, [r4, #4]
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f000 fa24 	bl	800a90a <memchr>
 800a4c2:	b108      	cbz	r0, 800a4c8 <_printf_i+0x1e8>
 800a4c4:	1b80      	subs	r0, r0, r6
 800a4c6:	6060      	str	r0, [r4, #4]
 800a4c8:	6863      	ldr	r3, [r4, #4]
 800a4ca:	6123      	str	r3, [r4, #16]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4d2:	e7aa      	b.n	800a42a <_printf_i+0x14a>
 800a4d4:	4632      	mov	r2, r6
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	4640      	mov	r0, r8
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	47d0      	blx	sl
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d0ad      	beq.n	800a43e <_printf_i+0x15e>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	079b      	lsls	r3, r3, #30
 800a4e6:	d413      	bmi.n	800a510 <_printf_i+0x230>
 800a4e8:	68e0      	ldr	r0, [r4, #12]
 800a4ea:	9b03      	ldr	r3, [sp, #12]
 800a4ec:	4298      	cmp	r0, r3
 800a4ee:	bfb8      	it	lt
 800a4f0:	4618      	movlt	r0, r3
 800a4f2:	e7a6      	b.n	800a442 <_printf_i+0x162>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	47d0      	blx	sl
 800a4fe:	3001      	adds	r0, #1
 800a500:	d09d      	beq.n	800a43e <_printf_i+0x15e>
 800a502:	3501      	adds	r5, #1
 800a504:	68e3      	ldr	r3, [r4, #12]
 800a506:	9903      	ldr	r1, [sp, #12]
 800a508:	1a5b      	subs	r3, r3, r1
 800a50a:	42ab      	cmp	r3, r5
 800a50c:	dcf2      	bgt.n	800a4f4 <_printf_i+0x214>
 800a50e:	e7eb      	b.n	800a4e8 <_printf_i+0x208>
 800a510:	2500      	movs	r5, #0
 800a512:	f104 0619 	add.w	r6, r4, #25
 800a516:	e7f5      	b.n	800a504 <_printf_i+0x224>
 800a518:	0800eb6b 	.word	0x0800eb6b
 800a51c:	0800eb7c 	.word	0x0800eb7c

0800a520 <std>:
 800a520:	2300      	movs	r3, #0
 800a522:	b510      	push	{r4, lr}
 800a524:	4604      	mov	r4, r0
 800a526:	e9c0 3300 	strd	r3, r3, [r0]
 800a52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a52e:	6083      	str	r3, [r0, #8]
 800a530:	8181      	strh	r1, [r0, #12]
 800a532:	6643      	str	r3, [r0, #100]	@ 0x64
 800a534:	81c2      	strh	r2, [r0, #14]
 800a536:	6183      	str	r3, [r0, #24]
 800a538:	4619      	mov	r1, r3
 800a53a:	2208      	movs	r2, #8
 800a53c:	305c      	adds	r0, #92	@ 0x5c
 800a53e:	f000 f914 	bl	800a76a <memset>
 800a542:	4b0d      	ldr	r3, [pc, #52]	@ (800a578 <std+0x58>)
 800a544:	6224      	str	r4, [r4, #32]
 800a546:	6263      	str	r3, [r4, #36]	@ 0x24
 800a548:	4b0c      	ldr	r3, [pc, #48]	@ (800a57c <std+0x5c>)
 800a54a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a54c:	4b0c      	ldr	r3, [pc, #48]	@ (800a580 <std+0x60>)
 800a54e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a550:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <std+0x64>)
 800a552:	6323      	str	r3, [r4, #48]	@ 0x30
 800a554:	4b0c      	ldr	r3, [pc, #48]	@ (800a588 <std+0x68>)
 800a556:	429c      	cmp	r4, r3
 800a558:	d006      	beq.n	800a568 <std+0x48>
 800a55a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a55e:	4294      	cmp	r4, r2
 800a560:	d002      	beq.n	800a568 <std+0x48>
 800a562:	33d0      	adds	r3, #208	@ 0xd0
 800a564:	429c      	cmp	r4, r3
 800a566:	d105      	bne.n	800a574 <std+0x54>
 800a568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a570:	f000 b9c8 	b.w	800a904 <__retarget_lock_init_recursive>
 800a574:	bd10      	pop	{r4, pc}
 800a576:	bf00      	nop
 800a578:	0800a6e5 	.word	0x0800a6e5
 800a57c:	0800a707 	.word	0x0800a707
 800a580:	0800a73f 	.word	0x0800a73f
 800a584:	0800a763 	.word	0x0800a763
 800a588:	20000790 	.word	0x20000790

0800a58c <stdio_exit_handler>:
 800a58c:	4a02      	ldr	r2, [pc, #8]	@ (800a598 <stdio_exit_handler+0xc>)
 800a58e:	4903      	ldr	r1, [pc, #12]	@ (800a59c <stdio_exit_handler+0x10>)
 800a590:	4803      	ldr	r0, [pc, #12]	@ (800a5a0 <stdio_exit_handler+0x14>)
 800a592:	f000 b869 	b.w	800a668 <_fwalk_sglue>
 800a596:	bf00      	nop
 800a598:	2000000c 	.word	0x2000000c
 800a59c:	0800cb99 	.word	0x0800cb99
 800a5a0:	20000188 	.word	0x20000188

0800a5a4 <cleanup_stdio>:
 800a5a4:	6841      	ldr	r1, [r0, #4]
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d8 <cleanup_stdio+0x34>)
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	4299      	cmp	r1, r3
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	d001      	beq.n	800a5b4 <cleanup_stdio+0x10>
 800a5b0:	f002 faf2 	bl	800cb98 <_fflush_r>
 800a5b4:	68a1      	ldr	r1, [r4, #8]
 800a5b6:	4b09      	ldr	r3, [pc, #36]	@ (800a5dc <cleanup_stdio+0x38>)
 800a5b8:	4299      	cmp	r1, r3
 800a5ba:	d002      	beq.n	800a5c2 <cleanup_stdio+0x1e>
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f002 faeb 	bl	800cb98 <_fflush_r>
 800a5c2:	68e1      	ldr	r1, [r4, #12]
 800a5c4:	4b06      	ldr	r3, [pc, #24]	@ (800a5e0 <cleanup_stdio+0x3c>)
 800a5c6:	4299      	cmp	r1, r3
 800a5c8:	d004      	beq.n	800a5d4 <cleanup_stdio+0x30>
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d0:	f002 bae2 	b.w	800cb98 <_fflush_r>
 800a5d4:	bd10      	pop	{r4, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20000790 	.word	0x20000790
 800a5dc:	200007f8 	.word	0x200007f8
 800a5e0:	20000860 	.word	0x20000860

0800a5e4 <global_stdio_init.part.0>:
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a614 <global_stdio_init.part.0+0x30>)
 800a5e8:	4c0b      	ldr	r4, [pc, #44]	@ (800a618 <global_stdio_init.part.0+0x34>)
 800a5ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a61c <global_stdio_init.part.0+0x38>)
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	2104      	movs	r1, #4
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f7ff ff94 	bl	800a520 <std>
 800a5f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	2109      	movs	r1, #9
 800a600:	f7ff ff8e 	bl	800a520 <std>
 800a604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a608:	2202      	movs	r2, #2
 800a60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a60e:	2112      	movs	r1, #18
 800a610:	f7ff bf86 	b.w	800a520 <std>
 800a614:	200008c8 	.word	0x200008c8
 800a618:	20000790 	.word	0x20000790
 800a61c:	0800a58d 	.word	0x0800a58d

0800a620 <__sfp_lock_acquire>:
 800a620:	4801      	ldr	r0, [pc, #4]	@ (800a628 <__sfp_lock_acquire+0x8>)
 800a622:	f000 b970 	b.w	800a906 <__retarget_lock_acquire_recursive>
 800a626:	bf00      	nop
 800a628:	200008d1 	.word	0x200008d1

0800a62c <__sfp_lock_release>:
 800a62c:	4801      	ldr	r0, [pc, #4]	@ (800a634 <__sfp_lock_release+0x8>)
 800a62e:	f000 b96b 	b.w	800a908 <__retarget_lock_release_recursive>
 800a632:	bf00      	nop
 800a634:	200008d1 	.word	0x200008d1

0800a638 <__sinit>:
 800a638:	b510      	push	{r4, lr}
 800a63a:	4604      	mov	r4, r0
 800a63c:	f7ff fff0 	bl	800a620 <__sfp_lock_acquire>
 800a640:	6a23      	ldr	r3, [r4, #32]
 800a642:	b11b      	cbz	r3, 800a64c <__sinit+0x14>
 800a644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a648:	f7ff bff0 	b.w	800a62c <__sfp_lock_release>
 800a64c:	4b04      	ldr	r3, [pc, #16]	@ (800a660 <__sinit+0x28>)
 800a64e:	6223      	str	r3, [r4, #32]
 800a650:	4b04      	ldr	r3, [pc, #16]	@ (800a664 <__sinit+0x2c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1f5      	bne.n	800a644 <__sinit+0xc>
 800a658:	f7ff ffc4 	bl	800a5e4 <global_stdio_init.part.0>
 800a65c:	e7f2      	b.n	800a644 <__sinit+0xc>
 800a65e:	bf00      	nop
 800a660:	0800a5a5 	.word	0x0800a5a5
 800a664:	200008c8 	.word	0x200008c8

0800a668 <_fwalk_sglue>:
 800a668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a66c:	4607      	mov	r7, r0
 800a66e:	4688      	mov	r8, r1
 800a670:	4614      	mov	r4, r2
 800a672:	2600      	movs	r6, #0
 800a674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a678:	f1b9 0901 	subs.w	r9, r9, #1
 800a67c:	d505      	bpl.n	800a68a <_fwalk_sglue+0x22>
 800a67e:	6824      	ldr	r4, [r4, #0]
 800a680:	2c00      	cmp	r4, #0
 800a682:	d1f7      	bne.n	800a674 <_fwalk_sglue+0xc>
 800a684:	4630      	mov	r0, r6
 800a686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68a:	89ab      	ldrh	r3, [r5, #12]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d907      	bls.n	800a6a0 <_fwalk_sglue+0x38>
 800a690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a694:	3301      	adds	r3, #1
 800a696:	d003      	beq.n	800a6a0 <_fwalk_sglue+0x38>
 800a698:	4629      	mov	r1, r5
 800a69a:	4638      	mov	r0, r7
 800a69c:	47c0      	blx	r8
 800a69e:	4306      	orrs	r6, r0
 800a6a0:	3568      	adds	r5, #104	@ 0x68
 800a6a2:	e7e9      	b.n	800a678 <_fwalk_sglue+0x10>

0800a6a4 <siprintf>:
 800a6a4:	b40e      	push	{r1, r2, r3}
 800a6a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a6aa:	b500      	push	{lr}
 800a6ac:	b09c      	sub	sp, #112	@ 0x70
 800a6ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800a6b0:	9002      	str	r0, [sp, #8]
 800a6b2:	9006      	str	r0, [sp, #24]
 800a6b4:	9107      	str	r1, [sp, #28]
 800a6b6:	9104      	str	r1, [sp, #16]
 800a6b8:	4808      	ldr	r0, [pc, #32]	@ (800a6dc <siprintf+0x38>)
 800a6ba:	4909      	ldr	r1, [pc, #36]	@ (800a6e0 <siprintf+0x3c>)
 800a6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c0:	9105      	str	r1, [sp, #20]
 800a6c2:	6800      	ldr	r0, [r0, #0]
 800a6c4:	a902      	add	r1, sp, #8
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	f002 f8ea 	bl	800c8a0 <_svfiprintf_r>
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	9b02      	ldr	r3, [sp, #8]
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	b01c      	add	sp, #112	@ 0x70
 800a6d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6d8:	b003      	add	sp, #12
 800a6da:	4770      	bx	lr
 800a6dc:	20000184 	.word	0x20000184
 800a6e0:	ffff0208 	.word	0xffff0208

0800a6e4 <__sread>:
 800a6e4:	b510      	push	{r4, lr}
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ec:	f000 f8bc 	bl	800a868 <_read_r>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	bfab      	itete	ge
 800a6f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a6f8:	181b      	addge	r3, r3, r0
 800a6fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6fe:	bfac      	ite	ge
 800a700:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a702:	81a3      	strhlt	r3, [r4, #12]
 800a704:	bd10      	pop	{r4, pc}

0800a706 <__swrite>:
 800a706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a70a:	461f      	mov	r7, r3
 800a70c:	898b      	ldrh	r3, [r1, #12]
 800a70e:	4605      	mov	r5, r0
 800a710:	05db      	lsls	r3, r3, #23
 800a712:	460c      	mov	r4, r1
 800a714:	4616      	mov	r6, r2
 800a716:	d505      	bpl.n	800a724 <__swrite+0x1e>
 800a718:	2302      	movs	r3, #2
 800a71a:	2200      	movs	r2, #0
 800a71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a720:	f000 f890 	bl	800a844 <_lseek_r>
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	4632      	mov	r2, r6
 800a728:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a72c:	81a3      	strh	r3, [r4, #12]
 800a72e:	4628      	mov	r0, r5
 800a730:	463b      	mov	r3, r7
 800a732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a73a:	f000 b8a7 	b.w	800a88c <_write_r>

0800a73e <__sseek>:
 800a73e:	b510      	push	{r4, lr}
 800a740:	460c      	mov	r4, r1
 800a742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a746:	f000 f87d 	bl	800a844 <_lseek_r>
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	89a3      	ldrh	r3, [r4, #12]
 800a74e:	bf15      	itete	ne
 800a750:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a752:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a756:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a75a:	81a3      	strheq	r3, [r4, #12]
 800a75c:	bf18      	it	ne
 800a75e:	81a3      	strhne	r3, [r4, #12]
 800a760:	bd10      	pop	{r4, pc}

0800a762 <__sclose>:
 800a762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a766:	f000 b85d 	b.w	800a824 <_close_r>

0800a76a <memset>:
 800a76a:	4603      	mov	r3, r0
 800a76c:	4402      	add	r2, r0
 800a76e:	4293      	cmp	r3, r2
 800a770:	d100      	bne.n	800a774 <memset+0xa>
 800a772:	4770      	bx	lr
 800a774:	f803 1b01 	strb.w	r1, [r3], #1
 800a778:	e7f9      	b.n	800a76e <memset+0x4>

0800a77a <strncmp>:
 800a77a:	b510      	push	{r4, lr}
 800a77c:	b16a      	cbz	r2, 800a79a <strncmp+0x20>
 800a77e:	3901      	subs	r1, #1
 800a780:	1884      	adds	r4, r0, r2
 800a782:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a786:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d103      	bne.n	800a796 <strncmp+0x1c>
 800a78e:	42a0      	cmp	r0, r4
 800a790:	d001      	beq.n	800a796 <strncmp+0x1c>
 800a792:	2a00      	cmp	r2, #0
 800a794:	d1f5      	bne.n	800a782 <strncmp+0x8>
 800a796:	1ad0      	subs	r0, r2, r3
 800a798:	bd10      	pop	{r4, pc}
 800a79a:	4610      	mov	r0, r2
 800a79c:	e7fc      	b.n	800a798 <strncmp+0x1e>

0800a79e <strncpy>:
 800a79e:	4603      	mov	r3, r0
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	3901      	subs	r1, #1
 800a7a4:	b132      	cbz	r2, 800a7b4 <strncpy+0x16>
 800a7a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a7aa:	3a01      	subs	r2, #1
 800a7ac:	f803 4b01 	strb.w	r4, [r3], #1
 800a7b0:	2c00      	cmp	r4, #0
 800a7b2:	d1f7      	bne.n	800a7a4 <strncpy+0x6>
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	441a      	add	r2, r3
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d100      	bne.n	800a7be <strncpy+0x20>
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	f803 1b01 	strb.w	r1, [r3], #1
 800a7c2:	e7f9      	b.n	800a7b8 <strncpy+0x1a>

0800a7c4 <__strtok_r>:
 800a7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	b908      	cbnz	r0, 800a7ce <__strtok_r+0xa>
 800a7ca:	6814      	ldr	r4, [r2, #0]
 800a7cc:	b144      	cbz	r4, 800a7e0 <__strtok_r+0x1c>
 800a7ce:	460f      	mov	r7, r1
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a7d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a7da:	b91e      	cbnz	r6, 800a7e4 <__strtok_r+0x20>
 800a7dc:	b965      	cbnz	r5, 800a7f8 <__strtok_r+0x34>
 800a7de:	6015      	str	r5, [r2, #0]
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	e005      	b.n	800a7f0 <__strtok_r+0x2c>
 800a7e4:	42b5      	cmp	r5, r6
 800a7e6:	d1f6      	bne.n	800a7d6 <__strtok_r+0x12>
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1f0      	bne.n	800a7ce <__strtok_r+0xa>
 800a7ec:	6014      	str	r4, [r2, #0]
 800a7ee:	7003      	strb	r3, [r0, #0]
 800a7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f2:	461c      	mov	r4, r3
 800a7f4:	e00c      	b.n	800a810 <__strtok_r+0x4c>
 800a7f6:	b915      	cbnz	r5, 800a7fe <__strtok_r+0x3a>
 800a7f8:	460e      	mov	r6, r1
 800a7fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a802:	42ab      	cmp	r3, r5
 800a804:	d1f7      	bne.n	800a7f6 <__strtok_r+0x32>
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0f3      	beq.n	800a7f2 <__strtok_r+0x2e>
 800a80a:	2300      	movs	r3, #0
 800a80c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a810:	6014      	str	r4, [r2, #0]
 800a812:	e7ed      	b.n	800a7f0 <__strtok_r+0x2c>

0800a814 <strtok_r>:
 800a814:	2301      	movs	r3, #1
 800a816:	f7ff bfd5 	b.w	800a7c4 <__strtok_r>
	...

0800a81c <_localeconv_r>:
 800a81c:	4800      	ldr	r0, [pc, #0]	@ (800a820 <_localeconv_r+0x4>)
 800a81e:	4770      	bx	lr
 800a820:	20000108 	.word	0x20000108

0800a824 <_close_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	2300      	movs	r3, #0
 800a828:	4d05      	ldr	r5, [pc, #20]	@ (800a840 <_close_r+0x1c>)
 800a82a:	4604      	mov	r4, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	602b      	str	r3, [r5, #0]
 800a830:	f7f9 f943 	bl	8003aba <_close>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_close_r+0x1a>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_close_r+0x1a>
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	200008cc 	.word	0x200008cc

0800a844 <_lseek_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4604      	mov	r4, r0
 800a848:	4608      	mov	r0, r1
 800a84a:	4611      	mov	r1, r2
 800a84c:	2200      	movs	r2, #0
 800a84e:	4d05      	ldr	r5, [pc, #20]	@ (800a864 <_lseek_r+0x20>)
 800a850:	602a      	str	r2, [r5, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	f7f9 f955 	bl	8003b02 <_lseek>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_lseek_r+0x1e>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_lseek_r+0x1e>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	200008cc 	.word	0x200008cc

0800a868 <_read_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4604      	mov	r4, r0
 800a86c:	4608      	mov	r0, r1
 800a86e:	4611      	mov	r1, r2
 800a870:	2200      	movs	r2, #0
 800a872:	4d05      	ldr	r5, [pc, #20]	@ (800a888 <_read_r+0x20>)
 800a874:	602a      	str	r2, [r5, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	f7f9 f8e6 	bl	8003a48 <_read>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d102      	bne.n	800a886 <_read_r+0x1e>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	b103      	cbz	r3, 800a886 <_read_r+0x1e>
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	200008cc 	.word	0x200008cc

0800a88c <_write_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	4611      	mov	r1, r2
 800a894:	2200      	movs	r2, #0
 800a896:	4d05      	ldr	r5, [pc, #20]	@ (800a8ac <_write_r+0x20>)
 800a898:	602a      	str	r2, [r5, #0]
 800a89a:	461a      	mov	r2, r3
 800a89c:	f7f9 f8f1 	bl	8003a82 <_write>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d102      	bne.n	800a8aa <_write_r+0x1e>
 800a8a4:	682b      	ldr	r3, [r5, #0]
 800a8a6:	b103      	cbz	r3, 800a8aa <_write_r+0x1e>
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	200008cc 	.word	0x200008cc

0800a8b0 <__errno>:
 800a8b0:	4b01      	ldr	r3, [pc, #4]	@ (800a8b8 <__errno+0x8>)
 800a8b2:	6818      	ldr	r0, [r3, #0]
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	20000184 	.word	0x20000184

0800a8bc <__libc_init_array>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	2600      	movs	r6, #0
 800a8c0:	4d0c      	ldr	r5, [pc, #48]	@ (800a8f4 <__libc_init_array+0x38>)
 800a8c2:	4c0d      	ldr	r4, [pc, #52]	@ (800a8f8 <__libc_init_array+0x3c>)
 800a8c4:	1b64      	subs	r4, r4, r5
 800a8c6:	10a4      	asrs	r4, r4, #2
 800a8c8:	42a6      	cmp	r6, r4
 800a8ca:	d109      	bne.n	800a8e0 <__libc_init_array+0x24>
 800a8cc:	f003 fde8 	bl	800e4a0 <_init>
 800a8d0:	2600      	movs	r6, #0
 800a8d2:	4d0a      	ldr	r5, [pc, #40]	@ (800a8fc <__libc_init_array+0x40>)
 800a8d4:	4c0a      	ldr	r4, [pc, #40]	@ (800a900 <__libc_init_array+0x44>)
 800a8d6:	1b64      	subs	r4, r4, r5
 800a8d8:	10a4      	asrs	r4, r4, #2
 800a8da:	42a6      	cmp	r6, r4
 800a8dc:	d105      	bne.n	800a8ea <__libc_init_array+0x2e>
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e4:	4798      	blx	r3
 800a8e6:	3601      	adds	r6, #1
 800a8e8:	e7ee      	b.n	800a8c8 <__libc_init_array+0xc>
 800a8ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ee:	4798      	blx	r3
 800a8f0:	3601      	adds	r6, #1
 800a8f2:	e7f2      	b.n	800a8da <__libc_init_array+0x1e>
 800a8f4:	0800f008 	.word	0x0800f008
 800a8f8:	0800f008 	.word	0x0800f008
 800a8fc:	0800f008 	.word	0x0800f008
 800a900:	0800f00c 	.word	0x0800f00c

0800a904 <__retarget_lock_init_recursive>:
 800a904:	4770      	bx	lr

0800a906 <__retarget_lock_acquire_recursive>:
 800a906:	4770      	bx	lr

0800a908 <__retarget_lock_release_recursive>:
 800a908:	4770      	bx	lr

0800a90a <memchr>:
 800a90a:	4603      	mov	r3, r0
 800a90c:	b510      	push	{r4, lr}
 800a90e:	b2c9      	uxtb	r1, r1
 800a910:	4402      	add	r2, r0
 800a912:	4293      	cmp	r3, r2
 800a914:	4618      	mov	r0, r3
 800a916:	d101      	bne.n	800a91c <memchr+0x12>
 800a918:	2000      	movs	r0, #0
 800a91a:	e003      	b.n	800a924 <memchr+0x1a>
 800a91c:	7804      	ldrb	r4, [r0, #0]
 800a91e:	3301      	adds	r3, #1
 800a920:	428c      	cmp	r4, r1
 800a922:	d1f6      	bne.n	800a912 <memchr+0x8>
 800a924:	bd10      	pop	{r4, pc}

0800a926 <memcpy>:
 800a926:	440a      	add	r2, r1
 800a928:	4291      	cmp	r1, r2
 800a92a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a92e:	d100      	bne.n	800a932 <memcpy+0xc>
 800a930:	4770      	bx	lr
 800a932:	b510      	push	{r4, lr}
 800a934:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a938:	4291      	cmp	r1, r2
 800a93a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a93e:	d1f9      	bne.n	800a934 <memcpy+0xe>
 800a940:	bd10      	pop	{r4, pc}
	...

0800a944 <nan>:
 800a944:	2000      	movs	r0, #0
 800a946:	4901      	ldr	r1, [pc, #4]	@ (800a94c <nan+0x8>)
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	7ff80000 	.word	0x7ff80000

0800a950 <quorem>:
 800a950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	6903      	ldr	r3, [r0, #16]
 800a956:	690c      	ldr	r4, [r1, #16]
 800a958:	4607      	mov	r7, r0
 800a95a:	42a3      	cmp	r3, r4
 800a95c:	db7e      	blt.n	800aa5c <quorem+0x10c>
 800a95e:	3c01      	subs	r4, #1
 800a960:	00a3      	lsls	r3, r4, #2
 800a962:	f100 0514 	add.w	r5, r0, #20
 800a966:	f101 0814 	add.w	r8, r1, #20
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a970:	9301      	str	r3, [sp, #4]
 800a972:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a976:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a97a:	3301      	adds	r3, #1
 800a97c:	429a      	cmp	r2, r3
 800a97e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a982:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a986:	d32e      	bcc.n	800a9e6 <quorem+0x96>
 800a988:	f04f 0a00 	mov.w	sl, #0
 800a98c:	46c4      	mov	ip, r8
 800a98e:	46ae      	mov	lr, r5
 800a990:	46d3      	mov	fp, sl
 800a992:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a996:	b298      	uxth	r0, r3
 800a998:	fb06 a000 	mla	r0, r6, r0, sl
 800a99c:	0c1b      	lsrs	r3, r3, #16
 800a99e:	0c02      	lsrs	r2, r0, #16
 800a9a0:	fb06 2303 	mla	r3, r6, r3, r2
 800a9a4:	f8de 2000 	ldr.w	r2, [lr]
 800a9a8:	b280      	uxth	r0, r0
 800a9aa:	b292      	uxth	r2, r2
 800a9ac:	1a12      	subs	r2, r2, r0
 800a9ae:	445a      	add	r2, fp
 800a9b0:	f8de 0000 	ldr.w	r0, [lr]
 800a9b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a9be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a9c2:	b292      	uxth	r2, r2
 800a9c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a9c8:	45e1      	cmp	r9, ip
 800a9ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a9ce:	f84e 2b04 	str.w	r2, [lr], #4
 800a9d2:	d2de      	bcs.n	800a992 <quorem+0x42>
 800a9d4:	9b00      	ldr	r3, [sp, #0]
 800a9d6:	58eb      	ldr	r3, [r5, r3]
 800a9d8:	b92b      	cbnz	r3, 800a9e6 <quorem+0x96>
 800a9da:	9b01      	ldr	r3, [sp, #4]
 800a9dc:	3b04      	subs	r3, #4
 800a9de:	429d      	cmp	r5, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	d32f      	bcc.n	800aa44 <quorem+0xf4>
 800a9e4:	613c      	str	r4, [r7, #16]
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	f001 fd0e 	bl	800c408 <__mcmp>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	db25      	blt.n	800aa3c <quorem+0xec>
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9f8:	f8d1 c000 	ldr.w	ip, [r1]
 800a9fc:	fa1f fe82 	uxth.w	lr, r2
 800aa00:	fa1f f38c 	uxth.w	r3, ip
 800aa04:	eba3 030e 	sub.w	r3, r3, lr
 800aa08:	4403      	add	r3, r0
 800aa0a:	0c12      	lsrs	r2, r2, #16
 800aa0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa1a:	45c1      	cmp	r9, r8
 800aa1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa20:	f841 3b04 	str.w	r3, [r1], #4
 800aa24:	d2e6      	bcs.n	800a9f4 <quorem+0xa4>
 800aa26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa2e:	b922      	cbnz	r2, 800aa3a <quorem+0xea>
 800aa30:	3b04      	subs	r3, #4
 800aa32:	429d      	cmp	r5, r3
 800aa34:	461a      	mov	r2, r3
 800aa36:	d30b      	bcc.n	800aa50 <quorem+0x100>
 800aa38:	613c      	str	r4, [r7, #16]
 800aa3a:	3601      	adds	r6, #1
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	b003      	add	sp, #12
 800aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa44:	6812      	ldr	r2, [r2, #0]
 800aa46:	3b04      	subs	r3, #4
 800aa48:	2a00      	cmp	r2, #0
 800aa4a:	d1cb      	bne.n	800a9e4 <quorem+0x94>
 800aa4c:	3c01      	subs	r4, #1
 800aa4e:	e7c6      	b.n	800a9de <quorem+0x8e>
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	3b04      	subs	r3, #4
 800aa54:	2a00      	cmp	r2, #0
 800aa56:	d1ef      	bne.n	800aa38 <quorem+0xe8>
 800aa58:	3c01      	subs	r4, #1
 800aa5a:	e7ea      	b.n	800aa32 <quorem+0xe2>
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	e7ee      	b.n	800aa3e <quorem+0xee>

0800aa60 <_dtoa_r>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	4614      	mov	r4, r2
 800aa66:	461d      	mov	r5, r3
 800aa68:	69c7      	ldr	r7, [r0, #28]
 800aa6a:	b097      	sub	sp, #92	@ 0x5c
 800aa6c:	4683      	mov	fp, r0
 800aa6e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aa72:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800aa74:	b97f      	cbnz	r7, 800aa96 <_dtoa_r+0x36>
 800aa76:	2010      	movs	r0, #16
 800aa78:	f001 f93c 	bl	800bcf4 <malloc>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	f8cb 001c 	str.w	r0, [fp, #28]
 800aa82:	b920      	cbnz	r0, 800aa8e <_dtoa_r+0x2e>
 800aa84:	21ef      	movs	r1, #239	@ 0xef
 800aa86:	4ba8      	ldr	r3, [pc, #672]	@ (800ad28 <_dtoa_r+0x2c8>)
 800aa88:	48a8      	ldr	r0, [pc, #672]	@ (800ad2c <_dtoa_r+0x2cc>)
 800aa8a:	f002 f8d7 	bl	800cc3c <__assert_func>
 800aa8e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa92:	6007      	str	r7, [r0, #0]
 800aa94:	60c7      	str	r7, [r0, #12]
 800aa96:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa9a:	6819      	ldr	r1, [r3, #0]
 800aa9c:	b159      	cbz	r1, 800aab6 <_dtoa_r+0x56>
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	4093      	lsls	r3, r2
 800aaa4:	604a      	str	r2, [r1, #4]
 800aaa6:	608b      	str	r3, [r1, #8]
 800aaa8:	4658      	mov	r0, fp
 800aaaa:	f001 fa2b 	bl	800bf04 <_Bfree>
 800aaae:	2200      	movs	r2, #0
 800aab0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	1e2b      	subs	r3, r5, #0
 800aab8:	bfaf      	iteee	ge
 800aaba:	2300      	movge	r3, #0
 800aabc:	2201      	movlt	r2, #1
 800aabe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aac2:	9303      	strlt	r3, [sp, #12]
 800aac4:	bfa8      	it	ge
 800aac6:	6033      	strge	r3, [r6, #0]
 800aac8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aacc:	4b98      	ldr	r3, [pc, #608]	@ (800ad30 <_dtoa_r+0x2d0>)
 800aace:	bfb8      	it	lt
 800aad0:	6032      	strlt	r2, [r6, #0]
 800aad2:	ea33 0308 	bics.w	r3, r3, r8
 800aad6:	d112      	bne.n	800aafe <_dtoa_r+0x9e>
 800aad8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aadc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aae4:	4323      	orrs	r3, r4
 800aae6:	f000 8550 	beq.w	800b58a <_dtoa_r+0xb2a>
 800aaea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aaec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800ad34 <_dtoa_r+0x2d4>
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8552 	beq.w	800b59a <_dtoa_r+0xb3a>
 800aaf6:	f10a 0303 	add.w	r3, sl, #3
 800aafa:	f000 bd4c 	b.w	800b596 <_dtoa_r+0xb36>
 800aafe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab02:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f7f5 ff4b 	bl	80009a8 <__aeabi_dcmpeq>
 800ab12:	4607      	mov	r7, r0
 800ab14:	b158      	cbz	r0, 800ab2e <_dtoa_r+0xce>
 800ab16:	2301      	movs	r3, #1
 800ab18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ab1e:	b113      	cbz	r3, 800ab26 <_dtoa_r+0xc6>
 800ab20:	4b85      	ldr	r3, [pc, #532]	@ (800ad38 <_dtoa_r+0x2d8>)
 800ab22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800ad3c <_dtoa_r+0x2dc>
 800ab2a:	f000 bd36 	b.w	800b59a <_dtoa_r+0xb3a>
 800ab2e:	ab14      	add	r3, sp, #80	@ 0x50
 800ab30:	9301      	str	r3, [sp, #4]
 800ab32:	ab15      	add	r3, sp, #84	@ 0x54
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	4658      	mov	r0, fp
 800ab38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ab3c:	f001 fd7c 	bl	800c638 <__d2b>
 800ab40:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ab44:	4681      	mov	r9, r0
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	d077      	beq.n	800ac3a <_dtoa_r+0x1da>
 800ab4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab50:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab58:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab5c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab60:	9712      	str	r7, [sp, #72]	@ 0x48
 800ab62:	4619      	mov	r1, r3
 800ab64:	2200      	movs	r2, #0
 800ab66:	4b76      	ldr	r3, [pc, #472]	@ (800ad40 <_dtoa_r+0x2e0>)
 800ab68:	f7f5 fafe 	bl	8000168 <__aeabi_dsub>
 800ab6c:	a368      	add	r3, pc, #416	@ (adr r3, 800ad10 <_dtoa_r+0x2b0>)
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	f7f5 fcb1 	bl	80004d8 <__aeabi_dmul>
 800ab76:	a368      	add	r3, pc, #416	@ (adr r3, 800ad18 <_dtoa_r+0x2b8>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 faf6 	bl	800016c <__adddf3>
 800ab80:	4604      	mov	r4, r0
 800ab82:	4630      	mov	r0, r6
 800ab84:	460d      	mov	r5, r1
 800ab86:	f7f5 fc3d 	bl	8000404 <__aeabi_i2d>
 800ab8a:	a365      	add	r3, pc, #404	@ (adr r3, 800ad20 <_dtoa_r+0x2c0>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f7f5 fca2 	bl	80004d8 <__aeabi_dmul>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4620      	mov	r0, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	f7f5 fae6 	bl	800016c <__adddf3>
 800aba0:	4604      	mov	r4, r0
 800aba2:	460d      	mov	r5, r1
 800aba4:	f7f5 ff48 	bl	8000a38 <__aeabi_d2iz>
 800aba8:	2200      	movs	r2, #0
 800abaa:	4607      	mov	r7, r0
 800abac:	2300      	movs	r3, #0
 800abae:	4620      	mov	r0, r4
 800abb0:	4629      	mov	r1, r5
 800abb2:	f7f5 ff03 	bl	80009bc <__aeabi_dcmplt>
 800abb6:	b140      	cbz	r0, 800abca <_dtoa_r+0x16a>
 800abb8:	4638      	mov	r0, r7
 800abba:	f7f5 fc23 	bl	8000404 <__aeabi_i2d>
 800abbe:	4622      	mov	r2, r4
 800abc0:	462b      	mov	r3, r5
 800abc2:	f7f5 fef1 	bl	80009a8 <__aeabi_dcmpeq>
 800abc6:	b900      	cbnz	r0, 800abca <_dtoa_r+0x16a>
 800abc8:	3f01      	subs	r7, #1
 800abca:	2f16      	cmp	r7, #22
 800abcc:	d853      	bhi.n	800ac76 <_dtoa_r+0x216>
 800abce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abd2:	4b5c      	ldr	r3, [pc, #368]	@ (800ad44 <_dtoa_r+0x2e4>)
 800abd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	f7f5 feee 	bl	80009bc <__aeabi_dcmplt>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d04a      	beq.n	800ac7a <_dtoa_r+0x21a>
 800abe4:	2300      	movs	r3, #0
 800abe6:	3f01      	subs	r7, #1
 800abe8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800abec:	1b9b      	subs	r3, r3, r6
 800abee:	1e5a      	subs	r2, r3, #1
 800abf0:	bf46      	itte	mi
 800abf2:	f1c3 0801 	rsbmi	r8, r3, #1
 800abf6:	2300      	movmi	r3, #0
 800abf8:	f04f 0800 	movpl.w	r8, #0
 800abfc:	9209      	str	r2, [sp, #36]	@ 0x24
 800abfe:	bf48      	it	mi
 800ac00:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	db3b      	blt.n	800ac7e <_dtoa_r+0x21e>
 800ac06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac08:	970e      	str	r7, [sp, #56]	@ 0x38
 800ac0a:	443b      	add	r3, r7
 800ac0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac0e:	2300      	movs	r3, #0
 800ac10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ac14:	2b09      	cmp	r3, #9
 800ac16:	d866      	bhi.n	800ace6 <_dtoa_r+0x286>
 800ac18:	2b05      	cmp	r3, #5
 800ac1a:	bfc4      	itt	gt
 800ac1c:	3b04      	subgt	r3, #4
 800ac1e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800ac20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ac22:	bfc8      	it	gt
 800ac24:	2400      	movgt	r4, #0
 800ac26:	f1a3 0302 	sub.w	r3, r3, #2
 800ac2a:	bfd8      	it	le
 800ac2c:	2401      	movle	r4, #1
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d864      	bhi.n	800acfc <_dtoa_r+0x29c>
 800ac32:	e8df f003 	tbb	[pc, r3]
 800ac36:	382b      	.short	0x382b
 800ac38:	5636      	.short	0x5636
 800ac3a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ac3e:	441e      	add	r6, r3
 800ac40:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ac44:	2b20      	cmp	r3, #32
 800ac46:	bfc1      	itttt	gt
 800ac48:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ac4c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ac50:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ac54:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac58:	bfd6      	itet	le
 800ac5a:	f1c3 0320 	rsble	r3, r3, #32
 800ac5e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ac62:	fa04 f003 	lslle.w	r0, r4, r3
 800ac66:	f7f5 fbbd 	bl	80003e4 <__aeabi_ui2d>
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac70:	3e01      	subs	r6, #1
 800ac72:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac74:	e775      	b.n	800ab62 <_dtoa_r+0x102>
 800ac76:	2301      	movs	r3, #1
 800ac78:	e7b6      	b.n	800abe8 <_dtoa_r+0x188>
 800ac7a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ac7c:	e7b5      	b.n	800abea <_dtoa_r+0x18a>
 800ac7e:	427b      	negs	r3, r7
 800ac80:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac82:	2300      	movs	r3, #0
 800ac84:	eba8 0807 	sub.w	r8, r8, r7
 800ac88:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac8a:	e7c2      	b.n	800ac12 <_dtoa_r+0x1b2>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	dc35      	bgt.n	800ad02 <_dtoa_r+0x2a2>
 800ac96:	2301      	movs	r3, #1
 800ac98:	461a      	mov	r2, r3
 800ac9a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ac9e:	9221      	str	r2, [sp, #132]	@ 0x84
 800aca0:	e00b      	b.n	800acba <_dtoa_r+0x25a>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e7f3      	b.n	800ac8e <_dtoa_r+0x22e>
 800aca6:	2300      	movs	r3, #0
 800aca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800acac:	18fb      	adds	r3, r7, r3
 800acae:	9308      	str	r3, [sp, #32]
 800acb0:	3301      	adds	r3, #1
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	9307      	str	r3, [sp, #28]
 800acb6:	bfb8      	it	lt
 800acb8:	2301      	movlt	r3, #1
 800acba:	2100      	movs	r1, #0
 800acbc:	2204      	movs	r2, #4
 800acbe:	f8db 001c 	ldr.w	r0, [fp, #28]
 800acc2:	f102 0514 	add.w	r5, r2, #20
 800acc6:	429d      	cmp	r5, r3
 800acc8:	d91f      	bls.n	800ad0a <_dtoa_r+0x2aa>
 800acca:	6041      	str	r1, [r0, #4]
 800accc:	4658      	mov	r0, fp
 800acce:	f001 f8d9 	bl	800be84 <_Balloc>
 800acd2:	4682      	mov	sl, r0
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d139      	bne.n	800ad4c <_dtoa_r+0x2ec>
 800acd8:	4602      	mov	r2, r0
 800acda:	f240 11af 	movw	r1, #431	@ 0x1af
 800acde:	4b1a      	ldr	r3, [pc, #104]	@ (800ad48 <_dtoa_r+0x2e8>)
 800ace0:	e6d2      	b.n	800aa88 <_dtoa_r+0x28>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7e0      	b.n	800aca8 <_dtoa_r+0x248>
 800ace6:	2401      	movs	r4, #1
 800ace8:	2300      	movs	r3, #0
 800acea:	940b      	str	r4, [sp, #44]	@ 0x2c
 800acec:	9320      	str	r3, [sp, #128]	@ 0x80
 800acee:	f04f 33ff 	mov.w	r3, #4294967295
 800acf2:	2200      	movs	r2, #0
 800acf4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800acf8:	2312      	movs	r3, #18
 800acfa:	e7d0      	b.n	800ac9e <_dtoa_r+0x23e>
 800acfc:	2301      	movs	r3, #1
 800acfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad00:	e7f5      	b.n	800acee <_dtoa_r+0x28e>
 800ad02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad04:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ad08:	e7d7      	b.n	800acba <_dtoa_r+0x25a>
 800ad0a:	3101      	adds	r1, #1
 800ad0c:	0052      	lsls	r2, r2, #1
 800ad0e:	e7d8      	b.n	800acc2 <_dtoa_r+0x262>
 800ad10:	636f4361 	.word	0x636f4361
 800ad14:	3fd287a7 	.word	0x3fd287a7
 800ad18:	8b60c8b3 	.word	0x8b60c8b3
 800ad1c:	3fc68a28 	.word	0x3fc68a28
 800ad20:	509f79fb 	.word	0x509f79fb
 800ad24:	3fd34413 	.word	0x3fd34413
 800ad28:	0800eba2 	.word	0x0800eba2
 800ad2c:	0800ebb9 	.word	0x0800ebb9
 800ad30:	7ff00000 	.word	0x7ff00000
 800ad34:	0800eb9e 	.word	0x0800eb9e
 800ad38:	0800eb6a 	.word	0x0800eb6a
 800ad3c:	0800eb69 	.word	0x0800eb69
 800ad40:	3ff80000 	.word	0x3ff80000
 800ad44:	0800ed10 	.word	0x0800ed10
 800ad48:	0800ec11 	.word	0x0800ec11
 800ad4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad50:	6018      	str	r0, [r3, #0]
 800ad52:	9b07      	ldr	r3, [sp, #28]
 800ad54:	2b0e      	cmp	r3, #14
 800ad56:	f200 80a4 	bhi.w	800aea2 <_dtoa_r+0x442>
 800ad5a:	2c00      	cmp	r4, #0
 800ad5c:	f000 80a1 	beq.w	800aea2 <_dtoa_r+0x442>
 800ad60:	2f00      	cmp	r7, #0
 800ad62:	dd33      	ble.n	800adcc <_dtoa_r+0x36c>
 800ad64:	4b86      	ldr	r3, [pc, #536]	@ (800af80 <_dtoa_r+0x520>)
 800ad66:	f007 020f 	and.w	r2, r7, #15
 800ad6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad6e:	05f8      	lsls	r0, r7, #23
 800ad70:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad78:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad7c:	d516      	bpl.n	800adac <_dtoa_r+0x34c>
 800ad7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad82:	4b80      	ldr	r3, [pc, #512]	@ (800af84 <_dtoa_r+0x524>)
 800ad84:	2603      	movs	r6, #3
 800ad86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad8a:	f7f5 fccf 	bl	800072c <__aeabi_ddiv>
 800ad8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad92:	f004 040f 	and.w	r4, r4, #15
 800ad96:	4d7b      	ldr	r5, [pc, #492]	@ (800af84 <_dtoa_r+0x524>)
 800ad98:	b954      	cbnz	r4, 800adb0 <_dtoa_r+0x350>
 800ad9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada2:	f7f5 fcc3 	bl	800072c <__aeabi_ddiv>
 800ada6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adaa:	e028      	b.n	800adfe <_dtoa_r+0x39e>
 800adac:	2602      	movs	r6, #2
 800adae:	e7f2      	b.n	800ad96 <_dtoa_r+0x336>
 800adb0:	07e1      	lsls	r1, r4, #31
 800adb2:	d508      	bpl.n	800adc6 <_dtoa_r+0x366>
 800adb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adbc:	f7f5 fb8c 	bl	80004d8 <__aeabi_dmul>
 800adc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adc4:	3601      	adds	r6, #1
 800adc6:	1064      	asrs	r4, r4, #1
 800adc8:	3508      	adds	r5, #8
 800adca:	e7e5      	b.n	800ad98 <_dtoa_r+0x338>
 800adcc:	f000 80d2 	beq.w	800af74 <_dtoa_r+0x514>
 800add0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800add4:	427c      	negs	r4, r7
 800add6:	4b6a      	ldr	r3, [pc, #424]	@ (800af80 <_dtoa_r+0x520>)
 800add8:	f004 020f 	and.w	r2, r4, #15
 800addc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	f7f5 fb78 	bl	80004d8 <__aeabi_dmul>
 800ade8:	2602      	movs	r6, #2
 800adea:	2300      	movs	r3, #0
 800adec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adf0:	4d64      	ldr	r5, [pc, #400]	@ (800af84 <_dtoa_r+0x524>)
 800adf2:	1124      	asrs	r4, r4, #4
 800adf4:	2c00      	cmp	r4, #0
 800adf6:	f040 80b2 	bne.w	800af5e <_dtoa_r+0x4fe>
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1d3      	bne.n	800ada6 <_dtoa_r+0x346>
 800adfe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80b7 	beq.w	800af78 <_dtoa_r+0x518>
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	4629      	mov	r1, r5
 800ae10:	4b5d      	ldr	r3, [pc, #372]	@ (800af88 <_dtoa_r+0x528>)
 800ae12:	f7f5 fdd3 	bl	80009bc <__aeabi_dcmplt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	f000 80ae 	beq.w	800af78 <_dtoa_r+0x518>
 800ae1c:	9b07      	ldr	r3, [sp, #28]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 80aa 	beq.w	800af78 <_dtoa_r+0x518>
 800ae24:	9b08      	ldr	r3, [sp, #32]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dd37      	ble.n	800ae9a <_dtoa_r+0x43a>
 800ae2a:	1e7b      	subs	r3, r7, #1
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	9304      	str	r3, [sp, #16]
 800ae30:	2200      	movs	r2, #0
 800ae32:	4629      	mov	r1, r5
 800ae34:	4b55      	ldr	r3, [pc, #340]	@ (800af8c <_dtoa_r+0x52c>)
 800ae36:	f7f5 fb4f 	bl	80004d8 <__aeabi_dmul>
 800ae3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae3e:	9c08      	ldr	r4, [sp, #32]
 800ae40:	3601      	adds	r6, #1
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7f5 fade 	bl	8000404 <__aeabi_i2d>
 800ae48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae4c:	f7f5 fb44 	bl	80004d8 <__aeabi_dmul>
 800ae50:	2200      	movs	r2, #0
 800ae52:	4b4f      	ldr	r3, [pc, #316]	@ (800af90 <_dtoa_r+0x530>)
 800ae54:	f7f5 f98a 	bl	800016c <__adddf3>
 800ae58:	4605      	mov	r5, r0
 800ae5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae5e:	2c00      	cmp	r4, #0
 800ae60:	f040 809a 	bne.w	800af98 <_dtoa_r+0x538>
 800ae64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	4b4a      	ldr	r3, [pc, #296]	@ (800af94 <_dtoa_r+0x534>)
 800ae6c:	f7f5 f97c 	bl	8000168 <__aeabi_dsub>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae78:	462a      	mov	r2, r5
 800ae7a:	4633      	mov	r3, r6
 800ae7c:	f7f5 fdbc 	bl	80009f8 <__aeabi_dcmpgt>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	f040 828e 	bne.w	800b3a2 <_dtoa_r+0x942>
 800ae86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae8a:	462a      	mov	r2, r5
 800ae8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae90:	f7f5 fd94 	bl	80009bc <__aeabi_dcmplt>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	f040 8127 	bne.w	800b0e8 <_dtoa_r+0x688>
 800ae9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ae9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aea2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f2c0 8163 	blt.w	800b170 <_dtoa_r+0x710>
 800aeaa:	2f0e      	cmp	r7, #14
 800aeac:	f300 8160 	bgt.w	800b170 <_dtoa_r+0x710>
 800aeb0:	4b33      	ldr	r3, [pc, #204]	@ (800af80 <_dtoa_r+0x520>)
 800aeb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aeb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aeba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aebe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	da03      	bge.n	800aecc <_dtoa_r+0x46c>
 800aec4:	9b07      	ldr	r3, [sp, #28]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f340 8100 	ble.w	800b0cc <_dtoa_r+0x66c>
 800aecc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aed0:	4656      	mov	r6, sl
 800aed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 fc27 	bl	800072c <__aeabi_ddiv>
 800aede:	f7f5 fdab 	bl	8000a38 <__aeabi_d2iz>
 800aee2:	4680      	mov	r8, r0
 800aee4:	f7f5 fa8e 	bl	8000404 <__aeabi_i2d>
 800aee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeec:	f7f5 faf4 	bl	80004d8 <__aeabi_dmul>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4620      	mov	r0, r4
 800aef6:	4629      	mov	r1, r5
 800aef8:	f7f5 f936 	bl	8000168 <__aeabi_dsub>
 800aefc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800af00:	9d07      	ldr	r5, [sp, #28]
 800af02:	f806 4b01 	strb.w	r4, [r6], #1
 800af06:	eba6 040a 	sub.w	r4, r6, sl
 800af0a:	42a5      	cmp	r5, r4
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	f040 8116 	bne.w	800b140 <_dtoa_r+0x6e0>
 800af14:	f7f5 f92a 	bl	800016c <__adddf3>
 800af18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af1c:	4604      	mov	r4, r0
 800af1e:	460d      	mov	r5, r1
 800af20:	f7f5 fd6a 	bl	80009f8 <__aeabi_dcmpgt>
 800af24:	2800      	cmp	r0, #0
 800af26:	f040 80f8 	bne.w	800b11a <_dtoa_r+0x6ba>
 800af2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af2e:	4620      	mov	r0, r4
 800af30:	4629      	mov	r1, r5
 800af32:	f7f5 fd39 	bl	80009a8 <__aeabi_dcmpeq>
 800af36:	b118      	cbz	r0, 800af40 <_dtoa_r+0x4e0>
 800af38:	f018 0f01 	tst.w	r8, #1
 800af3c:	f040 80ed 	bne.w	800b11a <_dtoa_r+0x6ba>
 800af40:	4649      	mov	r1, r9
 800af42:	4658      	mov	r0, fp
 800af44:	f000 ffde 	bl	800bf04 <_Bfree>
 800af48:	2300      	movs	r3, #0
 800af4a:	7033      	strb	r3, [r6, #0]
 800af4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af4e:	3701      	adds	r7, #1
 800af50:	601f      	str	r7, [r3, #0]
 800af52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 8320 	beq.w	800b59a <_dtoa_r+0xb3a>
 800af5a:	601e      	str	r6, [r3, #0]
 800af5c:	e31d      	b.n	800b59a <_dtoa_r+0xb3a>
 800af5e:	07e2      	lsls	r2, r4, #31
 800af60:	d505      	bpl.n	800af6e <_dtoa_r+0x50e>
 800af62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af66:	f7f5 fab7 	bl	80004d8 <__aeabi_dmul>
 800af6a:	2301      	movs	r3, #1
 800af6c:	3601      	adds	r6, #1
 800af6e:	1064      	asrs	r4, r4, #1
 800af70:	3508      	adds	r5, #8
 800af72:	e73f      	b.n	800adf4 <_dtoa_r+0x394>
 800af74:	2602      	movs	r6, #2
 800af76:	e742      	b.n	800adfe <_dtoa_r+0x39e>
 800af78:	9c07      	ldr	r4, [sp, #28]
 800af7a:	9704      	str	r7, [sp, #16]
 800af7c:	e761      	b.n	800ae42 <_dtoa_r+0x3e2>
 800af7e:	bf00      	nop
 800af80:	0800ed10 	.word	0x0800ed10
 800af84:	0800ece8 	.word	0x0800ece8
 800af88:	3ff00000 	.word	0x3ff00000
 800af8c:	40240000 	.word	0x40240000
 800af90:	401c0000 	.word	0x401c0000
 800af94:	40140000 	.word	0x40140000
 800af98:	4b70      	ldr	r3, [pc, #448]	@ (800b15c <_dtoa_r+0x6fc>)
 800af9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afa4:	4454      	add	r4, sl
 800afa6:	2900      	cmp	r1, #0
 800afa8:	d045      	beq.n	800b036 <_dtoa_r+0x5d6>
 800afaa:	2000      	movs	r0, #0
 800afac:	496c      	ldr	r1, [pc, #432]	@ (800b160 <_dtoa_r+0x700>)
 800afae:	f7f5 fbbd 	bl	800072c <__aeabi_ddiv>
 800afb2:	4633      	mov	r3, r6
 800afb4:	462a      	mov	r2, r5
 800afb6:	f7f5 f8d7 	bl	8000168 <__aeabi_dsub>
 800afba:	4656      	mov	r6, sl
 800afbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800afc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afc4:	f7f5 fd38 	bl	8000a38 <__aeabi_d2iz>
 800afc8:	4605      	mov	r5, r0
 800afca:	f7f5 fa1b 	bl	8000404 <__aeabi_i2d>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd6:	f7f5 f8c7 	bl	8000168 <__aeabi_dsub>
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	3530      	adds	r5, #48	@ 0x30
 800afe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afe4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800afe8:	f806 5b01 	strb.w	r5, [r6], #1
 800afec:	f7f5 fce6 	bl	80009bc <__aeabi_dcmplt>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d163      	bne.n	800b0bc <_dtoa_r+0x65c>
 800aff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aff8:	2000      	movs	r0, #0
 800affa:	495a      	ldr	r1, [pc, #360]	@ (800b164 <_dtoa_r+0x704>)
 800affc:	f7f5 f8b4 	bl	8000168 <__aeabi_dsub>
 800b000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b004:	f7f5 fcda 	bl	80009bc <__aeabi_dcmplt>
 800b008:	2800      	cmp	r0, #0
 800b00a:	f040 8087 	bne.w	800b11c <_dtoa_r+0x6bc>
 800b00e:	42a6      	cmp	r6, r4
 800b010:	f43f af43 	beq.w	800ae9a <_dtoa_r+0x43a>
 800b014:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b018:	2200      	movs	r2, #0
 800b01a:	4b53      	ldr	r3, [pc, #332]	@ (800b168 <_dtoa_r+0x708>)
 800b01c:	f7f5 fa5c 	bl	80004d8 <__aeabi_dmul>
 800b020:	2200      	movs	r2, #0
 800b022:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b02a:	4b4f      	ldr	r3, [pc, #316]	@ (800b168 <_dtoa_r+0x708>)
 800b02c:	f7f5 fa54 	bl	80004d8 <__aeabi_dmul>
 800b030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b034:	e7c4      	b.n	800afc0 <_dtoa_r+0x560>
 800b036:	4631      	mov	r1, r6
 800b038:	4628      	mov	r0, r5
 800b03a:	f7f5 fa4d 	bl	80004d8 <__aeabi_dmul>
 800b03e:	4656      	mov	r6, sl
 800b040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b044:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b04a:	f7f5 fcf5 	bl	8000a38 <__aeabi_d2iz>
 800b04e:	4605      	mov	r5, r0
 800b050:	f7f5 f9d8 	bl	8000404 <__aeabi_i2d>
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b05c:	f7f5 f884 	bl	8000168 <__aeabi_dsub>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	3530      	adds	r5, #48	@ 0x30
 800b066:	f806 5b01 	strb.w	r5, [r6], #1
 800b06a:	42a6      	cmp	r6, r4
 800b06c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b070:	f04f 0200 	mov.w	r2, #0
 800b074:	d124      	bne.n	800b0c0 <_dtoa_r+0x660>
 800b076:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b07a:	4b39      	ldr	r3, [pc, #228]	@ (800b160 <_dtoa_r+0x700>)
 800b07c:	f7f5 f876 	bl	800016c <__adddf3>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b088:	f7f5 fcb6 	bl	80009f8 <__aeabi_dcmpgt>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d145      	bne.n	800b11c <_dtoa_r+0x6bc>
 800b090:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b094:	2000      	movs	r0, #0
 800b096:	4932      	ldr	r1, [pc, #200]	@ (800b160 <_dtoa_r+0x700>)
 800b098:	f7f5 f866 	bl	8000168 <__aeabi_dsub>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a4:	f7f5 fc8a 	bl	80009bc <__aeabi_dcmplt>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	f43f aef6 	beq.w	800ae9a <_dtoa_r+0x43a>
 800b0ae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b0b0:	1e73      	subs	r3, r6, #1
 800b0b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0b8:	2b30      	cmp	r3, #48	@ 0x30
 800b0ba:	d0f8      	beq.n	800b0ae <_dtoa_r+0x64e>
 800b0bc:	9f04      	ldr	r7, [sp, #16]
 800b0be:	e73f      	b.n	800af40 <_dtoa_r+0x4e0>
 800b0c0:	4b29      	ldr	r3, [pc, #164]	@ (800b168 <_dtoa_r+0x708>)
 800b0c2:	f7f5 fa09 	bl	80004d8 <__aeabi_dmul>
 800b0c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ca:	e7bc      	b.n	800b046 <_dtoa_r+0x5e6>
 800b0cc:	d10c      	bne.n	800b0e8 <_dtoa_r+0x688>
 800b0ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	4b25      	ldr	r3, [pc, #148]	@ (800b16c <_dtoa_r+0x70c>)
 800b0d6:	f7f5 f9ff 	bl	80004d8 <__aeabi_dmul>
 800b0da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0de:	f7f5 fc81 	bl	80009e4 <__aeabi_dcmpge>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	f000 815b 	beq.w	800b39e <_dtoa_r+0x93e>
 800b0e8:	2400      	movs	r4, #0
 800b0ea:	4625      	mov	r5, r4
 800b0ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0ee:	4656      	mov	r6, sl
 800b0f0:	43db      	mvns	r3, r3
 800b0f2:	9304      	str	r3, [sp, #16]
 800b0f4:	2700      	movs	r7, #0
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	4658      	mov	r0, fp
 800b0fa:	f000 ff03 	bl	800bf04 <_Bfree>
 800b0fe:	2d00      	cmp	r5, #0
 800b100:	d0dc      	beq.n	800b0bc <_dtoa_r+0x65c>
 800b102:	b12f      	cbz	r7, 800b110 <_dtoa_r+0x6b0>
 800b104:	42af      	cmp	r7, r5
 800b106:	d003      	beq.n	800b110 <_dtoa_r+0x6b0>
 800b108:	4639      	mov	r1, r7
 800b10a:	4658      	mov	r0, fp
 800b10c:	f000 fefa 	bl	800bf04 <_Bfree>
 800b110:	4629      	mov	r1, r5
 800b112:	4658      	mov	r0, fp
 800b114:	f000 fef6 	bl	800bf04 <_Bfree>
 800b118:	e7d0      	b.n	800b0bc <_dtoa_r+0x65c>
 800b11a:	9704      	str	r7, [sp, #16]
 800b11c:	4633      	mov	r3, r6
 800b11e:	461e      	mov	r6, r3
 800b120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b124:	2a39      	cmp	r2, #57	@ 0x39
 800b126:	d107      	bne.n	800b138 <_dtoa_r+0x6d8>
 800b128:	459a      	cmp	sl, r3
 800b12a:	d1f8      	bne.n	800b11e <_dtoa_r+0x6be>
 800b12c:	9a04      	ldr	r2, [sp, #16]
 800b12e:	3201      	adds	r2, #1
 800b130:	9204      	str	r2, [sp, #16]
 800b132:	2230      	movs	r2, #48	@ 0x30
 800b134:	f88a 2000 	strb.w	r2, [sl]
 800b138:	781a      	ldrb	r2, [r3, #0]
 800b13a:	3201      	adds	r2, #1
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	e7bd      	b.n	800b0bc <_dtoa_r+0x65c>
 800b140:	2200      	movs	r2, #0
 800b142:	4b09      	ldr	r3, [pc, #36]	@ (800b168 <_dtoa_r+0x708>)
 800b144:	f7f5 f9c8 	bl	80004d8 <__aeabi_dmul>
 800b148:	2200      	movs	r2, #0
 800b14a:	2300      	movs	r3, #0
 800b14c:	4604      	mov	r4, r0
 800b14e:	460d      	mov	r5, r1
 800b150:	f7f5 fc2a 	bl	80009a8 <__aeabi_dcmpeq>
 800b154:	2800      	cmp	r0, #0
 800b156:	f43f aebc 	beq.w	800aed2 <_dtoa_r+0x472>
 800b15a:	e6f1      	b.n	800af40 <_dtoa_r+0x4e0>
 800b15c:	0800ed10 	.word	0x0800ed10
 800b160:	3fe00000 	.word	0x3fe00000
 800b164:	3ff00000 	.word	0x3ff00000
 800b168:	40240000 	.word	0x40240000
 800b16c:	40140000 	.word	0x40140000
 800b170:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b172:	2a00      	cmp	r2, #0
 800b174:	f000 80db 	beq.w	800b32e <_dtoa_r+0x8ce>
 800b178:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b17a:	2a01      	cmp	r2, #1
 800b17c:	f300 80bf 	bgt.w	800b2fe <_dtoa_r+0x89e>
 800b180:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b182:	2a00      	cmp	r2, #0
 800b184:	f000 80b7 	beq.w	800b2f6 <_dtoa_r+0x896>
 800b188:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b18c:	4646      	mov	r6, r8
 800b18e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b192:	2101      	movs	r1, #1
 800b194:	441a      	add	r2, r3
 800b196:	4658      	mov	r0, fp
 800b198:	4498      	add	r8, r3
 800b19a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b19c:	f000 ffb0 	bl	800c100 <__i2b>
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	b15e      	cbz	r6, 800b1bc <_dtoa_r+0x75c>
 800b1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	dd08      	ble.n	800b1bc <_dtoa_r+0x75c>
 800b1aa:	42b3      	cmp	r3, r6
 800b1ac:	bfa8      	it	ge
 800b1ae:	4633      	movge	r3, r6
 800b1b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1b2:	eba8 0803 	sub.w	r8, r8, r3
 800b1b6:	1af6      	subs	r6, r6, r3
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1be:	b1f3      	cbz	r3, 800b1fe <_dtoa_r+0x79e>
 800b1c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 80b7 	beq.w	800b336 <_dtoa_r+0x8d6>
 800b1c8:	b18c      	cbz	r4, 800b1ee <_dtoa_r+0x78e>
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	4658      	mov	r0, fp
 800b1d0:	f001 f854 	bl	800c27c <__pow5mult>
 800b1d4:	464a      	mov	r2, r9
 800b1d6:	4601      	mov	r1, r0
 800b1d8:	4605      	mov	r5, r0
 800b1da:	4658      	mov	r0, fp
 800b1dc:	f000 ffa6 	bl	800c12c <__multiply>
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	9004      	str	r0, [sp, #16]
 800b1e4:	4658      	mov	r0, fp
 800b1e6:	f000 fe8d 	bl	800bf04 <_Bfree>
 800b1ea:	9b04      	ldr	r3, [sp, #16]
 800b1ec:	4699      	mov	r9, r3
 800b1ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1f0:	1b1a      	subs	r2, r3, r4
 800b1f2:	d004      	beq.n	800b1fe <_dtoa_r+0x79e>
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	4658      	mov	r0, fp
 800b1f8:	f001 f840 	bl	800c27c <__pow5mult>
 800b1fc:	4681      	mov	r9, r0
 800b1fe:	2101      	movs	r1, #1
 800b200:	4658      	mov	r0, fp
 800b202:	f000 ff7d 	bl	800c100 <__i2b>
 800b206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b208:	4604      	mov	r4, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 81c9 	beq.w	800b5a2 <_dtoa_r+0xb42>
 800b210:	461a      	mov	r2, r3
 800b212:	4601      	mov	r1, r0
 800b214:	4658      	mov	r0, fp
 800b216:	f001 f831 	bl	800c27c <__pow5mult>
 800b21a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b21c:	4604      	mov	r4, r0
 800b21e:	2b01      	cmp	r3, #1
 800b220:	f300 808f 	bgt.w	800b342 <_dtoa_r+0x8e2>
 800b224:	9b02      	ldr	r3, [sp, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	f040 8087 	bne.w	800b33a <_dtoa_r+0x8da>
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b232:	2b00      	cmp	r3, #0
 800b234:	f040 8083 	bne.w	800b33e <_dtoa_r+0x8de>
 800b238:	9b03      	ldr	r3, [sp, #12]
 800b23a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b23e:	0d1b      	lsrs	r3, r3, #20
 800b240:	051b      	lsls	r3, r3, #20
 800b242:	b12b      	cbz	r3, 800b250 <_dtoa_r+0x7f0>
 800b244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b246:	f108 0801 	add.w	r8, r8, #1
 800b24a:	3301      	adds	r3, #1
 800b24c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b24e:	2301      	movs	r3, #1
 800b250:	930a      	str	r3, [sp, #40]	@ 0x28
 800b252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 81aa 	beq.w	800b5ae <_dtoa_r+0xb4e>
 800b25a:	6923      	ldr	r3, [r4, #16]
 800b25c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b260:	6918      	ldr	r0, [r3, #16]
 800b262:	f000 ff01 	bl	800c068 <__hi0bits>
 800b266:	f1c0 0020 	rsb	r0, r0, #32
 800b26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b26c:	4418      	add	r0, r3
 800b26e:	f010 001f 	ands.w	r0, r0, #31
 800b272:	d071      	beq.n	800b358 <_dtoa_r+0x8f8>
 800b274:	f1c0 0320 	rsb	r3, r0, #32
 800b278:	2b04      	cmp	r3, #4
 800b27a:	dd65      	ble.n	800b348 <_dtoa_r+0x8e8>
 800b27c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b27e:	f1c0 001c 	rsb	r0, r0, #28
 800b282:	4403      	add	r3, r0
 800b284:	4480      	add	r8, r0
 800b286:	4406      	add	r6, r0
 800b288:	9309      	str	r3, [sp, #36]	@ 0x24
 800b28a:	f1b8 0f00 	cmp.w	r8, #0
 800b28e:	dd05      	ble.n	800b29c <_dtoa_r+0x83c>
 800b290:	4649      	mov	r1, r9
 800b292:	4642      	mov	r2, r8
 800b294:	4658      	mov	r0, fp
 800b296:	f001 f84b 	bl	800c330 <__lshift>
 800b29a:	4681      	mov	r9, r0
 800b29c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	dd05      	ble.n	800b2ae <_dtoa_r+0x84e>
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	4658      	mov	r0, fp
 800b2a8:	f001 f842 	bl	800c330 <__lshift>
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d053      	beq.n	800b35c <_dtoa_r+0x8fc>
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	4648      	mov	r0, r9
 800b2b8:	f001 f8a6 	bl	800c408 <__mcmp>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	da4d      	bge.n	800b35c <_dtoa_r+0x8fc>
 800b2c0:	1e7b      	subs	r3, r7, #1
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	9304      	str	r3, [sp, #16]
 800b2c6:	220a      	movs	r2, #10
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4658      	mov	r0, fp
 800b2cc:	f000 fe3c 	bl	800bf48 <__multadd>
 800b2d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2d2:	4681      	mov	r9, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 816c 	beq.w	800b5b2 <_dtoa_r+0xb52>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4629      	mov	r1, r5
 800b2de:	220a      	movs	r2, #10
 800b2e0:	4658      	mov	r0, fp
 800b2e2:	f000 fe31 	bl	800bf48 <__multadd>
 800b2e6:	9b08      	ldr	r3, [sp, #32]
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	dc61      	bgt.n	800b3b2 <_dtoa_r+0x952>
 800b2ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	dc3b      	bgt.n	800b36c <_dtoa_r+0x90c>
 800b2f4:	e05d      	b.n	800b3b2 <_dtoa_r+0x952>
 800b2f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2f8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b2fc:	e746      	b.n	800b18c <_dtoa_r+0x72c>
 800b2fe:	9b07      	ldr	r3, [sp, #28]
 800b300:	1e5c      	subs	r4, r3, #1
 800b302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b304:	42a3      	cmp	r3, r4
 800b306:	bfbf      	itttt	lt
 800b308:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b30a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b30c:	1ae3      	sublt	r3, r4, r3
 800b30e:	18d2      	addlt	r2, r2, r3
 800b310:	bfa8      	it	ge
 800b312:	1b1c      	subge	r4, r3, r4
 800b314:	9b07      	ldr	r3, [sp, #28]
 800b316:	bfbe      	ittt	lt
 800b318:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b31a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b31c:	2400      	movlt	r4, #0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	bfb5      	itete	lt
 800b322:	eba8 0603 	sublt.w	r6, r8, r3
 800b326:	4646      	movge	r6, r8
 800b328:	2300      	movlt	r3, #0
 800b32a:	9b07      	ldrge	r3, [sp, #28]
 800b32c:	e730      	b.n	800b190 <_dtoa_r+0x730>
 800b32e:	4646      	mov	r6, r8
 800b330:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b332:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b334:	e735      	b.n	800b1a2 <_dtoa_r+0x742>
 800b336:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b338:	e75c      	b.n	800b1f4 <_dtoa_r+0x794>
 800b33a:	2300      	movs	r3, #0
 800b33c:	e788      	b.n	800b250 <_dtoa_r+0x7f0>
 800b33e:	9b02      	ldr	r3, [sp, #8]
 800b340:	e786      	b.n	800b250 <_dtoa_r+0x7f0>
 800b342:	2300      	movs	r3, #0
 800b344:	930a      	str	r3, [sp, #40]	@ 0x28
 800b346:	e788      	b.n	800b25a <_dtoa_r+0x7fa>
 800b348:	d09f      	beq.n	800b28a <_dtoa_r+0x82a>
 800b34a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b34c:	331c      	adds	r3, #28
 800b34e:	441a      	add	r2, r3
 800b350:	4498      	add	r8, r3
 800b352:	441e      	add	r6, r3
 800b354:	9209      	str	r2, [sp, #36]	@ 0x24
 800b356:	e798      	b.n	800b28a <_dtoa_r+0x82a>
 800b358:	4603      	mov	r3, r0
 800b35a:	e7f6      	b.n	800b34a <_dtoa_r+0x8ea>
 800b35c:	9b07      	ldr	r3, [sp, #28]
 800b35e:	9704      	str	r7, [sp, #16]
 800b360:	2b00      	cmp	r3, #0
 800b362:	dc20      	bgt.n	800b3a6 <_dtoa_r+0x946>
 800b364:	9308      	str	r3, [sp, #32]
 800b366:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b368:	2b02      	cmp	r3, #2
 800b36a:	dd1e      	ble.n	800b3aa <_dtoa_r+0x94a>
 800b36c:	9b08      	ldr	r3, [sp, #32]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f47f aebc 	bne.w	800b0ec <_dtoa_r+0x68c>
 800b374:	4621      	mov	r1, r4
 800b376:	2205      	movs	r2, #5
 800b378:	4658      	mov	r0, fp
 800b37a:	f000 fde5 	bl	800bf48 <__multadd>
 800b37e:	4601      	mov	r1, r0
 800b380:	4604      	mov	r4, r0
 800b382:	4648      	mov	r0, r9
 800b384:	f001 f840 	bl	800c408 <__mcmp>
 800b388:	2800      	cmp	r0, #0
 800b38a:	f77f aeaf 	ble.w	800b0ec <_dtoa_r+0x68c>
 800b38e:	2331      	movs	r3, #49	@ 0x31
 800b390:	4656      	mov	r6, sl
 800b392:	f806 3b01 	strb.w	r3, [r6], #1
 800b396:	9b04      	ldr	r3, [sp, #16]
 800b398:	3301      	adds	r3, #1
 800b39a:	9304      	str	r3, [sp, #16]
 800b39c:	e6aa      	b.n	800b0f4 <_dtoa_r+0x694>
 800b39e:	9c07      	ldr	r4, [sp, #28]
 800b3a0:	9704      	str	r7, [sp, #16]
 800b3a2:	4625      	mov	r5, r4
 800b3a4:	e7f3      	b.n	800b38e <_dtoa_r+0x92e>
 800b3a6:	9b07      	ldr	r3, [sp, #28]
 800b3a8:	9308      	str	r3, [sp, #32]
 800b3aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 8104 	beq.w	800b5ba <_dtoa_r+0xb5a>
 800b3b2:	2e00      	cmp	r6, #0
 800b3b4:	dd05      	ble.n	800b3c2 <_dtoa_r+0x962>
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	4658      	mov	r0, fp
 800b3bc:	f000 ffb8 	bl	800c330 <__lshift>
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d05a      	beq.n	800b47e <_dtoa_r+0xa1e>
 800b3c8:	4658      	mov	r0, fp
 800b3ca:	6869      	ldr	r1, [r5, #4]
 800b3cc:	f000 fd5a 	bl	800be84 <_Balloc>
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	b928      	cbnz	r0, 800b3e0 <_dtoa_r+0x980>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b3da:	4b83      	ldr	r3, [pc, #524]	@ (800b5e8 <_dtoa_r+0xb88>)
 800b3dc:	f7ff bb54 	b.w	800aa88 <_dtoa_r+0x28>
 800b3e0:	692a      	ldr	r2, [r5, #16]
 800b3e2:	f105 010c 	add.w	r1, r5, #12
 800b3e6:	3202      	adds	r2, #2
 800b3e8:	0092      	lsls	r2, r2, #2
 800b3ea:	300c      	adds	r0, #12
 800b3ec:	f7ff fa9b 	bl	800a926 <memcpy>
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4658      	mov	r0, fp
 800b3f6:	f000 ff9b 	bl	800c330 <__lshift>
 800b3fa:	462f      	mov	r7, r5
 800b3fc:	4605      	mov	r5, r0
 800b3fe:	f10a 0301 	add.w	r3, sl, #1
 800b402:	9307      	str	r3, [sp, #28]
 800b404:	9b08      	ldr	r3, [sp, #32]
 800b406:	4453      	add	r3, sl
 800b408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b40a:	9b02      	ldr	r3, [sp, #8]
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	930a      	str	r3, [sp, #40]	@ 0x28
 800b412:	9b07      	ldr	r3, [sp, #28]
 800b414:	4621      	mov	r1, r4
 800b416:	3b01      	subs	r3, #1
 800b418:	4648      	mov	r0, r9
 800b41a:	9302      	str	r3, [sp, #8]
 800b41c:	f7ff fa98 	bl	800a950 <quorem>
 800b420:	4639      	mov	r1, r7
 800b422:	9008      	str	r0, [sp, #32]
 800b424:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b428:	4648      	mov	r0, r9
 800b42a:	f000 ffed 	bl	800c408 <__mcmp>
 800b42e:	462a      	mov	r2, r5
 800b430:	9009      	str	r0, [sp, #36]	@ 0x24
 800b432:	4621      	mov	r1, r4
 800b434:	4658      	mov	r0, fp
 800b436:	f001 f803 	bl	800c440 <__mdiff>
 800b43a:	68c2      	ldr	r2, [r0, #12]
 800b43c:	4606      	mov	r6, r0
 800b43e:	bb02      	cbnz	r2, 800b482 <_dtoa_r+0xa22>
 800b440:	4601      	mov	r1, r0
 800b442:	4648      	mov	r0, r9
 800b444:	f000 ffe0 	bl	800c408 <__mcmp>
 800b448:	4602      	mov	r2, r0
 800b44a:	4631      	mov	r1, r6
 800b44c:	4658      	mov	r0, fp
 800b44e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b450:	f000 fd58 	bl	800bf04 <_Bfree>
 800b454:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b456:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b458:	9e07      	ldr	r6, [sp, #28]
 800b45a:	ea43 0102 	orr.w	r1, r3, r2
 800b45e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b460:	4319      	orrs	r1, r3
 800b462:	d110      	bne.n	800b486 <_dtoa_r+0xa26>
 800b464:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b468:	d029      	beq.n	800b4be <_dtoa_r+0xa5e>
 800b46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dd02      	ble.n	800b476 <_dtoa_r+0xa16>
 800b470:	9b08      	ldr	r3, [sp, #32]
 800b472:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b476:	9b02      	ldr	r3, [sp, #8]
 800b478:	f883 8000 	strb.w	r8, [r3]
 800b47c:	e63b      	b.n	800b0f6 <_dtoa_r+0x696>
 800b47e:	4628      	mov	r0, r5
 800b480:	e7bb      	b.n	800b3fa <_dtoa_r+0x99a>
 800b482:	2201      	movs	r2, #1
 800b484:	e7e1      	b.n	800b44a <_dtoa_r+0x9ea>
 800b486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b488:	2b00      	cmp	r3, #0
 800b48a:	db04      	blt.n	800b496 <_dtoa_r+0xa36>
 800b48c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b48e:	430b      	orrs	r3, r1
 800b490:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b492:	430b      	orrs	r3, r1
 800b494:	d120      	bne.n	800b4d8 <_dtoa_r+0xa78>
 800b496:	2a00      	cmp	r2, #0
 800b498:	dded      	ble.n	800b476 <_dtoa_r+0xa16>
 800b49a:	4649      	mov	r1, r9
 800b49c:	2201      	movs	r2, #1
 800b49e:	4658      	mov	r0, fp
 800b4a0:	f000 ff46 	bl	800c330 <__lshift>
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4681      	mov	r9, r0
 800b4a8:	f000 ffae 	bl	800c408 <__mcmp>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	dc03      	bgt.n	800b4b8 <_dtoa_r+0xa58>
 800b4b0:	d1e1      	bne.n	800b476 <_dtoa_r+0xa16>
 800b4b2:	f018 0f01 	tst.w	r8, #1
 800b4b6:	d0de      	beq.n	800b476 <_dtoa_r+0xa16>
 800b4b8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b4bc:	d1d8      	bne.n	800b470 <_dtoa_r+0xa10>
 800b4be:	2339      	movs	r3, #57	@ 0x39
 800b4c0:	9a02      	ldr	r2, [sp, #8]
 800b4c2:	7013      	strb	r3, [r2, #0]
 800b4c4:	4633      	mov	r3, r6
 800b4c6:	461e      	mov	r6, r3
 800b4c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	2a39      	cmp	r2, #57	@ 0x39
 800b4d0:	d052      	beq.n	800b578 <_dtoa_r+0xb18>
 800b4d2:	3201      	adds	r2, #1
 800b4d4:	701a      	strb	r2, [r3, #0]
 800b4d6:	e60e      	b.n	800b0f6 <_dtoa_r+0x696>
 800b4d8:	2a00      	cmp	r2, #0
 800b4da:	dd07      	ble.n	800b4ec <_dtoa_r+0xa8c>
 800b4dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b4e0:	d0ed      	beq.n	800b4be <_dtoa_r+0xa5e>
 800b4e2:	9a02      	ldr	r2, [sp, #8]
 800b4e4:	f108 0301 	add.w	r3, r8, #1
 800b4e8:	7013      	strb	r3, [r2, #0]
 800b4ea:	e604      	b.n	800b0f6 <_dtoa_r+0x696>
 800b4ec:	9b07      	ldr	r3, [sp, #28]
 800b4ee:	9a07      	ldr	r2, [sp, #28]
 800b4f0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b4f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d028      	beq.n	800b54c <_dtoa_r+0xaec>
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	220a      	movs	r2, #10
 800b500:	4658      	mov	r0, fp
 800b502:	f000 fd21 	bl	800bf48 <__multadd>
 800b506:	42af      	cmp	r7, r5
 800b508:	4681      	mov	r9, r0
 800b50a:	f04f 0300 	mov.w	r3, #0
 800b50e:	f04f 020a 	mov.w	r2, #10
 800b512:	4639      	mov	r1, r7
 800b514:	4658      	mov	r0, fp
 800b516:	d107      	bne.n	800b528 <_dtoa_r+0xac8>
 800b518:	f000 fd16 	bl	800bf48 <__multadd>
 800b51c:	4607      	mov	r7, r0
 800b51e:	4605      	mov	r5, r0
 800b520:	9b07      	ldr	r3, [sp, #28]
 800b522:	3301      	adds	r3, #1
 800b524:	9307      	str	r3, [sp, #28]
 800b526:	e774      	b.n	800b412 <_dtoa_r+0x9b2>
 800b528:	f000 fd0e 	bl	800bf48 <__multadd>
 800b52c:	4629      	mov	r1, r5
 800b52e:	4607      	mov	r7, r0
 800b530:	2300      	movs	r3, #0
 800b532:	220a      	movs	r2, #10
 800b534:	4658      	mov	r0, fp
 800b536:	f000 fd07 	bl	800bf48 <__multadd>
 800b53a:	4605      	mov	r5, r0
 800b53c:	e7f0      	b.n	800b520 <_dtoa_r+0xac0>
 800b53e:	9b08      	ldr	r3, [sp, #32]
 800b540:	2700      	movs	r7, #0
 800b542:	2b00      	cmp	r3, #0
 800b544:	bfcc      	ite	gt
 800b546:	461e      	movgt	r6, r3
 800b548:	2601      	movle	r6, #1
 800b54a:	4456      	add	r6, sl
 800b54c:	4649      	mov	r1, r9
 800b54e:	2201      	movs	r2, #1
 800b550:	4658      	mov	r0, fp
 800b552:	f000 feed 	bl	800c330 <__lshift>
 800b556:	4621      	mov	r1, r4
 800b558:	4681      	mov	r9, r0
 800b55a:	f000 ff55 	bl	800c408 <__mcmp>
 800b55e:	2800      	cmp	r0, #0
 800b560:	dcb0      	bgt.n	800b4c4 <_dtoa_r+0xa64>
 800b562:	d102      	bne.n	800b56a <_dtoa_r+0xb0a>
 800b564:	f018 0f01 	tst.w	r8, #1
 800b568:	d1ac      	bne.n	800b4c4 <_dtoa_r+0xa64>
 800b56a:	4633      	mov	r3, r6
 800b56c:	461e      	mov	r6, r3
 800b56e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b572:	2a30      	cmp	r2, #48	@ 0x30
 800b574:	d0fa      	beq.n	800b56c <_dtoa_r+0xb0c>
 800b576:	e5be      	b.n	800b0f6 <_dtoa_r+0x696>
 800b578:	459a      	cmp	sl, r3
 800b57a:	d1a4      	bne.n	800b4c6 <_dtoa_r+0xa66>
 800b57c:	9b04      	ldr	r3, [sp, #16]
 800b57e:	3301      	adds	r3, #1
 800b580:	9304      	str	r3, [sp, #16]
 800b582:	2331      	movs	r3, #49	@ 0x31
 800b584:	f88a 3000 	strb.w	r3, [sl]
 800b588:	e5b5      	b.n	800b0f6 <_dtoa_r+0x696>
 800b58a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b58c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b5ec <_dtoa_r+0xb8c>
 800b590:	b11b      	cbz	r3, 800b59a <_dtoa_r+0xb3a>
 800b592:	f10a 0308 	add.w	r3, sl, #8
 800b596:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b598:	6013      	str	r3, [r2, #0]
 800b59a:	4650      	mov	r0, sl
 800b59c:	b017      	add	sp, #92	@ 0x5c
 800b59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	f77f ae3d 	ble.w	800b224 <_dtoa_r+0x7c4>
 800b5aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	e65b      	b.n	800b26a <_dtoa_r+0x80a>
 800b5b2:	9b08      	ldr	r3, [sp, #32]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f77f aed6 	ble.w	800b366 <_dtoa_r+0x906>
 800b5ba:	4656      	mov	r6, sl
 800b5bc:	4621      	mov	r1, r4
 800b5be:	4648      	mov	r0, r9
 800b5c0:	f7ff f9c6 	bl	800a950 <quorem>
 800b5c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b5c8:	9b08      	ldr	r3, [sp, #32]
 800b5ca:	f806 8b01 	strb.w	r8, [r6], #1
 800b5ce:	eba6 020a 	sub.w	r2, r6, sl
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	ddb3      	ble.n	800b53e <_dtoa_r+0xade>
 800b5d6:	4649      	mov	r1, r9
 800b5d8:	2300      	movs	r3, #0
 800b5da:	220a      	movs	r2, #10
 800b5dc:	4658      	mov	r0, fp
 800b5de:	f000 fcb3 	bl	800bf48 <__multadd>
 800b5e2:	4681      	mov	r9, r0
 800b5e4:	e7ea      	b.n	800b5bc <_dtoa_r+0xb5c>
 800b5e6:	bf00      	nop
 800b5e8:	0800ec11 	.word	0x0800ec11
 800b5ec:	0800eb95 	.word	0x0800eb95

0800b5f0 <_free_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	2900      	cmp	r1, #0
 800b5f6:	d040      	beq.n	800b67a <_free_r+0x8a>
 800b5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5fc:	1f0c      	subs	r4, r1, #4
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	bfb8      	it	lt
 800b602:	18e4      	addlt	r4, r4, r3
 800b604:	f000 fc32 	bl	800be6c <__malloc_lock>
 800b608:	4a1c      	ldr	r2, [pc, #112]	@ (800b67c <_free_r+0x8c>)
 800b60a:	6813      	ldr	r3, [r2, #0]
 800b60c:	b933      	cbnz	r3, 800b61c <_free_r+0x2c>
 800b60e:	6063      	str	r3, [r4, #4]
 800b610:	6014      	str	r4, [r2, #0]
 800b612:	4628      	mov	r0, r5
 800b614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b618:	f000 bc2e 	b.w	800be78 <__malloc_unlock>
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	d908      	bls.n	800b632 <_free_r+0x42>
 800b620:	6820      	ldr	r0, [r4, #0]
 800b622:	1821      	adds	r1, r4, r0
 800b624:	428b      	cmp	r3, r1
 800b626:	bf01      	itttt	eq
 800b628:	6819      	ldreq	r1, [r3, #0]
 800b62a:	685b      	ldreq	r3, [r3, #4]
 800b62c:	1809      	addeq	r1, r1, r0
 800b62e:	6021      	streq	r1, [r4, #0]
 800b630:	e7ed      	b.n	800b60e <_free_r+0x1e>
 800b632:	461a      	mov	r2, r3
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	b10b      	cbz	r3, 800b63c <_free_r+0x4c>
 800b638:	42a3      	cmp	r3, r4
 800b63a:	d9fa      	bls.n	800b632 <_free_r+0x42>
 800b63c:	6811      	ldr	r1, [r2, #0]
 800b63e:	1850      	adds	r0, r2, r1
 800b640:	42a0      	cmp	r0, r4
 800b642:	d10b      	bne.n	800b65c <_free_r+0x6c>
 800b644:	6820      	ldr	r0, [r4, #0]
 800b646:	4401      	add	r1, r0
 800b648:	1850      	adds	r0, r2, r1
 800b64a:	4283      	cmp	r3, r0
 800b64c:	6011      	str	r1, [r2, #0]
 800b64e:	d1e0      	bne.n	800b612 <_free_r+0x22>
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	4408      	add	r0, r1
 800b656:	6010      	str	r0, [r2, #0]
 800b658:	6053      	str	r3, [r2, #4]
 800b65a:	e7da      	b.n	800b612 <_free_r+0x22>
 800b65c:	d902      	bls.n	800b664 <_free_r+0x74>
 800b65e:	230c      	movs	r3, #12
 800b660:	602b      	str	r3, [r5, #0]
 800b662:	e7d6      	b.n	800b612 <_free_r+0x22>
 800b664:	6820      	ldr	r0, [r4, #0]
 800b666:	1821      	adds	r1, r4, r0
 800b668:	428b      	cmp	r3, r1
 800b66a:	bf01      	itttt	eq
 800b66c:	6819      	ldreq	r1, [r3, #0]
 800b66e:	685b      	ldreq	r3, [r3, #4]
 800b670:	1809      	addeq	r1, r1, r0
 800b672:	6021      	streq	r1, [r4, #0]
 800b674:	6063      	str	r3, [r4, #4]
 800b676:	6054      	str	r4, [r2, #4]
 800b678:	e7cb      	b.n	800b612 <_free_r+0x22>
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	200008d8 	.word	0x200008d8

0800b680 <rshift>:
 800b680:	6903      	ldr	r3, [r0, #16]
 800b682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b686:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b68a:	f100 0414 	add.w	r4, r0, #20
 800b68e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b692:	dd46      	ble.n	800b722 <rshift+0xa2>
 800b694:	f011 011f 	ands.w	r1, r1, #31
 800b698:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b69c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b6a0:	d10c      	bne.n	800b6bc <rshift+0x3c>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	f100 0710 	add.w	r7, r0, #16
 800b6a8:	42b1      	cmp	r1, r6
 800b6aa:	d335      	bcc.n	800b718 <rshift+0x98>
 800b6ac:	1a9b      	subs	r3, r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	1eea      	subs	r2, r5, #3
 800b6b2:	4296      	cmp	r6, r2
 800b6b4:	bf38      	it	cc
 800b6b6:	2300      	movcc	r3, #0
 800b6b8:	4423      	add	r3, r4
 800b6ba:	e015      	b.n	800b6e8 <rshift+0x68>
 800b6bc:	46a1      	mov	r9, r4
 800b6be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b6c2:	f1c1 0820 	rsb	r8, r1, #32
 800b6c6:	40cf      	lsrs	r7, r1
 800b6c8:	f105 0e04 	add.w	lr, r5, #4
 800b6cc:	4576      	cmp	r6, lr
 800b6ce:	46f4      	mov	ip, lr
 800b6d0:	d816      	bhi.n	800b700 <rshift+0x80>
 800b6d2:	1a9a      	subs	r2, r3, r2
 800b6d4:	0092      	lsls	r2, r2, #2
 800b6d6:	3a04      	subs	r2, #4
 800b6d8:	3501      	adds	r5, #1
 800b6da:	42ae      	cmp	r6, r5
 800b6dc:	bf38      	it	cc
 800b6de:	2200      	movcc	r2, #0
 800b6e0:	18a3      	adds	r3, r4, r2
 800b6e2:	50a7      	str	r7, [r4, r2]
 800b6e4:	b107      	cbz	r7, 800b6e8 <rshift+0x68>
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	eba3 0204 	sub.w	r2, r3, r4
 800b6ee:	bf08      	it	eq
 800b6f0:	2300      	moveq	r3, #0
 800b6f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b6f6:	6102      	str	r2, [r0, #16]
 800b6f8:	bf08      	it	eq
 800b6fa:	6143      	streq	r3, [r0, #20]
 800b6fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b700:	f8dc c000 	ldr.w	ip, [ip]
 800b704:	fa0c fc08 	lsl.w	ip, ip, r8
 800b708:	ea4c 0707 	orr.w	r7, ip, r7
 800b70c:	f849 7b04 	str.w	r7, [r9], #4
 800b710:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b714:	40cf      	lsrs	r7, r1
 800b716:	e7d9      	b.n	800b6cc <rshift+0x4c>
 800b718:	f851 cb04 	ldr.w	ip, [r1], #4
 800b71c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b720:	e7c2      	b.n	800b6a8 <rshift+0x28>
 800b722:	4623      	mov	r3, r4
 800b724:	e7e0      	b.n	800b6e8 <rshift+0x68>

0800b726 <__hexdig_fun>:
 800b726:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b72a:	2b09      	cmp	r3, #9
 800b72c:	d802      	bhi.n	800b734 <__hexdig_fun+0xe>
 800b72e:	3820      	subs	r0, #32
 800b730:	b2c0      	uxtb	r0, r0
 800b732:	4770      	bx	lr
 800b734:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b738:	2b05      	cmp	r3, #5
 800b73a:	d801      	bhi.n	800b740 <__hexdig_fun+0x1a>
 800b73c:	3847      	subs	r0, #71	@ 0x47
 800b73e:	e7f7      	b.n	800b730 <__hexdig_fun+0xa>
 800b740:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b744:	2b05      	cmp	r3, #5
 800b746:	d801      	bhi.n	800b74c <__hexdig_fun+0x26>
 800b748:	3827      	subs	r0, #39	@ 0x27
 800b74a:	e7f1      	b.n	800b730 <__hexdig_fun+0xa>
 800b74c:	2000      	movs	r0, #0
 800b74e:	4770      	bx	lr

0800b750 <__gethex>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	468a      	mov	sl, r1
 800b756:	4690      	mov	r8, r2
 800b758:	b085      	sub	sp, #20
 800b75a:	9302      	str	r3, [sp, #8]
 800b75c:	680b      	ldr	r3, [r1, #0]
 800b75e:	9001      	str	r0, [sp, #4]
 800b760:	1c9c      	adds	r4, r3, #2
 800b762:	46a1      	mov	r9, r4
 800b764:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b768:	2830      	cmp	r0, #48	@ 0x30
 800b76a:	d0fa      	beq.n	800b762 <__gethex+0x12>
 800b76c:	eba9 0303 	sub.w	r3, r9, r3
 800b770:	f1a3 0b02 	sub.w	fp, r3, #2
 800b774:	f7ff ffd7 	bl	800b726 <__hexdig_fun>
 800b778:	4605      	mov	r5, r0
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d168      	bne.n	800b850 <__gethex+0x100>
 800b77e:	2201      	movs	r2, #1
 800b780:	4648      	mov	r0, r9
 800b782:	499f      	ldr	r1, [pc, #636]	@ (800ba00 <__gethex+0x2b0>)
 800b784:	f7fe fff9 	bl	800a77a <strncmp>
 800b788:	4607      	mov	r7, r0
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d167      	bne.n	800b85e <__gethex+0x10e>
 800b78e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b792:	4626      	mov	r6, r4
 800b794:	f7ff ffc7 	bl	800b726 <__hexdig_fun>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d062      	beq.n	800b862 <__gethex+0x112>
 800b79c:	4623      	mov	r3, r4
 800b79e:	7818      	ldrb	r0, [r3, #0]
 800b7a0:	4699      	mov	r9, r3
 800b7a2:	2830      	cmp	r0, #48	@ 0x30
 800b7a4:	f103 0301 	add.w	r3, r3, #1
 800b7a8:	d0f9      	beq.n	800b79e <__gethex+0x4e>
 800b7aa:	f7ff ffbc 	bl	800b726 <__hexdig_fun>
 800b7ae:	fab0 f580 	clz	r5, r0
 800b7b2:	f04f 0b01 	mov.w	fp, #1
 800b7b6:	096d      	lsrs	r5, r5, #5
 800b7b8:	464a      	mov	r2, r9
 800b7ba:	4616      	mov	r6, r2
 800b7bc:	7830      	ldrb	r0, [r6, #0]
 800b7be:	3201      	adds	r2, #1
 800b7c0:	f7ff ffb1 	bl	800b726 <__hexdig_fun>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d1f8      	bne.n	800b7ba <__gethex+0x6a>
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	498c      	ldr	r1, [pc, #560]	@ (800ba00 <__gethex+0x2b0>)
 800b7ce:	f7fe ffd4 	bl	800a77a <strncmp>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d13f      	bne.n	800b856 <__gethex+0x106>
 800b7d6:	b944      	cbnz	r4, 800b7ea <__gethex+0x9a>
 800b7d8:	1c74      	adds	r4, r6, #1
 800b7da:	4622      	mov	r2, r4
 800b7dc:	4616      	mov	r6, r2
 800b7de:	7830      	ldrb	r0, [r6, #0]
 800b7e0:	3201      	adds	r2, #1
 800b7e2:	f7ff ffa0 	bl	800b726 <__hexdig_fun>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d1f8      	bne.n	800b7dc <__gethex+0x8c>
 800b7ea:	1ba4      	subs	r4, r4, r6
 800b7ec:	00a7      	lsls	r7, r4, #2
 800b7ee:	7833      	ldrb	r3, [r6, #0]
 800b7f0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b7f4:	2b50      	cmp	r3, #80	@ 0x50
 800b7f6:	d13e      	bne.n	800b876 <__gethex+0x126>
 800b7f8:	7873      	ldrb	r3, [r6, #1]
 800b7fa:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7fc:	d033      	beq.n	800b866 <__gethex+0x116>
 800b7fe:	2b2d      	cmp	r3, #45	@ 0x2d
 800b800:	d034      	beq.n	800b86c <__gethex+0x11c>
 800b802:	2400      	movs	r4, #0
 800b804:	1c71      	adds	r1, r6, #1
 800b806:	7808      	ldrb	r0, [r1, #0]
 800b808:	f7ff ff8d 	bl	800b726 <__hexdig_fun>
 800b80c:	1e43      	subs	r3, r0, #1
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b18      	cmp	r3, #24
 800b812:	d830      	bhi.n	800b876 <__gethex+0x126>
 800b814:	f1a0 0210 	sub.w	r2, r0, #16
 800b818:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b81c:	f7ff ff83 	bl	800b726 <__hexdig_fun>
 800b820:	f100 3cff 	add.w	ip, r0, #4294967295
 800b824:	fa5f fc8c 	uxtb.w	ip, ip
 800b828:	f1bc 0f18 	cmp.w	ip, #24
 800b82c:	f04f 030a 	mov.w	r3, #10
 800b830:	d91e      	bls.n	800b870 <__gethex+0x120>
 800b832:	b104      	cbz	r4, 800b836 <__gethex+0xe6>
 800b834:	4252      	negs	r2, r2
 800b836:	4417      	add	r7, r2
 800b838:	f8ca 1000 	str.w	r1, [sl]
 800b83c:	b1ed      	cbz	r5, 800b87a <__gethex+0x12a>
 800b83e:	f1bb 0f00 	cmp.w	fp, #0
 800b842:	bf0c      	ite	eq
 800b844:	2506      	moveq	r5, #6
 800b846:	2500      	movne	r5, #0
 800b848:	4628      	mov	r0, r5
 800b84a:	b005      	add	sp, #20
 800b84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b850:	2500      	movs	r5, #0
 800b852:	462c      	mov	r4, r5
 800b854:	e7b0      	b.n	800b7b8 <__gethex+0x68>
 800b856:	2c00      	cmp	r4, #0
 800b858:	d1c7      	bne.n	800b7ea <__gethex+0x9a>
 800b85a:	4627      	mov	r7, r4
 800b85c:	e7c7      	b.n	800b7ee <__gethex+0x9e>
 800b85e:	464e      	mov	r6, r9
 800b860:	462f      	mov	r7, r5
 800b862:	2501      	movs	r5, #1
 800b864:	e7c3      	b.n	800b7ee <__gethex+0x9e>
 800b866:	2400      	movs	r4, #0
 800b868:	1cb1      	adds	r1, r6, #2
 800b86a:	e7cc      	b.n	800b806 <__gethex+0xb6>
 800b86c:	2401      	movs	r4, #1
 800b86e:	e7fb      	b.n	800b868 <__gethex+0x118>
 800b870:	fb03 0002 	mla	r0, r3, r2, r0
 800b874:	e7ce      	b.n	800b814 <__gethex+0xc4>
 800b876:	4631      	mov	r1, r6
 800b878:	e7de      	b.n	800b838 <__gethex+0xe8>
 800b87a:	4629      	mov	r1, r5
 800b87c:	eba6 0309 	sub.w	r3, r6, r9
 800b880:	3b01      	subs	r3, #1
 800b882:	2b07      	cmp	r3, #7
 800b884:	dc0a      	bgt.n	800b89c <__gethex+0x14c>
 800b886:	9801      	ldr	r0, [sp, #4]
 800b888:	f000 fafc 	bl	800be84 <_Balloc>
 800b88c:	4604      	mov	r4, r0
 800b88e:	b940      	cbnz	r0, 800b8a2 <__gethex+0x152>
 800b890:	4602      	mov	r2, r0
 800b892:	21e4      	movs	r1, #228	@ 0xe4
 800b894:	4b5b      	ldr	r3, [pc, #364]	@ (800ba04 <__gethex+0x2b4>)
 800b896:	485c      	ldr	r0, [pc, #368]	@ (800ba08 <__gethex+0x2b8>)
 800b898:	f001 f9d0 	bl	800cc3c <__assert_func>
 800b89c:	3101      	adds	r1, #1
 800b89e:	105b      	asrs	r3, r3, #1
 800b8a0:	e7ef      	b.n	800b882 <__gethex+0x132>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f100 0a14 	add.w	sl, r0, #20
 800b8a8:	4655      	mov	r5, sl
 800b8aa:	469b      	mov	fp, r3
 800b8ac:	45b1      	cmp	r9, r6
 800b8ae:	d337      	bcc.n	800b920 <__gethex+0x1d0>
 800b8b0:	f845 bb04 	str.w	fp, [r5], #4
 800b8b4:	eba5 050a 	sub.w	r5, r5, sl
 800b8b8:	10ad      	asrs	r5, r5, #2
 800b8ba:	6125      	str	r5, [r4, #16]
 800b8bc:	4658      	mov	r0, fp
 800b8be:	f000 fbd3 	bl	800c068 <__hi0bits>
 800b8c2:	016d      	lsls	r5, r5, #5
 800b8c4:	f8d8 6000 	ldr.w	r6, [r8]
 800b8c8:	1a2d      	subs	r5, r5, r0
 800b8ca:	42b5      	cmp	r5, r6
 800b8cc:	dd54      	ble.n	800b978 <__gethex+0x228>
 800b8ce:	1bad      	subs	r5, r5, r6
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 ff5b 	bl	800c78e <__any_on>
 800b8d8:	4681      	mov	r9, r0
 800b8da:	b178      	cbz	r0, 800b8fc <__gethex+0x1ac>
 800b8dc:	f04f 0901 	mov.w	r9, #1
 800b8e0:	1e6b      	subs	r3, r5, #1
 800b8e2:	1159      	asrs	r1, r3, #5
 800b8e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b8e8:	f003 021f 	and.w	r2, r3, #31
 800b8ec:	fa09 f202 	lsl.w	r2, r9, r2
 800b8f0:	420a      	tst	r2, r1
 800b8f2:	d003      	beq.n	800b8fc <__gethex+0x1ac>
 800b8f4:	454b      	cmp	r3, r9
 800b8f6:	dc36      	bgt.n	800b966 <__gethex+0x216>
 800b8f8:	f04f 0902 	mov.w	r9, #2
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	4620      	mov	r0, r4
 800b900:	f7ff febe 	bl	800b680 <rshift>
 800b904:	442f      	add	r7, r5
 800b906:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b90a:	42bb      	cmp	r3, r7
 800b90c:	da42      	bge.n	800b994 <__gethex+0x244>
 800b90e:	4621      	mov	r1, r4
 800b910:	9801      	ldr	r0, [sp, #4]
 800b912:	f000 faf7 	bl	800bf04 <_Bfree>
 800b916:	2300      	movs	r3, #0
 800b918:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b91a:	25a3      	movs	r5, #163	@ 0xa3
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	e793      	b.n	800b848 <__gethex+0xf8>
 800b920:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b924:	2a2e      	cmp	r2, #46	@ 0x2e
 800b926:	d012      	beq.n	800b94e <__gethex+0x1fe>
 800b928:	2b20      	cmp	r3, #32
 800b92a:	d104      	bne.n	800b936 <__gethex+0x1e6>
 800b92c:	f845 bb04 	str.w	fp, [r5], #4
 800b930:	f04f 0b00 	mov.w	fp, #0
 800b934:	465b      	mov	r3, fp
 800b936:	7830      	ldrb	r0, [r6, #0]
 800b938:	9303      	str	r3, [sp, #12]
 800b93a:	f7ff fef4 	bl	800b726 <__hexdig_fun>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	f000 000f 	and.w	r0, r0, #15
 800b944:	4098      	lsls	r0, r3
 800b946:	ea4b 0b00 	orr.w	fp, fp, r0
 800b94a:	3304      	adds	r3, #4
 800b94c:	e7ae      	b.n	800b8ac <__gethex+0x15c>
 800b94e:	45b1      	cmp	r9, r6
 800b950:	d8ea      	bhi.n	800b928 <__gethex+0x1d8>
 800b952:	2201      	movs	r2, #1
 800b954:	4630      	mov	r0, r6
 800b956:	492a      	ldr	r1, [pc, #168]	@ (800ba00 <__gethex+0x2b0>)
 800b958:	9303      	str	r3, [sp, #12]
 800b95a:	f7fe ff0e 	bl	800a77a <strncmp>
 800b95e:	9b03      	ldr	r3, [sp, #12]
 800b960:	2800      	cmp	r0, #0
 800b962:	d1e1      	bne.n	800b928 <__gethex+0x1d8>
 800b964:	e7a2      	b.n	800b8ac <__gethex+0x15c>
 800b966:	4620      	mov	r0, r4
 800b968:	1ea9      	subs	r1, r5, #2
 800b96a:	f000 ff10 	bl	800c78e <__any_on>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d0c2      	beq.n	800b8f8 <__gethex+0x1a8>
 800b972:	f04f 0903 	mov.w	r9, #3
 800b976:	e7c1      	b.n	800b8fc <__gethex+0x1ac>
 800b978:	da09      	bge.n	800b98e <__gethex+0x23e>
 800b97a:	1b75      	subs	r5, r6, r5
 800b97c:	4621      	mov	r1, r4
 800b97e:	462a      	mov	r2, r5
 800b980:	9801      	ldr	r0, [sp, #4]
 800b982:	f000 fcd5 	bl	800c330 <__lshift>
 800b986:	4604      	mov	r4, r0
 800b988:	1b7f      	subs	r7, r7, r5
 800b98a:	f100 0a14 	add.w	sl, r0, #20
 800b98e:	f04f 0900 	mov.w	r9, #0
 800b992:	e7b8      	b.n	800b906 <__gethex+0x1b6>
 800b994:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b998:	42bd      	cmp	r5, r7
 800b99a:	dd6f      	ble.n	800ba7c <__gethex+0x32c>
 800b99c:	1bed      	subs	r5, r5, r7
 800b99e:	42ae      	cmp	r6, r5
 800b9a0:	dc34      	bgt.n	800ba0c <__gethex+0x2bc>
 800b9a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d022      	beq.n	800b9f0 <__gethex+0x2a0>
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	d024      	beq.n	800b9f8 <__gethex+0x2a8>
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d115      	bne.n	800b9de <__gethex+0x28e>
 800b9b2:	42ae      	cmp	r6, r5
 800b9b4:	d113      	bne.n	800b9de <__gethex+0x28e>
 800b9b6:	2e01      	cmp	r6, #1
 800b9b8:	d10b      	bne.n	800b9d2 <__gethex+0x282>
 800b9ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b9be:	9a02      	ldr	r2, [sp, #8]
 800b9c0:	2562      	movs	r5, #98	@ 0x62
 800b9c2:	6013      	str	r3, [r2, #0]
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	6123      	str	r3, [r4, #16]
 800b9c8:	f8ca 3000 	str.w	r3, [sl]
 800b9cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9ce:	601c      	str	r4, [r3, #0]
 800b9d0:	e73a      	b.n	800b848 <__gethex+0xf8>
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	1e71      	subs	r1, r6, #1
 800b9d6:	f000 feda 	bl	800c78e <__any_on>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d1ed      	bne.n	800b9ba <__gethex+0x26a>
 800b9de:	4621      	mov	r1, r4
 800b9e0:	9801      	ldr	r0, [sp, #4]
 800b9e2:	f000 fa8f 	bl	800bf04 <_Bfree>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9ea:	2550      	movs	r5, #80	@ 0x50
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	e72b      	b.n	800b848 <__gethex+0xf8>
 800b9f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1f3      	bne.n	800b9de <__gethex+0x28e>
 800b9f6:	e7e0      	b.n	800b9ba <__gethex+0x26a>
 800b9f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1dd      	bne.n	800b9ba <__gethex+0x26a>
 800b9fe:	e7ee      	b.n	800b9de <__gethex+0x28e>
 800ba00:	0800ea02 	.word	0x0800ea02
 800ba04:	0800ec11 	.word	0x0800ec11
 800ba08:	0800ec22 	.word	0x0800ec22
 800ba0c:	1e6f      	subs	r7, r5, #1
 800ba0e:	f1b9 0f00 	cmp.w	r9, #0
 800ba12:	d130      	bne.n	800ba76 <__gethex+0x326>
 800ba14:	b127      	cbz	r7, 800ba20 <__gethex+0x2d0>
 800ba16:	4639      	mov	r1, r7
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 feb8 	bl	800c78e <__any_on>
 800ba1e:	4681      	mov	r9, r0
 800ba20:	2301      	movs	r3, #1
 800ba22:	4629      	mov	r1, r5
 800ba24:	1b76      	subs	r6, r6, r5
 800ba26:	2502      	movs	r5, #2
 800ba28:	117a      	asrs	r2, r7, #5
 800ba2a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ba2e:	f007 071f 	and.w	r7, r7, #31
 800ba32:	40bb      	lsls	r3, r7
 800ba34:	4213      	tst	r3, r2
 800ba36:	4620      	mov	r0, r4
 800ba38:	bf18      	it	ne
 800ba3a:	f049 0902 	orrne.w	r9, r9, #2
 800ba3e:	f7ff fe1f 	bl	800b680 <rshift>
 800ba42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ba46:	f1b9 0f00 	cmp.w	r9, #0
 800ba4a:	d047      	beq.n	800badc <__gethex+0x38c>
 800ba4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d015      	beq.n	800ba80 <__gethex+0x330>
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	d017      	beq.n	800ba88 <__gethex+0x338>
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d109      	bne.n	800ba70 <__gethex+0x320>
 800ba5c:	f019 0f02 	tst.w	r9, #2
 800ba60:	d006      	beq.n	800ba70 <__gethex+0x320>
 800ba62:	f8da 3000 	ldr.w	r3, [sl]
 800ba66:	ea49 0903 	orr.w	r9, r9, r3
 800ba6a:	f019 0f01 	tst.w	r9, #1
 800ba6e:	d10e      	bne.n	800ba8e <__gethex+0x33e>
 800ba70:	f045 0510 	orr.w	r5, r5, #16
 800ba74:	e032      	b.n	800badc <__gethex+0x38c>
 800ba76:	f04f 0901 	mov.w	r9, #1
 800ba7a:	e7d1      	b.n	800ba20 <__gethex+0x2d0>
 800ba7c:	2501      	movs	r5, #1
 800ba7e:	e7e2      	b.n	800ba46 <__gethex+0x2f6>
 800ba80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba82:	f1c3 0301 	rsb	r3, r3, #1
 800ba86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0f0      	beq.n	800ba70 <__gethex+0x320>
 800ba8e:	f04f 0c00 	mov.w	ip, #0
 800ba92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba96:	f104 0314 	add.w	r3, r4, #20
 800ba9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800baac:	d01b      	beq.n	800bae6 <__gethex+0x396>
 800baae:	3201      	adds	r2, #1
 800bab0:	6002      	str	r2, [r0, #0]
 800bab2:	2d02      	cmp	r5, #2
 800bab4:	f104 0314 	add.w	r3, r4, #20
 800bab8:	d13c      	bne.n	800bb34 <__gethex+0x3e4>
 800baba:	f8d8 2000 	ldr.w	r2, [r8]
 800babe:	3a01      	subs	r2, #1
 800bac0:	42b2      	cmp	r2, r6
 800bac2:	d109      	bne.n	800bad8 <__gethex+0x388>
 800bac4:	2201      	movs	r2, #1
 800bac6:	1171      	asrs	r1, r6, #5
 800bac8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bacc:	f006 061f 	and.w	r6, r6, #31
 800bad0:	fa02 f606 	lsl.w	r6, r2, r6
 800bad4:	421e      	tst	r6, r3
 800bad6:	d13a      	bne.n	800bb4e <__gethex+0x3fe>
 800bad8:	f045 0520 	orr.w	r5, r5, #32
 800badc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bade:	601c      	str	r4, [r3, #0]
 800bae0:	9b02      	ldr	r3, [sp, #8]
 800bae2:	601f      	str	r7, [r3, #0]
 800bae4:	e6b0      	b.n	800b848 <__gethex+0xf8>
 800bae6:	4299      	cmp	r1, r3
 800bae8:	f843 cc04 	str.w	ip, [r3, #-4]
 800baec:	d8d9      	bhi.n	800baa2 <__gethex+0x352>
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	459b      	cmp	fp, r3
 800baf2:	db17      	blt.n	800bb24 <__gethex+0x3d4>
 800baf4:	6861      	ldr	r1, [r4, #4]
 800baf6:	9801      	ldr	r0, [sp, #4]
 800baf8:	3101      	adds	r1, #1
 800bafa:	f000 f9c3 	bl	800be84 <_Balloc>
 800bafe:	4681      	mov	r9, r0
 800bb00:	b918      	cbnz	r0, 800bb0a <__gethex+0x3ba>
 800bb02:	4602      	mov	r2, r0
 800bb04:	2184      	movs	r1, #132	@ 0x84
 800bb06:	4b19      	ldr	r3, [pc, #100]	@ (800bb6c <__gethex+0x41c>)
 800bb08:	e6c5      	b.n	800b896 <__gethex+0x146>
 800bb0a:	6922      	ldr	r2, [r4, #16]
 800bb0c:	f104 010c 	add.w	r1, r4, #12
 800bb10:	3202      	adds	r2, #2
 800bb12:	0092      	lsls	r2, r2, #2
 800bb14:	300c      	adds	r0, #12
 800bb16:	f7fe ff06 	bl	800a926 <memcpy>
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	9801      	ldr	r0, [sp, #4]
 800bb1e:	f000 f9f1 	bl	800bf04 <_Bfree>
 800bb22:	464c      	mov	r4, r9
 800bb24:	6923      	ldr	r3, [r4, #16]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	6122      	str	r2, [r4, #16]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb30:	615a      	str	r2, [r3, #20]
 800bb32:	e7be      	b.n	800bab2 <__gethex+0x362>
 800bb34:	6922      	ldr	r2, [r4, #16]
 800bb36:	455a      	cmp	r2, fp
 800bb38:	dd0b      	ble.n	800bb52 <__gethex+0x402>
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f7ff fd9f 	bl	800b680 <rshift>
 800bb42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb46:	3701      	adds	r7, #1
 800bb48:	42bb      	cmp	r3, r7
 800bb4a:	f6ff aee0 	blt.w	800b90e <__gethex+0x1be>
 800bb4e:	2501      	movs	r5, #1
 800bb50:	e7c2      	b.n	800bad8 <__gethex+0x388>
 800bb52:	f016 061f 	ands.w	r6, r6, #31
 800bb56:	d0fa      	beq.n	800bb4e <__gethex+0x3fe>
 800bb58:	4453      	add	r3, sl
 800bb5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb5e:	f000 fa83 	bl	800c068 <__hi0bits>
 800bb62:	f1c6 0620 	rsb	r6, r6, #32
 800bb66:	42b0      	cmp	r0, r6
 800bb68:	dbe7      	blt.n	800bb3a <__gethex+0x3ea>
 800bb6a:	e7f0      	b.n	800bb4e <__gethex+0x3fe>
 800bb6c:	0800ec11 	.word	0x0800ec11

0800bb70 <L_shift>:
 800bb70:	f1c2 0208 	rsb	r2, r2, #8
 800bb74:	0092      	lsls	r2, r2, #2
 800bb76:	b570      	push	{r4, r5, r6, lr}
 800bb78:	f1c2 0620 	rsb	r6, r2, #32
 800bb7c:	6843      	ldr	r3, [r0, #4]
 800bb7e:	6804      	ldr	r4, [r0, #0]
 800bb80:	fa03 f506 	lsl.w	r5, r3, r6
 800bb84:	432c      	orrs	r4, r5
 800bb86:	40d3      	lsrs	r3, r2
 800bb88:	6004      	str	r4, [r0, #0]
 800bb8a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb8e:	4288      	cmp	r0, r1
 800bb90:	d3f4      	bcc.n	800bb7c <L_shift+0xc>
 800bb92:	bd70      	pop	{r4, r5, r6, pc}

0800bb94 <__match>:
 800bb94:	b530      	push	{r4, r5, lr}
 800bb96:	6803      	ldr	r3, [r0, #0]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb9e:	b914      	cbnz	r4, 800bba6 <__match+0x12>
 800bba0:	6003      	str	r3, [r0, #0]
 800bba2:	2001      	movs	r0, #1
 800bba4:	bd30      	pop	{r4, r5, pc}
 800bba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbaa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bbae:	2d19      	cmp	r5, #25
 800bbb0:	bf98      	it	ls
 800bbb2:	3220      	addls	r2, #32
 800bbb4:	42a2      	cmp	r2, r4
 800bbb6:	d0f0      	beq.n	800bb9a <__match+0x6>
 800bbb8:	2000      	movs	r0, #0
 800bbba:	e7f3      	b.n	800bba4 <__match+0x10>

0800bbbc <__hexnan>:
 800bbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	2500      	movs	r5, #0
 800bbc2:	680b      	ldr	r3, [r1, #0]
 800bbc4:	4682      	mov	sl, r0
 800bbc6:	115e      	asrs	r6, r3, #5
 800bbc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bbcc:	f013 031f 	ands.w	r3, r3, #31
 800bbd0:	bf18      	it	ne
 800bbd2:	3604      	addne	r6, #4
 800bbd4:	1f37      	subs	r7, r6, #4
 800bbd6:	4690      	mov	r8, r2
 800bbd8:	46b9      	mov	r9, r7
 800bbda:	463c      	mov	r4, r7
 800bbdc:	46ab      	mov	fp, r5
 800bbde:	b087      	sub	sp, #28
 800bbe0:	6801      	ldr	r1, [r0, #0]
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	f846 5c04 	str.w	r5, [r6, #-4]
 800bbe8:	9502      	str	r5, [sp, #8]
 800bbea:	784a      	ldrb	r2, [r1, #1]
 800bbec:	1c4b      	adds	r3, r1, #1
 800bbee:	9303      	str	r3, [sp, #12]
 800bbf0:	b342      	cbz	r2, 800bc44 <__hexnan+0x88>
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	9105      	str	r1, [sp, #20]
 800bbf6:	9204      	str	r2, [sp, #16]
 800bbf8:	f7ff fd95 	bl	800b726 <__hexdig_fun>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d151      	bne.n	800bca4 <__hexnan+0xe8>
 800bc00:	9a04      	ldr	r2, [sp, #16]
 800bc02:	9905      	ldr	r1, [sp, #20]
 800bc04:	2a20      	cmp	r2, #32
 800bc06:	d818      	bhi.n	800bc3a <__hexnan+0x7e>
 800bc08:	9b02      	ldr	r3, [sp, #8]
 800bc0a:	459b      	cmp	fp, r3
 800bc0c:	dd13      	ble.n	800bc36 <__hexnan+0x7a>
 800bc0e:	454c      	cmp	r4, r9
 800bc10:	d206      	bcs.n	800bc20 <__hexnan+0x64>
 800bc12:	2d07      	cmp	r5, #7
 800bc14:	dc04      	bgt.n	800bc20 <__hexnan+0x64>
 800bc16:	462a      	mov	r2, r5
 800bc18:	4649      	mov	r1, r9
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f7ff ffa8 	bl	800bb70 <L_shift>
 800bc20:	4544      	cmp	r4, r8
 800bc22:	d952      	bls.n	800bcca <__hexnan+0x10e>
 800bc24:	2300      	movs	r3, #0
 800bc26:	f1a4 0904 	sub.w	r9, r4, #4
 800bc2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc2e:	461d      	mov	r5, r3
 800bc30:	464c      	mov	r4, r9
 800bc32:	f8cd b008 	str.w	fp, [sp, #8]
 800bc36:	9903      	ldr	r1, [sp, #12]
 800bc38:	e7d7      	b.n	800bbea <__hexnan+0x2e>
 800bc3a:	2a29      	cmp	r2, #41	@ 0x29
 800bc3c:	d157      	bne.n	800bcee <__hexnan+0x132>
 800bc3e:	3102      	adds	r1, #2
 800bc40:	f8ca 1000 	str.w	r1, [sl]
 800bc44:	f1bb 0f00 	cmp.w	fp, #0
 800bc48:	d051      	beq.n	800bcee <__hexnan+0x132>
 800bc4a:	454c      	cmp	r4, r9
 800bc4c:	d206      	bcs.n	800bc5c <__hexnan+0xa0>
 800bc4e:	2d07      	cmp	r5, #7
 800bc50:	dc04      	bgt.n	800bc5c <__hexnan+0xa0>
 800bc52:	462a      	mov	r2, r5
 800bc54:	4649      	mov	r1, r9
 800bc56:	4620      	mov	r0, r4
 800bc58:	f7ff ff8a 	bl	800bb70 <L_shift>
 800bc5c:	4544      	cmp	r4, r8
 800bc5e:	d936      	bls.n	800bcce <__hexnan+0x112>
 800bc60:	4623      	mov	r3, r4
 800bc62:	f1a8 0204 	sub.w	r2, r8, #4
 800bc66:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc6a:	429f      	cmp	r7, r3
 800bc6c:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc70:	d2f9      	bcs.n	800bc66 <__hexnan+0xaa>
 800bc72:	1b3b      	subs	r3, r7, r4
 800bc74:	f023 0303 	bic.w	r3, r3, #3
 800bc78:	3304      	adds	r3, #4
 800bc7a:	3401      	adds	r4, #1
 800bc7c:	3e03      	subs	r6, #3
 800bc7e:	42b4      	cmp	r4, r6
 800bc80:	bf88      	it	hi
 800bc82:	2304      	movhi	r3, #4
 800bc84:	2200      	movs	r2, #0
 800bc86:	4443      	add	r3, r8
 800bc88:	f843 2b04 	str.w	r2, [r3], #4
 800bc8c:	429f      	cmp	r7, r3
 800bc8e:	d2fb      	bcs.n	800bc88 <__hexnan+0xcc>
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	b91b      	cbnz	r3, 800bc9c <__hexnan+0xe0>
 800bc94:	4547      	cmp	r7, r8
 800bc96:	d128      	bne.n	800bcea <__hexnan+0x12e>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	603b      	str	r3, [r7, #0]
 800bc9c:	2005      	movs	r0, #5
 800bc9e:	b007      	add	sp, #28
 800bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca4:	3501      	adds	r5, #1
 800bca6:	2d08      	cmp	r5, #8
 800bca8:	f10b 0b01 	add.w	fp, fp, #1
 800bcac:	dd06      	ble.n	800bcbc <__hexnan+0x100>
 800bcae:	4544      	cmp	r4, r8
 800bcb0:	d9c1      	bls.n	800bc36 <__hexnan+0x7a>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	2501      	movs	r5, #1
 800bcb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcba:	3c04      	subs	r4, #4
 800bcbc:	6822      	ldr	r2, [r4, #0]
 800bcbe:	f000 000f 	and.w	r0, r0, #15
 800bcc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bcc6:	6020      	str	r0, [r4, #0]
 800bcc8:	e7b5      	b.n	800bc36 <__hexnan+0x7a>
 800bcca:	2508      	movs	r5, #8
 800bccc:	e7b3      	b.n	800bc36 <__hexnan+0x7a>
 800bcce:	9b01      	ldr	r3, [sp, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d0dd      	beq.n	800bc90 <__hexnan+0xd4>
 800bcd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd8:	f1c3 0320 	rsb	r3, r3, #32
 800bcdc:	40da      	lsrs	r2, r3
 800bcde:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bce2:	4013      	ands	r3, r2
 800bce4:	f846 3c04 	str.w	r3, [r6, #-4]
 800bce8:	e7d2      	b.n	800bc90 <__hexnan+0xd4>
 800bcea:	3f04      	subs	r7, #4
 800bcec:	e7d0      	b.n	800bc90 <__hexnan+0xd4>
 800bcee:	2004      	movs	r0, #4
 800bcf0:	e7d5      	b.n	800bc9e <__hexnan+0xe2>
	...

0800bcf4 <malloc>:
 800bcf4:	4b02      	ldr	r3, [pc, #8]	@ (800bd00 <malloc+0xc>)
 800bcf6:	4601      	mov	r1, r0
 800bcf8:	6818      	ldr	r0, [r3, #0]
 800bcfa:	f000 b825 	b.w	800bd48 <_malloc_r>
 800bcfe:	bf00      	nop
 800bd00:	20000184 	.word	0x20000184

0800bd04 <sbrk_aligned>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	4e0f      	ldr	r6, [pc, #60]	@ (800bd44 <sbrk_aligned+0x40>)
 800bd08:	460c      	mov	r4, r1
 800bd0a:	6831      	ldr	r1, [r6, #0]
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	b911      	cbnz	r1, 800bd16 <sbrk_aligned+0x12>
 800bd10:	f000 ff84 	bl	800cc1c <_sbrk_r>
 800bd14:	6030      	str	r0, [r6, #0]
 800bd16:	4621      	mov	r1, r4
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f000 ff7f 	bl	800cc1c <_sbrk_r>
 800bd1e:	1c43      	adds	r3, r0, #1
 800bd20:	d103      	bne.n	800bd2a <sbrk_aligned+0x26>
 800bd22:	f04f 34ff 	mov.w	r4, #4294967295
 800bd26:	4620      	mov	r0, r4
 800bd28:	bd70      	pop	{r4, r5, r6, pc}
 800bd2a:	1cc4      	adds	r4, r0, #3
 800bd2c:	f024 0403 	bic.w	r4, r4, #3
 800bd30:	42a0      	cmp	r0, r4
 800bd32:	d0f8      	beq.n	800bd26 <sbrk_aligned+0x22>
 800bd34:	1a21      	subs	r1, r4, r0
 800bd36:	4628      	mov	r0, r5
 800bd38:	f000 ff70 	bl	800cc1c <_sbrk_r>
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	d1f2      	bne.n	800bd26 <sbrk_aligned+0x22>
 800bd40:	e7ef      	b.n	800bd22 <sbrk_aligned+0x1e>
 800bd42:	bf00      	nop
 800bd44:	200008d4 	.word	0x200008d4

0800bd48 <_malloc_r>:
 800bd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd4c:	1ccd      	adds	r5, r1, #3
 800bd4e:	f025 0503 	bic.w	r5, r5, #3
 800bd52:	3508      	adds	r5, #8
 800bd54:	2d0c      	cmp	r5, #12
 800bd56:	bf38      	it	cc
 800bd58:	250c      	movcc	r5, #12
 800bd5a:	2d00      	cmp	r5, #0
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	db01      	blt.n	800bd64 <_malloc_r+0x1c>
 800bd60:	42a9      	cmp	r1, r5
 800bd62:	d904      	bls.n	800bd6e <_malloc_r+0x26>
 800bd64:	230c      	movs	r3, #12
 800bd66:	6033      	str	r3, [r6, #0]
 800bd68:	2000      	movs	r0, #0
 800bd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be44 <_malloc_r+0xfc>
 800bd72:	f000 f87b 	bl	800be6c <__malloc_lock>
 800bd76:	f8d8 3000 	ldr.w	r3, [r8]
 800bd7a:	461c      	mov	r4, r3
 800bd7c:	bb44      	cbnz	r4, 800bdd0 <_malloc_r+0x88>
 800bd7e:	4629      	mov	r1, r5
 800bd80:	4630      	mov	r0, r6
 800bd82:	f7ff ffbf 	bl	800bd04 <sbrk_aligned>
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	4604      	mov	r4, r0
 800bd8a:	d158      	bne.n	800be3e <_malloc_r+0xf6>
 800bd8c:	f8d8 4000 	ldr.w	r4, [r8]
 800bd90:	4627      	mov	r7, r4
 800bd92:	2f00      	cmp	r7, #0
 800bd94:	d143      	bne.n	800be1e <_malloc_r+0xd6>
 800bd96:	2c00      	cmp	r4, #0
 800bd98:	d04b      	beq.n	800be32 <_malloc_r+0xea>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	4639      	mov	r1, r7
 800bd9e:	4630      	mov	r0, r6
 800bda0:	eb04 0903 	add.w	r9, r4, r3
 800bda4:	f000 ff3a 	bl	800cc1c <_sbrk_r>
 800bda8:	4581      	cmp	r9, r0
 800bdaa:	d142      	bne.n	800be32 <_malloc_r+0xea>
 800bdac:	6821      	ldr	r1, [r4, #0]
 800bdae:	4630      	mov	r0, r6
 800bdb0:	1a6d      	subs	r5, r5, r1
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	f7ff ffa6 	bl	800bd04 <sbrk_aligned>
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d03a      	beq.n	800be32 <_malloc_r+0xea>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	442b      	add	r3, r5
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	f8d8 3000 	ldr.w	r3, [r8]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	bb62      	cbnz	r2, 800be24 <_malloc_r+0xdc>
 800bdca:	f8c8 7000 	str.w	r7, [r8]
 800bdce:	e00f      	b.n	800bdf0 <_malloc_r+0xa8>
 800bdd0:	6822      	ldr	r2, [r4, #0]
 800bdd2:	1b52      	subs	r2, r2, r5
 800bdd4:	d420      	bmi.n	800be18 <_malloc_r+0xd0>
 800bdd6:	2a0b      	cmp	r2, #11
 800bdd8:	d917      	bls.n	800be0a <_malloc_r+0xc2>
 800bdda:	1961      	adds	r1, r4, r5
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	6025      	str	r5, [r4, #0]
 800bde0:	bf18      	it	ne
 800bde2:	6059      	strne	r1, [r3, #4]
 800bde4:	6863      	ldr	r3, [r4, #4]
 800bde6:	bf08      	it	eq
 800bde8:	f8c8 1000 	streq.w	r1, [r8]
 800bdec:	5162      	str	r2, [r4, r5]
 800bdee:	604b      	str	r3, [r1, #4]
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	f000 f841 	bl	800be78 <__malloc_unlock>
 800bdf6:	f104 000b 	add.w	r0, r4, #11
 800bdfa:	1d23      	adds	r3, r4, #4
 800bdfc:	f020 0007 	bic.w	r0, r0, #7
 800be00:	1ac2      	subs	r2, r0, r3
 800be02:	bf1c      	itt	ne
 800be04:	1a1b      	subne	r3, r3, r0
 800be06:	50a3      	strne	r3, [r4, r2]
 800be08:	e7af      	b.n	800bd6a <_malloc_r+0x22>
 800be0a:	6862      	ldr	r2, [r4, #4]
 800be0c:	42a3      	cmp	r3, r4
 800be0e:	bf0c      	ite	eq
 800be10:	f8c8 2000 	streq.w	r2, [r8]
 800be14:	605a      	strne	r2, [r3, #4]
 800be16:	e7eb      	b.n	800bdf0 <_malloc_r+0xa8>
 800be18:	4623      	mov	r3, r4
 800be1a:	6864      	ldr	r4, [r4, #4]
 800be1c:	e7ae      	b.n	800bd7c <_malloc_r+0x34>
 800be1e:	463c      	mov	r4, r7
 800be20:	687f      	ldr	r7, [r7, #4]
 800be22:	e7b6      	b.n	800bd92 <_malloc_r+0x4a>
 800be24:	461a      	mov	r2, r3
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	42a3      	cmp	r3, r4
 800be2a:	d1fb      	bne.n	800be24 <_malloc_r+0xdc>
 800be2c:	2300      	movs	r3, #0
 800be2e:	6053      	str	r3, [r2, #4]
 800be30:	e7de      	b.n	800bdf0 <_malloc_r+0xa8>
 800be32:	230c      	movs	r3, #12
 800be34:	4630      	mov	r0, r6
 800be36:	6033      	str	r3, [r6, #0]
 800be38:	f000 f81e 	bl	800be78 <__malloc_unlock>
 800be3c:	e794      	b.n	800bd68 <_malloc_r+0x20>
 800be3e:	6005      	str	r5, [r0, #0]
 800be40:	e7d6      	b.n	800bdf0 <_malloc_r+0xa8>
 800be42:	bf00      	nop
 800be44:	200008d8 	.word	0x200008d8

0800be48 <__ascii_mbtowc>:
 800be48:	b082      	sub	sp, #8
 800be4a:	b901      	cbnz	r1, 800be4e <__ascii_mbtowc+0x6>
 800be4c:	a901      	add	r1, sp, #4
 800be4e:	b142      	cbz	r2, 800be62 <__ascii_mbtowc+0x1a>
 800be50:	b14b      	cbz	r3, 800be66 <__ascii_mbtowc+0x1e>
 800be52:	7813      	ldrb	r3, [r2, #0]
 800be54:	600b      	str	r3, [r1, #0]
 800be56:	7812      	ldrb	r2, [r2, #0]
 800be58:	1e10      	subs	r0, r2, #0
 800be5a:	bf18      	it	ne
 800be5c:	2001      	movne	r0, #1
 800be5e:	b002      	add	sp, #8
 800be60:	4770      	bx	lr
 800be62:	4610      	mov	r0, r2
 800be64:	e7fb      	b.n	800be5e <__ascii_mbtowc+0x16>
 800be66:	f06f 0001 	mvn.w	r0, #1
 800be6a:	e7f8      	b.n	800be5e <__ascii_mbtowc+0x16>

0800be6c <__malloc_lock>:
 800be6c:	4801      	ldr	r0, [pc, #4]	@ (800be74 <__malloc_lock+0x8>)
 800be6e:	f7fe bd4a 	b.w	800a906 <__retarget_lock_acquire_recursive>
 800be72:	bf00      	nop
 800be74:	200008d0 	.word	0x200008d0

0800be78 <__malloc_unlock>:
 800be78:	4801      	ldr	r0, [pc, #4]	@ (800be80 <__malloc_unlock+0x8>)
 800be7a:	f7fe bd45 	b.w	800a908 <__retarget_lock_release_recursive>
 800be7e:	bf00      	nop
 800be80:	200008d0 	.word	0x200008d0

0800be84 <_Balloc>:
 800be84:	b570      	push	{r4, r5, r6, lr}
 800be86:	69c6      	ldr	r6, [r0, #28]
 800be88:	4604      	mov	r4, r0
 800be8a:	460d      	mov	r5, r1
 800be8c:	b976      	cbnz	r6, 800beac <_Balloc+0x28>
 800be8e:	2010      	movs	r0, #16
 800be90:	f7ff ff30 	bl	800bcf4 <malloc>
 800be94:	4602      	mov	r2, r0
 800be96:	61e0      	str	r0, [r4, #28]
 800be98:	b920      	cbnz	r0, 800bea4 <_Balloc+0x20>
 800be9a:	216b      	movs	r1, #107	@ 0x6b
 800be9c:	4b17      	ldr	r3, [pc, #92]	@ (800befc <_Balloc+0x78>)
 800be9e:	4818      	ldr	r0, [pc, #96]	@ (800bf00 <_Balloc+0x7c>)
 800bea0:	f000 fecc 	bl	800cc3c <__assert_func>
 800bea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bea8:	6006      	str	r6, [r0, #0]
 800beaa:	60c6      	str	r6, [r0, #12]
 800beac:	69e6      	ldr	r6, [r4, #28]
 800beae:	68f3      	ldr	r3, [r6, #12]
 800beb0:	b183      	cbz	r3, 800bed4 <_Balloc+0x50>
 800beb2:	69e3      	ldr	r3, [r4, #28]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800beba:	b9b8      	cbnz	r0, 800beec <_Balloc+0x68>
 800bebc:	2101      	movs	r1, #1
 800bebe:	fa01 f605 	lsl.w	r6, r1, r5
 800bec2:	1d72      	adds	r2, r6, #5
 800bec4:	4620      	mov	r0, r4
 800bec6:	0092      	lsls	r2, r2, #2
 800bec8:	f000 fed6 	bl	800cc78 <_calloc_r>
 800becc:	b160      	cbz	r0, 800bee8 <_Balloc+0x64>
 800bece:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bed2:	e00e      	b.n	800bef2 <_Balloc+0x6e>
 800bed4:	2221      	movs	r2, #33	@ 0x21
 800bed6:	2104      	movs	r1, #4
 800bed8:	4620      	mov	r0, r4
 800beda:	f000 fecd 	bl	800cc78 <_calloc_r>
 800bede:	69e3      	ldr	r3, [r4, #28]
 800bee0:	60f0      	str	r0, [r6, #12]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1e4      	bne.n	800beb2 <_Balloc+0x2e>
 800bee8:	2000      	movs	r0, #0
 800beea:	bd70      	pop	{r4, r5, r6, pc}
 800beec:	6802      	ldr	r2, [r0, #0]
 800beee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bef2:	2300      	movs	r3, #0
 800bef4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bef8:	e7f7      	b.n	800beea <_Balloc+0x66>
 800befa:	bf00      	nop
 800befc:	0800eba2 	.word	0x0800eba2
 800bf00:	0800ec82 	.word	0x0800ec82

0800bf04 <_Bfree>:
 800bf04:	b570      	push	{r4, r5, r6, lr}
 800bf06:	69c6      	ldr	r6, [r0, #28]
 800bf08:	4605      	mov	r5, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	b976      	cbnz	r6, 800bf2c <_Bfree+0x28>
 800bf0e:	2010      	movs	r0, #16
 800bf10:	f7ff fef0 	bl	800bcf4 <malloc>
 800bf14:	4602      	mov	r2, r0
 800bf16:	61e8      	str	r0, [r5, #28]
 800bf18:	b920      	cbnz	r0, 800bf24 <_Bfree+0x20>
 800bf1a:	218f      	movs	r1, #143	@ 0x8f
 800bf1c:	4b08      	ldr	r3, [pc, #32]	@ (800bf40 <_Bfree+0x3c>)
 800bf1e:	4809      	ldr	r0, [pc, #36]	@ (800bf44 <_Bfree+0x40>)
 800bf20:	f000 fe8c 	bl	800cc3c <__assert_func>
 800bf24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf28:	6006      	str	r6, [r0, #0]
 800bf2a:	60c6      	str	r6, [r0, #12]
 800bf2c:	b13c      	cbz	r4, 800bf3e <_Bfree+0x3a>
 800bf2e:	69eb      	ldr	r3, [r5, #28]
 800bf30:	6862      	ldr	r2, [r4, #4]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf38:	6021      	str	r1, [r4, #0]
 800bf3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf3e:	bd70      	pop	{r4, r5, r6, pc}
 800bf40:	0800eba2 	.word	0x0800eba2
 800bf44:	0800ec82 	.word	0x0800ec82

0800bf48 <__multadd>:
 800bf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4c:	4607      	mov	r7, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	461e      	mov	r6, r3
 800bf52:	2000      	movs	r0, #0
 800bf54:	690d      	ldr	r5, [r1, #16]
 800bf56:	f101 0c14 	add.w	ip, r1, #20
 800bf5a:	f8dc 3000 	ldr.w	r3, [ip]
 800bf5e:	3001      	adds	r0, #1
 800bf60:	b299      	uxth	r1, r3
 800bf62:	fb02 6101 	mla	r1, r2, r1, r6
 800bf66:	0c1e      	lsrs	r6, r3, #16
 800bf68:	0c0b      	lsrs	r3, r1, #16
 800bf6a:	fb02 3306 	mla	r3, r2, r6, r3
 800bf6e:	b289      	uxth	r1, r1
 800bf70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf74:	4285      	cmp	r5, r0
 800bf76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf7a:	f84c 1b04 	str.w	r1, [ip], #4
 800bf7e:	dcec      	bgt.n	800bf5a <__multadd+0x12>
 800bf80:	b30e      	cbz	r6, 800bfc6 <__multadd+0x7e>
 800bf82:	68a3      	ldr	r3, [r4, #8]
 800bf84:	42ab      	cmp	r3, r5
 800bf86:	dc19      	bgt.n	800bfbc <__multadd+0x74>
 800bf88:	6861      	ldr	r1, [r4, #4]
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	3101      	adds	r1, #1
 800bf8e:	f7ff ff79 	bl	800be84 <_Balloc>
 800bf92:	4680      	mov	r8, r0
 800bf94:	b928      	cbnz	r0, 800bfa2 <__multadd+0x5a>
 800bf96:	4602      	mov	r2, r0
 800bf98:	21ba      	movs	r1, #186	@ 0xba
 800bf9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bfcc <__multadd+0x84>)
 800bf9c:	480c      	ldr	r0, [pc, #48]	@ (800bfd0 <__multadd+0x88>)
 800bf9e:	f000 fe4d 	bl	800cc3c <__assert_func>
 800bfa2:	6922      	ldr	r2, [r4, #16]
 800bfa4:	f104 010c 	add.w	r1, r4, #12
 800bfa8:	3202      	adds	r2, #2
 800bfaa:	0092      	lsls	r2, r2, #2
 800bfac:	300c      	adds	r0, #12
 800bfae:	f7fe fcba 	bl	800a926 <memcpy>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4638      	mov	r0, r7
 800bfb6:	f7ff ffa5 	bl	800bf04 <_Bfree>
 800bfba:	4644      	mov	r4, r8
 800bfbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfc0:	3501      	adds	r5, #1
 800bfc2:	615e      	str	r6, [r3, #20]
 800bfc4:	6125      	str	r5, [r4, #16]
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfcc:	0800ec11 	.word	0x0800ec11
 800bfd0:	0800ec82 	.word	0x0800ec82

0800bfd4 <__s2b>:
 800bfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd8:	4615      	mov	r5, r2
 800bfda:	2209      	movs	r2, #9
 800bfdc:	461f      	mov	r7, r3
 800bfde:	3308      	adds	r3, #8
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	2201      	movs	r2, #1
 800bfea:	2100      	movs	r1, #0
 800bfec:	429a      	cmp	r2, r3
 800bfee:	db09      	blt.n	800c004 <__s2b+0x30>
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7ff ff47 	bl	800be84 <_Balloc>
 800bff6:	b940      	cbnz	r0, 800c00a <__s2b+0x36>
 800bff8:	4602      	mov	r2, r0
 800bffa:	21d3      	movs	r1, #211	@ 0xd3
 800bffc:	4b18      	ldr	r3, [pc, #96]	@ (800c060 <__s2b+0x8c>)
 800bffe:	4819      	ldr	r0, [pc, #100]	@ (800c064 <__s2b+0x90>)
 800c000:	f000 fe1c 	bl	800cc3c <__assert_func>
 800c004:	0052      	lsls	r2, r2, #1
 800c006:	3101      	adds	r1, #1
 800c008:	e7f0      	b.n	800bfec <__s2b+0x18>
 800c00a:	9b08      	ldr	r3, [sp, #32]
 800c00c:	2d09      	cmp	r5, #9
 800c00e:	6143      	str	r3, [r0, #20]
 800c010:	f04f 0301 	mov.w	r3, #1
 800c014:	6103      	str	r3, [r0, #16]
 800c016:	dd16      	ble.n	800c046 <__s2b+0x72>
 800c018:	f104 0909 	add.w	r9, r4, #9
 800c01c:	46c8      	mov	r8, r9
 800c01e:	442c      	add	r4, r5
 800c020:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c024:	4601      	mov	r1, r0
 800c026:	220a      	movs	r2, #10
 800c028:	4630      	mov	r0, r6
 800c02a:	3b30      	subs	r3, #48	@ 0x30
 800c02c:	f7ff ff8c 	bl	800bf48 <__multadd>
 800c030:	45a0      	cmp	r8, r4
 800c032:	d1f5      	bne.n	800c020 <__s2b+0x4c>
 800c034:	f1a5 0408 	sub.w	r4, r5, #8
 800c038:	444c      	add	r4, r9
 800c03a:	1b2d      	subs	r5, r5, r4
 800c03c:	1963      	adds	r3, r4, r5
 800c03e:	42bb      	cmp	r3, r7
 800c040:	db04      	blt.n	800c04c <__s2b+0x78>
 800c042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c046:	2509      	movs	r5, #9
 800c048:	340a      	adds	r4, #10
 800c04a:	e7f6      	b.n	800c03a <__s2b+0x66>
 800c04c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c050:	4601      	mov	r1, r0
 800c052:	220a      	movs	r2, #10
 800c054:	4630      	mov	r0, r6
 800c056:	3b30      	subs	r3, #48	@ 0x30
 800c058:	f7ff ff76 	bl	800bf48 <__multadd>
 800c05c:	e7ee      	b.n	800c03c <__s2b+0x68>
 800c05e:	bf00      	nop
 800c060:	0800ec11 	.word	0x0800ec11
 800c064:	0800ec82 	.word	0x0800ec82

0800c068 <__hi0bits>:
 800c068:	4603      	mov	r3, r0
 800c06a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c06e:	bf3a      	itte	cc
 800c070:	0403      	lslcc	r3, r0, #16
 800c072:	2010      	movcc	r0, #16
 800c074:	2000      	movcs	r0, #0
 800c076:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c07a:	bf3c      	itt	cc
 800c07c:	021b      	lslcc	r3, r3, #8
 800c07e:	3008      	addcc	r0, #8
 800c080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c084:	bf3c      	itt	cc
 800c086:	011b      	lslcc	r3, r3, #4
 800c088:	3004      	addcc	r0, #4
 800c08a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c08e:	bf3c      	itt	cc
 800c090:	009b      	lslcc	r3, r3, #2
 800c092:	3002      	addcc	r0, #2
 800c094:	2b00      	cmp	r3, #0
 800c096:	db05      	blt.n	800c0a4 <__hi0bits+0x3c>
 800c098:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c09c:	f100 0001 	add.w	r0, r0, #1
 800c0a0:	bf08      	it	eq
 800c0a2:	2020      	moveq	r0, #32
 800c0a4:	4770      	bx	lr

0800c0a6 <__lo0bits>:
 800c0a6:	6803      	ldr	r3, [r0, #0]
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	f013 0007 	ands.w	r0, r3, #7
 800c0ae:	d00b      	beq.n	800c0c8 <__lo0bits+0x22>
 800c0b0:	07d9      	lsls	r1, r3, #31
 800c0b2:	d421      	bmi.n	800c0f8 <__lo0bits+0x52>
 800c0b4:	0798      	lsls	r0, r3, #30
 800c0b6:	bf49      	itett	mi
 800c0b8:	085b      	lsrmi	r3, r3, #1
 800c0ba:	089b      	lsrpl	r3, r3, #2
 800c0bc:	2001      	movmi	r0, #1
 800c0be:	6013      	strmi	r3, [r2, #0]
 800c0c0:	bf5c      	itt	pl
 800c0c2:	2002      	movpl	r0, #2
 800c0c4:	6013      	strpl	r3, [r2, #0]
 800c0c6:	4770      	bx	lr
 800c0c8:	b299      	uxth	r1, r3
 800c0ca:	b909      	cbnz	r1, 800c0d0 <__lo0bits+0x2a>
 800c0cc:	2010      	movs	r0, #16
 800c0ce:	0c1b      	lsrs	r3, r3, #16
 800c0d0:	b2d9      	uxtb	r1, r3
 800c0d2:	b909      	cbnz	r1, 800c0d8 <__lo0bits+0x32>
 800c0d4:	3008      	adds	r0, #8
 800c0d6:	0a1b      	lsrs	r3, r3, #8
 800c0d8:	0719      	lsls	r1, r3, #28
 800c0da:	bf04      	itt	eq
 800c0dc:	091b      	lsreq	r3, r3, #4
 800c0de:	3004      	addeq	r0, #4
 800c0e0:	0799      	lsls	r1, r3, #30
 800c0e2:	bf04      	itt	eq
 800c0e4:	089b      	lsreq	r3, r3, #2
 800c0e6:	3002      	addeq	r0, #2
 800c0e8:	07d9      	lsls	r1, r3, #31
 800c0ea:	d403      	bmi.n	800c0f4 <__lo0bits+0x4e>
 800c0ec:	085b      	lsrs	r3, r3, #1
 800c0ee:	f100 0001 	add.w	r0, r0, #1
 800c0f2:	d003      	beq.n	800c0fc <__lo0bits+0x56>
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	4770      	bx	lr
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	4770      	bx	lr
 800c0fc:	2020      	movs	r0, #32
 800c0fe:	4770      	bx	lr

0800c100 <__i2b>:
 800c100:	b510      	push	{r4, lr}
 800c102:	460c      	mov	r4, r1
 800c104:	2101      	movs	r1, #1
 800c106:	f7ff febd 	bl	800be84 <_Balloc>
 800c10a:	4602      	mov	r2, r0
 800c10c:	b928      	cbnz	r0, 800c11a <__i2b+0x1a>
 800c10e:	f240 1145 	movw	r1, #325	@ 0x145
 800c112:	4b04      	ldr	r3, [pc, #16]	@ (800c124 <__i2b+0x24>)
 800c114:	4804      	ldr	r0, [pc, #16]	@ (800c128 <__i2b+0x28>)
 800c116:	f000 fd91 	bl	800cc3c <__assert_func>
 800c11a:	2301      	movs	r3, #1
 800c11c:	6144      	str	r4, [r0, #20]
 800c11e:	6103      	str	r3, [r0, #16]
 800c120:	bd10      	pop	{r4, pc}
 800c122:	bf00      	nop
 800c124:	0800ec11 	.word	0x0800ec11
 800c128:	0800ec82 	.word	0x0800ec82

0800c12c <__multiply>:
 800c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c130:	4614      	mov	r4, r2
 800c132:	690a      	ldr	r2, [r1, #16]
 800c134:	6923      	ldr	r3, [r4, #16]
 800c136:	460f      	mov	r7, r1
 800c138:	429a      	cmp	r2, r3
 800c13a:	bfa2      	ittt	ge
 800c13c:	4623      	movge	r3, r4
 800c13e:	460c      	movge	r4, r1
 800c140:	461f      	movge	r7, r3
 800c142:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c146:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c14a:	68a3      	ldr	r3, [r4, #8]
 800c14c:	6861      	ldr	r1, [r4, #4]
 800c14e:	eb0a 0609 	add.w	r6, sl, r9
 800c152:	42b3      	cmp	r3, r6
 800c154:	b085      	sub	sp, #20
 800c156:	bfb8      	it	lt
 800c158:	3101      	addlt	r1, #1
 800c15a:	f7ff fe93 	bl	800be84 <_Balloc>
 800c15e:	b930      	cbnz	r0, 800c16e <__multiply+0x42>
 800c160:	4602      	mov	r2, r0
 800c162:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c166:	4b43      	ldr	r3, [pc, #268]	@ (800c274 <__multiply+0x148>)
 800c168:	4843      	ldr	r0, [pc, #268]	@ (800c278 <__multiply+0x14c>)
 800c16a:	f000 fd67 	bl	800cc3c <__assert_func>
 800c16e:	f100 0514 	add.w	r5, r0, #20
 800c172:	462b      	mov	r3, r5
 800c174:	2200      	movs	r2, #0
 800c176:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c17a:	4543      	cmp	r3, r8
 800c17c:	d321      	bcc.n	800c1c2 <__multiply+0x96>
 800c17e:	f107 0114 	add.w	r1, r7, #20
 800c182:	f104 0214 	add.w	r2, r4, #20
 800c186:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c18a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c18e:	9302      	str	r3, [sp, #8]
 800c190:	1b13      	subs	r3, r2, r4
 800c192:	3b15      	subs	r3, #21
 800c194:	f023 0303 	bic.w	r3, r3, #3
 800c198:	3304      	adds	r3, #4
 800c19a:	f104 0715 	add.w	r7, r4, #21
 800c19e:	42ba      	cmp	r2, r7
 800c1a0:	bf38      	it	cc
 800c1a2:	2304      	movcc	r3, #4
 800c1a4:	9301      	str	r3, [sp, #4]
 800c1a6:	9b02      	ldr	r3, [sp, #8]
 800c1a8:	9103      	str	r1, [sp, #12]
 800c1aa:	428b      	cmp	r3, r1
 800c1ac:	d80c      	bhi.n	800c1c8 <__multiply+0x9c>
 800c1ae:	2e00      	cmp	r6, #0
 800c1b0:	dd03      	ble.n	800c1ba <__multiply+0x8e>
 800c1b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d05a      	beq.n	800c270 <__multiply+0x144>
 800c1ba:	6106      	str	r6, [r0, #16]
 800c1bc:	b005      	add	sp, #20
 800c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c2:	f843 2b04 	str.w	r2, [r3], #4
 800c1c6:	e7d8      	b.n	800c17a <__multiply+0x4e>
 800c1c8:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1cc:	f1ba 0f00 	cmp.w	sl, #0
 800c1d0:	d023      	beq.n	800c21a <__multiply+0xee>
 800c1d2:	46a9      	mov	r9, r5
 800c1d4:	f04f 0c00 	mov.w	ip, #0
 800c1d8:	f104 0e14 	add.w	lr, r4, #20
 800c1dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1e0:	f8d9 3000 	ldr.w	r3, [r9]
 800c1e4:	fa1f fb87 	uxth.w	fp, r7
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1ee:	4463      	add	r3, ip
 800c1f0:	f8d9 c000 	ldr.w	ip, [r9]
 800c1f4:	0c3f      	lsrs	r7, r7, #16
 800c1f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c1fa:	fb0a c707 	mla	r7, sl, r7, ip
 800c1fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c202:	b29b      	uxth	r3, r3
 800c204:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c208:	4572      	cmp	r2, lr
 800c20a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c20e:	f849 3b04 	str.w	r3, [r9], #4
 800c212:	d8e3      	bhi.n	800c1dc <__multiply+0xb0>
 800c214:	9b01      	ldr	r3, [sp, #4]
 800c216:	f845 c003 	str.w	ip, [r5, r3]
 800c21a:	9b03      	ldr	r3, [sp, #12]
 800c21c:	3104      	adds	r1, #4
 800c21e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c222:	f1b9 0f00 	cmp.w	r9, #0
 800c226:	d021      	beq.n	800c26c <__multiply+0x140>
 800c228:	46ae      	mov	lr, r5
 800c22a:	f04f 0a00 	mov.w	sl, #0
 800c22e:	682b      	ldr	r3, [r5, #0]
 800c230:	f104 0c14 	add.w	ip, r4, #20
 800c234:	f8bc b000 	ldrh.w	fp, [ip]
 800c238:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	fb09 770b 	mla	r7, r9, fp, r7
 800c242:	4457      	add	r7, sl
 800c244:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c248:	f84e 3b04 	str.w	r3, [lr], #4
 800c24c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c250:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c254:	f8be 3000 	ldrh.w	r3, [lr]
 800c258:	4562      	cmp	r2, ip
 800c25a:	fb09 330a 	mla	r3, r9, sl, r3
 800c25e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c266:	d8e5      	bhi.n	800c234 <__multiply+0x108>
 800c268:	9f01      	ldr	r7, [sp, #4]
 800c26a:	51eb      	str	r3, [r5, r7]
 800c26c:	3504      	adds	r5, #4
 800c26e:	e79a      	b.n	800c1a6 <__multiply+0x7a>
 800c270:	3e01      	subs	r6, #1
 800c272:	e79c      	b.n	800c1ae <__multiply+0x82>
 800c274:	0800ec11 	.word	0x0800ec11
 800c278:	0800ec82 	.word	0x0800ec82

0800c27c <__pow5mult>:
 800c27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c280:	4615      	mov	r5, r2
 800c282:	f012 0203 	ands.w	r2, r2, #3
 800c286:	4607      	mov	r7, r0
 800c288:	460e      	mov	r6, r1
 800c28a:	d007      	beq.n	800c29c <__pow5mult+0x20>
 800c28c:	4c25      	ldr	r4, [pc, #148]	@ (800c324 <__pow5mult+0xa8>)
 800c28e:	3a01      	subs	r2, #1
 800c290:	2300      	movs	r3, #0
 800c292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c296:	f7ff fe57 	bl	800bf48 <__multadd>
 800c29a:	4606      	mov	r6, r0
 800c29c:	10ad      	asrs	r5, r5, #2
 800c29e:	d03d      	beq.n	800c31c <__pow5mult+0xa0>
 800c2a0:	69fc      	ldr	r4, [r7, #28]
 800c2a2:	b97c      	cbnz	r4, 800c2c4 <__pow5mult+0x48>
 800c2a4:	2010      	movs	r0, #16
 800c2a6:	f7ff fd25 	bl	800bcf4 <malloc>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	61f8      	str	r0, [r7, #28]
 800c2ae:	b928      	cbnz	r0, 800c2bc <__pow5mult+0x40>
 800c2b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2b4:	4b1c      	ldr	r3, [pc, #112]	@ (800c328 <__pow5mult+0xac>)
 800c2b6:	481d      	ldr	r0, [pc, #116]	@ (800c32c <__pow5mult+0xb0>)
 800c2b8:	f000 fcc0 	bl	800cc3c <__assert_func>
 800c2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2c0:	6004      	str	r4, [r0, #0]
 800c2c2:	60c4      	str	r4, [r0, #12]
 800c2c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2cc:	b94c      	cbnz	r4, 800c2e2 <__pow5mult+0x66>
 800c2ce:	f240 2171 	movw	r1, #625	@ 0x271
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	f7ff ff14 	bl	800c100 <__i2b>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4604      	mov	r4, r0
 800c2dc:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2e0:	6003      	str	r3, [r0, #0]
 800c2e2:	f04f 0900 	mov.w	r9, #0
 800c2e6:	07eb      	lsls	r3, r5, #31
 800c2e8:	d50a      	bpl.n	800c300 <__pow5mult+0x84>
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	f7ff ff1c 	bl	800c12c <__multiply>
 800c2f4:	4680      	mov	r8, r0
 800c2f6:	4631      	mov	r1, r6
 800c2f8:	4638      	mov	r0, r7
 800c2fa:	f7ff fe03 	bl	800bf04 <_Bfree>
 800c2fe:	4646      	mov	r6, r8
 800c300:	106d      	asrs	r5, r5, #1
 800c302:	d00b      	beq.n	800c31c <__pow5mult+0xa0>
 800c304:	6820      	ldr	r0, [r4, #0]
 800c306:	b938      	cbnz	r0, 800c318 <__pow5mult+0x9c>
 800c308:	4622      	mov	r2, r4
 800c30a:	4621      	mov	r1, r4
 800c30c:	4638      	mov	r0, r7
 800c30e:	f7ff ff0d 	bl	800c12c <__multiply>
 800c312:	6020      	str	r0, [r4, #0]
 800c314:	f8c0 9000 	str.w	r9, [r0]
 800c318:	4604      	mov	r4, r0
 800c31a:	e7e4      	b.n	800c2e6 <__pow5mult+0x6a>
 800c31c:	4630      	mov	r0, r6
 800c31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c322:	bf00      	nop
 800c324:	0800ecdc 	.word	0x0800ecdc
 800c328:	0800eba2 	.word	0x0800eba2
 800c32c:	0800ec82 	.word	0x0800ec82

0800c330 <__lshift>:
 800c330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c334:	460c      	mov	r4, r1
 800c336:	4607      	mov	r7, r0
 800c338:	4691      	mov	r9, r2
 800c33a:	6923      	ldr	r3, [r4, #16]
 800c33c:	6849      	ldr	r1, [r1, #4]
 800c33e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c342:	68a3      	ldr	r3, [r4, #8]
 800c344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c348:	f108 0601 	add.w	r6, r8, #1
 800c34c:	42b3      	cmp	r3, r6
 800c34e:	db0b      	blt.n	800c368 <__lshift+0x38>
 800c350:	4638      	mov	r0, r7
 800c352:	f7ff fd97 	bl	800be84 <_Balloc>
 800c356:	4605      	mov	r5, r0
 800c358:	b948      	cbnz	r0, 800c36e <__lshift+0x3e>
 800c35a:	4602      	mov	r2, r0
 800c35c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c360:	4b27      	ldr	r3, [pc, #156]	@ (800c400 <__lshift+0xd0>)
 800c362:	4828      	ldr	r0, [pc, #160]	@ (800c404 <__lshift+0xd4>)
 800c364:	f000 fc6a 	bl	800cc3c <__assert_func>
 800c368:	3101      	adds	r1, #1
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	e7ee      	b.n	800c34c <__lshift+0x1c>
 800c36e:	2300      	movs	r3, #0
 800c370:	f100 0114 	add.w	r1, r0, #20
 800c374:	f100 0210 	add.w	r2, r0, #16
 800c378:	4618      	mov	r0, r3
 800c37a:	4553      	cmp	r3, sl
 800c37c:	db33      	blt.n	800c3e6 <__lshift+0xb6>
 800c37e:	6920      	ldr	r0, [r4, #16]
 800c380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c384:	f104 0314 	add.w	r3, r4, #20
 800c388:	f019 091f 	ands.w	r9, r9, #31
 800c38c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c394:	d02b      	beq.n	800c3ee <__lshift+0xbe>
 800c396:	468a      	mov	sl, r1
 800c398:	2200      	movs	r2, #0
 800c39a:	f1c9 0e20 	rsb	lr, r9, #32
 800c39e:	6818      	ldr	r0, [r3, #0]
 800c3a0:	fa00 f009 	lsl.w	r0, r0, r9
 800c3a4:	4310      	orrs	r0, r2
 800c3a6:	f84a 0b04 	str.w	r0, [sl], #4
 800c3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ae:	459c      	cmp	ip, r3
 800c3b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3b4:	d8f3      	bhi.n	800c39e <__lshift+0x6e>
 800c3b6:	ebac 0304 	sub.w	r3, ip, r4
 800c3ba:	3b15      	subs	r3, #21
 800c3bc:	f023 0303 	bic.w	r3, r3, #3
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	f104 0015 	add.w	r0, r4, #21
 800c3c6:	4584      	cmp	ip, r0
 800c3c8:	bf38      	it	cc
 800c3ca:	2304      	movcc	r3, #4
 800c3cc:	50ca      	str	r2, [r1, r3]
 800c3ce:	b10a      	cbz	r2, 800c3d4 <__lshift+0xa4>
 800c3d0:	f108 0602 	add.w	r6, r8, #2
 800c3d4:	3e01      	subs	r6, #1
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	4621      	mov	r1, r4
 800c3da:	612e      	str	r6, [r5, #16]
 800c3dc:	f7ff fd92 	bl	800bf04 <_Bfree>
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	e7c5      	b.n	800c37a <__lshift+0x4a>
 800c3ee:	3904      	subs	r1, #4
 800c3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f4:	459c      	cmp	ip, r3
 800c3f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3fa:	d8f9      	bhi.n	800c3f0 <__lshift+0xc0>
 800c3fc:	e7ea      	b.n	800c3d4 <__lshift+0xa4>
 800c3fe:	bf00      	nop
 800c400:	0800ec11 	.word	0x0800ec11
 800c404:	0800ec82 	.word	0x0800ec82

0800c408 <__mcmp>:
 800c408:	4603      	mov	r3, r0
 800c40a:	690a      	ldr	r2, [r1, #16]
 800c40c:	6900      	ldr	r0, [r0, #16]
 800c40e:	b530      	push	{r4, r5, lr}
 800c410:	1a80      	subs	r0, r0, r2
 800c412:	d10e      	bne.n	800c432 <__mcmp+0x2a>
 800c414:	3314      	adds	r3, #20
 800c416:	3114      	adds	r1, #20
 800c418:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c41c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c420:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c424:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c428:	4295      	cmp	r5, r2
 800c42a:	d003      	beq.n	800c434 <__mcmp+0x2c>
 800c42c:	d205      	bcs.n	800c43a <__mcmp+0x32>
 800c42e:	f04f 30ff 	mov.w	r0, #4294967295
 800c432:	bd30      	pop	{r4, r5, pc}
 800c434:	42a3      	cmp	r3, r4
 800c436:	d3f3      	bcc.n	800c420 <__mcmp+0x18>
 800c438:	e7fb      	b.n	800c432 <__mcmp+0x2a>
 800c43a:	2001      	movs	r0, #1
 800c43c:	e7f9      	b.n	800c432 <__mcmp+0x2a>
	...

0800c440 <__mdiff>:
 800c440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	4689      	mov	r9, r1
 800c446:	4606      	mov	r6, r0
 800c448:	4611      	mov	r1, r2
 800c44a:	4648      	mov	r0, r9
 800c44c:	4614      	mov	r4, r2
 800c44e:	f7ff ffdb 	bl	800c408 <__mcmp>
 800c452:	1e05      	subs	r5, r0, #0
 800c454:	d112      	bne.n	800c47c <__mdiff+0x3c>
 800c456:	4629      	mov	r1, r5
 800c458:	4630      	mov	r0, r6
 800c45a:	f7ff fd13 	bl	800be84 <_Balloc>
 800c45e:	4602      	mov	r2, r0
 800c460:	b928      	cbnz	r0, 800c46e <__mdiff+0x2e>
 800c462:	f240 2137 	movw	r1, #567	@ 0x237
 800c466:	4b3e      	ldr	r3, [pc, #248]	@ (800c560 <__mdiff+0x120>)
 800c468:	483e      	ldr	r0, [pc, #248]	@ (800c564 <__mdiff+0x124>)
 800c46a:	f000 fbe7 	bl	800cc3c <__assert_func>
 800c46e:	2301      	movs	r3, #1
 800c470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c474:	4610      	mov	r0, r2
 800c476:	b003      	add	sp, #12
 800c478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47c:	bfbc      	itt	lt
 800c47e:	464b      	movlt	r3, r9
 800c480:	46a1      	movlt	r9, r4
 800c482:	4630      	mov	r0, r6
 800c484:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c488:	bfba      	itte	lt
 800c48a:	461c      	movlt	r4, r3
 800c48c:	2501      	movlt	r5, #1
 800c48e:	2500      	movge	r5, #0
 800c490:	f7ff fcf8 	bl	800be84 <_Balloc>
 800c494:	4602      	mov	r2, r0
 800c496:	b918      	cbnz	r0, 800c4a0 <__mdiff+0x60>
 800c498:	f240 2145 	movw	r1, #581	@ 0x245
 800c49c:	4b30      	ldr	r3, [pc, #192]	@ (800c560 <__mdiff+0x120>)
 800c49e:	e7e3      	b.n	800c468 <__mdiff+0x28>
 800c4a0:	f100 0b14 	add.w	fp, r0, #20
 800c4a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4a8:	f109 0310 	add.w	r3, r9, #16
 800c4ac:	60c5      	str	r5, [r0, #12]
 800c4ae:	f04f 0c00 	mov.w	ip, #0
 800c4b2:	f109 0514 	add.w	r5, r9, #20
 800c4b6:	46d9      	mov	r9, fp
 800c4b8:	6926      	ldr	r6, [r4, #16]
 800c4ba:	f104 0e14 	add.w	lr, r4, #20
 800c4be:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c4c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	9b01      	ldr	r3, [sp, #4]
 800c4ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c4d2:	b281      	uxth	r1, r0
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	fa1f f38a 	uxth.w	r3, sl
 800c4da:	1a5b      	subs	r3, r3, r1
 800c4dc:	0c00      	lsrs	r0, r0, #16
 800c4de:	4463      	add	r3, ip
 800c4e0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c4e4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4ee:	4576      	cmp	r6, lr
 800c4f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4f4:	f849 3b04 	str.w	r3, [r9], #4
 800c4f8:	d8e6      	bhi.n	800c4c8 <__mdiff+0x88>
 800c4fa:	1b33      	subs	r3, r6, r4
 800c4fc:	3b15      	subs	r3, #21
 800c4fe:	f023 0303 	bic.w	r3, r3, #3
 800c502:	3415      	adds	r4, #21
 800c504:	3304      	adds	r3, #4
 800c506:	42a6      	cmp	r6, r4
 800c508:	bf38      	it	cc
 800c50a:	2304      	movcc	r3, #4
 800c50c:	441d      	add	r5, r3
 800c50e:	445b      	add	r3, fp
 800c510:	461e      	mov	r6, r3
 800c512:	462c      	mov	r4, r5
 800c514:	4544      	cmp	r4, r8
 800c516:	d30e      	bcc.n	800c536 <__mdiff+0xf6>
 800c518:	f108 0103 	add.w	r1, r8, #3
 800c51c:	1b49      	subs	r1, r1, r5
 800c51e:	f021 0103 	bic.w	r1, r1, #3
 800c522:	3d03      	subs	r5, #3
 800c524:	45a8      	cmp	r8, r5
 800c526:	bf38      	it	cc
 800c528:	2100      	movcc	r1, #0
 800c52a:	440b      	add	r3, r1
 800c52c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c530:	b199      	cbz	r1, 800c55a <__mdiff+0x11a>
 800c532:	6117      	str	r7, [r2, #16]
 800c534:	e79e      	b.n	800c474 <__mdiff+0x34>
 800c536:	46e6      	mov	lr, ip
 800c538:	f854 1b04 	ldr.w	r1, [r4], #4
 800c53c:	fa1f fc81 	uxth.w	ip, r1
 800c540:	44f4      	add	ip, lr
 800c542:	0c08      	lsrs	r0, r1, #16
 800c544:	4471      	add	r1, lr
 800c546:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c54a:	b289      	uxth	r1, r1
 800c54c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c554:	f846 1b04 	str.w	r1, [r6], #4
 800c558:	e7dc      	b.n	800c514 <__mdiff+0xd4>
 800c55a:	3f01      	subs	r7, #1
 800c55c:	e7e6      	b.n	800c52c <__mdiff+0xec>
 800c55e:	bf00      	nop
 800c560:	0800ec11 	.word	0x0800ec11
 800c564:	0800ec82 	.word	0x0800ec82

0800c568 <__ulp>:
 800c568:	4b0e      	ldr	r3, [pc, #56]	@ (800c5a4 <__ulp+0x3c>)
 800c56a:	400b      	ands	r3, r1
 800c56c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c570:	2b00      	cmp	r3, #0
 800c572:	dc08      	bgt.n	800c586 <__ulp+0x1e>
 800c574:	425b      	negs	r3, r3
 800c576:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c57a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c57e:	da04      	bge.n	800c58a <__ulp+0x22>
 800c580:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c584:	4113      	asrs	r3, r2
 800c586:	2200      	movs	r2, #0
 800c588:	e008      	b.n	800c59c <__ulp+0x34>
 800c58a:	f1a2 0314 	sub.w	r3, r2, #20
 800c58e:	2b1e      	cmp	r3, #30
 800c590:	bfd6      	itet	le
 800c592:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c596:	2201      	movgt	r2, #1
 800c598:	40da      	lsrle	r2, r3
 800c59a:	2300      	movs	r3, #0
 800c59c:	4619      	mov	r1, r3
 800c59e:	4610      	mov	r0, r2
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	7ff00000 	.word	0x7ff00000

0800c5a8 <__b2d>:
 800c5a8:	6902      	ldr	r2, [r0, #16]
 800c5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ac:	f100 0614 	add.w	r6, r0, #20
 800c5b0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c5b4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800c5b8:	4f1e      	ldr	r7, [pc, #120]	@ (800c634 <__b2d+0x8c>)
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7ff fd54 	bl	800c068 <__hi0bits>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	f1c0 0020 	rsb	r0, r0, #32
 800c5c6:	2b0a      	cmp	r3, #10
 800c5c8:	f1a2 0504 	sub.w	r5, r2, #4
 800c5cc:	6008      	str	r0, [r1, #0]
 800c5ce:	dc12      	bgt.n	800c5f6 <__b2d+0x4e>
 800c5d0:	42ae      	cmp	r6, r5
 800c5d2:	bf2c      	ite	cs
 800c5d4:	2200      	movcs	r2, #0
 800c5d6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c5da:	f1c3 0c0b 	rsb	ip, r3, #11
 800c5de:	3315      	adds	r3, #21
 800c5e0:	fa24 fe0c 	lsr.w	lr, r4, ip
 800c5e4:	fa04 f303 	lsl.w	r3, r4, r3
 800c5e8:	fa22 f20c 	lsr.w	r2, r2, ip
 800c5ec:	ea4e 0107 	orr.w	r1, lr, r7
 800c5f0:	431a      	orrs	r2, r3
 800c5f2:	4610      	mov	r0, r2
 800c5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5f6:	42ae      	cmp	r6, r5
 800c5f8:	bf36      	itet	cc
 800c5fa:	f1a2 0508 	subcc.w	r5, r2, #8
 800c5fe:	2200      	movcs	r2, #0
 800c600:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c604:	3b0b      	subs	r3, #11
 800c606:	d012      	beq.n	800c62e <__b2d+0x86>
 800c608:	f1c3 0720 	rsb	r7, r3, #32
 800c60c:	fa22 f107 	lsr.w	r1, r2, r7
 800c610:	409c      	lsls	r4, r3
 800c612:	430c      	orrs	r4, r1
 800c614:	42b5      	cmp	r5, r6
 800c616:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800c61a:	bf94      	ite	ls
 800c61c:	2400      	movls	r4, #0
 800c61e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800c622:	409a      	lsls	r2, r3
 800c624:	40fc      	lsrs	r4, r7
 800c626:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c62a:	4322      	orrs	r2, r4
 800c62c:	e7e1      	b.n	800c5f2 <__b2d+0x4a>
 800c62e:	ea44 0107 	orr.w	r1, r4, r7
 800c632:	e7de      	b.n	800c5f2 <__b2d+0x4a>
 800c634:	3ff00000 	.word	0x3ff00000

0800c638 <__d2b>:
 800c638:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c63c:	2101      	movs	r1, #1
 800c63e:	4690      	mov	r8, r2
 800c640:	4699      	mov	r9, r3
 800c642:	9e08      	ldr	r6, [sp, #32]
 800c644:	f7ff fc1e 	bl	800be84 <_Balloc>
 800c648:	4604      	mov	r4, r0
 800c64a:	b930      	cbnz	r0, 800c65a <__d2b+0x22>
 800c64c:	4602      	mov	r2, r0
 800c64e:	f240 310f 	movw	r1, #783	@ 0x30f
 800c652:	4b23      	ldr	r3, [pc, #140]	@ (800c6e0 <__d2b+0xa8>)
 800c654:	4823      	ldr	r0, [pc, #140]	@ (800c6e4 <__d2b+0xac>)
 800c656:	f000 faf1 	bl	800cc3c <__assert_func>
 800c65a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c65e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c662:	b10d      	cbz	r5, 800c668 <__d2b+0x30>
 800c664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c668:	9301      	str	r3, [sp, #4]
 800c66a:	f1b8 0300 	subs.w	r3, r8, #0
 800c66e:	d024      	beq.n	800c6ba <__d2b+0x82>
 800c670:	4668      	mov	r0, sp
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	f7ff fd17 	bl	800c0a6 <__lo0bits>
 800c678:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c67c:	b1d8      	cbz	r0, 800c6b6 <__d2b+0x7e>
 800c67e:	f1c0 0320 	rsb	r3, r0, #32
 800c682:	fa02 f303 	lsl.w	r3, r2, r3
 800c686:	430b      	orrs	r3, r1
 800c688:	40c2      	lsrs	r2, r0
 800c68a:	6163      	str	r3, [r4, #20]
 800c68c:	9201      	str	r2, [sp, #4]
 800c68e:	9b01      	ldr	r3, [sp, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	bf0c      	ite	eq
 800c694:	2201      	moveq	r2, #1
 800c696:	2202      	movne	r2, #2
 800c698:	61a3      	str	r3, [r4, #24]
 800c69a:	6122      	str	r2, [r4, #16]
 800c69c:	b1ad      	cbz	r5, 800c6ca <__d2b+0x92>
 800c69e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6a2:	4405      	add	r5, r0
 800c6a4:	6035      	str	r5, [r6, #0]
 800c6a6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ac:	6018      	str	r0, [r3, #0]
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	b002      	add	sp, #8
 800c6b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c6b6:	6161      	str	r1, [r4, #20]
 800c6b8:	e7e9      	b.n	800c68e <__d2b+0x56>
 800c6ba:	a801      	add	r0, sp, #4
 800c6bc:	f7ff fcf3 	bl	800c0a6 <__lo0bits>
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	6163      	str	r3, [r4, #20]
 800c6c6:	3020      	adds	r0, #32
 800c6c8:	e7e7      	b.n	800c69a <__d2b+0x62>
 800c6ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c6ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6d2:	6030      	str	r0, [r6, #0]
 800c6d4:	6918      	ldr	r0, [r3, #16]
 800c6d6:	f7ff fcc7 	bl	800c068 <__hi0bits>
 800c6da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6de:	e7e4      	b.n	800c6aa <__d2b+0x72>
 800c6e0:	0800ec11 	.word	0x0800ec11
 800c6e4:	0800ec82 	.word	0x0800ec82

0800c6e8 <__ratio>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	b085      	sub	sp, #20
 800c6ee:	e9cd 1000 	strd	r1, r0, [sp]
 800c6f2:	a902      	add	r1, sp, #8
 800c6f4:	f7ff ff58 	bl	800c5a8 <__b2d>
 800c6f8:	468b      	mov	fp, r1
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	460f      	mov	r7, r1
 800c6fe:	9800      	ldr	r0, [sp, #0]
 800c700:	a903      	add	r1, sp, #12
 800c702:	f7ff ff51 	bl	800c5a8 <__b2d>
 800c706:	460d      	mov	r5, r1
 800c708:	9b01      	ldr	r3, [sp, #4]
 800c70a:	4689      	mov	r9, r1
 800c70c:	6919      	ldr	r1, [r3, #16]
 800c70e:	9b00      	ldr	r3, [sp, #0]
 800c710:	4604      	mov	r4, r0
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	4630      	mov	r0, r6
 800c716:	1ac9      	subs	r1, r1, r3
 800c718:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c71c:	1a9b      	subs	r3, r3, r2
 800c71e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c722:	2b00      	cmp	r3, #0
 800c724:	bfcd      	iteet	gt
 800c726:	463a      	movgt	r2, r7
 800c728:	462a      	movle	r2, r5
 800c72a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c72e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c732:	bfd8      	it	le
 800c734:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c738:	464b      	mov	r3, r9
 800c73a:	4622      	mov	r2, r4
 800c73c:	4659      	mov	r1, fp
 800c73e:	f7f3 fff5 	bl	800072c <__aeabi_ddiv>
 800c742:	b005      	add	sp, #20
 800c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c748 <__copybits>:
 800c748:	3901      	subs	r1, #1
 800c74a:	b570      	push	{r4, r5, r6, lr}
 800c74c:	1149      	asrs	r1, r1, #5
 800c74e:	6914      	ldr	r4, [r2, #16]
 800c750:	3101      	adds	r1, #1
 800c752:	f102 0314 	add.w	r3, r2, #20
 800c756:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c75a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c75e:	1f05      	subs	r5, r0, #4
 800c760:	42a3      	cmp	r3, r4
 800c762:	d30c      	bcc.n	800c77e <__copybits+0x36>
 800c764:	1aa3      	subs	r3, r4, r2
 800c766:	3b11      	subs	r3, #17
 800c768:	f023 0303 	bic.w	r3, r3, #3
 800c76c:	3211      	adds	r2, #17
 800c76e:	42a2      	cmp	r2, r4
 800c770:	bf88      	it	hi
 800c772:	2300      	movhi	r3, #0
 800c774:	4418      	add	r0, r3
 800c776:	2300      	movs	r3, #0
 800c778:	4288      	cmp	r0, r1
 800c77a:	d305      	bcc.n	800c788 <__copybits+0x40>
 800c77c:	bd70      	pop	{r4, r5, r6, pc}
 800c77e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c782:	f845 6f04 	str.w	r6, [r5, #4]!
 800c786:	e7eb      	b.n	800c760 <__copybits+0x18>
 800c788:	f840 3b04 	str.w	r3, [r0], #4
 800c78c:	e7f4      	b.n	800c778 <__copybits+0x30>

0800c78e <__any_on>:
 800c78e:	f100 0214 	add.w	r2, r0, #20
 800c792:	6900      	ldr	r0, [r0, #16]
 800c794:	114b      	asrs	r3, r1, #5
 800c796:	4298      	cmp	r0, r3
 800c798:	b510      	push	{r4, lr}
 800c79a:	db11      	blt.n	800c7c0 <__any_on+0x32>
 800c79c:	dd0a      	ble.n	800c7b4 <__any_on+0x26>
 800c79e:	f011 011f 	ands.w	r1, r1, #31
 800c7a2:	d007      	beq.n	800c7b4 <__any_on+0x26>
 800c7a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c7a8:	fa24 f001 	lsr.w	r0, r4, r1
 800c7ac:	fa00 f101 	lsl.w	r1, r0, r1
 800c7b0:	428c      	cmp	r4, r1
 800c7b2:	d10b      	bne.n	800c7cc <__any_on+0x3e>
 800c7b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d803      	bhi.n	800c7c4 <__any_on+0x36>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	bd10      	pop	{r4, pc}
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	e7f7      	b.n	800c7b4 <__any_on+0x26>
 800c7c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7c8:	2900      	cmp	r1, #0
 800c7ca:	d0f5      	beq.n	800c7b8 <__any_on+0x2a>
 800c7cc:	2001      	movs	r0, #1
 800c7ce:	e7f6      	b.n	800c7be <__any_on+0x30>

0800c7d0 <__ascii_wctomb>:
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	4608      	mov	r0, r1
 800c7d4:	b141      	cbz	r1, 800c7e8 <__ascii_wctomb+0x18>
 800c7d6:	2aff      	cmp	r2, #255	@ 0xff
 800c7d8:	d904      	bls.n	800c7e4 <__ascii_wctomb+0x14>
 800c7da:	228a      	movs	r2, #138	@ 0x8a
 800c7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e0:	601a      	str	r2, [r3, #0]
 800c7e2:	4770      	bx	lr
 800c7e4:	2001      	movs	r0, #1
 800c7e6:	700a      	strb	r2, [r1, #0]
 800c7e8:	4770      	bx	lr

0800c7ea <__ssputs_r>:
 800c7ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ee:	461f      	mov	r7, r3
 800c7f0:	688e      	ldr	r6, [r1, #8]
 800c7f2:	4682      	mov	sl, r0
 800c7f4:	42be      	cmp	r6, r7
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	4690      	mov	r8, r2
 800c7fa:	680b      	ldr	r3, [r1, #0]
 800c7fc:	d82d      	bhi.n	800c85a <__ssputs_r+0x70>
 800c7fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c802:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c806:	d026      	beq.n	800c856 <__ssputs_r+0x6c>
 800c808:	6965      	ldr	r5, [r4, #20]
 800c80a:	6909      	ldr	r1, [r1, #16]
 800c80c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c810:	eba3 0901 	sub.w	r9, r3, r1
 800c814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c818:	1c7b      	adds	r3, r7, #1
 800c81a:	444b      	add	r3, r9
 800c81c:	106d      	asrs	r5, r5, #1
 800c81e:	429d      	cmp	r5, r3
 800c820:	bf38      	it	cc
 800c822:	461d      	movcc	r5, r3
 800c824:	0553      	lsls	r3, r2, #21
 800c826:	d527      	bpl.n	800c878 <__ssputs_r+0x8e>
 800c828:	4629      	mov	r1, r5
 800c82a:	f7ff fa8d 	bl	800bd48 <_malloc_r>
 800c82e:	4606      	mov	r6, r0
 800c830:	b360      	cbz	r0, 800c88c <__ssputs_r+0xa2>
 800c832:	464a      	mov	r2, r9
 800c834:	6921      	ldr	r1, [r4, #16]
 800c836:	f7fe f876 	bl	800a926 <memcpy>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	6126      	str	r6, [r4, #16]
 800c848:	444e      	add	r6, r9
 800c84a:	6026      	str	r6, [r4, #0]
 800c84c:	463e      	mov	r6, r7
 800c84e:	6165      	str	r5, [r4, #20]
 800c850:	eba5 0509 	sub.w	r5, r5, r9
 800c854:	60a5      	str	r5, [r4, #8]
 800c856:	42be      	cmp	r6, r7
 800c858:	d900      	bls.n	800c85c <__ssputs_r+0x72>
 800c85a:	463e      	mov	r6, r7
 800c85c:	4632      	mov	r2, r6
 800c85e:	4641      	mov	r1, r8
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	f000 f9c1 	bl	800cbe8 <memmove>
 800c866:	2000      	movs	r0, #0
 800c868:	68a3      	ldr	r3, [r4, #8]
 800c86a:	1b9b      	subs	r3, r3, r6
 800c86c:	60a3      	str	r3, [r4, #8]
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	4433      	add	r3, r6
 800c872:	6023      	str	r3, [r4, #0]
 800c874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c878:	462a      	mov	r2, r5
 800c87a:	f000 fa11 	bl	800cca0 <_realloc_r>
 800c87e:	4606      	mov	r6, r0
 800c880:	2800      	cmp	r0, #0
 800c882:	d1e0      	bne.n	800c846 <__ssputs_r+0x5c>
 800c884:	4650      	mov	r0, sl
 800c886:	6921      	ldr	r1, [r4, #16]
 800c888:	f7fe feb2 	bl	800b5f0 <_free_r>
 800c88c:	230c      	movs	r3, #12
 800c88e:	f8ca 3000 	str.w	r3, [sl]
 800c892:	89a3      	ldrh	r3, [r4, #12]
 800c894:	f04f 30ff 	mov.w	r0, #4294967295
 800c898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	e7e9      	b.n	800c874 <__ssputs_r+0x8a>

0800c8a0 <_svfiprintf_r>:
 800c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a4:	4698      	mov	r8, r3
 800c8a6:	898b      	ldrh	r3, [r1, #12]
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	061b      	lsls	r3, r3, #24
 800c8ac:	460d      	mov	r5, r1
 800c8ae:	4614      	mov	r4, r2
 800c8b0:	b09d      	sub	sp, #116	@ 0x74
 800c8b2:	d510      	bpl.n	800c8d6 <_svfiprintf_r+0x36>
 800c8b4:	690b      	ldr	r3, [r1, #16]
 800c8b6:	b973      	cbnz	r3, 800c8d6 <_svfiprintf_r+0x36>
 800c8b8:	2140      	movs	r1, #64	@ 0x40
 800c8ba:	f7ff fa45 	bl	800bd48 <_malloc_r>
 800c8be:	6028      	str	r0, [r5, #0]
 800c8c0:	6128      	str	r0, [r5, #16]
 800c8c2:	b930      	cbnz	r0, 800c8d2 <_svfiprintf_r+0x32>
 800c8c4:	230c      	movs	r3, #12
 800c8c6:	603b      	str	r3, [r7, #0]
 800c8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8cc:	b01d      	add	sp, #116	@ 0x74
 800c8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d2:	2340      	movs	r3, #64	@ 0x40
 800c8d4:	616b      	str	r3, [r5, #20]
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8da:	2320      	movs	r3, #32
 800c8dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8e0:	2330      	movs	r3, #48	@ 0x30
 800c8e2:	f04f 0901 	mov.w	r9, #1
 800c8e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ca84 <_svfiprintf_r+0x1e4>
 800c8ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8f2:	4623      	mov	r3, r4
 800c8f4:	469a      	mov	sl, r3
 800c8f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8fa:	b10a      	cbz	r2, 800c900 <_svfiprintf_r+0x60>
 800c8fc:	2a25      	cmp	r2, #37	@ 0x25
 800c8fe:	d1f9      	bne.n	800c8f4 <_svfiprintf_r+0x54>
 800c900:	ebba 0b04 	subs.w	fp, sl, r4
 800c904:	d00b      	beq.n	800c91e <_svfiprintf_r+0x7e>
 800c906:	465b      	mov	r3, fp
 800c908:	4622      	mov	r2, r4
 800c90a:	4629      	mov	r1, r5
 800c90c:	4638      	mov	r0, r7
 800c90e:	f7ff ff6c 	bl	800c7ea <__ssputs_r>
 800c912:	3001      	adds	r0, #1
 800c914:	f000 80a7 	beq.w	800ca66 <_svfiprintf_r+0x1c6>
 800c918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c91a:	445a      	add	r2, fp
 800c91c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c91e:	f89a 3000 	ldrb.w	r3, [sl]
 800c922:	2b00      	cmp	r3, #0
 800c924:	f000 809f 	beq.w	800ca66 <_svfiprintf_r+0x1c6>
 800c928:	2300      	movs	r3, #0
 800c92a:	f04f 32ff 	mov.w	r2, #4294967295
 800c92e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c932:	f10a 0a01 	add.w	sl, sl, #1
 800c936:	9304      	str	r3, [sp, #16]
 800c938:	9307      	str	r3, [sp, #28]
 800c93a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c93e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c940:	4654      	mov	r4, sl
 800c942:	2205      	movs	r2, #5
 800c944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c948:	484e      	ldr	r0, [pc, #312]	@ (800ca84 <_svfiprintf_r+0x1e4>)
 800c94a:	f7fd ffde 	bl	800a90a <memchr>
 800c94e:	9a04      	ldr	r2, [sp, #16]
 800c950:	b9d8      	cbnz	r0, 800c98a <_svfiprintf_r+0xea>
 800c952:	06d0      	lsls	r0, r2, #27
 800c954:	bf44      	itt	mi
 800c956:	2320      	movmi	r3, #32
 800c958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c95c:	0711      	lsls	r1, r2, #28
 800c95e:	bf44      	itt	mi
 800c960:	232b      	movmi	r3, #43	@ 0x2b
 800c962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c966:	f89a 3000 	ldrb.w	r3, [sl]
 800c96a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c96c:	d015      	beq.n	800c99a <_svfiprintf_r+0xfa>
 800c96e:	4654      	mov	r4, sl
 800c970:	2000      	movs	r0, #0
 800c972:	f04f 0c0a 	mov.w	ip, #10
 800c976:	9a07      	ldr	r2, [sp, #28]
 800c978:	4621      	mov	r1, r4
 800c97a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c97e:	3b30      	subs	r3, #48	@ 0x30
 800c980:	2b09      	cmp	r3, #9
 800c982:	d94b      	bls.n	800ca1c <_svfiprintf_r+0x17c>
 800c984:	b1b0      	cbz	r0, 800c9b4 <_svfiprintf_r+0x114>
 800c986:	9207      	str	r2, [sp, #28]
 800c988:	e014      	b.n	800c9b4 <_svfiprintf_r+0x114>
 800c98a:	eba0 0308 	sub.w	r3, r0, r8
 800c98e:	fa09 f303 	lsl.w	r3, r9, r3
 800c992:	4313      	orrs	r3, r2
 800c994:	46a2      	mov	sl, r4
 800c996:	9304      	str	r3, [sp, #16]
 800c998:	e7d2      	b.n	800c940 <_svfiprintf_r+0xa0>
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	1d19      	adds	r1, r3, #4
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	9103      	str	r1, [sp, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bfbb      	ittet	lt
 800c9a6:	425b      	neglt	r3, r3
 800c9a8:	f042 0202 	orrlt.w	r2, r2, #2
 800c9ac:	9307      	strge	r3, [sp, #28]
 800c9ae:	9307      	strlt	r3, [sp, #28]
 800c9b0:	bfb8      	it	lt
 800c9b2:	9204      	strlt	r2, [sp, #16]
 800c9b4:	7823      	ldrb	r3, [r4, #0]
 800c9b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9b8:	d10a      	bne.n	800c9d0 <_svfiprintf_r+0x130>
 800c9ba:	7863      	ldrb	r3, [r4, #1]
 800c9bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9be:	d132      	bne.n	800ca26 <_svfiprintf_r+0x186>
 800c9c0:	9b03      	ldr	r3, [sp, #12]
 800c9c2:	3402      	adds	r4, #2
 800c9c4:	1d1a      	adds	r2, r3, #4
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	9203      	str	r2, [sp, #12]
 800c9ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c9ce:	9305      	str	r3, [sp, #20]
 800c9d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ca88 <_svfiprintf_r+0x1e8>
 800c9d4:	2203      	movs	r2, #3
 800c9d6:	4650      	mov	r0, sl
 800c9d8:	7821      	ldrb	r1, [r4, #0]
 800c9da:	f7fd ff96 	bl	800a90a <memchr>
 800c9de:	b138      	cbz	r0, 800c9f0 <_svfiprintf_r+0x150>
 800c9e0:	2240      	movs	r2, #64	@ 0x40
 800c9e2:	9b04      	ldr	r3, [sp, #16]
 800c9e4:	eba0 000a 	sub.w	r0, r0, sl
 800c9e8:	4082      	lsls	r2, r0
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	3401      	adds	r4, #1
 800c9ee:	9304      	str	r3, [sp, #16]
 800c9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f4:	2206      	movs	r2, #6
 800c9f6:	4825      	ldr	r0, [pc, #148]	@ (800ca8c <_svfiprintf_r+0x1ec>)
 800c9f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9fc:	f7fd ff85 	bl	800a90a <memchr>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d036      	beq.n	800ca72 <_svfiprintf_r+0x1d2>
 800ca04:	4b22      	ldr	r3, [pc, #136]	@ (800ca90 <_svfiprintf_r+0x1f0>)
 800ca06:	bb1b      	cbnz	r3, 800ca50 <_svfiprintf_r+0x1b0>
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	3307      	adds	r3, #7
 800ca0c:	f023 0307 	bic.w	r3, r3, #7
 800ca10:	3308      	adds	r3, #8
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca16:	4433      	add	r3, r6
 800ca18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca1a:	e76a      	b.n	800c8f2 <_svfiprintf_r+0x52>
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	2001      	movs	r0, #1
 800ca20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca24:	e7a8      	b.n	800c978 <_svfiprintf_r+0xd8>
 800ca26:	2300      	movs	r3, #0
 800ca28:	f04f 0c0a 	mov.w	ip, #10
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	3401      	adds	r4, #1
 800ca30:	9305      	str	r3, [sp, #20]
 800ca32:	4620      	mov	r0, r4
 800ca34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca38:	3a30      	subs	r2, #48	@ 0x30
 800ca3a:	2a09      	cmp	r2, #9
 800ca3c:	d903      	bls.n	800ca46 <_svfiprintf_r+0x1a6>
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d0c6      	beq.n	800c9d0 <_svfiprintf_r+0x130>
 800ca42:	9105      	str	r1, [sp, #20]
 800ca44:	e7c4      	b.n	800c9d0 <_svfiprintf_r+0x130>
 800ca46:	4604      	mov	r4, r0
 800ca48:	2301      	movs	r3, #1
 800ca4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca4e:	e7f0      	b.n	800ca32 <_svfiprintf_r+0x192>
 800ca50:	ab03      	add	r3, sp, #12
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	462a      	mov	r2, r5
 800ca56:	4638      	mov	r0, r7
 800ca58:	4b0e      	ldr	r3, [pc, #56]	@ (800ca94 <_svfiprintf_r+0x1f4>)
 800ca5a:	a904      	add	r1, sp, #16
 800ca5c:	f7fd f9a2 	bl	8009da4 <_printf_float>
 800ca60:	1c42      	adds	r2, r0, #1
 800ca62:	4606      	mov	r6, r0
 800ca64:	d1d6      	bne.n	800ca14 <_svfiprintf_r+0x174>
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	065b      	lsls	r3, r3, #25
 800ca6a:	f53f af2d 	bmi.w	800c8c8 <_svfiprintf_r+0x28>
 800ca6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca70:	e72c      	b.n	800c8cc <_svfiprintf_r+0x2c>
 800ca72:	ab03      	add	r3, sp, #12
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	462a      	mov	r2, r5
 800ca78:	4638      	mov	r0, r7
 800ca7a:	4b06      	ldr	r3, [pc, #24]	@ (800ca94 <_svfiprintf_r+0x1f4>)
 800ca7c:	a904      	add	r1, sp, #16
 800ca7e:	f7fd fc2f 	bl	800a2e0 <_printf_i>
 800ca82:	e7ed      	b.n	800ca60 <_svfiprintf_r+0x1c0>
 800ca84:	0800edd8 	.word	0x0800edd8
 800ca88:	0800edde 	.word	0x0800edde
 800ca8c:	0800ede2 	.word	0x0800ede2
 800ca90:	08009da5 	.word	0x08009da5
 800ca94:	0800c7eb 	.word	0x0800c7eb

0800ca98 <__sflush_r>:
 800ca98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9e:	0716      	lsls	r6, r2, #28
 800caa0:	4605      	mov	r5, r0
 800caa2:	460c      	mov	r4, r1
 800caa4:	d454      	bmi.n	800cb50 <__sflush_r+0xb8>
 800caa6:	684b      	ldr	r3, [r1, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	dc02      	bgt.n	800cab2 <__sflush_r+0x1a>
 800caac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800caae:	2b00      	cmp	r3, #0
 800cab0:	dd48      	ble.n	800cb44 <__sflush_r+0xac>
 800cab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cab4:	2e00      	cmp	r6, #0
 800cab6:	d045      	beq.n	800cb44 <__sflush_r+0xac>
 800cab8:	2300      	movs	r3, #0
 800caba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cabe:	682f      	ldr	r7, [r5, #0]
 800cac0:	6a21      	ldr	r1, [r4, #32]
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	d030      	beq.n	800cb28 <__sflush_r+0x90>
 800cac6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cac8:	89a3      	ldrh	r3, [r4, #12]
 800caca:	0759      	lsls	r1, r3, #29
 800cacc:	d505      	bpl.n	800cada <__sflush_r+0x42>
 800cace:	6863      	ldr	r3, [r4, #4]
 800cad0:	1ad2      	subs	r2, r2, r3
 800cad2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cad4:	b10b      	cbz	r3, 800cada <__sflush_r+0x42>
 800cad6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cad8:	1ad2      	subs	r2, r2, r3
 800cada:	2300      	movs	r3, #0
 800cadc:	4628      	mov	r0, r5
 800cade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cae0:	6a21      	ldr	r1, [r4, #32]
 800cae2:	47b0      	blx	r6
 800cae4:	1c43      	adds	r3, r0, #1
 800cae6:	89a3      	ldrh	r3, [r4, #12]
 800cae8:	d106      	bne.n	800caf8 <__sflush_r+0x60>
 800caea:	6829      	ldr	r1, [r5, #0]
 800caec:	291d      	cmp	r1, #29
 800caee:	d82b      	bhi.n	800cb48 <__sflush_r+0xb0>
 800caf0:	4a28      	ldr	r2, [pc, #160]	@ (800cb94 <__sflush_r+0xfc>)
 800caf2:	410a      	asrs	r2, r1
 800caf4:	07d6      	lsls	r6, r2, #31
 800caf6:	d427      	bmi.n	800cb48 <__sflush_r+0xb0>
 800caf8:	2200      	movs	r2, #0
 800cafa:	6062      	str	r2, [r4, #4]
 800cafc:	6922      	ldr	r2, [r4, #16]
 800cafe:	04d9      	lsls	r1, r3, #19
 800cb00:	6022      	str	r2, [r4, #0]
 800cb02:	d504      	bpl.n	800cb0e <__sflush_r+0x76>
 800cb04:	1c42      	adds	r2, r0, #1
 800cb06:	d101      	bne.n	800cb0c <__sflush_r+0x74>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	b903      	cbnz	r3, 800cb0e <__sflush_r+0x76>
 800cb0c:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb10:	602f      	str	r7, [r5, #0]
 800cb12:	b1b9      	cbz	r1, 800cb44 <__sflush_r+0xac>
 800cb14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb18:	4299      	cmp	r1, r3
 800cb1a:	d002      	beq.n	800cb22 <__sflush_r+0x8a>
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	f7fe fd67 	bl	800b5f0 <_free_r>
 800cb22:	2300      	movs	r3, #0
 800cb24:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb26:	e00d      	b.n	800cb44 <__sflush_r+0xac>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	47b0      	blx	r6
 800cb2e:	4602      	mov	r2, r0
 800cb30:	1c50      	adds	r0, r2, #1
 800cb32:	d1c9      	bne.n	800cac8 <__sflush_r+0x30>
 800cb34:	682b      	ldr	r3, [r5, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d0c6      	beq.n	800cac8 <__sflush_r+0x30>
 800cb3a:	2b1d      	cmp	r3, #29
 800cb3c:	d001      	beq.n	800cb42 <__sflush_r+0xaa>
 800cb3e:	2b16      	cmp	r3, #22
 800cb40:	d11d      	bne.n	800cb7e <__sflush_r+0xe6>
 800cb42:	602f      	str	r7, [r5, #0]
 800cb44:	2000      	movs	r0, #0
 800cb46:	e021      	b.n	800cb8c <__sflush_r+0xf4>
 800cb48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb4c:	b21b      	sxth	r3, r3
 800cb4e:	e01a      	b.n	800cb86 <__sflush_r+0xee>
 800cb50:	690f      	ldr	r7, [r1, #16]
 800cb52:	2f00      	cmp	r7, #0
 800cb54:	d0f6      	beq.n	800cb44 <__sflush_r+0xac>
 800cb56:	0793      	lsls	r3, r2, #30
 800cb58:	bf18      	it	ne
 800cb5a:	2300      	movne	r3, #0
 800cb5c:	680e      	ldr	r6, [r1, #0]
 800cb5e:	bf08      	it	eq
 800cb60:	694b      	ldreq	r3, [r1, #20]
 800cb62:	1bf6      	subs	r6, r6, r7
 800cb64:	600f      	str	r7, [r1, #0]
 800cb66:	608b      	str	r3, [r1, #8]
 800cb68:	2e00      	cmp	r6, #0
 800cb6a:	ddeb      	ble.n	800cb44 <__sflush_r+0xac>
 800cb6c:	4633      	mov	r3, r6
 800cb6e:	463a      	mov	r2, r7
 800cb70:	4628      	mov	r0, r5
 800cb72:	6a21      	ldr	r1, [r4, #32]
 800cb74:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cb78:	47e0      	blx	ip
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	dc07      	bgt.n	800cb8e <__sflush_r+0xf6>
 800cb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb86:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8a:	81a3      	strh	r3, [r4, #12]
 800cb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb8e:	4407      	add	r7, r0
 800cb90:	1a36      	subs	r6, r6, r0
 800cb92:	e7e9      	b.n	800cb68 <__sflush_r+0xd0>
 800cb94:	dfbffffe 	.word	0xdfbffffe

0800cb98 <_fflush_r>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	690b      	ldr	r3, [r1, #16]
 800cb9c:	4605      	mov	r5, r0
 800cb9e:	460c      	mov	r4, r1
 800cba0:	b913      	cbnz	r3, 800cba8 <_fflush_r+0x10>
 800cba2:	2500      	movs	r5, #0
 800cba4:	4628      	mov	r0, r5
 800cba6:	bd38      	pop	{r3, r4, r5, pc}
 800cba8:	b118      	cbz	r0, 800cbb2 <_fflush_r+0x1a>
 800cbaa:	6a03      	ldr	r3, [r0, #32]
 800cbac:	b90b      	cbnz	r3, 800cbb2 <_fflush_r+0x1a>
 800cbae:	f7fd fd43 	bl	800a638 <__sinit>
 800cbb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d0f3      	beq.n	800cba2 <_fflush_r+0xa>
 800cbba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cbbc:	07d0      	lsls	r0, r2, #31
 800cbbe:	d404      	bmi.n	800cbca <_fflush_r+0x32>
 800cbc0:	0599      	lsls	r1, r3, #22
 800cbc2:	d402      	bmi.n	800cbca <_fflush_r+0x32>
 800cbc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbc6:	f7fd fe9e 	bl	800a906 <__retarget_lock_acquire_recursive>
 800cbca:	4628      	mov	r0, r5
 800cbcc:	4621      	mov	r1, r4
 800cbce:	f7ff ff63 	bl	800ca98 <__sflush_r>
 800cbd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	07da      	lsls	r2, r3, #31
 800cbd8:	d4e4      	bmi.n	800cba4 <_fflush_r+0xc>
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	059b      	lsls	r3, r3, #22
 800cbde:	d4e1      	bmi.n	800cba4 <_fflush_r+0xc>
 800cbe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbe2:	f7fd fe91 	bl	800a908 <__retarget_lock_release_recursive>
 800cbe6:	e7dd      	b.n	800cba4 <_fflush_r+0xc>

0800cbe8 <memmove>:
 800cbe8:	4288      	cmp	r0, r1
 800cbea:	b510      	push	{r4, lr}
 800cbec:	eb01 0402 	add.w	r4, r1, r2
 800cbf0:	d902      	bls.n	800cbf8 <memmove+0x10>
 800cbf2:	4284      	cmp	r4, r0
 800cbf4:	4623      	mov	r3, r4
 800cbf6:	d807      	bhi.n	800cc08 <memmove+0x20>
 800cbf8:	1e43      	subs	r3, r0, #1
 800cbfa:	42a1      	cmp	r1, r4
 800cbfc:	d008      	beq.n	800cc10 <memmove+0x28>
 800cbfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc06:	e7f8      	b.n	800cbfa <memmove+0x12>
 800cc08:	4601      	mov	r1, r0
 800cc0a:	4402      	add	r2, r0
 800cc0c:	428a      	cmp	r2, r1
 800cc0e:	d100      	bne.n	800cc12 <memmove+0x2a>
 800cc10:	bd10      	pop	{r4, pc}
 800cc12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc1a:	e7f7      	b.n	800cc0c <memmove+0x24>

0800cc1c <_sbrk_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	2300      	movs	r3, #0
 800cc20:	4d05      	ldr	r5, [pc, #20]	@ (800cc38 <_sbrk_r+0x1c>)
 800cc22:	4604      	mov	r4, r0
 800cc24:	4608      	mov	r0, r1
 800cc26:	602b      	str	r3, [r5, #0]
 800cc28:	f7f6 ff78 	bl	8003b1c <_sbrk>
 800cc2c:	1c43      	adds	r3, r0, #1
 800cc2e:	d102      	bne.n	800cc36 <_sbrk_r+0x1a>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	b103      	cbz	r3, 800cc36 <_sbrk_r+0x1a>
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	bd38      	pop	{r3, r4, r5, pc}
 800cc38:	200008cc 	.word	0x200008cc

0800cc3c <__assert_func>:
 800cc3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc3e:	4614      	mov	r4, r2
 800cc40:	461a      	mov	r2, r3
 800cc42:	4b09      	ldr	r3, [pc, #36]	@ (800cc68 <__assert_func+0x2c>)
 800cc44:	4605      	mov	r5, r0
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68d8      	ldr	r0, [r3, #12]
 800cc4a:	b954      	cbnz	r4, 800cc62 <__assert_func+0x26>
 800cc4c:	4b07      	ldr	r3, [pc, #28]	@ (800cc6c <__assert_func+0x30>)
 800cc4e:	461c      	mov	r4, r3
 800cc50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc54:	9100      	str	r1, [sp, #0]
 800cc56:	462b      	mov	r3, r5
 800cc58:	4905      	ldr	r1, [pc, #20]	@ (800cc70 <__assert_func+0x34>)
 800cc5a:	f000 f84f 	bl	800ccfc <fiprintf>
 800cc5e:	f000 f85f 	bl	800cd20 <abort>
 800cc62:	4b04      	ldr	r3, [pc, #16]	@ (800cc74 <__assert_func+0x38>)
 800cc64:	e7f4      	b.n	800cc50 <__assert_func+0x14>
 800cc66:	bf00      	nop
 800cc68:	20000184 	.word	0x20000184
 800cc6c:	0800ee24 	.word	0x0800ee24
 800cc70:	0800edf6 	.word	0x0800edf6
 800cc74:	0800ede9 	.word	0x0800ede9

0800cc78 <_calloc_r>:
 800cc78:	b570      	push	{r4, r5, r6, lr}
 800cc7a:	fba1 5402 	umull	r5, r4, r1, r2
 800cc7e:	b93c      	cbnz	r4, 800cc90 <_calloc_r+0x18>
 800cc80:	4629      	mov	r1, r5
 800cc82:	f7ff f861 	bl	800bd48 <_malloc_r>
 800cc86:	4606      	mov	r6, r0
 800cc88:	b928      	cbnz	r0, 800cc96 <_calloc_r+0x1e>
 800cc8a:	2600      	movs	r6, #0
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}
 800cc90:	220c      	movs	r2, #12
 800cc92:	6002      	str	r2, [r0, #0]
 800cc94:	e7f9      	b.n	800cc8a <_calloc_r+0x12>
 800cc96:	462a      	mov	r2, r5
 800cc98:	4621      	mov	r1, r4
 800cc9a:	f7fd fd66 	bl	800a76a <memset>
 800cc9e:	e7f5      	b.n	800cc8c <_calloc_r+0x14>

0800cca0 <_realloc_r>:
 800cca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca4:	4680      	mov	r8, r0
 800cca6:	4615      	mov	r5, r2
 800cca8:	460c      	mov	r4, r1
 800ccaa:	b921      	cbnz	r1, 800ccb6 <_realloc_r+0x16>
 800ccac:	4611      	mov	r1, r2
 800ccae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb2:	f7ff b849 	b.w	800bd48 <_malloc_r>
 800ccb6:	b92a      	cbnz	r2, 800ccc4 <_realloc_r+0x24>
 800ccb8:	f7fe fc9a 	bl	800b5f0 <_free_r>
 800ccbc:	2400      	movs	r4, #0
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc4:	f000 f833 	bl	800cd2e <_malloc_usable_size_r>
 800ccc8:	4285      	cmp	r5, r0
 800ccca:	4606      	mov	r6, r0
 800cccc:	d802      	bhi.n	800ccd4 <_realloc_r+0x34>
 800ccce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ccd2:	d8f4      	bhi.n	800ccbe <_realloc_r+0x1e>
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4640      	mov	r0, r8
 800ccd8:	f7ff f836 	bl	800bd48 <_malloc_r>
 800ccdc:	4607      	mov	r7, r0
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0ec      	beq.n	800ccbc <_realloc_r+0x1c>
 800cce2:	42b5      	cmp	r5, r6
 800cce4:	462a      	mov	r2, r5
 800cce6:	4621      	mov	r1, r4
 800cce8:	bf28      	it	cs
 800ccea:	4632      	movcs	r2, r6
 800ccec:	f7fd fe1b 	bl	800a926 <memcpy>
 800ccf0:	4621      	mov	r1, r4
 800ccf2:	4640      	mov	r0, r8
 800ccf4:	f7fe fc7c 	bl	800b5f0 <_free_r>
 800ccf8:	463c      	mov	r4, r7
 800ccfa:	e7e0      	b.n	800ccbe <_realloc_r+0x1e>

0800ccfc <fiprintf>:
 800ccfc:	b40e      	push	{r1, r2, r3}
 800ccfe:	b503      	push	{r0, r1, lr}
 800cd00:	4601      	mov	r1, r0
 800cd02:	ab03      	add	r3, sp, #12
 800cd04:	4805      	ldr	r0, [pc, #20]	@ (800cd1c <fiprintf+0x20>)
 800cd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd0a:	6800      	ldr	r0, [r0, #0]
 800cd0c:	9301      	str	r3, [sp, #4]
 800cd0e:	f000 f83d 	bl	800cd8c <_vfiprintf_r>
 800cd12:	b002      	add	sp, #8
 800cd14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd18:	b003      	add	sp, #12
 800cd1a:	4770      	bx	lr
 800cd1c:	20000184 	.word	0x20000184

0800cd20 <abort>:
 800cd20:	2006      	movs	r0, #6
 800cd22:	b508      	push	{r3, lr}
 800cd24:	f000 fa06 	bl	800d134 <raise>
 800cd28:	2001      	movs	r0, #1
 800cd2a:	f7f6 fe82 	bl	8003a32 <_exit>

0800cd2e <_malloc_usable_size_r>:
 800cd2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd32:	1f18      	subs	r0, r3, #4
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	bfbc      	itt	lt
 800cd38:	580b      	ldrlt	r3, [r1, r0]
 800cd3a:	18c0      	addlt	r0, r0, r3
 800cd3c:	4770      	bx	lr

0800cd3e <__sfputc_r>:
 800cd3e:	6893      	ldr	r3, [r2, #8]
 800cd40:	b410      	push	{r4}
 800cd42:	3b01      	subs	r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	6093      	str	r3, [r2, #8]
 800cd48:	da07      	bge.n	800cd5a <__sfputc_r+0x1c>
 800cd4a:	6994      	ldr	r4, [r2, #24]
 800cd4c:	42a3      	cmp	r3, r4
 800cd4e:	db01      	blt.n	800cd54 <__sfputc_r+0x16>
 800cd50:	290a      	cmp	r1, #10
 800cd52:	d102      	bne.n	800cd5a <__sfputc_r+0x1c>
 800cd54:	bc10      	pop	{r4}
 800cd56:	f000 b931 	b.w	800cfbc <__swbuf_r>
 800cd5a:	6813      	ldr	r3, [r2, #0]
 800cd5c:	1c58      	adds	r0, r3, #1
 800cd5e:	6010      	str	r0, [r2, #0]
 800cd60:	7019      	strb	r1, [r3, #0]
 800cd62:	4608      	mov	r0, r1
 800cd64:	bc10      	pop	{r4}
 800cd66:	4770      	bx	lr

0800cd68 <__sfputs_r>:
 800cd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	460f      	mov	r7, r1
 800cd6e:	4614      	mov	r4, r2
 800cd70:	18d5      	adds	r5, r2, r3
 800cd72:	42ac      	cmp	r4, r5
 800cd74:	d101      	bne.n	800cd7a <__sfputs_r+0x12>
 800cd76:	2000      	movs	r0, #0
 800cd78:	e007      	b.n	800cd8a <__sfputs_r+0x22>
 800cd7a:	463a      	mov	r2, r7
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd82:	f7ff ffdc 	bl	800cd3e <__sfputc_r>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	d1f3      	bne.n	800cd72 <__sfputs_r+0xa>
 800cd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd8c <_vfiprintf_r>:
 800cd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd90:	460d      	mov	r5, r1
 800cd92:	4614      	mov	r4, r2
 800cd94:	4698      	mov	r8, r3
 800cd96:	4606      	mov	r6, r0
 800cd98:	b09d      	sub	sp, #116	@ 0x74
 800cd9a:	b118      	cbz	r0, 800cda4 <_vfiprintf_r+0x18>
 800cd9c:	6a03      	ldr	r3, [r0, #32]
 800cd9e:	b90b      	cbnz	r3, 800cda4 <_vfiprintf_r+0x18>
 800cda0:	f7fd fc4a 	bl	800a638 <__sinit>
 800cda4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cda6:	07d9      	lsls	r1, r3, #31
 800cda8:	d405      	bmi.n	800cdb6 <_vfiprintf_r+0x2a>
 800cdaa:	89ab      	ldrh	r3, [r5, #12]
 800cdac:	059a      	lsls	r2, r3, #22
 800cdae:	d402      	bmi.n	800cdb6 <_vfiprintf_r+0x2a>
 800cdb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdb2:	f7fd fda8 	bl	800a906 <__retarget_lock_acquire_recursive>
 800cdb6:	89ab      	ldrh	r3, [r5, #12]
 800cdb8:	071b      	lsls	r3, r3, #28
 800cdba:	d501      	bpl.n	800cdc0 <_vfiprintf_r+0x34>
 800cdbc:	692b      	ldr	r3, [r5, #16]
 800cdbe:	b99b      	cbnz	r3, 800cde8 <_vfiprintf_r+0x5c>
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f000 f938 	bl	800d038 <__swsetup_r>
 800cdc8:	b170      	cbz	r0, 800cde8 <_vfiprintf_r+0x5c>
 800cdca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdcc:	07dc      	lsls	r4, r3, #31
 800cdce:	d504      	bpl.n	800cdda <_vfiprintf_r+0x4e>
 800cdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd4:	b01d      	add	sp, #116	@ 0x74
 800cdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdda:	89ab      	ldrh	r3, [r5, #12]
 800cddc:	0598      	lsls	r0, r3, #22
 800cdde:	d4f7      	bmi.n	800cdd0 <_vfiprintf_r+0x44>
 800cde0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cde2:	f7fd fd91 	bl	800a908 <__retarget_lock_release_recursive>
 800cde6:	e7f3      	b.n	800cdd0 <_vfiprintf_r+0x44>
 800cde8:	2300      	movs	r3, #0
 800cdea:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdec:	2320      	movs	r3, #32
 800cdee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdf2:	2330      	movs	r3, #48	@ 0x30
 800cdf4:	f04f 0901 	mov.w	r9, #1
 800cdf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdfc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cfa8 <_vfiprintf_r+0x21c>
 800ce00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce04:	4623      	mov	r3, r4
 800ce06:	469a      	mov	sl, r3
 800ce08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce0c:	b10a      	cbz	r2, 800ce12 <_vfiprintf_r+0x86>
 800ce0e:	2a25      	cmp	r2, #37	@ 0x25
 800ce10:	d1f9      	bne.n	800ce06 <_vfiprintf_r+0x7a>
 800ce12:	ebba 0b04 	subs.w	fp, sl, r4
 800ce16:	d00b      	beq.n	800ce30 <_vfiprintf_r+0xa4>
 800ce18:	465b      	mov	r3, fp
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	4630      	mov	r0, r6
 800ce20:	f7ff ffa2 	bl	800cd68 <__sfputs_r>
 800ce24:	3001      	adds	r0, #1
 800ce26:	f000 80a7 	beq.w	800cf78 <_vfiprintf_r+0x1ec>
 800ce2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce2c:	445a      	add	r2, fp
 800ce2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce30:	f89a 3000 	ldrb.w	r3, [sl]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f000 809f 	beq.w	800cf78 <_vfiprintf_r+0x1ec>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce44:	f10a 0a01 	add.w	sl, sl, #1
 800ce48:	9304      	str	r3, [sp, #16]
 800ce4a:	9307      	str	r3, [sp, #28]
 800ce4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce50:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce52:	4654      	mov	r4, sl
 800ce54:	2205      	movs	r2, #5
 800ce56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce5a:	4853      	ldr	r0, [pc, #332]	@ (800cfa8 <_vfiprintf_r+0x21c>)
 800ce5c:	f7fd fd55 	bl	800a90a <memchr>
 800ce60:	9a04      	ldr	r2, [sp, #16]
 800ce62:	b9d8      	cbnz	r0, 800ce9c <_vfiprintf_r+0x110>
 800ce64:	06d1      	lsls	r1, r2, #27
 800ce66:	bf44      	itt	mi
 800ce68:	2320      	movmi	r3, #32
 800ce6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce6e:	0713      	lsls	r3, r2, #28
 800ce70:	bf44      	itt	mi
 800ce72:	232b      	movmi	r3, #43	@ 0x2b
 800ce74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce78:	f89a 3000 	ldrb.w	r3, [sl]
 800ce7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce7e:	d015      	beq.n	800ceac <_vfiprintf_r+0x120>
 800ce80:	4654      	mov	r4, sl
 800ce82:	2000      	movs	r0, #0
 800ce84:	f04f 0c0a 	mov.w	ip, #10
 800ce88:	9a07      	ldr	r2, [sp, #28]
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce90:	3b30      	subs	r3, #48	@ 0x30
 800ce92:	2b09      	cmp	r3, #9
 800ce94:	d94b      	bls.n	800cf2e <_vfiprintf_r+0x1a2>
 800ce96:	b1b0      	cbz	r0, 800cec6 <_vfiprintf_r+0x13a>
 800ce98:	9207      	str	r2, [sp, #28]
 800ce9a:	e014      	b.n	800cec6 <_vfiprintf_r+0x13a>
 800ce9c:	eba0 0308 	sub.w	r3, r0, r8
 800cea0:	fa09 f303 	lsl.w	r3, r9, r3
 800cea4:	4313      	orrs	r3, r2
 800cea6:	46a2      	mov	sl, r4
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	e7d2      	b.n	800ce52 <_vfiprintf_r+0xc6>
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	1d19      	adds	r1, r3, #4
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	9103      	str	r1, [sp, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	bfbb      	ittet	lt
 800ceb8:	425b      	neglt	r3, r3
 800ceba:	f042 0202 	orrlt.w	r2, r2, #2
 800cebe:	9307      	strge	r3, [sp, #28]
 800cec0:	9307      	strlt	r3, [sp, #28]
 800cec2:	bfb8      	it	lt
 800cec4:	9204      	strlt	r2, [sp, #16]
 800cec6:	7823      	ldrb	r3, [r4, #0]
 800cec8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ceca:	d10a      	bne.n	800cee2 <_vfiprintf_r+0x156>
 800cecc:	7863      	ldrb	r3, [r4, #1]
 800cece:	2b2a      	cmp	r3, #42	@ 0x2a
 800ced0:	d132      	bne.n	800cf38 <_vfiprintf_r+0x1ac>
 800ced2:	9b03      	ldr	r3, [sp, #12]
 800ced4:	3402      	adds	r4, #2
 800ced6:	1d1a      	adds	r2, r3, #4
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	9203      	str	r2, [sp, #12]
 800cedc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cee0:	9305      	str	r3, [sp, #20]
 800cee2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cfac <_vfiprintf_r+0x220>
 800cee6:	2203      	movs	r2, #3
 800cee8:	4650      	mov	r0, sl
 800ceea:	7821      	ldrb	r1, [r4, #0]
 800ceec:	f7fd fd0d 	bl	800a90a <memchr>
 800cef0:	b138      	cbz	r0, 800cf02 <_vfiprintf_r+0x176>
 800cef2:	2240      	movs	r2, #64	@ 0x40
 800cef4:	9b04      	ldr	r3, [sp, #16]
 800cef6:	eba0 000a 	sub.w	r0, r0, sl
 800cefa:	4082      	lsls	r2, r0
 800cefc:	4313      	orrs	r3, r2
 800cefe:	3401      	adds	r4, #1
 800cf00:	9304      	str	r3, [sp, #16]
 800cf02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf06:	2206      	movs	r2, #6
 800cf08:	4829      	ldr	r0, [pc, #164]	@ (800cfb0 <_vfiprintf_r+0x224>)
 800cf0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf0e:	f7fd fcfc 	bl	800a90a <memchr>
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d03f      	beq.n	800cf96 <_vfiprintf_r+0x20a>
 800cf16:	4b27      	ldr	r3, [pc, #156]	@ (800cfb4 <_vfiprintf_r+0x228>)
 800cf18:	bb1b      	cbnz	r3, 800cf62 <_vfiprintf_r+0x1d6>
 800cf1a:	9b03      	ldr	r3, [sp, #12]
 800cf1c:	3307      	adds	r3, #7
 800cf1e:	f023 0307 	bic.w	r3, r3, #7
 800cf22:	3308      	adds	r3, #8
 800cf24:	9303      	str	r3, [sp, #12]
 800cf26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf28:	443b      	add	r3, r7
 800cf2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf2c:	e76a      	b.n	800ce04 <_vfiprintf_r+0x78>
 800cf2e:	460c      	mov	r4, r1
 800cf30:	2001      	movs	r0, #1
 800cf32:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf36:	e7a8      	b.n	800ce8a <_vfiprintf_r+0xfe>
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f04f 0c0a 	mov.w	ip, #10
 800cf3e:	4619      	mov	r1, r3
 800cf40:	3401      	adds	r4, #1
 800cf42:	9305      	str	r3, [sp, #20]
 800cf44:	4620      	mov	r0, r4
 800cf46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf4a:	3a30      	subs	r2, #48	@ 0x30
 800cf4c:	2a09      	cmp	r2, #9
 800cf4e:	d903      	bls.n	800cf58 <_vfiprintf_r+0x1cc>
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0c6      	beq.n	800cee2 <_vfiprintf_r+0x156>
 800cf54:	9105      	str	r1, [sp, #20]
 800cf56:	e7c4      	b.n	800cee2 <_vfiprintf_r+0x156>
 800cf58:	4604      	mov	r4, r0
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf60:	e7f0      	b.n	800cf44 <_vfiprintf_r+0x1b8>
 800cf62:	ab03      	add	r3, sp, #12
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	462a      	mov	r2, r5
 800cf68:	4630      	mov	r0, r6
 800cf6a:	4b13      	ldr	r3, [pc, #76]	@ (800cfb8 <_vfiprintf_r+0x22c>)
 800cf6c:	a904      	add	r1, sp, #16
 800cf6e:	f7fc ff19 	bl	8009da4 <_printf_float>
 800cf72:	4607      	mov	r7, r0
 800cf74:	1c78      	adds	r0, r7, #1
 800cf76:	d1d6      	bne.n	800cf26 <_vfiprintf_r+0x19a>
 800cf78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf7a:	07d9      	lsls	r1, r3, #31
 800cf7c:	d405      	bmi.n	800cf8a <_vfiprintf_r+0x1fe>
 800cf7e:	89ab      	ldrh	r3, [r5, #12]
 800cf80:	059a      	lsls	r2, r3, #22
 800cf82:	d402      	bmi.n	800cf8a <_vfiprintf_r+0x1fe>
 800cf84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf86:	f7fd fcbf 	bl	800a908 <__retarget_lock_release_recursive>
 800cf8a:	89ab      	ldrh	r3, [r5, #12]
 800cf8c:	065b      	lsls	r3, r3, #25
 800cf8e:	f53f af1f 	bmi.w	800cdd0 <_vfiprintf_r+0x44>
 800cf92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf94:	e71e      	b.n	800cdd4 <_vfiprintf_r+0x48>
 800cf96:	ab03      	add	r3, sp, #12
 800cf98:	9300      	str	r3, [sp, #0]
 800cf9a:	462a      	mov	r2, r5
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	4b06      	ldr	r3, [pc, #24]	@ (800cfb8 <_vfiprintf_r+0x22c>)
 800cfa0:	a904      	add	r1, sp, #16
 800cfa2:	f7fd f99d 	bl	800a2e0 <_printf_i>
 800cfa6:	e7e4      	b.n	800cf72 <_vfiprintf_r+0x1e6>
 800cfa8:	0800edd8 	.word	0x0800edd8
 800cfac:	0800edde 	.word	0x0800edde
 800cfb0:	0800ede2 	.word	0x0800ede2
 800cfb4:	08009da5 	.word	0x08009da5
 800cfb8:	0800cd69 	.word	0x0800cd69

0800cfbc <__swbuf_r>:
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	460e      	mov	r6, r1
 800cfc0:	4614      	mov	r4, r2
 800cfc2:	4605      	mov	r5, r0
 800cfc4:	b118      	cbz	r0, 800cfce <__swbuf_r+0x12>
 800cfc6:	6a03      	ldr	r3, [r0, #32]
 800cfc8:	b90b      	cbnz	r3, 800cfce <__swbuf_r+0x12>
 800cfca:	f7fd fb35 	bl	800a638 <__sinit>
 800cfce:	69a3      	ldr	r3, [r4, #24]
 800cfd0:	60a3      	str	r3, [r4, #8]
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	071a      	lsls	r2, r3, #28
 800cfd6:	d501      	bpl.n	800cfdc <__swbuf_r+0x20>
 800cfd8:	6923      	ldr	r3, [r4, #16]
 800cfda:	b943      	cbnz	r3, 800cfee <__swbuf_r+0x32>
 800cfdc:	4621      	mov	r1, r4
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f000 f82a 	bl	800d038 <__swsetup_r>
 800cfe4:	b118      	cbz	r0, 800cfee <__swbuf_r+0x32>
 800cfe6:	f04f 37ff 	mov.w	r7, #4294967295
 800cfea:	4638      	mov	r0, r7
 800cfec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	6922      	ldr	r2, [r4, #16]
 800cff2:	b2f6      	uxtb	r6, r6
 800cff4:	1a98      	subs	r0, r3, r2
 800cff6:	6963      	ldr	r3, [r4, #20]
 800cff8:	4637      	mov	r7, r6
 800cffa:	4283      	cmp	r3, r0
 800cffc:	dc05      	bgt.n	800d00a <__swbuf_r+0x4e>
 800cffe:	4621      	mov	r1, r4
 800d000:	4628      	mov	r0, r5
 800d002:	f7ff fdc9 	bl	800cb98 <_fflush_r>
 800d006:	2800      	cmp	r0, #0
 800d008:	d1ed      	bne.n	800cfe6 <__swbuf_r+0x2a>
 800d00a:	68a3      	ldr	r3, [r4, #8]
 800d00c:	3b01      	subs	r3, #1
 800d00e:	60a3      	str	r3, [r4, #8]
 800d010:	6823      	ldr	r3, [r4, #0]
 800d012:	1c5a      	adds	r2, r3, #1
 800d014:	6022      	str	r2, [r4, #0]
 800d016:	701e      	strb	r6, [r3, #0]
 800d018:	6962      	ldr	r2, [r4, #20]
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d004      	beq.n	800d02a <__swbuf_r+0x6e>
 800d020:	89a3      	ldrh	r3, [r4, #12]
 800d022:	07db      	lsls	r3, r3, #31
 800d024:	d5e1      	bpl.n	800cfea <__swbuf_r+0x2e>
 800d026:	2e0a      	cmp	r6, #10
 800d028:	d1df      	bne.n	800cfea <__swbuf_r+0x2e>
 800d02a:	4621      	mov	r1, r4
 800d02c:	4628      	mov	r0, r5
 800d02e:	f7ff fdb3 	bl	800cb98 <_fflush_r>
 800d032:	2800      	cmp	r0, #0
 800d034:	d0d9      	beq.n	800cfea <__swbuf_r+0x2e>
 800d036:	e7d6      	b.n	800cfe6 <__swbuf_r+0x2a>

0800d038 <__swsetup_r>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	4b29      	ldr	r3, [pc, #164]	@ (800d0e0 <__swsetup_r+0xa8>)
 800d03c:	4605      	mov	r5, r0
 800d03e:	6818      	ldr	r0, [r3, #0]
 800d040:	460c      	mov	r4, r1
 800d042:	b118      	cbz	r0, 800d04c <__swsetup_r+0x14>
 800d044:	6a03      	ldr	r3, [r0, #32]
 800d046:	b90b      	cbnz	r3, 800d04c <__swsetup_r+0x14>
 800d048:	f7fd faf6 	bl	800a638 <__sinit>
 800d04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d050:	0719      	lsls	r1, r3, #28
 800d052:	d422      	bmi.n	800d09a <__swsetup_r+0x62>
 800d054:	06da      	lsls	r2, r3, #27
 800d056:	d407      	bmi.n	800d068 <__swsetup_r+0x30>
 800d058:	2209      	movs	r2, #9
 800d05a:	602a      	str	r2, [r5, #0]
 800d05c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d060:	f04f 30ff 	mov.w	r0, #4294967295
 800d064:	81a3      	strh	r3, [r4, #12]
 800d066:	e033      	b.n	800d0d0 <__swsetup_r+0x98>
 800d068:	0758      	lsls	r0, r3, #29
 800d06a:	d512      	bpl.n	800d092 <__swsetup_r+0x5a>
 800d06c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d06e:	b141      	cbz	r1, 800d082 <__swsetup_r+0x4a>
 800d070:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d074:	4299      	cmp	r1, r3
 800d076:	d002      	beq.n	800d07e <__swsetup_r+0x46>
 800d078:	4628      	mov	r0, r5
 800d07a:	f7fe fab9 	bl	800b5f0 <_free_r>
 800d07e:	2300      	movs	r3, #0
 800d080:	6363      	str	r3, [r4, #52]	@ 0x34
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d088:	81a3      	strh	r3, [r4, #12]
 800d08a:	2300      	movs	r3, #0
 800d08c:	6063      	str	r3, [r4, #4]
 800d08e:	6923      	ldr	r3, [r4, #16]
 800d090:	6023      	str	r3, [r4, #0]
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	f043 0308 	orr.w	r3, r3, #8
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	6923      	ldr	r3, [r4, #16]
 800d09c:	b94b      	cbnz	r3, 800d0b2 <__swsetup_r+0x7a>
 800d09e:	89a3      	ldrh	r3, [r4, #12]
 800d0a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0a8:	d003      	beq.n	800d0b2 <__swsetup_r+0x7a>
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f000 f882 	bl	800d1b6 <__smakebuf_r>
 800d0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0b6:	f013 0201 	ands.w	r2, r3, #1
 800d0ba:	d00a      	beq.n	800d0d2 <__swsetup_r+0x9a>
 800d0bc:	2200      	movs	r2, #0
 800d0be:	60a2      	str	r2, [r4, #8]
 800d0c0:	6962      	ldr	r2, [r4, #20]
 800d0c2:	4252      	negs	r2, r2
 800d0c4:	61a2      	str	r2, [r4, #24]
 800d0c6:	6922      	ldr	r2, [r4, #16]
 800d0c8:	b942      	cbnz	r2, 800d0dc <__swsetup_r+0xa4>
 800d0ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0ce:	d1c5      	bne.n	800d05c <__swsetup_r+0x24>
 800d0d0:	bd38      	pop	{r3, r4, r5, pc}
 800d0d2:	0799      	lsls	r1, r3, #30
 800d0d4:	bf58      	it	pl
 800d0d6:	6962      	ldrpl	r2, [r4, #20]
 800d0d8:	60a2      	str	r2, [r4, #8]
 800d0da:	e7f4      	b.n	800d0c6 <__swsetup_r+0x8e>
 800d0dc:	2000      	movs	r0, #0
 800d0de:	e7f7      	b.n	800d0d0 <__swsetup_r+0x98>
 800d0e0:	20000184 	.word	0x20000184

0800d0e4 <_raise_r>:
 800d0e4:	291f      	cmp	r1, #31
 800d0e6:	b538      	push	{r3, r4, r5, lr}
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	d904      	bls.n	800d0f8 <_raise_r+0x14>
 800d0ee:	2316      	movs	r3, #22
 800d0f0:	6003      	str	r3, [r0, #0]
 800d0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d0fa:	b112      	cbz	r2, 800d102 <_raise_r+0x1e>
 800d0fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d100:	b94b      	cbnz	r3, 800d116 <_raise_r+0x32>
 800d102:	4628      	mov	r0, r5
 800d104:	f000 f830 	bl	800d168 <_getpid_r>
 800d108:	4622      	mov	r2, r4
 800d10a:	4601      	mov	r1, r0
 800d10c:	4628      	mov	r0, r5
 800d10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d112:	f000 b817 	b.w	800d144 <_kill_r>
 800d116:	2b01      	cmp	r3, #1
 800d118:	d00a      	beq.n	800d130 <_raise_r+0x4c>
 800d11a:	1c59      	adds	r1, r3, #1
 800d11c:	d103      	bne.n	800d126 <_raise_r+0x42>
 800d11e:	2316      	movs	r3, #22
 800d120:	6003      	str	r3, [r0, #0]
 800d122:	2001      	movs	r0, #1
 800d124:	e7e7      	b.n	800d0f6 <_raise_r+0x12>
 800d126:	2100      	movs	r1, #0
 800d128:	4620      	mov	r0, r4
 800d12a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d12e:	4798      	blx	r3
 800d130:	2000      	movs	r0, #0
 800d132:	e7e0      	b.n	800d0f6 <_raise_r+0x12>

0800d134 <raise>:
 800d134:	4b02      	ldr	r3, [pc, #8]	@ (800d140 <raise+0xc>)
 800d136:	4601      	mov	r1, r0
 800d138:	6818      	ldr	r0, [r3, #0]
 800d13a:	f7ff bfd3 	b.w	800d0e4 <_raise_r>
 800d13e:	bf00      	nop
 800d140:	20000184 	.word	0x20000184

0800d144 <_kill_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	2300      	movs	r3, #0
 800d148:	4d06      	ldr	r5, [pc, #24]	@ (800d164 <_kill_r+0x20>)
 800d14a:	4604      	mov	r4, r0
 800d14c:	4608      	mov	r0, r1
 800d14e:	4611      	mov	r1, r2
 800d150:	602b      	str	r3, [r5, #0]
 800d152:	f7f6 fc5e 	bl	8003a12 <_kill>
 800d156:	1c43      	adds	r3, r0, #1
 800d158:	d102      	bne.n	800d160 <_kill_r+0x1c>
 800d15a:	682b      	ldr	r3, [r5, #0]
 800d15c:	b103      	cbz	r3, 800d160 <_kill_r+0x1c>
 800d15e:	6023      	str	r3, [r4, #0]
 800d160:	bd38      	pop	{r3, r4, r5, pc}
 800d162:	bf00      	nop
 800d164:	200008cc 	.word	0x200008cc

0800d168 <_getpid_r>:
 800d168:	f7f6 bc4c 	b.w	8003a04 <_getpid>

0800d16c <__swhatbuf_r>:
 800d16c:	b570      	push	{r4, r5, r6, lr}
 800d16e:	460c      	mov	r4, r1
 800d170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d174:	4615      	mov	r5, r2
 800d176:	2900      	cmp	r1, #0
 800d178:	461e      	mov	r6, r3
 800d17a:	b096      	sub	sp, #88	@ 0x58
 800d17c:	da0c      	bge.n	800d198 <__swhatbuf_r+0x2c>
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	2100      	movs	r1, #0
 800d182:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d186:	bf14      	ite	ne
 800d188:	2340      	movne	r3, #64	@ 0x40
 800d18a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d18e:	2000      	movs	r0, #0
 800d190:	6031      	str	r1, [r6, #0]
 800d192:	602b      	str	r3, [r5, #0]
 800d194:	b016      	add	sp, #88	@ 0x58
 800d196:	bd70      	pop	{r4, r5, r6, pc}
 800d198:	466a      	mov	r2, sp
 800d19a:	f000 f849 	bl	800d230 <_fstat_r>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	dbed      	blt.n	800d17e <__swhatbuf_r+0x12>
 800d1a2:	9901      	ldr	r1, [sp, #4]
 800d1a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1ac:	4259      	negs	r1, r3
 800d1ae:	4159      	adcs	r1, r3
 800d1b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1b4:	e7eb      	b.n	800d18e <__swhatbuf_r+0x22>

0800d1b6 <__smakebuf_r>:
 800d1b6:	898b      	ldrh	r3, [r1, #12]
 800d1b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1ba:	079d      	lsls	r5, r3, #30
 800d1bc:	4606      	mov	r6, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	d507      	bpl.n	800d1d2 <__smakebuf_r+0x1c>
 800d1c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1c6:	6023      	str	r3, [r4, #0]
 800d1c8:	6123      	str	r3, [r4, #16]
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	6163      	str	r3, [r4, #20]
 800d1ce:	b003      	add	sp, #12
 800d1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1d2:	466a      	mov	r2, sp
 800d1d4:	ab01      	add	r3, sp, #4
 800d1d6:	f7ff ffc9 	bl	800d16c <__swhatbuf_r>
 800d1da:	9f00      	ldr	r7, [sp, #0]
 800d1dc:	4605      	mov	r5, r0
 800d1de:	4639      	mov	r1, r7
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f7fe fdb1 	bl	800bd48 <_malloc_r>
 800d1e6:	b948      	cbnz	r0, 800d1fc <__smakebuf_r+0x46>
 800d1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ec:	059a      	lsls	r2, r3, #22
 800d1ee:	d4ee      	bmi.n	800d1ce <__smakebuf_r+0x18>
 800d1f0:	f023 0303 	bic.w	r3, r3, #3
 800d1f4:	f043 0302 	orr.w	r3, r3, #2
 800d1f8:	81a3      	strh	r3, [r4, #12]
 800d1fa:	e7e2      	b.n	800d1c2 <__smakebuf_r+0xc>
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d206:	81a3      	strh	r3, [r4, #12]
 800d208:	9b01      	ldr	r3, [sp, #4]
 800d20a:	6020      	str	r0, [r4, #0]
 800d20c:	b15b      	cbz	r3, 800d226 <__smakebuf_r+0x70>
 800d20e:	4630      	mov	r0, r6
 800d210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d214:	f000 f81e 	bl	800d254 <_isatty_r>
 800d218:	b128      	cbz	r0, 800d226 <__smakebuf_r+0x70>
 800d21a:	89a3      	ldrh	r3, [r4, #12]
 800d21c:	f023 0303 	bic.w	r3, r3, #3
 800d220:	f043 0301 	orr.w	r3, r3, #1
 800d224:	81a3      	strh	r3, [r4, #12]
 800d226:	89a3      	ldrh	r3, [r4, #12]
 800d228:	431d      	orrs	r5, r3
 800d22a:	81a5      	strh	r5, [r4, #12]
 800d22c:	e7cf      	b.n	800d1ce <__smakebuf_r+0x18>
	...

0800d230 <_fstat_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	2300      	movs	r3, #0
 800d234:	4d06      	ldr	r5, [pc, #24]	@ (800d250 <_fstat_r+0x20>)
 800d236:	4604      	mov	r4, r0
 800d238:	4608      	mov	r0, r1
 800d23a:	4611      	mov	r1, r2
 800d23c:	602b      	str	r3, [r5, #0]
 800d23e:	f7f6 fc47 	bl	8003ad0 <_fstat>
 800d242:	1c43      	adds	r3, r0, #1
 800d244:	d102      	bne.n	800d24c <_fstat_r+0x1c>
 800d246:	682b      	ldr	r3, [r5, #0]
 800d248:	b103      	cbz	r3, 800d24c <_fstat_r+0x1c>
 800d24a:	6023      	str	r3, [r4, #0]
 800d24c:	bd38      	pop	{r3, r4, r5, pc}
 800d24e:	bf00      	nop
 800d250:	200008cc 	.word	0x200008cc

0800d254 <_isatty_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	2300      	movs	r3, #0
 800d258:	4d05      	ldr	r5, [pc, #20]	@ (800d270 <_isatty_r+0x1c>)
 800d25a:	4604      	mov	r4, r0
 800d25c:	4608      	mov	r0, r1
 800d25e:	602b      	str	r3, [r5, #0]
 800d260:	f7f6 fc45 	bl	8003aee <_isatty>
 800d264:	1c43      	adds	r3, r0, #1
 800d266:	d102      	bne.n	800d26e <_isatty_r+0x1a>
 800d268:	682b      	ldr	r3, [r5, #0]
 800d26a:	b103      	cbz	r3, 800d26e <_isatty_r+0x1a>
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	bd38      	pop	{r3, r4, r5, pc}
 800d270:	200008cc 	.word	0x200008cc

0800d274 <sqrt>:
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d276:	4606      	mov	r6, r0
 800d278:	460f      	mov	r7, r1
 800d27a:	f000 f8ab 	bl	800d3d4 <__ieee754_sqrt>
 800d27e:	4632      	mov	r2, r6
 800d280:	4604      	mov	r4, r0
 800d282:	460d      	mov	r5, r1
 800d284:	463b      	mov	r3, r7
 800d286:	4630      	mov	r0, r6
 800d288:	4639      	mov	r1, r7
 800d28a:	f7f3 fbbf 	bl	8000a0c <__aeabi_dcmpun>
 800d28e:	b990      	cbnz	r0, 800d2b6 <sqrt+0x42>
 800d290:	2200      	movs	r2, #0
 800d292:	2300      	movs	r3, #0
 800d294:	4630      	mov	r0, r6
 800d296:	4639      	mov	r1, r7
 800d298:	f7f3 fb90 	bl	80009bc <__aeabi_dcmplt>
 800d29c:	b158      	cbz	r0, 800d2b6 <sqrt+0x42>
 800d29e:	f7fd fb07 	bl	800a8b0 <__errno>
 800d2a2:	2321      	movs	r3, #33	@ 0x21
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	6003      	str	r3, [r0, #0]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	f7f3 fa3d 	bl	800072c <__aeabi_ddiv>
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	460d      	mov	r5, r1
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	4629      	mov	r1, r5
 800d2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2bc <cos>:
 800d2bc:	b530      	push	{r4, r5, lr}
 800d2be:	4d20      	ldr	r5, [pc, #128]	@ (800d340 <cos+0x84>)
 800d2c0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800d2c4:	42ac      	cmp	r4, r5
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	b087      	sub	sp, #28
 800d2cc:	d806      	bhi.n	800d2dc <cos+0x20>
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	b007      	add	sp, #28
 800d2d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2d8:	f000 b952 	b.w	800d580 <__kernel_cos>
 800d2dc:	4d19      	ldr	r5, [pc, #100]	@ (800d344 <cos+0x88>)
 800d2de:	42ac      	cmp	r4, r5
 800d2e0:	d903      	bls.n	800d2ea <cos+0x2e>
 800d2e2:	f7f2 ff41 	bl	8000168 <__aeabi_dsub>
 800d2e6:	b007      	add	sp, #28
 800d2e8:	bd30      	pop	{r4, r5, pc}
 800d2ea:	aa02      	add	r2, sp, #8
 800d2ec:	f000 fac0 	bl	800d870 <__ieee754_rem_pio2>
 800d2f0:	f000 0003 	and.w	r0, r0, #3
 800d2f4:	2801      	cmp	r0, #1
 800d2f6:	d009      	beq.n	800d30c <cos+0x50>
 800d2f8:	2802      	cmp	r0, #2
 800d2fa:	d011      	beq.n	800d320 <cos+0x64>
 800d2fc:	b9b8      	cbnz	r0, 800d32e <cos+0x72>
 800d2fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d306:	f000 f93b 	bl	800d580 <__kernel_cos>
 800d30a:	e7ec      	b.n	800d2e6 <cos+0x2a>
 800d30c:	9000      	str	r0, [sp, #0]
 800d30e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d316:	f000 f9f3 	bl	800d700 <__kernel_sin>
 800d31a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800d31e:	e7e2      	b.n	800d2e6 <cos+0x2a>
 800d320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d328:	f000 f92a 	bl	800d580 <__kernel_cos>
 800d32c:	e7f5      	b.n	800d31a <cos+0x5e>
 800d32e:	2301      	movs	r3, #1
 800d330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d33a:	f000 f9e1 	bl	800d700 <__kernel_sin>
 800d33e:	e7d2      	b.n	800d2e6 <cos+0x2a>
 800d340:	3fe921fb 	.word	0x3fe921fb
 800d344:	7fefffff 	.word	0x7fefffff

0800d348 <sin>:
 800d348:	b530      	push	{r4, r5, lr}
 800d34a:	4d20      	ldr	r5, [pc, #128]	@ (800d3cc <sin+0x84>)
 800d34c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800d350:	42ac      	cmp	r4, r5
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	b087      	sub	sp, #28
 800d358:	d806      	bhi.n	800d368 <sin+0x20>
 800d35a:	2300      	movs	r3, #0
 800d35c:	2200      	movs	r2, #0
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	2300      	movs	r3, #0
 800d362:	f000 f9cd 	bl	800d700 <__kernel_sin>
 800d366:	e004      	b.n	800d372 <sin+0x2a>
 800d368:	4d19      	ldr	r5, [pc, #100]	@ (800d3d0 <sin+0x88>)
 800d36a:	42ac      	cmp	r4, r5
 800d36c:	d903      	bls.n	800d376 <sin+0x2e>
 800d36e:	f7f2 fefb 	bl	8000168 <__aeabi_dsub>
 800d372:	b007      	add	sp, #28
 800d374:	bd30      	pop	{r4, r5, pc}
 800d376:	aa02      	add	r2, sp, #8
 800d378:	f000 fa7a 	bl	800d870 <__ieee754_rem_pio2>
 800d37c:	f000 0003 	and.w	r0, r0, #3
 800d380:	2801      	cmp	r0, #1
 800d382:	d009      	beq.n	800d398 <sin+0x50>
 800d384:	2802      	cmp	r0, #2
 800d386:	d00e      	beq.n	800d3a6 <sin+0x5e>
 800d388:	b9c0      	cbnz	r0, 800d3bc <sin+0x74>
 800d38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d38e:	2301      	movs	r3, #1
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d396:	e7e4      	b.n	800d362 <sin+0x1a>
 800d398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d39c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3a0:	f000 f8ee 	bl	800d580 <__kernel_cos>
 800d3a4:	e7e5      	b.n	800d372 <sin+0x2a>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3b2:	f000 f9a5 	bl	800d700 <__kernel_sin>
 800d3b6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800d3ba:	e7da      	b.n	800d372 <sin+0x2a>
 800d3bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3c4:	f000 f8dc 	bl	800d580 <__kernel_cos>
 800d3c8:	e7f5      	b.n	800d3b6 <sin+0x6e>
 800d3ca:	bf00      	nop
 800d3cc:	3fe921fb 	.word	0x3fe921fb
 800d3d0:	7fefffff 	.word	0x7fefffff

0800d3d4 <__ieee754_sqrt>:
 800d3d4:	4a67      	ldr	r2, [pc, #412]	@ (800d574 <__ieee754_sqrt+0x1a0>)
 800d3d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3da:	438a      	bics	r2, r1
 800d3dc:	4606      	mov	r6, r0
 800d3de:	460f      	mov	r7, r1
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	d10e      	bne.n	800d404 <__ieee754_sqrt+0x30>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	f7f3 f876 	bl	80004d8 <__aeabi_dmul>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	4639      	mov	r1, r7
 800d3f4:	f7f2 feba 	bl	800016c <__adddf3>
 800d3f8:	4606      	mov	r6, r0
 800d3fa:	460f      	mov	r7, r1
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	4639      	mov	r1, r7
 800d400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d404:	2900      	cmp	r1, #0
 800d406:	dc0c      	bgt.n	800d422 <__ieee754_sqrt+0x4e>
 800d408:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800d40c:	4302      	orrs	r2, r0
 800d40e:	d0f5      	beq.n	800d3fc <__ieee754_sqrt+0x28>
 800d410:	b189      	cbz	r1, 800d436 <__ieee754_sqrt+0x62>
 800d412:	4602      	mov	r2, r0
 800d414:	f7f2 fea8 	bl	8000168 <__aeabi_dsub>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	f7f3 f986 	bl	800072c <__aeabi_ddiv>
 800d420:	e7ea      	b.n	800d3f8 <__ieee754_sqrt+0x24>
 800d422:	150a      	asrs	r2, r1, #20
 800d424:	d115      	bne.n	800d452 <__ieee754_sqrt+0x7e>
 800d426:	2100      	movs	r1, #0
 800d428:	e009      	b.n	800d43e <__ieee754_sqrt+0x6a>
 800d42a:	0ae3      	lsrs	r3, r4, #11
 800d42c:	3a15      	subs	r2, #21
 800d42e:	0564      	lsls	r4, r4, #21
 800d430:	2b00      	cmp	r3, #0
 800d432:	d0fa      	beq.n	800d42a <__ieee754_sqrt+0x56>
 800d434:	e7f7      	b.n	800d426 <__ieee754_sqrt+0x52>
 800d436:	460a      	mov	r2, r1
 800d438:	e7fa      	b.n	800d430 <__ieee754_sqrt+0x5c>
 800d43a:	005b      	lsls	r3, r3, #1
 800d43c:	3101      	adds	r1, #1
 800d43e:	02d8      	lsls	r0, r3, #11
 800d440:	d5fb      	bpl.n	800d43a <__ieee754_sqrt+0x66>
 800d442:	1e48      	subs	r0, r1, #1
 800d444:	1a12      	subs	r2, r2, r0
 800d446:	f1c1 0020 	rsb	r0, r1, #32
 800d44a:	fa24 f000 	lsr.w	r0, r4, r0
 800d44e:	4303      	orrs	r3, r0
 800d450:	408c      	lsls	r4, r1
 800d452:	2600      	movs	r6, #0
 800d454:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800d458:	2116      	movs	r1, #22
 800d45a:	07d2      	lsls	r2, r2, #31
 800d45c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d460:	4632      	mov	r2, r6
 800d462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d46a:	bf5c      	itt	pl
 800d46c:	005b      	lslpl	r3, r3, #1
 800d46e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800d472:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d476:	bf58      	it	pl
 800d478:	0064      	lslpl	r4, r4, #1
 800d47a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d47e:	107f      	asrs	r7, r7, #1
 800d480:	0064      	lsls	r4, r4, #1
 800d482:	1815      	adds	r5, r2, r0
 800d484:	429d      	cmp	r5, r3
 800d486:	bfde      	ittt	le
 800d488:	182a      	addle	r2, r5, r0
 800d48a:	1b5b      	suble	r3, r3, r5
 800d48c:	1836      	addle	r6, r6, r0
 800d48e:	0fe5      	lsrs	r5, r4, #31
 800d490:	3901      	subs	r1, #1
 800d492:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800d496:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d49a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d49e:	d1f0      	bne.n	800d482 <__ieee754_sqrt+0xae>
 800d4a0:	460d      	mov	r5, r1
 800d4a2:	f04f 0a20 	mov.w	sl, #32
 800d4a6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	eb01 0c00 	add.w	ip, r1, r0
 800d4b0:	db02      	blt.n	800d4b8 <__ieee754_sqrt+0xe4>
 800d4b2:	d113      	bne.n	800d4dc <__ieee754_sqrt+0x108>
 800d4b4:	45a4      	cmp	ip, r4
 800d4b6:	d811      	bhi.n	800d4dc <__ieee754_sqrt+0x108>
 800d4b8:	f1bc 0f00 	cmp.w	ip, #0
 800d4bc:	eb0c 0100 	add.w	r1, ip, r0
 800d4c0:	da42      	bge.n	800d548 <__ieee754_sqrt+0x174>
 800d4c2:	2900      	cmp	r1, #0
 800d4c4:	db40      	blt.n	800d548 <__ieee754_sqrt+0x174>
 800d4c6:	f102 0e01 	add.w	lr, r2, #1
 800d4ca:	1a9b      	subs	r3, r3, r2
 800d4cc:	4672      	mov	r2, lr
 800d4ce:	45a4      	cmp	ip, r4
 800d4d0:	bf88      	it	hi
 800d4d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d4d6:	eba4 040c 	sub.w	r4, r4, ip
 800d4da:	4405      	add	r5, r0
 800d4dc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800d4e0:	f1ba 0a01 	subs.w	sl, sl, #1
 800d4e4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800d4e8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800d4ec:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d4f0:	d1db      	bne.n	800d4aa <__ieee754_sqrt+0xd6>
 800d4f2:	431c      	orrs	r4, r3
 800d4f4:	d01a      	beq.n	800d52c <__ieee754_sqrt+0x158>
 800d4f6:	4c20      	ldr	r4, [pc, #128]	@ (800d578 <__ieee754_sqrt+0x1a4>)
 800d4f8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800d57c <__ieee754_sqrt+0x1a8>
 800d4fc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d500:	e9db 2300 	ldrd	r2, r3, [fp]
 800d504:	f7f2 fe30 	bl	8000168 <__aeabi_dsub>
 800d508:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d50c:	4602      	mov	r2, r0
 800d50e:	460b      	mov	r3, r1
 800d510:	4640      	mov	r0, r8
 800d512:	4649      	mov	r1, r9
 800d514:	f7f3 fa5c 	bl	80009d0 <__aeabi_dcmple>
 800d518:	b140      	cbz	r0, 800d52c <__ieee754_sqrt+0x158>
 800d51a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d51e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d522:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d526:	d111      	bne.n	800d54c <__ieee754_sqrt+0x178>
 800d528:	4655      	mov	r5, sl
 800d52a:	3601      	adds	r6, #1
 800d52c:	1072      	asrs	r2, r6, #1
 800d52e:	086b      	lsrs	r3, r5, #1
 800d530:	07f1      	lsls	r1, r6, #31
 800d532:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d536:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d53a:	bf48      	it	mi
 800d53c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d540:	4618      	mov	r0, r3
 800d542:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800d546:	e757      	b.n	800d3f8 <__ieee754_sqrt+0x24>
 800d548:	4696      	mov	lr, r2
 800d54a:	e7be      	b.n	800d4ca <__ieee754_sqrt+0xf6>
 800d54c:	f7f2 fe0e 	bl	800016c <__adddf3>
 800d550:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	4640      	mov	r0, r8
 800d55a:	4649      	mov	r1, r9
 800d55c:	f7f3 fa2e 	bl	80009bc <__aeabi_dcmplt>
 800d560:	b120      	cbz	r0, 800d56c <__ieee754_sqrt+0x198>
 800d562:	1ca8      	adds	r0, r5, #2
 800d564:	bf08      	it	eq
 800d566:	3601      	addeq	r6, #1
 800d568:	3502      	adds	r5, #2
 800d56a:	e7df      	b.n	800d52c <__ieee754_sqrt+0x158>
 800d56c:	1c6b      	adds	r3, r5, #1
 800d56e:	f023 0501 	bic.w	r5, r3, #1
 800d572:	e7db      	b.n	800d52c <__ieee754_sqrt+0x158>
 800d574:	7ff00000 	.word	0x7ff00000
 800d578:	200001e0 	.word	0x200001e0
 800d57c:	200001d8 	.word	0x200001d8

0800d580 <__kernel_cos>:
 800d580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800d588:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800d58c:	4680      	mov	r8, r0
 800d58e:	4689      	mov	r9, r1
 800d590:	e9cd 2300 	strd	r2, r3, [sp]
 800d594:	d204      	bcs.n	800d5a0 <__kernel_cos+0x20>
 800d596:	f7f3 fa4f 	bl	8000a38 <__aeabi_d2iz>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	f000 8086 	beq.w	800d6ac <__kernel_cos+0x12c>
 800d5a0:	4642      	mov	r2, r8
 800d5a2:	464b      	mov	r3, r9
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	4649      	mov	r1, r9
 800d5a8:	f7f2 ff96 	bl	80004d8 <__aeabi_dmul>
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4b4e      	ldr	r3, [pc, #312]	@ (800d6e8 <__kernel_cos+0x168>)
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	f7f2 ff90 	bl	80004d8 <__aeabi_dmul>
 800d5b8:	a33f      	add	r3, pc, #252	@ (adr r3, 800d6b8 <__kernel_cos+0x138>)
 800d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5be:	4682      	mov	sl, r0
 800d5c0:	468b      	mov	fp, r1
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	f7f2 ff87 	bl	80004d8 <__aeabi_dmul>
 800d5ca:	a33d      	add	r3, pc, #244	@ (adr r3, 800d6c0 <__kernel_cos+0x140>)
 800d5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d0:	f7f2 fdcc 	bl	800016c <__adddf3>
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	462b      	mov	r3, r5
 800d5d8:	f7f2 ff7e 	bl	80004d8 <__aeabi_dmul>
 800d5dc:	a33a      	add	r3, pc, #232	@ (adr r3, 800d6c8 <__kernel_cos+0x148>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	f7f2 fdc1 	bl	8000168 <__aeabi_dsub>
 800d5e6:	4622      	mov	r2, r4
 800d5e8:	462b      	mov	r3, r5
 800d5ea:	f7f2 ff75 	bl	80004d8 <__aeabi_dmul>
 800d5ee:	a338      	add	r3, pc, #224	@ (adr r3, 800d6d0 <__kernel_cos+0x150>)
 800d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f4:	f7f2 fdba 	bl	800016c <__adddf3>
 800d5f8:	4622      	mov	r2, r4
 800d5fa:	462b      	mov	r3, r5
 800d5fc:	f7f2 ff6c 	bl	80004d8 <__aeabi_dmul>
 800d600:	a335      	add	r3, pc, #212	@ (adr r3, 800d6d8 <__kernel_cos+0x158>)
 800d602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d606:	f7f2 fdaf 	bl	8000168 <__aeabi_dsub>
 800d60a:	4622      	mov	r2, r4
 800d60c:	462b      	mov	r3, r5
 800d60e:	f7f2 ff63 	bl	80004d8 <__aeabi_dmul>
 800d612:	a333      	add	r3, pc, #204	@ (adr r3, 800d6e0 <__kernel_cos+0x160>)
 800d614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d618:	f7f2 fda8 	bl	800016c <__adddf3>
 800d61c:	4622      	mov	r2, r4
 800d61e:	462b      	mov	r3, r5
 800d620:	f7f2 ff5a 	bl	80004d8 <__aeabi_dmul>
 800d624:	4622      	mov	r2, r4
 800d626:	462b      	mov	r3, r5
 800d628:	f7f2 ff56 	bl	80004d8 <__aeabi_dmul>
 800d62c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d630:	4604      	mov	r4, r0
 800d632:	460d      	mov	r5, r1
 800d634:	4640      	mov	r0, r8
 800d636:	4649      	mov	r1, r9
 800d638:	f7f2 ff4e 	bl	80004d8 <__aeabi_dmul>
 800d63c:	460b      	mov	r3, r1
 800d63e:	4602      	mov	r2, r0
 800d640:	4629      	mov	r1, r5
 800d642:	4620      	mov	r0, r4
 800d644:	f7f2 fd90 	bl	8000168 <__aeabi_dsub>
 800d648:	4b28      	ldr	r3, [pc, #160]	@ (800d6ec <__kernel_cos+0x16c>)
 800d64a:	4680      	mov	r8, r0
 800d64c:	429e      	cmp	r6, r3
 800d64e:	4689      	mov	r9, r1
 800d650:	d80e      	bhi.n	800d670 <__kernel_cos+0xf0>
 800d652:	4602      	mov	r2, r0
 800d654:	460b      	mov	r3, r1
 800d656:	4650      	mov	r0, sl
 800d658:	4659      	mov	r1, fp
 800d65a:	f7f2 fd85 	bl	8000168 <__aeabi_dsub>
 800d65e:	4602      	mov	r2, r0
 800d660:	2000      	movs	r0, #0
 800d662:	460b      	mov	r3, r1
 800d664:	4922      	ldr	r1, [pc, #136]	@ (800d6f0 <__kernel_cos+0x170>)
 800d666:	f7f2 fd7f 	bl	8000168 <__aeabi_dsub>
 800d66a:	b003      	add	sp, #12
 800d66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d670:	2400      	movs	r4, #0
 800d672:	4b20      	ldr	r3, [pc, #128]	@ (800d6f4 <__kernel_cos+0x174>)
 800d674:	4622      	mov	r2, r4
 800d676:	429e      	cmp	r6, r3
 800d678:	bf8c      	ite	hi
 800d67a:	4d1f      	ldrhi	r5, [pc, #124]	@ (800d6f8 <__kernel_cos+0x178>)
 800d67c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800d680:	462b      	mov	r3, r5
 800d682:	2000      	movs	r0, #0
 800d684:	491a      	ldr	r1, [pc, #104]	@ (800d6f0 <__kernel_cos+0x170>)
 800d686:	f7f2 fd6f 	bl	8000168 <__aeabi_dsub>
 800d68a:	4622      	mov	r2, r4
 800d68c:	4606      	mov	r6, r0
 800d68e:	460f      	mov	r7, r1
 800d690:	462b      	mov	r3, r5
 800d692:	4650      	mov	r0, sl
 800d694:	4659      	mov	r1, fp
 800d696:	f7f2 fd67 	bl	8000168 <__aeabi_dsub>
 800d69a:	4642      	mov	r2, r8
 800d69c:	464b      	mov	r3, r9
 800d69e:	f7f2 fd63 	bl	8000168 <__aeabi_dsub>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	4639      	mov	r1, r7
 800d6aa:	e7dc      	b.n	800d666 <__kernel_cos+0xe6>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	4910      	ldr	r1, [pc, #64]	@ (800d6f0 <__kernel_cos+0x170>)
 800d6b0:	e7db      	b.n	800d66a <__kernel_cos+0xea>
 800d6b2:	bf00      	nop
 800d6b4:	f3af 8000 	nop.w
 800d6b8:	be8838d4 	.word	0xbe8838d4
 800d6bc:	bda8fae9 	.word	0xbda8fae9
 800d6c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d6c4:	3e21ee9e 	.word	0x3e21ee9e
 800d6c8:	809c52ad 	.word	0x809c52ad
 800d6cc:	3e927e4f 	.word	0x3e927e4f
 800d6d0:	19cb1590 	.word	0x19cb1590
 800d6d4:	3efa01a0 	.word	0x3efa01a0
 800d6d8:	16c15177 	.word	0x16c15177
 800d6dc:	3f56c16c 	.word	0x3f56c16c
 800d6e0:	5555554c 	.word	0x5555554c
 800d6e4:	3fa55555 	.word	0x3fa55555
 800d6e8:	3fe00000 	.word	0x3fe00000
 800d6ec:	3fd33332 	.word	0x3fd33332
 800d6f0:	3ff00000 	.word	0x3ff00000
 800d6f4:	3fe90000 	.word	0x3fe90000
 800d6f8:	3fd20000 	.word	0x3fd20000
 800d6fc:	00000000 	.word	0x00000000

0800d700 <__kernel_sin>:
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	461f      	mov	r7, r3
 800d706:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d70a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d70e:	4604      	mov	r4, r0
 800d710:	460d      	mov	r5, r1
 800d712:	4616      	mov	r6, r2
 800d714:	b085      	sub	sp, #20
 800d716:	d203      	bcs.n	800d720 <__kernel_sin+0x20>
 800d718:	f7f3 f98e 	bl	8000a38 <__aeabi_d2iz>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d051      	beq.n	800d7c4 <__kernel_sin+0xc4>
 800d720:	4622      	mov	r2, r4
 800d722:	462b      	mov	r3, r5
 800d724:	4620      	mov	r0, r4
 800d726:	4629      	mov	r1, r5
 800d728:	f7f2 fed6 	bl	80004d8 <__aeabi_dmul>
 800d72c:	4682      	mov	sl, r0
 800d72e:	468b      	mov	fp, r1
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	4620      	mov	r0, r4
 800d736:	4629      	mov	r1, r5
 800d738:	f7f2 fece 	bl	80004d8 <__aeabi_dmul>
 800d73c:	a33e      	add	r3, pc, #248	@ (adr r3, 800d838 <__kernel_sin+0x138>)
 800d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d742:	4680      	mov	r8, r0
 800d744:	4689      	mov	r9, r1
 800d746:	4650      	mov	r0, sl
 800d748:	4659      	mov	r1, fp
 800d74a:	f7f2 fec5 	bl	80004d8 <__aeabi_dmul>
 800d74e:	a33c      	add	r3, pc, #240	@ (adr r3, 800d840 <__kernel_sin+0x140>)
 800d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d754:	f7f2 fd08 	bl	8000168 <__aeabi_dsub>
 800d758:	4652      	mov	r2, sl
 800d75a:	465b      	mov	r3, fp
 800d75c:	f7f2 febc 	bl	80004d8 <__aeabi_dmul>
 800d760:	a339      	add	r3, pc, #228	@ (adr r3, 800d848 <__kernel_sin+0x148>)
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	f7f2 fd01 	bl	800016c <__adddf3>
 800d76a:	4652      	mov	r2, sl
 800d76c:	465b      	mov	r3, fp
 800d76e:	f7f2 feb3 	bl	80004d8 <__aeabi_dmul>
 800d772:	a337      	add	r3, pc, #220	@ (adr r3, 800d850 <__kernel_sin+0x150>)
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	f7f2 fcf6 	bl	8000168 <__aeabi_dsub>
 800d77c:	4652      	mov	r2, sl
 800d77e:	465b      	mov	r3, fp
 800d780:	f7f2 feaa 	bl	80004d8 <__aeabi_dmul>
 800d784:	a334      	add	r3, pc, #208	@ (adr r3, 800d858 <__kernel_sin+0x158>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f7f2 fcef 	bl	800016c <__adddf3>
 800d78e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d790:	e9cd 0100 	strd	r0, r1, [sp]
 800d794:	b9db      	cbnz	r3, 800d7ce <__kernel_sin+0xce>
 800d796:	4602      	mov	r2, r0
 800d798:	460b      	mov	r3, r1
 800d79a:	4650      	mov	r0, sl
 800d79c:	4659      	mov	r1, fp
 800d79e:	f7f2 fe9b 	bl	80004d8 <__aeabi_dmul>
 800d7a2:	a32f      	add	r3, pc, #188	@ (adr r3, 800d860 <__kernel_sin+0x160>)
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	f7f2 fcde 	bl	8000168 <__aeabi_dsub>
 800d7ac:	4642      	mov	r2, r8
 800d7ae:	464b      	mov	r3, r9
 800d7b0:	f7f2 fe92 	bl	80004d8 <__aeabi_dmul>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	f7f2 fcd6 	bl	800016c <__adddf3>
 800d7c0:	4604      	mov	r4, r0
 800d7c2:	460d      	mov	r5, r1
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	b005      	add	sp, #20
 800d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	4b24      	ldr	r3, [pc, #144]	@ (800d868 <__kernel_sin+0x168>)
 800d7d6:	f7f2 fe7f 	bl	80004d8 <__aeabi_dmul>
 800d7da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	f7f2 fe77 	bl	80004d8 <__aeabi_dmul>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7f2:	f7f2 fcb9 	bl	8000168 <__aeabi_dsub>
 800d7f6:	4652      	mov	r2, sl
 800d7f8:	465b      	mov	r3, fp
 800d7fa:	f7f2 fe6d 	bl	80004d8 <__aeabi_dmul>
 800d7fe:	4632      	mov	r2, r6
 800d800:	463b      	mov	r3, r7
 800d802:	f7f2 fcb1 	bl	8000168 <__aeabi_dsub>
 800d806:	a316      	add	r3, pc, #88	@ (adr r3, 800d860 <__kernel_sin+0x160>)
 800d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80c:	4606      	mov	r6, r0
 800d80e:	460f      	mov	r7, r1
 800d810:	4640      	mov	r0, r8
 800d812:	4649      	mov	r1, r9
 800d814:	f7f2 fe60 	bl	80004d8 <__aeabi_dmul>
 800d818:	4602      	mov	r2, r0
 800d81a:	460b      	mov	r3, r1
 800d81c:	4630      	mov	r0, r6
 800d81e:	4639      	mov	r1, r7
 800d820:	f7f2 fca4 	bl	800016c <__adddf3>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	4620      	mov	r0, r4
 800d82a:	4629      	mov	r1, r5
 800d82c:	f7f2 fc9c 	bl	8000168 <__aeabi_dsub>
 800d830:	e7c6      	b.n	800d7c0 <__kernel_sin+0xc0>
 800d832:	bf00      	nop
 800d834:	f3af 8000 	nop.w
 800d838:	5acfd57c 	.word	0x5acfd57c
 800d83c:	3de5d93a 	.word	0x3de5d93a
 800d840:	8a2b9ceb 	.word	0x8a2b9ceb
 800d844:	3e5ae5e6 	.word	0x3e5ae5e6
 800d848:	57b1fe7d 	.word	0x57b1fe7d
 800d84c:	3ec71de3 	.word	0x3ec71de3
 800d850:	19c161d5 	.word	0x19c161d5
 800d854:	3f2a01a0 	.word	0x3f2a01a0
 800d858:	1110f8a6 	.word	0x1110f8a6
 800d85c:	3f811111 	.word	0x3f811111
 800d860:	55555549 	.word	0x55555549
 800d864:	3fc55555 	.word	0x3fc55555
 800d868:	3fe00000 	.word	0x3fe00000
 800d86c:	00000000 	.word	0x00000000

0800d870 <__ieee754_rem_pio2>:
 800d870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d874:	4bc4      	ldr	r3, [pc, #784]	@ (800db88 <__ieee754_rem_pio2+0x318>)
 800d876:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800d87a:	b08d      	sub	sp, #52	@ 0x34
 800d87c:	4598      	cmp	r8, r3
 800d87e:	4606      	mov	r6, r0
 800d880:	460f      	mov	r7, r1
 800d882:	4614      	mov	r4, r2
 800d884:	9104      	str	r1, [sp, #16]
 800d886:	d807      	bhi.n	800d898 <__ieee754_rem_pio2+0x28>
 800d888:	e9c2 6700 	strd	r6, r7, [r2]
 800d88c:	2300      	movs	r3, #0
 800d88e:	2200      	movs	r2, #0
 800d890:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d894:	2500      	movs	r5, #0
 800d896:	e026      	b.n	800d8e6 <__ieee754_rem_pio2+0x76>
 800d898:	4bbc      	ldr	r3, [pc, #752]	@ (800db8c <__ieee754_rem_pio2+0x31c>)
 800d89a:	4598      	cmp	r8, r3
 800d89c:	d876      	bhi.n	800d98c <__ieee754_rem_pio2+0x11c>
 800d89e:	9b04      	ldr	r3, [sp, #16]
 800d8a0:	4dbb      	ldr	r5, [pc, #748]	@ (800db90 <__ieee754_rem_pio2+0x320>)
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	a3aa      	add	r3, pc, #680	@ (adr r3, 800db50 <__ieee754_rem_pio2+0x2e0>)
 800d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8aa:	dd38      	ble.n	800d91e <__ieee754_rem_pio2+0xae>
 800d8ac:	f7f2 fc5c 	bl	8000168 <__aeabi_dsub>
 800d8b0:	45a8      	cmp	r8, r5
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	460f      	mov	r7, r1
 800d8b6:	d01a      	beq.n	800d8ee <__ieee754_rem_pio2+0x7e>
 800d8b8:	a3a7      	add	r3, pc, #668	@ (adr r3, 800db58 <__ieee754_rem_pio2+0x2e8>)
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	f7f2 fc53 	bl	8000168 <__aeabi_dsub>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	4689      	mov	r9, r1
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	f7f2 fc4b 	bl	8000168 <__aeabi_dsub>
 800d8d2:	a3a1      	add	r3, pc, #644	@ (adr r3, 800db58 <__ieee754_rem_pio2+0x2e8>)
 800d8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d8:	f7f2 fc46 	bl	8000168 <__aeabi_dsub>
 800d8dc:	2501      	movs	r5, #1
 800d8de:	e9c4 8900 	strd	r8, r9, [r4]
 800d8e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	b00d      	add	sp, #52	@ 0x34
 800d8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ee:	a39c      	add	r3, pc, #624	@ (adr r3, 800db60 <__ieee754_rem_pio2+0x2f0>)
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	f7f2 fc38 	bl	8000168 <__aeabi_dsub>
 800d8f8:	a39b      	add	r3, pc, #620	@ (adr r3, 800db68 <__ieee754_rem_pio2+0x2f8>)
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	4606      	mov	r6, r0
 800d900:	460f      	mov	r7, r1
 800d902:	f7f2 fc31 	bl	8000168 <__aeabi_dsub>
 800d906:	4602      	mov	r2, r0
 800d908:	460b      	mov	r3, r1
 800d90a:	4680      	mov	r8, r0
 800d90c:	4689      	mov	r9, r1
 800d90e:	4630      	mov	r0, r6
 800d910:	4639      	mov	r1, r7
 800d912:	f7f2 fc29 	bl	8000168 <__aeabi_dsub>
 800d916:	a394      	add	r3, pc, #592	@ (adr r3, 800db68 <__ieee754_rem_pio2+0x2f8>)
 800d918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91c:	e7dc      	b.n	800d8d8 <__ieee754_rem_pio2+0x68>
 800d91e:	f7f2 fc25 	bl	800016c <__adddf3>
 800d922:	45a8      	cmp	r8, r5
 800d924:	4606      	mov	r6, r0
 800d926:	460f      	mov	r7, r1
 800d928:	d018      	beq.n	800d95c <__ieee754_rem_pio2+0xec>
 800d92a:	a38b      	add	r3, pc, #556	@ (adr r3, 800db58 <__ieee754_rem_pio2+0x2e8>)
 800d92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d930:	f7f2 fc1c 	bl	800016c <__adddf3>
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	4680      	mov	r8, r0
 800d93a:	4689      	mov	r9, r1
 800d93c:	4630      	mov	r0, r6
 800d93e:	4639      	mov	r1, r7
 800d940:	f7f2 fc12 	bl	8000168 <__aeabi_dsub>
 800d944:	a384      	add	r3, pc, #528	@ (adr r3, 800db58 <__ieee754_rem_pio2+0x2e8>)
 800d946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94a:	f7f2 fc0f 	bl	800016c <__adddf3>
 800d94e:	f04f 35ff 	mov.w	r5, #4294967295
 800d952:	e9c4 8900 	strd	r8, r9, [r4]
 800d956:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d95a:	e7c4      	b.n	800d8e6 <__ieee754_rem_pio2+0x76>
 800d95c:	a380      	add	r3, pc, #512	@ (adr r3, 800db60 <__ieee754_rem_pio2+0x2f0>)
 800d95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d962:	f7f2 fc03 	bl	800016c <__adddf3>
 800d966:	a380      	add	r3, pc, #512	@ (adr r3, 800db68 <__ieee754_rem_pio2+0x2f8>)
 800d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96c:	4606      	mov	r6, r0
 800d96e:	460f      	mov	r7, r1
 800d970:	f7f2 fbfc 	bl	800016c <__adddf3>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4680      	mov	r8, r0
 800d97a:	4689      	mov	r9, r1
 800d97c:	4630      	mov	r0, r6
 800d97e:	4639      	mov	r1, r7
 800d980:	f7f2 fbf2 	bl	8000168 <__aeabi_dsub>
 800d984:	a378      	add	r3, pc, #480	@ (adr r3, 800db68 <__ieee754_rem_pio2+0x2f8>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	e7de      	b.n	800d94a <__ieee754_rem_pio2+0xda>
 800d98c:	4b81      	ldr	r3, [pc, #516]	@ (800db94 <__ieee754_rem_pio2+0x324>)
 800d98e:	4598      	cmp	r8, r3
 800d990:	f200 80cf 	bhi.w	800db32 <__ieee754_rem_pio2+0x2c2>
 800d994:	f000 f962 	bl	800dc5c <fabs>
 800d998:	a375      	add	r3, pc, #468	@ (adr r3, 800db70 <__ieee754_rem_pio2+0x300>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	4606      	mov	r6, r0
 800d9a0:	460f      	mov	r7, r1
 800d9a2:	f7f2 fd99 	bl	80004d8 <__aeabi_dmul>
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	4b7b      	ldr	r3, [pc, #492]	@ (800db98 <__ieee754_rem_pio2+0x328>)
 800d9aa:	f7f2 fbdf 	bl	800016c <__adddf3>
 800d9ae:	f7f3 f843 	bl	8000a38 <__aeabi_d2iz>
 800d9b2:	4605      	mov	r5, r0
 800d9b4:	f7f2 fd26 	bl	8000404 <__aeabi_i2d>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9c0:	a363      	add	r3, pc, #396	@ (adr r3, 800db50 <__ieee754_rem_pio2+0x2e0>)
 800d9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c6:	f7f2 fd87 	bl	80004d8 <__aeabi_dmul>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	4639      	mov	r1, r7
 800d9d2:	f7f2 fbc9 	bl	8000168 <__aeabi_dsub>
 800d9d6:	a360      	add	r3, pc, #384	@ (adr r3, 800db58 <__ieee754_rem_pio2+0x2e8>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	4682      	mov	sl, r0
 800d9de:	468b      	mov	fp, r1
 800d9e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9e4:	f7f2 fd78 	bl	80004d8 <__aeabi_dmul>
 800d9e8:	2d1f      	cmp	r5, #31
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	460f      	mov	r7, r1
 800d9ee:	dc0c      	bgt.n	800da0a <__ieee754_rem_pio2+0x19a>
 800d9f0:	4b6a      	ldr	r3, [pc, #424]	@ (800db9c <__ieee754_rem_pio2+0x32c>)
 800d9f2:	1e6a      	subs	r2, r5, #1
 800d9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f8:	4543      	cmp	r3, r8
 800d9fa:	d006      	beq.n	800da0a <__ieee754_rem_pio2+0x19a>
 800d9fc:	4632      	mov	r2, r6
 800d9fe:	463b      	mov	r3, r7
 800da00:	4650      	mov	r0, sl
 800da02:	4659      	mov	r1, fp
 800da04:	f7f2 fbb0 	bl	8000168 <__aeabi_dsub>
 800da08:	e00e      	b.n	800da28 <__ieee754_rem_pio2+0x1b8>
 800da0a:	463b      	mov	r3, r7
 800da0c:	4632      	mov	r2, r6
 800da0e:	4650      	mov	r0, sl
 800da10:	4659      	mov	r1, fp
 800da12:	f7f2 fba9 	bl	8000168 <__aeabi_dsub>
 800da16:	ea4f 5328 	mov.w	r3, r8, asr #20
 800da1a:	9305      	str	r3, [sp, #20]
 800da1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800da20:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800da24:	2b10      	cmp	r3, #16
 800da26:	dc02      	bgt.n	800da2e <__ieee754_rem_pio2+0x1be>
 800da28:	e9c4 0100 	strd	r0, r1, [r4]
 800da2c:	e039      	b.n	800daa2 <__ieee754_rem_pio2+0x232>
 800da2e:	a34c      	add	r3, pc, #304	@ (adr r3, 800db60 <__ieee754_rem_pio2+0x2f0>)
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da38:	f7f2 fd4e 	bl	80004d8 <__aeabi_dmul>
 800da3c:	4606      	mov	r6, r0
 800da3e:	460f      	mov	r7, r1
 800da40:	4602      	mov	r2, r0
 800da42:	460b      	mov	r3, r1
 800da44:	4650      	mov	r0, sl
 800da46:	4659      	mov	r1, fp
 800da48:	f7f2 fb8e 	bl	8000168 <__aeabi_dsub>
 800da4c:	4602      	mov	r2, r0
 800da4e:	460b      	mov	r3, r1
 800da50:	4680      	mov	r8, r0
 800da52:	4689      	mov	r9, r1
 800da54:	4650      	mov	r0, sl
 800da56:	4659      	mov	r1, fp
 800da58:	f7f2 fb86 	bl	8000168 <__aeabi_dsub>
 800da5c:	4632      	mov	r2, r6
 800da5e:	463b      	mov	r3, r7
 800da60:	f7f2 fb82 	bl	8000168 <__aeabi_dsub>
 800da64:	a340      	add	r3, pc, #256	@ (adr r3, 800db68 <__ieee754_rem_pio2+0x2f8>)
 800da66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6a:	4606      	mov	r6, r0
 800da6c:	460f      	mov	r7, r1
 800da6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da72:	f7f2 fd31 	bl	80004d8 <__aeabi_dmul>
 800da76:	4632      	mov	r2, r6
 800da78:	463b      	mov	r3, r7
 800da7a:	f7f2 fb75 	bl	8000168 <__aeabi_dsub>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4606      	mov	r6, r0
 800da84:	460f      	mov	r7, r1
 800da86:	4640      	mov	r0, r8
 800da88:	4649      	mov	r1, r9
 800da8a:	f7f2 fb6d 	bl	8000168 <__aeabi_dsub>
 800da8e:	9a05      	ldr	r2, [sp, #20]
 800da90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	2b31      	cmp	r3, #49	@ 0x31
 800da98:	dc20      	bgt.n	800dadc <__ieee754_rem_pio2+0x26c>
 800da9a:	46c2      	mov	sl, r8
 800da9c:	46cb      	mov	fp, r9
 800da9e:	e9c4 0100 	strd	r0, r1, [r4]
 800daa2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800daa6:	4650      	mov	r0, sl
 800daa8:	4642      	mov	r2, r8
 800daaa:	464b      	mov	r3, r9
 800daac:	4659      	mov	r1, fp
 800daae:	f7f2 fb5b 	bl	8000168 <__aeabi_dsub>
 800dab2:	463b      	mov	r3, r7
 800dab4:	4632      	mov	r2, r6
 800dab6:	f7f2 fb57 	bl	8000168 <__aeabi_dsub>
 800daba:	9b04      	ldr	r3, [sp, #16]
 800dabc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f6bf af10 	bge.w	800d8e6 <__ieee754_rem_pio2+0x76>
 800dac6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800daca:	6063      	str	r3, [r4, #4]
 800dacc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dad0:	f8c4 8000 	str.w	r8, [r4]
 800dad4:	60a0      	str	r0, [r4, #8]
 800dad6:	60e3      	str	r3, [r4, #12]
 800dad8:	426d      	negs	r5, r5
 800dada:	e704      	b.n	800d8e6 <__ieee754_rem_pio2+0x76>
 800dadc:	a326      	add	r3, pc, #152	@ (adr r3, 800db78 <__ieee754_rem_pio2+0x308>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dae6:	f7f2 fcf7 	bl	80004d8 <__aeabi_dmul>
 800daea:	4606      	mov	r6, r0
 800daec:	460f      	mov	r7, r1
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	4640      	mov	r0, r8
 800daf4:	4649      	mov	r1, r9
 800daf6:	f7f2 fb37 	bl	8000168 <__aeabi_dsub>
 800dafa:	4602      	mov	r2, r0
 800dafc:	460b      	mov	r3, r1
 800dafe:	4682      	mov	sl, r0
 800db00:	468b      	mov	fp, r1
 800db02:	4640      	mov	r0, r8
 800db04:	4649      	mov	r1, r9
 800db06:	f7f2 fb2f 	bl	8000168 <__aeabi_dsub>
 800db0a:	4632      	mov	r2, r6
 800db0c:	463b      	mov	r3, r7
 800db0e:	f7f2 fb2b 	bl	8000168 <__aeabi_dsub>
 800db12:	a31b      	add	r3, pc, #108	@ (adr r3, 800db80 <__ieee754_rem_pio2+0x310>)
 800db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db18:	4606      	mov	r6, r0
 800db1a:	460f      	mov	r7, r1
 800db1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db20:	f7f2 fcda 	bl	80004d8 <__aeabi_dmul>
 800db24:	4632      	mov	r2, r6
 800db26:	463b      	mov	r3, r7
 800db28:	f7f2 fb1e 	bl	8000168 <__aeabi_dsub>
 800db2c:	4606      	mov	r6, r0
 800db2e:	460f      	mov	r7, r1
 800db30:	e764      	b.n	800d9fc <__ieee754_rem_pio2+0x18c>
 800db32:	4b1b      	ldr	r3, [pc, #108]	@ (800dba0 <__ieee754_rem_pio2+0x330>)
 800db34:	4598      	cmp	r8, r3
 800db36:	d935      	bls.n	800dba4 <__ieee754_rem_pio2+0x334>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	f7f2 fb14 	bl	8000168 <__aeabi_dsub>
 800db40:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db44:	e9c4 0100 	strd	r0, r1, [r4]
 800db48:	e6a4      	b.n	800d894 <__ieee754_rem_pio2+0x24>
 800db4a:	bf00      	nop
 800db4c:	f3af 8000 	nop.w
 800db50:	54400000 	.word	0x54400000
 800db54:	3ff921fb 	.word	0x3ff921fb
 800db58:	1a626331 	.word	0x1a626331
 800db5c:	3dd0b461 	.word	0x3dd0b461
 800db60:	1a600000 	.word	0x1a600000
 800db64:	3dd0b461 	.word	0x3dd0b461
 800db68:	2e037073 	.word	0x2e037073
 800db6c:	3ba3198a 	.word	0x3ba3198a
 800db70:	6dc9c883 	.word	0x6dc9c883
 800db74:	3fe45f30 	.word	0x3fe45f30
 800db78:	2e000000 	.word	0x2e000000
 800db7c:	3ba3198a 	.word	0x3ba3198a
 800db80:	252049c1 	.word	0x252049c1
 800db84:	397b839a 	.word	0x397b839a
 800db88:	3fe921fb 	.word	0x3fe921fb
 800db8c:	4002d97b 	.word	0x4002d97b
 800db90:	3ff921fb 	.word	0x3ff921fb
 800db94:	413921fb 	.word	0x413921fb
 800db98:	3fe00000 	.word	0x3fe00000
 800db9c:	0800ee28 	.word	0x0800ee28
 800dba0:	7fefffff 	.word	0x7fefffff
 800dba4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800dba8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800dbac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800dbb0:	460f      	mov	r7, r1
 800dbb2:	f7f2 ff41 	bl	8000a38 <__aeabi_d2iz>
 800dbb6:	f7f2 fc25 	bl	8000404 <__aeabi_i2d>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	4639      	mov	r1, r7
 800dbc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dbc6:	f7f2 facf 	bl	8000168 <__aeabi_dsub>
 800dbca:	2200      	movs	r2, #0
 800dbcc:	4b21      	ldr	r3, [pc, #132]	@ (800dc54 <__ieee754_rem_pio2+0x3e4>)
 800dbce:	f7f2 fc83 	bl	80004d8 <__aeabi_dmul>
 800dbd2:	460f      	mov	r7, r1
 800dbd4:	4606      	mov	r6, r0
 800dbd6:	f7f2 ff2f 	bl	8000a38 <__aeabi_d2iz>
 800dbda:	f7f2 fc13 	bl	8000404 <__aeabi_i2d>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dbea:	f7f2 fabd 	bl	8000168 <__aeabi_dsub>
 800dbee:	2200      	movs	r2, #0
 800dbf0:	4b18      	ldr	r3, [pc, #96]	@ (800dc54 <__ieee754_rem_pio2+0x3e4>)
 800dbf2:	f7f2 fc71 	bl	80004d8 <__aeabi_dmul>
 800dbf6:	f04f 0803 	mov.w	r8, #3
 800dbfa:	2600      	movs	r6, #0
 800dbfc:	2700      	movs	r7, #0
 800dbfe:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800dc02:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800dc06:	4632      	mov	r2, r6
 800dc08:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800dc0c:	463b      	mov	r3, r7
 800dc0e:	46c2      	mov	sl, r8
 800dc10:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc14:	f7f2 fec8 	bl	80009a8 <__aeabi_dcmpeq>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	d1f4      	bne.n	800dc06 <__ieee754_rem_pio2+0x396>
 800dc1c:	4b0e      	ldr	r3, [pc, #56]	@ (800dc58 <__ieee754_rem_pio2+0x3e8>)
 800dc1e:	462a      	mov	r2, r5
 800dc20:	9301      	str	r3, [sp, #4]
 800dc22:	2302      	movs	r3, #2
 800dc24:	4621      	mov	r1, r4
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	a806      	add	r0, sp, #24
 800dc2a:	4653      	mov	r3, sl
 800dc2c:	f000 f81a 	bl	800dc64 <__kernel_rem_pio2>
 800dc30:	9b04      	ldr	r3, [sp, #16]
 800dc32:	4605      	mov	r5, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f6bf ae56 	bge.w	800d8e6 <__ieee754_rem_pio2+0x76>
 800dc3a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800dc3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc42:	e9c4 2300 	strd	r2, r3, [r4]
 800dc46:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800dc4a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc4e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800dc52:	e741      	b.n	800dad8 <__ieee754_rem_pio2+0x268>
 800dc54:	41700000 	.word	0x41700000
 800dc58:	0800eea8 	.word	0x0800eea8

0800dc5c <fabs>:
 800dc5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dc60:	4619      	mov	r1, r3
 800dc62:	4770      	bx	lr

0800dc64 <__kernel_rem_pio2>:
 800dc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc68:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800dc6c:	9308      	str	r3, [sp, #32]
 800dc6e:	9104      	str	r1, [sp, #16]
 800dc70:	4bb6      	ldr	r3, [pc, #728]	@ (800df4c <__kernel_rem_pio2+0x2e8>)
 800dc72:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800dc74:	f112 0f14 	cmn.w	r2, #20
 800dc78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc7c:	bfa8      	it	ge
 800dc7e:	1ed4      	subge	r4, r2, #3
 800dc80:	9302      	str	r3, [sp, #8]
 800dc82:	9b08      	ldr	r3, [sp, #32]
 800dc84:	bfb8      	it	lt
 800dc86:	2400      	movlt	r4, #0
 800dc88:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc8c:	9306      	str	r3, [sp, #24]
 800dc8e:	bfa4      	itt	ge
 800dc90:	2318      	movge	r3, #24
 800dc92:	fb94 f4f3 	sdivge	r4, r4, r3
 800dc96:	f06f 0317 	mvn.w	r3, #23
 800dc9a:	fb04 3303 	mla	r3, r4, r3, r3
 800dc9e:	eb03 0a02 	add.w	sl, r3, r2
 800dca2:	9a06      	ldr	r2, [sp, #24]
 800dca4:	9b02      	ldr	r3, [sp, #8]
 800dca6:	1aa7      	subs	r7, r4, r2
 800dca8:	eb03 0802 	add.w	r8, r3, r2
 800dcac:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800dcae:	2500      	movs	r5, #0
 800dcb0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	9009      	str	r0, [sp, #36]	@ 0x24
 800dcba:	ae20      	add	r6, sp, #128	@ 0x80
 800dcbc:	4545      	cmp	r5, r8
 800dcbe:	dd14      	ble.n	800dcea <__kernel_rem_pio2+0x86>
 800dcc0:	f04f 0800 	mov.w	r8, #0
 800dcc4:	9a08      	ldr	r2, [sp, #32]
 800dcc6:	ab20      	add	r3, sp, #128	@ 0x80
 800dcc8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800dccc:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800dcd0:	9b02      	ldr	r3, [sp, #8]
 800dcd2:	4598      	cmp	r8, r3
 800dcd4:	dc35      	bgt.n	800dd42 <__kernel_rem_pio2+0xde>
 800dcd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f1a3 0908 	sub.w	r9, r3, #8
 800dcde:	2300      	movs	r3, #0
 800dce0:	462f      	mov	r7, r5
 800dce2:	2600      	movs	r6, #0
 800dce4:	e9cd 2300 	strd	r2, r3, [sp]
 800dce8:	e01f      	b.n	800dd2a <__kernel_rem_pio2+0xc6>
 800dcea:	42ef      	cmn	r7, r5
 800dcec:	d40b      	bmi.n	800dd06 <__kernel_rem_pio2+0xa2>
 800dcee:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dcf2:	e9cd 2300 	strd	r2, r3, [sp]
 800dcf6:	f7f2 fb85 	bl	8000404 <__aeabi_i2d>
 800dcfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcfe:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dd02:	3501      	adds	r5, #1
 800dd04:	e7da      	b.n	800dcbc <__kernel_rem_pio2+0x58>
 800dd06:	4610      	mov	r0, r2
 800dd08:	4619      	mov	r1, r3
 800dd0a:	e7f8      	b.n	800dcfe <__kernel_rem_pio2+0x9a>
 800dd0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd10:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800dd14:	f7f2 fbe0 	bl	80004d8 <__aeabi_dmul>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd20:	f7f2 fa24 	bl	800016c <__adddf3>
 800dd24:	e9cd 0100 	strd	r0, r1, [sp]
 800dd28:	3601      	adds	r6, #1
 800dd2a:	9b06      	ldr	r3, [sp, #24]
 800dd2c:	3f08      	subs	r7, #8
 800dd2e:	429e      	cmp	r6, r3
 800dd30:	ddec      	ble.n	800dd0c <__kernel_rem_pio2+0xa8>
 800dd32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd36:	f108 0801 	add.w	r8, r8, #1
 800dd3a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800dd3e:	3508      	adds	r5, #8
 800dd40:	e7c6      	b.n	800dcd0 <__kernel_rem_pio2+0x6c>
 800dd42:	9b02      	ldr	r3, [sp, #8]
 800dd44:	aa0c      	add	r2, sp, #48	@ 0x30
 800dd46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd4c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800dd4e:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dd52:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dd56:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd58:	ab98      	add	r3, sp, #608	@ 0x260
 800dd5a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd5e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800dd62:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dd64:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd68:	ae0c      	add	r6, sp, #48	@ 0x30
 800dd6a:	4698      	mov	r8, r3
 800dd6c:	46b1      	mov	r9, r6
 800dd6e:	465f      	mov	r7, fp
 800dd70:	9307      	str	r3, [sp, #28]
 800dd72:	2f00      	cmp	r7, #0
 800dd74:	f1a8 0808 	sub.w	r8, r8, #8
 800dd78:	dc71      	bgt.n	800de5e <__kernel_rem_pio2+0x1fa>
 800dd7a:	4652      	mov	r2, sl
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	4629      	mov	r1, r5
 800dd80:	f000 fa96 	bl	800e2b0 <scalbn>
 800dd84:	2200      	movs	r2, #0
 800dd86:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	460d      	mov	r5, r1
 800dd8e:	f7f2 fba3 	bl	80004d8 <__aeabi_dmul>
 800dd92:	f000 fb05 	bl	800e3a0 <floor>
 800dd96:	2200      	movs	r2, #0
 800dd98:	4b6d      	ldr	r3, [pc, #436]	@ (800df50 <__kernel_rem_pio2+0x2ec>)
 800dd9a:	f7f2 fb9d 	bl	80004d8 <__aeabi_dmul>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	460b      	mov	r3, r1
 800dda2:	4620      	mov	r0, r4
 800dda4:	4629      	mov	r1, r5
 800dda6:	f7f2 f9df 	bl	8000168 <__aeabi_dsub>
 800ddaa:	460d      	mov	r5, r1
 800ddac:	4604      	mov	r4, r0
 800ddae:	f7f2 fe43 	bl	8000a38 <__aeabi_d2iz>
 800ddb2:	9005      	str	r0, [sp, #20]
 800ddb4:	f7f2 fb26 	bl	8000404 <__aeabi_i2d>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	460b      	mov	r3, r1
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	4629      	mov	r1, r5
 800ddc0:	f7f2 f9d2 	bl	8000168 <__aeabi_dsub>
 800ddc4:	f1ba 0f00 	cmp.w	sl, #0
 800ddc8:	4680      	mov	r8, r0
 800ddca:	4689      	mov	r9, r1
 800ddcc:	dd6d      	ble.n	800deaa <__kernel_rem_pio2+0x246>
 800ddce:	f10b 31ff 	add.w	r1, fp, #4294967295
 800ddd2:	ab0c      	add	r3, sp, #48	@ 0x30
 800ddd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ddd8:	9c05      	ldr	r4, [sp, #20]
 800ddda:	f1ca 0018 	rsb	r0, sl, #24
 800ddde:	fa43 f200 	asr.w	r2, r3, r0
 800dde2:	4414      	add	r4, r2
 800dde4:	4082      	lsls	r2, r0
 800dde6:	1a9b      	subs	r3, r3, r2
 800dde8:	aa0c      	add	r2, sp, #48	@ 0x30
 800ddea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ddee:	f1ca 0217 	rsb	r2, sl, #23
 800ddf2:	9405      	str	r4, [sp, #20]
 800ddf4:	4113      	asrs	r3, r2
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	9b00      	ldr	r3, [sp, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	dd64      	ble.n	800dec8 <__kernel_rem_pio2+0x264>
 800ddfe:	2200      	movs	r2, #0
 800de00:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800de04:	4614      	mov	r4, r2
 800de06:	9b05      	ldr	r3, [sp, #20]
 800de08:	3301      	adds	r3, #1
 800de0a:	9305      	str	r3, [sp, #20]
 800de0c:	4593      	cmp	fp, r2
 800de0e:	f300 80ab 	bgt.w	800df68 <__kernel_rem_pio2+0x304>
 800de12:	f1ba 0f00 	cmp.w	sl, #0
 800de16:	dd07      	ble.n	800de28 <__kernel_rem_pio2+0x1c4>
 800de18:	f1ba 0f01 	cmp.w	sl, #1
 800de1c:	f000 80b2 	beq.w	800df84 <__kernel_rem_pio2+0x320>
 800de20:	f1ba 0f02 	cmp.w	sl, #2
 800de24:	f000 80b9 	beq.w	800df9a <__kernel_rem_pio2+0x336>
 800de28:	9b00      	ldr	r3, [sp, #0]
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	d14c      	bne.n	800dec8 <__kernel_rem_pio2+0x264>
 800de2e:	4642      	mov	r2, r8
 800de30:	464b      	mov	r3, r9
 800de32:	2000      	movs	r0, #0
 800de34:	4947      	ldr	r1, [pc, #284]	@ (800df54 <__kernel_rem_pio2+0x2f0>)
 800de36:	f7f2 f997 	bl	8000168 <__aeabi_dsub>
 800de3a:	4680      	mov	r8, r0
 800de3c:	4689      	mov	r9, r1
 800de3e:	2c00      	cmp	r4, #0
 800de40:	d042      	beq.n	800dec8 <__kernel_rem_pio2+0x264>
 800de42:	4652      	mov	r2, sl
 800de44:	2000      	movs	r0, #0
 800de46:	4943      	ldr	r1, [pc, #268]	@ (800df54 <__kernel_rem_pio2+0x2f0>)
 800de48:	f000 fa32 	bl	800e2b0 <scalbn>
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	4640      	mov	r0, r8
 800de52:	4649      	mov	r1, r9
 800de54:	f7f2 f988 	bl	8000168 <__aeabi_dsub>
 800de58:	4680      	mov	r8, r0
 800de5a:	4689      	mov	r9, r1
 800de5c:	e034      	b.n	800dec8 <__kernel_rem_pio2+0x264>
 800de5e:	2200      	movs	r2, #0
 800de60:	4b3d      	ldr	r3, [pc, #244]	@ (800df58 <__kernel_rem_pio2+0x2f4>)
 800de62:	4620      	mov	r0, r4
 800de64:	4629      	mov	r1, r5
 800de66:	f7f2 fb37 	bl	80004d8 <__aeabi_dmul>
 800de6a:	f7f2 fde5 	bl	8000a38 <__aeabi_d2iz>
 800de6e:	f7f2 fac9 	bl	8000404 <__aeabi_i2d>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	e9cd 2300 	strd	r2, r3, [sp]
 800de7a:	2200      	movs	r2, #0
 800de7c:	4b37      	ldr	r3, [pc, #220]	@ (800df5c <__kernel_rem_pio2+0x2f8>)
 800de7e:	f7f2 fb2b 	bl	80004d8 <__aeabi_dmul>
 800de82:	4602      	mov	r2, r0
 800de84:	460b      	mov	r3, r1
 800de86:	4620      	mov	r0, r4
 800de88:	4629      	mov	r1, r5
 800de8a:	f7f2 f96d 	bl	8000168 <__aeabi_dsub>
 800de8e:	f7f2 fdd3 	bl	8000a38 <__aeabi_d2iz>
 800de92:	e9d8 2300 	ldrd	r2, r3, [r8]
 800de96:	f849 0b04 	str.w	r0, [r9], #4
 800de9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de9e:	f7f2 f965 	bl	800016c <__adddf3>
 800dea2:	3f01      	subs	r7, #1
 800dea4:	4604      	mov	r4, r0
 800dea6:	460d      	mov	r5, r1
 800dea8:	e763      	b.n	800dd72 <__kernel_rem_pio2+0x10e>
 800deaa:	d106      	bne.n	800deba <__kernel_rem_pio2+0x256>
 800deac:	f10b 33ff 	add.w	r3, fp, #4294967295
 800deb0:	aa0c      	add	r2, sp, #48	@ 0x30
 800deb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deb6:	15db      	asrs	r3, r3, #23
 800deb8:	e79d      	b.n	800ddf6 <__kernel_rem_pio2+0x192>
 800deba:	2200      	movs	r2, #0
 800debc:	4b28      	ldr	r3, [pc, #160]	@ (800df60 <__kernel_rem_pio2+0x2fc>)
 800debe:	f7f2 fd91 	bl	80009e4 <__aeabi_dcmpge>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d13f      	bne.n	800df46 <__kernel_rem_pio2+0x2e2>
 800dec6:	9000      	str	r0, [sp, #0]
 800dec8:	2200      	movs	r2, #0
 800deca:	2300      	movs	r3, #0
 800decc:	4640      	mov	r0, r8
 800dece:	4649      	mov	r1, r9
 800ded0:	f7f2 fd6a 	bl	80009a8 <__aeabi_dcmpeq>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	f000 80af 	beq.w	800e038 <__kernel_rem_pio2+0x3d4>
 800deda:	2200      	movs	r2, #0
 800dedc:	f10b 33ff 	add.w	r3, fp, #4294967295
 800dee0:	9902      	ldr	r1, [sp, #8]
 800dee2:	428b      	cmp	r3, r1
 800dee4:	da61      	bge.n	800dfaa <__kernel_rem_pio2+0x346>
 800dee6:	2a00      	cmp	r2, #0
 800dee8:	d076      	beq.n	800dfd8 <__kernel_rem_pio2+0x374>
 800deea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800deee:	ab0c      	add	r3, sp, #48	@ 0x30
 800def0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800def4:	f1aa 0a18 	sub.w	sl, sl, #24
 800def8:	2b00      	cmp	r3, #0
 800defa:	d0f6      	beq.n	800deea <__kernel_rem_pio2+0x286>
 800defc:	4652      	mov	r2, sl
 800defe:	2000      	movs	r0, #0
 800df00:	4914      	ldr	r1, [pc, #80]	@ (800df54 <__kernel_rem_pio2+0x2f0>)
 800df02:	f000 f9d5 	bl	800e2b0 <scalbn>
 800df06:	465d      	mov	r5, fp
 800df08:	4606      	mov	r6, r0
 800df0a:	460f      	mov	r7, r1
 800df0c:	f04f 0900 	mov.w	r9, #0
 800df10:	ab70      	add	r3, sp, #448	@ 0x1c0
 800df12:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800df58 <__kernel_rem_pio2+0x2f4>
 800df16:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800df1a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800df1e:	2d00      	cmp	r5, #0
 800df20:	f280 80c0 	bge.w	800e0a4 <__kernel_rem_pio2+0x440>
 800df24:	465d      	mov	r5, fp
 800df26:	2d00      	cmp	r5, #0
 800df28:	f2c0 80f0 	blt.w	800e10c <__kernel_rem_pio2+0x4a8>
 800df2c:	4b0d      	ldr	r3, [pc, #52]	@ (800df64 <__kernel_rem_pio2+0x300>)
 800df2e:	f04f 0900 	mov.w	r9, #0
 800df32:	9306      	str	r3, [sp, #24]
 800df34:	ab70      	add	r3, sp, #448	@ 0x1c0
 800df36:	f04f 0a00 	mov.w	sl, #0
 800df3a:	2700      	movs	r7, #0
 800df3c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800df40:	ebab 0605 	sub.w	r6, fp, r5
 800df44:	e0d6      	b.n	800e0f4 <__kernel_rem_pio2+0x490>
 800df46:	2302      	movs	r3, #2
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	e758      	b.n	800ddfe <__kernel_rem_pio2+0x19a>
 800df4c:	0800eff0 	.word	0x0800eff0
 800df50:	40200000 	.word	0x40200000
 800df54:	3ff00000 	.word	0x3ff00000
 800df58:	3e700000 	.word	0x3e700000
 800df5c:	41700000 	.word	0x41700000
 800df60:	3fe00000 	.word	0x3fe00000
 800df64:	0800efb0 	.word	0x0800efb0
 800df68:	f856 3b04 	ldr.w	r3, [r6], #4
 800df6c:	b944      	cbnz	r4, 800df80 <__kernel_rem_pio2+0x31c>
 800df6e:	b123      	cbz	r3, 800df7a <__kernel_rem_pio2+0x316>
 800df70:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800df74:	f846 3c04 	str.w	r3, [r6, #-4]
 800df78:	2301      	movs	r3, #1
 800df7a:	461c      	mov	r4, r3
 800df7c:	3201      	adds	r2, #1
 800df7e:	e745      	b.n	800de0c <__kernel_rem_pio2+0x1a8>
 800df80:	1acb      	subs	r3, r1, r3
 800df82:	e7f7      	b.n	800df74 <__kernel_rem_pio2+0x310>
 800df84:	f10b 32ff 	add.w	r2, fp, #4294967295
 800df88:	ab0c      	add	r3, sp, #48	@ 0x30
 800df8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800df92:	a90c      	add	r1, sp, #48	@ 0x30
 800df94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800df98:	e746      	b.n	800de28 <__kernel_rem_pio2+0x1c4>
 800df9a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800df9e:	ab0c      	add	r3, sp, #48	@ 0x30
 800dfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfa4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dfa8:	e7f3      	b.n	800df92 <__kernel_rem_pio2+0x32e>
 800dfaa:	a90c      	add	r1, sp, #48	@ 0x30
 800dfac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dfb0:	3b01      	subs	r3, #1
 800dfb2:	430a      	orrs	r2, r1
 800dfb4:	e794      	b.n	800dee0 <__kernel_rem_pio2+0x27c>
 800dfb6:	3401      	adds	r4, #1
 800dfb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dfbc:	2a00      	cmp	r2, #0
 800dfbe:	d0fa      	beq.n	800dfb6 <__kernel_rem_pio2+0x352>
 800dfc0:	9b08      	ldr	r3, [sp, #32]
 800dfc2:	aa20      	add	r2, sp, #128	@ 0x80
 800dfc4:	445b      	add	r3, fp
 800dfc6:	f10b 0801 	add.w	r8, fp, #1
 800dfca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dfce:	445c      	add	r4, fp
 800dfd0:	4544      	cmp	r4, r8
 800dfd2:	da04      	bge.n	800dfde <__kernel_rem_pio2+0x37a>
 800dfd4:	46a3      	mov	fp, r4
 800dfd6:	e6bf      	b.n	800dd58 <__kernel_rem_pio2+0xf4>
 800dfd8:	2401      	movs	r4, #1
 800dfda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfdc:	e7ec      	b.n	800dfb8 <__kernel_rem_pio2+0x354>
 800dfde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfe0:	46ab      	mov	fp, r5
 800dfe2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dfe6:	f7f2 fa0d 	bl	8000404 <__aeabi_i2d>
 800dfea:	f04f 0900 	mov.w	r9, #0
 800dfee:	2600      	movs	r6, #0
 800dff0:	2700      	movs	r7, #0
 800dff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dff4:	e9c5 0100 	strd	r0, r1, [r5]
 800dff8:	3b08      	subs	r3, #8
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	9b06      	ldr	r3, [sp, #24]
 800dffe:	4599      	cmp	r9, r3
 800e000:	dd07      	ble.n	800e012 <__kernel_rem_pio2+0x3ae>
 800e002:	9b07      	ldr	r3, [sp, #28]
 800e004:	f108 0801 	add.w	r8, r8, #1
 800e008:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800e00c:	3508      	adds	r5, #8
 800e00e:	9307      	str	r3, [sp, #28]
 800e010:	e7de      	b.n	800dfd0 <__kernel_rem_pio2+0x36c>
 800e012:	9900      	ldr	r1, [sp, #0]
 800e014:	f109 0901 	add.w	r9, r9, #1
 800e018:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800e01c:	9100      	str	r1, [sp, #0]
 800e01e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800e022:	f7f2 fa59 	bl	80004d8 <__aeabi_dmul>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	4630      	mov	r0, r6
 800e02c:	4639      	mov	r1, r7
 800e02e:	f7f2 f89d 	bl	800016c <__adddf3>
 800e032:	4606      	mov	r6, r0
 800e034:	460f      	mov	r7, r1
 800e036:	e7e1      	b.n	800dffc <__kernel_rem_pio2+0x398>
 800e038:	f1ca 0200 	rsb	r2, sl, #0
 800e03c:	4640      	mov	r0, r8
 800e03e:	4649      	mov	r1, r9
 800e040:	f000 f936 	bl	800e2b0 <scalbn>
 800e044:	2200      	movs	r2, #0
 800e046:	4b97      	ldr	r3, [pc, #604]	@ (800e2a4 <__kernel_rem_pio2+0x640>)
 800e048:	4604      	mov	r4, r0
 800e04a:	460d      	mov	r5, r1
 800e04c:	f7f2 fcca 	bl	80009e4 <__aeabi_dcmpge>
 800e050:	b300      	cbz	r0, 800e094 <__kernel_rem_pio2+0x430>
 800e052:	2200      	movs	r2, #0
 800e054:	4b94      	ldr	r3, [pc, #592]	@ (800e2a8 <__kernel_rem_pio2+0x644>)
 800e056:	4620      	mov	r0, r4
 800e058:	4629      	mov	r1, r5
 800e05a:	f7f2 fa3d 	bl	80004d8 <__aeabi_dmul>
 800e05e:	f7f2 fceb 	bl	8000a38 <__aeabi_d2iz>
 800e062:	4606      	mov	r6, r0
 800e064:	f7f2 f9ce 	bl	8000404 <__aeabi_i2d>
 800e068:	2200      	movs	r2, #0
 800e06a:	4b8e      	ldr	r3, [pc, #568]	@ (800e2a4 <__kernel_rem_pio2+0x640>)
 800e06c:	f7f2 fa34 	bl	80004d8 <__aeabi_dmul>
 800e070:	460b      	mov	r3, r1
 800e072:	4602      	mov	r2, r0
 800e074:	4629      	mov	r1, r5
 800e076:	4620      	mov	r0, r4
 800e078:	f7f2 f876 	bl	8000168 <__aeabi_dsub>
 800e07c:	f7f2 fcdc 	bl	8000a38 <__aeabi_d2iz>
 800e080:	ab0c      	add	r3, sp, #48	@ 0x30
 800e082:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800e086:	f10b 0b01 	add.w	fp, fp, #1
 800e08a:	f10a 0a18 	add.w	sl, sl, #24
 800e08e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800e092:	e733      	b.n	800defc <__kernel_rem_pio2+0x298>
 800e094:	4620      	mov	r0, r4
 800e096:	4629      	mov	r1, r5
 800e098:	f7f2 fcce 	bl	8000a38 <__aeabi_d2iz>
 800e09c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e09e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800e0a2:	e72b      	b.n	800defc <__kernel_rem_pio2+0x298>
 800e0a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0aa:	f7f2 f9ab 	bl	8000404 <__aeabi_i2d>
 800e0ae:	4632      	mov	r2, r6
 800e0b0:	463b      	mov	r3, r7
 800e0b2:	f7f2 fa11 	bl	80004d8 <__aeabi_dmul>
 800e0b6:	464a      	mov	r2, r9
 800e0b8:	e868 0102 	strd	r0, r1, [r8], #-8
 800e0bc:	4653      	mov	r3, sl
 800e0be:	4630      	mov	r0, r6
 800e0c0:	4639      	mov	r1, r7
 800e0c2:	f7f2 fa09 	bl	80004d8 <__aeabi_dmul>
 800e0c6:	3d01      	subs	r5, #1
 800e0c8:	4606      	mov	r6, r0
 800e0ca:	460f      	mov	r7, r1
 800e0cc:	e727      	b.n	800df1e <__kernel_rem_pio2+0x2ba>
 800e0ce:	f8dd c018 	ldr.w	ip, [sp, #24]
 800e0d2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e0d6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800e0da:	f8cd c018 	str.w	ip, [sp, #24]
 800e0de:	f7f2 f9fb 	bl	80004d8 <__aeabi_dmul>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	4648      	mov	r0, r9
 800e0e8:	4651      	mov	r1, sl
 800e0ea:	f7f2 f83f 	bl	800016c <__adddf3>
 800e0ee:	4681      	mov	r9, r0
 800e0f0:	468a      	mov	sl, r1
 800e0f2:	3701      	adds	r7, #1
 800e0f4:	9b02      	ldr	r3, [sp, #8]
 800e0f6:	429f      	cmp	r7, r3
 800e0f8:	dc01      	bgt.n	800e0fe <__kernel_rem_pio2+0x49a>
 800e0fa:	42be      	cmp	r6, r7
 800e0fc:	dae7      	bge.n	800e0ce <__kernel_rem_pio2+0x46a>
 800e0fe:	ab48      	add	r3, sp, #288	@ 0x120
 800e100:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e104:	e9c6 9a00 	strd	r9, sl, [r6]
 800e108:	3d01      	subs	r5, #1
 800e10a:	e70c      	b.n	800df26 <__kernel_rem_pio2+0x2c2>
 800e10c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800e10e:	2b02      	cmp	r3, #2
 800e110:	dc09      	bgt.n	800e126 <__kernel_rem_pio2+0x4c2>
 800e112:	2b00      	cmp	r3, #0
 800e114:	dc2c      	bgt.n	800e170 <__kernel_rem_pio2+0x50c>
 800e116:	d04e      	beq.n	800e1b6 <__kernel_rem_pio2+0x552>
 800e118:	9b05      	ldr	r3, [sp, #20]
 800e11a:	f003 0007 	and.w	r0, r3, #7
 800e11e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e126:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d1f5      	bne.n	800e118 <__kernel_rem_pio2+0x4b4>
 800e12c:	ab48      	add	r3, sp, #288	@ 0x120
 800e12e:	441c      	add	r4, r3
 800e130:	4625      	mov	r5, r4
 800e132:	46da      	mov	sl, fp
 800e134:	f1ba 0f00 	cmp.w	sl, #0
 800e138:	dc63      	bgt.n	800e202 <__kernel_rem_pio2+0x59e>
 800e13a:	4625      	mov	r5, r4
 800e13c:	46da      	mov	sl, fp
 800e13e:	f1ba 0f01 	cmp.w	sl, #1
 800e142:	dc7b      	bgt.n	800e23c <__kernel_rem_pio2+0x5d8>
 800e144:	2000      	movs	r0, #0
 800e146:	2100      	movs	r1, #0
 800e148:	f1bb 0f01 	cmp.w	fp, #1
 800e14c:	f300 8093 	bgt.w	800e276 <__kernel_rem_pio2+0x612>
 800e150:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e154:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e158:	9b00      	ldr	r3, [sp, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f040 8092 	bne.w	800e284 <__kernel_rem_pio2+0x620>
 800e160:	9b04      	ldr	r3, [sp, #16]
 800e162:	e9c3 7800 	strd	r7, r8, [r3]
 800e166:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e16a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e16e:	e7d3      	b.n	800e118 <__kernel_rem_pio2+0x4b4>
 800e170:	465d      	mov	r5, fp
 800e172:	2000      	movs	r0, #0
 800e174:	2100      	movs	r1, #0
 800e176:	ab48      	add	r3, sp, #288	@ 0x120
 800e178:	441c      	add	r4, r3
 800e17a:	2d00      	cmp	r5, #0
 800e17c:	da32      	bge.n	800e1e4 <__kernel_rem_pio2+0x580>
 800e17e:	9b00      	ldr	r3, [sp, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d035      	beq.n	800e1f0 <__kernel_rem_pio2+0x58c>
 800e184:	4602      	mov	r2, r0
 800e186:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e18a:	9c04      	ldr	r4, [sp, #16]
 800e18c:	2501      	movs	r5, #1
 800e18e:	e9c4 2300 	strd	r2, r3, [r4]
 800e192:	4602      	mov	r2, r0
 800e194:	460b      	mov	r3, r1
 800e196:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e19a:	f7f1 ffe5 	bl	8000168 <__aeabi_dsub>
 800e19e:	ac48      	add	r4, sp, #288	@ 0x120
 800e1a0:	45ab      	cmp	fp, r5
 800e1a2:	da28      	bge.n	800e1f6 <__kernel_rem_pio2+0x592>
 800e1a4:	9b00      	ldr	r3, [sp, #0]
 800e1a6:	b113      	cbz	r3, 800e1ae <__kernel_rem_pio2+0x54a>
 800e1a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	9b04      	ldr	r3, [sp, #16]
 800e1b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e1b4:	e7b0      	b.n	800e118 <__kernel_rem_pio2+0x4b4>
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	ab48      	add	r3, sp, #288	@ 0x120
 800e1bc:	441c      	add	r4, r3
 800e1be:	f1bb 0f00 	cmp.w	fp, #0
 800e1c2:	da08      	bge.n	800e1d6 <__kernel_rem_pio2+0x572>
 800e1c4:	9b00      	ldr	r3, [sp, #0]
 800e1c6:	b113      	cbz	r3, 800e1ce <__kernel_rem_pio2+0x56a>
 800e1c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	9b04      	ldr	r3, [sp, #16]
 800e1d0:	e9c3 0100 	strd	r0, r1, [r3]
 800e1d4:	e7a0      	b.n	800e118 <__kernel_rem_pio2+0x4b4>
 800e1d6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800e1da:	f7f1 ffc7 	bl	800016c <__adddf3>
 800e1de:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e1e2:	e7ec      	b.n	800e1be <__kernel_rem_pio2+0x55a>
 800e1e4:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800e1e8:	f7f1 ffc0 	bl	800016c <__adddf3>
 800e1ec:	3d01      	subs	r5, #1
 800e1ee:	e7c4      	b.n	800e17a <__kernel_rem_pio2+0x516>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	e7c9      	b.n	800e18a <__kernel_rem_pio2+0x526>
 800e1f6:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800e1fa:	f7f1 ffb7 	bl	800016c <__adddf3>
 800e1fe:	3501      	adds	r5, #1
 800e200:	e7ce      	b.n	800e1a0 <__kernel_rem_pio2+0x53c>
 800e202:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e206:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800e20a:	4640      	mov	r0, r8
 800e20c:	4649      	mov	r1, r9
 800e20e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e212:	f7f1 ffab 	bl	800016c <__adddf3>
 800e216:	4602      	mov	r2, r0
 800e218:	460b      	mov	r3, r1
 800e21a:	4606      	mov	r6, r0
 800e21c:	460f      	mov	r7, r1
 800e21e:	4640      	mov	r0, r8
 800e220:	4649      	mov	r1, r9
 800e222:	f7f1 ffa1 	bl	8000168 <__aeabi_dsub>
 800e226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e22a:	f7f1 ff9f 	bl	800016c <__adddf3>
 800e22e:	e865 0102 	strd	r0, r1, [r5], #-8
 800e232:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e236:	e9c5 6700 	strd	r6, r7, [r5]
 800e23a:	e77b      	b.n	800e134 <__kernel_rem_pio2+0x4d0>
 800e23c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e240:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800e244:	4640      	mov	r0, r8
 800e246:	4649      	mov	r1, r9
 800e248:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e24c:	f7f1 ff8e 	bl	800016c <__adddf3>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4606      	mov	r6, r0
 800e256:	460f      	mov	r7, r1
 800e258:	4640      	mov	r0, r8
 800e25a:	4649      	mov	r1, r9
 800e25c:	f7f1 ff84 	bl	8000168 <__aeabi_dsub>
 800e260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e264:	f7f1 ff82 	bl	800016c <__adddf3>
 800e268:	e865 0102 	strd	r0, r1, [r5], #-8
 800e26c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e270:	e9c5 6700 	strd	r6, r7, [r5]
 800e274:	e763      	b.n	800e13e <__kernel_rem_pio2+0x4da>
 800e276:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800e27a:	f7f1 ff77 	bl	800016c <__adddf3>
 800e27e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e282:	e761      	b.n	800e148 <__kernel_rem_pio2+0x4e4>
 800e284:	9b04      	ldr	r3, [sp, #16]
 800e286:	9a04      	ldr	r2, [sp, #16]
 800e288:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e28c:	601f      	str	r7, [r3, #0]
 800e28e:	605c      	str	r4, [r3, #4]
 800e290:	609d      	str	r5, [r3, #8]
 800e292:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e296:	60d3      	str	r3, [r2, #12]
 800e298:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e29c:	6110      	str	r0, [r2, #16]
 800e29e:	6153      	str	r3, [r2, #20]
 800e2a0:	e73a      	b.n	800e118 <__kernel_rem_pio2+0x4b4>
 800e2a2:	bf00      	nop
 800e2a4:	41700000 	.word	0x41700000
 800e2a8:	3e700000 	.word	0x3e700000
 800e2ac:	00000000 	.word	0x00000000

0800e2b0 <scalbn>:
 800e2b0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800e2b4:	4616      	mov	r6, r2
 800e2b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e2ba:	4683      	mov	fp, r0
 800e2bc:	468c      	mov	ip, r1
 800e2be:	460b      	mov	r3, r1
 800e2c0:	b982      	cbnz	r2, 800e2e4 <scalbn+0x34>
 800e2c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e2c6:	4303      	orrs	r3, r0
 800e2c8:	d039      	beq.n	800e33e <scalbn+0x8e>
 800e2ca:	4b2f      	ldr	r3, [pc, #188]	@ (800e388 <scalbn+0xd8>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f7f2 f903 	bl	80004d8 <__aeabi_dmul>
 800e2d2:	4b2e      	ldr	r3, [pc, #184]	@ (800e38c <scalbn+0xdc>)
 800e2d4:	4683      	mov	fp, r0
 800e2d6:	429e      	cmp	r6, r3
 800e2d8:	468c      	mov	ip, r1
 800e2da:	da0d      	bge.n	800e2f8 <scalbn+0x48>
 800e2dc:	a326      	add	r3, pc, #152	@ (adr r3, 800e378 <scalbn+0xc8>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	e01b      	b.n	800e31c <scalbn+0x6c>
 800e2e4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800e2e8:	42ba      	cmp	r2, r7
 800e2ea:	d109      	bne.n	800e300 <scalbn+0x50>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	f7f1 ff3d 	bl	800016c <__adddf3>
 800e2f2:	4683      	mov	fp, r0
 800e2f4:	468c      	mov	ip, r1
 800e2f6:	e022      	b.n	800e33e <scalbn+0x8e>
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e2fe:	3a36      	subs	r2, #54	@ 0x36
 800e300:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e304:	428e      	cmp	r6, r1
 800e306:	dd0c      	ble.n	800e322 <scalbn+0x72>
 800e308:	a31d      	add	r3, pc, #116	@ (adr r3, 800e380 <scalbn+0xd0>)
 800e30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30e:	461c      	mov	r4, r3
 800e310:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800e314:	f361 74df 	bfi	r4, r1, #31, #1
 800e318:	4621      	mov	r1, r4
 800e31a:	481d      	ldr	r0, [pc, #116]	@ (800e390 <scalbn+0xe0>)
 800e31c:	f7f2 f8dc 	bl	80004d8 <__aeabi_dmul>
 800e320:	e7e7      	b.n	800e2f2 <scalbn+0x42>
 800e322:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e326:	4432      	add	r2, r6
 800e328:	428a      	cmp	r2, r1
 800e32a:	dced      	bgt.n	800e308 <scalbn+0x58>
 800e32c:	2a00      	cmp	r2, #0
 800e32e:	dd0a      	ble.n	800e346 <scalbn+0x96>
 800e330:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e334:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e338:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e33c:	46ac      	mov	ip, r5
 800e33e:	4658      	mov	r0, fp
 800e340:	4661      	mov	r1, ip
 800e342:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800e346:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e34a:	da09      	bge.n	800e360 <scalbn+0xb0>
 800e34c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800e350:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800e354:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800e358:	480e      	ldr	r0, [pc, #56]	@ (800e394 <scalbn+0xe4>)
 800e35a:	f041 011f 	orr.w	r1, r1, #31
 800e35e:	e7bd      	b.n	800e2dc <scalbn+0x2c>
 800e360:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e364:	3236      	adds	r2, #54	@ 0x36
 800e366:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e36a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e36e:	4658      	mov	r0, fp
 800e370:	4629      	mov	r1, r5
 800e372:	2200      	movs	r2, #0
 800e374:	4b08      	ldr	r3, [pc, #32]	@ (800e398 <scalbn+0xe8>)
 800e376:	e7d1      	b.n	800e31c <scalbn+0x6c>
 800e378:	c2f8f359 	.word	0xc2f8f359
 800e37c:	01a56e1f 	.word	0x01a56e1f
 800e380:	8800759c 	.word	0x8800759c
 800e384:	7e37e43c 	.word	0x7e37e43c
 800e388:	43500000 	.word	0x43500000
 800e38c:	ffff3cb0 	.word	0xffff3cb0
 800e390:	8800759c 	.word	0x8800759c
 800e394:	c2f8f359 	.word	0xc2f8f359
 800e398:	3c900000 	.word	0x3c900000
 800e39c:	00000000 	.word	0x00000000

0800e3a0 <floor>:
 800e3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e3a8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800e3ac:	2e13      	cmp	r6, #19
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	4605      	mov	r5, r0
 800e3b6:	4680      	mov	r8, r0
 800e3b8:	dc35      	bgt.n	800e426 <floor+0x86>
 800e3ba:	2e00      	cmp	r6, #0
 800e3bc:	da17      	bge.n	800e3ee <floor+0x4e>
 800e3be:	a334      	add	r3, pc, #208	@ (adr r3, 800e490 <floor+0xf0>)
 800e3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c4:	f7f1 fed2 	bl	800016c <__adddf3>
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f7f2 fb14 	bl	80009f8 <__aeabi_dcmpgt>
 800e3d0:	b150      	cbz	r0, 800e3e8 <floor+0x48>
 800e3d2:	2c00      	cmp	r4, #0
 800e3d4:	da57      	bge.n	800e486 <floor+0xe6>
 800e3d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e3da:	432c      	orrs	r4, r5
 800e3dc:	2500      	movs	r5, #0
 800e3de:	42ac      	cmp	r4, r5
 800e3e0:	4c2d      	ldr	r4, [pc, #180]	@ (800e498 <floor+0xf8>)
 800e3e2:	bf08      	it	eq
 800e3e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e3e8:	4623      	mov	r3, r4
 800e3ea:	462a      	mov	r2, r5
 800e3ec:	e024      	b.n	800e438 <floor+0x98>
 800e3ee:	4f2b      	ldr	r7, [pc, #172]	@ (800e49c <floor+0xfc>)
 800e3f0:	4137      	asrs	r7, r6
 800e3f2:	ea01 0c07 	and.w	ip, r1, r7
 800e3f6:	ea5c 0c00 	orrs.w	ip, ip, r0
 800e3fa:	d01d      	beq.n	800e438 <floor+0x98>
 800e3fc:	a324      	add	r3, pc, #144	@ (adr r3, 800e490 <floor+0xf0>)
 800e3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e402:	f7f1 feb3 	bl	800016c <__adddf3>
 800e406:	2200      	movs	r2, #0
 800e408:	2300      	movs	r3, #0
 800e40a:	f7f2 faf5 	bl	80009f8 <__aeabi_dcmpgt>
 800e40e:	2800      	cmp	r0, #0
 800e410:	d0ea      	beq.n	800e3e8 <floor+0x48>
 800e412:	2c00      	cmp	r4, #0
 800e414:	bfbe      	ittt	lt
 800e416:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e41a:	4133      	asrlt	r3, r6
 800e41c:	18e4      	addlt	r4, r4, r3
 800e41e:	2500      	movs	r5, #0
 800e420:	ea24 0407 	bic.w	r4, r4, r7
 800e424:	e7e0      	b.n	800e3e8 <floor+0x48>
 800e426:	2e33      	cmp	r6, #51	@ 0x33
 800e428:	dd0a      	ble.n	800e440 <floor+0xa0>
 800e42a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e42e:	d103      	bne.n	800e438 <floor+0x98>
 800e430:	f7f1 fe9c 	bl	800016c <__adddf3>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	4610      	mov	r0, r2
 800e43a:	4619      	mov	r1, r3
 800e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e440:	f04f 3cff 	mov.w	ip, #4294967295
 800e444:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800e448:	fa2c f707 	lsr.w	r7, ip, r7
 800e44c:	4207      	tst	r7, r0
 800e44e:	d0f3      	beq.n	800e438 <floor+0x98>
 800e450:	a30f      	add	r3, pc, #60	@ (adr r3, 800e490 <floor+0xf0>)
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	f7f1 fe89 	bl	800016c <__adddf3>
 800e45a:	2200      	movs	r2, #0
 800e45c:	2300      	movs	r3, #0
 800e45e:	f7f2 facb 	bl	80009f8 <__aeabi_dcmpgt>
 800e462:	2800      	cmp	r0, #0
 800e464:	d0c0      	beq.n	800e3e8 <floor+0x48>
 800e466:	2c00      	cmp	r4, #0
 800e468:	da0a      	bge.n	800e480 <floor+0xe0>
 800e46a:	2e14      	cmp	r6, #20
 800e46c:	d101      	bne.n	800e472 <floor+0xd2>
 800e46e:	3401      	adds	r4, #1
 800e470:	e006      	b.n	800e480 <floor+0xe0>
 800e472:	2301      	movs	r3, #1
 800e474:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e478:	40b3      	lsls	r3, r6
 800e47a:	441d      	add	r5, r3
 800e47c:	4545      	cmp	r5, r8
 800e47e:	d3f6      	bcc.n	800e46e <floor+0xce>
 800e480:	ea25 0507 	bic.w	r5, r5, r7
 800e484:	e7b0      	b.n	800e3e8 <floor+0x48>
 800e486:	2500      	movs	r5, #0
 800e488:	462c      	mov	r4, r5
 800e48a:	e7ad      	b.n	800e3e8 <floor+0x48>
 800e48c:	f3af 8000 	nop.w
 800e490:	8800759c 	.word	0x8800759c
 800e494:	7e37e43c 	.word	0x7e37e43c
 800e498:	bff00000 	.word	0xbff00000
 800e49c:	000fffff 	.word	0x000fffff

0800e4a0 <_init>:
 800e4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a2:	bf00      	nop
 800e4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a6:	bc08      	pop	{r3}
 800e4a8:	469e      	mov	lr, r3
 800e4aa:	4770      	bx	lr

0800e4ac <_fini>:
 800e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ae:	bf00      	nop
 800e4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4b2:	bc08      	pop	{r3}
 800e4b4:	469e      	mov	lr, r3
 800e4b6:	4770      	bx	lr
