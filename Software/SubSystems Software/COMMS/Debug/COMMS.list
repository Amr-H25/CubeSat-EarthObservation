
COMMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007450  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  08007560  08007560  00008560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b8  080080b8  0000a384  2**0
                  CONTENTS
  4 .ARM          00000008  080080b8  080080b8  000090b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c0  080080c0  0000a384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c0  080080c0  000090c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080c4  080080c4  000090c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000384  20000000  080080c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000384  0800844c  0000a384  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  0800844c  0000a6e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a384  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5c1  00000000  00000000  0000a3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c6  00000000  00000000  0001796e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00019b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a56  00000000  00000000  0001a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a10  00000000  00000000  0001b2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eee7  00000000  00000000  00033cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c525  00000000  00000000  00042bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf0ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b0  00000000  00000000  000cf130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d3ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000384 	.word	0x20000384
 800012c:	00000000 	.word	0x00000000
 8000130:	08007548 	.word	0x08007548

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000388 	.word	0x20000388
 800014c:	08007548 	.word	0x08007548

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <BT_Init>:

extern UART_HandleTypeDef huart2;
#define DEBUG_UART &huart2

// Initialize Bluetooth module
BT_StatusTypeDef BT_Init(UART_HandleTypeDef *huart) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    // Clear buffers
    memset(rx_buffer, 0, COMMAND_BUFFER_SIZE);
 8000a90:	2240      	movs	r2, #64	@ 0x40
 8000a92:	2100      	movs	r1, #0
 8000a94:	480e      	ldr	r0, [pc, #56]	@ (8000ad0 <BT_Init+0x48>)
 8000a96:	f004 fce1 	bl	800545c <memset>
    memset(received_command, 0, COMMAND_BUFFER_SIZE);
 8000a9a:	2240      	movs	r2, #64	@ 0x40
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <BT_Init+0x4c>)
 8000aa0:	f004 fcdc 	bl	800545c <memset>
    rx_index = 0;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <BT_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	801a      	strh	r2, [r3, #0]
    command_received = false;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <BT_Init+0x54>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]

    // Start single byte DMA reception (circular mode)
    if (HAL_UART_Receive_DMA(huart, &rx_single_byte, 1) != HAL_OK) {
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	490b      	ldr	r1, [pc, #44]	@ (8000ae0 <BT_Init+0x58>)
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f002 fea2 	bl	80037fe <HAL_UART_Receive_DMA>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <BT_Init+0x3c>
        return BT_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <BT_Init+0x3e>
    }
    return BT_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200003e4 	.word	0x200003e4
 8000ad4:	200003a4 	.word	0x200003a4
 8000ad8:	20000426 	.word	0x20000426
 8000adc:	200003a0 	.word	0x200003a0
 8000ae0:	20000424 	.word	0x20000424

08000ae4 <BT_SendJSON>:

// Send JSON data
BT_StatusTypeDef BT_SendJSON(TelemetryData *data) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	f5ad 6d01 	sub.w	sp, sp, #2064	@ 0x810
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000af0:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 8000af4:	6018      	str	r0, [r3, #0]
    char json_buffer[JSON_BUFFER_SIZE] = {0};
 8000af6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000afa:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	3304      	adds	r3, #4
 8000b04:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 fca6 	bl	800545c <memset>
    BT_GenerateJSONString(data, json_buffer);
 8000b10:	f107 020c 	add.w	r2, r7, #12
 8000b14:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8000b18:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	f000 f8c6 	bl	8000cb0 <BT_GenerateJSONString>

    uint16_t len = strlen(json_buffer);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fb11 	bl	8000150 <strlen>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e

    // Check UART state before transmission
    if (huart3.gState != HAL_UART_STATE_READY) {
 8000b34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <BT_SendJSON+0xc4>)
 8000b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b20      	cmp	r3, #32
 8000b3e:	d009      	beq.n	8000b54 <BT_SendJSON+0x70>
        printf("[BT] UART not ready, state: %d\r\n", huart3.gState);
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <BT_SendJSON+0xc4>)
 8000b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4818      	ldr	r0, [pc, #96]	@ (8000bac <BT_SendJSON+0xc8>)
 8000b4c:	f004 fb0a 	bl	8005164 <iprintf>
        return BT_BUSY;
 8000b50:	2302      	movs	r3, #2
 8000b52:	e023      	b.n	8000b9c <BT_SendJSON+0xb8>
    }

    printf("[BT] Sending JSON (%d bytes)...\r\n", len);
 8000b54:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4815      	ldr	r0, [pc, #84]	@ (8000bb0 <BT_SendJSON+0xcc>)
 8000b5c:	f004 fb02 	bl	8005164 <iprintf>

    // Use longer timeout for large JSON
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, (uint8_t*)json_buffer, len, 3000);
 8000b60:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	@ 0x80e
 8000b64:	f107 010c 	add.w	r1, r7, #12
 8000b68:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000b6c:	480e      	ldr	r0, [pc, #56]	@ (8000ba8 <BT_SendJSON+0xc4>)
 8000b6e:	f002 fdbb 	bl	80036e8 <HAL_UART_Transmit>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f887 380d 	strb.w	r3, [r7, #2061]	@ 0x80d

    if (status != HAL_OK) {
 8000b78:	f897 380d 	ldrb.w	r3, [r7, #2061]	@ 0x80d
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d009      	beq.n	8000b94 <BT_SendJSON+0xb0>
        printf("[BT] HAL_UART_Transmit failed: %d, ErrorCode: 0x%08lX\r\n", status, huart3.ErrorCode);
 8000b80:	f897 380d 	ldrb.w	r3, [r7, #2061]	@ 0x80d
 8000b84:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <BT_SendJSON+0xc4>)
 8000b86:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480a      	ldr	r0, [pc, #40]	@ (8000bb4 <BT_SendJSON+0xd0>)
 8000b8c:	f004 faea 	bl	8005164 <iprintf>
        return BT_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e003      	b.n	8000b9c <BT_SendJSON+0xb8>
    }

    printf("[BT] JSON sent successfully\r\n");
 8000b94:	4808      	ldr	r0, [pc, #32]	@ (8000bb8 <BT_SendJSON+0xd4>)
 8000b96:	f004 fb4d 	bl	8005234 <puts>
    return BT_OK;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f507 6701 	add.w	r7, r7, #2064	@ 0x810
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200004bc 	.word	0x200004bc
 8000bac:	08007560 	.word	0x08007560
 8000bb0:	08007584 	.word	0x08007584
 8000bb4:	080075a8 	.word	0x080075a8
 8000bb8:	080075e0 	.word	0x080075e0

08000bbc <BT_ErrorHandler>:
        return BT_ERROR;
    }
    return BT_OK;
}

void BT_ErrorHandler(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    printf("[ERROR] Reinitializing Bluetooth...\r\n");
 8000bc0:	480e      	ldr	r0, [pc, #56]	@ (8000bfc <BT_ErrorHandler+0x40>)
 8000bc2:	f004 fb37 	bl	8005234 <puts>

    // Stop DMA
    HAL_UART_DMAStop(&huart3);
 8000bc6:	480e      	ldr	r0, [pc, #56]	@ (8000c00 <BT_ErrorHandler+0x44>)
 8000bc8:	f002 fe3e 	bl	8003848 <HAL_UART_DMAStop>

    // Reset buffers
    memset(rx_buffer, 0, COMMAND_BUFFER_SIZE);
 8000bcc:	2240      	movs	r2, #64	@ 0x40
 8000bce:	2100      	movs	r1, #0
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <BT_ErrorHandler+0x48>)
 8000bd2:	f004 fc43 	bl	800545c <memset>
    memset(received_command, 0, COMMAND_BUFFER_SIZE);
 8000bd6:	2240      	movs	r2, #64	@ 0x40
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <BT_ErrorHandler+0x4c>)
 8000bdc:	f004 fc3e 	bl	800545c <memset>
    rx_index = 0;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <BT_ErrorHandler+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
    command_received = false;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <BT_ErrorHandler+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]

    // Restart single byte reception
    HAL_UART_Receive_DMA(&huart3, &rx_single_byte, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	4909      	ldr	r1, [pc, #36]	@ (8000c14 <BT_ErrorHandler+0x58>)
 8000bf0:	4803      	ldr	r0, [pc, #12]	@ (8000c00 <BT_ErrorHandler+0x44>)
 8000bf2:	f002 fe04 	bl	80037fe <HAL_UART_Receive_DMA>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	08007600 	.word	0x08007600
 8000c00:	200004bc 	.word	0x200004bc
 8000c04:	200003e4 	.word	0x200003e4
 8000c08:	200003a4 	.word	0x200003a4
 8000c0c:	20000426 	.word	0x20000426
 8000c10:	200003a0 	.word	0x200003a0
 8000c14:	20000424 	.word	0x20000424

08000c18 <BT_IsCommandReceived>:

// Check if command received
bool BT_IsCommandReceived(void) {
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
    return command_received;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <BT_IsCommandReceived+0x14>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200003a0 	.word	0x200003a0

08000c30 <BT_ClearCommandFlag>:

// Clear command flag
void BT_ClearCommandFlag(void) {
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
    command_received = false;
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <BT_ClearCommandFlag+0x18>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
    led_blink_flag = false;
 8000c3a:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <BT_ClearCommandFlag+0x1c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	200003a0 	.word	0x200003a0
 8000c4c:	20000428 	.word	0x20000428

08000c50 <BT_ReceiveCommand>:

// Receive command with timeout
BT_StatusTypeDef BT_ReceiveCommand(char *command, uint32_t timeout) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
    uint32_t start = HAL_GetTick();
 8000c5a:	f001 f88d 	bl	8001d78 <HAL_GetTick>
 8000c5e:	60f8      	str	r0, [r7, #12]

    while (!command_received) {
 8000c60:	e00c      	b.n	8000c7c <BT_ReceiveCommand+0x2c>
        if (HAL_GetTick() - start > timeout) {
 8000c62:	f001 f889 	bl	8001d78 <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d201      	bcs.n	8000c76 <BT_ReceiveCommand+0x26>
            return BT_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e014      	b.n	8000ca0 <BT_ReceiveCommand+0x50>
        }
        HAL_Delay(1); // Shorter delay
 8000c76:	2001      	movs	r0, #1
 8000c78:	f001 f888 	bl	8001d8c <HAL_Delay>
    while (!command_received) {
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <BT_ReceiveCommand+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f083 0301 	eor.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1ea      	bne.n	8000c62 <BT_ReceiveCommand+0x12>
    }

    strncpy(command, received_command, COMMAND_BUFFER_SIZE - 1);
 8000c8c:	223f      	movs	r2, #63	@ 0x3f
 8000c8e:	4907      	ldr	r1, [pc, #28]	@ (8000cac <BT_ReceiveCommand+0x5c>)
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f004 fbf8 	bl	8005486 <strncpy>
    command[COMMAND_BUFFER_SIZE - 1] = '\0'; // Ensure null termination
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	333f      	adds	r3, #63	@ 0x3f
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
    return BT_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200003a0 	.word	0x200003a0
 8000cac:	200003a4 	.word	0x200003a4

08000cb0 <BT_GenerateJSONString>:
    // data->eps.battery_percentage = readBatteryPercentage();
    // etc.
}

// Generate JSON string from telemetry data
void BT_GenerateJSONString(TelemetryData *data, char *buffer) {
 8000cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb4:	b0e7      	sub	sp, #412	@ 0x19c
 8000cb6:	af38      	add	r7, sp, #224	@ 0xe0
 8000cb8:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 8000cbc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
        "  },\r\n"
        "  \"last_command_button\": \"%s\",\r\n"
        "  \"last_command_time\": \"%s\",\r\n"
        "  \"command_status\": \"%s\"\r\n"
        "}\r\n",
        data->timestamp, data->system_status,
 8000cc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ccc:	f103 0214 	add.w	r2, r3, #20
 8000cd0:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
        data->adcs.status, data->adcs.pitch, data->adcs.roll, data->adcs.yaw,
 8000cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000cd8:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8000cdc:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 8000ce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fb9e 	bl	8000428 <__aeabi_f2d>
 8000cec:	e9c7 0126 	strd	r0, r1, [r7, #152]	@ 0x98
        data->adcs.status, data->adcs.pitch, data->adcs.roll, data->adcs.yaw,
 8000cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fb96 	bl	8000428 <__aeabi_f2d>
 8000cfc:	e9c7 0124 	strd	r0, r1, [r7, #144]	@ 0x90
        data->adcs.status, data->adcs.pitch, data->adcs.roll, data->adcs.yaw,
 8000d00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fb8e 	bl	8000428 <__aeabi_f2d>
 8000d0c:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88
        data->adcs.gps.latitude, data->adcs.gps.longitude, data->adcs.gps.altitude,
 8000d10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fb86 	bl	8000428 <__aeabi_f2d>
 8000d1c:	e9c7 0120 	strd	r0, r1, [r7, #128]	@ 0x80
        data->adcs.gps.latitude, data->adcs.gps.longitude, data->adcs.gps.altitude,
 8000d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fb7e 	bl	8000428 <__aeabi_f2d>
 8000d2c:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
        data->adcs.gps.latitude, data->adcs.gps.longitude, data->adcs.gps.altitude,
 8000d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb76 	bl	8000428 <__aeabi_f2d>
 8000d3c:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 8000d40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d44:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8000d46:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8000d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d4e:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 8000d50:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8000d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d56:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 8000d58:	66be      	str	r6, [r7, #104]	@ 0x68
 8000d5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d5e:	f8d3 c058 	ldr.w	ip, [r3, #88]	@ 0x58
 8000d62:	f8c7 c064 	str.w	ip, [r7, #100]	@ 0x64
 8000d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d6a:	f8d3 e05c 	ldr.w	lr, [r3, #92]	@ 0x5c
 8000d6e:	f8c7 e060 	str.w	lr, [r7, #96]	@ 0x60
        data->adcs.light_sensors.face_a, data->adcs.light_sensors.face_b,
        data->adcs.light_sensors.face_c, data->adcs.light_sensors.face_d,
        data->adcs.temperature,
        data->eps.status, data->eps.battery_voltage, data->eps.battery_percentage,
 8000d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d76:	f103 0860 	add.w	r8, r3, #96	@ 0x60
 8000d7a:	f8c7 805c 	str.w	r8, [r7, #92]	@ 0x5c
 8000d7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fb4f 	bl	8000428 <__aeabi_f2d>
 8000d8a:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8000d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d92:	f8d3 9074 	ldr.w	r9, [r3, #116]	@ 0x74
 8000d96:	f8c7 9058 	str.w	r9, [r7, #88]	@ 0x58
        data->eps.current, data->eps.solar_power, data->eps.charging_status,
 8000d9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb41 	bl	8000428 <__aeabi_f2d>
 8000da6:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
        data->eps.current, data->eps.solar_power, data->eps.charging_status,
 8000daa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fb39 	bl	8000428 <__aeabi_f2d>
 8000db6:	4682      	mov	sl, r0
 8000db8:	468b      	mov	fp, r1
        data->eps.current, data->eps.solar_power, data->eps.charging_status,
 8000dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dbe:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8000dc2:	6479      	str	r1, [r7, #68]	@ 0x44
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000dc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dc8:	f8d3 4090 	ldr.w	r4, [r3, #144]	@ 0x90
 8000dcc:	643c      	str	r4, [r7, #64]	@ 0x40
 8000dce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dd2:	f8d3 5094 	ldr.w	r5, [r3, #148]	@ 0x94
 8000dd6:	63fd      	str	r5, [r7, #60]	@ 0x3c
        data->eps.boost_output, data->eps.temperature,
        data->obc.status, data->obc.data_logging, data->obc.storage_usage,
 8000dd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ddc:	f103 0698 	add.w	r6, r3, #152	@ 0x98
 8000de0:	63be      	str	r6, [r7, #56]	@ 0x38
 8000de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000de6:	f103 0ca8 	add.w	ip, r3, #168	@ 0xa8
 8000dea:	f8c7 c034 	str.w	ip, [r7, #52]	@ 0x34
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000dee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000df2:	f8d3 e0b8 	ldr.w	lr, [r3, #184]	@ 0xb8
 8000df6:	f8c7 e030 	str.w	lr, [r7, #48]	@ 0x30
        data->obc.rtc_sync, data->obc.i2c_status, data->obc.command_queue,
 8000dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dfe:	f103 08bc 	add.w	r8, r3, #188	@ 0xbc
 8000e02:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
 8000e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e0a:	f103 09c4 	add.w	r9, r3, #196	@ 0xc4
 8000e0e:	f8c7 9028 	str.w	r9, [r7, #40]	@ 0x28
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        data->comms.status, data->comms.rf_link, data->comms.signal_strength,
 8000e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e20:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8000e24:	6239      	str	r1, [r7, #32]
 8000e26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e2a:	f103 04e8 	add.w	r4, r3, #232	@ 0xe8
 8000e2e:	61fc      	str	r4, [r7, #28]
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000e30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e34:	f8d3 50f8 	ldr.w	r5, [r3, #248]	@ 0xf8
 8000e38:	61bd      	str	r5, [r7, #24]
 8000e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e3e:	f8d3 60fc 	ldr.w	r6, [r3, #252]	@ 0xfc
 8000e42:	617e      	str	r6, [r7, #20]
 8000e44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e48:	f8d3 c100 	ldr.w	ip, [r3, #256]	@ 0x100
 8000e4c:	f8c7 c010 	str.w	ip, [r7, #16]
        data->comms.packets_sent, data->comms.packets_received, data->comms.last_command,
 8000e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e54:	f503 7e82 	add.w	lr, r3, #260	@ 0x104
 8000e58:	f8c7 e00c 	str.w	lr, [r7, #12]
        data->payload.status, data->payload.payload_status, data->payload.images_today,
 8000e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e60:	f503 788a 	add.w	r8, r3, #276	@ 0x114
 8000e64:	f8c7 8008 	str.w	r8, [r7, #8]
 8000e68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e6c:	f503 7992 	add.w	r9, r3, #292	@ 0x124
 8000e70:	f8c7 9004 	str.w	r9, [r7, #4]
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000e74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e78:	f8d3 6134 	ldr.w	r6, [r3, #308]	@ 0x134
        data->payload.last_image_size, data->payload.ai_classification.result,
 8000e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e80:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff facf 	bl	8000428 <__aeabi_f2d>
 8000e8a:	4680      	mov	r8, r0
 8000e8c:	4689      	mov	r9, r1
        data->payload.last_image_size, data->payload.ai_classification.result,
 8000e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e92:	f503 759e 	add.w	r5, r3, #316	@ 0x13c
        data->payload.ai_classification.confidence,
 8000e96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e9a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fac2 	bl	8000428 <__aeabi_f2d>
        data->last_command_button, data->last_command_time, data->command_status
 8000ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ea8:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8000eac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000eb0:	f503 72b8 	add.w	r2, r3, #368	@ 0x170
 8000eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000eb8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
    snprintf(buffer, JSON_BUFFER_SIZE,
 8000ebc:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000ebe:	9235      	str	r2, [sp, #212]	@ 0xd4
 8000ec0:	9434      	str	r4, [sp, #208]	@ 0xd0
 8000ec2:	e9cd 0132 	strd	r0, r1, [sp, #200]	@ 0xc8
 8000ec6:	9530      	str	r5, [sp, #192]	@ 0xc0
 8000ec8:	e9cd 892e 	strd	r8, r9, [sp, #184]	@ 0xb8
 8000ecc:	962d      	str	r6, [sp, #180]	@ 0xb4
 8000ece:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8000ed2:	f8cd 90b0 	str.w	r9, [sp, #176]	@ 0xb0
 8000ed6:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8000eda:	f8cd 80ac 	str.w	r8, [sp, #172]	@ 0xac
 8000ede:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8000ee2:	f8cd e0a8 	str.w	lr, [sp, #168]	@ 0xa8
 8000ee6:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8000eea:	f8cd c0a4 	str.w	ip, [sp, #164]	@ 0xa4
 8000eee:	697e      	ldr	r6, [r7, #20]
 8000ef0:	9628      	str	r6, [sp, #160]	@ 0xa0
 8000ef2:	69bd      	ldr	r5, [r7, #24]
 8000ef4:	9527      	str	r5, [sp, #156]	@ 0x9c
 8000ef6:	69fc      	ldr	r4, [r7, #28]
 8000ef8:	9426      	str	r4, [sp, #152]	@ 0x98
 8000efa:	6a39      	ldr	r1, [r7, #32]
 8000efc:	9125      	str	r1, [sp, #148]	@ 0x94
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	9324      	str	r3, [sp, #144]	@ 0x90
 8000f02:	f8d7 9028 	ldr.w	r9, [r7, #40]	@ 0x28
 8000f06:	f8cd 908c 	str.w	r9, [sp, #140]	@ 0x8c
 8000f0a:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 8000f0e:	f8cd 8088 	str.w	r8, [sp, #136]	@ 0x88
 8000f12:	f8d7 e030 	ldr.w	lr, [r7, #48]	@ 0x30
 8000f16:	f8cd e084 	str.w	lr, [sp, #132]	@ 0x84
 8000f1a:	f8d7 c034 	ldr.w	ip, [r7, #52]	@ 0x34
 8000f1e:	f8cd c080 	str.w	ip, [sp, #128]	@ 0x80
 8000f22:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8000f24:	961f      	str	r6, [sp, #124]	@ 0x7c
 8000f26:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8000f28:	951e      	str	r5, [sp, #120]	@ 0x78
 8000f2a:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8000f2c:	941d      	str	r4, [sp, #116]	@ 0x74
 8000f2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000f30:	911c      	str	r1, [sp, #112]	@ 0x70
 8000f32:	e9cd ab1a 	strd	sl, fp, [sp, #104]	@ 0x68
 8000f36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000f3a:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 8000f3e:	f8d7 9058 	ldr.w	r9, [r7, #88]	@ 0x58
 8000f42:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
 8000f46:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000f4a:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8000f4e:	f8d7 805c 	ldr.w	r8, [r7, #92]	@ 0x5c
 8000f52:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 8000f56:	f8d7 e060 	ldr.w	lr, [r7, #96]	@ 0x60
 8000f5a:	f8cd e048 	str.w	lr, [sp, #72]	@ 0x48
 8000f5e:	f8d7 c064 	ldr.w	ip, [r7, #100]	@ 0x64
 8000f62:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8000f66:	6ebe      	ldr	r6, [r7, #104]	@ 0x68
 8000f68:	9610      	str	r6, [sp, #64]	@ 0x40
 8000f6a:	6efd      	ldr	r5, [r7, #108]	@ 0x6c
 8000f6c:	950f      	str	r5, [sp, #60]	@ 0x3c
 8000f6e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8000f72:	940e      	str	r4, [sp, #56]	@ 0x38
 8000f74:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000f78:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8000f7c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000f80:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8000f84:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000f88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000f8c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8000f90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000f94:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8000f98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f9c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8000fa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fa4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8000fa8:	9101      	str	r1, [sp, #4]
 8000faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000fae:	9200      	str	r2, [sp, #0]
 8000fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fb4:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <BT_GenerateJSONString+0x31c>)
 8000fb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fba:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8000fbe:	f004 f941 	bl	8005244 <sniprintf>
    );
}
 8000fc2:	bf00      	nop
 8000fc4:	37bc      	adds	r7, #188	@ 0xbc
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fcc:	08007628 	.word	0x08007628

08000fd0 <BT_ShouldBlinkLED>:

// Check if LED should blink (call from main loop)
bool BT_ShouldBlinkLED(void) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
    return led_blink_flag;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <BT_ShouldBlinkLED+0x14>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000428 	.word	0x20000428

08000fe8 <HAL_UART_RxCpltCallback>:

// UART RX Complete callback - handles single byte reception
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80010b4 <HAL_UART_RxCpltCallback+0xcc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d158      	bne.n	80010ac <HAL_UART_RxCpltCallback+0xc4>
        // Process received byte
        if (rx_single_byte == '\n' || rx_single_byte == '\r') {
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80010b8 <HAL_UART_RxCpltCallback+0xd0>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b0a      	cmp	r3, #10
 8001000:	d003      	beq.n	800100a <HAL_UART_RxCpltCallback+0x22>
 8001002:	4b2d      	ldr	r3, [pc, #180]	@ (80010b8 <HAL_UART_RxCpltCallback+0xd0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b0d      	cmp	r3, #13
 8001008:	d128      	bne.n	800105c <HAL_UART_RxCpltCallback+0x74>
            // End of command
            if (rx_index > 0) {
 800100a:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <HAL_UART_RxCpltCallback+0xd4>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d047      	beq.n	80010a2 <HAL_UART_RxCpltCallback+0xba>
                rx_buffer[rx_index] = '\0'; // Null terminate
 8001012:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <HAL_UART_RxCpltCallback+0xd4>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <HAL_UART_RxCpltCallback+0xd8>)
 800101a:	2100      	movs	r1, #0
 800101c:	5499      	strb	r1, [r3, r2]

                // Copy to received command buffer
                strncpy(received_command, (char*)rx_buffer, COMMAND_BUFFER_SIZE - 1);
 800101e:	223f      	movs	r2, #63	@ 0x3f
 8001020:	4927      	ldr	r1, [pc, #156]	@ (80010c0 <HAL_UART_RxCpltCallback+0xd8>)
 8001022:	4828      	ldr	r0, [pc, #160]	@ (80010c4 <HAL_UART_RxCpltCallback+0xdc>)
 8001024:	f004 fa2f 	bl	8005486 <strncpy>
                received_command[COMMAND_BUFFER_SIZE - 1] = '\0';
 8001028:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <HAL_UART_RxCpltCallback+0xdc>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

                printf("[BT] Command received: %s (len: %d)\r\n", received_command, rx_index);
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <HAL_UART_RxCpltCallback+0xd4>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4923      	ldr	r1, [pc, #140]	@ (80010c4 <HAL_UART_RxCpltCallback+0xdc>)
 8001038:	4823      	ldr	r0, [pc, #140]	@ (80010c8 <HAL_UART_RxCpltCallback+0xe0>)
 800103a:	f004 f893 	bl	8005164 <iprintf>

                command_received = true;
 800103e:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <HAL_UART_RxCpltCallback+0xe4>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
                led_blink_flag = true; // Signal main loop to blink LED
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <HAL_UART_RxCpltCallback+0xe8>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]

                // Reset buffer
                memset(rx_buffer, 0, COMMAND_BUFFER_SIZE);
 800104a:	2240      	movs	r2, #64	@ 0x40
 800104c:	2100      	movs	r1, #0
 800104e:	481c      	ldr	r0, [pc, #112]	@ (80010c0 <HAL_UART_RxCpltCallback+0xd8>)
 8001050:	f004 fa04 	bl	800545c <memset>
                rx_index = 0;
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <HAL_UART_RxCpltCallback+0xd4>)
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]
            if (rx_index > 0) {
 800105a:	e022      	b.n	80010a2 <HAL_UART_RxCpltCallback+0xba>
            }
        } else if (rx_single_byte >= 32 && rx_single_byte <= 126) { // Printable ASCII
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_UART_RxCpltCallback+0xd0>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b1f      	cmp	r3, #31
 8001062:	d91e      	bls.n	80010a2 <HAL_UART_RxCpltCallback+0xba>
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <HAL_UART_RxCpltCallback+0xd0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b7e      	cmp	r3, #126	@ 0x7e
 800106a:	d81a      	bhi.n	80010a2 <HAL_UART_RxCpltCallback+0xba>
            // Add to buffer if there's space
            if (rx_index < (COMMAND_BUFFER_SIZE - 1)) {
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <HAL_UART_RxCpltCallback+0xd4>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	2b3e      	cmp	r3, #62	@ 0x3e
 8001072:	d80b      	bhi.n	800108c <HAL_UART_RxCpltCallback+0xa4>
                rx_buffer[rx_index++] = rx_single_byte;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <HAL_UART_RxCpltCallback+0xd4>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	b291      	uxth	r1, r2
 800107c:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <HAL_UART_RxCpltCallback+0xd4>)
 800107e:	8011      	strh	r1, [r2, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_UART_RxCpltCallback+0xd0>)
 8001084:	7819      	ldrb	r1, [r3, #0]
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <HAL_UART_RxCpltCallback+0xd8>)
 8001088:	5499      	strb	r1, [r3, r2]
 800108a:	e00a      	b.n	80010a2 <HAL_UART_RxCpltCallback+0xba>
            } else {
                // Buffer overflow protection
                printf("[BT] Buffer overflow, resetting\r\n");
 800108c:	4811      	ldr	r0, [pc, #68]	@ (80010d4 <HAL_UART_RxCpltCallback+0xec>)
 800108e:	f004 f8d1 	bl	8005234 <puts>
                memset(rx_buffer, 0, COMMAND_BUFFER_SIZE);
 8001092:	2240      	movs	r2, #64	@ 0x40
 8001094:	2100      	movs	r1, #0
 8001096:	480a      	ldr	r0, [pc, #40]	@ (80010c0 <HAL_UART_RxCpltCallback+0xd8>)
 8001098:	f004 f9e0 	bl	800545c <memset>
                rx_index = 0;
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <HAL_UART_RxCpltCallback+0xd4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	801a      	strh	r2, [r3, #0]
            }
        }
        // Ignore other characters (like control characters)

        // Restart single byte reception
        HAL_UART_Receive_DMA(&huart3, &rx_single_byte, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	4904      	ldr	r1, [pc, #16]	@ (80010b8 <HAL_UART_RxCpltCallback+0xd0>)
 80010a6:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <HAL_UART_RxCpltCallback+0xf0>)
 80010a8:	f002 fba9 	bl	80037fe <HAL_UART_Receive_DMA>
    }
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40004800 	.word	0x40004800
 80010b8:	20000424 	.word	0x20000424
 80010bc:	20000426 	.word	0x20000426
 80010c0:	200003e4 	.word	0x200003e4
 80010c4:	200003a4 	.word	0x200003a4
 80010c8:	08007b08 	.word	0x08007b08
 80010cc:	200003a0 	.word	0x200003a0
 80010d0:	20000428 	.word	0x20000428
 80010d4:	08007b30 	.word	0x08007b30
 80010d8:	200004bc 	.word	0x200004bc

080010dc <HAL_UART_ErrorCallback>:

// DMA error callback
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001160 <HAL_UART_ErrorCallback+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d133      	bne.n	8001156 <HAL_UART_ErrorCallback+0x7a>
        printf("[BT] UART Error: 0x%08lX\r\n", huart->ErrorCode);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	4619      	mov	r1, r3
 80010f4:	481b      	ldr	r0, [pc, #108]	@ (8001164 <HAL_UART_ErrorCallback+0x88>)
 80010f6:	f004 f835 	bl	8005164 <iprintf>

        // Clear error flags
        __HAL_UART_CLEAR_OREFLAG(huart);
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]
        __HAL_UART_CLEAR_NEFLAG(huart);
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
        __HAL_UART_CLEAR_FEFLAG(huart);
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
        __HAL_UART_CLEAR_PEFLAG(huart);
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]

        // Restart reception
        BT_ErrorHandler();
 8001152:	f7ff fd33 	bl	8000bbc <BT_ErrorHandler>
    }
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40004800 	.word	0x40004800
 8001164:	08007b54 	.word	0x08007b54

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b092      	sub	sp, #72	@ 0x48
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fdab 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f8c7 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f000 f9c9 	bl	800150c <MX_GPIO_Init>
  MX_DMA_Init();
 800117a:	f000 f9a1 	bl	80014c0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800117e:	f000 f975 	bl	800146c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001182:	f000 f8fb 	bl	800137c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001186:	f000 f947 	bl	8001418 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize HC-05 Bluetooth module */
  if (BT_Init(&huart3) != BT_OK) {
 800118a:	4850      	ldr	r0, [pc, #320]	@ (80012cc <main+0x164>)
 800118c:	f7ff fc7c 	bl	8000a88 <BT_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <main+0x32>
    Error_Handler();
 8001196:	f000 fb17 	bl	80017c8 <Error_Handler>
  }

  // Start timer for periodic data transmission
  HAL_TIM_Base_Start(&htim2);
 800119a:	484d      	ldr	r0, [pc, #308]	@ (80012d0 <main+0x168>)
 800119c:	f001 ffe0 	bl	8003160 <HAL_TIM_Base_Start>

  // Initial system status update
  UpdateSystemStatus();
 80011a0:	f000 fa6c 	bl	800167c <UpdateSystemStatus>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   // Heartbeat with proper static variable handling
	    static uint32_t last_heartbeat = 0;
	    if(HAL_GetTick() - last_heartbeat >= 1000) {
 80011a4:	f000 fde8 	bl	8001d78 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b4a      	ldr	r3, [pc, #296]	@ (80012d4 <main+0x16c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011b4:	d314      	bcc.n	80011e0 <main+0x78>
	        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ba:	4847      	ldr	r0, [pc, #284]	@ (80012d8 <main+0x170>)
 80011bc:	f001 fb56 	bl	800286c <HAL_GPIO_TogglePin>
	        last_heartbeat = HAL_GetTick();
 80011c0:	f000 fdda 	bl	8001d78 <HAL_GetTick>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a43      	ldr	r2, [pc, #268]	@ (80012d4 <main+0x16c>)
 80011c8:	6013      	str	r3, [r2, #0]
	        printf("[SYS] Heartbeat %lu\r\n", HAL_GetTick()/1000);
 80011ca:	f000 fdd5 	bl	8001d78 <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a42      	ldr	r2, [pc, #264]	@ (80012dc <main+0x174>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	099b      	lsrs	r3, r3, #6
 80011d8:	4619      	mov	r1, r3
 80011da:	4841      	ldr	r0, [pc, #260]	@ (80012e0 <main+0x178>)
 80011dc:	f003 ffc2 	bl	8005164 <iprintf>
	    }

	    // Handle LED blinking for command reception feedback
	    if(BT_ShouldBlinkLED()) {
 80011e0:	f7ff fef6 	bl	8000fd0 <BT_ShouldBlinkLED>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d017      	beq.n	800121a <main+0xb2>
	        // Quick blink to indicate command received
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f0:	4839      	ldr	r0, [pc, #228]	@ (80012d8 <main+0x170>)
 80011f2:	f001 fb23 	bl	800283c <HAL_GPIO_WritePin>
	        HAL_Delay(50);
 80011f6:	2032      	movs	r0, #50	@ 0x32
 80011f8:	f000 fdc8 	bl	8001d8c <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001202:	4835      	ldr	r0, [pc, #212]	@ (80012d8 <main+0x170>)
 8001204:	f001 fb1a 	bl	800283c <HAL_GPIO_WritePin>
	        HAL_Delay(50);
 8001208:	2032      	movs	r0, #50	@ 0x32
 800120a:	f000 fdbf 	bl	8001d8c <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001214:	4830      	ldr	r0, [pc, #192]	@ (80012d8 <main+0x170>)
 8001216:	f001 fb11 	bl	800283c <HAL_GPIO_WritePin>
	    }

	    // Command processing with better error handling
	    if(BT_IsCommandReceived()) {
 800121a:	f7ff fcfd 	bl	8000c18 <BT_IsCommandReceived>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01e      	beq.n	8001262 <main+0xfa>
	        char cmd[COMMAND_BUFFER_SIZE];
	        BT_StatusTypeDef status = BT_ReceiveCommand(cmd, 10); // Short timeout
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	210a      	movs	r1, #10
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fd11 	bl	8000c50 <BT_ReceiveCommand>
 800122e:	4603      	mov	r3, r0
 8001230:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	        if(status == BT_OK) {
 8001234:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <main+0xe8>
	            printf("[CMD] Processing: %s\r\n", cmd);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	4828      	ldr	r0, [pc, #160]	@ (80012e4 <main+0x17c>)
 8001242:	f003 ff8f 	bl	8005164 <iprintf>
	            ProcessReceivedCommand(cmd);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f9cb 	bl	80015e4 <ProcessReceivedCommand>
 800124e:	e006      	b.n	800125e <main+0xf6>
	        } else if(status == BT_TIMEOUT) {
 8001250:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001254:	2b03      	cmp	r3, #3
 8001256:	d102      	bne.n	800125e <main+0xf6>
	            printf("[CMD] Timeout waiting for command\r\n");
 8001258:	4823      	ldr	r0, [pc, #140]	@ (80012e8 <main+0x180>)
 800125a:	f003 ffeb 	bl	8005234 <puts>
	        }

	        BT_ClearCommandFlag();
 800125e:	f7ff fce7 	bl	8000c30 <BT_ClearCommandFlag>
	    }

	    // Telemetry transmission
	    static uint32_t last_telemetry = 0;
	    if(HAL_GetTick() - last_telemetry >= 10000) {
 8001262:	f000 fd89 	bl	8001d78 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <main+0x184>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001272:	4293      	cmp	r3, r2
 8001274:	d925      	bls.n	80012c2 <main+0x15a>
	        printf("[SYS] Sending telemetry...\r\n");
 8001276:	481e      	ldr	r0, [pc, #120]	@ (80012f0 <main+0x188>)
 8001278:	f003 ffdc 	bl	8005234 <puts>
	        UpdateSystemStatus();
 800127c:	f000 f9fe 	bl	800167c <UpdateSystemStatus>

	        BT_StatusTypeDef status = BT_SendJSON(&telemetry);
 8001280:	481c      	ldr	r0, [pc, #112]	@ (80012f4 <main+0x18c>)
 8001282:	f7ff fc2f 	bl	8000ae4 <BT_SendJSON>
 8001286:	4603      	mov	r3, r0
 8001288:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	        if(status == BT_OK) {
 800128c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <main+0x134>
	            printf("[SYS] Telemetry sent successfully\r\n");
 8001294:	4818      	ldr	r0, [pc, #96]	@ (80012f8 <main+0x190>)
 8001296:	f003 ffcd 	bl	8005234 <puts>
 800129a:	e00d      	b.n	80012b8 <main+0x150>
	        } else if(status == BT_BUSY) {
 800129c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d103      	bne.n	80012ac <main+0x144>
	            printf("[WARN] UART busy, skipping this telemetry cycle\r\n");
 80012a4:	4815      	ldr	r0, [pc, #84]	@ (80012fc <main+0x194>)
 80012a6:	f003 ffc5 	bl	8005234 <puts>
 80012aa:	e005      	b.n	80012b8 <main+0x150>
	        } else {
	            printf("[ERR] Telemetry send failed! Status: %d\r\n", status);
 80012ac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80012b0:	4619      	mov	r1, r3
 80012b2:	4813      	ldr	r0, [pc, #76]	@ (8001300 <main+0x198>)
 80012b4:	f003 ff56 	bl	8005164 <iprintf>
	        }
	        last_telemetry = HAL_GetTick();
 80012b8:	f000 fd5e 	bl	8001d78 <HAL_GetTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <main+0x184>)
 80012c0:	6013      	str	r3, [r2, #0]
	    }
	    HAL_Delay(10);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f000 fd62 	bl	8001d8c <HAL_Delay>
  {
 80012c8:	e76c      	b.n	80011a4 <main+0x3c>
 80012ca:	bf00      	nop
 80012cc:	200004bc 	.word	0x200004bc
 80012d0:	2000042c 	.word	0x2000042c
 80012d4:	2000058c 	.word	0x2000058c
 80012d8:	40011000 	.word	0x40011000
 80012dc:	10624dd3 	.word	0x10624dd3
 80012e0:	08007b70 	.word	0x08007b70
 80012e4:	08007b88 	.word	0x08007b88
 80012e8:	08007ba0 	.word	0x08007ba0
 80012ec:	20000590 	.word	0x20000590
 80012f0:	08007bc4 	.word	0x08007bc4
 80012f4:	20000000 	.word	0x20000000
 80012f8:	08007be0 	.word	0x08007be0
 80012fc:	08007c04 	.word	0x08007c04
 8001300:	08007c38 	.word	0x08007c38

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b090      	sub	sp, #64	@ 0x40
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	2228      	movs	r2, #40	@ 0x28
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f004 f8a2 	bl	800545c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001326:	2302      	movs	r3, #2
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132a:	2301      	movs	r3, #1
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132e:	2310      	movs	r3, #16
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fab0 	bl	80028a0 <HAL_RCC_OscConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001346:	f000 fa3f 	bl	80017c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fd1e 	bl	8002da4 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800136e:	f000 fa2b 	bl	80017c8 <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	3740      	adds	r7, #64	@ 0x40
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <MX_TIM2_Init+0x98>)
 800139a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800139e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <MX_TIM2_Init+0x98>)
 80013a2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <MX_TIM2_Init+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <MX_TIM2_Init+0x98>)
 80013b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <MX_TIM2_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <MX_TIM2_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013c2:	4814      	ldr	r0, [pc, #80]	@ (8001414 <MX_TIM2_Init+0x98>)
 80013c4:	f001 fe7c 	bl	80030c0 <HAL_TIM_Base_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013ce:	f000 f9fb 	bl	80017c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	480d      	ldr	r0, [pc, #52]	@ (8001414 <MX_TIM2_Init+0x98>)
 80013e0:	f001 ff08 	bl	80031f4 <HAL_TIM_ConfigClockSource>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013ea:	f000 f9ed 	bl	80017c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	@ (8001414 <MX_TIM2_Init+0x98>)
 80013fc:	f002 f8c6 	bl	800358c <HAL_TIMEx_MasterConfigSynchronization>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001406:	f000 f9df 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000042c 	.word	0x2000042c

08001418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <MX_USART2_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_USART2_UART_Init+0x4c>)
 8001450:	f002 f8fa 	bl	8003648 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 f9b5 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000474 	.word	0x20000474
 8001468:	40004400 	.word	0x40004400

0800146c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_USART3_UART_Init+0x4c>)
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <MX_USART3_UART_Init+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <MX_USART3_UART_Init+0x4c>)
 8001478:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800147c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_USART3_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_USART3_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_USART3_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_USART3_UART_Init+0x4c>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_USART3_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_USART3_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_USART3_UART_Init+0x4c>)
 80014a4:	f002 f8d0 	bl	8003648 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014ae:	f000 f98b 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200004bc 	.word	0x200004bc
 80014bc:	40004800 	.word	0x40004800

080014c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <MX_DMA_Init+0x48>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001508 <MX_DMA_Init+0x48>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6153      	str	r3, [r2, #20]
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <MX_DMA_Init+0x48>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	200c      	movs	r0, #12
 80014e4:	f000 fd4d 	bl	8001f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014e8:	200c      	movs	r0, #12
 80014ea:	f000 fd66 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	200d      	movs	r0, #13
 80014f4:	f000 fd45 	bl	8001f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014f8:	200d      	movs	r0, #13
 80014fa:	f000 fd5e 	bl	8001fba <HAL_NVIC_EnableIRQ>

}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <MX_GPIO_Init+0xcc>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a2c      	ldr	r2, [pc, #176]	@ (80015d8 <MX_GPIO_Init+0xcc>)
 8001526:	f043 0310 	orr.w	r3, r3, #16
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <MX_GPIO_Init+0xcc>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <MX_GPIO_Init+0xcc>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a26      	ldr	r2, [pc, #152]	@ (80015d8 <MX_GPIO_Init+0xcc>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <MX_GPIO_Init+0xcc>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <MX_GPIO_Init+0xcc>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a20      	ldr	r2, [pc, #128]	@ (80015d8 <MX_GPIO_Init+0xcc>)
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <MX_GPIO_Init+0xcc>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800156e:	481b      	ldr	r0, [pc, #108]	@ (80015dc <MX_GPIO_Init+0xd0>)
 8001570:	f001 f964 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2101      	movs	r1, #1
 8001578:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <MX_GPIO_Init+0xd4>)
 800157a:	f001 f95f 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800157e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2302      	movs	r3, #2
 800158e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	4811      	ldr	r0, [pc, #68]	@ (80015dc <MX_GPIO_Init+0xd0>)
 8001598:	f000 ffcc 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800159c:	2301      	movs	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4619      	mov	r1, r3
 80015b2:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <MX_GPIO_Init+0xd4>)
 80015b4:	f000 ffbe 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_GPIO_Init+0xd4>)
 80015cc:	f000 ffb2 	bl	8002534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40011000 	.word	0x40011000
 80015e0:	40010800 	.word	0x40010800

080015e4 <ProcessReceivedCommand>:

/* USER CODE BEGIN 4 */
void ProcessReceivedCommand(const char* command) {
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    // Simple JSON parser for our specific command
    const char* pattern = "\"last_command_button\":\"";
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <ProcessReceivedCommand+0x80>)
 80015ee:	617b      	str	r3, [r7, #20]
    char* start = strstr(command, pattern);
 80015f0:	6979      	ldr	r1, [r7, #20]
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f003 ff5a 	bl	80054ac <strstr>
 80015f8:	6138      	str	r0, [r7, #16]

    if (start) {
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d029      	beq.n	8001654 <ProcessReceivedCommand+0x70>
        start += strlen(pattern); // Move to value
 8001600:	6978      	ldr	r0, [r7, #20]
 8001602:	f7fe fda5 	bl	8000150 <strlen>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4413      	add	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        char* end = strchr(start, '"');
 800160e:	2122      	movs	r1, #34	@ 0x22
 8001610:	6938      	ldr	r0, [r7, #16]
 8001612:	f003 ff2b 	bl	800546c <strchr>
 8001616:	60f8      	str	r0, [r7, #12]
        if (end && (end - start) < sizeof(telemetry.last_command_button)) {
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01a      	beq.n	8001654 <ProcessReceivedCommand+0x70>
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d815      	bhi.n	8001654 <ProcessReceivedCommand+0x70>
            // Copy the command value
            strncpy(telemetry.last_command_button, start, end - start);
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	461a      	mov	r2, r3
 8001630:	6939      	ldr	r1, [r7, #16]
 8001632:	480d      	ldr	r0, [pc, #52]	@ (8001668 <ProcessReceivedCommand+0x84>)
 8001634:	f003 ff27 	bl	8005486 <strncpy>
            telemetry.last_command_button[end - start] = '\0';
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	4a0b      	ldr	r2, [pc, #44]	@ (800166c <ProcessReceivedCommand+0x88>)
 8001640:	4413      	add	r3, r2
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

            // Update status
            strcpy(telemetry.command_status, "CMD_RECEIVED");
 8001648:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <ProcessReceivedCommand+0x8c>)
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <ProcessReceivedCommand+0x90>)
 800164c:	4614      	mov	r4, r2
 800164e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001650:	c407      	stmia	r4!, {r0, r1, r2}
 8001652:	7023      	strb	r3, [r4, #0]

            // Visual feedback (LED already toggled in callback)
        }
    }
    printf("Received: %s\n", command); // Add to ProcessReceivedCommand
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4808      	ldr	r0, [pc, #32]	@ (8001678 <ProcessReceivedCommand+0x94>)
 8001658:	f003 fd84 	bl	8005164 <iprintf>
}
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}
 8001664:	08007c64 	.word	0x08007c64
 8001668:	20000160 	.word	0x20000160
 800166c:	20000000 	.word	0x20000000
 8001670:	20000190 	.word	0x20000190
 8001674:	08007c7c 	.word	0x08007c7c
 8001678:	08007c8c 	.word	0x08007c8c

0800167c <UpdateSystemStatus>:

void UpdateSystemStatus(void) {
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b087      	sub	sp, #28
 8001680:	af02      	add	r7, sp, #8
  // Here you would update your telemetry data from sensors
  // For now, we'll just update the timestamp

  // Update timestamp (example format)
  uint32_t tick = HAL_GetTick();
 8001682:	f000 fb79 	bl	8001d78 <HAL_GetTick>
 8001686:	60f8      	str	r0, [r7, #12]
  uint32_t seconds = tick / 1000;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4a30      	ldr	r2, [pc, #192]	@ (800174c <UpdateSystemStatus+0xd0>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	60bb      	str	r3, [r7, #8]
  uint32_t minutes = seconds / 60;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4a2e      	ldr	r2, [pc, #184]	@ (8001750 <UpdateSystemStatus+0xd4>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	095b      	lsrs	r3, r3, #5
 800169e:	607b      	str	r3, [r7, #4]
  uint32_t hours = minutes / 60;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001750 <UpdateSystemStatus+0xd4>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	603b      	str	r3, [r7, #0]
  snprintf(telemetry.timestamp, sizeof(telemetry.timestamp),
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <UpdateSystemStatus+0xd8>)
 80016b0:	fba3 1302 	umull	r1, r3, r3, r2
 80016b4:	0918      	lsrs	r0, r3, #4
 80016b6:	4603      	mov	r3, r0
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4403      	add	r3, r0
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	1ad0      	subs	r0, r2, r3
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <UpdateSystemStatus+0xd4>)
 80016c4:	fba3 2301 	umull	r2, r3, r3, r1
 80016c8:	095a      	lsrs	r2, r3, #5
 80016ca:	4613      	mov	r3, r2
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	1aca      	subs	r2, r1, r3
 80016d4:	68bc      	ldr	r4, [r7, #8]
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <UpdateSystemStatus+0xd4>)
 80016d8:	fba3 1304 	umull	r1, r3, r3, r4
 80016dc:	0959      	lsrs	r1, r3, #5
 80016de:	460b      	mov	r3, r1
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	1a5b      	subs	r3, r3, r1
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	1ae1      	subs	r1, r4, r3
 80016e8:	9101      	str	r1, [sp, #4]
 80016ea:	9200      	str	r2, [sp, #0]
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001758 <UpdateSystemStatus+0xdc>)
 80016f0:	2114      	movs	r1, #20
 80016f2:	481a      	ldr	r0, [pc, #104]	@ (800175c <UpdateSystemStatus+0xe0>)
 80016f4:	f003 fda6 	bl	8005244 <sniprintf>
           "2025-07-03 %02lu:%02lu:%02lu",
           hours % 24, minutes % 60, seconds % 60);

  // Update last command time
  snprintf(telemetry.last_command_time, sizeof(telemetry.last_command_time),
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <UpdateSystemStatus+0xd8>)
 80016fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001700:	0918      	lsrs	r0, r3, #4
 8001702:	4603      	mov	r3, r0
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4403      	add	r3, r0
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	1ad0      	subs	r0, r2, r3
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <UpdateSystemStatus+0xd4>)
 8001710:	fba3 2301 	umull	r2, r3, r3, r1
 8001714:	095a      	lsrs	r2, r3, #5
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	1aca      	subs	r2, r1, r3
 8001720:	68bc      	ldr	r4, [r7, #8]
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <UpdateSystemStatus+0xd4>)
 8001724:	fba3 1304 	umull	r1, r3, r3, r4
 8001728:	0959      	lsrs	r1, r3, #5
 800172a:	460b      	mov	r3, r1
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	1a5b      	subs	r3, r3, r1
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	1ae1      	subs	r1, r4, r3
 8001734:	9101      	str	r1, [sp, #4]
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	4603      	mov	r3, r0
 800173a:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <UpdateSystemStatus+0xe4>)
 800173c:	2120      	movs	r1, #32
 800173e:	4809      	ldr	r0, [pc, #36]	@ (8001764 <UpdateSystemStatus+0xe8>)
 8001740:	f003 fd80 	bl	8005244 <sniprintf>

  // You would add your actual sensor readings here
  // Example:
  // telemetry.adcs.temperature = ReadTemperatureSensor();
  // telemetry.eps.battery_percentage = ReadBatteryLevel();
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	10624dd3 	.word	0x10624dd3
 8001750:	88888889 	.word	0x88888889
 8001754:	aaaaaaab 	.word	0xaaaaaaab
 8001758:	08007c9c 	.word	0x08007c9c
 800175c:	20000000 	.word	0x20000000
 8001760:	08007cbc 	.word	0x08007cbc
 8001764:	20000170 	.word	0x20000170

08001768 <_write>:
// Redirect printf to USART2 (for debug)
int _write(int file, char *ptr, int len) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
    // Add carriage return before newline
    for(int i=0; i<len; i++) {
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e01b      	b.n	80017b2 <_write+0x4a>
        if(ptr[i] == '\n') {
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b0a      	cmp	r3, #10
 8001784:	d109      	bne.n	800179a <_write+0x32>
            char cr = '\r';
 8001786:	230d      	movs	r3, #13
 8001788:	74fb      	strb	r3, [r7, #19]
            HAL_UART_Transmit(&huart2, (uint8_t*)&cr, 1, HAL_MAX_DELAY);
 800178a:	f107 0113 	add.w	r1, r7, #19
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	2201      	movs	r2, #1
 8001794:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <_write+0x5c>)
 8001796:	f001 ffa7 	bl	80036e8 <HAL_UART_Transmit>
        }
        HAL_UART_Transmit(&huart2, (uint8_t*)&ptr[i], 1, HAL_MAX_DELAY);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	18d1      	adds	r1, r2, r3
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
 80017a4:	2201      	movs	r2, #1
 80017a6:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <_write+0x5c>)
 80017a8:	f001 ff9e 	bl	80036e8 <HAL_UART_Transmit>
    for(int i=0; i<len; i++) {
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dbdf      	blt.n	800177a <_write+0x12>
    }
    return len;
 80017ba:	687b      	ldr	r3, [r7, #4]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000474 	.word	0x20000474

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <Error_Handler+0x8>

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <HAL_MspInit+0x5c>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a14      	ldr	r2, [pc, #80]	@ (8001830 <HAL_MspInit+0x5c>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <HAL_MspInit+0x5c>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <HAL_MspInit+0x5c>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <HAL_MspInit+0x5c>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <HAL_MspInit+0x5c>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_MspInit+0x60>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_MspInit+0x60>)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001848:	d10b      	bne.n	8001862 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_TIM_Base_MspInit+0x34>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_TIM_Base_MspInit+0x34>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_TIM_Base_MspInit+0x34>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a63      	ldr	r2, [pc, #396]	@ (8001a18 <HAL_UART_MspInit+0x1a8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d130      	bne.n	80018f2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001890:	4b62      	ldr	r3, [pc, #392]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	4a61      	ldr	r2, [pc, #388]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 8001896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800189a:	61d3      	str	r3, [r2, #28]
 800189c:	4b5f      	ldr	r3, [pc, #380]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a5b      	ldr	r2, [pc, #364]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b59      	ldr	r3, [pc, #356]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018c0:	2304      	movs	r3, #4
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4853      	ldr	r0, [pc, #332]	@ (8001a20 <HAL_UART_MspInit+0x1b0>)
 80018d4:	f000 fe2e 	bl	8002534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018d8:	2308      	movs	r3, #8
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	4619      	mov	r1, r3
 80018ea:	484d      	ldr	r0, [pc, #308]	@ (8001a20 <HAL_UART_MspInit+0x1b0>)
 80018ec:	f000 fe22 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018f0:	e08d      	b.n	8001a0e <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001a24 <HAL_UART_MspInit+0x1b4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	f040 8088 	bne.w	8001a0e <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018fe:	4b47      	ldr	r3, [pc, #284]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a46      	ldr	r2, [pc, #280]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b44      	ldr	r3, [pc, #272]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b41      	ldr	r3, [pc, #260]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	4a40      	ldr	r2, [pc, #256]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6193      	str	r3, [r2, #24]
 8001922:	4b3e      	ldr	r3, [pc, #248]	@ (8001a1c <HAL_UART_MspInit+0x1ac>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800192e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f107 0318 	add.w	r3, r7, #24
 8001940:	4619      	mov	r1, r3
 8001942:	4839      	ldr	r0, [pc, #228]	@ (8001a28 <HAL_UART_MspInit+0x1b8>)
 8001944:	f000 fdf6 	bl	8002534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001948:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	4619      	mov	r1, r3
 800195c:	4832      	ldr	r0, [pc, #200]	@ (8001a28 <HAL_UART_MspInit+0x1b8>)
 800195e:	f000 fde9 	bl	8002534 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001962:	4b32      	ldr	r3, [pc, #200]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 8001964:	4a32      	ldr	r2, [pc, #200]	@ (8001a30 <HAL_UART_MspInit+0x1c0>)
 8001966:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001968:	4b30      	ldr	r3, [pc, #192]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 800196a:	2200      	movs	r2, #0
 800196c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 8001976:	2280      	movs	r2, #128	@ 0x80
 8001978:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001980:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001986:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 8001988:	2220      	movs	r2, #32
 800198a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 800198e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001992:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001994:	4825      	ldr	r0, [pc, #148]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 8001996:	f000 fb2b 	bl	8001ff0 <HAL_DMA_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80019a0:	f7ff ff12 	bl	80017c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a21      	ldr	r2, [pc, #132]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 80019a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019aa:	4a20      	ldr	r2, [pc, #128]	@ (8001a2c <HAL_UART_MspInit+0x1bc>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80019b0:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019b2:	4a21      	ldr	r2, [pc, #132]	@ (8001a38 <HAL_UART_MspInit+0x1c8>)
 80019b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019b8:	2210      	movs	r2, #16
 80019ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019c4:	2280      	movs	r2, #128	@ 0x80
 80019c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019e2:	4814      	ldr	r0, [pc, #80]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019e4:	f000 fb04 	bl	8001ff0 <HAL_DMA_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_UART_MspInit+0x182>
      Error_Handler();
 80019ee:	f7ff feeb 	bl	80017c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80019f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a34 <HAL_UART_MspInit+0x1c4>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2027      	movs	r0, #39	@ 0x27
 8001a04:	f000 fabd 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a08:	2027      	movs	r0, #39	@ 0x27
 8001a0a:	f000 fad6 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	@ 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40004800 	.word	0x40004800
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	20000504 	.word	0x20000504
 8001a30:	40020030 	.word	0x40020030
 8001a34:	20000548 	.word	0x20000548
 8001a38:	4002001c 	.word	0x4002001c

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
       // Rapid LED blinking to indicate crash
       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a44:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <NMI_Handler+0x18>)
 8001a46:	f000 ff11 	bl	800286c <HAL_GPIO_TogglePin>
       HAL_Delay(100);
 8001a4a:	2064      	movs	r0, #100	@ 0x64
 8001a4c:	f000 f99e 	bl	8001d8c <HAL_Delay>
       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a50:	bf00      	nop
 8001a52:	e7f5      	b.n	8001a40 <NMI_Handler+0x4>
 8001a54:	40011000 	.word	0x40011000

08001a58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    printf("[CRIT] HardFault detected!\r\n");
 8001a5c:	4806      	ldr	r0, [pc, #24]	@ (8001a78 <HardFault_Handler+0x20>)
 8001a5e:	f003 fbe9 	bl	8005234 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
      // Rapid LED blinking to indicate crash
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a66:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <HardFault_Handler+0x24>)
 8001a68:	f000 ff00 	bl	800286c <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8001a6c:	2064      	movs	r0, #100	@ 0x64
 8001a6e:	f000 f98d 	bl	8001d8c <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a72:	bf00      	nop
 8001a74:	e7f5      	b.n	8001a62 <HardFault_Handler+0xa>
 8001a76:	bf00      	nop
 8001a78:	08007ce0 	.word	0x08007ce0
 8001a7c:	40011000 	.word	0x40011000

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
    printf("[CRIT] Memory Manager Fault!\r\n");
 8001a84:	4806      	ldr	r0, [pc, #24]	@ (8001aa0 <MemManage_Handler+0x20>)
 8001a86:	f003 fbd5 	bl	8005234 <puts>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a8e:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MemManage_Handler+0x24>)
 8001a90:	f000 feec 	bl	800286c <HAL_GPIO_TogglePin>
      HAL_Delay(200);
 8001a94:	20c8      	movs	r0, #200	@ 0xc8
 8001a96:	f000 f979 	bl	8001d8c <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a9a:	bf00      	nop
 8001a9c:	e7f5      	b.n	8001a8a <MemManage_Handler+0xa>
 8001a9e:	bf00      	nop
 8001aa0:	08007cfc 	.word	0x08007cfc
 8001aa4:	40011000 	.word	0x40011000

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f938 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <DMA1_Channel2_IRQHandler+0x10>)
 8001aee:	f000 fbed 	bl	80022cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000548 	.word	0x20000548

08001afc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <DMA1_Channel3_IRQHandler+0x10>)
 8001b02:	f000 fbe3 	bl	80022cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000504 	.word	0x20000504

08001b10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <USART3_IRQHandler+0x10>)
 8001b16:	f001 ff17 	bl	8003948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200004bc 	.word	0x200004bc

08001b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <_kill>:

int _kill(int pid, int sig)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3c:	f003 fd16 	bl	800556c <__errno>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2216      	movs	r2, #22
 8001b44:	601a      	str	r2, [r3, #0]
  return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_exit>:

void _exit (int status)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffe7 	bl	8001b32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <_exit+0x12>

08001b68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e00a      	b.n	8001b90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b7a:	f3af 8000 	nop.w
 8001b7e:	4601      	mov	r1, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	60ba      	str	r2, [r7, #8]
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf0      	blt.n	8001b7a <_read+0x12>
  }

  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <_isatty>:

int _isatty(int file)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
	...

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f003 fc9a 	bl	800556c <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	@ (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20005000 	.word	0x20005000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	20000594 	.word	0x20000594
 8001c6c:	200006e8 	.word	0x200006e8

08001c70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c7c:	f7ff fff8 	bl	8001c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c82:	490c      	ldr	r1, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c84:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c98:	4c09      	ldr	r4, [pc, #36]	@ (8001cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f003 fc67 	bl	8005578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7ff fa5d 	bl	8001168 <main>
  bx lr
 8001cae:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	20000384 	.word	0x20000384
  ldr r2, =_sidata
 8001cb8:	080080c8 	.word	0x080080c8
  ldr r2, =_sbss
 8001cbc:	20000384 	.word	0x20000384
  ldr r4, =_ebss
 8001cc0:	200006e8 	.word	0x200006e8

08001cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_2_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <HAL_Init+0x28>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <HAL_Init+0x28>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f947 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f000 f808 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff fd76 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f95f 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 f927 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	@ (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200001b0 	.word	0x200001b0
 8001d4c:	200001b8 	.word	0x200001b8
 8001d50:	200001b4 	.word	0x200001b4

08001d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_IncTick+0x1c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a03      	ldr	r2, [pc, #12]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	200001b8 	.word	0x200001b8
 8001d74:	20000598 	.word	0x20000598

08001d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	@ (8001d88 <HAL_GetTick+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000598 	.word	0x20000598

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffe0 	bl	8001d78 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200001b8 	.word	0x200001b8

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4906      	ldr	r1, [pc, #24]	@ (8001e6c <__NVIC_EnableIRQ+0x34>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	@ (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	@ 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff90 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff2d 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff42 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff90 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5f 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff35 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e043      	b.n	800208e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <HAL_DMA_Init+0xa8>)
 800200e:	4413      	add	r3, r2
 8002010:	4a22      	ldr	r2, [pc, #136]	@ (800209c <HAL_DMA_Init+0xac>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	009a      	lsls	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1f      	ldr	r2, [pc, #124]	@ (80020a0 <HAL_DMA_Init+0xb0>)
 8002022:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800203a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800203e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	bffdfff8 	.word	0xbffdfff8
 800209c:	cccccccd 	.word	0xcccccccd
 80020a0:	40020000 	.word	0x40020000

080020a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_DMA_Start_IT+0x20>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e04b      	b.n	800215c <HAL_DMA_Start_IT+0xb8>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d13a      	bne.n	800214e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0201 	bic.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f9eb 	bl	80024d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 020e 	orr.w	r2, r2, #14
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e00f      	b.n	800213c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0204 	bic.w	r2, r2, #4
 800212a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 020a 	orr.w	r2, r2, #10
 800213a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e005      	b.n	800215a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800215a:	7dfb      	ldrb	r3, [r7, #23]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d008      	beq.n	800218e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2204      	movs	r2, #4
 8002180:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e020      	b.n	80021d0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 020e 	bic.w	r2, r2, #14
 800219c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b6:	2101      	movs	r1, #1
 80021b8:	fa01 f202 	lsl.w	r2, r1, r2
 80021bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d005      	beq.n	8002200 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2204      	movs	r2, #4
 80021f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	e051      	b.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 020e 	bic.w	r2, r2, #14
 800220e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a22      	ldr	r2, [pc, #136]	@ (80022b0 <HAL_DMA_Abort_IT+0xd4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d029      	beq.n	800227e <HAL_DMA_Abort_IT+0xa2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a21      	ldr	r2, [pc, #132]	@ (80022b4 <HAL_DMA_Abort_IT+0xd8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_Abort_IT+0x9e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1f      	ldr	r2, [pc, #124]	@ (80022b8 <HAL_DMA_Abort_IT+0xdc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01a      	beq.n	8002274 <HAL_DMA_Abort_IT+0x98>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1e      	ldr	r2, [pc, #120]	@ (80022bc <HAL_DMA_Abort_IT+0xe0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d012      	beq.n	800226e <HAL_DMA_Abort_IT+0x92>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <HAL_DMA_Abort_IT+0xe4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00a      	beq.n	8002268 <HAL_DMA_Abort_IT+0x8c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1b      	ldr	r2, [pc, #108]	@ (80022c4 <HAL_DMA_Abort_IT+0xe8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d102      	bne.n	8002262 <HAL_DMA_Abort_IT+0x86>
 800225c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002260:	e00e      	b.n	8002280 <HAL_DMA_Abort_IT+0xa4>
 8002262:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002266:	e00b      	b.n	8002280 <HAL_DMA_Abort_IT+0xa4>
 8002268:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800226c:	e008      	b.n	8002280 <HAL_DMA_Abort_IT+0xa4>
 800226e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002272:	e005      	b.n	8002280 <HAL_DMA_Abort_IT+0xa4>
 8002274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002278:	e002      	b.n	8002280 <HAL_DMA_Abort_IT+0xa4>
 800227a:	2310      	movs	r3, #16
 800227c:	e000      	b.n	8002280 <HAL_DMA_Abort_IT+0xa4>
 800227e:	2301      	movs	r3, #1
 8002280:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <HAL_DMA_Abort_IT+0xec>)
 8002282:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
    } 
  }
  return status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40020008 	.word	0x40020008
 80022b4:	4002001c 	.word	0x4002001c
 80022b8:	40020030 	.word	0x40020030
 80022bc:	40020044 	.word	0x40020044
 80022c0:	40020058 	.word	0x40020058
 80022c4:	4002006c 	.word	0x4002006c
 80022c8:	40020000 	.word	0x40020000

080022cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	2204      	movs	r2, #4
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d04f      	beq.n	8002394 <HAL_DMA_IRQHandler+0xc8>
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d04a      	beq.n	8002394 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b00      	cmp	r3, #0
 800230a:	d107      	bne.n	800231c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0204 	bic.w	r2, r2, #4
 800231a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a66      	ldr	r2, [pc, #408]	@ (80024bc <HAL_DMA_IRQHandler+0x1f0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d029      	beq.n	800237a <HAL_DMA_IRQHandler+0xae>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a65      	ldr	r2, [pc, #404]	@ (80024c0 <HAL_DMA_IRQHandler+0x1f4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d022      	beq.n	8002376 <HAL_DMA_IRQHandler+0xaa>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a63      	ldr	r2, [pc, #396]	@ (80024c4 <HAL_DMA_IRQHandler+0x1f8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01a      	beq.n	8002370 <HAL_DMA_IRQHandler+0xa4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a62      	ldr	r2, [pc, #392]	@ (80024c8 <HAL_DMA_IRQHandler+0x1fc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d012      	beq.n	800236a <HAL_DMA_IRQHandler+0x9e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a60      	ldr	r2, [pc, #384]	@ (80024cc <HAL_DMA_IRQHandler+0x200>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00a      	beq.n	8002364 <HAL_DMA_IRQHandler+0x98>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a5f      	ldr	r2, [pc, #380]	@ (80024d0 <HAL_DMA_IRQHandler+0x204>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d102      	bne.n	800235e <HAL_DMA_IRQHandler+0x92>
 8002358:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800235c:	e00e      	b.n	800237c <HAL_DMA_IRQHandler+0xb0>
 800235e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002362:	e00b      	b.n	800237c <HAL_DMA_IRQHandler+0xb0>
 8002364:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002368:	e008      	b.n	800237c <HAL_DMA_IRQHandler+0xb0>
 800236a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800236e:	e005      	b.n	800237c <HAL_DMA_IRQHandler+0xb0>
 8002370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002374:	e002      	b.n	800237c <HAL_DMA_IRQHandler+0xb0>
 8002376:	2340      	movs	r3, #64	@ 0x40
 8002378:	e000      	b.n	800237c <HAL_DMA_IRQHandler+0xb0>
 800237a:	2304      	movs	r3, #4
 800237c:	4a55      	ldr	r2, [pc, #340]	@ (80024d4 <HAL_DMA_IRQHandler+0x208>)
 800237e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8094 	beq.w	80024b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002392:	e08e      	b.n	80024b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	2202      	movs	r2, #2
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d056      	beq.n	8002452 <HAL_DMA_IRQHandler+0x186>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d051      	beq.n	8002452 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 020a 	bic.w	r2, r2, #10
 80023ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a38      	ldr	r2, [pc, #224]	@ (80024bc <HAL_DMA_IRQHandler+0x1f0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d029      	beq.n	8002432 <HAL_DMA_IRQHandler+0x166>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a37      	ldr	r2, [pc, #220]	@ (80024c0 <HAL_DMA_IRQHandler+0x1f4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <HAL_DMA_IRQHandler+0x162>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a35      	ldr	r2, [pc, #212]	@ (80024c4 <HAL_DMA_IRQHandler+0x1f8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01a      	beq.n	8002428 <HAL_DMA_IRQHandler+0x15c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a34      	ldr	r2, [pc, #208]	@ (80024c8 <HAL_DMA_IRQHandler+0x1fc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d012      	beq.n	8002422 <HAL_DMA_IRQHandler+0x156>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a32      	ldr	r2, [pc, #200]	@ (80024cc <HAL_DMA_IRQHandler+0x200>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00a      	beq.n	800241c <HAL_DMA_IRQHandler+0x150>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a31      	ldr	r2, [pc, #196]	@ (80024d0 <HAL_DMA_IRQHandler+0x204>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d102      	bne.n	8002416 <HAL_DMA_IRQHandler+0x14a>
 8002410:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002414:	e00e      	b.n	8002434 <HAL_DMA_IRQHandler+0x168>
 8002416:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800241a:	e00b      	b.n	8002434 <HAL_DMA_IRQHandler+0x168>
 800241c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002420:	e008      	b.n	8002434 <HAL_DMA_IRQHandler+0x168>
 8002422:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002426:	e005      	b.n	8002434 <HAL_DMA_IRQHandler+0x168>
 8002428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800242c:	e002      	b.n	8002434 <HAL_DMA_IRQHandler+0x168>
 800242e:	2320      	movs	r3, #32
 8002430:	e000      	b.n	8002434 <HAL_DMA_IRQHandler+0x168>
 8002432:	2302      	movs	r3, #2
 8002434:	4a27      	ldr	r2, [pc, #156]	@ (80024d4 <HAL_DMA_IRQHandler+0x208>)
 8002436:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d034      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002450:	e02f      	b.n	80024b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	2208      	movs	r2, #8
 8002458:	409a      	lsls	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d028      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x1e8>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d023      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 020e 	bic.w	r2, r2, #14
 800247a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f202 	lsl.w	r2, r1, r2
 800248a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
    }
  }
  return;
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
}
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40020008 	.word	0x40020008
 80024c0:	4002001c 	.word	0x4002001c
 80024c4:	40020030 	.word	0x40020030
 80024c8:	40020044 	.word	0x40020044
 80024cc:	40020058 	.word	0x40020058
 80024d0:	4002006c 	.word	0x4002006c
 80024d4:	40020000 	.word	0x40020000

080024d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ee:	2101      	movs	r1, #1
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d108      	bne.n	8002518 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002516:	e007      	b.n	8002528 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	60da      	str	r2, [r3, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
	...

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b08b      	sub	sp, #44	@ 0x2c
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	e169      	b.n	800281c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002548:	2201      	movs	r2, #1
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 8158 	bne.w	8002816 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a9a      	ldr	r2, [pc, #616]	@ (80027d4 <HAL_GPIO_Init+0x2a0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d05e      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 8002570:	4a98      	ldr	r2, [pc, #608]	@ (80027d4 <HAL_GPIO_Init+0x2a0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d875      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 8002576:	4a98      	ldr	r2, [pc, #608]	@ (80027d8 <HAL_GPIO_Init+0x2a4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d058      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 800257c:	4a96      	ldr	r2, [pc, #600]	@ (80027d8 <HAL_GPIO_Init+0x2a4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d86f      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 8002582:	4a96      	ldr	r2, [pc, #600]	@ (80027dc <HAL_GPIO_Init+0x2a8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d052      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 8002588:	4a94      	ldr	r2, [pc, #592]	@ (80027dc <HAL_GPIO_Init+0x2a8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d869      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 800258e:	4a94      	ldr	r2, [pc, #592]	@ (80027e0 <HAL_GPIO_Init+0x2ac>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d04c      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 8002594:	4a92      	ldr	r2, [pc, #584]	@ (80027e0 <HAL_GPIO_Init+0x2ac>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d863      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 800259a:	4a92      	ldr	r2, [pc, #584]	@ (80027e4 <HAL_GPIO_Init+0x2b0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d046      	beq.n	800262e <HAL_GPIO_Init+0xfa>
 80025a0:	4a90      	ldr	r2, [pc, #576]	@ (80027e4 <HAL_GPIO_Init+0x2b0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d85d      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 80025a6:	2b12      	cmp	r3, #18
 80025a8:	d82a      	bhi.n	8002600 <HAL_GPIO_Init+0xcc>
 80025aa:	2b12      	cmp	r3, #18
 80025ac:	d859      	bhi.n	8002662 <HAL_GPIO_Init+0x12e>
 80025ae:	a201      	add	r2, pc, #4	@ (adr r2, 80025b4 <HAL_GPIO_Init+0x80>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	0800262f 	.word	0x0800262f
 80025b8:	08002609 	.word	0x08002609
 80025bc:	0800261b 	.word	0x0800261b
 80025c0:	0800265d 	.word	0x0800265d
 80025c4:	08002663 	.word	0x08002663
 80025c8:	08002663 	.word	0x08002663
 80025cc:	08002663 	.word	0x08002663
 80025d0:	08002663 	.word	0x08002663
 80025d4:	08002663 	.word	0x08002663
 80025d8:	08002663 	.word	0x08002663
 80025dc:	08002663 	.word	0x08002663
 80025e0:	08002663 	.word	0x08002663
 80025e4:	08002663 	.word	0x08002663
 80025e8:	08002663 	.word	0x08002663
 80025ec:	08002663 	.word	0x08002663
 80025f0:	08002663 	.word	0x08002663
 80025f4:	08002663 	.word	0x08002663
 80025f8:	08002611 	.word	0x08002611
 80025fc:	08002625 	.word	0x08002625
 8002600:	4a79      	ldr	r2, [pc, #484]	@ (80027e8 <HAL_GPIO_Init+0x2b4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d013      	beq.n	800262e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002606:	e02c      	b.n	8002662 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	623b      	str	r3, [r7, #32]
          break;
 800260e:	e029      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	3304      	adds	r3, #4
 8002616:	623b      	str	r3, [r7, #32]
          break;
 8002618:	e024      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	3308      	adds	r3, #8
 8002620:	623b      	str	r3, [r7, #32]
          break;
 8002622:	e01f      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	330c      	adds	r3, #12
 800262a:	623b      	str	r3, [r7, #32]
          break;
 800262c:	e01a      	b.n	8002664 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002636:	2304      	movs	r3, #4
 8002638:	623b      	str	r3, [r7, #32]
          break;
 800263a:	e013      	b.n	8002664 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002644:	2308      	movs	r3, #8
 8002646:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	611a      	str	r2, [r3, #16]
          break;
 800264e:	e009      	b.n	8002664 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002650:	2308      	movs	r3, #8
 8002652:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	615a      	str	r2, [r3, #20]
          break;
 800265a:	e003      	b.n	8002664 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800265c:	2300      	movs	r3, #0
 800265e:	623b      	str	r3, [r7, #32]
          break;
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x130>
          break;
 8002662:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2bff      	cmp	r3, #255	@ 0xff
 8002668:	d801      	bhi.n	800266e <HAL_GPIO_Init+0x13a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	e001      	b.n	8002672 <HAL_GPIO_Init+0x13e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2bff      	cmp	r3, #255	@ 0xff
 8002678:	d802      	bhi.n	8002680 <HAL_GPIO_Init+0x14c>
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	e002      	b.n	8002686 <HAL_GPIO_Init+0x152>
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	3b08      	subs	r3, #8
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	210f      	movs	r1, #15
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	401a      	ands	r2, r3
 8002698:	6a39      	ldr	r1, [r7, #32]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	431a      	orrs	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80b1 	beq.w	8002816 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026b4:	4b4d      	ldr	r3, [pc, #308]	@ (80027ec <HAL_GPIO_Init+0x2b8>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a4c      	ldr	r2, [pc, #304]	@ (80027ec <HAL_GPIO_Init+0x2b8>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b4a      	ldr	r3, [pc, #296]	@ (80027ec <HAL_GPIO_Init+0x2b8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026cc:	4a48      	ldr	r2, [pc, #288]	@ (80027f0 <HAL_GPIO_Init+0x2bc>)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a40      	ldr	r2, [pc, #256]	@ (80027f4 <HAL_GPIO_Init+0x2c0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_GPIO_Init+0x1ec>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3f      	ldr	r2, [pc, #252]	@ (80027f8 <HAL_GPIO_Init+0x2c4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00d      	beq.n	800271c <HAL_GPIO_Init+0x1e8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3e      	ldr	r2, [pc, #248]	@ (80027fc <HAL_GPIO_Init+0x2c8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <HAL_GPIO_Init+0x1e4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a3d      	ldr	r2, [pc, #244]	@ (8002800 <HAL_GPIO_Init+0x2cc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_GPIO_Init+0x1e0>
 8002710:	2303      	movs	r3, #3
 8002712:	e006      	b.n	8002722 <HAL_GPIO_Init+0x1ee>
 8002714:	2304      	movs	r3, #4
 8002716:	e004      	b.n	8002722 <HAL_GPIO_Init+0x1ee>
 8002718:	2302      	movs	r3, #2
 800271a:	e002      	b.n	8002722 <HAL_GPIO_Init+0x1ee>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_GPIO_Init+0x1ee>
 8002720:	2300      	movs	r3, #0
 8002722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002724:	f002 0203 	and.w	r2, r2, #3
 8002728:	0092      	lsls	r2, r2, #2
 800272a:	4093      	lsls	r3, r2
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002732:	492f      	ldr	r1, [pc, #188]	@ (80027f0 <HAL_GPIO_Init+0x2bc>)
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d006      	beq.n	800275a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800274c:	4b2d      	ldr	r3, [pc, #180]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	492c      	ldr	r1, [pc, #176]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800275a:	4b2a      	ldr	r3, [pc, #168]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	43db      	mvns	r3, r3
 8002762:	4928      	ldr	r1, [pc, #160]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 8002764:	4013      	ands	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002774:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	4922      	ldr	r1, [pc, #136]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	60cb      	str	r3, [r1, #12]
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002782:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	43db      	mvns	r3, r3
 800278a:	491e      	ldr	r1, [pc, #120]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 800278c:	4013      	ands	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800279c:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4918      	ldr	r1, [pc, #96]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027aa:	4b16      	ldr	r3, [pc, #88]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	4914      	ldr	r1, [pc, #80]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d021      	beq.n	8002808 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	490e      	ldr	r1, [pc, #56]	@ (8002804 <HAL_GPIO_Init+0x2d0>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	e021      	b.n	8002816 <HAL_GPIO_Init+0x2e2>
 80027d2:	bf00      	nop
 80027d4:	10320000 	.word	0x10320000
 80027d8:	10310000 	.word	0x10310000
 80027dc:	10220000 	.word	0x10220000
 80027e0:	10210000 	.word	0x10210000
 80027e4:	10120000 	.word	0x10120000
 80027e8:	10110000 	.word	0x10110000
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40010000 	.word	0x40010000
 80027f4:	40010800 	.word	0x40010800
 80027f8:	40010c00 	.word	0x40010c00
 80027fc:	40011000 	.word	0x40011000
 8002800:	40011400 	.word	0x40011400
 8002804:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_GPIO_Init+0x304>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	43db      	mvns	r3, r3
 8002810:	4909      	ldr	r1, [pc, #36]	@ (8002838 <HAL_GPIO_Init+0x304>)
 8002812:	4013      	ands	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	3301      	adds	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	f47f ae8e 	bne.w	8002548 <HAL_GPIO_Init+0x14>
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	372c      	adds	r7, #44	@ 0x2c
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40010400 	.word	0x40010400

0800283c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
 8002848:	4613      	mov	r3, r2
 800284a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800284c:	787b      	ldrb	r3, [r7, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002858:	e003      	b.n	8002862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	041a      	lsls	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	611a      	str	r2, [r3, #16]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	43d9      	mvns	r1, r3
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	400b      	ands	r3, r1
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	611a      	str	r2, [r3, #16]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e272      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8087 	beq.w	80029ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c0:	4b92      	ldr	r3, [pc, #584]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d00c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028cc:	4b8f      	ldr	r3, [pc, #572]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d112      	bne.n	80028fe <HAL_RCC_OscConfig+0x5e>
 80028d8:	4b8c      	ldr	r3, [pc, #560]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e4:	d10b      	bne.n	80028fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e6:	4b89      	ldr	r3, [pc, #548]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d06c      	beq.n	80029cc <HAL_RCC_OscConfig+0x12c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d168      	bne.n	80029cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e24c      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x76>
 8002908:	4b80      	ldr	r3, [pc, #512]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800290e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e02e      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x98>
 800291e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7a      	ldr	r2, [pc, #488]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b78      	ldr	r3, [pc, #480]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a77      	ldr	r2, [pc, #476]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002930:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0xbc>
 8002942:	4b72      	ldr	r3, [pc, #456]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a71      	ldr	r2, [pc, #452]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6e      	ldr	r2, [pc, #440]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0xd4>
 800295c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6a      	ldr	r2, [pc, #424]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a67      	ldr	r2, [pc, #412]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff f9fc 	bl	8001d78 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff f9f8 	bl	8001d78 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	@ 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e200      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b5d      	ldr	r3, [pc, #372]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0xe4>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff f9e8 	bl	8001d78 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff f9e4 	bl	8001d78 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	@ 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1ec      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029be:	4b53      	ldr	r3, [pc, #332]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x10c>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d063      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029da:	4b4c      	ldr	r3, [pc, #304]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029e6:	4b49      	ldr	r3, [pc, #292]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d11c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x18c>
 80029f2:	4b46      	ldr	r3, [pc, #280]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d116      	bne.n	8002a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	4b43      	ldr	r3, [pc, #268]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1c0      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b3d      	ldr	r3, [pc, #244]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4939      	ldr	r1, [pc, #228]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	e03a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a34:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7ff f99d 	bl	8001d78 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a42:	f7ff f999 	bl	8001d78 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e1a1      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b2a      	ldr	r3, [pc, #168]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4927      	ldr	r1, [pc, #156]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e015      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7ff f97c 	bl	8001d78 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a84:	f7ff f978 	bl	8001d78 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e180      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d03a      	beq.n	8002b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d019      	beq.n	8002aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7ff f95c 	bl	8001d78 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7ff f958 	bl	8001d78 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e160      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 face 	bl	8003084 <RCC_Delay>
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7ff f942 	bl	8001d78 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af6:	e00f      	b.n	8002b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7ff f93e 	bl	8001d78 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d908      	bls.n	8002b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e146      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	42420000 	.word	0x42420000
 8002b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	4b92      	ldr	r3, [pc, #584]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e9      	bne.n	8002af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80a6 	beq.w	8002c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b36:	4b8b      	ldr	r3, [pc, #556]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b88      	ldr	r3, [pc, #544]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4a87      	ldr	r2, [pc, #540]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b4c:	61d3      	str	r3, [r2, #28]
 8002b4e:	4b85      	ldr	r3, [pc, #532]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b82      	ldr	r3, [pc, #520]	@ (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7ff f8ff 	bl	8001d78 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7ff f8fb 	bl	8001d78 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b64      	cmp	r3, #100	@ 0x64
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e103      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b75      	ldr	r3, [pc, #468]	@ (8002d68 <HAL_RCC_OscConfig+0x4c8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x312>
 8002ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6213      	str	r3, [r2, #32]
 8002bb0:	e02d      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x334>
 8002bba:	4b6a      	ldr	r3, [pc, #424]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a69      	ldr	r2, [pc, #420]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	4b67      	ldr	r3, [pc, #412]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a66      	ldr	r2, [pc, #408]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	e01c      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x356>
 8002bdc:	4b61      	ldr	r3, [pc, #388]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a60      	ldr	r2, [pc, #384]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	4b5e      	ldr	r3, [pc, #376]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4a5d      	ldr	r2, [pc, #372]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCC_OscConfig+0x36e>
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	6213      	str	r3, [r2, #32]
 8002c02:	4b58      	ldr	r3, [pc, #352]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4a57      	ldr	r2, [pc, #348]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f023 0304 	bic.w	r3, r3, #4
 8002c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d015      	beq.n	8002c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7ff f8af 	bl	8001d78 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7ff f8ab 	bl	8001d78 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0b1      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	4b4b      	ldr	r3, [pc, #300]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ee      	beq.n	8002c1e <HAL_RCC_OscConfig+0x37e>
 8002c40:	e014      	b.n	8002c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7ff f899 	bl	8001d78 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7ff f895 	bl	8001d78 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e09b      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	4b40      	ldr	r3, [pc, #256]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ee      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c72:	4b3c      	ldr	r3, [pc, #240]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4a3b      	ldr	r2, [pc, #236]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8087 	beq.w	8002d96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c88:	4b36      	ldr	r3, [pc, #216]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d061      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d146      	bne.n	8002d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b33      	ldr	r3, [pc, #204]	@ (8002d6c <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7ff f869 	bl	8001d78 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7ff f865 	bl	8001d78 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e06d      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbc:	4b29      	ldr	r3, [pc, #164]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd0:	d108      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cd2:	4b24      	ldr	r3, [pc, #144]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4921      	ldr	r1, [pc, #132]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a19      	ldr	r1, [r3, #32]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	491b      	ldr	r1, [pc, #108]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7ff f839 	bl	8001d78 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7ff f835 	bl	8001d78 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e03d      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x46a>
 8002d28:	e035      	b.n	8002d96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <HAL_RCC_OscConfig+0x4cc>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7ff f822 	bl	8001d78 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7ff f81e 	bl	8001d78 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e026      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x498>
 8002d56:	e01e      	b.n	8002d96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e019      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_RCC_OscConfig+0x500>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0d0      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d910      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b67      	ldr	r3, [pc, #412]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4965      	ldr	r1, [pc, #404]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b8      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a58      	ldr	r2, [pc, #352]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e18:	4b53      	ldr	r3, [pc, #332]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b50      	ldr	r3, [pc, #320]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	494d      	ldr	r1, [pc, #308]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d040      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d115      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	4b41      	ldr	r3, [pc, #260]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e073      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e72:	4b3d      	ldr	r3, [pc, #244]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e06b      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e82:	4b39      	ldr	r3, [pc, #228]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f023 0203 	bic.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4936      	ldr	r1, [pc, #216]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e94:	f7fe ff70 	bl	8001d78 <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9c:	f7fe ff6c 	bl	8001d78 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e053      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 020c 	and.w	r2, r3, #12
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d1eb      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b27      	ldr	r3, [pc, #156]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d210      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	4922      	ldr	r1, [pc, #136]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e032      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4916      	ldr	r1, [pc, #88]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	490e      	ldr	r1, [pc, #56]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f32:	f000 f821 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	490a      	ldr	r1, [pc, #40]	@ (8002f6c <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	@ (8002f70 <HAL_RCC_ClockConfig+0x1cc>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_RCC_ClockConfig+0x1d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fece 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	08007d1c 	.word	0x08007d1c
 8002f70:	200001b0 	.word	0x200001b0
 8002f74:	200001b4 	.word	0x200001b4

08002f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f92:	4b1e      	ldr	r3, [pc, #120]	@ (800300c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x36>
 8002fa6:	e027      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa8:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x98>)
 8002faa:	613b      	str	r3, [r7, #16]
      break;
 8002fac:	e027      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	0c9b      	lsrs	r3, r3, #18
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	4a17      	ldr	r2, [pc, #92]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fb8:	5cd3      	ldrb	r3, [r2, r3]
 8002fba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	0c5b      	lsrs	r3, r3, #17
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	4a11      	ldr	r2, [pc, #68]	@ (8003018 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fda:	fb03 f202 	mul.w	r2, r3, r2
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0c      	ldr	r2, [pc, #48]	@ (800301c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	613b      	str	r3, [r7, #16]
      break;
 8002ff6:	e002      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffa:	613b      	str	r3, [r7, #16]
      break;
 8002ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffe:	693b      	ldr	r3, [r7, #16]
}
 8003000:	4618      	mov	r0, r3
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	007a1200 	.word	0x007a1200
 8003014:	08007d34 	.word	0x08007d34
 8003018:	08007d44 	.word	0x08007d44
 800301c:	003d0900 	.word	0x003d0900

08003020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003024:	4b02      	ldr	r3, [pc, #8]	@ (8003030 <HAL_RCC_GetHCLKFreq+0x10>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	200001b0 	.word	0x200001b0

08003034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003038:	f7ff fff2 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	4903      	ldr	r1, [pc, #12]	@ (8003058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	08007d2c 	.word	0x08007d2c

0800305c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003060:	f7ff ffde 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	0adb      	lsrs	r3, r3, #11
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	4903      	ldr	r1, [pc, #12]	@ (8003080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	08007d2c 	.word	0x08007d2c

08003084 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800308c:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <RCC_Delay+0x34>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <RCC_Delay+0x38>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0a5b      	lsrs	r3, r3, #9
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030a0:	bf00      	nop
  }
  while (Delay --);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1e5a      	subs	r2, r3, #1
 80030a6:	60fa      	str	r2, [r7, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f9      	bne.n	80030a0 <RCC_Delay+0x1c>
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	200001b0 	.word	0x200001b0
 80030bc:	10624dd3 	.word	0x10624dd3

080030c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e041      	b.n	8003156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe fba6 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f000 f940 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d001      	beq.n	8003178 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e032      	b.n	80031de <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a18      	ldr	r2, [pc, #96]	@ (80031e8 <HAL_TIM_Base_Start+0x88>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_TIM_Base_Start+0x48>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003192:	d009      	beq.n	80031a8 <HAL_TIM_Base_Start+0x48>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a14      	ldr	r2, [pc, #80]	@ (80031ec <HAL_TIM_Base_Start+0x8c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_TIM_Base_Start+0x48>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a13      	ldr	r2, [pc, #76]	@ (80031f0 <HAL_TIM_Base_Start+0x90>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d010      	beq.n	80031dc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ca:	e007      	b.n	80031dc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40000800 	.word	0x40000800

080031f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_TIM_ConfigClockSource+0x1c>
 800320c:	2302      	movs	r3, #2
 800320e:	e0b4      	b.n	800337a <HAL_TIM_ConfigClockSource+0x186>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800322e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003248:	d03e      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0xd4>
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800324e:	f200 8087 	bhi.w	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003256:	f000 8086 	beq.w	8003366 <HAL_TIM_ConfigClockSource+0x172>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800325e:	d87f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b70      	cmp	r3, #112	@ 0x70
 8003262:	d01a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0xa6>
 8003264:	2b70      	cmp	r3, #112	@ 0x70
 8003266:	d87b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b60      	cmp	r3, #96	@ 0x60
 800326a:	d050      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x11a>
 800326c:	2b60      	cmp	r3, #96	@ 0x60
 800326e:	d877      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b50      	cmp	r3, #80	@ 0x50
 8003272:	d03c      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0xfa>
 8003274:	2b50      	cmp	r3, #80	@ 0x50
 8003276:	d873      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b40      	cmp	r3, #64	@ 0x40
 800327a:	d058      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x13a>
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	d86f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b30      	cmp	r3, #48	@ 0x30
 8003282:	d064      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b30      	cmp	r3, #48	@ 0x30
 8003286:	d86b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b20      	cmp	r3, #32
 800328a:	d060      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d867      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05c      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	2b10      	cmp	r3, #16
 8003296:	d05a      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	e062      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032aa:	f000 f950 	bl	800354e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	609a      	str	r2, [r3, #8]
      break;
 80032c6:	e04f      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032d8:	f000 f939 	bl	800354e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032ea:	609a      	str	r2, [r3, #8]
      break;
 80032ec:	e03c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 f8b0 	bl	8003460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2150      	movs	r1, #80	@ 0x50
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f907 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 800330c:	e02c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800331a:	461a      	mov	r2, r3
 800331c:	f000 f8ce 	bl	80034bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2160      	movs	r1, #96	@ 0x60
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f8f7 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 800332c:	e01c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333a:	461a      	mov	r2, r3
 800333c:	f000 f890 	bl	8003460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2140      	movs	r1, #64	@ 0x40
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f8e7 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 800334c:	e00c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f000 f8de 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 800335e:	e003      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e000      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a2f      	ldr	r2, [pc, #188]	@ (8003454 <TIM_Base_SetConfig+0xd0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_Base_SetConfig+0x30>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a2:	d007      	beq.n	80033b4 <TIM_Base_SetConfig+0x30>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003458 <TIM_Base_SetConfig+0xd4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_Base_SetConfig+0x30>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a2b      	ldr	r2, [pc, #172]	@ (800345c <TIM_Base_SetConfig+0xd8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d108      	bne.n	80033c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a22      	ldr	r2, [pc, #136]	@ (8003454 <TIM_Base_SetConfig+0xd0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <TIM_Base_SetConfig+0x62>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d4:	d007      	beq.n	80033e6 <TIM_Base_SetConfig+0x62>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <TIM_Base_SetConfig+0xd4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_Base_SetConfig+0x62>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <TIM_Base_SetConfig+0xd8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d108      	bne.n	80033f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <TIM_Base_SetConfig+0xd0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d103      	bne.n	800342c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f023 0201 	bic.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	611a      	str	r2, [r3, #16]
  }
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800

08003460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800348a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 030a 	bic.w	r3, r3, #10
 800349c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f023 0210 	bic.w	r2, r3, #16
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	031b      	lsls	r3, r3, #12
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	621a      	str	r2, [r3, #32]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	f043 0307 	orr.w	r3, r3, #7
 800353c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b087      	sub	sp, #28
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003568:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	021a      	lsls	r2, r3, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	431a      	orrs	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4313      	orrs	r3, r2
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	609a      	str	r2, [r3, #8]
}
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e046      	b.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a16      	ldr	r2, [pc, #88]	@ (800363c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00e      	beq.n	8003606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f0:	d009      	beq.n	8003606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a12      	ldr	r2, [pc, #72]	@ (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d004      	beq.n	8003606 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a10      	ldr	r2, [pc, #64]	@ (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d10c      	bne.n	8003620 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800360c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	4313      	orrs	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800

08003648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e042      	b.n	80036e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fe f8fe 	bl	8001870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	@ 0x24
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800368a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 ffbd 	bl	800460c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b20      	cmp	r3, #32
 8003706:	d175      	bne.n	80037f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_UART_Transmit+0x2c>
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e06e      	b.n	80037f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2221      	movs	r2, #33	@ 0x21
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003726:	f7fe fb27 	bl	8001d78 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	88fa      	ldrh	r2, [r7, #6]
 8003730:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	88fa      	ldrh	r2, [r7, #6]
 8003736:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003740:	d108      	bne.n	8003754 <HAL_UART_Transmit+0x6c>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e003      	b.n	800375c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800375c:	e02e      	b.n	80037bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2200      	movs	r2, #0
 8003766:	2180      	movs	r1, #128	@ 0x80
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fc9a 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e03a      	b.n	80037f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3302      	adds	r3, #2
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e007      	b.n	80037ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1cb      	bne.n	800375e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2140      	movs	r1, #64	@ 0x40
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fc66 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e006      	b.n	80037f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	d112      	bne.n	800383e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Receive_DMA+0x26>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e00b      	b.n	8003840 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	461a      	mov	r2, r3
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fc8d 	bl	8004154 <UART_Start_Receive_DMA>
 800383a:	4603      	mov	r3, r0
 800383c:	e000      	b.n	8003840 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b090      	sub	sp, #64	@ 0x40
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003850:	2300      	movs	r3, #0
 8003852:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf14      	ite	ne
 8003862:	2301      	movne	r3, #1
 8003864:	2300      	moveq	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b21      	cmp	r3, #33	@ 0x21
 8003874:	d128      	bne.n	80038c8 <HAL_UART_DMAStop+0x80>
 8003876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d025      	beq.n	80038c8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3314      	adds	r3, #20
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	623b      	str	r3, [r7, #32]
   return(result);
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003892:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3314      	adds	r3, #20
 800389a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800389c:	633a      	str	r2, [r7, #48]	@ 0x30
 800389e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e5      	bne.n	800387c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe fc51 	bl	8002164 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fce0 	bl	8004288 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf14      	ite	ne
 80038d6:	2301      	movne	r3, #1
 80038d8:	2300      	moveq	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b22      	cmp	r3, #34	@ 0x22
 80038e8:	d128      	bne.n	800393c <HAL_UART_DMAStop+0xf4>
 80038ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d025      	beq.n	800393c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3314      	adds	r3, #20
 800390e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003910:	61fa      	str	r2, [r7, #28]
 8003912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	69b9      	ldr	r1, [r7, #24]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	617b      	str	r3, [r7, #20]
   return(result);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d004      	beq.n	8003936 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fc17 	bl	8002164 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fccd 	bl	80042d6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3740      	adds	r7, #64	@ 0x40
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b0ba      	sub	sp, #232	@ 0xe8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10f      	bne.n	80039ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_UART_IRQHandler+0x66>
 800399a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fd72 	bl	8004490 <UART_Receive_IT>
      return;
 80039ac:	e25b      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80de 	beq.w	8003b74 <HAL_UART_IRQHandler+0x22c>
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80d1 	beq.w	8003b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_UART_IRQHandler+0xae>
 80039de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xd2>
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f043 0202 	orr.w	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_UART_IRQHandler+0xf6>
 8003a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d011      	beq.n	8003a6e <HAL_UART_IRQHandler+0x126>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	f043 0208 	orr.w	r2, r3, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 81f2 	beq.w	8003e5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_UART_IRQHandler+0x14e>
 8003a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fcfd 	bl	8004490 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x17a>
 8003aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d04f      	beq.n	8003b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fc07 	bl	80042d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d041      	beq.n	8003b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3314      	adds	r3, #20
 8003afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1d9      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d013      	beq.n	8003b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d28 <HAL_UART_IRQHandler+0x3e0>)
 8003b30:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fb50 	bl	80021dc <HAL_DMA_Abort_IT>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	e00e      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fac2 	bl	80010dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	e00a      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fabe 	bl	80010dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	e006      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd faba 	bl	80010dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b6e:	e175      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	bf00      	nop
    return;
 8003b72:	e173      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f040 814f 	bne.w	8003e1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8148 	beq.w	8003e1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8141 	beq.w	8003e1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80b6 	beq.w	8003d2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8145 	beq.w	8003e60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bde:	429a      	cmp	r2, r3
 8003be0:	f080 813e 	bcs.w	8003e60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	f000 8088 	beq.w	8003d08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c24:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1d9      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e1      	bne.n	8003c44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3314      	adds	r3, #20
 8003c86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ca4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ca6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003caa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003cb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e3      	bne.n	8003c80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cd8:	f023 0310 	bic.w	r3, r3, #16
 8003cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e3      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fa2e 	bl	8002164 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8b6 	bl	8003e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d24:	e09c      	b.n	8003e60 <HAL_UART_IRQHandler+0x518>
 8003d26:	bf00      	nop
 8003d28:	0800439b 	.word	0x0800439b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 808e 	beq.w	8003e64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8089 	beq.w	8003e64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d76:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e3      	bne.n	8003d52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dae:	633a      	str	r2, [r7, #48]	@ 0x30
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003df4:	61fa      	str	r2, [r7, #28]
 8003df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	617b      	str	r3, [r7, #20]
   return(result);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e3      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f83b 	bl	8003e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e1a:	e023      	b.n	8003e64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_UART_IRQHandler+0x4f4>
 8003e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fac4 	bl	80043c2 <UART_Transmit_IT>
    return;
 8003e3a:	e014      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <HAL_UART_IRQHandler+0x51e>
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fb03 	bl	8004460 <UART_EndTransmit_IT>
    return;
 8003e5a:	e004      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e5c:	bf00      	nop
 8003e5e:	e002      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e60:	bf00      	nop
 8003e62:	e000      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e64:	bf00      	nop
  }
}
 8003e66:	37e8      	adds	r7, #232	@ 0xe8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b09c      	sub	sp, #112	@ 0x70
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d172      	bne.n	8003fa8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ede:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003ee8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003eea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e5      	bne.n	8003ec8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3314      	adds	r3, #20
 8003f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f1c:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f1e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e5      	bne.n	8003efc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3314      	adds	r3, #20
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f46:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f50:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d119      	bne.n	8003fa8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0310 	bic.w	r3, r3, #16
 8003f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003f94:	61fa      	str	r2, [r7, #28]
 8003f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	69b9      	ldr	r1, [r7, #24]
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e5      	bne.n	8003f74 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003faa:	2200      	movs	r2, #0
 8003fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d106      	bne.n	8003fc4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fbe:	f7ff ff67 	bl	8003e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fc2:	e002      	b.n	8003fca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003fc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fc6:	f7fd f80f 	bl	8000fe8 <HAL_UART_RxCpltCallback>
}
 8003fca:	bf00      	nop
 8003fcc:	3770      	adds	r7, #112	@ 0x70
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d108      	bne.n	8004000 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff ff49 	bl	8003e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ffe:	e002      	b.n	8004006 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f7ff ff3c 	bl	8003e7e <HAL_UART_RxHalfCpltCallback>
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf14      	ite	ne
 800402e:	2301      	movne	r3, #1
 8004030:	2300      	moveq	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b21      	cmp	r3, #33	@ 0x21
 8004040:	d108      	bne.n	8004054 <UART_DMAError+0x46>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2200      	movs	r2, #0
 800404c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800404e:	68b8      	ldr	r0, [r7, #8]
 8004050:	f000 f91a 	bl	8004288 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	bf14      	ite	ne
 8004062:	2301      	movne	r3, #1
 8004064:	2300      	moveq	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b22      	cmp	r3, #34	@ 0x22
 8004074:	d108      	bne.n	8004088 <UART_DMAError+0x7a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2200      	movs	r2, #0
 8004080:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004082:	68b8      	ldr	r0, [r7, #8]
 8004084:	f000 f927 	bl	80042d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408c:	f043 0210 	orr.w	r2, r3, #16
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004094:	68b8      	ldr	r0, [r7, #8]
 8004096:	f7fd f821 	bl	80010dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b086      	sub	sp, #24
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	4613      	mov	r3, r2
 80040b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b2:	e03b      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d037      	beq.n	800412c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7fd fe5c 	bl	8001d78 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	6a3a      	ldr	r2, [r7, #32]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e03a      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d023      	beq.n	800412c <UART_WaitOnFlagUntilTimeout+0x8a>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b80      	cmp	r3, #128	@ 0x80
 80040e8:	d020      	beq.n	800412c <UART_WaitOnFlagUntilTimeout+0x8a>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b40      	cmp	r3, #64	@ 0x40
 80040ee:	d01d      	beq.n	800412c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d116      	bne.n	800412c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f8de 	bl	80042d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2208      	movs	r2, #8
 800411e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e00f      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	429a      	cmp	r2, r3
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	429a      	cmp	r2, r3
 8004148:	d0b4      	beq.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b098      	sub	sp, #96	@ 0x60
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2222      	movs	r2, #34	@ 0x22
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	4a3e      	ldr	r2, [pc, #248]	@ (800427c <UART_Start_Receive_DMA+0x128>)
 8004182:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004188:	4a3d      	ldr	r2, [pc, #244]	@ (8004280 <UART_Start_Receive_DMA+0x12c>)
 800418a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004190:	4a3c      	ldr	r2, [pc, #240]	@ (8004284 <UART_Start_Receive_DMA+0x130>)
 8004192:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004198:	2200      	movs	r2, #0
 800419a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	f7fd ff76 	bl	80020a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d019      	beq.n	800420a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80041f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80041fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e5      	bne.n	80041d6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	657b      	str	r3, [r7, #84]	@ 0x54
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800422a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800422c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e5      	bne.n	800420a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3314      	adds	r3, #20
 8004244:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	617b      	str	r3, [r7, #20]
   return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004254:	653b      	str	r3, [r7, #80]	@ 0x50
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3314      	adds	r3, #20
 800425c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800425e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6a39      	ldr	r1, [r7, #32]
 8004264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	61fb      	str	r3, [r7, #28]
   return(result);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e5      	bne.n	800423e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3760      	adds	r7, #96	@ 0x60
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	08003ea7 	.word	0x08003ea7
 8004280:	08003fd3 	.word	0x08003fd3
 8004284:	0800400f 	.word	0x0800400f

08004288 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b089      	sub	sp, #36	@ 0x24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	61ba      	str	r2, [r7, #24]
 80042b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6979      	ldr	r1, [r7, #20]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	613b      	str	r3, [r7, #16]
   return(result);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80042cc:	bf00      	nop
 80042ce:	3724      	adds	r7, #36	@ 0x24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b095      	sub	sp, #84	@ 0x54
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8004300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004304:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800430c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e5      	bne.n	80042de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	61fb      	str	r3, [r7, #28]
   return(result);
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	64bb      	str	r3, [r7, #72]	@ 0x48
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3314      	adds	r3, #20
 8004330:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004332:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004338:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e5      	bne.n	8004312 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	2b01      	cmp	r3, #1
 800434c:	d119      	bne.n	8004382 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	60bb      	str	r3, [r7, #8]
   return(result);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f023 0310 	bic.w	r3, r3, #16
 8004364:	647b      	str	r3, [r7, #68]	@ 0x44
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800436e:	61ba      	str	r2, [r7, #24]
 8004370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004390:	bf00      	nop
 8004392:	3754      	adds	r7, #84	@ 0x54
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7fc fe91 	bl	80010dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b21      	cmp	r3, #33	@ 0x21
 80043d4:	d13e      	bne.n	8004454 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043de:	d114      	bne.n	800440a <UART_Transmit_IT+0x48>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d110      	bne.n	800440a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	1c9a      	adds	r2, r3, #2
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	621a      	str	r2, [r3, #32]
 8004408:	e008      	b.n	800441c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	1c59      	adds	r1, r3, #1
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6211      	str	r1, [r2, #32]
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4619      	mov	r1, r3
 800442a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10f      	bne.n	8004450 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800443e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800444e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004476:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fcf3 	bl	8003e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	@ 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b22      	cmp	r3, #34	@ 0x22
 80044a2:	f040 80ae 	bne.w	8004602 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ae:	d117      	bne.n	80044e0 <UART_Receive_IT+0x50>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d113      	bne.n	80044e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	1c9a      	adds	r2, r3, #2
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80044de:	e026      	b.n	800452e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f2:	d007      	beq.n	8004504 <UART_Receive_IT+0x74>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <UART_Receive_IT+0x82>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	e008      	b.n	8004524 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800451e:	b2da      	uxtb	r2, r3
 8004520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004522:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29b      	uxth	r3, r3
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4619      	mov	r1, r3
 800453c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800453e:	2b00      	cmp	r3, #0
 8004540:	d15d      	bne.n	80045fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0220 	bic.w	r2, r2, #32
 8004550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004560:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	2b01      	cmp	r3, #1
 8004586:	d135      	bne.n	80045f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	613b      	str	r3, [r7, #16]
   return(result);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f023 0310 	bic.w	r3, r3, #16
 80045a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ae:	623a      	str	r2, [r7, #32]
 80045b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	69f9      	ldr	r1, [r7, #28]
 80045b4:	6a3a      	ldr	r2, [r7, #32]
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e5      	bne.n	800458e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d10a      	bne.n	80045e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff fc4f 	bl	8003e90 <HAL_UARTEx_RxEventCallback>
 80045f2:	e002      	b.n	80045fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7fc fcf7 	bl	8000fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e002      	b.n	8004604 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3730      	adds	r7, #48	@ 0x30
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004646:	f023 030c 	bic.w	r3, r3, #12
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	430b      	orrs	r3, r1
 8004652:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2c      	ldr	r2, [pc, #176]	@ (8004720 <UART_SetConfig+0x114>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d103      	bne.n	800467c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004674:	f7fe fcf2 	bl	800305c <HAL_RCC_GetPCLK2Freq>
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	e002      	b.n	8004682 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800467c:	f7fe fcda 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8004680:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009a      	lsls	r2, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	4a22      	ldr	r2, [pc, #136]	@ (8004724 <UART_SetConfig+0x118>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	0119      	lsls	r1, r3, #4
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009a      	lsls	r2, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <UART_SetConfig+0x118>)
 80046ba:	fba3 0302 	umull	r0, r3, r3, r2
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2064      	movs	r0, #100	@ 0x64
 80046c2:	fb00 f303 	mul.w	r3, r0, r3
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	3332      	adds	r3, #50	@ 0x32
 80046cc:	4a15      	ldr	r2, [pc, #84]	@ (8004724 <UART_SetConfig+0x118>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d8:	4419      	add	r1, r3
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	009a      	lsls	r2, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80046f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <UART_SetConfig+0x118>)
 80046f2:	fba3 0302 	umull	r0, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2064      	movs	r0, #100	@ 0x64
 80046fa:	fb00 f303 	mul.w	r3, r0, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	3332      	adds	r3, #50	@ 0x32
 8004704:	4a07      	ldr	r2, [pc, #28]	@ (8004724 <UART_SetConfig+0x118>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f003 020f 	and.w	r2, r3, #15
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	440a      	add	r2, r1
 8004716:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40013800 	.word	0x40013800
 8004724:	51eb851f 	.word	0x51eb851f

08004728 <__cvt>:
 8004728:	2b00      	cmp	r3, #0
 800472a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472e:	461d      	mov	r5, r3
 8004730:	bfbb      	ittet	lt
 8004732:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004736:	461d      	movlt	r5, r3
 8004738:	2300      	movge	r3, #0
 800473a:	232d      	movlt	r3, #45	@ 0x2d
 800473c:	b088      	sub	sp, #32
 800473e:	4614      	mov	r4, r2
 8004740:	bfb8      	it	lt
 8004742:	4614      	movlt	r4, r2
 8004744:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004746:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004748:	7013      	strb	r3, [r2, #0]
 800474a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800474c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004750:	f023 0820 	bic.w	r8, r3, #32
 8004754:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004758:	d005      	beq.n	8004766 <__cvt+0x3e>
 800475a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800475e:	d100      	bne.n	8004762 <__cvt+0x3a>
 8004760:	3601      	adds	r6, #1
 8004762:	2302      	movs	r3, #2
 8004764:	e000      	b.n	8004768 <__cvt+0x40>
 8004766:	2303      	movs	r3, #3
 8004768:	aa07      	add	r2, sp, #28
 800476a:	9204      	str	r2, [sp, #16]
 800476c:	aa06      	add	r2, sp, #24
 800476e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004772:	e9cd 3600 	strd	r3, r6, [sp]
 8004776:	4622      	mov	r2, r4
 8004778:	462b      	mov	r3, r5
 800477a:	f000 ffbd 	bl	80056f8 <_dtoa_r>
 800477e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004782:	4607      	mov	r7, r0
 8004784:	d119      	bne.n	80047ba <__cvt+0x92>
 8004786:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004788:	07db      	lsls	r3, r3, #31
 800478a:	d50e      	bpl.n	80047aa <__cvt+0x82>
 800478c:	eb00 0906 	add.w	r9, r0, r6
 8004790:	2200      	movs	r2, #0
 8004792:	2300      	movs	r3, #0
 8004794:	4620      	mov	r0, r4
 8004796:	4629      	mov	r1, r5
 8004798:	f7fc f906 	bl	80009a8 <__aeabi_dcmpeq>
 800479c:	b108      	cbz	r0, 80047a2 <__cvt+0x7a>
 800479e:	f8cd 901c 	str.w	r9, [sp, #28]
 80047a2:	2230      	movs	r2, #48	@ 0x30
 80047a4:	9b07      	ldr	r3, [sp, #28]
 80047a6:	454b      	cmp	r3, r9
 80047a8:	d31e      	bcc.n	80047e8 <__cvt+0xc0>
 80047aa:	4638      	mov	r0, r7
 80047ac:	9b07      	ldr	r3, [sp, #28]
 80047ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80047b0:	1bdb      	subs	r3, r3, r7
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	b008      	add	sp, #32
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047be:	eb00 0906 	add.w	r9, r0, r6
 80047c2:	d1e5      	bne.n	8004790 <__cvt+0x68>
 80047c4:	7803      	ldrb	r3, [r0, #0]
 80047c6:	2b30      	cmp	r3, #48	@ 0x30
 80047c8:	d10a      	bne.n	80047e0 <__cvt+0xb8>
 80047ca:	2200      	movs	r2, #0
 80047cc:	2300      	movs	r3, #0
 80047ce:	4620      	mov	r0, r4
 80047d0:	4629      	mov	r1, r5
 80047d2:	f7fc f8e9 	bl	80009a8 <__aeabi_dcmpeq>
 80047d6:	b918      	cbnz	r0, 80047e0 <__cvt+0xb8>
 80047d8:	f1c6 0601 	rsb	r6, r6, #1
 80047dc:	f8ca 6000 	str.w	r6, [sl]
 80047e0:	f8da 3000 	ldr.w	r3, [sl]
 80047e4:	4499      	add	r9, r3
 80047e6:	e7d3      	b.n	8004790 <__cvt+0x68>
 80047e8:	1c59      	adds	r1, r3, #1
 80047ea:	9107      	str	r1, [sp, #28]
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e7d9      	b.n	80047a4 <__cvt+0x7c>

080047f0 <__exponent>:
 80047f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f2:	2900      	cmp	r1, #0
 80047f4:	bfb6      	itet	lt
 80047f6:	232d      	movlt	r3, #45	@ 0x2d
 80047f8:	232b      	movge	r3, #43	@ 0x2b
 80047fa:	4249      	neglt	r1, r1
 80047fc:	2909      	cmp	r1, #9
 80047fe:	7002      	strb	r2, [r0, #0]
 8004800:	7043      	strb	r3, [r0, #1]
 8004802:	dd29      	ble.n	8004858 <__exponent+0x68>
 8004804:	f10d 0307 	add.w	r3, sp, #7
 8004808:	461d      	mov	r5, r3
 800480a:	270a      	movs	r7, #10
 800480c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004810:	461a      	mov	r2, r3
 8004812:	fb07 1416 	mls	r4, r7, r6, r1
 8004816:	3430      	adds	r4, #48	@ 0x30
 8004818:	f802 4c01 	strb.w	r4, [r2, #-1]
 800481c:	460c      	mov	r4, r1
 800481e:	2c63      	cmp	r4, #99	@ 0x63
 8004820:	4631      	mov	r1, r6
 8004822:	f103 33ff 	add.w	r3, r3, #4294967295
 8004826:	dcf1      	bgt.n	800480c <__exponent+0x1c>
 8004828:	3130      	adds	r1, #48	@ 0x30
 800482a:	1e94      	subs	r4, r2, #2
 800482c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004830:	4623      	mov	r3, r4
 8004832:	1c41      	adds	r1, r0, #1
 8004834:	42ab      	cmp	r3, r5
 8004836:	d30a      	bcc.n	800484e <__exponent+0x5e>
 8004838:	f10d 0309 	add.w	r3, sp, #9
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	42ac      	cmp	r4, r5
 8004840:	bf88      	it	hi
 8004842:	2300      	movhi	r3, #0
 8004844:	3302      	adds	r3, #2
 8004846:	4403      	add	r3, r0
 8004848:	1a18      	subs	r0, r3, r0
 800484a:	b003      	add	sp, #12
 800484c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800484e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004852:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004856:	e7ed      	b.n	8004834 <__exponent+0x44>
 8004858:	2330      	movs	r3, #48	@ 0x30
 800485a:	3130      	adds	r1, #48	@ 0x30
 800485c:	7083      	strb	r3, [r0, #2]
 800485e:	70c1      	strb	r1, [r0, #3]
 8004860:	1d03      	adds	r3, r0, #4
 8004862:	e7f1      	b.n	8004848 <__exponent+0x58>

08004864 <_printf_float>:
 8004864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	b091      	sub	sp, #68	@ 0x44
 800486a:	460c      	mov	r4, r1
 800486c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004870:	4616      	mov	r6, r2
 8004872:	461f      	mov	r7, r3
 8004874:	4605      	mov	r5, r0
 8004876:	f000 fe2f 	bl	80054d8 <_localeconv_r>
 800487a:	6803      	ldr	r3, [r0, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	9308      	str	r3, [sp, #32]
 8004880:	f7fb fc66 	bl	8000150 <strlen>
 8004884:	2300      	movs	r3, #0
 8004886:	930e      	str	r3, [sp, #56]	@ 0x38
 8004888:	f8d8 3000 	ldr.w	r3, [r8]
 800488c:	9009      	str	r0, [sp, #36]	@ 0x24
 800488e:	3307      	adds	r3, #7
 8004890:	f023 0307 	bic.w	r3, r3, #7
 8004894:	f103 0208 	add.w	r2, r3, #8
 8004898:	f894 a018 	ldrb.w	sl, [r4, #24]
 800489c:	f8d4 b000 	ldr.w	fp, [r4]
 80048a0:	f8c8 2000 	str.w	r2, [r8]
 80048a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80048b2:	f04f 32ff 	mov.w	r2, #4294967295
 80048b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80048ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80048be:	4b9c      	ldr	r3, [pc, #624]	@ (8004b30 <_printf_float+0x2cc>)
 80048c0:	f7fc f8a4 	bl	8000a0c <__aeabi_dcmpun>
 80048c4:	bb70      	cbnz	r0, 8004924 <_printf_float+0xc0>
 80048c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80048ca:	f04f 32ff 	mov.w	r2, #4294967295
 80048ce:	4b98      	ldr	r3, [pc, #608]	@ (8004b30 <_printf_float+0x2cc>)
 80048d0:	f7fc f87e 	bl	80009d0 <__aeabi_dcmple>
 80048d4:	bb30      	cbnz	r0, 8004924 <_printf_float+0xc0>
 80048d6:	2200      	movs	r2, #0
 80048d8:	2300      	movs	r3, #0
 80048da:	4640      	mov	r0, r8
 80048dc:	4649      	mov	r1, r9
 80048de:	f7fc f86d 	bl	80009bc <__aeabi_dcmplt>
 80048e2:	b110      	cbz	r0, 80048ea <_printf_float+0x86>
 80048e4:	232d      	movs	r3, #45	@ 0x2d
 80048e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048ea:	4a92      	ldr	r2, [pc, #584]	@ (8004b34 <_printf_float+0x2d0>)
 80048ec:	4b92      	ldr	r3, [pc, #584]	@ (8004b38 <_printf_float+0x2d4>)
 80048ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80048f2:	bf94      	ite	ls
 80048f4:	4690      	movls	r8, r2
 80048f6:	4698      	movhi	r8, r3
 80048f8:	2303      	movs	r3, #3
 80048fa:	f04f 0900 	mov.w	r9, #0
 80048fe:	6123      	str	r3, [r4, #16]
 8004900:	f02b 0304 	bic.w	r3, fp, #4
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	4633      	mov	r3, r6
 8004908:	4621      	mov	r1, r4
 800490a:	4628      	mov	r0, r5
 800490c:	9700      	str	r7, [sp, #0]
 800490e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004910:	f000 f9d4 	bl	8004cbc <_printf_common>
 8004914:	3001      	adds	r0, #1
 8004916:	f040 8090 	bne.w	8004a3a <_printf_float+0x1d6>
 800491a:	f04f 30ff 	mov.w	r0, #4294967295
 800491e:	b011      	add	sp, #68	@ 0x44
 8004920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	4640      	mov	r0, r8
 800492a:	4649      	mov	r1, r9
 800492c:	f7fc f86e 	bl	8000a0c <__aeabi_dcmpun>
 8004930:	b148      	cbz	r0, 8004946 <_printf_float+0xe2>
 8004932:	464b      	mov	r3, r9
 8004934:	2b00      	cmp	r3, #0
 8004936:	bfb8      	it	lt
 8004938:	232d      	movlt	r3, #45	@ 0x2d
 800493a:	4a80      	ldr	r2, [pc, #512]	@ (8004b3c <_printf_float+0x2d8>)
 800493c:	bfb8      	it	lt
 800493e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004942:	4b7f      	ldr	r3, [pc, #508]	@ (8004b40 <_printf_float+0x2dc>)
 8004944:	e7d3      	b.n	80048ee <_printf_float+0x8a>
 8004946:	6863      	ldr	r3, [r4, #4]
 8004948:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	d13f      	bne.n	80049d0 <_printf_float+0x16c>
 8004950:	2306      	movs	r3, #6
 8004952:	6063      	str	r3, [r4, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	9206      	str	r2, [sp, #24]
 800495e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004960:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004964:	aa0d      	add	r2, sp, #52	@ 0x34
 8004966:	9203      	str	r2, [sp, #12]
 8004968:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800496c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004970:	6863      	ldr	r3, [r4, #4]
 8004972:	4642      	mov	r2, r8
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	4628      	mov	r0, r5
 8004978:	464b      	mov	r3, r9
 800497a:	910a      	str	r1, [sp, #40]	@ 0x28
 800497c:	f7ff fed4 	bl	8004728 <__cvt>
 8004980:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004982:	4680      	mov	r8, r0
 8004984:	2947      	cmp	r1, #71	@ 0x47
 8004986:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004988:	d128      	bne.n	80049dc <_printf_float+0x178>
 800498a:	1cc8      	adds	r0, r1, #3
 800498c:	db02      	blt.n	8004994 <_printf_float+0x130>
 800498e:	6863      	ldr	r3, [r4, #4]
 8004990:	4299      	cmp	r1, r3
 8004992:	dd40      	ble.n	8004a16 <_printf_float+0x1b2>
 8004994:	f1aa 0a02 	sub.w	sl, sl, #2
 8004998:	fa5f fa8a 	uxtb.w	sl, sl
 800499c:	4652      	mov	r2, sl
 800499e:	3901      	subs	r1, #1
 80049a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80049a6:	f7ff ff23 	bl	80047f0 <__exponent>
 80049aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049ac:	4681      	mov	r9, r0
 80049ae:	1813      	adds	r3, r2, r0
 80049b0:	2a01      	cmp	r2, #1
 80049b2:	6123      	str	r3, [r4, #16]
 80049b4:	dc02      	bgt.n	80049bc <_printf_float+0x158>
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	07d2      	lsls	r2, r2, #31
 80049ba:	d501      	bpl.n	80049c0 <_printf_float+0x15c>
 80049bc:	3301      	adds	r3, #1
 80049be:	6123      	str	r3, [r4, #16]
 80049c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d09e      	beq.n	8004906 <_printf_float+0xa2>
 80049c8:	232d      	movs	r3, #45	@ 0x2d
 80049ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ce:	e79a      	b.n	8004906 <_printf_float+0xa2>
 80049d0:	2947      	cmp	r1, #71	@ 0x47
 80049d2:	d1bf      	bne.n	8004954 <_printf_float+0xf0>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1bd      	bne.n	8004954 <_printf_float+0xf0>
 80049d8:	2301      	movs	r3, #1
 80049da:	e7ba      	b.n	8004952 <_printf_float+0xee>
 80049dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049e0:	d9dc      	bls.n	800499c <_printf_float+0x138>
 80049e2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80049e6:	d118      	bne.n	8004a1a <_printf_float+0x1b6>
 80049e8:	2900      	cmp	r1, #0
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	dd0b      	ble.n	8004a06 <_printf_float+0x1a2>
 80049ee:	6121      	str	r1, [r4, #16]
 80049f0:	b913      	cbnz	r3, 80049f8 <_printf_float+0x194>
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	07d0      	lsls	r0, r2, #31
 80049f6:	d502      	bpl.n	80049fe <_printf_float+0x19a>
 80049f8:	3301      	adds	r3, #1
 80049fa:	440b      	add	r3, r1
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	f04f 0900 	mov.w	r9, #0
 8004a02:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a04:	e7dc      	b.n	80049c0 <_printf_float+0x15c>
 8004a06:	b913      	cbnz	r3, 8004a0e <_printf_float+0x1aa>
 8004a08:	6822      	ldr	r2, [r4, #0]
 8004a0a:	07d2      	lsls	r2, r2, #31
 8004a0c:	d501      	bpl.n	8004a12 <_printf_float+0x1ae>
 8004a0e:	3302      	adds	r3, #2
 8004a10:	e7f4      	b.n	80049fc <_printf_float+0x198>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7f2      	b.n	80049fc <_printf_float+0x198>
 8004a16:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a1c:	4299      	cmp	r1, r3
 8004a1e:	db05      	blt.n	8004a2c <_printf_float+0x1c8>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	6121      	str	r1, [r4, #16]
 8004a24:	07d8      	lsls	r0, r3, #31
 8004a26:	d5ea      	bpl.n	80049fe <_printf_float+0x19a>
 8004a28:	1c4b      	adds	r3, r1, #1
 8004a2a:	e7e7      	b.n	80049fc <_printf_float+0x198>
 8004a2c:	2900      	cmp	r1, #0
 8004a2e:	bfcc      	ite	gt
 8004a30:	2201      	movgt	r2, #1
 8004a32:	f1c1 0202 	rsble	r2, r1, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	e7e0      	b.n	80049fc <_printf_float+0x198>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	055a      	lsls	r2, r3, #21
 8004a3e:	d407      	bmi.n	8004a50 <_printf_float+0x1ec>
 8004a40:	6923      	ldr	r3, [r4, #16]
 8004a42:	4642      	mov	r2, r8
 8004a44:	4631      	mov	r1, r6
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b8      	blx	r7
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d12b      	bne.n	8004aa6 <_printf_float+0x242>
 8004a4e:	e764      	b.n	800491a <_printf_float+0xb6>
 8004a50:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a54:	f240 80dc 	bls.w	8004c10 <_printf_float+0x3ac>
 8004a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f7fb ffa2 	bl	80009a8 <__aeabi_dcmpeq>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d033      	beq.n	8004ad0 <_printf_float+0x26c>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	4a35      	ldr	r2, [pc, #212]	@ (8004b44 <_printf_float+0x2e0>)
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	f43f af51 	beq.w	800491a <_printf_float+0xb6>
 8004a78:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004a7c:	4543      	cmp	r3, r8
 8004a7e:	db02      	blt.n	8004a86 <_printf_float+0x222>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	07d8      	lsls	r0, r3, #31
 8004a84:	d50f      	bpl.n	8004aa6 <_printf_float+0x242>
 8004a86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	f43f af42 	beq.w	800491a <_printf_float+0xb6>
 8004a96:	f04f 0900 	mov.w	r9, #0
 8004a9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a9e:	f104 0a1a 	add.w	sl, r4, #26
 8004aa2:	45c8      	cmp	r8, r9
 8004aa4:	dc09      	bgt.n	8004aba <_printf_float+0x256>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	079b      	lsls	r3, r3, #30
 8004aaa:	f100 8102 	bmi.w	8004cb2 <_printf_float+0x44e>
 8004aae:	68e0      	ldr	r0, [r4, #12]
 8004ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ab2:	4298      	cmp	r0, r3
 8004ab4:	bfb8      	it	lt
 8004ab6:	4618      	movlt	r0, r3
 8004ab8:	e731      	b.n	800491e <_printf_float+0xba>
 8004aba:	2301      	movs	r3, #1
 8004abc:	4652      	mov	r2, sl
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	47b8      	blx	r7
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	f43f af28 	beq.w	800491a <_printf_float+0xb6>
 8004aca:	f109 0901 	add.w	r9, r9, #1
 8004ace:	e7e8      	b.n	8004aa2 <_printf_float+0x23e>
 8004ad0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	dc38      	bgt.n	8004b48 <_printf_float+0x2e4>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4631      	mov	r1, r6
 8004ada:	4628      	mov	r0, r5
 8004adc:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <_printf_float+0x2e0>)
 8004ade:	47b8      	blx	r7
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	f43f af1a 	beq.w	800491a <_printf_float+0xb6>
 8004ae6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004aea:	ea59 0303 	orrs.w	r3, r9, r3
 8004aee:	d102      	bne.n	8004af6 <_printf_float+0x292>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	07d9      	lsls	r1, r3, #31
 8004af4:	d5d7      	bpl.n	8004aa6 <_printf_float+0x242>
 8004af6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004afa:	4631      	mov	r1, r6
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b8      	blx	r7
 8004b00:	3001      	adds	r0, #1
 8004b02:	f43f af0a 	beq.w	800491a <_printf_float+0xb6>
 8004b06:	f04f 0a00 	mov.w	sl, #0
 8004b0a:	f104 0b1a 	add.w	fp, r4, #26
 8004b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b10:	425b      	negs	r3, r3
 8004b12:	4553      	cmp	r3, sl
 8004b14:	dc01      	bgt.n	8004b1a <_printf_float+0x2b6>
 8004b16:	464b      	mov	r3, r9
 8004b18:	e793      	b.n	8004a42 <_printf_float+0x1de>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	465a      	mov	r2, fp
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4628      	mov	r0, r5
 8004b22:	47b8      	blx	r7
 8004b24:	3001      	adds	r0, #1
 8004b26:	f43f aef8 	beq.w	800491a <_printf_float+0xb6>
 8004b2a:	f10a 0a01 	add.w	sl, sl, #1
 8004b2e:	e7ee      	b.n	8004b0e <_printf_float+0x2aa>
 8004b30:	7fefffff 	.word	0x7fefffff
 8004b34:	08007d46 	.word	0x08007d46
 8004b38:	08007d4a 	.word	0x08007d4a
 8004b3c:	08007d4e 	.word	0x08007d4e
 8004b40:	08007d52 	.word	0x08007d52
 8004b44:	08007d56 	.word	0x08007d56
 8004b48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b4a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004b4e:	4553      	cmp	r3, sl
 8004b50:	bfa8      	it	ge
 8004b52:	4653      	movge	r3, sl
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	4699      	mov	r9, r3
 8004b58:	dc36      	bgt.n	8004bc8 <_printf_float+0x364>
 8004b5a:	f04f 0b00 	mov.w	fp, #0
 8004b5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b62:	f104 021a 	add.w	r2, r4, #26
 8004b66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b68:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b6a:	eba3 0309 	sub.w	r3, r3, r9
 8004b6e:	455b      	cmp	r3, fp
 8004b70:	dc31      	bgt.n	8004bd6 <_printf_float+0x372>
 8004b72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b74:	459a      	cmp	sl, r3
 8004b76:	dc3a      	bgt.n	8004bee <_printf_float+0x38a>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	07da      	lsls	r2, r3, #31
 8004b7c:	d437      	bmi.n	8004bee <_printf_float+0x38a>
 8004b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b80:	ebaa 0903 	sub.w	r9, sl, r3
 8004b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b86:	ebaa 0303 	sub.w	r3, sl, r3
 8004b8a:	4599      	cmp	r9, r3
 8004b8c:	bfa8      	it	ge
 8004b8e:	4699      	movge	r9, r3
 8004b90:	f1b9 0f00 	cmp.w	r9, #0
 8004b94:	dc33      	bgt.n	8004bfe <_printf_float+0x39a>
 8004b96:	f04f 0800 	mov.w	r8, #0
 8004b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b9e:	f104 0b1a 	add.w	fp, r4, #26
 8004ba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ba4:	ebaa 0303 	sub.w	r3, sl, r3
 8004ba8:	eba3 0309 	sub.w	r3, r3, r9
 8004bac:	4543      	cmp	r3, r8
 8004bae:	f77f af7a 	ble.w	8004aa6 <_printf_float+0x242>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	465a      	mov	r2, fp
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b8      	blx	r7
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	f43f aeac 	beq.w	800491a <_printf_float+0xb6>
 8004bc2:	f108 0801 	add.w	r8, r8, #1
 8004bc6:	e7ec      	b.n	8004ba2 <_printf_float+0x33e>
 8004bc8:	4642      	mov	r2, r8
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4628      	mov	r0, r5
 8004bce:	47b8      	blx	r7
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d1c2      	bne.n	8004b5a <_printf_float+0x2f6>
 8004bd4:	e6a1      	b.n	800491a <_printf_float+0xb6>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4631      	mov	r1, r6
 8004bda:	4628      	mov	r0, r5
 8004bdc:	920a      	str	r2, [sp, #40]	@ 0x28
 8004bde:	47b8      	blx	r7
 8004be0:	3001      	adds	r0, #1
 8004be2:	f43f ae9a 	beq.w	800491a <_printf_float+0xb6>
 8004be6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004be8:	f10b 0b01 	add.w	fp, fp, #1
 8004bec:	e7bb      	b.n	8004b66 <_printf_float+0x302>
 8004bee:	4631      	mov	r1, r6
 8004bf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d1c0      	bne.n	8004b7e <_printf_float+0x31a>
 8004bfc:	e68d      	b.n	800491a <_printf_float+0xb6>
 8004bfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c00:	464b      	mov	r3, r9
 8004c02:	4631      	mov	r1, r6
 8004c04:	4628      	mov	r0, r5
 8004c06:	4442      	add	r2, r8
 8004c08:	47b8      	blx	r7
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d1c3      	bne.n	8004b96 <_printf_float+0x332>
 8004c0e:	e684      	b.n	800491a <_printf_float+0xb6>
 8004c10:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c14:	f1ba 0f01 	cmp.w	sl, #1
 8004c18:	dc01      	bgt.n	8004c1e <_printf_float+0x3ba>
 8004c1a:	07db      	lsls	r3, r3, #31
 8004c1c:	d536      	bpl.n	8004c8c <_printf_float+0x428>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	4642      	mov	r2, r8
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f ae76 	beq.w	800491a <_printf_float+0xb6>
 8004c2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c32:	4631      	mov	r1, r6
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	f43f ae6e 	beq.w	800491a <_printf_float+0xb6>
 8004c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c42:	2200      	movs	r2, #0
 8004c44:	2300      	movs	r3, #0
 8004c46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c4a:	f7fb fead 	bl	80009a8 <__aeabi_dcmpeq>
 8004c4e:	b9c0      	cbnz	r0, 8004c82 <_printf_float+0x41e>
 8004c50:	4653      	mov	r3, sl
 8004c52:	f108 0201 	add.w	r2, r8, #1
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d10c      	bne.n	8004c7a <_printf_float+0x416>
 8004c60:	e65b      	b.n	800491a <_printf_float+0xb6>
 8004c62:	2301      	movs	r3, #1
 8004c64:	465a      	mov	r2, fp
 8004c66:	4631      	mov	r1, r6
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b8      	blx	r7
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	f43f ae54 	beq.w	800491a <_printf_float+0xb6>
 8004c72:	f108 0801 	add.w	r8, r8, #1
 8004c76:	45d0      	cmp	r8, sl
 8004c78:	dbf3      	blt.n	8004c62 <_printf_float+0x3fe>
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004c80:	e6e0      	b.n	8004a44 <_printf_float+0x1e0>
 8004c82:	f04f 0800 	mov.w	r8, #0
 8004c86:	f104 0b1a 	add.w	fp, r4, #26
 8004c8a:	e7f4      	b.n	8004c76 <_printf_float+0x412>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4642      	mov	r2, r8
 8004c90:	e7e1      	b.n	8004c56 <_printf_float+0x3f2>
 8004c92:	2301      	movs	r3, #1
 8004c94:	464a      	mov	r2, r9
 8004c96:	4631      	mov	r1, r6
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b8      	blx	r7
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	f43f ae3c 	beq.w	800491a <_printf_float+0xb6>
 8004ca2:	f108 0801 	add.w	r8, r8, #1
 8004ca6:	68e3      	ldr	r3, [r4, #12]
 8004ca8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004caa:	1a5b      	subs	r3, r3, r1
 8004cac:	4543      	cmp	r3, r8
 8004cae:	dcf0      	bgt.n	8004c92 <_printf_float+0x42e>
 8004cb0:	e6fd      	b.n	8004aae <_printf_float+0x24a>
 8004cb2:	f04f 0800 	mov.w	r8, #0
 8004cb6:	f104 0919 	add.w	r9, r4, #25
 8004cba:	e7f4      	b.n	8004ca6 <_printf_float+0x442>

08004cbc <_printf_common>:
 8004cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	4698      	mov	r8, r3
 8004cc4:	688a      	ldr	r2, [r1, #8]
 8004cc6:	690b      	ldr	r3, [r1, #16]
 8004cc8:	4607      	mov	r7, r0
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	bfb8      	it	lt
 8004cce:	4613      	movlt	r3, r2
 8004cd0:	6033      	str	r3, [r6, #0]
 8004cd2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cdc:	b10a      	cbz	r2, 8004ce2 <_printf_common+0x26>
 8004cde:	3301      	adds	r3, #1
 8004ce0:	6033      	str	r3, [r6, #0]
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	0699      	lsls	r1, r3, #26
 8004ce6:	bf42      	ittt	mi
 8004ce8:	6833      	ldrmi	r3, [r6, #0]
 8004cea:	3302      	addmi	r3, #2
 8004cec:	6033      	strmi	r3, [r6, #0]
 8004cee:	6825      	ldr	r5, [r4, #0]
 8004cf0:	f015 0506 	ands.w	r5, r5, #6
 8004cf4:	d106      	bne.n	8004d04 <_printf_common+0x48>
 8004cf6:	f104 0a19 	add.w	sl, r4, #25
 8004cfa:	68e3      	ldr	r3, [r4, #12]
 8004cfc:	6832      	ldr	r2, [r6, #0]
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	42ab      	cmp	r3, r5
 8004d02:	dc2b      	bgt.n	8004d5c <_printf_common+0xa0>
 8004d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	3b00      	subs	r3, #0
 8004d0c:	bf18      	it	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	0692      	lsls	r2, r2, #26
 8004d12:	d430      	bmi.n	8004d76 <_printf_common+0xba>
 8004d14:	4641      	mov	r1, r8
 8004d16:	4638      	mov	r0, r7
 8004d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d1c:	47c8      	blx	r9
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d023      	beq.n	8004d6a <_printf_common+0xae>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	6922      	ldr	r2, [r4, #16]
 8004d26:	f003 0306 	and.w	r3, r3, #6
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	bf14      	ite	ne
 8004d2e:	2500      	movne	r5, #0
 8004d30:	6833      	ldreq	r3, [r6, #0]
 8004d32:	f04f 0600 	mov.w	r6, #0
 8004d36:	bf08      	it	eq
 8004d38:	68e5      	ldreq	r5, [r4, #12]
 8004d3a:	f104 041a 	add.w	r4, r4, #26
 8004d3e:	bf08      	it	eq
 8004d40:	1aed      	subeq	r5, r5, r3
 8004d42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004d46:	bf08      	it	eq
 8004d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	bfc4      	itt	gt
 8004d50:	1a9b      	subgt	r3, r3, r2
 8004d52:	18ed      	addgt	r5, r5, r3
 8004d54:	42b5      	cmp	r5, r6
 8004d56:	d11a      	bne.n	8004d8e <_printf_common+0xd2>
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e008      	b.n	8004d6e <_printf_common+0xb2>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	4652      	mov	r2, sl
 8004d60:	4641      	mov	r1, r8
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c8      	blx	r9
 8004d66:	3001      	adds	r0, #1
 8004d68:	d103      	bne.n	8004d72 <_printf_common+0xb6>
 8004d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d72:	3501      	adds	r5, #1
 8004d74:	e7c1      	b.n	8004cfa <_printf_common+0x3e>
 8004d76:	2030      	movs	r0, #48	@ 0x30
 8004d78:	18e1      	adds	r1, r4, r3
 8004d7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d84:	4422      	add	r2, r4
 8004d86:	3302      	adds	r3, #2
 8004d88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d8c:	e7c2      	b.n	8004d14 <_printf_common+0x58>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4622      	mov	r2, r4
 8004d92:	4641      	mov	r1, r8
 8004d94:	4638      	mov	r0, r7
 8004d96:	47c8      	blx	r9
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d0e6      	beq.n	8004d6a <_printf_common+0xae>
 8004d9c:	3601      	adds	r6, #1
 8004d9e:	e7d9      	b.n	8004d54 <_printf_common+0x98>

08004da0 <_printf_i>:
 8004da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	7e0f      	ldrb	r7, [r1, #24]
 8004da6:	4691      	mov	r9, r2
 8004da8:	2f78      	cmp	r7, #120	@ 0x78
 8004daa:	4680      	mov	r8, r0
 8004dac:	460c      	mov	r4, r1
 8004dae:	469a      	mov	sl, r3
 8004db0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004db2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004db6:	d807      	bhi.n	8004dc8 <_printf_i+0x28>
 8004db8:	2f62      	cmp	r7, #98	@ 0x62
 8004dba:	d80a      	bhi.n	8004dd2 <_printf_i+0x32>
 8004dbc:	2f00      	cmp	r7, #0
 8004dbe:	f000 80d3 	beq.w	8004f68 <_printf_i+0x1c8>
 8004dc2:	2f58      	cmp	r7, #88	@ 0x58
 8004dc4:	f000 80ba 	beq.w	8004f3c <_printf_i+0x19c>
 8004dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004dd0:	e03a      	b.n	8004e48 <_printf_i+0xa8>
 8004dd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dd6:	2b15      	cmp	r3, #21
 8004dd8:	d8f6      	bhi.n	8004dc8 <_printf_i+0x28>
 8004dda:	a101      	add	r1, pc, #4	@ (adr r1, 8004de0 <_printf_i+0x40>)
 8004ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004de0:	08004e39 	.word	0x08004e39
 8004de4:	08004e4d 	.word	0x08004e4d
 8004de8:	08004dc9 	.word	0x08004dc9
 8004dec:	08004dc9 	.word	0x08004dc9
 8004df0:	08004dc9 	.word	0x08004dc9
 8004df4:	08004dc9 	.word	0x08004dc9
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004dc9 	.word	0x08004dc9
 8004e00:	08004dc9 	.word	0x08004dc9
 8004e04:	08004dc9 	.word	0x08004dc9
 8004e08:	08004dc9 	.word	0x08004dc9
 8004e0c:	08004f4f 	.word	0x08004f4f
 8004e10:	08004e77 	.word	0x08004e77
 8004e14:	08004f09 	.word	0x08004f09
 8004e18:	08004dc9 	.word	0x08004dc9
 8004e1c:	08004dc9 	.word	0x08004dc9
 8004e20:	08004f71 	.word	0x08004f71
 8004e24:	08004dc9 	.word	0x08004dc9
 8004e28:	08004e77 	.word	0x08004e77
 8004e2c:	08004dc9 	.word	0x08004dc9
 8004e30:	08004dc9 	.word	0x08004dc9
 8004e34:	08004f11 	.word	0x08004f11
 8004e38:	6833      	ldr	r3, [r6, #0]
 8004e3a:	1d1a      	adds	r2, r3, #4
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6032      	str	r2, [r6, #0]
 8004e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e09e      	b.n	8004f8a <_printf_i+0x1ea>
 8004e4c:	6833      	ldr	r3, [r6, #0]
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	1d19      	adds	r1, r3, #4
 8004e52:	6031      	str	r1, [r6, #0]
 8004e54:	0606      	lsls	r6, r0, #24
 8004e56:	d501      	bpl.n	8004e5c <_printf_i+0xbc>
 8004e58:	681d      	ldr	r5, [r3, #0]
 8004e5a:	e003      	b.n	8004e64 <_printf_i+0xc4>
 8004e5c:	0645      	lsls	r5, r0, #25
 8004e5e:	d5fb      	bpl.n	8004e58 <_printf_i+0xb8>
 8004e60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	da03      	bge.n	8004e70 <_printf_i+0xd0>
 8004e68:	232d      	movs	r3, #45	@ 0x2d
 8004e6a:	426d      	negs	r5, r5
 8004e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e70:	230a      	movs	r3, #10
 8004e72:	4859      	ldr	r0, [pc, #356]	@ (8004fd8 <_printf_i+0x238>)
 8004e74:	e011      	b.n	8004e9a <_printf_i+0xfa>
 8004e76:	6821      	ldr	r1, [r4, #0]
 8004e78:	6833      	ldr	r3, [r6, #0]
 8004e7a:	0608      	lsls	r0, r1, #24
 8004e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e80:	d402      	bmi.n	8004e88 <_printf_i+0xe8>
 8004e82:	0649      	lsls	r1, r1, #25
 8004e84:	bf48      	it	mi
 8004e86:	b2ad      	uxthmi	r5, r5
 8004e88:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e8a:	6033      	str	r3, [r6, #0]
 8004e8c:	bf14      	ite	ne
 8004e8e:	230a      	movne	r3, #10
 8004e90:	2308      	moveq	r3, #8
 8004e92:	4851      	ldr	r0, [pc, #324]	@ (8004fd8 <_printf_i+0x238>)
 8004e94:	2100      	movs	r1, #0
 8004e96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e9a:	6866      	ldr	r6, [r4, #4]
 8004e9c:	2e00      	cmp	r6, #0
 8004e9e:	bfa8      	it	ge
 8004ea0:	6821      	ldrge	r1, [r4, #0]
 8004ea2:	60a6      	str	r6, [r4, #8]
 8004ea4:	bfa4      	itt	ge
 8004ea6:	f021 0104 	bicge.w	r1, r1, #4
 8004eaa:	6021      	strge	r1, [r4, #0]
 8004eac:	b90d      	cbnz	r5, 8004eb2 <_printf_i+0x112>
 8004eae:	2e00      	cmp	r6, #0
 8004eb0:	d04b      	beq.n	8004f4a <_printf_i+0x1aa>
 8004eb2:	4616      	mov	r6, r2
 8004eb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eb8:	fb03 5711 	mls	r7, r3, r1, r5
 8004ebc:	5dc7      	ldrb	r7, [r0, r7]
 8004ebe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ec2:	462f      	mov	r7, r5
 8004ec4:	42bb      	cmp	r3, r7
 8004ec6:	460d      	mov	r5, r1
 8004ec8:	d9f4      	bls.n	8004eb4 <_printf_i+0x114>
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d10b      	bne.n	8004ee6 <_printf_i+0x146>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	07df      	lsls	r7, r3, #31
 8004ed2:	d508      	bpl.n	8004ee6 <_printf_i+0x146>
 8004ed4:	6923      	ldr	r3, [r4, #16]
 8004ed6:	6861      	ldr	r1, [r4, #4]
 8004ed8:	4299      	cmp	r1, r3
 8004eda:	bfde      	ittt	le
 8004edc:	2330      	movle	r3, #48	@ 0x30
 8004ede:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ee2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ee6:	1b92      	subs	r2, r2, r6
 8004ee8:	6122      	str	r2, [r4, #16]
 8004eea:	464b      	mov	r3, r9
 8004eec:	4621      	mov	r1, r4
 8004eee:	4640      	mov	r0, r8
 8004ef0:	f8cd a000 	str.w	sl, [sp]
 8004ef4:	aa03      	add	r2, sp, #12
 8004ef6:	f7ff fee1 	bl	8004cbc <_printf_common>
 8004efa:	3001      	adds	r0, #1
 8004efc:	d14a      	bne.n	8004f94 <_printf_i+0x1f4>
 8004efe:	f04f 30ff 	mov.w	r0, #4294967295
 8004f02:	b004      	add	sp, #16
 8004f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	f043 0320 	orr.w	r3, r3, #32
 8004f0e:	6023      	str	r3, [r4, #0]
 8004f10:	2778      	movs	r7, #120	@ 0x78
 8004f12:	4832      	ldr	r0, [pc, #200]	@ (8004fdc <_printf_i+0x23c>)
 8004f14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	6831      	ldr	r1, [r6, #0]
 8004f1c:	061f      	lsls	r7, r3, #24
 8004f1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f22:	d402      	bmi.n	8004f2a <_printf_i+0x18a>
 8004f24:	065f      	lsls	r7, r3, #25
 8004f26:	bf48      	it	mi
 8004f28:	b2ad      	uxthmi	r5, r5
 8004f2a:	6031      	str	r1, [r6, #0]
 8004f2c:	07d9      	lsls	r1, r3, #31
 8004f2e:	bf44      	itt	mi
 8004f30:	f043 0320 	orrmi.w	r3, r3, #32
 8004f34:	6023      	strmi	r3, [r4, #0]
 8004f36:	b11d      	cbz	r5, 8004f40 <_printf_i+0x1a0>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	e7ab      	b.n	8004e94 <_printf_i+0xf4>
 8004f3c:	4826      	ldr	r0, [pc, #152]	@ (8004fd8 <_printf_i+0x238>)
 8004f3e:	e7e9      	b.n	8004f14 <_printf_i+0x174>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	f023 0320 	bic.w	r3, r3, #32
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	e7f6      	b.n	8004f38 <_printf_i+0x198>
 8004f4a:	4616      	mov	r6, r2
 8004f4c:	e7bd      	b.n	8004eca <_printf_i+0x12a>
 8004f4e:	6833      	ldr	r3, [r6, #0]
 8004f50:	6825      	ldr	r5, [r4, #0]
 8004f52:	1d18      	adds	r0, r3, #4
 8004f54:	6961      	ldr	r1, [r4, #20]
 8004f56:	6030      	str	r0, [r6, #0]
 8004f58:	062e      	lsls	r6, r5, #24
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	d501      	bpl.n	8004f62 <_printf_i+0x1c2>
 8004f5e:	6019      	str	r1, [r3, #0]
 8004f60:	e002      	b.n	8004f68 <_printf_i+0x1c8>
 8004f62:	0668      	lsls	r0, r5, #25
 8004f64:	d5fb      	bpl.n	8004f5e <_printf_i+0x1be>
 8004f66:	8019      	strh	r1, [r3, #0]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4616      	mov	r6, r2
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	e7bc      	b.n	8004eea <_printf_i+0x14a>
 8004f70:	6833      	ldr	r3, [r6, #0]
 8004f72:	2100      	movs	r1, #0
 8004f74:	1d1a      	adds	r2, r3, #4
 8004f76:	6032      	str	r2, [r6, #0]
 8004f78:	681e      	ldr	r6, [r3, #0]
 8004f7a:	6862      	ldr	r2, [r4, #4]
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f000 fb22 	bl	80055c6 <memchr>
 8004f82:	b108      	cbz	r0, 8004f88 <_printf_i+0x1e8>
 8004f84:	1b80      	subs	r0, r0, r6
 8004f86:	6060      	str	r0, [r4, #4]
 8004f88:	6863      	ldr	r3, [r4, #4]
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f92:	e7aa      	b.n	8004eea <_printf_i+0x14a>
 8004f94:	4632      	mov	r2, r6
 8004f96:	4649      	mov	r1, r9
 8004f98:	4640      	mov	r0, r8
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	47d0      	blx	sl
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d0ad      	beq.n	8004efe <_printf_i+0x15e>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	079b      	lsls	r3, r3, #30
 8004fa6:	d413      	bmi.n	8004fd0 <_printf_i+0x230>
 8004fa8:	68e0      	ldr	r0, [r4, #12]
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	4298      	cmp	r0, r3
 8004fae:	bfb8      	it	lt
 8004fb0:	4618      	movlt	r0, r3
 8004fb2:	e7a6      	b.n	8004f02 <_printf_i+0x162>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	4649      	mov	r1, r9
 8004fba:	4640      	mov	r0, r8
 8004fbc:	47d0      	blx	sl
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d09d      	beq.n	8004efe <_printf_i+0x15e>
 8004fc2:	3501      	adds	r5, #1
 8004fc4:	68e3      	ldr	r3, [r4, #12]
 8004fc6:	9903      	ldr	r1, [sp, #12]
 8004fc8:	1a5b      	subs	r3, r3, r1
 8004fca:	42ab      	cmp	r3, r5
 8004fcc:	dcf2      	bgt.n	8004fb4 <_printf_i+0x214>
 8004fce:	e7eb      	b.n	8004fa8 <_printf_i+0x208>
 8004fd0:	2500      	movs	r5, #0
 8004fd2:	f104 0619 	add.w	r6, r4, #25
 8004fd6:	e7f5      	b.n	8004fc4 <_printf_i+0x224>
 8004fd8:	08007d58 	.word	0x08007d58
 8004fdc:	08007d69 	.word	0x08007d69

08004fe0 <std>:
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	b510      	push	{r4, lr}
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8004fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fee:	6083      	str	r3, [r0, #8]
 8004ff0:	8181      	strh	r1, [r0, #12]
 8004ff2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ff4:	81c2      	strh	r2, [r0, #14]
 8004ff6:	6183      	str	r3, [r0, #24]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	305c      	adds	r0, #92	@ 0x5c
 8004ffe:	f000 fa2d 	bl	800545c <memset>
 8005002:	4b0d      	ldr	r3, [pc, #52]	@ (8005038 <std+0x58>)
 8005004:	6224      	str	r4, [r4, #32]
 8005006:	6263      	str	r3, [r4, #36]	@ 0x24
 8005008:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <std+0x5c>)
 800500a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800500c:	4b0c      	ldr	r3, [pc, #48]	@ (8005040 <std+0x60>)
 800500e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005010:	4b0c      	ldr	r3, [pc, #48]	@ (8005044 <std+0x64>)
 8005012:	6323      	str	r3, [r4, #48]	@ 0x30
 8005014:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <std+0x68>)
 8005016:	429c      	cmp	r4, r3
 8005018:	d006      	beq.n	8005028 <std+0x48>
 800501a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800501e:	4294      	cmp	r4, r2
 8005020:	d002      	beq.n	8005028 <std+0x48>
 8005022:	33d0      	adds	r3, #208	@ 0xd0
 8005024:	429c      	cmp	r4, r3
 8005026:	d105      	bne.n	8005034 <std+0x54>
 8005028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800502c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005030:	f000 bac6 	b.w	80055c0 <__retarget_lock_init_recursive>
 8005034:	bd10      	pop	{r4, pc}
 8005036:	bf00      	nop
 8005038:	080052ad 	.word	0x080052ad
 800503c:	080052cf 	.word	0x080052cf
 8005040:	08005307 	.word	0x08005307
 8005044:	0800532b 	.word	0x0800532b
 8005048:	2000059c 	.word	0x2000059c

0800504c <stdio_exit_handler>:
 800504c:	4a02      	ldr	r2, [pc, #8]	@ (8005058 <stdio_exit_handler+0xc>)
 800504e:	4903      	ldr	r1, [pc, #12]	@ (800505c <stdio_exit_handler+0x10>)
 8005050:	4803      	ldr	r0, [pc, #12]	@ (8005060 <stdio_exit_handler+0x14>)
 8005052:	f000 b869 	b.w	8005128 <_fwalk_sglue>
 8005056:	bf00      	nop
 8005058:	200001bc 	.word	0x200001bc
 800505c:	080071b5 	.word	0x080071b5
 8005060:	200001cc 	.word	0x200001cc

08005064 <cleanup_stdio>:
 8005064:	6841      	ldr	r1, [r0, #4]
 8005066:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <cleanup_stdio+0x34>)
 8005068:	b510      	push	{r4, lr}
 800506a:	4299      	cmp	r1, r3
 800506c:	4604      	mov	r4, r0
 800506e:	d001      	beq.n	8005074 <cleanup_stdio+0x10>
 8005070:	f002 f8a0 	bl	80071b4 <_fflush_r>
 8005074:	68a1      	ldr	r1, [r4, #8]
 8005076:	4b09      	ldr	r3, [pc, #36]	@ (800509c <cleanup_stdio+0x38>)
 8005078:	4299      	cmp	r1, r3
 800507a:	d002      	beq.n	8005082 <cleanup_stdio+0x1e>
 800507c:	4620      	mov	r0, r4
 800507e:	f002 f899 	bl	80071b4 <_fflush_r>
 8005082:	68e1      	ldr	r1, [r4, #12]
 8005084:	4b06      	ldr	r3, [pc, #24]	@ (80050a0 <cleanup_stdio+0x3c>)
 8005086:	4299      	cmp	r1, r3
 8005088:	d004      	beq.n	8005094 <cleanup_stdio+0x30>
 800508a:	4620      	mov	r0, r4
 800508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005090:	f002 b890 	b.w	80071b4 <_fflush_r>
 8005094:	bd10      	pop	{r4, pc}
 8005096:	bf00      	nop
 8005098:	2000059c 	.word	0x2000059c
 800509c:	20000604 	.word	0x20000604
 80050a0:	2000066c 	.word	0x2000066c

080050a4 <global_stdio_init.part.0>:
 80050a4:	b510      	push	{r4, lr}
 80050a6:	4b0b      	ldr	r3, [pc, #44]	@ (80050d4 <global_stdio_init.part.0+0x30>)
 80050a8:	4c0b      	ldr	r4, [pc, #44]	@ (80050d8 <global_stdio_init.part.0+0x34>)
 80050aa:	4a0c      	ldr	r2, [pc, #48]	@ (80050dc <global_stdio_init.part.0+0x38>)
 80050ac:	4620      	mov	r0, r4
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	2104      	movs	r1, #4
 80050b2:	2200      	movs	r2, #0
 80050b4:	f7ff ff94 	bl	8004fe0 <std>
 80050b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050bc:	2201      	movs	r2, #1
 80050be:	2109      	movs	r1, #9
 80050c0:	f7ff ff8e 	bl	8004fe0 <std>
 80050c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050c8:	2202      	movs	r2, #2
 80050ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ce:	2112      	movs	r1, #18
 80050d0:	f7ff bf86 	b.w	8004fe0 <std>
 80050d4:	200006d4 	.word	0x200006d4
 80050d8:	2000059c 	.word	0x2000059c
 80050dc:	0800504d 	.word	0x0800504d

080050e0 <__sfp_lock_acquire>:
 80050e0:	4801      	ldr	r0, [pc, #4]	@ (80050e8 <__sfp_lock_acquire+0x8>)
 80050e2:	f000 ba6e 	b.w	80055c2 <__retarget_lock_acquire_recursive>
 80050e6:	bf00      	nop
 80050e8:	200006dd 	.word	0x200006dd

080050ec <__sfp_lock_release>:
 80050ec:	4801      	ldr	r0, [pc, #4]	@ (80050f4 <__sfp_lock_release+0x8>)
 80050ee:	f000 ba69 	b.w	80055c4 <__retarget_lock_release_recursive>
 80050f2:	bf00      	nop
 80050f4:	200006dd 	.word	0x200006dd

080050f8 <__sinit>:
 80050f8:	b510      	push	{r4, lr}
 80050fa:	4604      	mov	r4, r0
 80050fc:	f7ff fff0 	bl	80050e0 <__sfp_lock_acquire>
 8005100:	6a23      	ldr	r3, [r4, #32]
 8005102:	b11b      	cbz	r3, 800510c <__sinit+0x14>
 8005104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005108:	f7ff bff0 	b.w	80050ec <__sfp_lock_release>
 800510c:	4b04      	ldr	r3, [pc, #16]	@ (8005120 <__sinit+0x28>)
 800510e:	6223      	str	r3, [r4, #32]
 8005110:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <__sinit+0x2c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1f5      	bne.n	8005104 <__sinit+0xc>
 8005118:	f7ff ffc4 	bl	80050a4 <global_stdio_init.part.0>
 800511c:	e7f2      	b.n	8005104 <__sinit+0xc>
 800511e:	bf00      	nop
 8005120:	08005065 	.word	0x08005065
 8005124:	200006d4 	.word	0x200006d4

08005128 <_fwalk_sglue>:
 8005128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800512c:	4607      	mov	r7, r0
 800512e:	4688      	mov	r8, r1
 8005130:	4614      	mov	r4, r2
 8005132:	2600      	movs	r6, #0
 8005134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005138:	f1b9 0901 	subs.w	r9, r9, #1
 800513c:	d505      	bpl.n	800514a <_fwalk_sglue+0x22>
 800513e:	6824      	ldr	r4, [r4, #0]
 8005140:	2c00      	cmp	r4, #0
 8005142:	d1f7      	bne.n	8005134 <_fwalk_sglue+0xc>
 8005144:	4630      	mov	r0, r6
 8005146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800514a:	89ab      	ldrh	r3, [r5, #12]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d907      	bls.n	8005160 <_fwalk_sglue+0x38>
 8005150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005154:	3301      	adds	r3, #1
 8005156:	d003      	beq.n	8005160 <_fwalk_sglue+0x38>
 8005158:	4629      	mov	r1, r5
 800515a:	4638      	mov	r0, r7
 800515c:	47c0      	blx	r8
 800515e:	4306      	orrs	r6, r0
 8005160:	3568      	adds	r5, #104	@ 0x68
 8005162:	e7e9      	b.n	8005138 <_fwalk_sglue+0x10>

08005164 <iprintf>:
 8005164:	b40f      	push	{r0, r1, r2, r3}
 8005166:	b507      	push	{r0, r1, r2, lr}
 8005168:	4906      	ldr	r1, [pc, #24]	@ (8005184 <iprintf+0x20>)
 800516a:	ab04      	add	r3, sp, #16
 800516c:	6808      	ldr	r0, [r1, #0]
 800516e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005172:	6881      	ldr	r1, [r0, #8]
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	f001 fe85 	bl	8006e84 <_vfiprintf_r>
 800517a:	b003      	add	sp, #12
 800517c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005180:	b004      	add	sp, #16
 8005182:	4770      	bx	lr
 8005184:	200001c8 	.word	0x200001c8

08005188 <_puts_r>:
 8005188:	6a03      	ldr	r3, [r0, #32]
 800518a:	b570      	push	{r4, r5, r6, lr}
 800518c:	4605      	mov	r5, r0
 800518e:	460e      	mov	r6, r1
 8005190:	6884      	ldr	r4, [r0, #8]
 8005192:	b90b      	cbnz	r3, 8005198 <_puts_r+0x10>
 8005194:	f7ff ffb0 	bl	80050f8 <__sinit>
 8005198:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800519a:	07db      	lsls	r3, r3, #31
 800519c:	d405      	bmi.n	80051aa <_puts_r+0x22>
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	0598      	lsls	r0, r3, #22
 80051a2:	d402      	bmi.n	80051aa <_puts_r+0x22>
 80051a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051a6:	f000 fa0c 	bl	80055c2 <__retarget_lock_acquire_recursive>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	0719      	lsls	r1, r3, #28
 80051ae:	d502      	bpl.n	80051b6 <_puts_r+0x2e>
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d135      	bne.n	8005222 <_puts_r+0x9a>
 80051b6:	4621      	mov	r1, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 f8f9 	bl	80053b0 <__swsetup_r>
 80051be:	b380      	cbz	r0, 8005222 <_puts_r+0x9a>
 80051c0:	f04f 35ff 	mov.w	r5, #4294967295
 80051c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051c6:	07da      	lsls	r2, r3, #31
 80051c8:	d405      	bmi.n	80051d6 <_puts_r+0x4e>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	059b      	lsls	r3, r3, #22
 80051ce:	d402      	bmi.n	80051d6 <_puts_r+0x4e>
 80051d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051d2:	f000 f9f7 	bl	80055c4 <__retarget_lock_release_recursive>
 80051d6:	4628      	mov	r0, r5
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da04      	bge.n	80051e8 <_puts_r+0x60>
 80051de:	69a2      	ldr	r2, [r4, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	dc17      	bgt.n	8005214 <_puts_r+0x8c>
 80051e4:	290a      	cmp	r1, #10
 80051e6:	d015      	beq.n	8005214 <_puts_r+0x8c>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	6022      	str	r2, [r4, #0]
 80051ee:	7019      	strb	r1, [r3, #0]
 80051f0:	68a3      	ldr	r3, [r4, #8]
 80051f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051f6:	3b01      	subs	r3, #1
 80051f8:	60a3      	str	r3, [r4, #8]
 80051fa:	2900      	cmp	r1, #0
 80051fc:	d1ed      	bne.n	80051da <_puts_r+0x52>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da11      	bge.n	8005226 <_puts_r+0x9e>
 8005202:	4622      	mov	r2, r4
 8005204:	210a      	movs	r1, #10
 8005206:	4628      	mov	r0, r5
 8005208:	f000 f893 	bl	8005332 <__swbuf_r>
 800520c:	3001      	adds	r0, #1
 800520e:	d0d7      	beq.n	80051c0 <_puts_r+0x38>
 8005210:	250a      	movs	r5, #10
 8005212:	e7d7      	b.n	80051c4 <_puts_r+0x3c>
 8005214:	4622      	mov	r2, r4
 8005216:	4628      	mov	r0, r5
 8005218:	f000 f88b 	bl	8005332 <__swbuf_r>
 800521c:	3001      	adds	r0, #1
 800521e:	d1e7      	bne.n	80051f0 <_puts_r+0x68>
 8005220:	e7ce      	b.n	80051c0 <_puts_r+0x38>
 8005222:	3e01      	subs	r6, #1
 8005224:	e7e4      	b.n	80051f0 <_puts_r+0x68>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	6022      	str	r2, [r4, #0]
 800522c:	220a      	movs	r2, #10
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	e7ee      	b.n	8005210 <_puts_r+0x88>
	...

08005234 <puts>:
 8005234:	4b02      	ldr	r3, [pc, #8]	@ (8005240 <puts+0xc>)
 8005236:	4601      	mov	r1, r0
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f7ff bfa5 	b.w	8005188 <_puts_r>
 800523e:	bf00      	nop
 8005240:	200001c8 	.word	0x200001c8

08005244 <sniprintf>:
 8005244:	b40c      	push	{r2, r3}
 8005246:	b530      	push	{r4, r5, lr}
 8005248:	4b17      	ldr	r3, [pc, #92]	@ (80052a8 <sniprintf+0x64>)
 800524a:	1e0c      	subs	r4, r1, #0
 800524c:	681d      	ldr	r5, [r3, #0]
 800524e:	b09d      	sub	sp, #116	@ 0x74
 8005250:	da08      	bge.n	8005264 <sniprintf+0x20>
 8005252:	238b      	movs	r3, #139	@ 0x8b
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	b01d      	add	sp, #116	@ 0x74
 800525c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005260:	b002      	add	sp, #8
 8005262:	4770      	bx	lr
 8005264:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005268:	f8ad 3014 	strh.w	r3, [sp, #20]
 800526c:	bf0c      	ite	eq
 800526e:	4623      	moveq	r3, r4
 8005270:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	9307      	str	r3, [sp, #28]
 8005278:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800527c:	9002      	str	r0, [sp, #8]
 800527e:	9006      	str	r0, [sp, #24]
 8005280:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005284:	4628      	mov	r0, r5
 8005286:	ab21      	add	r3, sp, #132	@ 0x84
 8005288:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800528a:	a902      	add	r1, sp, #8
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	f001 fcd5 	bl	8006c3c <_svfiprintf_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	bfbc      	itt	lt
 8005296:	238b      	movlt	r3, #139	@ 0x8b
 8005298:	602b      	strlt	r3, [r5, #0]
 800529a:	2c00      	cmp	r4, #0
 800529c:	d0dd      	beq.n	800525a <sniprintf+0x16>
 800529e:	2200      	movs	r2, #0
 80052a0:	9b02      	ldr	r3, [sp, #8]
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	e7d9      	b.n	800525a <sniprintf+0x16>
 80052a6:	bf00      	nop
 80052a8:	200001c8 	.word	0x200001c8

080052ac <__sread>:
 80052ac:	b510      	push	{r4, lr}
 80052ae:	460c      	mov	r4, r1
 80052b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b4:	f000 f936 	bl	8005524 <_read_r>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	bfab      	itete	ge
 80052bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80052be:	89a3      	ldrhlt	r3, [r4, #12]
 80052c0:	181b      	addge	r3, r3, r0
 80052c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80052c6:	bfac      	ite	ge
 80052c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80052ca:	81a3      	strhlt	r3, [r4, #12]
 80052cc:	bd10      	pop	{r4, pc}

080052ce <__swrite>:
 80052ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d2:	461f      	mov	r7, r3
 80052d4:	898b      	ldrh	r3, [r1, #12]
 80052d6:	4605      	mov	r5, r0
 80052d8:	05db      	lsls	r3, r3, #23
 80052da:	460c      	mov	r4, r1
 80052dc:	4616      	mov	r6, r2
 80052de:	d505      	bpl.n	80052ec <__swrite+0x1e>
 80052e0:	2302      	movs	r3, #2
 80052e2:	2200      	movs	r2, #0
 80052e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e8:	f000 f90a 	bl	8005500 <_lseek_r>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	4632      	mov	r2, r6
 80052f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052f4:	81a3      	strh	r3, [r4, #12]
 80052f6:	4628      	mov	r0, r5
 80052f8:	463b      	mov	r3, r7
 80052fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005302:	f000 b921 	b.w	8005548 <_write_r>

08005306 <__sseek>:
 8005306:	b510      	push	{r4, lr}
 8005308:	460c      	mov	r4, r1
 800530a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530e:	f000 f8f7 	bl	8005500 <_lseek_r>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	bf15      	itete	ne
 8005318:	6560      	strne	r0, [r4, #84]	@ 0x54
 800531a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800531e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005322:	81a3      	strheq	r3, [r4, #12]
 8005324:	bf18      	it	ne
 8005326:	81a3      	strhne	r3, [r4, #12]
 8005328:	bd10      	pop	{r4, pc}

0800532a <__sclose>:
 800532a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532e:	f000 b8d7 	b.w	80054e0 <_close_r>

08005332 <__swbuf_r>:
 8005332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005334:	460e      	mov	r6, r1
 8005336:	4614      	mov	r4, r2
 8005338:	4605      	mov	r5, r0
 800533a:	b118      	cbz	r0, 8005344 <__swbuf_r+0x12>
 800533c:	6a03      	ldr	r3, [r0, #32]
 800533e:	b90b      	cbnz	r3, 8005344 <__swbuf_r+0x12>
 8005340:	f7ff feda 	bl	80050f8 <__sinit>
 8005344:	69a3      	ldr	r3, [r4, #24]
 8005346:	60a3      	str	r3, [r4, #8]
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	071a      	lsls	r2, r3, #28
 800534c:	d501      	bpl.n	8005352 <__swbuf_r+0x20>
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	b943      	cbnz	r3, 8005364 <__swbuf_r+0x32>
 8005352:	4621      	mov	r1, r4
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f82b 	bl	80053b0 <__swsetup_r>
 800535a:	b118      	cbz	r0, 8005364 <__swbuf_r+0x32>
 800535c:	f04f 37ff 	mov.w	r7, #4294967295
 8005360:	4638      	mov	r0, r7
 8005362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	6922      	ldr	r2, [r4, #16]
 8005368:	b2f6      	uxtb	r6, r6
 800536a:	1a98      	subs	r0, r3, r2
 800536c:	6963      	ldr	r3, [r4, #20]
 800536e:	4637      	mov	r7, r6
 8005370:	4283      	cmp	r3, r0
 8005372:	dc05      	bgt.n	8005380 <__swbuf_r+0x4e>
 8005374:	4621      	mov	r1, r4
 8005376:	4628      	mov	r0, r5
 8005378:	f001 ff1c 	bl	80071b4 <_fflush_r>
 800537c:	2800      	cmp	r0, #0
 800537e:	d1ed      	bne.n	800535c <__swbuf_r+0x2a>
 8005380:	68a3      	ldr	r3, [r4, #8]
 8005382:	3b01      	subs	r3, #1
 8005384:	60a3      	str	r3, [r4, #8]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	6022      	str	r2, [r4, #0]
 800538c:	701e      	strb	r6, [r3, #0]
 800538e:	6962      	ldr	r2, [r4, #20]
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	429a      	cmp	r2, r3
 8005394:	d004      	beq.n	80053a0 <__swbuf_r+0x6e>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	07db      	lsls	r3, r3, #31
 800539a:	d5e1      	bpl.n	8005360 <__swbuf_r+0x2e>
 800539c:	2e0a      	cmp	r6, #10
 800539e:	d1df      	bne.n	8005360 <__swbuf_r+0x2e>
 80053a0:	4621      	mov	r1, r4
 80053a2:	4628      	mov	r0, r5
 80053a4:	f001 ff06 	bl	80071b4 <_fflush_r>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d0d9      	beq.n	8005360 <__swbuf_r+0x2e>
 80053ac:	e7d6      	b.n	800535c <__swbuf_r+0x2a>
	...

080053b0 <__swsetup_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4b29      	ldr	r3, [pc, #164]	@ (8005458 <__swsetup_r+0xa8>)
 80053b4:	4605      	mov	r5, r0
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	460c      	mov	r4, r1
 80053ba:	b118      	cbz	r0, 80053c4 <__swsetup_r+0x14>
 80053bc:	6a03      	ldr	r3, [r0, #32]
 80053be:	b90b      	cbnz	r3, 80053c4 <__swsetup_r+0x14>
 80053c0:	f7ff fe9a 	bl	80050f8 <__sinit>
 80053c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c8:	0719      	lsls	r1, r3, #28
 80053ca:	d422      	bmi.n	8005412 <__swsetup_r+0x62>
 80053cc:	06da      	lsls	r2, r3, #27
 80053ce:	d407      	bmi.n	80053e0 <__swsetup_r+0x30>
 80053d0:	2209      	movs	r2, #9
 80053d2:	602a      	str	r2, [r5, #0]
 80053d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295
 80053dc:	81a3      	strh	r3, [r4, #12]
 80053de:	e033      	b.n	8005448 <__swsetup_r+0x98>
 80053e0:	0758      	lsls	r0, r3, #29
 80053e2:	d512      	bpl.n	800540a <__swsetup_r+0x5a>
 80053e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053e6:	b141      	cbz	r1, 80053fa <__swsetup_r+0x4a>
 80053e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053ec:	4299      	cmp	r1, r3
 80053ee:	d002      	beq.n	80053f6 <__swsetup_r+0x46>
 80053f0:	4628      	mov	r0, r5
 80053f2:	f000 ff49 	bl	8006288 <_free_r>
 80053f6:	2300      	movs	r3, #0
 80053f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80053fa:	89a3      	ldrh	r3, [r4, #12]
 80053fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005400:	81a3      	strh	r3, [r4, #12]
 8005402:	2300      	movs	r3, #0
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f043 0308 	orr.w	r3, r3, #8
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	b94b      	cbnz	r3, 800542a <__swsetup_r+0x7a>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800541c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005420:	d003      	beq.n	800542a <__swsetup_r+0x7a>
 8005422:	4621      	mov	r1, r4
 8005424:	4628      	mov	r0, r5
 8005426:	f001 ff12 	bl	800724e <__smakebuf_r>
 800542a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800542e:	f013 0201 	ands.w	r2, r3, #1
 8005432:	d00a      	beq.n	800544a <__swsetup_r+0x9a>
 8005434:	2200      	movs	r2, #0
 8005436:	60a2      	str	r2, [r4, #8]
 8005438:	6962      	ldr	r2, [r4, #20]
 800543a:	4252      	negs	r2, r2
 800543c:	61a2      	str	r2, [r4, #24]
 800543e:	6922      	ldr	r2, [r4, #16]
 8005440:	b942      	cbnz	r2, 8005454 <__swsetup_r+0xa4>
 8005442:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005446:	d1c5      	bne.n	80053d4 <__swsetup_r+0x24>
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	0799      	lsls	r1, r3, #30
 800544c:	bf58      	it	pl
 800544e:	6962      	ldrpl	r2, [r4, #20]
 8005450:	60a2      	str	r2, [r4, #8]
 8005452:	e7f4      	b.n	800543e <__swsetup_r+0x8e>
 8005454:	2000      	movs	r0, #0
 8005456:	e7f7      	b.n	8005448 <__swsetup_r+0x98>
 8005458:	200001c8 	.word	0x200001c8

0800545c <memset>:
 800545c:	4603      	mov	r3, r0
 800545e:	4402      	add	r2, r0
 8005460:	4293      	cmp	r3, r2
 8005462:	d100      	bne.n	8005466 <memset+0xa>
 8005464:	4770      	bx	lr
 8005466:	f803 1b01 	strb.w	r1, [r3], #1
 800546a:	e7f9      	b.n	8005460 <memset+0x4>

0800546c <strchr>:
 800546c:	4603      	mov	r3, r0
 800546e:	b2c9      	uxtb	r1, r1
 8005470:	4618      	mov	r0, r3
 8005472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005476:	b112      	cbz	r2, 800547e <strchr+0x12>
 8005478:	428a      	cmp	r2, r1
 800547a:	d1f9      	bne.n	8005470 <strchr+0x4>
 800547c:	4770      	bx	lr
 800547e:	2900      	cmp	r1, #0
 8005480:	bf18      	it	ne
 8005482:	2000      	movne	r0, #0
 8005484:	4770      	bx	lr

08005486 <strncpy>:
 8005486:	4603      	mov	r3, r0
 8005488:	b510      	push	{r4, lr}
 800548a:	3901      	subs	r1, #1
 800548c:	b132      	cbz	r2, 800549c <strncpy+0x16>
 800548e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005492:	3a01      	subs	r2, #1
 8005494:	f803 4b01 	strb.w	r4, [r3], #1
 8005498:	2c00      	cmp	r4, #0
 800549a:	d1f7      	bne.n	800548c <strncpy+0x6>
 800549c:	2100      	movs	r1, #0
 800549e:	441a      	add	r2, r3
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d100      	bne.n	80054a6 <strncpy+0x20>
 80054a4:	bd10      	pop	{r4, pc}
 80054a6:	f803 1b01 	strb.w	r1, [r3], #1
 80054aa:	e7f9      	b.n	80054a0 <strncpy+0x1a>

080054ac <strstr>:
 80054ac:	780a      	ldrb	r2, [r1, #0]
 80054ae:	b570      	push	{r4, r5, r6, lr}
 80054b0:	b96a      	cbnz	r2, 80054ce <strstr+0x22>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d109      	bne.n	80054cc <strstr+0x20>
 80054b8:	460c      	mov	r4, r1
 80054ba:	4605      	mov	r5, r0
 80054bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f6      	beq.n	80054b2 <strstr+0x6>
 80054c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80054c8:	429e      	cmp	r6, r3
 80054ca:	d0f7      	beq.n	80054bc <strstr+0x10>
 80054cc:	3001      	adds	r0, #1
 80054ce:	7803      	ldrb	r3, [r0, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1ef      	bne.n	80054b4 <strstr+0x8>
 80054d4:	4618      	mov	r0, r3
 80054d6:	e7ec      	b.n	80054b2 <strstr+0x6>

080054d8 <_localeconv_r>:
 80054d8:	4800      	ldr	r0, [pc, #0]	@ (80054dc <_localeconv_r+0x4>)
 80054da:	4770      	bx	lr
 80054dc:	20000308 	.word	0x20000308

080054e0 <_close_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	2300      	movs	r3, #0
 80054e4:	4d05      	ldr	r5, [pc, #20]	@ (80054fc <_close_r+0x1c>)
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	602b      	str	r3, [r5, #0]
 80054ec:	f7fc fb59 	bl	8001ba2 <_close>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_close_r+0x1a>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_close_r+0x1a>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	200006d8 	.word	0x200006d8

08005500 <_lseek_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	2200      	movs	r2, #0
 800550a:	4d05      	ldr	r5, [pc, #20]	@ (8005520 <_lseek_r+0x20>)
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fc fb6b 	bl	8001bea <_lseek>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_lseek_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_lseek_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200006d8 	.word	0x200006d8

08005524 <_read_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	2200      	movs	r2, #0
 800552e:	4d05      	ldr	r5, [pc, #20]	@ (8005544 <_read_r+0x20>)
 8005530:	602a      	str	r2, [r5, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fc fb18 	bl	8001b68 <_read>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_read_r+0x1e>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_read_r+0x1e>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	200006d8 	.word	0x200006d8

08005548 <_write_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	2200      	movs	r2, #0
 8005552:	4d05      	ldr	r5, [pc, #20]	@ (8005568 <_write_r+0x20>)
 8005554:	602a      	str	r2, [r5, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	f7fc f906 	bl	8001768 <_write>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_write_r+0x1e>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_write_r+0x1e>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	200006d8 	.word	0x200006d8

0800556c <__errno>:
 800556c:	4b01      	ldr	r3, [pc, #4]	@ (8005574 <__errno+0x8>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	200001c8 	.word	0x200001c8

08005578 <__libc_init_array>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	2600      	movs	r6, #0
 800557c:	4d0c      	ldr	r5, [pc, #48]	@ (80055b0 <__libc_init_array+0x38>)
 800557e:	4c0d      	ldr	r4, [pc, #52]	@ (80055b4 <__libc_init_array+0x3c>)
 8005580:	1b64      	subs	r4, r4, r5
 8005582:	10a4      	asrs	r4, r4, #2
 8005584:	42a6      	cmp	r6, r4
 8005586:	d109      	bne.n	800559c <__libc_init_array+0x24>
 8005588:	f001 ffde 	bl	8007548 <_init>
 800558c:	2600      	movs	r6, #0
 800558e:	4d0a      	ldr	r5, [pc, #40]	@ (80055b8 <__libc_init_array+0x40>)
 8005590:	4c0a      	ldr	r4, [pc, #40]	@ (80055bc <__libc_init_array+0x44>)
 8005592:	1b64      	subs	r4, r4, r5
 8005594:	10a4      	asrs	r4, r4, #2
 8005596:	42a6      	cmp	r6, r4
 8005598:	d105      	bne.n	80055a6 <__libc_init_array+0x2e>
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a0:	4798      	blx	r3
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7ee      	b.n	8005584 <__libc_init_array+0xc>
 80055a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055aa:	4798      	blx	r3
 80055ac:	3601      	adds	r6, #1
 80055ae:	e7f2      	b.n	8005596 <__libc_init_array+0x1e>
 80055b0:	080080c0 	.word	0x080080c0
 80055b4:	080080c0 	.word	0x080080c0
 80055b8:	080080c0 	.word	0x080080c0
 80055bc:	080080c4 	.word	0x080080c4

080055c0 <__retarget_lock_init_recursive>:
 80055c0:	4770      	bx	lr

080055c2 <__retarget_lock_acquire_recursive>:
 80055c2:	4770      	bx	lr

080055c4 <__retarget_lock_release_recursive>:
 80055c4:	4770      	bx	lr

080055c6 <memchr>:
 80055c6:	4603      	mov	r3, r0
 80055c8:	b510      	push	{r4, lr}
 80055ca:	b2c9      	uxtb	r1, r1
 80055cc:	4402      	add	r2, r0
 80055ce:	4293      	cmp	r3, r2
 80055d0:	4618      	mov	r0, r3
 80055d2:	d101      	bne.n	80055d8 <memchr+0x12>
 80055d4:	2000      	movs	r0, #0
 80055d6:	e003      	b.n	80055e0 <memchr+0x1a>
 80055d8:	7804      	ldrb	r4, [r0, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	428c      	cmp	r4, r1
 80055de:	d1f6      	bne.n	80055ce <memchr+0x8>
 80055e0:	bd10      	pop	{r4, pc}

080055e2 <quorem>:
 80055e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e6:	6903      	ldr	r3, [r0, #16]
 80055e8:	690c      	ldr	r4, [r1, #16]
 80055ea:	4607      	mov	r7, r0
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	db7e      	blt.n	80056ee <quorem+0x10c>
 80055f0:	3c01      	subs	r4, #1
 80055f2:	00a3      	lsls	r3, r4, #2
 80055f4:	f100 0514 	add.w	r5, r0, #20
 80055f8:	f101 0814 	add.w	r8, r1, #20
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800560c:	3301      	adds	r3, #1
 800560e:	429a      	cmp	r2, r3
 8005610:	fbb2 f6f3 	udiv	r6, r2, r3
 8005614:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005618:	d32e      	bcc.n	8005678 <quorem+0x96>
 800561a:	f04f 0a00 	mov.w	sl, #0
 800561e:	46c4      	mov	ip, r8
 8005620:	46ae      	mov	lr, r5
 8005622:	46d3      	mov	fp, sl
 8005624:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005628:	b298      	uxth	r0, r3
 800562a:	fb06 a000 	mla	r0, r6, r0, sl
 800562e:	0c1b      	lsrs	r3, r3, #16
 8005630:	0c02      	lsrs	r2, r0, #16
 8005632:	fb06 2303 	mla	r3, r6, r3, r2
 8005636:	f8de 2000 	ldr.w	r2, [lr]
 800563a:	b280      	uxth	r0, r0
 800563c:	b292      	uxth	r2, r2
 800563e:	1a12      	subs	r2, r2, r0
 8005640:	445a      	add	r2, fp
 8005642:	f8de 0000 	ldr.w	r0, [lr]
 8005646:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800564a:	b29b      	uxth	r3, r3
 800564c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005650:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005654:	b292      	uxth	r2, r2
 8005656:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800565a:	45e1      	cmp	r9, ip
 800565c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005660:	f84e 2b04 	str.w	r2, [lr], #4
 8005664:	d2de      	bcs.n	8005624 <quorem+0x42>
 8005666:	9b00      	ldr	r3, [sp, #0]
 8005668:	58eb      	ldr	r3, [r5, r3]
 800566a:	b92b      	cbnz	r3, 8005678 <quorem+0x96>
 800566c:	9b01      	ldr	r3, [sp, #4]
 800566e:	3b04      	subs	r3, #4
 8005670:	429d      	cmp	r5, r3
 8005672:	461a      	mov	r2, r3
 8005674:	d32f      	bcc.n	80056d6 <quorem+0xf4>
 8005676:	613c      	str	r4, [r7, #16]
 8005678:	4638      	mov	r0, r7
 800567a:	f001 f97b 	bl	8006974 <__mcmp>
 800567e:	2800      	cmp	r0, #0
 8005680:	db25      	blt.n	80056ce <quorem+0xec>
 8005682:	4629      	mov	r1, r5
 8005684:	2000      	movs	r0, #0
 8005686:	f858 2b04 	ldr.w	r2, [r8], #4
 800568a:	f8d1 c000 	ldr.w	ip, [r1]
 800568e:	fa1f fe82 	uxth.w	lr, r2
 8005692:	fa1f f38c 	uxth.w	r3, ip
 8005696:	eba3 030e 	sub.w	r3, r3, lr
 800569a:	4403      	add	r3, r0
 800569c:	0c12      	lsrs	r2, r2, #16
 800569e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ac:	45c1      	cmp	r9, r8
 80056ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056b2:	f841 3b04 	str.w	r3, [r1], #4
 80056b6:	d2e6      	bcs.n	8005686 <quorem+0xa4>
 80056b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056c0:	b922      	cbnz	r2, 80056cc <quorem+0xea>
 80056c2:	3b04      	subs	r3, #4
 80056c4:	429d      	cmp	r5, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	d30b      	bcc.n	80056e2 <quorem+0x100>
 80056ca:	613c      	str	r4, [r7, #16]
 80056cc:	3601      	adds	r6, #1
 80056ce:	4630      	mov	r0, r6
 80056d0:	b003      	add	sp, #12
 80056d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	3b04      	subs	r3, #4
 80056da:	2a00      	cmp	r2, #0
 80056dc:	d1cb      	bne.n	8005676 <quorem+0x94>
 80056de:	3c01      	subs	r4, #1
 80056e0:	e7c6      	b.n	8005670 <quorem+0x8e>
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	3b04      	subs	r3, #4
 80056e6:	2a00      	cmp	r2, #0
 80056e8:	d1ef      	bne.n	80056ca <quorem+0xe8>
 80056ea:	3c01      	subs	r4, #1
 80056ec:	e7ea      	b.n	80056c4 <quorem+0xe2>
 80056ee:	2000      	movs	r0, #0
 80056f0:	e7ee      	b.n	80056d0 <quorem+0xee>
 80056f2:	0000      	movs	r0, r0
 80056f4:	0000      	movs	r0, r0
	...

080056f8 <_dtoa_r>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	4614      	mov	r4, r2
 80056fe:	461d      	mov	r5, r3
 8005700:	69c7      	ldr	r7, [r0, #28]
 8005702:	b097      	sub	sp, #92	@ 0x5c
 8005704:	4683      	mov	fp, r0
 8005706:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800570a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800570c:	b97f      	cbnz	r7, 800572e <_dtoa_r+0x36>
 800570e:	2010      	movs	r0, #16
 8005710:	f000 fe02 	bl	8006318 <malloc>
 8005714:	4602      	mov	r2, r0
 8005716:	f8cb 001c 	str.w	r0, [fp, #28]
 800571a:	b920      	cbnz	r0, 8005726 <_dtoa_r+0x2e>
 800571c:	21ef      	movs	r1, #239	@ 0xef
 800571e:	4ba8      	ldr	r3, [pc, #672]	@ (80059c0 <_dtoa_r+0x2c8>)
 8005720:	48a8      	ldr	r0, [pc, #672]	@ (80059c4 <_dtoa_r+0x2cc>)
 8005722:	f001 fe2b 	bl	800737c <__assert_func>
 8005726:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800572a:	6007      	str	r7, [r0, #0]
 800572c:	60c7      	str	r7, [r0, #12]
 800572e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	b159      	cbz	r1, 800574e <_dtoa_r+0x56>
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	2301      	movs	r3, #1
 800573a:	4093      	lsls	r3, r2
 800573c:	604a      	str	r2, [r1, #4]
 800573e:	608b      	str	r3, [r1, #8]
 8005740:	4658      	mov	r0, fp
 8005742:	f000 fedf 	bl	8006504 <_Bfree>
 8005746:	2200      	movs	r2, #0
 8005748:	f8db 301c 	ldr.w	r3, [fp, #28]
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	1e2b      	subs	r3, r5, #0
 8005750:	bfaf      	iteee	ge
 8005752:	2300      	movge	r3, #0
 8005754:	2201      	movlt	r2, #1
 8005756:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800575a:	9303      	strlt	r3, [sp, #12]
 800575c:	bfa8      	it	ge
 800575e:	6033      	strge	r3, [r6, #0]
 8005760:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005764:	4b98      	ldr	r3, [pc, #608]	@ (80059c8 <_dtoa_r+0x2d0>)
 8005766:	bfb8      	it	lt
 8005768:	6032      	strlt	r2, [r6, #0]
 800576a:	ea33 0308 	bics.w	r3, r3, r8
 800576e:	d112      	bne.n	8005796 <_dtoa_r+0x9e>
 8005770:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005774:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800577c:	4323      	orrs	r3, r4
 800577e:	f000 8550 	beq.w	8006222 <_dtoa_r+0xb2a>
 8005782:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005784:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80059cc <_dtoa_r+0x2d4>
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8552 	beq.w	8006232 <_dtoa_r+0xb3a>
 800578e:	f10a 0303 	add.w	r3, sl, #3
 8005792:	f000 bd4c 	b.w	800622e <_dtoa_r+0xb36>
 8005796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800579a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800579e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057a2:	2200      	movs	r2, #0
 80057a4:	2300      	movs	r3, #0
 80057a6:	f7fb f8ff 	bl	80009a8 <__aeabi_dcmpeq>
 80057aa:	4607      	mov	r7, r0
 80057ac:	b158      	cbz	r0, 80057c6 <_dtoa_r+0xce>
 80057ae:	2301      	movs	r3, #1
 80057b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057b6:	b113      	cbz	r3, 80057be <_dtoa_r+0xc6>
 80057b8:	4b85      	ldr	r3, [pc, #532]	@ (80059d0 <_dtoa_r+0x2d8>)
 80057ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80059d4 <_dtoa_r+0x2dc>
 80057c2:	f000 bd36 	b.w	8006232 <_dtoa_r+0xb3a>
 80057c6:	ab14      	add	r3, sp, #80	@ 0x50
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	ab15      	add	r3, sp, #84	@ 0x54
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	4658      	mov	r0, fp
 80057d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80057d4:	f001 f97e 	bl	8006ad4 <__d2b>
 80057d8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80057dc:	4681      	mov	r9, r0
 80057de:	2e00      	cmp	r6, #0
 80057e0:	d077      	beq.n	80058d2 <_dtoa_r+0x1da>
 80057e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057e8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057f0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057f4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057f8:	9712      	str	r7, [sp, #72]	@ 0x48
 80057fa:	4619      	mov	r1, r3
 80057fc:	2200      	movs	r2, #0
 80057fe:	4b76      	ldr	r3, [pc, #472]	@ (80059d8 <_dtoa_r+0x2e0>)
 8005800:	f7fa fcb2 	bl	8000168 <__aeabi_dsub>
 8005804:	a368      	add	r3, pc, #416	@ (adr r3, 80059a8 <_dtoa_r+0x2b0>)
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f7fa fe65 	bl	80004d8 <__aeabi_dmul>
 800580e:	a368      	add	r3, pc, #416	@ (adr r3, 80059b0 <_dtoa_r+0x2b8>)
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	f7fa fcaa 	bl	800016c <__adddf3>
 8005818:	4604      	mov	r4, r0
 800581a:	4630      	mov	r0, r6
 800581c:	460d      	mov	r5, r1
 800581e:	f7fa fdf1 	bl	8000404 <__aeabi_i2d>
 8005822:	a365      	add	r3, pc, #404	@ (adr r3, 80059b8 <_dtoa_r+0x2c0>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f7fa fe56 	bl	80004d8 <__aeabi_dmul>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4620      	mov	r0, r4
 8005832:	4629      	mov	r1, r5
 8005834:	f7fa fc9a 	bl	800016c <__adddf3>
 8005838:	4604      	mov	r4, r0
 800583a:	460d      	mov	r5, r1
 800583c:	f7fb f8fc 	bl	8000a38 <__aeabi_d2iz>
 8005840:	2200      	movs	r2, #0
 8005842:	4607      	mov	r7, r0
 8005844:	2300      	movs	r3, #0
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f7fb f8b7 	bl	80009bc <__aeabi_dcmplt>
 800584e:	b140      	cbz	r0, 8005862 <_dtoa_r+0x16a>
 8005850:	4638      	mov	r0, r7
 8005852:	f7fa fdd7 	bl	8000404 <__aeabi_i2d>
 8005856:	4622      	mov	r2, r4
 8005858:	462b      	mov	r3, r5
 800585a:	f7fb f8a5 	bl	80009a8 <__aeabi_dcmpeq>
 800585e:	b900      	cbnz	r0, 8005862 <_dtoa_r+0x16a>
 8005860:	3f01      	subs	r7, #1
 8005862:	2f16      	cmp	r7, #22
 8005864:	d853      	bhi.n	800590e <_dtoa_r+0x216>
 8005866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800586a:	4b5c      	ldr	r3, [pc, #368]	@ (80059dc <_dtoa_r+0x2e4>)
 800586c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f7fb f8a2 	bl	80009bc <__aeabi_dcmplt>
 8005878:	2800      	cmp	r0, #0
 800587a:	d04a      	beq.n	8005912 <_dtoa_r+0x21a>
 800587c:	2300      	movs	r3, #0
 800587e:	3f01      	subs	r7, #1
 8005880:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005882:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005884:	1b9b      	subs	r3, r3, r6
 8005886:	1e5a      	subs	r2, r3, #1
 8005888:	bf46      	itte	mi
 800588a:	f1c3 0801 	rsbmi	r8, r3, #1
 800588e:	2300      	movmi	r3, #0
 8005890:	f04f 0800 	movpl.w	r8, #0
 8005894:	9209      	str	r2, [sp, #36]	@ 0x24
 8005896:	bf48      	it	mi
 8005898:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800589a:	2f00      	cmp	r7, #0
 800589c:	db3b      	blt.n	8005916 <_dtoa_r+0x21e>
 800589e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a0:	970e      	str	r7, [sp, #56]	@ 0x38
 80058a2:	443b      	add	r3, r7
 80058a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058a6:	2300      	movs	r3, #0
 80058a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80058aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058ac:	2b09      	cmp	r3, #9
 80058ae:	d866      	bhi.n	800597e <_dtoa_r+0x286>
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	bfc4      	itt	gt
 80058b4:	3b04      	subgt	r3, #4
 80058b6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80058b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058ba:	bfc8      	it	gt
 80058bc:	2400      	movgt	r4, #0
 80058be:	f1a3 0302 	sub.w	r3, r3, #2
 80058c2:	bfd8      	it	le
 80058c4:	2401      	movle	r4, #1
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d864      	bhi.n	8005994 <_dtoa_r+0x29c>
 80058ca:	e8df f003 	tbb	[pc, r3]
 80058ce:	382b      	.short	0x382b
 80058d0:	5636      	.short	0x5636
 80058d2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058d6:	441e      	add	r6, r3
 80058d8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058dc:	2b20      	cmp	r3, #32
 80058de:	bfc1      	itttt	gt
 80058e0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80058e8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058ec:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058f0:	bfd6      	itet	le
 80058f2:	f1c3 0320 	rsble	r3, r3, #32
 80058f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80058fa:	fa04 f003 	lslle.w	r0, r4, r3
 80058fe:	f7fa fd71 	bl	80003e4 <__aeabi_ui2d>
 8005902:	2201      	movs	r2, #1
 8005904:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005908:	3e01      	subs	r6, #1
 800590a:	9212      	str	r2, [sp, #72]	@ 0x48
 800590c:	e775      	b.n	80057fa <_dtoa_r+0x102>
 800590e:	2301      	movs	r3, #1
 8005910:	e7b6      	b.n	8005880 <_dtoa_r+0x188>
 8005912:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005914:	e7b5      	b.n	8005882 <_dtoa_r+0x18a>
 8005916:	427b      	negs	r3, r7
 8005918:	930a      	str	r3, [sp, #40]	@ 0x28
 800591a:	2300      	movs	r3, #0
 800591c:	eba8 0807 	sub.w	r8, r8, r7
 8005920:	930e      	str	r3, [sp, #56]	@ 0x38
 8005922:	e7c2      	b.n	80058aa <_dtoa_r+0x1b2>
 8005924:	2300      	movs	r3, #0
 8005926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005928:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800592a:	2b00      	cmp	r3, #0
 800592c:	dc35      	bgt.n	800599a <_dtoa_r+0x2a2>
 800592e:	2301      	movs	r3, #1
 8005930:	461a      	mov	r2, r3
 8005932:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005936:	9221      	str	r2, [sp, #132]	@ 0x84
 8005938:	e00b      	b.n	8005952 <_dtoa_r+0x25a>
 800593a:	2301      	movs	r3, #1
 800593c:	e7f3      	b.n	8005926 <_dtoa_r+0x22e>
 800593e:	2300      	movs	r3, #0
 8005940:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005942:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	9308      	str	r3, [sp, #32]
 8005948:	3301      	adds	r3, #1
 800594a:	2b01      	cmp	r3, #1
 800594c:	9307      	str	r3, [sp, #28]
 800594e:	bfb8      	it	lt
 8005950:	2301      	movlt	r3, #1
 8005952:	2100      	movs	r1, #0
 8005954:	2204      	movs	r2, #4
 8005956:	f8db 001c 	ldr.w	r0, [fp, #28]
 800595a:	f102 0514 	add.w	r5, r2, #20
 800595e:	429d      	cmp	r5, r3
 8005960:	d91f      	bls.n	80059a2 <_dtoa_r+0x2aa>
 8005962:	6041      	str	r1, [r0, #4]
 8005964:	4658      	mov	r0, fp
 8005966:	f000 fd8d 	bl	8006484 <_Balloc>
 800596a:	4682      	mov	sl, r0
 800596c:	2800      	cmp	r0, #0
 800596e:	d139      	bne.n	80059e4 <_dtoa_r+0x2ec>
 8005970:	4602      	mov	r2, r0
 8005972:	f240 11af 	movw	r1, #431	@ 0x1af
 8005976:	4b1a      	ldr	r3, [pc, #104]	@ (80059e0 <_dtoa_r+0x2e8>)
 8005978:	e6d2      	b.n	8005720 <_dtoa_r+0x28>
 800597a:	2301      	movs	r3, #1
 800597c:	e7e0      	b.n	8005940 <_dtoa_r+0x248>
 800597e:	2401      	movs	r4, #1
 8005980:	2300      	movs	r3, #0
 8005982:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005984:	9320      	str	r3, [sp, #128]	@ 0x80
 8005986:	f04f 33ff 	mov.w	r3, #4294967295
 800598a:	2200      	movs	r2, #0
 800598c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005990:	2312      	movs	r3, #18
 8005992:	e7d0      	b.n	8005936 <_dtoa_r+0x23e>
 8005994:	2301      	movs	r3, #1
 8005996:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005998:	e7f5      	b.n	8005986 <_dtoa_r+0x28e>
 800599a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800599c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80059a0:	e7d7      	b.n	8005952 <_dtoa_r+0x25a>
 80059a2:	3101      	adds	r1, #1
 80059a4:	0052      	lsls	r2, r2, #1
 80059a6:	e7d8      	b.n	800595a <_dtoa_r+0x262>
 80059a8:	636f4361 	.word	0x636f4361
 80059ac:	3fd287a7 	.word	0x3fd287a7
 80059b0:	8b60c8b3 	.word	0x8b60c8b3
 80059b4:	3fc68a28 	.word	0x3fc68a28
 80059b8:	509f79fb 	.word	0x509f79fb
 80059bc:	3fd34413 	.word	0x3fd34413
 80059c0:	08007d87 	.word	0x08007d87
 80059c4:	08007d9e 	.word	0x08007d9e
 80059c8:	7ff00000 	.word	0x7ff00000
 80059cc:	08007d83 	.word	0x08007d83
 80059d0:	08007d57 	.word	0x08007d57
 80059d4:	08007d56 	.word	0x08007d56
 80059d8:	3ff80000 	.word	0x3ff80000
 80059dc:	08007e98 	.word	0x08007e98
 80059e0:	08007df6 	.word	0x08007df6
 80059e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059e8:	6018      	str	r0, [r3, #0]
 80059ea:	9b07      	ldr	r3, [sp, #28]
 80059ec:	2b0e      	cmp	r3, #14
 80059ee:	f200 80a4 	bhi.w	8005b3a <_dtoa_r+0x442>
 80059f2:	2c00      	cmp	r4, #0
 80059f4:	f000 80a1 	beq.w	8005b3a <_dtoa_r+0x442>
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	dd33      	ble.n	8005a64 <_dtoa_r+0x36c>
 80059fc:	4b86      	ldr	r3, [pc, #536]	@ (8005c18 <_dtoa_r+0x520>)
 80059fe:	f007 020f 	and.w	r2, r7, #15
 8005a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a06:	05f8      	lsls	r0, r7, #23
 8005a08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a14:	d516      	bpl.n	8005a44 <_dtoa_r+0x34c>
 8005a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a1a:	4b80      	ldr	r3, [pc, #512]	@ (8005c1c <_dtoa_r+0x524>)
 8005a1c:	2603      	movs	r6, #3
 8005a1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a22:	f7fa fe83 	bl	800072c <__aeabi_ddiv>
 8005a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a2a:	f004 040f 	and.w	r4, r4, #15
 8005a2e:	4d7b      	ldr	r5, [pc, #492]	@ (8005c1c <_dtoa_r+0x524>)
 8005a30:	b954      	cbnz	r4, 8005a48 <_dtoa_r+0x350>
 8005a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a3a:	f7fa fe77 	bl	800072c <__aeabi_ddiv>
 8005a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a42:	e028      	b.n	8005a96 <_dtoa_r+0x39e>
 8005a44:	2602      	movs	r6, #2
 8005a46:	e7f2      	b.n	8005a2e <_dtoa_r+0x336>
 8005a48:	07e1      	lsls	r1, r4, #31
 8005a4a:	d508      	bpl.n	8005a5e <_dtoa_r+0x366>
 8005a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a54:	f7fa fd40 	bl	80004d8 <__aeabi_dmul>
 8005a58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	1064      	asrs	r4, r4, #1
 8005a60:	3508      	adds	r5, #8
 8005a62:	e7e5      	b.n	8005a30 <_dtoa_r+0x338>
 8005a64:	f000 80d2 	beq.w	8005c0c <_dtoa_r+0x514>
 8005a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a6c:	427c      	negs	r4, r7
 8005a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005c18 <_dtoa_r+0x520>)
 8005a70:	f004 020f 	and.w	r2, r4, #15
 8005a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fd2c 	bl	80004d8 <__aeabi_dmul>
 8005a80:	2602      	movs	r6, #2
 8005a82:	2300      	movs	r3, #0
 8005a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a88:	4d64      	ldr	r5, [pc, #400]	@ (8005c1c <_dtoa_r+0x524>)
 8005a8a:	1124      	asrs	r4, r4, #4
 8005a8c:	2c00      	cmp	r4, #0
 8005a8e:	f040 80b2 	bne.w	8005bf6 <_dtoa_r+0x4fe>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1d3      	bne.n	8005a3e <_dtoa_r+0x346>
 8005a96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80b7 	beq.w	8005c10 <_dtoa_r+0x518>
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8005c20 <_dtoa_r+0x528>)
 8005aaa:	f7fa ff87 	bl	80009bc <__aeabi_dcmplt>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	f000 80ae 	beq.w	8005c10 <_dtoa_r+0x518>
 8005ab4:	9b07      	ldr	r3, [sp, #28]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 80aa 	beq.w	8005c10 <_dtoa_r+0x518>
 8005abc:	9b08      	ldr	r3, [sp, #32]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	dd37      	ble.n	8005b32 <_dtoa_r+0x43a>
 8005ac2:	1e7b      	subs	r3, r7, #1
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	9304      	str	r3, [sp, #16]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4629      	mov	r1, r5
 8005acc:	4b55      	ldr	r3, [pc, #340]	@ (8005c24 <_dtoa_r+0x52c>)
 8005ace:	f7fa fd03 	bl	80004d8 <__aeabi_dmul>
 8005ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad6:	9c08      	ldr	r4, [sp, #32]
 8005ad8:	3601      	adds	r6, #1
 8005ada:	4630      	mov	r0, r6
 8005adc:	f7fa fc92 	bl	8000404 <__aeabi_i2d>
 8005ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ae4:	f7fa fcf8 	bl	80004d8 <__aeabi_dmul>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4b4f      	ldr	r3, [pc, #316]	@ (8005c28 <_dtoa_r+0x530>)
 8005aec:	f7fa fb3e 	bl	800016c <__adddf3>
 8005af0:	4605      	mov	r5, r0
 8005af2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005af6:	2c00      	cmp	r4, #0
 8005af8:	f040 809a 	bne.w	8005c30 <_dtoa_r+0x538>
 8005afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	4b4a      	ldr	r3, [pc, #296]	@ (8005c2c <_dtoa_r+0x534>)
 8005b04:	f7fa fb30 	bl	8000168 <__aeabi_dsub>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b10:	462a      	mov	r2, r5
 8005b12:	4633      	mov	r3, r6
 8005b14:	f7fa ff70 	bl	80009f8 <__aeabi_dcmpgt>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	f040 828e 	bne.w	800603a <_dtoa_r+0x942>
 8005b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b22:	462a      	mov	r2, r5
 8005b24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b28:	f7fa ff48 	bl	80009bc <__aeabi_dcmplt>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f040 8127 	bne.w	8005d80 <_dtoa_r+0x688>
 8005b32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f2c0 8163 	blt.w	8005e08 <_dtoa_r+0x710>
 8005b42:	2f0e      	cmp	r7, #14
 8005b44:	f300 8160 	bgt.w	8005e08 <_dtoa_r+0x710>
 8005b48:	4b33      	ldr	r3, [pc, #204]	@ (8005c18 <_dtoa_r+0x520>)
 8005b4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	da03      	bge.n	8005b64 <_dtoa_r+0x46c>
 8005b5c:	9b07      	ldr	r3, [sp, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f340 8100 	ble.w	8005d64 <_dtoa_r+0x66c>
 8005b64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b68:	4656      	mov	r6, sl
 8005b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa fddb 	bl	800072c <__aeabi_ddiv>
 8005b76:	f7fa ff5f 	bl	8000a38 <__aeabi_d2iz>
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	f7fa fc42 	bl	8000404 <__aeabi_i2d>
 8005b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b84:	f7fa fca8 	bl	80004d8 <__aeabi_dmul>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	4629      	mov	r1, r5
 8005b90:	f7fa faea 	bl	8000168 <__aeabi_dsub>
 8005b94:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b98:	9d07      	ldr	r5, [sp, #28]
 8005b9a:	f806 4b01 	strb.w	r4, [r6], #1
 8005b9e:	eba6 040a 	sub.w	r4, r6, sl
 8005ba2:	42a5      	cmp	r5, r4
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	f040 8116 	bne.w	8005dd8 <_dtoa_r+0x6e0>
 8005bac:	f7fa fade 	bl	800016c <__adddf3>
 8005bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	f7fa ff1e 	bl	80009f8 <__aeabi_dcmpgt>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f040 80f8 	bne.w	8005db2 <_dtoa_r+0x6ba>
 8005bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f7fa feed 	bl	80009a8 <__aeabi_dcmpeq>
 8005bce:	b118      	cbz	r0, 8005bd8 <_dtoa_r+0x4e0>
 8005bd0:	f018 0f01 	tst.w	r8, #1
 8005bd4:	f040 80ed 	bne.w	8005db2 <_dtoa_r+0x6ba>
 8005bd8:	4649      	mov	r1, r9
 8005bda:	4658      	mov	r0, fp
 8005bdc:	f000 fc92 	bl	8006504 <_Bfree>
 8005be0:	2300      	movs	r3, #0
 8005be2:	7033      	strb	r3, [r6, #0]
 8005be4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005be6:	3701      	adds	r7, #1
 8005be8:	601f      	str	r7, [r3, #0]
 8005bea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8320 	beq.w	8006232 <_dtoa_r+0xb3a>
 8005bf2:	601e      	str	r6, [r3, #0]
 8005bf4:	e31d      	b.n	8006232 <_dtoa_r+0xb3a>
 8005bf6:	07e2      	lsls	r2, r4, #31
 8005bf8:	d505      	bpl.n	8005c06 <_dtoa_r+0x50e>
 8005bfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bfe:	f7fa fc6b 	bl	80004d8 <__aeabi_dmul>
 8005c02:	2301      	movs	r3, #1
 8005c04:	3601      	adds	r6, #1
 8005c06:	1064      	asrs	r4, r4, #1
 8005c08:	3508      	adds	r5, #8
 8005c0a:	e73f      	b.n	8005a8c <_dtoa_r+0x394>
 8005c0c:	2602      	movs	r6, #2
 8005c0e:	e742      	b.n	8005a96 <_dtoa_r+0x39e>
 8005c10:	9c07      	ldr	r4, [sp, #28]
 8005c12:	9704      	str	r7, [sp, #16]
 8005c14:	e761      	b.n	8005ada <_dtoa_r+0x3e2>
 8005c16:	bf00      	nop
 8005c18:	08007e98 	.word	0x08007e98
 8005c1c:	08007e70 	.word	0x08007e70
 8005c20:	3ff00000 	.word	0x3ff00000
 8005c24:	40240000 	.word	0x40240000
 8005c28:	401c0000 	.word	0x401c0000
 8005c2c:	40140000 	.word	0x40140000
 8005c30:	4b70      	ldr	r3, [pc, #448]	@ (8005df4 <_dtoa_r+0x6fc>)
 8005c32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c3c:	4454      	add	r4, sl
 8005c3e:	2900      	cmp	r1, #0
 8005c40:	d045      	beq.n	8005cce <_dtoa_r+0x5d6>
 8005c42:	2000      	movs	r0, #0
 8005c44:	496c      	ldr	r1, [pc, #432]	@ (8005df8 <_dtoa_r+0x700>)
 8005c46:	f7fa fd71 	bl	800072c <__aeabi_ddiv>
 8005c4a:	4633      	mov	r3, r6
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	f7fa fa8b 	bl	8000168 <__aeabi_dsub>
 8005c52:	4656      	mov	r6, sl
 8005c54:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c5c:	f7fa feec 	bl	8000a38 <__aeabi_d2iz>
 8005c60:	4605      	mov	r5, r0
 8005c62:	f7fa fbcf 	bl	8000404 <__aeabi_i2d>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c6e:	f7fa fa7b 	bl	8000168 <__aeabi_dsub>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	3530      	adds	r5, #48	@ 0x30
 8005c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c80:	f806 5b01 	strb.w	r5, [r6], #1
 8005c84:	f7fa fe9a 	bl	80009bc <__aeabi_dcmplt>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d163      	bne.n	8005d54 <_dtoa_r+0x65c>
 8005c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c90:	2000      	movs	r0, #0
 8005c92:	495a      	ldr	r1, [pc, #360]	@ (8005dfc <_dtoa_r+0x704>)
 8005c94:	f7fa fa68 	bl	8000168 <__aeabi_dsub>
 8005c98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c9c:	f7fa fe8e 	bl	80009bc <__aeabi_dcmplt>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	f040 8087 	bne.w	8005db4 <_dtoa_r+0x6bc>
 8005ca6:	42a6      	cmp	r6, r4
 8005ca8:	f43f af43 	beq.w	8005b32 <_dtoa_r+0x43a>
 8005cac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	4b53      	ldr	r3, [pc, #332]	@ (8005e00 <_dtoa_r+0x708>)
 8005cb4:	f7fa fc10 	bl	80004d8 <__aeabi_dmul>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8005e00 <_dtoa_r+0x708>)
 8005cc4:	f7fa fc08 	bl	80004d8 <__aeabi_dmul>
 8005cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ccc:	e7c4      	b.n	8005c58 <_dtoa_r+0x560>
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7fa fc01 	bl	80004d8 <__aeabi_dmul>
 8005cd6:	4656      	mov	r6, sl
 8005cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cdc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ce2:	f7fa fea9 	bl	8000a38 <__aeabi_d2iz>
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	f7fa fb8c 	bl	8000404 <__aeabi_i2d>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf4:	f7fa fa38 	bl	8000168 <__aeabi_dsub>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	3530      	adds	r5, #48	@ 0x30
 8005cfe:	f806 5b01 	strb.w	r5, [r6], #1
 8005d02:	42a6      	cmp	r6, r4
 8005d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	d124      	bne.n	8005d58 <_dtoa_r+0x660>
 8005d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d12:	4b39      	ldr	r3, [pc, #228]	@ (8005df8 <_dtoa_r+0x700>)
 8005d14:	f7fa fa2a 	bl	800016c <__adddf3>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d20:	f7fa fe6a 	bl	80009f8 <__aeabi_dcmpgt>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d145      	bne.n	8005db4 <_dtoa_r+0x6bc>
 8005d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	4932      	ldr	r1, [pc, #200]	@ (8005df8 <_dtoa_r+0x700>)
 8005d30:	f7fa fa1a 	bl	8000168 <__aeabi_dsub>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d3c:	f7fa fe3e 	bl	80009bc <__aeabi_dcmplt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	f43f aef6 	beq.w	8005b32 <_dtoa_r+0x43a>
 8005d46:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005d48:	1e73      	subs	r3, r6, #1
 8005d4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d50:	2b30      	cmp	r3, #48	@ 0x30
 8005d52:	d0f8      	beq.n	8005d46 <_dtoa_r+0x64e>
 8005d54:	9f04      	ldr	r7, [sp, #16]
 8005d56:	e73f      	b.n	8005bd8 <_dtoa_r+0x4e0>
 8005d58:	4b29      	ldr	r3, [pc, #164]	@ (8005e00 <_dtoa_r+0x708>)
 8005d5a:	f7fa fbbd 	bl	80004d8 <__aeabi_dmul>
 8005d5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d62:	e7bc      	b.n	8005cde <_dtoa_r+0x5e6>
 8005d64:	d10c      	bne.n	8005d80 <_dtoa_r+0x688>
 8005d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4b25      	ldr	r3, [pc, #148]	@ (8005e04 <_dtoa_r+0x70c>)
 8005d6e:	f7fa fbb3 	bl	80004d8 <__aeabi_dmul>
 8005d72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d76:	f7fa fe35 	bl	80009e4 <__aeabi_dcmpge>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f000 815b 	beq.w	8006036 <_dtoa_r+0x93e>
 8005d80:	2400      	movs	r4, #0
 8005d82:	4625      	mov	r5, r4
 8005d84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d86:	4656      	mov	r6, sl
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	9304      	str	r3, [sp, #16]
 8005d8c:	2700      	movs	r7, #0
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4658      	mov	r0, fp
 8005d92:	f000 fbb7 	bl	8006504 <_Bfree>
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	d0dc      	beq.n	8005d54 <_dtoa_r+0x65c>
 8005d9a:	b12f      	cbz	r7, 8005da8 <_dtoa_r+0x6b0>
 8005d9c:	42af      	cmp	r7, r5
 8005d9e:	d003      	beq.n	8005da8 <_dtoa_r+0x6b0>
 8005da0:	4639      	mov	r1, r7
 8005da2:	4658      	mov	r0, fp
 8005da4:	f000 fbae 	bl	8006504 <_Bfree>
 8005da8:	4629      	mov	r1, r5
 8005daa:	4658      	mov	r0, fp
 8005dac:	f000 fbaa 	bl	8006504 <_Bfree>
 8005db0:	e7d0      	b.n	8005d54 <_dtoa_r+0x65c>
 8005db2:	9704      	str	r7, [sp, #16]
 8005db4:	4633      	mov	r3, r6
 8005db6:	461e      	mov	r6, r3
 8005db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dbc:	2a39      	cmp	r2, #57	@ 0x39
 8005dbe:	d107      	bne.n	8005dd0 <_dtoa_r+0x6d8>
 8005dc0:	459a      	cmp	sl, r3
 8005dc2:	d1f8      	bne.n	8005db6 <_dtoa_r+0x6be>
 8005dc4:	9a04      	ldr	r2, [sp, #16]
 8005dc6:	3201      	adds	r2, #1
 8005dc8:	9204      	str	r2, [sp, #16]
 8005dca:	2230      	movs	r2, #48	@ 0x30
 8005dcc:	f88a 2000 	strb.w	r2, [sl]
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	3201      	adds	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	e7bd      	b.n	8005d54 <_dtoa_r+0x65c>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4b09      	ldr	r3, [pc, #36]	@ (8005e00 <_dtoa_r+0x708>)
 8005ddc:	f7fa fb7c 	bl	80004d8 <__aeabi_dmul>
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	4604      	mov	r4, r0
 8005de6:	460d      	mov	r5, r1
 8005de8:	f7fa fdde 	bl	80009a8 <__aeabi_dcmpeq>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	f43f aebc 	beq.w	8005b6a <_dtoa_r+0x472>
 8005df2:	e6f1      	b.n	8005bd8 <_dtoa_r+0x4e0>
 8005df4:	08007e98 	.word	0x08007e98
 8005df8:	3fe00000 	.word	0x3fe00000
 8005dfc:	3ff00000 	.word	0x3ff00000
 8005e00:	40240000 	.word	0x40240000
 8005e04:	40140000 	.word	0x40140000
 8005e08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	f000 80db 	beq.w	8005fc6 <_dtoa_r+0x8ce>
 8005e10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e12:	2a01      	cmp	r2, #1
 8005e14:	f300 80bf 	bgt.w	8005f96 <_dtoa_r+0x89e>
 8005e18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e1a:	2a00      	cmp	r2, #0
 8005e1c:	f000 80b7 	beq.w	8005f8e <_dtoa_r+0x896>
 8005e20:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e24:	4646      	mov	r6, r8
 8005e26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	441a      	add	r2, r3
 8005e2e:	4658      	mov	r0, fp
 8005e30:	4498      	add	r8, r3
 8005e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e34:	f000 fc1a 	bl	800666c <__i2b>
 8005e38:	4605      	mov	r5, r0
 8005e3a:	b15e      	cbz	r6, 8005e54 <_dtoa_r+0x75c>
 8005e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	dd08      	ble.n	8005e54 <_dtoa_r+0x75c>
 8005e42:	42b3      	cmp	r3, r6
 8005e44:	bfa8      	it	ge
 8005e46:	4633      	movge	r3, r6
 8005e48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e4a:	eba8 0803 	sub.w	r8, r8, r3
 8005e4e:	1af6      	subs	r6, r6, r3
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e56:	b1f3      	cbz	r3, 8005e96 <_dtoa_r+0x79e>
 8005e58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80b7 	beq.w	8005fce <_dtoa_r+0x8d6>
 8005e60:	b18c      	cbz	r4, 8005e86 <_dtoa_r+0x78e>
 8005e62:	4629      	mov	r1, r5
 8005e64:	4622      	mov	r2, r4
 8005e66:	4658      	mov	r0, fp
 8005e68:	f000 fcbe 	bl	80067e8 <__pow5mult>
 8005e6c:	464a      	mov	r2, r9
 8005e6e:	4601      	mov	r1, r0
 8005e70:	4605      	mov	r5, r0
 8005e72:	4658      	mov	r0, fp
 8005e74:	f000 fc10 	bl	8006698 <__multiply>
 8005e78:	4649      	mov	r1, r9
 8005e7a:	9004      	str	r0, [sp, #16]
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	f000 fb41 	bl	8006504 <_Bfree>
 8005e82:	9b04      	ldr	r3, [sp, #16]
 8005e84:	4699      	mov	r9, r3
 8005e86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e88:	1b1a      	subs	r2, r3, r4
 8005e8a:	d004      	beq.n	8005e96 <_dtoa_r+0x79e>
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	4658      	mov	r0, fp
 8005e90:	f000 fcaa 	bl	80067e8 <__pow5mult>
 8005e94:	4681      	mov	r9, r0
 8005e96:	2101      	movs	r1, #1
 8005e98:	4658      	mov	r0, fp
 8005e9a:	f000 fbe7 	bl	800666c <__i2b>
 8005e9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 81c9 	beq.w	800623a <_dtoa_r+0xb42>
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4601      	mov	r1, r0
 8005eac:	4658      	mov	r0, fp
 8005eae:	f000 fc9b 	bl	80067e8 <__pow5mult>
 8005eb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	f300 808f 	bgt.w	8005fda <_dtoa_r+0x8e2>
 8005ebc:	9b02      	ldr	r3, [sp, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f040 8087 	bne.w	8005fd2 <_dtoa_r+0x8da>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 8083 	bne.w	8005fd6 <_dtoa_r+0x8de>
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ed6:	0d1b      	lsrs	r3, r3, #20
 8005ed8:	051b      	lsls	r3, r3, #20
 8005eda:	b12b      	cbz	r3, 8005ee8 <_dtoa_r+0x7f0>
 8005edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ede:	f108 0801 	add.w	r8, r8, #1
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 81aa 	beq.w	8006246 <_dtoa_r+0xb4e>
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ef8:	6918      	ldr	r0, [r3, #16]
 8005efa:	f000 fb6b 	bl	80065d4 <__hi0bits>
 8005efe:	f1c0 0020 	rsb	r0, r0, #32
 8005f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f04:	4418      	add	r0, r3
 8005f06:	f010 001f 	ands.w	r0, r0, #31
 8005f0a:	d071      	beq.n	8005ff0 <_dtoa_r+0x8f8>
 8005f0c:	f1c0 0320 	rsb	r3, r0, #32
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	dd65      	ble.n	8005fe0 <_dtoa_r+0x8e8>
 8005f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f16:	f1c0 001c 	rsb	r0, r0, #28
 8005f1a:	4403      	add	r3, r0
 8005f1c:	4480      	add	r8, r0
 8005f1e:	4406      	add	r6, r0
 8005f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f22:	f1b8 0f00 	cmp.w	r8, #0
 8005f26:	dd05      	ble.n	8005f34 <_dtoa_r+0x83c>
 8005f28:	4649      	mov	r1, r9
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	4658      	mov	r0, fp
 8005f2e:	f000 fcb5 	bl	800689c <__lshift>
 8005f32:	4681      	mov	r9, r0
 8005f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dd05      	ble.n	8005f46 <_dtoa_r+0x84e>
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4658      	mov	r0, fp
 8005f40:	f000 fcac 	bl	800689c <__lshift>
 8005f44:	4604      	mov	r4, r0
 8005f46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d053      	beq.n	8005ff4 <_dtoa_r+0x8fc>
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4648      	mov	r0, r9
 8005f50:	f000 fd10 	bl	8006974 <__mcmp>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	da4d      	bge.n	8005ff4 <_dtoa_r+0x8fc>
 8005f58:	1e7b      	subs	r3, r7, #1
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	9304      	str	r3, [sp, #16]
 8005f5e:	220a      	movs	r2, #10
 8005f60:	2300      	movs	r3, #0
 8005f62:	4658      	mov	r0, fp
 8005f64:	f000 faf0 	bl	8006548 <__multadd>
 8005f68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f6a:	4681      	mov	r9, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 816c 	beq.w	800624a <_dtoa_r+0xb52>
 8005f72:	2300      	movs	r3, #0
 8005f74:	4629      	mov	r1, r5
 8005f76:	220a      	movs	r2, #10
 8005f78:	4658      	mov	r0, fp
 8005f7a:	f000 fae5 	bl	8006548 <__multadd>
 8005f7e:	9b08      	ldr	r3, [sp, #32]
 8005f80:	4605      	mov	r5, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	dc61      	bgt.n	800604a <_dtoa_r+0x952>
 8005f86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	dc3b      	bgt.n	8006004 <_dtoa_r+0x90c>
 8005f8c:	e05d      	b.n	800604a <_dtoa_r+0x952>
 8005f8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f90:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f94:	e746      	b.n	8005e24 <_dtoa_r+0x72c>
 8005f96:	9b07      	ldr	r3, [sp, #28]
 8005f98:	1e5c      	subs	r4, r3, #1
 8005f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	bfbf      	itttt	lt
 8005fa0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005fa2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005fa4:	1ae3      	sublt	r3, r4, r3
 8005fa6:	18d2      	addlt	r2, r2, r3
 8005fa8:	bfa8      	it	ge
 8005faa:	1b1c      	subge	r4, r3, r4
 8005fac:	9b07      	ldr	r3, [sp, #28]
 8005fae:	bfbe      	ittt	lt
 8005fb0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005fb2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005fb4:	2400      	movlt	r4, #0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bfb5      	itete	lt
 8005fba:	eba8 0603 	sublt.w	r6, r8, r3
 8005fbe:	4646      	movge	r6, r8
 8005fc0:	2300      	movlt	r3, #0
 8005fc2:	9b07      	ldrge	r3, [sp, #28]
 8005fc4:	e730      	b.n	8005e28 <_dtoa_r+0x730>
 8005fc6:	4646      	mov	r6, r8
 8005fc8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005fca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005fcc:	e735      	b.n	8005e3a <_dtoa_r+0x742>
 8005fce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fd0:	e75c      	b.n	8005e8c <_dtoa_r+0x794>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e788      	b.n	8005ee8 <_dtoa_r+0x7f0>
 8005fd6:	9b02      	ldr	r3, [sp, #8]
 8005fd8:	e786      	b.n	8005ee8 <_dtoa_r+0x7f0>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fde:	e788      	b.n	8005ef2 <_dtoa_r+0x7fa>
 8005fe0:	d09f      	beq.n	8005f22 <_dtoa_r+0x82a>
 8005fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe4:	331c      	adds	r3, #28
 8005fe6:	441a      	add	r2, r3
 8005fe8:	4498      	add	r8, r3
 8005fea:	441e      	add	r6, r3
 8005fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fee:	e798      	b.n	8005f22 <_dtoa_r+0x82a>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	e7f6      	b.n	8005fe2 <_dtoa_r+0x8ea>
 8005ff4:	9b07      	ldr	r3, [sp, #28]
 8005ff6:	9704      	str	r7, [sp, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	dc20      	bgt.n	800603e <_dtoa_r+0x946>
 8005ffc:	9308      	str	r3, [sp, #32]
 8005ffe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006000:	2b02      	cmp	r3, #2
 8006002:	dd1e      	ble.n	8006042 <_dtoa_r+0x94a>
 8006004:	9b08      	ldr	r3, [sp, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f47f aebc 	bne.w	8005d84 <_dtoa_r+0x68c>
 800600c:	4621      	mov	r1, r4
 800600e:	2205      	movs	r2, #5
 8006010:	4658      	mov	r0, fp
 8006012:	f000 fa99 	bl	8006548 <__multadd>
 8006016:	4601      	mov	r1, r0
 8006018:	4604      	mov	r4, r0
 800601a:	4648      	mov	r0, r9
 800601c:	f000 fcaa 	bl	8006974 <__mcmp>
 8006020:	2800      	cmp	r0, #0
 8006022:	f77f aeaf 	ble.w	8005d84 <_dtoa_r+0x68c>
 8006026:	2331      	movs	r3, #49	@ 0x31
 8006028:	4656      	mov	r6, sl
 800602a:	f806 3b01 	strb.w	r3, [r6], #1
 800602e:	9b04      	ldr	r3, [sp, #16]
 8006030:	3301      	adds	r3, #1
 8006032:	9304      	str	r3, [sp, #16]
 8006034:	e6aa      	b.n	8005d8c <_dtoa_r+0x694>
 8006036:	9c07      	ldr	r4, [sp, #28]
 8006038:	9704      	str	r7, [sp, #16]
 800603a:	4625      	mov	r5, r4
 800603c:	e7f3      	b.n	8006026 <_dtoa_r+0x92e>
 800603e:	9b07      	ldr	r3, [sp, #28]
 8006040:	9308      	str	r3, [sp, #32]
 8006042:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8104 	beq.w	8006252 <_dtoa_r+0xb5a>
 800604a:	2e00      	cmp	r6, #0
 800604c:	dd05      	ble.n	800605a <_dtoa_r+0x962>
 800604e:	4629      	mov	r1, r5
 8006050:	4632      	mov	r2, r6
 8006052:	4658      	mov	r0, fp
 8006054:	f000 fc22 	bl	800689c <__lshift>
 8006058:	4605      	mov	r5, r0
 800605a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800605c:	2b00      	cmp	r3, #0
 800605e:	d05a      	beq.n	8006116 <_dtoa_r+0xa1e>
 8006060:	4658      	mov	r0, fp
 8006062:	6869      	ldr	r1, [r5, #4]
 8006064:	f000 fa0e 	bl	8006484 <_Balloc>
 8006068:	4606      	mov	r6, r0
 800606a:	b928      	cbnz	r0, 8006078 <_dtoa_r+0x980>
 800606c:	4602      	mov	r2, r0
 800606e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006072:	4b83      	ldr	r3, [pc, #524]	@ (8006280 <_dtoa_r+0xb88>)
 8006074:	f7ff bb54 	b.w	8005720 <_dtoa_r+0x28>
 8006078:	692a      	ldr	r2, [r5, #16]
 800607a:	f105 010c 	add.w	r1, r5, #12
 800607e:	3202      	adds	r2, #2
 8006080:	0092      	lsls	r2, r2, #2
 8006082:	300c      	adds	r0, #12
 8006084:	f001 f96c 	bl	8007360 <memcpy>
 8006088:	2201      	movs	r2, #1
 800608a:	4631      	mov	r1, r6
 800608c:	4658      	mov	r0, fp
 800608e:	f000 fc05 	bl	800689c <__lshift>
 8006092:	462f      	mov	r7, r5
 8006094:	4605      	mov	r5, r0
 8006096:	f10a 0301 	add.w	r3, sl, #1
 800609a:	9307      	str	r3, [sp, #28]
 800609c:	9b08      	ldr	r3, [sp, #32]
 800609e:	4453      	add	r3, sl
 80060a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060a2:	9b02      	ldr	r3, [sp, #8]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80060aa:	9b07      	ldr	r3, [sp, #28]
 80060ac:	4621      	mov	r1, r4
 80060ae:	3b01      	subs	r3, #1
 80060b0:	4648      	mov	r0, r9
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	f7ff fa95 	bl	80055e2 <quorem>
 80060b8:	4639      	mov	r1, r7
 80060ba:	9008      	str	r0, [sp, #32]
 80060bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80060c0:	4648      	mov	r0, r9
 80060c2:	f000 fc57 	bl	8006974 <__mcmp>
 80060c6:	462a      	mov	r2, r5
 80060c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80060ca:	4621      	mov	r1, r4
 80060cc:	4658      	mov	r0, fp
 80060ce:	f000 fc6d 	bl	80069ac <__mdiff>
 80060d2:	68c2      	ldr	r2, [r0, #12]
 80060d4:	4606      	mov	r6, r0
 80060d6:	bb02      	cbnz	r2, 800611a <_dtoa_r+0xa22>
 80060d8:	4601      	mov	r1, r0
 80060da:	4648      	mov	r0, r9
 80060dc:	f000 fc4a 	bl	8006974 <__mcmp>
 80060e0:	4602      	mov	r2, r0
 80060e2:	4631      	mov	r1, r6
 80060e4:	4658      	mov	r0, fp
 80060e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80060e8:	f000 fa0c 	bl	8006504 <_Bfree>
 80060ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060f0:	9e07      	ldr	r6, [sp, #28]
 80060f2:	ea43 0102 	orr.w	r1, r3, r2
 80060f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060f8:	4319      	orrs	r1, r3
 80060fa:	d110      	bne.n	800611e <_dtoa_r+0xa26>
 80060fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006100:	d029      	beq.n	8006156 <_dtoa_r+0xa5e>
 8006102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	dd02      	ble.n	800610e <_dtoa_r+0xa16>
 8006108:	9b08      	ldr	r3, [sp, #32]
 800610a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800610e:	9b02      	ldr	r3, [sp, #8]
 8006110:	f883 8000 	strb.w	r8, [r3]
 8006114:	e63b      	b.n	8005d8e <_dtoa_r+0x696>
 8006116:	4628      	mov	r0, r5
 8006118:	e7bb      	b.n	8006092 <_dtoa_r+0x99a>
 800611a:	2201      	movs	r2, #1
 800611c:	e7e1      	b.n	80060e2 <_dtoa_r+0x9ea>
 800611e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	db04      	blt.n	800612e <_dtoa_r+0xa36>
 8006124:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006126:	430b      	orrs	r3, r1
 8006128:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800612a:	430b      	orrs	r3, r1
 800612c:	d120      	bne.n	8006170 <_dtoa_r+0xa78>
 800612e:	2a00      	cmp	r2, #0
 8006130:	dded      	ble.n	800610e <_dtoa_r+0xa16>
 8006132:	4649      	mov	r1, r9
 8006134:	2201      	movs	r2, #1
 8006136:	4658      	mov	r0, fp
 8006138:	f000 fbb0 	bl	800689c <__lshift>
 800613c:	4621      	mov	r1, r4
 800613e:	4681      	mov	r9, r0
 8006140:	f000 fc18 	bl	8006974 <__mcmp>
 8006144:	2800      	cmp	r0, #0
 8006146:	dc03      	bgt.n	8006150 <_dtoa_r+0xa58>
 8006148:	d1e1      	bne.n	800610e <_dtoa_r+0xa16>
 800614a:	f018 0f01 	tst.w	r8, #1
 800614e:	d0de      	beq.n	800610e <_dtoa_r+0xa16>
 8006150:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006154:	d1d8      	bne.n	8006108 <_dtoa_r+0xa10>
 8006156:	2339      	movs	r3, #57	@ 0x39
 8006158:	9a02      	ldr	r2, [sp, #8]
 800615a:	7013      	strb	r3, [r2, #0]
 800615c:	4633      	mov	r3, r6
 800615e:	461e      	mov	r6, r3
 8006160:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006164:	3b01      	subs	r3, #1
 8006166:	2a39      	cmp	r2, #57	@ 0x39
 8006168:	d052      	beq.n	8006210 <_dtoa_r+0xb18>
 800616a:	3201      	adds	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e60e      	b.n	8005d8e <_dtoa_r+0x696>
 8006170:	2a00      	cmp	r2, #0
 8006172:	dd07      	ble.n	8006184 <_dtoa_r+0xa8c>
 8006174:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006178:	d0ed      	beq.n	8006156 <_dtoa_r+0xa5e>
 800617a:	9a02      	ldr	r2, [sp, #8]
 800617c:	f108 0301 	add.w	r3, r8, #1
 8006180:	7013      	strb	r3, [r2, #0]
 8006182:	e604      	b.n	8005d8e <_dtoa_r+0x696>
 8006184:	9b07      	ldr	r3, [sp, #28]
 8006186:	9a07      	ldr	r2, [sp, #28]
 8006188:	f803 8c01 	strb.w	r8, [r3, #-1]
 800618c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800618e:	4293      	cmp	r3, r2
 8006190:	d028      	beq.n	80061e4 <_dtoa_r+0xaec>
 8006192:	4649      	mov	r1, r9
 8006194:	2300      	movs	r3, #0
 8006196:	220a      	movs	r2, #10
 8006198:	4658      	mov	r0, fp
 800619a:	f000 f9d5 	bl	8006548 <__multadd>
 800619e:	42af      	cmp	r7, r5
 80061a0:	4681      	mov	r9, r0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	f04f 020a 	mov.w	r2, #10
 80061aa:	4639      	mov	r1, r7
 80061ac:	4658      	mov	r0, fp
 80061ae:	d107      	bne.n	80061c0 <_dtoa_r+0xac8>
 80061b0:	f000 f9ca 	bl	8006548 <__multadd>
 80061b4:	4607      	mov	r7, r0
 80061b6:	4605      	mov	r5, r0
 80061b8:	9b07      	ldr	r3, [sp, #28]
 80061ba:	3301      	adds	r3, #1
 80061bc:	9307      	str	r3, [sp, #28]
 80061be:	e774      	b.n	80060aa <_dtoa_r+0x9b2>
 80061c0:	f000 f9c2 	bl	8006548 <__multadd>
 80061c4:	4629      	mov	r1, r5
 80061c6:	4607      	mov	r7, r0
 80061c8:	2300      	movs	r3, #0
 80061ca:	220a      	movs	r2, #10
 80061cc:	4658      	mov	r0, fp
 80061ce:	f000 f9bb 	bl	8006548 <__multadd>
 80061d2:	4605      	mov	r5, r0
 80061d4:	e7f0      	b.n	80061b8 <_dtoa_r+0xac0>
 80061d6:	9b08      	ldr	r3, [sp, #32]
 80061d8:	2700      	movs	r7, #0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bfcc      	ite	gt
 80061de:	461e      	movgt	r6, r3
 80061e0:	2601      	movle	r6, #1
 80061e2:	4456      	add	r6, sl
 80061e4:	4649      	mov	r1, r9
 80061e6:	2201      	movs	r2, #1
 80061e8:	4658      	mov	r0, fp
 80061ea:	f000 fb57 	bl	800689c <__lshift>
 80061ee:	4621      	mov	r1, r4
 80061f0:	4681      	mov	r9, r0
 80061f2:	f000 fbbf 	bl	8006974 <__mcmp>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	dcb0      	bgt.n	800615c <_dtoa_r+0xa64>
 80061fa:	d102      	bne.n	8006202 <_dtoa_r+0xb0a>
 80061fc:	f018 0f01 	tst.w	r8, #1
 8006200:	d1ac      	bne.n	800615c <_dtoa_r+0xa64>
 8006202:	4633      	mov	r3, r6
 8006204:	461e      	mov	r6, r3
 8006206:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800620a:	2a30      	cmp	r2, #48	@ 0x30
 800620c:	d0fa      	beq.n	8006204 <_dtoa_r+0xb0c>
 800620e:	e5be      	b.n	8005d8e <_dtoa_r+0x696>
 8006210:	459a      	cmp	sl, r3
 8006212:	d1a4      	bne.n	800615e <_dtoa_r+0xa66>
 8006214:	9b04      	ldr	r3, [sp, #16]
 8006216:	3301      	adds	r3, #1
 8006218:	9304      	str	r3, [sp, #16]
 800621a:	2331      	movs	r3, #49	@ 0x31
 800621c:	f88a 3000 	strb.w	r3, [sl]
 8006220:	e5b5      	b.n	8005d8e <_dtoa_r+0x696>
 8006222:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006224:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006284 <_dtoa_r+0xb8c>
 8006228:	b11b      	cbz	r3, 8006232 <_dtoa_r+0xb3a>
 800622a:	f10a 0308 	add.w	r3, sl, #8
 800622e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4650      	mov	r0, sl
 8006234:	b017      	add	sp, #92	@ 0x5c
 8006236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800623c:	2b01      	cmp	r3, #1
 800623e:	f77f ae3d 	ble.w	8005ebc <_dtoa_r+0x7c4>
 8006242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006244:	930a      	str	r3, [sp, #40]	@ 0x28
 8006246:	2001      	movs	r0, #1
 8006248:	e65b      	b.n	8005f02 <_dtoa_r+0x80a>
 800624a:	9b08      	ldr	r3, [sp, #32]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f77f aed6 	ble.w	8005ffe <_dtoa_r+0x906>
 8006252:	4656      	mov	r6, sl
 8006254:	4621      	mov	r1, r4
 8006256:	4648      	mov	r0, r9
 8006258:	f7ff f9c3 	bl	80055e2 <quorem>
 800625c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006260:	9b08      	ldr	r3, [sp, #32]
 8006262:	f806 8b01 	strb.w	r8, [r6], #1
 8006266:	eba6 020a 	sub.w	r2, r6, sl
 800626a:	4293      	cmp	r3, r2
 800626c:	ddb3      	ble.n	80061d6 <_dtoa_r+0xade>
 800626e:	4649      	mov	r1, r9
 8006270:	2300      	movs	r3, #0
 8006272:	220a      	movs	r2, #10
 8006274:	4658      	mov	r0, fp
 8006276:	f000 f967 	bl	8006548 <__multadd>
 800627a:	4681      	mov	r9, r0
 800627c:	e7ea      	b.n	8006254 <_dtoa_r+0xb5c>
 800627e:	bf00      	nop
 8006280:	08007df6 	.word	0x08007df6
 8006284:	08007d7a 	.word	0x08007d7a

08006288 <_free_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4605      	mov	r5, r0
 800628c:	2900      	cmp	r1, #0
 800628e:	d040      	beq.n	8006312 <_free_r+0x8a>
 8006290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006294:	1f0c      	subs	r4, r1, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfb8      	it	lt
 800629a:	18e4      	addlt	r4, r4, r3
 800629c:	f000 f8e6 	bl	800646c <__malloc_lock>
 80062a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006314 <_free_r+0x8c>)
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	b933      	cbnz	r3, 80062b4 <_free_r+0x2c>
 80062a6:	6063      	str	r3, [r4, #4]
 80062a8:	6014      	str	r4, [r2, #0]
 80062aa:	4628      	mov	r0, r5
 80062ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062b0:	f000 b8e2 	b.w	8006478 <__malloc_unlock>
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	d908      	bls.n	80062ca <_free_r+0x42>
 80062b8:	6820      	ldr	r0, [r4, #0]
 80062ba:	1821      	adds	r1, r4, r0
 80062bc:	428b      	cmp	r3, r1
 80062be:	bf01      	itttt	eq
 80062c0:	6819      	ldreq	r1, [r3, #0]
 80062c2:	685b      	ldreq	r3, [r3, #4]
 80062c4:	1809      	addeq	r1, r1, r0
 80062c6:	6021      	streq	r1, [r4, #0]
 80062c8:	e7ed      	b.n	80062a6 <_free_r+0x1e>
 80062ca:	461a      	mov	r2, r3
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	b10b      	cbz	r3, 80062d4 <_free_r+0x4c>
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	d9fa      	bls.n	80062ca <_free_r+0x42>
 80062d4:	6811      	ldr	r1, [r2, #0]
 80062d6:	1850      	adds	r0, r2, r1
 80062d8:	42a0      	cmp	r0, r4
 80062da:	d10b      	bne.n	80062f4 <_free_r+0x6c>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	4401      	add	r1, r0
 80062e0:	1850      	adds	r0, r2, r1
 80062e2:	4283      	cmp	r3, r0
 80062e4:	6011      	str	r1, [r2, #0]
 80062e6:	d1e0      	bne.n	80062aa <_free_r+0x22>
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4408      	add	r0, r1
 80062ee:	6010      	str	r0, [r2, #0]
 80062f0:	6053      	str	r3, [r2, #4]
 80062f2:	e7da      	b.n	80062aa <_free_r+0x22>
 80062f4:	d902      	bls.n	80062fc <_free_r+0x74>
 80062f6:	230c      	movs	r3, #12
 80062f8:	602b      	str	r3, [r5, #0]
 80062fa:	e7d6      	b.n	80062aa <_free_r+0x22>
 80062fc:	6820      	ldr	r0, [r4, #0]
 80062fe:	1821      	adds	r1, r4, r0
 8006300:	428b      	cmp	r3, r1
 8006302:	bf01      	itttt	eq
 8006304:	6819      	ldreq	r1, [r3, #0]
 8006306:	685b      	ldreq	r3, [r3, #4]
 8006308:	1809      	addeq	r1, r1, r0
 800630a:	6021      	streq	r1, [r4, #0]
 800630c:	6063      	str	r3, [r4, #4]
 800630e:	6054      	str	r4, [r2, #4]
 8006310:	e7cb      	b.n	80062aa <_free_r+0x22>
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	200006e4 	.word	0x200006e4

08006318 <malloc>:
 8006318:	4b02      	ldr	r3, [pc, #8]	@ (8006324 <malloc+0xc>)
 800631a:	4601      	mov	r1, r0
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	f000 b825 	b.w	800636c <_malloc_r>
 8006322:	bf00      	nop
 8006324:	200001c8 	.word	0x200001c8

08006328 <sbrk_aligned>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4e0f      	ldr	r6, [pc, #60]	@ (8006368 <sbrk_aligned+0x40>)
 800632c:	460c      	mov	r4, r1
 800632e:	6831      	ldr	r1, [r6, #0]
 8006330:	4605      	mov	r5, r0
 8006332:	b911      	cbnz	r1, 800633a <sbrk_aligned+0x12>
 8006334:	f001 f804 	bl	8007340 <_sbrk_r>
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	4621      	mov	r1, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 ffff 	bl	8007340 <_sbrk_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d103      	bne.n	800634e <sbrk_aligned+0x26>
 8006346:	f04f 34ff 	mov.w	r4, #4294967295
 800634a:	4620      	mov	r0, r4
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	1cc4      	adds	r4, r0, #3
 8006350:	f024 0403 	bic.w	r4, r4, #3
 8006354:	42a0      	cmp	r0, r4
 8006356:	d0f8      	beq.n	800634a <sbrk_aligned+0x22>
 8006358:	1a21      	subs	r1, r4, r0
 800635a:	4628      	mov	r0, r5
 800635c:	f000 fff0 	bl	8007340 <_sbrk_r>
 8006360:	3001      	adds	r0, #1
 8006362:	d1f2      	bne.n	800634a <sbrk_aligned+0x22>
 8006364:	e7ef      	b.n	8006346 <sbrk_aligned+0x1e>
 8006366:	bf00      	nop
 8006368:	200006e0 	.word	0x200006e0

0800636c <_malloc_r>:
 800636c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006370:	1ccd      	adds	r5, r1, #3
 8006372:	f025 0503 	bic.w	r5, r5, #3
 8006376:	3508      	adds	r5, #8
 8006378:	2d0c      	cmp	r5, #12
 800637a:	bf38      	it	cc
 800637c:	250c      	movcc	r5, #12
 800637e:	2d00      	cmp	r5, #0
 8006380:	4606      	mov	r6, r0
 8006382:	db01      	blt.n	8006388 <_malloc_r+0x1c>
 8006384:	42a9      	cmp	r1, r5
 8006386:	d904      	bls.n	8006392 <_malloc_r+0x26>
 8006388:	230c      	movs	r3, #12
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	2000      	movs	r0, #0
 800638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006468 <_malloc_r+0xfc>
 8006396:	f000 f869 	bl	800646c <__malloc_lock>
 800639a:	f8d8 3000 	ldr.w	r3, [r8]
 800639e:	461c      	mov	r4, r3
 80063a0:	bb44      	cbnz	r4, 80063f4 <_malloc_r+0x88>
 80063a2:	4629      	mov	r1, r5
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff ffbf 	bl	8006328 <sbrk_aligned>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	4604      	mov	r4, r0
 80063ae:	d158      	bne.n	8006462 <_malloc_r+0xf6>
 80063b0:	f8d8 4000 	ldr.w	r4, [r8]
 80063b4:	4627      	mov	r7, r4
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d143      	bne.n	8006442 <_malloc_r+0xd6>
 80063ba:	2c00      	cmp	r4, #0
 80063bc:	d04b      	beq.n	8006456 <_malloc_r+0xea>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	4639      	mov	r1, r7
 80063c2:	4630      	mov	r0, r6
 80063c4:	eb04 0903 	add.w	r9, r4, r3
 80063c8:	f000 ffba 	bl	8007340 <_sbrk_r>
 80063cc:	4581      	cmp	r9, r0
 80063ce:	d142      	bne.n	8006456 <_malloc_r+0xea>
 80063d0:	6821      	ldr	r1, [r4, #0]
 80063d2:	4630      	mov	r0, r6
 80063d4:	1a6d      	subs	r5, r5, r1
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7ff ffa6 	bl	8006328 <sbrk_aligned>
 80063dc:	3001      	adds	r0, #1
 80063de:	d03a      	beq.n	8006456 <_malloc_r+0xea>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	442b      	add	r3, r5
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	bb62      	cbnz	r2, 8006448 <_malloc_r+0xdc>
 80063ee:	f8c8 7000 	str.w	r7, [r8]
 80063f2:	e00f      	b.n	8006414 <_malloc_r+0xa8>
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	1b52      	subs	r2, r2, r5
 80063f8:	d420      	bmi.n	800643c <_malloc_r+0xd0>
 80063fa:	2a0b      	cmp	r2, #11
 80063fc:	d917      	bls.n	800642e <_malloc_r+0xc2>
 80063fe:	1961      	adds	r1, r4, r5
 8006400:	42a3      	cmp	r3, r4
 8006402:	6025      	str	r5, [r4, #0]
 8006404:	bf18      	it	ne
 8006406:	6059      	strne	r1, [r3, #4]
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	bf08      	it	eq
 800640c:	f8c8 1000 	streq.w	r1, [r8]
 8006410:	5162      	str	r2, [r4, r5]
 8006412:	604b      	str	r3, [r1, #4]
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f82f 	bl	8006478 <__malloc_unlock>
 800641a:	f104 000b 	add.w	r0, r4, #11
 800641e:	1d23      	adds	r3, r4, #4
 8006420:	f020 0007 	bic.w	r0, r0, #7
 8006424:	1ac2      	subs	r2, r0, r3
 8006426:	bf1c      	itt	ne
 8006428:	1a1b      	subne	r3, r3, r0
 800642a:	50a3      	strne	r3, [r4, r2]
 800642c:	e7af      	b.n	800638e <_malloc_r+0x22>
 800642e:	6862      	ldr	r2, [r4, #4]
 8006430:	42a3      	cmp	r3, r4
 8006432:	bf0c      	ite	eq
 8006434:	f8c8 2000 	streq.w	r2, [r8]
 8006438:	605a      	strne	r2, [r3, #4]
 800643a:	e7eb      	b.n	8006414 <_malloc_r+0xa8>
 800643c:	4623      	mov	r3, r4
 800643e:	6864      	ldr	r4, [r4, #4]
 8006440:	e7ae      	b.n	80063a0 <_malloc_r+0x34>
 8006442:	463c      	mov	r4, r7
 8006444:	687f      	ldr	r7, [r7, #4]
 8006446:	e7b6      	b.n	80063b6 <_malloc_r+0x4a>
 8006448:	461a      	mov	r2, r3
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	42a3      	cmp	r3, r4
 800644e:	d1fb      	bne.n	8006448 <_malloc_r+0xdc>
 8006450:	2300      	movs	r3, #0
 8006452:	6053      	str	r3, [r2, #4]
 8006454:	e7de      	b.n	8006414 <_malloc_r+0xa8>
 8006456:	230c      	movs	r3, #12
 8006458:	4630      	mov	r0, r6
 800645a:	6033      	str	r3, [r6, #0]
 800645c:	f000 f80c 	bl	8006478 <__malloc_unlock>
 8006460:	e794      	b.n	800638c <_malloc_r+0x20>
 8006462:	6005      	str	r5, [r0, #0]
 8006464:	e7d6      	b.n	8006414 <_malloc_r+0xa8>
 8006466:	bf00      	nop
 8006468:	200006e4 	.word	0x200006e4

0800646c <__malloc_lock>:
 800646c:	4801      	ldr	r0, [pc, #4]	@ (8006474 <__malloc_lock+0x8>)
 800646e:	f7ff b8a8 	b.w	80055c2 <__retarget_lock_acquire_recursive>
 8006472:	bf00      	nop
 8006474:	200006dc 	.word	0x200006dc

08006478 <__malloc_unlock>:
 8006478:	4801      	ldr	r0, [pc, #4]	@ (8006480 <__malloc_unlock+0x8>)
 800647a:	f7ff b8a3 	b.w	80055c4 <__retarget_lock_release_recursive>
 800647e:	bf00      	nop
 8006480:	200006dc 	.word	0x200006dc

08006484 <_Balloc>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	69c6      	ldr	r6, [r0, #28]
 8006488:	4604      	mov	r4, r0
 800648a:	460d      	mov	r5, r1
 800648c:	b976      	cbnz	r6, 80064ac <_Balloc+0x28>
 800648e:	2010      	movs	r0, #16
 8006490:	f7ff ff42 	bl	8006318 <malloc>
 8006494:	4602      	mov	r2, r0
 8006496:	61e0      	str	r0, [r4, #28]
 8006498:	b920      	cbnz	r0, 80064a4 <_Balloc+0x20>
 800649a:	216b      	movs	r1, #107	@ 0x6b
 800649c:	4b17      	ldr	r3, [pc, #92]	@ (80064fc <_Balloc+0x78>)
 800649e:	4818      	ldr	r0, [pc, #96]	@ (8006500 <_Balloc+0x7c>)
 80064a0:	f000 ff6c 	bl	800737c <__assert_func>
 80064a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064a8:	6006      	str	r6, [r0, #0]
 80064aa:	60c6      	str	r6, [r0, #12]
 80064ac:	69e6      	ldr	r6, [r4, #28]
 80064ae:	68f3      	ldr	r3, [r6, #12]
 80064b0:	b183      	cbz	r3, 80064d4 <_Balloc+0x50>
 80064b2:	69e3      	ldr	r3, [r4, #28]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064ba:	b9b8      	cbnz	r0, 80064ec <_Balloc+0x68>
 80064bc:	2101      	movs	r1, #1
 80064be:	fa01 f605 	lsl.w	r6, r1, r5
 80064c2:	1d72      	adds	r2, r6, #5
 80064c4:	4620      	mov	r0, r4
 80064c6:	0092      	lsls	r2, r2, #2
 80064c8:	f000 ff76 	bl	80073b8 <_calloc_r>
 80064cc:	b160      	cbz	r0, 80064e8 <_Balloc+0x64>
 80064ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064d2:	e00e      	b.n	80064f2 <_Balloc+0x6e>
 80064d4:	2221      	movs	r2, #33	@ 0x21
 80064d6:	2104      	movs	r1, #4
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 ff6d 	bl	80073b8 <_calloc_r>
 80064de:	69e3      	ldr	r3, [r4, #28]
 80064e0:	60f0      	str	r0, [r6, #12]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e4      	bne.n	80064b2 <_Balloc+0x2e>
 80064e8:	2000      	movs	r0, #0
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	6802      	ldr	r2, [r0, #0]
 80064ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064f2:	2300      	movs	r3, #0
 80064f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064f8:	e7f7      	b.n	80064ea <_Balloc+0x66>
 80064fa:	bf00      	nop
 80064fc:	08007d87 	.word	0x08007d87
 8006500:	08007e07 	.word	0x08007e07

08006504 <_Bfree>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	69c6      	ldr	r6, [r0, #28]
 8006508:	4605      	mov	r5, r0
 800650a:	460c      	mov	r4, r1
 800650c:	b976      	cbnz	r6, 800652c <_Bfree+0x28>
 800650e:	2010      	movs	r0, #16
 8006510:	f7ff ff02 	bl	8006318 <malloc>
 8006514:	4602      	mov	r2, r0
 8006516:	61e8      	str	r0, [r5, #28]
 8006518:	b920      	cbnz	r0, 8006524 <_Bfree+0x20>
 800651a:	218f      	movs	r1, #143	@ 0x8f
 800651c:	4b08      	ldr	r3, [pc, #32]	@ (8006540 <_Bfree+0x3c>)
 800651e:	4809      	ldr	r0, [pc, #36]	@ (8006544 <_Bfree+0x40>)
 8006520:	f000 ff2c 	bl	800737c <__assert_func>
 8006524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006528:	6006      	str	r6, [r0, #0]
 800652a:	60c6      	str	r6, [r0, #12]
 800652c:	b13c      	cbz	r4, 800653e <_Bfree+0x3a>
 800652e:	69eb      	ldr	r3, [r5, #28]
 8006530:	6862      	ldr	r2, [r4, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006538:	6021      	str	r1, [r4, #0]
 800653a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800653e:	bd70      	pop	{r4, r5, r6, pc}
 8006540:	08007d87 	.word	0x08007d87
 8006544:	08007e07 	.word	0x08007e07

08006548 <__multadd>:
 8006548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654c:	4607      	mov	r7, r0
 800654e:	460c      	mov	r4, r1
 8006550:	461e      	mov	r6, r3
 8006552:	2000      	movs	r0, #0
 8006554:	690d      	ldr	r5, [r1, #16]
 8006556:	f101 0c14 	add.w	ip, r1, #20
 800655a:	f8dc 3000 	ldr.w	r3, [ip]
 800655e:	3001      	adds	r0, #1
 8006560:	b299      	uxth	r1, r3
 8006562:	fb02 6101 	mla	r1, r2, r1, r6
 8006566:	0c1e      	lsrs	r6, r3, #16
 8006568:	0c0b      	lsrs	r3, r1, #16
 800656a:	fb02 3306 	mla	r3, r2, r6, r3
 800656e:	b289      	uxth	r1, r1
 8006570:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006574:	4285      	cmp	r5, r0
 8006576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800657a:	f84c 1b04 	str.w	r1, [ip], #4
 800657e:	dcec      	bgt.n	800655a <__multadd+0x12>
 8006580:	b30e      	cbz	r6, 80065c6 <__multadd+0x7e>
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	42ab      	cmp	r3, r5
 8006586:	dc19      	bgt.n	80065bc <__multadd+0x74>
 8006588:	6861      	ldr	r1, [r4, #4]
 800658a:	4638      	mov	r0, r7
 800658c:	3101      	adds	r1, #1
 800658e:	f7ff ff79 	bl	8006484 <_Balloc>
 8006592:	4680      	mov	r8, r0
 8006594:	b928      	cbnz	r0, 80065a2 <__multadd+0x5a>
 8006596:	4602      	mov	r2, r0
 8006598:	21ba      	movs	r1, #186	@ 0xba
 800659a:	4b0c      	ldr	r3, [pc, #48]	@ (80065cc <__multadd+0x84>)
 800659c:	480c      	ldr	r0, [pc, #48]	@ (80065d0 <__multadd+0x88>)
 800659e:	f000 feed 	bl	800737c <__assert_func>
 80065a2:	6922      	ldr	r2, [r4, #16]
 80065a4:	f104 010c 	add.w	r1, r4, #12
 80065a8:	3202      	adds	r2, #2
 80065aa:	0092      	lsls	r2, r2, #2
 80065ac:	300c      	adds	r0, #12
 80065ae:	f000 fed7 	bl	8007360 <memcpy>
 80065b2:	4621      	mov	r1, r4
 80065b4:	4638      	mov	r0, r7
 80065b6:	f7ff ffa5 	bl	8006504 <_Bfree>
 80065ba:	4644      	mov	r4, r8
 80065bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065c0:	3501      	adds	r5, #1
 80065c2:	615e      	str	r6, [r3, #20]
 80065c4:	6125      	str	r5, [r4, #16]
 80065c6:	4620      	mov	r0, r4
 80065c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065cc:	08007df6 	.word	0x08007df6
 80065d0:	08007e07 	.word	0x08007e07

080065d4 <__hi0bits>:
 80065d4:	4603      	mov	r3, r0
 80065d6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065da:	bf3a      	itte	cc
 80065dc:	0403      	lslcc	r3, r0, #16
 80065de:	2010      	movcc	r0, #16
 80065e0:	2000      	movcs	r0, #0
 80065e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065e6:	bf3c      	itt	cc
 80065e8:	021b      	lslcc	r3, r3, #8
 80065ea:	3008      	addcc	r0, #8
 80065ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065f0:	bf3c      	itt	cc
 80065f2:	011b      	lslcc	r3, r3, #4
 80065f4:	3004      	addcc	r0, #4
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065fa:	bf3c      	itt	cc
 80065fc:	009b      	lslcc	r3, r3, #2
 80065fe:	3002      	addcc	r0, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	db05      	blt.n	8006610 <__hi0bits+0x3c>
 8006604:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006608:	f100 0001 	add.w	r0, r0, #1
 800660c:	bf08      	it	eq
 800660e:	2020      	moveq	r0, #32
 8006610:	4770      	bx	lr

08006612 <__lo0bits>:
 8006612:	6803      	ldr	r3, [r0, #0]
 8006614:	4602      	mov	r2, r0
 8006616:	f013 0007 	ands.w	r0, r3, #7
 800661a:	d00b      	beq.n	8006634 <__lo0bits+0x22>
 800661c:	07d9      	lsls	r1, r3, #31
 800661e:	d421      	bmi.n	8006664 <__lo0bits+0x52>
 8006620:	0798      	lsls	r0, r3, #30
 8006622:	bf49      	itett	mi
 8006624:	085b      	lsrmi	r3, r3, #1
 8006626:	089b      	lsrpl	r3, r3, #2
 8006628:	2001      	movmi	r0, #1
 800662a:	6013      	strmi	r3, [r2, #0]
 800662c:	bf5c      	itt	pl
 800662e:	2002      	movpl	r0, #2
 8006630:	6013      	strpl	r3, [r2, #0]
 8006632:	4770      	bx	lr
 8006634:	b299      	uxth	r1, r3
 8006636:	b909      	cbnz	r1, 800663c <__lo0bits+0x2a>
 8006638:	2010      	movs	r0, #16
 800663a:	0c1b      	lsrs	r3, r3, #16
 800663c:	b2d9      	uxtb	r1, r3
 800663e:	b909      	cbnz	r1, 8006644 <__lo0bits+0x32>
 8006640:	3008      	adds	r0, #8
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	0719      	lsls	r1, r3, #28
 8006646:	bf04      	itt	eq
 8006648:	091b      	lsreq	r3, r3, #4
 800664a:	3004      	addeq	r0, #4
 800664c:	0799      	lsls	r1, r3, #30
 800664e:	bf04      	itt	eq
 8006650:	089b      	lsreq	r3, r3, #2
 8006652:	3002      	addeq	r0, #2
 8006654:	07d9      	lsls	r1, r3, #31
 8006656:	d403      	bmi.n	8006660 <__lo0bits+0x4e>
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	f100 0001 	add.w	r0, r0, #1
 800665e:	d003      	beq.n	8006668 <__lo0bits+0x56>
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	4770      	bx	lr
 8006664:	2000      	movs	r0, #0
 8006666:	4770      	bx	lr
 8006668:	2020      	movs	r0, #32
 800666a:	4770      	bx	lr

0800666c <__i2b>:
 800666c:	b510      	push	{r4, lr}
 800666e:	460c      	mov	r4, r1
 8006670:	2101      	movs	r1, #1
 8006672:	f7ff ff07 	bl	8006484 <_Balloc>
 8006676:	4602      	mov	r2, r0
 8006678:	b928      	cbnz	r0, 8006686 <__i2b+0x1a>
 800667a:	f240 1145 	movw	r1, #325	@ 0x145
 800667e:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <__i2b+0x24>)
 8006680:	4804      	ldr	r0, [pc, #16]	@ (8006694 <__i2b+0x28>)
 8006682:	f000 fe7b 	bl	800737c <__assert_func>
 8006686:	2301      	movs	r3, #1
 8006688:	6144      	str	r4, [r0, #20]
 800668a:	6103      	str	r3, [r0, #16]
 800668c:	bd10      	pop	{r4, pc}
 800668e:	bf00      	nop
 8006690:	08007df6 	.word	0x08007df6
 8006694:	08007e07 	.word	0x08007e07

08006698 <__multiply>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	4614      	mov	r4, r2
 800669e:	690a      	ldr	r2, [r1, #16]
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	460f      	mov	r7, r1
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bfa2      	ittt	ge
 80066a8:	4623      	movge	r3, r4
 80066aa:	460c      	movge	r4, r1
 80066ac:	461f      	movge	r7, r3
 80066ae:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80066b2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80066b6:	68a3      	ldr	r3, [r4, #8]
 80066b8:	6861      	ldr	r1, [r4, #4]
 80066ba:	eb0a 0609 	add.w	r6, sl, r9
 80066be:	42b3      	cmp	r3, r6
 80066c0:	b085      	sub	sp, #20
 80066c2:	bfb8      	it	lt
 80066c4:	3101      	addlt	r1, #1
 80066c6:	f7ff fedd 	bl	8006484 <_Balloc>
 80066ca:	b930      	cbnz	r0, 80066da <__multiply+0x42>
 80066cc:	4602      	mov	r2, r0
 80066ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066d2:	4b43      	ldr	r3, [pc, #268]	@ (80067e0 <__multiply+0x148>)
 80066d4:	4843      	ldr	r0, [pc, #268]	@ (80067e4 <__multiply+0x14c>)
 80066d6:	f000 fe51 	bl	800737c <__assert_func>
 80066da:	f100 0514 	add.w	r5, r0, #20
 80066de:	462b      	mov	r3, r5
 80066e0:	2200      	movs	r2, #0
 80066e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066e6:	4543      	cmp	r3, r8
 80066e8:	d321      	bcc.n	800672e <__multiply+0x96>
 80066ea:	f107 0114 	add.w	r1, r7, #20
 80066ee:	f104 0214 	add.w	r2, r4, #20
 80066f2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80066f6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80066fa:	9302      	str	r3, [sp, #8]
 80066fc:	1b13      	subs	r3, r2, r4
 80066fe:	3b15      	subs	r3, #21
 8006700:	f023 0303 	bic.w	r3, r3, #3
 8006704:	3304      	adds	r3, #4
 8006706:	f104 0715 	add.w	r7, r4, #21
 800670a:	42ba      	cmp	r2, r7
 800670c:	bf38      	it	cc
 800670e:	2304      	movcc	r3, #4
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	9b02      	ldr	r3, [sp, #8]
 8006714:	9103      	str	r1, [sp, #12]
 8006716:	428b      	cmp	r3, r1
 8006718:	d80c      	bhi.n	8006734 <__multiply+0x9c>
 800671a:	2e00      	cmp	r6, #0
 800671c:	dd03      	ble.n	8006726 <__multiply+0x8e>
 800671e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006722:	2b00      	cmp	r3, #0
 8006724:	d05a      	beq.n	80067dc <__multiply+0x144>
 8006726:	6106      	str	r6, [r0, #16]
 8006728:	b005      	add	sp, #20
 800672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672e:	f843 2b04 	str.w	r2, [r3], #4
 8006732:	e7d8      	b.n	80066e6 <__multiply+0x4e>
 8006734:	f8b1 a000 	ldrh.w	sl, [r1]
 8006738:	f1ba 0f00 	cmp.w	sl, #0
 800673c:	d023      	beq.n	8006786 <__multiply+0xee>
 800673e:	46a9      	mov	r9, r5
 8006740:	f04f 0c00 	mov.w	ip, #0
 8006744:	f104 0e14 	add.w	lr, r4, #20
 8006748:	f85e 7b04 	ldr.w	r7, [lr], #4
 800674c:	f8d9 3000 	ldr.w	r3, [r9]
 8006750:	fa1f fb87 	uxth.w	fp, r7
 8006754:	b29b      	uxth	r3, r3
 8006756:	fb0a 330b 	mla	r3, sl, fp, r3
 800675a:	4463      	add	r3, ip
 800675c:	f8d9 c000 	ldr.w	ip, [r9]
 8006760:	0c3f      	lsrs	r7, r7, #16
 8006762:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006766:	fb0a c707 	mla	r7, sl, r7, ip
 800676a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800676e:	b29b      	uxth	r3, r3
 8006770:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006774:	4572      	cmp	r2, lr
 8006776:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800677a:	f849 3b04 	str.w	r3, [r9], #4
 800677e:	d8e3      	bhi.n	8006748 <__multiply+0xb0>
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	f845 c003 	str.w	ip, [r5, r3]
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	3104      	adds	r1, #4
 800678a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800678e:	f1b9 0f00 	cmp.w	r9, #0
 8006792:	d021      	beq.n	80067d8 <__multiply+0x140>
 8006794:	46ae      	mov	lr, r5
 8006796:	f04f 0a00 	mov.w	sl, #0
 800679a:	682b      	ldr	r3, [r5, #0]
 800679c:	f104 0c14 	add.w	ip, r4, #20
 80067a0:	f8bc b000 	ldrh.w	fp, [ip]
 80067a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	fb09 770b 	mla	r7, r9, fp, r7
 80067ae:	4457      	add	r7, sl
 80067b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067b4:	f84e 3b04 	str.w	r3, [lr], #4
 80067b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067c0:	f8be 3000 	ldrh.w	r3, [lr]
 80067c4:	4562      	cmp	r2, ip
 80067c6:	fb09 330a 	mla	r3, r9, sl, r3
 80067ca:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80067ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067d2:	d8e5      	bhi.n	80067a0 <__multiply+0x108>
 80067d4:	9f01      	ldr	r7, [sp, #4]
 80067d6:	51eb      	str	r3, [r5, r7]
 80067d8:	3504      	adds	r5, #4
 80067da:	e79a      	b.n	8006712 <__multiply+0x7a>
 80067dc:	3e01      	subs	r6, #1
 80067de:	e79c      	b.n	800671a <__multiply+0x82>
 80067e0:	08007df6 	.word	0x08007df6
 80067e4:	08007e07 	.word	0x08007e07

080067e8 <__pow5mult>:
 80067e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067ec:	4615      	mov	r5, r2
 80067ee:	f012 0203 	ands.w	r2, r2, #3
 80067f2:	4607      	mov	r7, r0
 80067f4:	460e      	mov	r6, r1
 80067f6:	d007      	beq.n	8006808 <__pow5mult+0x20>
 80067f8:	4c25      	ldr	r4, [pc, #148]	@ (8006890 <__pow5mult+0xa8>)
 80067fa:	3a01      	subs	r2, #1
 80067fc:	2300      	movs	r3, #0
 80067fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006802:	f7ff fea1 	bl	8006548 <__multadd>
 8006806:	4606      	mov	r6, r0
 8006808:	10ad      	asrs	r5, r5, #2
 800680a:	d03d      	beq.n	8006888 <__pow5mult+0xa0>
 800680c:	69fc      	ldr	r4, [r7, #28]
 800680e:	b97c      	cbnz	r4, 8006830 <__pow5mult+0x48>
 8006810:	2010      	movs	r0, #16
 8006812:	f7ff fd81 	bl	8006318 <malloc>
 8006816:	4602      	mov	r2, r0
 8006818:	61f8      	str	r0, [r7, #28]
 800681a:	b928      	cbnz	r0, 8006828 <__pow5mult+0x40>
 800681c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006820:	4b1c      	ldr	r3, [pc, #112]	@ (8006894 <__pow5mult+0xac>)
 8006822:	481d      	ldr	r0, [pc, #116]	@ (8006898 <__pow5mult+0xb0>)
 8006824:	f000 fdaa 	bl	800737c <__assert_func>
 8006828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800682c:	6004      	str	r4, [r0, #0]
 800682e:	60c4      	str	r4, [r0, #12]
 8006830:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006838:	b94c      	cbnz	r4, 800684e <__pow5mult+0x66>
 800683a:	f240 2171 	movw	r1, #625	@ 0x271
 800683e:	4638      	mov	r0, r7
 8006840:	f7ff ff14 	bl	800666c <__i2b>
 8006844:	2300      	movs	r3, #0
 8006846:	4604      	mov	r4, r0
 8006848:	f8c8 0008 	str.w	r0, [r8, #8]
 800684c:	6003      	str	r3, [r0, #0]
 800684e:	f04f 0900 	mov.w	r9, #0
 8006852:	07eb      	lsls	r3, r5, #31
 8006854:	d50a      	bpl.n	800686c <__pow5mult+0x84>
 8006856:	4631      	mov	r1, r6
 8006858:	4622      	mov	r2, r4
 800685a:	4638      	mov	r0, r7
 800685c:	f7ff ff1c 	bl	8006698 <__multiply>
 8006860:	4680      	mov	r8, r0
 8006862:	4631      	mov	r1, r6
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff fe4d 	bl	8006504 <_Bfree>
 800686a:	4646      	mov	r6, r8
 800686c:	106d      	asrs	r5, r5, #1
 800686e:	d00b      	beq.n	8006888 <__pow5mult+0xa0>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	b938      	cbnz	r0, 8006884 <__pow5mult+0x9c>
 8006874:	4622      	mov	r2, r4
 8006876:	4621      	mov	r1, r4
 8006878:	4638      	mov	r0, r7
 800687a:	f7ff ff0d 	bl	8006698 <__multiply>
 800687e:	6020      	str	r0, [r4, #0]
 8006880:	f8c0 9000 	str.w	r9, [r0]
 8006884:	4604      	mov	r4, r0
 8006886:	e7e4      	b.n	8006852 <__pow5mult+0x6a>
 8006888:	4630      	mov	r0, r6
 800688a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688e:	bf00      	nop
 8006890:	08007e60 	.word	0x08007e60
 8006894:	08007d87 	.word	0x08007d87
 8006898:	08007e07 	.word	0x08007e07

0800689c <__lshift>:
 800689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	460c      	mov	r4, r1
 80068a2:	4607      	mov	r7, r0
 80068a4:	4691      	mov	r9, r2
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	6849      	ldr	r1, [r1, #4]
 80068aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068b4:	f108 0601 	add.w	r6, r8, #1
 80068b8:	42b3      	cmp	r3, r6
 80068ba:	db0b      	blt.n	80068d4 <__lshift+0x38>
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff fde1 	bl	8006484 <_Balloc>
 80068c2:	4605      	mov	r5, r0
 80068c4:	b948      	cbnz	r0, 80068da <__lshift+0x3e>
 80068c6:	4602      	mov	r2, r0
 80068c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068cc:	4b27      	ldr	r3, [pc, #156]	@ (800696c <__lshift+0xd0>)
 80068ce:	4828      	ldr	r0, [pc, #160]	@ (8006970 <__lshift+0xd4>)
 80068d0:	f000 fd54 	bl	800737c <__assert_func>
 80068d4:	3101      	adds	r1, #1
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	e7ee      	b.n	80068b8 <__lshift+0x1c>
 80068da:	2300      	movs	r3, #0
 80068dc:	f100 0114 	add.w	r1, r0, #20
 80068e0:	f100 0210 	add.w	r2, r0, #16
 80068e4:	4618      	mov	r0, r3
 80068e6:	4553      	cmp	r3, sl
 80068e8:	db33      	blt.n	8006952 <__lshift+0xb6>
 80068ea:	6920      	ldr	r0, [r4, #16]
 80068ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068f0:	f104 0314 	add.w	r3, r4, #20
 80068f4:	f019 091f 	ands.w	r9, r9, #31
 80068f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006900:	d02b      	beq.n	800695a <__lshift+0xbe>
 8006902:	468a      	mov	sl, r1
 8006904:	2200      	movs	r2, #0
 8006906:	f1c9 0e20 	rsb	lr, r9, #32
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	fa00 f009 	lsl.w	r0, r0, r9
 8006910:	4310      	orrs	r0, r2
 8006912:	f84a 0b04 	str.w	r0, [sl], #4
 8006916:	f853 2b04 	ldr.w	r2, [r3], #4
 800691a:	459c      	cmp	ip, r3
 800691c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006920:	d8f3      	bhi.n	800690a <__lshift+0x6e>
 8006922:	ebac 0304 	sub.w	r3, ip, r4
 8006926:	3b15      	subs	r3, #21
 8006928:	f023 0303 	bic.w	r3, r3, #3
 800692c:	3304      	adds	r3, #4
 800692e:	f104 0015 	add.w	r0, r4, #21
 8006932:	4584      	cmp	ip, r0
 8006934:	bf38      	it	cc
 8006936:	2304      	movcc	r3, #4
 8006938:	50ca      	str	r2, [r1, r3]
 800693a:	b10a      	cbz	r2, 8006940 <__lshift+0xa4>
 800693c:	f108 0602 	add.w	r6, r8, #2
 8006940:	3e01      	subs	r6, #1
 8006942:	4638      	mov	r0, r7
 8006944:	4621      	mov	r1, r4
 8006946:	612e      	str	r6, [r5, #16]
 8006948:	f7ff fddc 	bl	8006504 <_Bfree>
 800694c:	4628      	mov	r0, r5
 800694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006952:	f842 0f04 	str.w	r0, [r2, #4]!
 8006956:	3301      	adds	r3, #1
 8006958:	e7c5      	b.n	80068e6 <__lshift+0x4a>
 800695a:	3904      	subs	r1, #4
 800695c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006960:	459c      	cmp	ip, r3
 8006962:	f841 2f04 	str.w	r2, [r1, #4]!
 8006966:	d8f9      	bhi.n	800695c <__lshift+0xc0>
 8006968:	e7ea      	b.n	8006940 <__lshift+0xa4>
 800696a:	bf00      	nop
 800696c:	08007df6 	.word	0x08007df6
 8006970:	08007e07 	.word	0x08007e07

08006974 <__mcmp>:
 8006974:	4603      	mov	r3, r0
 8006976:	690a      	ldr	r2, [r1, #16]
 8006978:	6900      	ldr	r0, [r0, #16]
 800697a:	b530      	push	{r4, r5, lr}
 800697c:	1a80      	subs	r0, r0, r2
 800697e:	d10e      	bne.n	800699e <__mcmp+0x2a>
 8006980:	3314      	adds	r3, #20
 8006982:	3114      	adds	r1, #20
 8006984:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006988:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800698c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006990:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006994:	4295      	cmp	r5, r2
 8006996:	d003      	beq.n	80069a0 <__mcmp+0x2c>
 8006998:	d205      	bcs.n	80069a6 <__mcmp+0x32>
 800699a:	f04f 30ff 	mov.w	r0, #4294967295
 800699e:	bd30      	pop	{r4, r5, pc}
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d3f3      	bcc.n	800698c <__mcmp+0x18>
 80069a4:	e7fb      	b.n	800699e <__mcmp+0x2a>
 80069a6:	2001      	movs	r0, #1
 80069a8:	e7f9      	b.n	800699e <__mcmp+0x2a>
	...

080069ac <__mdiff>:
 80069ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	4689      	mov	r9, r1
 80069b2:	4606      	mov	r6, r0
 80069b4:	4611      	mov	r1, r2
 80069b6:	4648      	mov	r0, r9
 80069b8:	4614      	mov	r4, r2
 80069ba:	f7ff ffdb 	bl	8006974 <__mcmp>
 80069be:	1e05      	subs	r5, r0, #0
 80069c0:	d112      	bne.n	80069e8 <__mdiff+0x3c>
 80069c2:	4629      	mov	r1, r5
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff fd5d 	bl	8006484 <_Balloc>
 80069ca:	4602      	mov	r2, r0
 80069cc:	b928      	cbnz	r0, 80069da <__mdiff+0x2e>
 80069ce:	f240 2137 	movw	r1, #567	@ 0x237
 80069d2:	4b3e      	ldr	r3, [pc, #248]	@ (8006acc <__mdiff+0x120>)
 80069d4:	483e      	ldr	r0, [pc, #248]	@ (8006ad0 <__mdiff+0x124>)
 80069d6:	f000 fcd1 	bl	800737c <__assert_func>
 80069da:	2301      	movs	r3, #1
 80069dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069e0:	4610      	mov	r0, r2
 80069e2:	b003      	add	sp, #12
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	bfbc      	itt	lt
 80069ea:	464b      	movlt	r3, r9
 80069ec:	46a1      	movlt	r9, r4
 80069ee:	4630      	mov	r0, r6
 80069f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069f4:	bfba      	itte	lt
 80069f6:	461c      	movlt	r4, r3
 80069f8:	2501      	movlt	r5, #1
 80069fa:	2500      	movge	r5, #0
 80069fc:	f7ff fd42 	bl	8006484 <_Balloc>
 8006a00:	4602      	mov	r2, r0
 8006a02:	b918      	cbnz	r0, 8006a0c <__mdiff+0x60>
 8006a04:	f240 2145 	movw	r1, #581	@ 0x245
 8006a08:	4b30      	ldr	r3, [pc, #192]	@ (8006acc <__mdiff+0x120>)
 8006a0a:	e7e3      	b.n	80069d4 <__mdiff+0x28>
 8006a0c:	f100 0b14 	add.w	fp, r0, #20
 8006a10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a14:	f109 0310 	add.w	r3, r9, #16
 8006a18:	60c5      	str	r5, [r0, #12]
 8006a1a:	f04f 0c00 	mov.w	ip, #0
 8006a1e:	f109 0514 	add.w	r5, r9, #20
 8006a22:	46d9      	mov	r9, fp
 8006a24:	6926      	ldr	r6, [r4, #16]
 8006a26:	f104 0e14 	add.w	lr, r4, #20
 8006a2a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a2e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	9b01      	ldr	r3, [sp, #4]
 8006a36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a3e:	b281      	uxth	r1, r0
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	fa1f f38a 	uxth.w	r3, sl
 8006a46:	1a5b      	subs	r3, r3, r1
 8006a48:	0c00      	lsrs	r0, r0, #16
 8006a4a:	4463      	add	r3, ip
 8006a4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a50:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a5a:	4576      	cmp	r6, lr
 8006a5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a60:	f849 3b04 	str.w	r3, [r9], #4
 8006a64:	d8e6      	bhi.n	8006a34 <__mdiff+0x88>
 8006a66:	1b33      	subs	r3, r6, r4
 8006a68:	3b15      	subs	r3, #21
 8006a6a:	f023 0303 	bic.w	r3, r3, #3
 8006a6e:	3415      	adds	r4, #21
 8006a70:	3304      	adds	r3, #4
 8006a72:	42a6      	cmp	r6, r4
 8006a74:	bf38      	it	cc
 8006a76:	2304      	movcc	r3, #4
 8006a78:	441d      	add	r5, r3
 8006a7a:	445b      	add	r3, fp
 8006a7c:	461e      	mov	r6, r3
 8006a7e:	462c      	mov	r4, r5
 8006a80:	4544      	cmp	r4, r8
 8006a82:	d30e      	bcc.n	8006aa2 <__mdiff+0xf6>
 8006a84:	f108 0103 	add.w	r1, r8, #3
 8006a88:	1b49      	subs	r1, r1, r5
 8006a8a:	f021 0103 	bic.w	r1, r1, #3
 8006a8e:	3d03      	subs	r5, #3
 8006a90:	45a8      	cmp	r8, r5
 8006a92:	bf38      	it	cc
 8006a94:	2100      	movcc	r1, #0
 8006a96:	440b      	add	r3, r1
 8006a98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a9c:	b199      	cbz	r1, 8006ac6 <__mdiff+0x11a>
 8006a9e:	6117      	str	r7, [r2, #16]
 8006aa0:	e79e      	b.n	80069e0 <__mdiff+0x34>
 8006aa2:	46e6      	mov	lr, ip
 8006aa4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006aa8:	fa1f fc81 	uxth.w	ip, r1
 8006aac:	44f4      	add	ip, lr
 8006aae:	0c08      	lsrs	r0, r1, #16
 8006ab0:	4471      	add	r1, lr
 8006ab2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ab6:	b289      	uxth	r1, r1
 8006ab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006abc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ac0:	f846 1b04 	str.w	r1, [r6], #4
 8006ac4:	e7dc      	b.n	8006a80 <__mdiff+0xd4>
 8006ac6:	3f01      	subs	r7, #1
 8006ac8:	e7e6      	b.n	8006a98 <__mdiff+0xec>
 8006aca:	bf00      	nop
 8006acc:	08007df6 	.word	0x08007df6
 8006ad0:	08007e07 	.word	0x08007e07

08006ad4 <__d2b>:
 8006ad4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4690      	mov	r8, r2
 8006adc:	4699      	mov	r9, r3
 8006ade:	9e08      	ldr	r6, [sp, #32]
 8006ae0:	f7ff fcd0 	bl	8006484 <_Balloc>
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	b930      	cbnz	r0, 8006af6 <__d2b+0x22>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	f240 310f 	movw	r1, #783	@ 0x30f
 8006aee:	4b23      	ldr	r3, [pc, #140]	@ (8006b7c <__d2b+0xa8>)
 8006af0:	4823      	ldr	r0, [pc, #140]	@ (8006b80 <__d2b+0xac>)
 8006af2:	f000 fc43 	bl	800737c <__assert_func>
 8006af6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006afa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006afe:	b10d      	cbz	r5, 8006b04 <__d2b+0x30>
 8006b00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	f1b8 0300 	subs.w	r3, r8, #0
 8006b0a:	d024      	beq.n	8006b56 <__d2b+0x82>
 8006b0c:	4668      	mov	r0, sp
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	f7ff fd7f 	bl	8006612 <__lo0bits>
 8006b14:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b18:	b1d8      	cbz	r0, 8006b52 <__d2b+0x7e>
 8006b1a:	f1c0 0320 	rsb	r3, r0, #32
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	430b      	orrs	r3, r1
 8006b24:	40c2      	lsrs	r2, r0
 8006b26:	6163      	str	r3, [r4, #20]
 8006b28:	9201      	str	r2, [sp, #4]
 8006b2a:	9b01      	ldr	r3, [sp, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	bf0c      	ite	eq
 8006b30:	2201      	moveq	r2, #1
 8006b32:	2202      	movne	r2, #2
 8006b34:	61a3      	str	r3, [r4, #24]
 8006b36:	6122      	str	r2, [r4, #16]
 8006b38:	b1ad      	cbz	r5, 8006b66 <__d2b+0x92>
 8006b3a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b3e:	4405      	add	r5, r0
 8006b40:	6035      	str	r5, [r6, #0]
 8006b42:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b48:	6018      	str	r0, [r3, #0]
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	b002      	add	sp, #8
 8006b4e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006b52:	6161      	str	r1, [r4, #20]
 8006b54:	e7e9      	b.n	8006b2a <__d2b+0x56>
 8006b56:	a801      	add	r0, sp, #4
 8006b58:	f7ff fd5b 	bl	8006612 <__lo0bits>
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	6163      	str	r3, [r4, #20]
 8006b62:	3020      	adds	r0, #32
 8006b64:	e7e7      	b.n	8006b36 <__d2b+0x62>
 8006b66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b6e:	6030      	str	r0, [r6, #0]
 8006b70:	6918      	ldr	r0, [r3, #16]
 8006b72:	f7ff fd2f 	bl	80065d4 <__hi0bits>
 8006b76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b7a:	e7e4      	b.n	8006b46 <__d2b+0x72>
 8006b7c:	08007df6 	.word	0x08007df6
 8006b80:	08007e07 	.word	0x08007e07

08006b84 <__ssputs_r>:
 8006b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	461f      	mov	r7, r3
 8006b8a:	688e      	ldr	r6, [r1, #8]
 8006b8c:	4682      	mov	sl, r0
 8006b8e:	42be      	cmp	r6, r7
 8006b90:	460c      	mov	r4, r1
 8006b92:	4690      	mov	r8, r2
 8006b94:	680b      	ldr	r3, [r1, #0]
 8006b96:	d82d      	bhi.n	8006bf4 <__ssputs_r+0x70>
 8006b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ba0:	d026      	beq.n	8006bf0 <__ssputs_r+0x6c>
 8006ba2:	6965      	ldr	r5, [r4, #20]
 8006ba4:	6909      	ldr	r1, [r1, #16]
 8006ba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006baa:	eba3 0901 	sub.w	r9, r3, r1
 8006bae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bb2:	1c7b      	adds	r3, r7, #1
 8006bb4:	444b      	add	r3, r9
 8006bb6:	106d      	asrs	r5, r5, #1
 8006bb8:	429d      	cmp	r5, r3
 8006bba:	bf38      	it	cc
 8006bbc:	461d      	movcc	r5, r3
 8006bbe:	0553      	lsls	r3, r2, #21
 8006bc0:	d527      	bpl.n	8006c12 <__ssputs_r+0x8e>
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	f7ff fbd2 	bl	800636c <_malloc_r>
 8006bc8:	4606      	mov	r6, r0
 8006bca:	b360      	cbz	r0, 8006c26 <__ssputs_r+0xa2>
 8006bcc:	464a      	mov	r2, r9
 8006bce:	6921      	ldr	r1, [r4, #16]
 8006bd0:	f000 fbc6 	bl	8007360 <memcpy>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	6126      	str	r6, [r4, #16]
 8006be2:	444e      	add	r6, r9
 8006be4:	6026      	str	r6, [r4, #0]
 8006be6:	463e      	mov	r6, r7
 8006be8:	6165      	str	r5, [r4, #20]
 8006bea:	eba5 0509 	sub.w	r5, r5, r9
 8006bee:	60a5      	str	r5, [r4, #8]
 8006bf0:	42be      	cmp	r6, r7
 8006bf2:	d900      	bls.n	8006bf6 <__ssputs_r+0x72>
 8006bf4:	463e      	mov	r6, r7
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	6820      	ldr	r0, [r4, #0]
 8006bfc:	f000 fb63 	bl	80072c6 <memmove>
 8006c00:	2000      	movs	r0, #0
 8006c02:	68a3      	ldr	r3, [r4, #8]
 8006c04:	1b9b      	subs	r3, r3, r6
 8006c06:	60a3      	str	r3, [r4, #8]
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	4433      	add	r3, r6
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c12:	462a      	mov	r2, r5
 8006c14:	f000 fbf6 	bl	8007404 <_realloc_r>
 8006c18:	4606      	mov	r6, r0
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d1e0      	bne.n	8006be0 <__ssputs_r+0x5c>
 8006c1e:	4650      	mov	r0, sl
 8006c20:	6921      	ldr	r1, [r4, #16]
 8006c22:	f7ff fb31 	bl	8006288 <_free_r>
 8006c26:	230c      	movs	r3, #12
 8006c28:	f8ca 3000 	str.w	r3, [sl]
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c36:	81a3      	strh	r3, [r4, #12]
 8006c38:	e7e9      	b.n	8006c0e <__ssputs_r+0x8a>
	...

08006c3c <_svfiprintf_r>:
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	4698      	mov	r8, r3
 8006c42:	898b      	ldrh	r3, [r1, #12]
 8006c44:	4607      	mov	r7, r0
 8006c46:	061b      	lsls	r3, r3, #24
 8006c48:	460d      	mov	r5, r1
 8006c4a:	4614      	mov	r4, r2
 8006c4c:	b09d      	sub	sp, #116	@ 0x74
 8006c4e:	d510      	bpl.n	8006c72 <_svfiprintf_r+0x36>
 8006c50:	690b      	ldr	r3, [r1, #16]
 8006c52:	b973      	cbnz	r3, 8006c72 <_svfiprintf_r+0x36>
 8006c54:	2140      	movs	r1, #64	@ 0x40
 8006c56:	f7ff fb89 	bl	800636c <_malloc_r>
 8006c5a:	6028      	str	r0, [r5, #0]
 8006c5c:	6128      	str	r0, [r5, #16]
 8006c5e:	b930      	cbnz	r0, 8006c6e <_svfiprintf_r+0x32>
 8006c60:	230c      	movs	r3, #12
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	b01d      	add	sp, #116	@ 0x74
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	2340      	movs	r3, #64	@ 0x40
 8006c70:	616b      	str	r3, [r5, #20]
 8006c72:	2300      	movs	r3, #0
 8006c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c76:	2320      	movs	r3, #32
 8006c78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c7c:	2330      	movs	r3, #48	@ 0x30
 8006c7e:	f04f 0901 	mov.w	r9, #1
 8006c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e20 <_svfiprintf_r+0x1e4>
 8006c8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c8e:	4623      	mov	r3, r4
 8006c90:	469a      	mov	sl, r3
 8006c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c96:	b10a      	cbz	r2, 8006c9c <_svfiprintf_r+0x60>
 8006c98:	2a25      	cmp	r2, #37	@ 0x25
 8006c9a:	d1f9      	bne.n	8006c90 <_svfiprintf_r+0x54>
 8006c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006ca0:	d00b      	beq.n	8006cba <_svfiprintf_r+0x7e>
 8006ca2:	465b      	mov	r3, fp
 8006ca4:	4622      	mov	r2, r4
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff ff6b 	bl	8006b84 <__ssputs_r>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f000 80a7 	beq.w	8006e02 <_svfiprintf_r+0x1c6>
 8006cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cb6:	445a      	add	r2, fp
 8006cb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cba:	f89a 3000 	ldrb.w	r3, [sl]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 809f 	beq.w	8006e02 <_svfiprintf_r+0x1c6>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cce:	f10a 0a01 	add.w	sl, sl, #1
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	9307      	str	r3, [sp, #28]
 8006cd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cda:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cdc:	4654      	mov	r4, sl
 8006cde:	2205      	movs	r2, #5
 8006ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce4:	484e      	ldr	r0, [pc, #312]	@ (8006e20 <_svfiprintf_r+0x1e4>)
 8006ce6:	f7fe fc6e 	bl	80055c6 <memchr>
 8006cea:	9a04      	ldr	r2, [sp, #16]
 8006cec:	b9d8      	cbnz	r0, 8006d26 <_svfiprintf_r+0xea>
 8006cee:	06d0      	lsls	r0, r2, #27
 8006cf0:	bf44      	itt	mi
 8006cf2:	2320      	movmi	r3, #32
 8006cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cf8:	0711      	lsls	r1, r2, #28
 8006cfa:	bf44      	itt	mi
 8006cfc:	232b      	movmi	r3, #43	@ 0x2b
 8006cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d02:	f89a 3000 	ldrb.w	r3, [sl]
 8006d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d08:	d015      	beq.n	8006d36 <_svfiprintf_r+0xfa>
 8006d0a:	4654      	mov	r4, sl
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f04f 0c0a 	mov.w	ip, #10
 8006d12:	9a07      	ldr	r2, [sp, #28]
 8006d14:	4621      	mov	r1, r4
 8006d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d1a:	3b30      	subs	r3, #48	@ 0x30
 8006d1c:	2b09      	cmp	r3, #9
 8006d1e:	d94b      	bls.n	8006db8 <_svfiprintf_r+0x17c>
 8006d20:	b1b0      	cbz	r0, 8006d50 <_svfiprintf_r+0x114>
 8006d22:	9207      	str	r2, [sp, #28]
 8006d24:	e014      	b.n	8006d50 <_svfiprintf_r+0x114>
 8006d26:	eba0 0308 	sub.w	r3, r0, r8
 8006d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	46a2      	mov	sl, r4
 8006d32:	9304      	str	r3, [sp, #16]
 8006d34:	e7d2      	b.n	8006cdc <_svfiprintf_r+0xa0>
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	1d19      	adds	r1, r3, #4
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	9103      	str	r1, [sp, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bfbb      	ittet	lt
 8006d42:	425b      	neglt	r3, r3
 8006d44:	f042 0202 	orrlt.w	r2, r2, #2
 8006d48:	9307      	strge	r3, [sp, #28]
 8006d4a:	9307      	strlt	r3, [sp, #28]
 8006d4c:	bfb8      	it	lt
 8006d4e:	9204      	strlt	r2, [sp, #16]
 8006d50:	7823      	ldrb	r3, [r4, #0]
 8006d52:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d54:	d10a      	bne.n	8006d6c <_svfiprintf_r+0x130>
 8006d56:	7863      	ldrb	r3, [r4, #1]
 8006d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d5a:	d132      	bne.n	8006dc2 <_svfiprintf_r+0x186>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	3402      	adds	r4, #2
 8006d60:	1d1a      	adds	r2, r3, #4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	9203      	str	r2, [sp, #12]
 8006d66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d6a:	9305      	str	r3, [sp, #20]
 8006d6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e24 <_svfiprintf_r+0x1e8>
 8006d70:	2203      	movs	r2, #3
 8006d72:	4650      	mov	r0, sl
 8006d74:	7821      	ldrb	r1, [r4, #0]
 8006d76:	f7fe fc26 	bl	80055c6 <memchr>
 8006d7a:	b138      	cbz	r0, 8006d8c <_svfiprintf_r+0x150>
 8006d7c:	2240      	movs	r2, #64	@ 0x40
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	eba0 000a 	sub.w	r0, r0, sl
 8006d84:	4082      	lsls	r2, r0
 8006d86:	4313      	orrs	r3, r2
 8006d88:	3401      	adds	r4, #1
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d90:	2206      	movs	r2, #6
 8006d92:	4825      	ldr	r0, [pc, #148]	@ (8006e28 <_svfiprintf_r+0x1ec>)
 8006d94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d98:	f7fe fc15 	bl	80055c6 <memchr>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d036      	beq.n	8006e0e <_svfiprintf_r+0x1d2>
 8006da0:	4b22      	ldr	r3, [pc, #136]	@ (8006e2c <_svfiprintf_r+0x1f0>)
 8006da2:	bb1b      	cbnz	r3, 8006dec <_svfiprintf_r+0x1b0>
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	3307      	adds	r3, #7
 8006da8:	f023 0307 	bic.w	r3, r3, #7
 8006dac:	3308      	adds	r3, #8
 8006dae:	9303      	str	r3, [sp, #12]
 8006db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db2:	4433      	add	r3, r6
 8006db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006db6:	e76a      	b.n	8006c8e <_svfiprintf_r+0x52>
 8006db8:	460c      	mov	r4, r1
 8006dba:	2001      	movs	r0, #1
 8006dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dc0:	e7a8      	b.n	8006d14 <_svfiprintf_r+0xd8>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f04f 0c0a 	mov.w	ip, #10
 8006dc8:	4619      	mov	r1, r3
 8006dca:	3401      	adds	r4, #1
 8006dcc:	9305      	str	r3, [sp, #20]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd4:	3a30      	subs	r2, #48	@ 0x30
 8006dd6:	2a09      	cmp	r2, #9
 8006dd8:	d903      	bls.n	8006de2 <_svfiprintf_r+0x1a6>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0c6      	beq.n	8006d6c <_svfiprintf_r+0x130>
 8006dde:	9105      	str	r1, [sp, #20]
 8006de0:	e7c4      	b.n	8006d6c <_svfiprintf_r+0x130>
 8006de2:	4604      	mov	r4, r0
 8006de4:	2301      	movs	r3, #1
 8006de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dea:	e7f0      	b.n	8006dce <_svfiprintf_r+0x192>
 8006dec:	ab03      	add	r3, sp, #12
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	462a      	mov	r2, r5
 8006df2:	4638      	mov	r0, r7
 8006df4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e30 <_svfiprintf_r+0x1f4>)
 8006df6:	a904      	add	r1, sp, #16
 8006df8:	f7fd fd34 	bl	8004864 <_printf_float>
 8006dfc:	1c42      	adds	r2, r0, #1
 8006dfe:	4606      	mov	r6, r0
 8006e00:	d1d6      	bne.n	8006db0 <_svfiprintf_r+0x174>
 8006e02:	89ab      	ldrh	r3, [r5, #12]
 8006e04:	065b      	lsls	r3, r3, #25
 8006e06:	f53f af2d 	bmi.w	8006c64 <_svfiprintf_r+0x28>
 8006e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e0c:	e72c      	b.n	8006c68 <_svfiprintf_r+0x2c>
 8006e0e:	ab03      	add	r3, sp, #12
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	462a      	mov	r2, r5
 8006e14:	4638      	mov	r0, r7
 8006e16:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <_svfiprintf_r+0x1f4>)
 8006e18:	a904      	add	r1, sp, #16
 8006e1a:	f7fd ffc1 	bl	8004da0 <_printf_i>
 8006e1e:	e7ed      	b.n	8006dfc <_svfiprintf_r+0x1c0>
 8006e20:	08007f60 	.word	0x08007f60
 8006e24:	08007f66 	.word	0x08007f66
 8006e28:	08007f6a 	.word	0x08007f6a
 8006e2c:	08004865 	.word	0x08004865
 8006e30:	08006b85 	.word	0x08006b85

08006e34 <__sfputc_r>:
 8006e34:	6893      	ldr	r3, [r2, #8]
 8006e36:	b410      	push	{r4}
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	6093      	str	r3, [r2, #8]
 8006e3e:	da07      	bge.n	8006e50 <__sfputc_r+0x1c>
 8006e40:	6994      	ldr	r4, [r2, #24]
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	db01      	blt.n	8006e4a <__sfputc_r+0x16>
 8006e46:	290a      	cmp	r1, #10
 8006e48:	d102      	bne.n	8006e50 <__sfputc_r+0x1c>
 8006e4a:	bc10      	pop	{r4}
 8006e4c:	f7fe ba71 	b.w	8005332 <__swbuf_r>
 8006e50:	6813      	ldr	r3, [r2, #0]
 8006e52:	1c58      	adds	r0, r3, #1
 8006e54:	6010      	str	r0, [r2, #0]
 8006e56:	7019      	strb	r1, [r3, #0]
 8006e58:	4608      	mov	r0, r1
 8006e5a:	bc10      	pop	{r4}
 8006e5c:	4770      	bx	lr

08006e5e <__sfputs_r>:
 8006e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e60:	4606      	mov	r6, r0
 8006e62:	460f      	mov	r7, r1
 8006e64:	4614      	mov	r4, r2
 8006e66:	18d5      	adds	r5, r2, r3
 8006e68:	42ac      	cmp	r4, r5
 8006e6a:	d101      	bne.n	8006e70 <__sfputs_r+0x12>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	e007      	b.n	8006e80 <__sfputs_r+0x22>
 8006e70:	463a      	mov	r2, r7
 8006e72:	4630      	mov	r0, r6
 8006e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e78:	f7ff ffdc 	bl	8006e34 <__sfputc_r>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d1f3      	bne.n	8006e68 <__sfputs_r+0xa>
 8006e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e84 <_vfiprintf_r>:
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	460d      	mov	r5, r1
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	4698      	mov	r8, r3
 8006e8e:	4606      	mov	r6, r0
 8006e90:	b09d      	sub	sp, #116	@ 0x74
 8006e92:	b118      	cbz	r0, 8006e9c <_vfiprintf_r+0x18>
 8006e94:	6a03      	ldr	r3, [r0, #32]
 8006e96:	b90b      	cbnz	r3, 8006e9c <_vfiprintf_r+0x18>
 8006e98:	f7fe f92e 	bl	80050f8 <__sinit>
 8006e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e9e:	07d9      	lsls	r1, r3, #31
 8006ea0:	d405      	bmi.n	8006eae <_vfiprintf_r+0x2a>
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	059a      	lsls	r2, r3, #22
 8006ea6:	d402      	bmi.n	8006eae <_vfiprintf_r+0x2a>
 8006ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eaa:	f7fe fb8a 	bl	80055c2 <__retarget_lock_acquire_recursive>
 8006eae:	89ab      	ldrh	r3, [r5, #12]
 8006eb0:	071b      	lsls	r3, r3, #28
 8006eb2:	d501      	bpl.n	8006eb8 <_vfiprintf_r+0x34>
 8006eb4:	692b      	ldr	r3, [r5, #16]
 8006eb6:	b99b      	cbnz	r3, 8006ee0 <_vfiprintf_r+0x5c>
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7fe fa78 	bl	80053b0 <__swsetup_r>
 8006ec0:	b170      	cbz	r0, 8006ee0 <_vfiprintf_r+0x5c>
 8006ec2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ec4:	07dc      	lsls	r4, r3, #31
 8006ec6:	d504      	bpl.n	8006ed2 <_vfiprintf_r+0x4e>
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ecc:	b01d      	add	sp, #116	@ 0x74
 8006ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed2:	89ab      	ldrh	r3, [r5, #12]
 8006ed4:	0598      	lsls	r0, r3, #22
 8006ed6:	d4f7      	bmi.n	8006ec8 <_vfiprintf_r+0x44>
 8006ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eda:	f7fe fb73 	bl	80055c4 <__retarget_lock_release_recursive>
 8006ede:	e7f3      	b.n	8006ec8 <_vfiprintf_r+0x44>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ee4:	2320      	movs	r3, #32
 8006ee6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006eea:	2330      	movs	r3, #48	@ 0x30
 8006eec:	f04f 0901 	mov.w	r9, #1
 8006ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ef4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80070a0 <_vfiprintf_r+0x21c>
 8006ef8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006efc:	4623      	mov	r3, r4
 8006efe:	469a      	mov	sl, r3
 8006f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f04:	b10a      	cbz	r2, 8006f0a <_vfiprintf_r+0x86>
 8006f06:	2a25      	cmp	r2, #37	@ 0x25
 8006f08:	d1f9      	bne.n	8006efe <_vfiprintf_r+0x7a>
 8006f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f0e:	d00b      	beq.n	8006f28 <_vfiprintf_r+0xa4>
 8006f10:	465b      	mov	r3, fp
 8006f12:	4622      	mov	r2, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7ff ffa1 	bl	8006e5e <__sfputs_r>
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f000 80a7 	beq.w	8007070 <_vfiprintf_r+0x1ec>
 8006f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f24:	445a      	add	r2, fp
 8006f26:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f28:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 809f 	beq.w	8007070 <_vfiprintf_r+0x1ec>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295
 8006f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f3c:	f10a 0a01 	add.w	sl, sl, #1
 8006f40:	9304      	str	r3, [sp, #16]
 8006f42:	9307      	str	r3, [sp, #28]
 8006f44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f48:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f4a:	4654      	mov	r4, sl
 8006f4c:	2205      	movs	r2, #5
 8006f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f52:	4853      	ldr	r0, [pc, #332]	@ (80070a0 <_vfiprintf_r+0x21c>)
 8006f54:	f7fe fb37 	bl	80055c6 <memchr>
 8006f58:	9a04      	ldr	r2, [sp, #16]
 8006f5a:	b9d8      	cbnz	r0, 8006f94 <_vfiprintf_r+0x110>
 8006f5c:	06d1      	lsls	r1, r2, #27
 8006f5e:	bf44      	itt	mi
 8006f60:	2320      	movmi	r3, #32
 8006f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f66:	0713      	lsls	r3, r2, #28
 8006f68:	bf44      	itt	mi
 8006f6a:	232b      	movmi	r3, #43	@ 0x2b
 8006f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f70:	f89a 3000 	ldrb.w	r3, [sl]
 8006f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f76:	d015      	beq.n	8006fa4 <_vfiprintf_r+0x120>
 8006f78:	4654      	mov	r4, sl
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	f04f 0c0a 	mov.w	ip, #10
 8006f80:	9a07      	ldr	r2, [sp, #28]
 8006f82:	4621      	mov	r1, r4
 8006f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f88:	3b30      	subs	r3, #48	@ 0x30
 8006f8a:	2b09      	cmp	r3, #9
 8006f8c:	d94b      	bls.n	8007026 <_vfiprintf_r+0x1a2>
 8006f8e:	b1b0      	cbz	r0, 8006fbe <_vfiprintf_r+0x13a>
 8006f90:	9207      	str	r2, [sp, #28]
 8006f92:	e014      	b.n	8006fbe <_vfiprintf_r+0x13a>
 8006f94:	eba0 0308 	sub.w	r3, r0, r8
 8006f98:	fa09 f303 	lsl.w	r3, r9, r3
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	46a2      	mov	sl, r4
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	e7d2      	b.n	8006f4a <_vfiprintf_r+0xc6>
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	1d19      	adds	r1, r3, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	9103      	str	r1, [sp, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bfbb      	ittet	lt
 8006fb0:	425b      	neglt	r3, r3
 8006fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8006fb6:	9307      	strge	r3, [sp, #28]
 8006fb8:	9307      	strlt	r3, [sp, #28]
 8006fba:	bfb8      	it	lt
 8006fbc:	9204      	strlt	r2, [sp, #16]
 8006fbe:	7823      	ldrb	r3, [r4, #0]
 8006fc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fc2:	d10a      	bne.n	8006fda <_vfiprintf_r+0x156>
 8006fc4:	7863      	ldrb	r3, [r4, #1]
 8006fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fc8:	d132      	bne.n	8007030 <_vfiprintf_r+0x1ac>
 8006fca:	9b03      	ldr	r3, [sp, #12]
 8006fcc:	3402      	adds	r4, #2
 8006fce:	1d1a      	adds	r2, r3, #4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	9203      	str	r2, [sp, #12]
 8006fd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fd8:	9305      	str	r3, [sp, #20]
 8006fda:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80070a4 <_vfiprintf_r+0x220>
 8006fde:	2203      	movs	r2, #3
 8006fe0:	4650      	mov	r0, sl
 8006fe2:	7821      	ldrb	r1, [r4, #0]
 8006fe4:	f7fe faef 	bl	80055c6 <memchr>
 8006fe8:	b138      	cbz	r0, 8006ffa <_vfiprintf_r+0x176>
 8006fea:	2240      	movs	r2, #64	@ 0x40
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	eba0 000a 	sub.w	r0, r0, sl
 8006ff2:	4082      	lsls	r2, r0
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	3401      	adds	r4, #1
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffe:	2206      	movs	r2, #6
 8007000:	4829      	ldr	r0, [pc, #164]	@ (80070a8 <_vfiprintf_r+0x224>)
 8007002:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007006:	f7fe fade 	bl	80055c6 <memchr>
 800700a:	2800      	cmp	r0, #0
 800700c:	d03f      	beq.n	800708e <_vfiprintf_r+0x20a>
 800700e:	4b27      	ldr	r3, [pc, #156]	@ (80070ac <_vfiprintf_r+0x228>)
 8007010:	bb1b      	cbnz	r3, 800705a <_vfiprintf_r+0x1d6>
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	3307      	adds	r3, #7
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	3308      	adds	r3, #8
 800701c:	9303      	str	r3, [sp, #12]
 800701e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007020:	443b      	add	r3, r7
 8007022:	9309      	str	r3, [sp, #36]	@ 0x24
 8007024:	e76a      	b.n	8006efc <_vfiprintf_r+0x78>
 8007026:	460c      	mov	r4, r1
 8007028:	2001      	movs	r0, #1
 800702a:	fb0c 3202 	mla	r2, ip, r2, r3
 800702e:	e7a8      	b.n	8006f82 <_vfiprintf_r+0xfe>
 8007030:	2300      	movs	r3, #0
 8007032:	f04f 0c0a 	mov.w	ip, #10
 8007036:	4619      	mov	r1, r3
 8007038:	3401      	adds	r4, #1
 800703a:	9305      	str	r3, [sp, #20]
 800703c:	4620      	mov	r0, r4
 800703e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007042:	3a30      	subs	r2, #48	@ 0x30
 8007044:	2a09      	cmp	r2, #9
 8007046:	d903      	bls.n	8007050 <_vfiprintf_r+0x1cc>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0c6      	beq.n	8006fda <_vfiprintf_r+0x156>
 800704c:	9105      	str	r1, [sp, #20]
 800704e:	e7c4      	b.n	8006fda <_vfiprintf_r+0x156>
 8007050:	4604      	mov	r4, r0
 8007052:	2301      	movs	r3, #1
 8007054:	fb0c 2101 	mla	r1, ip, r1, r2
 8007058:	e7f0      	b.n	800703c <_vfiprintf_r+0x1b8>
 800705a:	ab03      	add	r3, sp, #12
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	462a      	mov	r2, r5
 8007060:	4630      	mov	r0, r6
 8007062:	4b13      	ldr	r3, [pc, #76]	@ (80070b0 <_vfiprintf_r+0x22c>)
 8007064:	a904      	add	r1, sp, #16
 8007066:	f7fd fbfd 	bl	8004864 <_printf_float>
 800706a:	4607      	mov	r7, r0
 800706c:	1c78      	adds	r0, r7, #1
 800706e:	d1d6      	bne.n	800701e <_vfiprintf_r+0x19a>
 8007070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007072:	07d9      	lsls	r1, r3, #31
 8007074:	d405      	bmi.n	8007082 <_vfiprintf_r+0x1fe>
 8007076:	89ab      	ldrh	r3, [r5, #12]
 8007078:	059a      	lsls	r2, r3, #22
 800707a:	d402      	bmi.n	8007082 <_vfiprintf_r+0x1fe>
 800707c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800707e:	f7fe faa1 	bl	80055c4 <__retarget_lock_release_recursive>
 8007082:	89ab      	ldrh	r3, [r5, #12]
 8007084:	065b      	lsls	r3, r3, #25
 8007086:	f53f af1f 	bmi.w	8006ec8 <_vfiprintf_r+0x44>
 800708a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800708c:	e71e      	b.n	8006ecc <_vfiprintf_r+0x48>
 800708e:	ab03      	add	r3, sp, #12
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	462a      	mov	r2, r5
 8007094:	4630      	mov	r0, r6
 8007096:	4b06      	ldr	r3, [pc, #24]	@ (80070b0 <_vfiprintf_r+0x22c>)
 8007098:	a904      	add	r1, sp, #16
 800709a:	f7fd fe81 	bl	8004da0 <_printf_i>
 800709e:	e7e4      	b.n	800706a <_vfiprintf_r+0x1e6>
 80070a0:	08007f60 	.word	0x08007f60
 80070a4:	08007f66 	.word	0x08007f66
 80070a8:	08007f6a 	.word	0x08007f6a
 80070ac:	08004865 	.word	0x08004865
 80070b0:	08006e5f 	.word	0x08006e5f

080070b4 <__sflush_r>:
 80070b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	0716      	lsls	r6, r2, #28
 80070bc:	4605      	mov	r5, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	d454      	bmi.n	800716c <__sflush_r+0xb8>
 80070c2:	684b      	ldr	r3, [r1, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dc02      	bgt.n	80070ce <__sflush_r+0x1a>
 80070c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dd48      	ble.n	8007160 <__sflush_r+0xac>
 80070ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070d0:	2e00      	cmp	r6, #0
 80070d2:	d045      	beq.n	8007160 <__sflush_r+0xac>
 80070d4:	2300      	movs	r3, #0
 80070d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070da:	682f      	ldr	r7, [r5, #0]
 80070dc:	6a21      	ldr	r1, [r4, #32]
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	d030      	beq.n	8007144 <__sflush_r+0x90>
 80070e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	0759      	lsls	r1, r3, #29
 80070e8:	d505      	bpl.n	80070f6 <__sflush_r+0x42>
 80070ea:	6863      	ldr	r3, [r4, #4]
 80070ec:	1ad2      	subs	r2, r2, r3
 80070ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070f0:	b10b      	cbz	r3, 80070f6 <__sflush_r+0x42>
 80070f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070f4:	1ad2      	subs	r2, r2, r3
 80070f6:	2300      	movs	r3, #0
 80070f8:	4628      	mov	r0, r5
 80070fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070fc:	6a21      	ldr	r1, [r4, #32]
 80070fe:	47b0      	blx	r6
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	d106      	bne.n	8007114 <__sflush_r+0x60>
 8007106:	6829      	ldr	r1, [r5, #0]
 8007108:	291d      	cmp	r1, #29
 800710a:	d82b      	bhi.n	8007164 <__sflush_r+0xb0>
 800710c:	4a28      	ldr	r2, [pc, #160]	@ (80071b0 <__sflush_r+0xfc>)
 800710e:	410a      	asrs	r2, r1
 8007110:	07d6      	lsls	r6, r2, #31
 8007112:	d427      	bmi.n	8007164 <__sflush_r+0xb0>
 8007114:	2200      	movs	r2, #0
 8007116:	6062      	str	r2, [r4, #4]
 8007118:	6922      	ldr	r2, [r4, #16]
 800711a:	04d9      	lsls	r1, r3, #19
 800711c:	6022      	str	r2, [r4, #0]
 800711e:	d504      	bpl.n	800712a <__sflush_r+0x76>
 8007120:	1c42      	adds	r2, r0, #1
 8007122:	d101      	bne.n	8007128 <__sflush_r+0x74>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b903      	cbnz	r3, 800712a <__sflush_r+0x76>
 8007128:	6560      	str	r0, [r4, #84]	@ 0x54
 800712a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800712c:	602f      	str	r7, [r5, #0]
 800712e:	b1b9      	cbz	r1, 8007160 <__sflush_r+0xac>
 8007130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007134:	4299      	cmp	r1, r3
 8007136:	d002      	beq.n	800713e <__sflush_r+0x8a>
 8007138:	4628      	mov	r0, r5
 800713a:	f7ff f8a5 	bl	8006288 <_free_r>
 800713e:	2300      	movs	r3, #0
 8007140:	6363      	str	r3, [r4, #52]	@ 0x34
 8007142:	e00d      	b.n	8007160 <__sflush_r+0xac>
 8007144:	2301      	movs	r3, #1
 8007146:	4628      	mov	r0, r5
 8007148:	47b0      	blx	r6
 800714a:	4602      	mov	r2, r0
 800714c:	1c50      	adds	r0, r2, #1
 800714e:	d1c9      	bne.n	80070e4 <__sflush_r+0x30>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0c6      	beq.n	80070e4 <__sflush_r+0x30>
 8007156:	2b1d      	cmp	r3, #29
 8007158:	d001      	beq.n	800715e <__sflush_r+0xaa>
 800715a:	2b16      	cmp	r3, #22
 800715c:	d11d      	bne.n	800719a <__sflush_r+0xe6>
 800715e:	602f      	str	r7, [r5, #0]
 8007160:	2000      	movs	r0, #0
 8007162:	e021      	b.n	80071a8 <__sflush_r+0xf4>
 8007164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007168:	b21b      	sxth	r3, r3
 800716a:	e01a      	b.n	80071a2 <__sflush_r+0xee>
 800716c:	690f      	ldr	r7, [r1, #16]
 800716e:	2f00      	cmp	r7, #0
 8007170:	d0f6      	beq.n	8007160 <__sflush_r+0xac>
 8007172:	0793      	lsls	r3, r2, #30
 8007174:	bf18      	it	ne
 8007176:	2300      	movne	r3, #0
 8007178:	680e      	ldr	r6, [r1, #0]
 800717a:	bf08      	it	eq
 800717c:	694b      	ldreq	r3, [r1, #20]
 800717e:	1bf6      	subs	r6, r6, r7
 8007180:	600f      	str	r7, [r1, #0]
 8007182:	608b      	str	r3, [r1, #8]
 8007184:	2e00      	cmp	r6, #0
 8007186:	ddeb      	ble.n	8007160 <__sflush_r+0xac>
 8007188:	4633      	mov	r3, r6
 800718a:	463a      	mov	r2, r7
 800718c:	4628      	mov	r0, r5
 800718e:	6a21      	ldr	r1, [r4, #32]
 8007190:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007194:	47e0      	blx	ip
 8007196:	2800      	cmp	r0, #0
 8007198:	dc07      	bgt.n	80071aa <__sflush_r+0xf6>
 800719a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800719e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071aa:	4407      	add	r7, r0
 80071ac:	1a36      	subs	r6, r6, r0
 80071ae:	e7e9      	b.n	8007184 <__sflush_r+0xd0>
 80071b0:	dfbffffe 	.word	0xdfbffffe

080071b4 <_fflush_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	690b      	ldr	r3, [r1, #16]
 80071b8:	4605      	mov	r5, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	b913      	cbnz	r3, 80071c4 <_fflush_r+0x10>
 80071be:	2500      	movs	r5, #0
 80071c0:	4628      	mov	r0, r5
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	b118      	cbz	r0, 80071ce <_fflush_r+0x1a>
 80071c6:	6a03      	ldr	r3, [r0, #32]
 80071c8:	b90b      	cbnz	r3, 80071ce <_fflush_r+0x1a>
 80071ca:	f7fd ff95 	bl	80050f8 <__sinit>
 80071ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0f3      	beq.n	80071be <_fflush_r+0xa>
 80071d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071d8:	07d0      	lsls	r0, r2, #31
 80071da:	d404      	bmi.n	80071e6 <_fflush_r+0x32>
 80071dc:	0599      	lsls	r1, r3, #22
 80071de:	d402      	bmi.n	80071e6 <_fflush_r+0x32>
 80071e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071e2:	f7fe f9ee 	bl	80055c2 <__retarget_lock_acquire_recursive>
 80071e6:	4628      	mov	r0, r5
 80071e8:	4621      	mov	r1, r4
 80071ea:	f7ff ff63 	bl	80070b4 <__sflush_r>
 80071ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071f0:	4605      	mov	r5, r0
 80071f2:	07da      	lsls	r2, r3, #31
 80071f4:	d4e4      	bmi.n	80071c0 <_fflush_r+0xc>
 80071f6:	89a3      	ldrh	r3, [r4, #12]
 80071f8:	059b      	lsls	r3, r3, #22
 80071fa:	d4e1      	bmi.n	80071c0 <_fflush_r+0xc>
 80071fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071fe:	f7fe f9e1 	bl	80055c4 <__retarget_lock_release_recursive>
 8007202:	e7dd      	b.n	80071c0 <_fflush_r+0xc>

08007204 <__swhatbuf_r>:
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	460c      	mov	r4, r1
 8007208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720c:	4615      	mov	r5, r2
 800720e:	2900      	cmp	r1, #0
 8007210:	461e      	mov	r6, r3
 8007212:	b096      	sub	sp, #88	@ 0x58
 8007214:	da0c      	bge.n	8007230 <__swhatbuf_r+0x2c>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	2100      	movs	r1, #0
 800721a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800721e:	bf14      	ite	ne
 8007220:	2340      	movne	r3, #64	@ 0x40
 8007222:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007226:	2000      	movs	r0, #0
 8007228:	6031      	str	r1, [r6, #0]
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	b016      	add	sp, #88	@ 0x58
 800722e:	bd70      	pop	{r4, r5, r6, pc}
 8007230:	466a      	mov	r2, sp
 8007232:	f000 f863 	bl	80072fc <_fstat_r>
 8007236:	2800      	cmp	r0, #0
 8007238:	dbed      	blt.n	8007216 <__swhatbuf_r+0x12>
 800723a:	9901      	ldr	r1, [sp, #4]
 800723c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007240:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007244:	4259      	negs	r1, r3
 8007246:	4159      	adcs	r1, r3
 8007248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800724c:	e7eb      	b.n	8007226 <__swhatbuf_r+0x22>

0800724e <__smakebuf_r>:
 800724e:	898b      	ldrh	r3, [r1, #12]
 8007250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007252:	079d      	lsls	r5, r3, #30
 8007254:	4606      	mov	r6, r0
 8007256:	460c      	mov	r4, r1
 8007258:	d507      	bpl.n	800726a <__smakebuf_r+0x1c>
 800725a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800725e:	6023      	str	r3, [r4, #0]
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	2301      	movs	r3, #1
 8007264:	6163      	str	r3, [r4, #20]
 8007266:	b003      	add	sp, #12
 8007268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800726a:	466a      	mov	r2, sp
 800726c:	ab01      	add	r3, sp, #4
 800726e:	f7ff ffc9 	bl	8007204 <__swhatbuf_r>
 8007272:	9f00      	ldr	r7, [sp, #0]
 8007274:	4605      	mov	r5, r0
 8007276:	4639      	mov	r1, r7
 8007278:	4630      	mov	r0, r6
 800727a:	f7ff f877 	bl	800636c <_malloc_r>
 800727e:	b948      	cbnz	r0, 8007294 <__smakebuf_r+0x46>
 8007280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007284:	059a      	lsls	r2, r3, #22
 8007286:	d4ee      	bmi.n	8007266 <__smakebuf_r+0x18>
 8007288:	f023 0303 	bic.w	r3, r3, #3
 800728c:	f043 0302 	orr.w	r3, r3, #2
 8007290:	81a3      	strh	r3, [r4, #12]
 8007292:	e7e2      	b.n	800725a <__smakebuf_r+0xc>
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800729a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	6020      	str	r0, [r4, #0]
 80072a4:	b15b      	cbz	r3, 80072be <__smakebuf_r+0x70>
 80072a6:	4630      	mov	r0, r6
 80072a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ac:	f000 f838 	bl	8007320 <_isatty_r>
 80072b0:	b128      	cbz	r0, 80072be <__smakebuf_r+0x70>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f023 0303 	bic.w	r3, r3, #3
 80072b8:	f043 0301 	orr.w	r3, r3, #1
 80072bc:	81a3      	strh	r3, [r4, #12]
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	431d      	orrs	r5, r3
 80072c2:	81a5      	strh	r5, [r4, #12]
 80072c4:	e7cf      	b.n	8007266 <__smakebuf_r+0x18>

080072c6 <memmove>:
 80072c6:	4288      	cmp	r0, r1
 80072c8:	b510      	push	{r4, lr}
 80072ca:	eb01 0402 	add.w	r4, r1, r2
 80072ce:	d902      	bls.n	80072d6 <memmove+0x10>
 80072d0:	4284      	cmp	r4, r0
 80072d2:	4623      	mov	r3, r4
 80072d4:	d807      	bhi.n	80072e6 <memmove+0x20>
 80072d6:	1e43      	subs	r3, r0, #1
 80072d8:	42a1      	cmp	r1, r4
 80072da:	d008      	beq.n	80072ee <memmove+0x28>
 80072dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072e4:	e7f8      	b.n	80072d8 <memmove+0x12>
 80072e6:	4601      	mov	r1, r0
 80072e8:	4402      	add	r2, r0
 80072ea:	428a      	cmp	r2, r1
 80072ec:	d100      	bne.n	80072f0 <memmove+0x2a>
 80072ee:	bd10      	pop	{r4, pc}
 80072f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072f8:	e7f7      	b.n	80072ea <memmove+0x24>
	...

080072fc <_fstat_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	2300      	movs	r3, #0
 8007300:	4d06      	ldr	r5, [pc, #24]	@ (800731c <_fstat_r+0x20>)
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	4611      	mov	r1, r2
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	f7fa fc55 	bl	8001bb8 <_fstat>
 800730e:	1c43      	adds	r3, r0, #1
 8007310:	d102      	bne.n	8007318 <_fstat_r+0x1c>
 8007312:	682b      	ldr	r3, [r5, #0]
 8007314:	b103      	cbz	r3, 8007318 <_fstat_r+0x1c>
 8007316:	6023      	str	r3, [r4, #0]
 8007318:	bd38      	pop	{r3, r4, r5, pc}
 800731a:	bf00      	nop
 800731c:	200006d8 	.word	0x200006d8

08007320 <_isatty_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	2300      	movs	r3, #0
 8007324:	4d05      	ldr	r5, [pc, #20]	@ (800733c <_isatty_r+0x1c>)
 8007326:	4604      	mov	r4, r0
 8007328:	4608      	mov	r0, r1
 800732a:	602b      	str	r3, [r5, #0]
 800732c:	f7fa fc53 	bl	8001bd6 <_isatty>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_isatty_r+0x1a>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_isatty_r+0x1a>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	200006d8 	.word	0x200006d8

08007340 <_sbrk_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	2300      	movs	r3, #0
 8007344:	4d05      	ldr	r5, [pc, #20]	@ (800735c <_sbrk_r+0x1c>)
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	602b      	str	r3, [r5, #0]
 800734c:	f7fa fc5a 	bl	8001c04 <_sbrk>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_sbrk_r+0x1a>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_sbrk_r+0x1a>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	200006d8 	.word	0x200006d8

08007360 <memcpy>:
 8007360:	440a      	add	r2, r1
 8007362:	4291      	cmp	r1, r2
 8007364:	f100 33ff 	add.w	r3, r0, #4294967295
 8007368:	d100      	bne.n	800736c <memcpy+0xc>
 800736a:	4770      	bx	lr
 800736c:	b510      	push	{r4, lr}
 800736e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007372:	4291      	cmp	r1, r2
 8007374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007378:	d1f9      	bne.n	800736e <memcpy+0xe>
 800737a:	bd10      	pop	{r4, pc}

0800737c <__assert_func>:
 800737c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800737e:	4614      	mov	r4, r2
 8007380:	461a      	mov	r2, r3
 8007382:	4b09      	ldr	r3, [pc, #36]	@ (80073a8 <__assert_func+0x2c>)
 8007384:	4605      	mov	r5, r0
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68d8      	ldr	r0, [r3, #12]
 800738a:	b954      	cbnz	r4, 80073a2 <__assert_func+0x26>
 800738c:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <__assert_func+0x30>)
 800738e:	461c      	mov	r4, r3
 8007390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007394:	9100      	str	r1, [sp, #0]
 8007396:	462b      	mov	r3, r5
 8007398:	4905      	ldr	r1, [pc, #20]	@ (80073b0 <__assert_func+0x34>)
 800739a:	f000 f86f 	bl	800747c <fiprintf>
 800739e:	f000 f87f 	bl	80074a0 <abort>
 80073a2:	4b04      	ldr	r3, [pc, #16]	@ (80073b4 <__assert_func+0x38>)
 80073a4:	e7f4      	b.n	8007390 <__assert_func+0x14>
 80073a6:	bf00      	nop
 80073a8:	200001c8 	.word	0x200001c8
 80073ac:	08007fb6 	.word	0x08007fb6
 80073b0:	08007f88 	.word	0x08007f88
 80073b4:	08007f7b 	.word	0x08007f7b

080073b8 <_calloc_r>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	fba1 5402 	umull	r5, r4, r1, r2
 80073be:	b93c      	cbnz	r4, 80073d0 <_calloc_r+0x18>
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7fe ffd3 	bl	800636c <_malloc_r>
 80073c6:	4606      	mov	r6, r0
 80073c8:	b928      	cbnz	r0, 80073d6 <_calloc_r+0x1e>
 80073ca:	2600      	movs	r6, #0
 80073cc:	4630      	mov	r0, r6
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	220c      	movs	r2, #12
 80073d2:	6002      	str	r2, [r0, #0]
 80073d4:	e7f9      	b.n	80073ca <_calloc_r+0x12>
 80073d6:	462a      	mov	r2, r5
 80073d8:	4621      	mov	r1, r4
 80073da:	f7fe f83f 	bl	800545c <memset>
 80073de:	e7f5      	b.n	80073cc <_calloc_r+0x14>

080073e0 <__ascii_mbtowc>:
 80073e0:	b082      	sub	sp, #8
 80073e2:	b901      	cbnz	r1, 80073e6 <__ascii_mbtowc+0x6>
 80073e4:	a901      	add	r1, sp, #4
 80073e6:	b142      	cbz	r2, 80073fa <__ascii_mbtowc+0x1a>
 80073e8:	b14b      	cbz	r3, 80073fe <__ascii_mbtowc+0x1e>
 80073ea:	7813      	ldrb	r3, [r2, #0]
 80073ec:	600b      	str	r3, [r1, #0]
 80073ee:	7812      	ldrb	r2, [r2, #0]
 80073f0:	1e10      	subs	r0, r2, #0
 80073f2:	bf18      	it	ne
 80073f4:	2001      	movne	r0, #1
 80073f6:	b002      	add	sp, #8
 80073f8:	4770      	bx	lr
 80073fa:	4610      	mov	r0, r2
 80073fc:	e7fb      	b.n	80073f6 <__ascii_mbtowc+0x16>
 80073fe:	f06f 0001 	mvn.w	r0, #1
 8007402:	e7f8      	b.n	80073f6 <__ascii_mbtowc+0x16>

08007404 <_realloc_r>:
 8007404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007408:	4680      	mov	r8, r0
 800740a:	4615      	mov	r5, r2
 800740c:	460c      	mov	r4, r1
 800740e:	b921      	cbnz	r1, 800741a <_realloc_r+0x16>
 8007410:	4611      	mov	r1, r2
 8007412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	f7fe bfa9 	b.w	800636c <_malloc_r>
 800741a:	b92a      	cbnz	r2, 8007428 <_realloc_r+0x24>
 800741c:	f7fe ff34 	bl	8006288 <_free_r>
 8007420:	2400      	movs	r4, #0
 8007422:	4620      	mov	r0, r4
 8007424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007428:	f000 f841 	bl	80074ae <_malloc_usable_size_r>
 800742c:	4285      	cmp	r5, r0
 800742e:	4606      	mov	r6, r0
 8007430:	d802      	bhi.n	8007438 <_realloc_r+0x34>
 8007432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007436:	d8f4      	bhi.n	8007422 <_realloc_r+0x1e>
 8007438:	4629      	mov	r1, r5
 800743a:	4640      	mov	r0, r8
 800743c:	f7fe ff96 	bl	800636c <_malloc_r>
 8007440:	4607      	mov	r7, r0
 8007442:	2800      	cmp	r0, #0
 8007444:	d0ec      	beq.n	8007420 <_realloc_r+0x1c>
 8007446:	42b5      	cmp	r5, r6
 8007448:	462a      	mov	r2, r5
 800744a:	4621      	mov	r1, r4
 800744c:	bf28      	it	cs
 800744e:	4632      	movcs	r2, r6
 8007450:	f7ff ff86 	bl	8007360 <memcpy>
 8007454:	4621      	mov	r1, r4
 8007456:	4640      	mov	r0, r8
 8007458:	f7fe ff16 	bl	8006288 <_free_r>
 800745c:	463c      	mov	r4, r7
 800745e:	e7e0      	b.n	8007422 <_realloc_r+0x1e>

08007460 <__ascii_wctomb>:
 8007460:	4603      	mov	r3, r0
 8007462:	4608      	mov	r0, r1
 8007464:	b141      	cbz	r1, 8007478 <__ascii_wctomb+0x18>
 8007466:	2aff      	cmp	r2, #255	@ 0xff
 8007468:	d904      	bls.n	8007474 <__ascii_wctomb+0x14>
 800746a:	228a      	movs	r2, #138	@ 0x8a
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	4770      	bx	lr
 8007474:	2001      	movs	r0, #1
 8007476:	700a      	strb	r2, [r1, #0]
 8007478:	4770      	bx	lr
	...

0800747c <fiprintf>:
 800747c:	b40e      	push	{r1, r2, r3}
 800747e:	b503      	push	{r0, r1, lr}
 8007480:	4601      	mov	r1, r0
 8007482:	ab03      	add	r3, sp, #12
 8007484:	4805      	ldr	r0, [pc, #20]	@ (800749c <fiprintf+0x20>)
 8007486:	f853 2b04 	ldr.w	r2, [r3], #4
 800748a:	6800      	ldr	r0, [r0, #0]
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	f7ff fcf9 	bl	8006e84 <_vfiprintf_r>
 8007492:	b002      	add	sp, #8
 8007494:	f85d eb04 	ldr.w	lr, [sp], #4
 8007498:	b003      	add	sp, #12
 800749a:	4770      	bx	lr
 800749c:	200001c8 	.word	0x200001c8

080074a0 <abort>:
 80074a0:	2006      	movs	r0, #6
 80074a2:	b508      	push	{r3, lr}
 80074a4:	f000 f834 	bl	8007510 <raise>
 80074a8:	2001      	movs	r0, #1
 80074aa:	f7fa fb52 	bl	8001b52 <_exit>

080074ae <_malloc_usable_size_r>:
 80074ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b2:	1f18      	subs	r0, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	bfbc      	itt	lt
 80074b8:	580b      	ldrlt	r3, [r1, r0]
 80074ba:	18c0      	addlt	r0, r0, r3
 80074bc:	4770      	bx	lr

080074be <_raise_r>:
 80074be:	291f      	cmp	r1, #31
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4605      	mov	r5, r0
 80074c4:	460c      	mov	r4, r1
 80074c6:	d904      	bls.n	80074d2 <_raise_r+0x14>
 80074c8:	2316      	movs	r3, #22
 80074ca:	6003      	str	r3, [r0, #0]
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074d4:	b112      	cbz	r2, 80074dc <_raise_r+0x1e>
 80074d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074da:	b94b      	cbnz	r3, 80074f0 <_raise_r+0x32>
 80074dc:	4628      	mov	r0, r5
 80074de:	f000 f831 	bl	8007544 <_getpid_r>
 80074e2:	4622      	mov	r2, r4
 80074e4:	4601      	mov	r1, r0
 80074e6:	4628      	mov	r0, r5
 80074e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ec:	f000 b818 	b.w	8007520 <_kill_r>
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d00a      	beq.n	800750a <_raise_r+0x4c>
 80074f4:	1c59      	adds	r1, r3, #1
 80074f6:	d103      	bne.n	8007500 <_raise_r+0x42>
 80074f8:	2316      	movs	r3, #22
 80074fa:	6003      	str	r3, [r0, #0]
 80074fc:	2001      	movs	r0, #1
 80074fe:	e7e7      	b.n	80074d0 <_raise_r+0x12>
 8007500:	2100      	movs	r1, #0
 8007502:	4620      	mov	r0, r4
 8007504:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007508:	4798      	blx	r3
 800750a:	2000      	movs	r0, #0
 800750c:	e7e0      	b.n	80074d0 <_raise_r+0x12>
	...

08007510 <raise>:
 8007510:	4b02      	ldr	r3, [pc, #8]	@ (800751c <raise+0xc>)
 8007512:	4601      	mov	r1, r0
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	f7ff bfd2 	b.w	80074be <_raise_r>
 800751a:	bf00      	nop
 800751c:	200001c8 	.word	0x200001c8

08007520 <_kill_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	2300      	movs	r3, #0
 8007524:	4d06      	ldr	r5, [pc, #24]	@ (8007540 <_kill_r+0x20>)
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	602b      	str	r3, [r5, #0]
 800752e:	f7fa fb00 	bl	8001b32 <_kill>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	d102      	bne.n	800753c <_kill_r+0x1c>
 8007536:	682b      	ldr	r3, [r5, #0]
 8007538:	b103      	cbz	r3, 800753c <_kill_r+0x1c>
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	bd38      	pop	{r3, r4, r5, pc}
 800753e:	bf00      	nop
 8007540:	200006d8 	.word	0x200006d8

08007544 <_getpid_r>:
 8007544:	f7fa baee 	b.w	8001b24 <_getpid>

08007548 <_init>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	bf00      	nop
 800754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754e:	bc08      	pop	{r3}
 8007550:	469e      	mov	lr, r3
 8007552:	4770      	bx	lr

08007554 <_fini>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	bf00      	nop
 8007558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755a:	bc08      	pop	{r3}
 800755c:	469e      	mov	lr, r3
 800755e:	4770      	bx	lr
