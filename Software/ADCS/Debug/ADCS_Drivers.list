
ADCS_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd24  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800de38  0800de38  0000ee38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e660  0800e660  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e660  0800e660  0000f660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e668  0800e668  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e668  0800e668  0000f668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e66c  0800e66c  0000f66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e670  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  200001d8  0800e844  000101d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  0800e844  00010898  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015481  00000000  00000000  000101fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316a  00000000  00000000  0002567e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000287e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea7  00000000  00000000  00029a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a857  00000000  00000000  0002a93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d2d  00000000  00000000  00045196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000952e1  00000000  00000000  0005cec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f21a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064fc  00000000  00000000  000f21e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f86e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de1c 	.word	0x0800de1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800de1c 	.word	0x0800de1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <GPS_Init>:
#include "math.h"

/**
 * @brief Initialize GPS driver
 */
GPS_Status GPS_Init(GPS_Handle* gps, UART_HandleTypeDef* huart) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
    if (gps == NULL || huart == NULL) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <GPS_Init+0x16>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <GPS_Init+0x1a>
        return GPS_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e027      	b.n	8001146 <GPS_Init+0x6a>
    }

    // Initialize GPS handle
    memset(gps, 0, sizeof(GPS_Handle));
 80010f6:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80010fa:	2100      	movs	r1, #0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f00a f908 	bl	800b312 <memset>
    gps->huart = huart;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	601a      	str	r2, [r3, #0]
    gps->buffer_head = 0;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
    gps->buffer_tail = 0;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    gps->nmea_index = 0;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
    gps->fix_available = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da

    // Start UART reception in interrupt mode (single byte)
    if (HAL_UART_Receive_IT(gps->huart, &gps->rx_byte, 1) != HAL_OK) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001132:	2201      	movs	r2, #1
 8001134:	4619      	mov	r1, r3
 8001136:	f007 ff16 	bl	8008f66 <HAL_UART_Receive_IT>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <GPS_Init+0x68>
        return GPS_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <GPS_Init+0x6a>
    }

    return GPS_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <GPS_Process>:

/**
 * @brief Process incoming GPS data
 */
GPS_Status GPS_Process(GPS_Handle* gps) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
    // Process data in circular buffer
    while (gps->buffer_head != gps->buffer_tail) {
 8001156:	e06f      	b.n	8001238 <GPS_Process+0xea>
        uint8_t byte = gps->buffer[gps->buffer_tail];
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800115e:	461a      	mov	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4413      	add	r3, r2
 8001164:	791b      	ldrb	r3, [r3, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
        gps->buffer_tail = (gps->buffer_tail + 1) % GPS_BUFFER_SIZE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800116e:	3301      	adds	r3, #1
 8001170:	425a      	negs	r2, r3
 8001172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800117a:	bf58      	it	pl
 800117c:	4253      	negpl	r3, r2
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

        // NMEA sentence starts with '$'
        if (byte == GPS_NMEA_START) {
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b24      	cmp	r3, #36	@ 0x24
 800118a:	d112      	bne.n	80011b2 <GPS_Process+0x64>
            gps->nmea_index = 0;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
            gps->nmea_buffer[gps->nmea_index++] = byte;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	b291      	uxth	r1, r2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	f8a2 128a 	strh.w	r1, [r2, #650]	@ 0x28a
 80011a4:	461a      	mov	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
 80011b0:	e042      	b.n	8001238 <GPS_Process+0xea>
        }
        // Add byte to NMEA buffer if we've seen a start character
        else if (gps->nmea_index > 0) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d03d      	beq.n	8001238 <GPS_Process+0xea>
            // Check for buffer overflow
            if (gps->nmea_index >= GPS_NMEA_SIZE - 1) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80011c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80011c4:	d904      	bls.n	80011d0 <GPS_Process+0x82>
                gps->nmea_index = 0; // Reset and wait for next sentence
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                continue;
 80011ce:	e033      	b.n	8001238 <GPS_Process+0xea>
            }

            gps->nmea_buffer[gps->nmea_index++] = byte;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	b291      	uxth	r1, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	f8a2 128a 	strh.w	r1, [r2, #650]	@ 0x28a
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209

            // End of NMEA sentence (newline or carriage return)
            if (byte == GPS_NMEA_END || byte == '\r') {
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d002      	beq.n	80011f8 <GPS_Process+0xaa>
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b0d      	cmp	r3, #13
 80011f6:	d11f      	bne.n	8001238 <GPS_Process+0xea>
                gps->nmea_buffer[gps->nmea_index] = '\0'; // Null terminate
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80011fe:	461a      	mov	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209

                // Parse the NMEA sentence
                NMEA_Type type = GPS_ParseNMEASentence(gps, gps->nmea_buffer, NULL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f203 2309 	addw	r3, r3, #521	@ 0x209
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f847 	bl	80012a8 <GPS_ParseNMEASentence>
 800121a:	4603      	mov	r3, r0
 800121c:	73bb      	strb	r3, [r7, #14]

                if (type != NMEA_UNKNOWN) {
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <GPS_Process+0xe2>
                    // Update last update timestamp
                    gps->last_update = HAL_GetTick();
 8001224:	f002 fcf4 	bl	8003c10 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
                }

                // Reset NMEA buffer index
                gps->nmea_index = 0;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
    while (gps->buffer_head != gps->buffer_tail) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8001244:	429a      	cmp	r2, r3
 8001246:	d187      	bne.n	8001158 <GPS_Process+0xa>
            }
        }
    }

    return GPS_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <GPS_UART_RxCpltCallback>:

/**
 * @brief UART RX complete callback - to be called from HAL_UART_RxCpltCallback
 */
void GPS_UART_RxCpltCallback(GPS_Handle* gps) {
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
    // Add received byte to circular buffer
    gps->buffer[gps->buffer_head] = gps->rx_byte;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8001260:	4619      	mov	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 2208 	ldrb.w	r2, [r3, #520]	@ 0x208
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	440b      	add	r3, r1
 800126c:	711a      	strb	r2, [r3, #4]
    gps->buffer_head = (gps->buffer_head + 1) % GPS_BUFFER_SIZE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8001274:	3301      	adds	r3, #1
 8001276:	425a      	negs	r2, r3
 8001278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800127c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001280:	bf58      	it	pl
 8001282:	4253      	negpl	r3, r2
 8001284:	b29a      	uxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

    // Restart UART reception
    HAL_UART_Receive_IT(gps->huart, &gps->rx_byte, 1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	f007 fe64 	bl	8008f66 <HAL_UART_Receive_IT>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <GPS_ParseNMEASentence>:

/**
 * @brief Parse NMEA sentence and direct to appropriate parser
 */
NMEA_Type GPS_ParseNMEASentence(GPS_Handle* gps, char* nmea, UART_HandleTypeDef* debug_huart) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
    // Check if the sentence starts with "$GP"
    if (strncmp(nmea, "$GP", 3) != 0) {
 80012b4:	2203      	movs	r2, #3
 80012b6:	4917      	ldr	r1, [pc, #92]	@ (8001314 <GPS_ParseNMEASentence+0x6c>)
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f00a f832 	bl	800b322 <strncmp>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <GPS_ParseNMEASentence+0x20>
        return NMEA_UNKNOWN;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e021      	b.n	800130c <GPS_ParseNMEASentence+0x64>
    }

    // Identify NMEA sentence type
    if (strncmp(nmea + 3, "GGA", 3) == 0) {
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	3303      	adds	r3, #3
 80012cc:	2203      	movs	r2, #3
 80012ce:	4912      	ldr	r1, [pc, #72]	@ (8001318 <GPS_ParseNMEASentence+0x70>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f00a f826 	bl	800b322 <strncmp>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d106      	bne.n	80012ea <GPS_ParseNMEASentence+0x42>
        GPS_ParseGPGGA(gps, nmea, debug_huart);
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 f81d 	bl	8001320 <GPS_ParseGPGGA>
        return NMEA_GPGGA;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e010      	b.n	800130c <GPS_ParseNMEASentence+0x64>
    } else if (strncmp(nmea + 3, "RMC", 3) == 0) {
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3303      	adds	r3, #3
 80012ee:	2203      	movs	r2, #3
 80012f0:	490a      	ldr	r1, [pc, #40]	@ (800131c <GPS_ParseNMEASentence+0x74>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f00a f815 	bl	800b322 <strncmp>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d105      	bne.n	800130a <GPS_ParseNMEASentence+0x62>
        GPS_ParseGPRMC(gps, nmea);
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 fb67 	bl	80019d4 <GPS_ParseGPRMC>
        return NMEA_GPRMC;
 8001306:	2302      	movs	r3, #2
 8001308:	e000      	b.n	800130c <GPS_ParseNMEASentence+0x64>
    }

    return NMEA_UNKNOWN;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0800de38 	.word	0x0800de38
 8001318:	0800de3c 	.word	0x0800de3c
 800131c:	0800de40 	.word	0x0800de40

08001320 <GPS_ParseGPGGA>:
/**
 * @brief Parse GPGGA sentence (Global Positioning System Fix Data)
 * Format: $GPGGA,time,lat,N/S,lon,E/W,fix,sats,hdop,alt,M,geoid,M,age,ref*cs
 * Example: $GPGGA,045104.000,3014.1985,N,09749.2873,W,1,09,1.2,211.6,M,-22.5,M,,000062
 */
GPS_Status GPS_ParseGPGGA(GPS_Handle* gps, char* nmea, UART_HandleTypeDef* debug_huart) {
 8001320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001324:	b0d2      	sub	sp, #328	@ 0x148
 8001326:	af04      	add	r7, sp, #16
 8001328:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800132c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001330:	6018      	str	r0, [r3, #0]
 8001332:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001336:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800133a:	6019      	str	r1, [r3, #0]
 800133c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001340:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001344:	601a      	str	r2, [r3, #0]
    char* token;
    char* saveptr;
    int token_index = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    char nmea_copy[GPS_NMEA_SIZE]; // Create a copy of the NMEA string to avoid modifying the original
    char debug_buffer[128]; // Local buffer for debug messages

    // Copy the NMEA string to avoid strtok_r modifying the original
    strncpy(nmea_copy, nmea, GPS_NMEA_SIZE - 1);
 800134c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001350:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001354:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001358:	227f      	movs	r2, #127	@ 0x7f
 800135a:	6819      	ldr	r1, [r3, #0]
 800135c:	f009 fff3 	bl	800b346 <strncpy>
    nmea_copy[GPS_NMEA_SIZE - 1] = '\0'; // Ensure null termination
 8001360:	2300      	movs	r3, #0
 8001362:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

    // First token is the message ID ($GPGGA)
    token = strtok_r(nmea_copy, ",", &saveptr);
 8001366:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800136a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800136e:	49c4      	ldr	r1, [pc, #784]	@ (8001680 <GPS_ParseGPGGA+0x360>)
 8001370:	4618      	mov	r0, r3
 8001372:	f00a f823 	bl	800b3bc <strtok_r>
 8001376:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
    if (token == NULL) return GPS_INVALID_DATA;
 800137a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 82fc 	bne.w	800197c <GPS_ParseGPGGA+0x65c>
 8001384:	2304      	movs	r3, #4
 8001386:	e308      	b.n	800199a <GPS_ParseGPGGA+0x67a>

    // Parse remaining tokens
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
        token_index++;
 8001388:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800138c:	3301      	adds	r3, #1
 800138e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

        switch (token_index) {
 8001392:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001396:	3b01      	subs	r3, #1
 8001398:	2b08      	cmp	r3, #8
 800139a:	f200 82ef 	bhi.w	800197c <GPS_ParseGPGGA+0x65c>
 800139e:	a201      	add	r2, pc, #4	@ (adr r2, 80013a4 <GPS_ParseGPGGA+0x84>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	080013c9 	.word	0x080013c9
 80013a8:	080014a3 	.word	0x080014a3
 80013ac:	0800168d 	.word	0x0800168d
 80013b0:	080016bd 	.word	0x080016bd
 80013b4:	08001889 	.word	0x08001889
 80013b8:	080018b7 	.word	0x080018b7
 80013bc:	08001917 	.word	0x08001917
 80013c0:	08001933 	.word	0x08001933
 80013c4:	0800194f 	.word	0x0800194f
            case 1: // Time (format: hhmmss.sss)
                if (strlen(token) >= 6) {
 80013c8:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80013cc:	f7fe fec0 	bl	8000150 <strlen>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b05      	cmp	r3, #5
 80013d4:	f240 82c9 	bls.w	800196a <GPS_ParseGPGGA+0x64a>
                    gps->time.hour = (token[0] - '0') * 10 + (token[1] - '0');
 80013d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3b30      	subs	r3, #48	@ 0x30
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80013f0:	3301      	adds	r3, #1
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4413      	add	r3, r2
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3b30      	subs	r3, #48	@ 0x30
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001400:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0
                    gps->time.minute = (token[2] - '0') * 10 + (token[3] - '0');
 800140a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800140e:	3302      	adds	r3, #2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	3b30      	subs	r3, #48	@ 0x30
 8001414:	b2db      	uxtb	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	4413      	add	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001424:	3303      	adds	r3, #3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	b2db      	uxtb	r3, r3
 800142c:	3b30      	subs	r3, #48	@ 0x30
 800142e:	b2da      	uxtb	r2, r3
 8001430:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001434:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f883 22d1 	strb.w	r2, [r3, #721]	@ 0x2d1
                    gps->time.second = (token[4] - '0') * 10 + (token[5] - '0');
 800143e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001442:	3304      	adds	r3, #4
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	3b30      	subs	r3, #48	@ 0x30
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4413      	add	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001458:	3305      	adds	r3, #5
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4413      	add	r3, r2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	3b30      	subs	r3, #48	@ 0x30
 8001462:	b2da      	uxtb	r2, r3
 8001464:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001468:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f883 22d2 	strb.w	r2, [r3, #722]	@ 0x2d2

                    if (strlen(token) > 7) { // Check if milliseconds present
 8001472:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001476:	f7fe fe6b 	bl	8000150 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	2b07      	cmp	r3, #7
 800147e:	f240 8274 	bls.w	800196a <GPS_ParseGPGGA+0x64a>
                        gps->time.millisecond = atoi(&token[7]);
 8001482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001486:	3307      	adds	r3, #7
 8001488:	4618      	mov	r0, r3
 800148a:	f008 fafe 	bl	8009a8a <atoi>
 800148e:	4603      	mov	r3, r0
 8001490:	b29a      	uxth	r2, r3
 8001492:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001496:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8a3 22d4 	strh.w	r2, [r3, #724]	@ 0x2d4
                    }
                }
                break;
 80014a0:	e263      	b.n	800196a <GPS_ParseGPGGA+0x64a>

            case 2: // Latitude (format: ddmm.mmmm)
                if (strlen(token) > 0) {
 80014a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8260 	beq.w	800196e <GPS_ParseGPGGA+0x64e>
                    // Extract degrees (first 2 digits)
                    int degrees = ((token[0] - '0') * 10) + (token[1] - '0');
 80014ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	461a      	mov	r2, r3
 80014c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014c6:	3301      	adds	r3, #1
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3b30      	subs	r3, #48	@ 0x30
 80014cc:	4413      	add	r3, r2
 80014ce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

                    // Extract minutes (remaining digits)
                    double minutes = ((token[2] - '0') * 10) + (token[3] - '0');  // whole minutes
 80014d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014d6:	3302      	adds	r3, #2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	461a      	mov	r2, r3
 80014e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014ec:	3303      	adds	r3, #3
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	3b30      	subs	r3, #48	@ 0x30
 80014f2:	4413      	add	r3, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ff85 	bl	8000404 <__aeabi_i2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                    if (token[4] == '.') {  // handle decimal part
 8001502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001506:	3304      	adds	r3, #4
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b2e      	cmp	r3, #46	@ 0x2e
 800150c:	d15b      	bne.n	80015c6 <GPS_ParseGPGGA+0x2a6>
                        minutes += (token[5] - '0') * 0.1000;
 800150e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001512:	3305      	adds	r3, #5
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	3b30      	subs	r3, #48	@ 0x30
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ff73 	bl	8000404 <__aeabi_i2d>
 800151e:	a350      	add	r3, pc, #320	@ (adr r3, 8001660 <GPS_ParseGPGGA+0x340>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f7fe ffd8 	bl	80004d8 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8001530:	f7fe fe1c 	bl	800016c <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                        minutes += (token[6] - '0') * 0.0100;
 800153c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001540:	3306      	adds	r3, #6
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	3b30      	subs	r3, #48	@ 0x30
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff5c 	bl	8000404 <__aeabi_i2d>
 800154c:	a346      	add	r3, pc, #280	@ (adr r3, 8001668 <GPS_ParseGPGGA+0x348>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe ffc1 	bl	80004d8 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800155e:	f7fe fe05 	bl	800016c <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                        minutes += (token[7] - '0') * 0.0010;
 800156a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800156e:	3307      	adds	r3, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	3b30      	subs	r3, #48	@ 0x30
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ff45 	bl	8000404 <__aeabi_i2d>
 800157a:	a33d      	add	r3, pc, #244	@ (adr r3, 8001670 <GPS_ParseGPGGA+0x350>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7fe ffaa 	bl	80004d8 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800158c:	f7fe fdee 	bl	800016c <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                        minutes += (token[8] - '0') * 0.0001;
 8001598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800159c:	3308      	adds	r3, #8
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3b30      	subs	r3, #48	@ 0x30
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff2e 	bl	8000404 <__aeabi_i2d>
 80015a8:	a333      	add	r3, pc, #204	@ (adr r3, 8001678 <GPS_ParseGPGGA+0x358>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7fe ff93 	bl	80004d8 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80015ba:	f7fe fdd7 	bl	800016c <__adddf3>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
                    }

                    // Convert to decimal degrees
                    gps->position.latitude = degrees + (minutes / 60.0);
 80015c6:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80015ca:	f7fe ff1b 	bl	8000404 <__aeabi_i2d>
 80015ce:	4682      	mov	sl, r0
 80015d0:	468b      	mov	fp, r1
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <GPS_ParseGPGGA+0x364>)
 80015d8:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80015dc:	f7ff f8a6 	bl	800072c <__aeabi_ddiv>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4650      	mov	r0, sl
 80015e6:	4659      	mov	r1, fp
 80015e8:	f7fe fdc0 	bl	800016c <__adddf3>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80015f4:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 80015f8:	6809      	ldr	r1, [r1, #0]
 80015fa:	e9c1 23a4 	strd	r2, r3, [r1, #656]	@ 0x290

                    // Debug output if debug UART is provided
                    if (debug_huart != NULL) {
 80015fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001602:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 81b0 	beq.w	800196e <GPS_ParseGPGGA+0x64e>
                        sprintf(debug_buffer, "Debug Lat: str=%s, deg=%d, min=%.4f, final=%.6f\r\n",
 800160e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001612:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 800161c:	f107 0010 	add.w	r0, r7, #16
 8001620:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001624:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001628:	e9cd 2300 	strd	r2, r3, [sp]
 800162c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001630:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001634:	4914      	ldr	r1, [pc, #80]	@ (8001688 <GPS_ParseGPGGA+0x368>)
 8001636:	f009 fe09 	bl	800b24c <siprintf>
                                token, degrees, minutes, gps->position.latitude);
                        HAL_UART_Transmit(debug_huart, (uint8_t*)debug_buffer, strlen(debug_buffer), 100);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fd86 	bl	8000150 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	f107 0110 	add.w	r1, r7, #16
 800164c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001650:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8001654:	2364      	movs	r3, #100	@ 0x64
 8001656:	6800      	ldr	r0, [r0, #0]
 8001658:	f007 fbfa 	bl	8008e50 <HAL_UART_Transmit>
                    }
                }
                break;
 800165c:	e187      	b.n	800196e <GPS_ParseGPGGA+0x64e>
 800165e:	bf00      	nop
 8001660:	9999999a 	.word	0x9999999a
 8001664:	3fb99999 	.word	0x3fb99999
 8001668:	47ae147b 	.word	0x47ae147b
 800166c:	3f847ae1 	.word	0x3f847ae1
 8001670:	d2f1a9fc 	.word	0xd2f1a9fc
 8001674:	3f50624d 	.word	0x3f50624d
 8001678:	eb1c432d 	.word	0xeb1c432d
 800167c:	3f1a36e2 	.word	0x3f1a36e2
 8001680:	0800de44 	.word	0x0800de44
 8001684:	404e0000 	.word	0x404e0000
 8001688:	0800de48 	.word	0x0800de48

            case 3: // N/S indicator
                if (token[0] == 'S') {
 800168c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b53      	cmp	r3, #83	@ 0x53
 8001694:	f040 816d 	bne.w	8001972 <GPS_ParseGPGGA+0x652>
                    gps->position.latitude = -gps->position.latitude;
 8001698:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800169c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 80016a6:	4614      	mov	r4, r2
 80016a8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80016ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	e9c3 45a4 	strd	r4, r5, [r3, #656]	@ 0x290
                }
                break;
 80016ba:	e15a      	b.n	8001972 <GPS_ParseGPGGA+0x652>

            case 4: // Longitude (format: dddmm.mmmm)
                if (strlen(token) > 0) {
 80016bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8157 	beq.w	8001976 <GPS_ParseGPGGA+0x656>
                    // Extract degrees (first 3 digits)
                    int degrees = ((token[0] - '0') * 100) +
 80016c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	3b30      	subs	r3, #48	@ 0x30
 80016d0:	2264      	movs	r2, #100	@ 0x64
 80016d2:	fb02 f103 	mul.w	r1, r2, r3
                                 ((token[1] - '0') * 10) +
 80016d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80016da:	3301      	adds	r3, #1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
                    int degrees = ((token[0] - '0') * 100) +
 80016ea:	18ca      	adds	r2, r1, r3
                                 (token[2] - '0');
 80016ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80016f0:	3302      	adds	r3, #2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	3b30      	subs	r3, #48	@ 0x30
                    int degrees = ((token[0] - '0') * 100) +
 80016f6:	4413      	add	r3, r2
 80016f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

                    // Extract minutes (remaining digits)
                    double minutes = ((token[3] - '0') * 10) + (token[4] - '0');  // whole minutes
 80016fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001700:	3303      	adds	r3, #3
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	461a      	mov	r2, r3
 8001712:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001716:	3304      	adds	r3, #4
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3b30      	subs	r3, #48	@ 0x30
 800171c:	4413      	add	r3, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fe70 	bl	8000404 <__aeabi_i2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                    if (token[5] == '.') {  // handle decimal part
 800172c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001730:	3305      	adds	r3, #5
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b2e      	cmp	r3, #46	@ 0x2e
 8001736:	d15b      	bne.n	80017f0 <GPS_ParseGPGGA+0x4d0>
                        minutes += (token[6] - '0') * 0.1000;
 8001738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800173c:	3306      	adds	r3, #6
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3b30      	subs	r3, #48	@ 0x30
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fe5e 	bl	8000404 <__aeabi_i2d>
 8001748:	a397      	add	r3, pc, #604	@ (adr r3, 80019a8 <GPS_ParseGPGGA+0x688>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe fec3 	bl	80004d8 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800175a:	f7fe fd07 	bl	800016c <__adddf3>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                        minutes += (token[7] - '0') * 0.0100;
 8001766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800176a:	3307      	adds	r3, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	3b30      	subs	r3, #48	@ 0x30
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe47 	bl	8000404 <__aeabi_i2d>
 8001776:	a38e      	add	r3, pc, #568	@ (adr r3, 80019b0 <GPS_ParseGPGGA+0x690>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe feac 	bl	80004d8 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001788:	f7fe fcf0 	bl	800016c <__adddf3>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                        minutes += (token[8] - '0') * 0.0010;
 8001794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001798:	3308      	adds	r3, #8
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	3b30      	subs	r3, #48	@ 0x30
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fe30 	bl	8000404 <__aeabi_i2d>
 80017a4:	a384      	add	r3, pc, #528	@ (adr r3, 80019b8 <GPS_ParseGPGGA+0x698>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	f7fe fe95 	bl	80004d8 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80017b6:	f7fe fcd9 	bl	800016c <__adddf3>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                        minutes += (token[9] - '0') * 0.0001;
 80017c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80017c6:	3309      	adds	r3, #9
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	3b30      	subs	r3, #48	@ 0x30
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe19 	bl	8000404 <__aeabi_i2d>
 80017d2:	a37b      	add	r3, pc, #492	@ (adr r3, 80019c0 <GPS_ParseGPGGA+0x6a0>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe fe7e 	bl	80004d8 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80017e4:	f7fe fcc2 	bl	800016c <__adddf3>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
                    }

                    // Convert to decimal degrees
                    gps->position.longitude = degrees + (minutes / 60.0);
 80017f0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80017f4:	f7fe fe06 	bl	8000404 <__aeabi_i2d>
 80017f8:	4682      	mov	sl, r0
 80017fa:	468b      	mov	fp, r1
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b71      	ldr	r3, [pc, #452]	@ (80019c8 <GPS_ParseGPGGA+0x6a8>)
 8001802:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001806:	f7fe ff91 	bl	800072c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4650      	mov	r0, sl
 8001810:	4659      	mov	r1, fp
 8001812:	f7fe fcab 	bl	800016c <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800181e:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8001822:	6809      	ldr	r1, [r1, #0]
 8001824:	e9c1 23a6 	strd	r2, r3, [r1, #664]	@ 0x298

                    // Debug output if debug UART is provided
                    if (debug_huart != NULL) {
 8001828:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800182c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 809f 	beq.w	8001976 <GPS_ParseGPGGA+0x656>
                        sprintf(debug_buffer, "Debug Lon: str=%s, deg=%d, min=%.4f, final=%.6f\r\n",
 8001838:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800183c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 8001846:	f107 0010 	add.w	r0, r7, #16
 800184a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800184e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001852:	e9cd 2300 	strd	r2, r3, [sp]
 8001856:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800185a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800185e:	495b      	ldr	r1, [pc, #364]	@ (80019cc <GPS_ParseGPGGA+0x6ac>)
 8001860:	f009 fcf4 	bl	800b24c <siprintf>
                                token, degrees, minutes, gps->position.longitude);
                        HAL_UART_Transmit(debug_huart, (uint8_t*)debug_buffer, strlen(debug_buffer), 100);
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fc71 	bl	8000150 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	f107 0110 	add.w	r1, r7, #16
 8001876:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800187a:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 800187e:	2364      	movs	r3, #100	@ 0x64
 8001880:	6800      	ldr	r0, [r0, #0]
 8001882:	f007 fae5 	bl	8008e50 <HAL_UART_Transmit>
                    }
                }
                break;
 8001886:	e076      	b.n	8001976 <GPS_ParseGPGGA+0x656>

            case 5: // E/W indicator
                if (token[0] == 'W') {
 8001888:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b57      	cmp	r3, #87	@ 0x57
 8001890:	d173      	bne.n	800197a <GPS_ParseGPGGA+0x65a>
                    gps->position.longitude = -gps->position.longitude;
 8001892:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001896:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 80018a0:	4690      	mov	r8, r2
 80018a2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80018a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e9c3 89a6 	strd	r8, r9, [r3, #664]	@ 0x298
                }
                break;
 80018b4:	e061      	b.n	800197a <GPS_ParseGPGGA+0x65a>

            case 6: // Fix quality
                gps->position.fix = (GPS_FixType)atoi(token);
 80018b6:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80018ba:	f008 f8e6 	bl	8009a8a <atoi>
 80018be:	4603      	mov	r3, r0
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
                gps->fix_available = (gps->position.fix > GPS_FIX_NONE) ? 1 : 0;
 80018d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bf14      	ite	ne
 80018e2:	2301      	movne	r3, #1
 80018e4:	2300      	moveq	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da
                gps->position.valid = gps->fix_available;
 80018f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80018fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f893 22da 	ldrb.w	r2, [r3, #730]	@ 0x2da
 8001906:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800190a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
                break;
 8001914:	e032      	b.n	800197c <GPS_ParseGPGGA+0x65c>

            case 7: // Number of satellites
                gps->position.satellites = atoi(token);
 8001916:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800191a:	f008 f8b6 	bl	8009a8a <atoi>
 800191e:	4603      	mov	r3, r0
 8001920:	b2da      	uxtb	r2, r3
 8001922:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001926:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
                break;
 8001930:	e024      	b.n	800197c <GPS_ParseGPGGA+0x65c>

            case 8: // HDOP
                gps->position.hdop = atof(token);
 8001932:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001936:	f008 f8a5 	bl	8009a84 <atof>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8001942:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8001946:	6809      	ldr	r1, [r1, #0]
 8001948:	e9c1 23b0 	strd	r2, r3, [r1, #704]	@ 0x2c0
                break;
 800194c:	e016      	b.n	800197c <GPS_ParseGPGGA+0x65c>

            case 9: // Altitude
                gps->position.altitude = atof(token);
 800194e:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001952:	f008 f897 	bl	8009a84 <atof>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800195e:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8001962:	6809      	ldr	r1, [r1, #0]
 8001964:	e9c1 23a8 	strd	r2, r3, [r1, #672]	@ 0x2a0
                break;
 8001968:	e008      	b.n	800197c <GPS_ParseGPGGA+0x65c>
                break;
 800196a:	bf00      	nop
 800196c:	e006      	b.n	800197c <GPS_ParseGPGGA+0x65c>
                break;
 800196e:	bf00      	nop
 8001970:	e004      	b.n	800197c <GPS_ParseGPGGA+0x65c>
                break;
 8001972:	bf00      	nop
 8001974:	e002      	b.n	800197c <GPS_ParseGPGGA+0x65c>
                break;
 8001976:	bf00      	nop
 8001978:	e000      	b.n	800197c <GPS_ParseGPGGA+0x65c>
                break;
 800197a:	bf00      	nop
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
 800197c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001980:	461a      	mov	r2, r3
 8001982:	4913      	ldr	r1, [pc, #76]	@ (80019d0 <GPS_ParseGPGGA+0x6b0>)
 8001984:	2000      	movs	r0, #0
 8001986:	f009 fd19 	bl	800b3bc <strtok_r>
 800198a:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800198e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001992:	2b00      	cmp	r3, #0
 8001994:	f47f acf8 	bne.w	8001388 <GPS_ParseGPGGA+0x68>
        }
    }

    return GPS_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a6:	bf00      	nop
 80019a8:	9999999a 	.word	0x9999999a
 80019ac:	3fb99999 	.word	0x3fb99999
 80019b0:	47ae147b 	.word	0x47ae147b
 80019b4:	3f847ae1 	.word	0x3f847ae1
 80019b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019bc:	3f50624d 	.word	0x3f50624d
 80019c0:	eb1c432d 	.word	0xeb1c432d
 80019c4:	3f1a36e2 	.word	0x3f1a36e2
 80019c8:	404e0000 	.word	0x404e0000
 80019cc:	0800de7c 	.word	0x0800de7c
 80019d0:	0800deb0 	.word	0x0800deb0

080019d4 <GPS_ParseGPRMC>:
/**
 * @brief Parse GPRMC sentence (Recommended Minimum Navigation Information)
 * Format: $GPRMC,time,status,lat,N/S,lon,E/W,spd,cog,date,mv,mvE/W,mode*cs
 * Example: $GPRMC,045103.000,A,3014.1984,N,09749.2872,W,0.67,161.46,030913,,,A*7C
 */
GPS_Status GPS_ParseGPRMC(GPS_Handle* gps, char* nmea) {
 80019d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d8:	b0b0      	sub	sp, #192	@ 0xc0
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
    char* token;
    char* saveptr;
    int token_index = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    char nmea_copy[GPS_NMEA_SIZE]; // Create a copy of the NMEA string to avoid modifying the original

    // Copy the NMEA string to avoid strtok_r modifying the original
    strncpy(nmea_copy, nmea, GPS_NMEA_SIZE - 1);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	227f      	movs	r2, #127	@ 0x7f
 80019ec:	6839      	ldr	r1, [r7, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f009 fca9 	bl	800b346 <strncpy>
    nmea_copy[GPS_NMEA_SIZE - 1] = '\0'; // Ensure null termination
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

    // First token is the message ID ($GPRMC)
    token = strtok_r(nmea_copy, ",", &saveptr);
 80019fa:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	49c5      	ldr	r1, [pc, #788]	@ (8001d18 <GPS_ParseGPRMC+0x344>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f009 fcd9 	bl	800b3bc <strtok_r>
 8001a0a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    if (token == NULL) return GPS_INVALID_DATA;
 8001a0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 818d 	bne.w	8001d32 <GPS_ParseGPRMC+0x35e>
 8001a18:	2304      	movs	r3, #4
 8001a1a:	e1a2      	b.n	8001d62 <GPS_ParseGPRMC+0x38e>

    // Parse remaining tokens
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
        token_index++;
 8001a1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a20:	3301      	adds	r3, #1
 8001a22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

        switch (token_index) {
 8001a26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	f200 8180 	bhi.w	8001d32 <GPS_ParseGPRMC+0x35e>
 8001a32:	a201      	add	r2, pc, #4	@ (adr r2, 8001a38 <GPS_ParseGPRMC+0x64>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001a5d 	.word	0x08001a5d
 8001a3c:	08001b17 	.word	0x08001b17
 8001a40:	08001b31 	.word	0x08001b31
 8001a44:	08001ba1 	.word	0x08001ba1
 8001a48:	08001bc1 	.word	0x08001bc1
 8001a4c:	08001c31 	.word	0x08001c31
 8001a50:	08001c4f 	.word	0x08001c4f
 8001a54:	08001c63 	.word	0x08001c63
 8001a58:	08001c77 	.word	0x08001c77
            case 1: // Time (format: hhmmss.sss)
                if (strlen(token) >= 6) {
 8001a5c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001a60:	f7fe fb76 	bl	8000150 <strlen>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	f240 8154 	bls.w	8001d14 <GPS_ParseGPRMC+0x340>
                    gps->time.hour = (token[0] - '0') * 10 + (token[1] - '0');
 8001a6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	3b30      	subs	r3, #48	@ 0x30
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a84:	3301      	adds	r3, #1
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	3b30      	subs	r3, #48	@ 0x30
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f883 22d0 	strb.w	r2, [r3, #720]	@ 0x2d0
                    gps->time.minute = (token[2] - '0') * 10 + (token[3] - '0');
 8001a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	3b30      	subs	r3, #48	@ 0x30
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ab0:	3303      	adds	r3, #3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3b30      	subs	r3, #48	@ 0x30
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f883 22d1 	strb.w	r2, [r3, #721]	@ 0x2d1
                    gps->time.second = (token[4] - '0') * 10 + (token[5] - '0');
 8001ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	3b30      	subs	r3, #48	@ 0x30
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001adc:	3305      	adds	r3, #5
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	3b30      	subs	r3, #48	@ 0x30
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f883 22d2 	strb.w	r2, [r3, #722]	@ 0x2d2

                    if (strlen(token) > 7) { // Check if milliseconds present
 8001aee:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001af2:	f7fe fb2d 	bl	8000150 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b07      	cmp	r3, #7
 8001afa:	f240 810b 	bls.w	8001d14 <GPS_ParseGPRMC+0x340>
                        gps->time.millisecond = atoi(&token[7]);
 8001afe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b02:	3307      	adds	r3, #7
 8001b04:	4618      	mov	r0, r3
 8001b06:	f007 ffc0 	bl	8009a8a <atoi>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8a3 22d4 	strh.w	r2, [r3, #724]	@ 0x2d4
                    }
                }
                break;
 8001b14:	e0fe      	b.n	8001d14 <GPS_ParseGPRMC+0x340>

            case 2: // Status (A=valid, V=invalid)
                gps->position.valid = (token[0] == 'A') ? 1 : 0;
 8001b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b41      	cmp	r3, #65	@ 0x41
 8001b1e:	bf0c      	ite	eq
 8001b20:	2301      	moveq	r3, #1
 8001b22:	2300      	movne	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
                break;
 8001b2e:	e100      	b.n	8001d32 <GPS_ParseGPRMC+0x35e>

            case 3: // Latitude (format: ddmm.mmmm)
                if (strlen(token) > 0) {
 8001b30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80f2 	beq.w	8001d20 <GPS_ParseGPRMC+0x34c>
                    char deg_str[3];
                    strncpy(deg_str, token, 2);
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	2202      	movs	r2, #2
 8001b42:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8001b46:	4618      	mov	r0, r3
 8001b48:	f009 fbfd 	bl	800b346 <strncpy>
                    deg_str[2] = '\0';
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	74bb      	strb	r3, [r7, #18]

                    int degrees = atoi(deg_str);
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	4618      	mov	r0, r3
 8001b56:	f007 ff98 	bl	8009a8a <atoi>
 8001b5a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                    double minutes = atof(token + 2);  // Get the minutes part
 8001b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b62:	3302      	adds	r3, #2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f007 ff8d 	bl	8009a84 <atof>
 8001b6a:	e9c7 0126 	strd	r0, r1, [r7, #152]	@ 0x98
                    gps->position.latitude = degrees + (minutes / 60.0);
 8001b6e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001b72:	f7fe fc47 	bl	8000404 <__aeabi_i2d>
 8001b76:	4682      	mov	sl, r0
 8001b78:	468b      	mov	fp, r1
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b67      	ldr	r3, [pc, #412]	@ (8001d1c <GPS_ParseGPRMC+0x348>)
 8001b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001b84:	f7fe fdd2 	bl	800072c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4650      	mov	r0, sl
 8001b8e:	4659      	mov	r1, fp
 8001b90:	f7fe faec 	bl	800016c <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	e9c1 23a4 	strd	r2, r3, [r1, #656]	@ 0x290
                }
                break;
 8001b9e:	e0bf      	b.n	8001d20 <GPS_ParseGPRMC+0x34c>

            case 4: // N/S indicator
                if (token[0] == 'S') {
 8001ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b53      	cmp	r3, #83	@ 0x53
 8001ba8:	f040 80bc 	bne.w	8001d24 <GPS_ParseGPRMC+0x350>
                    gps->position.latitude = -gps->position.latitude;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	e9c3 45a4 	strd	r4, r5, [r3, #656]	@ 0x290
                }
                break;
 8001bbe:	e0b1      	b.n	8001d24 <GPS_ParseGPRMC+0x350>

            case 5: // Longitude (format: dddmm.mmmm)
                if (strlen(token) > 0) {
 8001bc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80ae 	beq.w	8001d28 <GPS_ParseGPRMC+0x354>
                    char deg_str[4];
                    strncpy(deg_str, token, 3);
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f009 fbb5 	bl	800b346 <strncpy>
                    deg_str[3] = '\0';
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]

                    int degrees = atoi(deg_str);
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4618      	mov	r0, r3
 8001be6:	f007 ff50 	bl	8009a8a <atoi>
 8001bea:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
                    double minutes = atof(token + 3);  // Get the minutes part
 8001bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001bf2:	3303      	adds	r3, #3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f007 ff45 	bl	8009a84 <atof>
 8001bfa:	e9c7 012a 	strd	r0, r1, [r7, #168]	@ 0xa8
                    gps->position.longitude = degrees + (minutes / 60.0);
 8001bfe:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001c02:	f7fe fbff 	bl	8000404 <__aeabi_i2d>
 8001c06:	4682      	mov	sl, r0
 8001c08:	468b      	mov	fp, r1
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b43      	ldr	r3, [pc, #268]	@ (8001d1c <GPS_ParseGPRMC+0x348>)
 8001c10:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001c14:	f7fe fd8a 	bl	800072c <__aeabi_ddiv>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4650      	mov	r0, sl
 8001c1e:	4659      	mov	r1, fp
 8001c20:	f7fe faa4 	bl	800016c <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	e9c1 23a6 	strd	r2, r3, [r1, #664]	@ 0x298
                }
                break;
 8001c2e:	e07b      	b.n	8001d28 <GPS_ParseGPRMC+0x354>

            case 6: // E/W indicator
                if (token[0] == 'W') {
 8001c30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b57      	cmp	r3, #87	@ 0x57
 8001c38:	d178      	bne.n	8001d2c <GPS_ParseGPRMC+0x358>
                    gps->position.longitude = -gps->position.longitude;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 8001c40:	4690      	mov	r8, r2
 8001c42:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	e9c3 89a6 	strd	r8, r9, [r3, #664]	@ 0x298
                }
                break;
 8001c4c:	e06e      	b.n	8001d2c <GPS_ParseGPRMC+0x358>

            case 7: // Speed over ground (knots)
                gps->position.speed = atof(token);
 8001c4e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001c52:	f007 ff17 	bl	8009a84 <atof>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	e9c1 23aa 	strd	r2, r3, [r1, #680]	@ 0x2a8
                break;
 8001c60:	e067      	b.n	8001d32 <GPS_ParseGPRMC+0x35e>

            case 8: // Course over ground (degrees)
                gps->position.course = atof(token);
 8001c62:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001c66:	f007 ff0d 	bl	8009a84 <atof>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	e9c1 23ac 	strd	r2, r3, [r1, #688]	@ 0x2b0
                break;
 8001c74:	e05d      	b.n	8001d32 <GPS_ParseGPRMC+0x35e>

            case 9: // Date (format: ddmmyy)
                if (strlen(token) == 6) {
 8001c76:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001c7a:	f7fe fa69 	bl	8000150 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d155      	bne.n	8001d30 <GPS_ParseGPRMC+0x35c>
                    gps->time.day = (token[0] - '0') * 10 + (token[1] - '0');
 8001c84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	3b30      	subs	r3, #48	@ 0x30
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3b30      	subs	r3, #48	@ 0x30
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f883 22d6 	strb.w	r2, [r3, #726]	@ 0x2d6
                    gps->time.month = (token[2] - '0') * 10 + (token[3] - '0');
 8001cae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	3b30      	subs	r3, #48	@ 0x30
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cc8:	3303      	adds	r3, #3
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3b30      	subs	r3, #48	@ 0x30
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f883 22d7 	strb.w	r2, [r3, #727]	@ 0x2d7
                    // Convert 2-digit year to full year
                    int year = (token[4] - '0') * 10 + (token[5] - '0');
 8001cda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cde:	3304      	adds	r3, #4
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cf4:	3305      	adds	r3, #5
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	3b30      	subs	r3, #48	@ 0x30
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                    gps->time.year = 2000 + year; // Assuming years after 2000
 8001d00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8a3 22d8 	strh.w	r2, [r3, #728]	@ 0x2d8
                }
                break;
 8001d12:	e00d      	b.n	8001d30 <GPS_ParseGPRMC+0x35c>
                break;
 8001d14:	bf00      	nop
 8001d16:	e00c      	b.n	8001d32 <GPS_ParseGPRMC+0x35e>
 8001d18:	0800de44 	.word	0x0800de44
 8001d1c:	404e0000 	.word	0x404e0000
                break;
 8001d20:	bf00      	nop
 8001d22:	e006      	b.n	8001d32 <GPS_ParseGPRMC+0x35e>
                break;
 8001d24:	bf00      	nop
 8001d26:	e004      	b.n	8001d32 <GPS_ParseGPRMC+0x35e>
                break;
 8001d28:	bf00      	nop
 8001d2a:	e002      	b.n	8001d32 <GPS_ParseGPRMC+0x35e>
                break;
 8001d2c:	bf00      	nop
 8001d2e:	e000      	b.n	8001d32 <GPS_ParseGPRMC+0x35e>
                break;
 8001d30:	bf00      	nop
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
 8001d32:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d36:	461a      	mov	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	@ (8001d6c <GPS_ParseGPRMC+0x398>)
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f009 fb3e 	bl	800b3bc <strtok_r>
 8001d40:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
 8001d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f47f ae67 	bne.w	8001a1c <GPS_ParseGPRMC+0x48>
        }
    }

    // If position is valid, set fix available
    if (gps->position.valid) {
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 32c9 	ldrb.w	r3, [r3, #713]	@ 0x2c9
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <GPS_ParseGPRMC+0x38c>
        gps->fix_available = 1;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 22da 	strb.w	r2, [r3, #730]	@ 0x2da
    }

    return GPS_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	37c0      	adds	r7, #192	@ 0xc0
 8001d66:	46bd      	mov	sp, r7
 8001d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6c:	0800deb0 	.word	0x0800deb0

08001d70 <GPS_DebugPrint>:
}

/**
 * @brief Debug function to print parsed GPS data via UART
 */
void GPS_DebugPrint(GPS_Handle* gps, UART_HandleTypeDef* debug_huart) {
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d72:	b0c9      	sub	sp, #292	@ 0x124
 8001d74:	af06      	add	r7, sp, #24
 8001d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d7e:	6018      	str	r0, [r3, #0]
 8001d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d88:	6019      	str	r1, [r3, #0]
    char buffer[256];

    if (debug_huart == NULL) {
 8001d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 811c 	beq.w	8001fd2 <GPS_DebugPrint+0x262>
        return;
    }

    // Position info
    sprintf(buffer, "GPS Position:\r\n");
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	498f      	ldr	r1, [pc, #572]	@ (8001fdc <GPS_DebugPrint+0x26c>)
 8001da0:	4618      	mov	r0, r3
 8001da2:	f009 fa53 	bl	800b24c <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe f9d0 	bl	8000150 <strlen>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f107 0108 	add.w	r1, r7, #8
 8001db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001dbc:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001dc0:	2364      	movs	r3, #100	@ 0x64
 8001dc2:	6800      	ldr	r0, [r0, #0]
 8001dc4:	f007 f844 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "  Fix: %s\r\n", gps->fix_available ? "Valid" : "Invalid");
 8001dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f893 32da 	ldrb.w	r3, [r3, #730]	@ 0x2da
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <GPS_DebugPrint+0x6e>
 8001dda:	4a81      	ldr	r2, [pc, #516]	@ (8001fe0 <GPS_DebugPrint+0x270>)
 8001ddc:	e000      	b.n	8001de0 <GPS_DebugPrint+0x70>
 8001dde:	4a81      	ldr	r2, [pc, #516]	@ (8001fe4 <GPS_DebugPrint+0x274>)
 8001de0:	f107 0308 	add.w	r3, r7, #8
 8001de4:	4980      	ldr	r1, [pc, #512]	@ (8001fe8 <GPS_DebugPrint+0x278>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f009 fa30 	bl	800b24c <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe f9ad 	bl	8000150 <strlen>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	f107 0108 	add.w	r1, r7, #8
 8001dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e02:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001e06:	2364      	movs	r3, #100	@ 0x64
 8001e08:	6800      	ldr	r0, [r0, #0]
 8001e0a:	f007 f821 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "  Latitude: %.6f\r\n", gps->position.latitude);
 8001e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	e9d3 23a4 	ldrd	r2, r3, [r3, #656]	@ 0x290
 8001e1c:	f107 0008 	add.w	r0, r7, #8
 8001e20:	4972      	ldr	r1, [pc, #456]	@ (8001fec <GPS_DebugPrint+0x27c>)
 8001e22:	f009 fa13 	bl	800b24c <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe f990 	bl	8000150 <strlen>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f107 0108 	add.w	r1, r7, #8
 8001e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e3c:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001e40:	2364      	movs	r3, #100	@ 0x64
 8001e42:	6800      	ldr	r0, [r0, #0]
 8001e44:	f007 f804 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "  Longitude: %.6f\r\n", gps->position.longitude);
 8001e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 8001e56:	f107 0008 	add.w	r0, r7, #8
 8001e5a:	4965      	ldr	r1, [pc, #404]	@ (8001ff0 <GPS_DebugPrint+0x280>)
 8001e5c:	f009 f9f6 	bl	800b24c <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe f973 	bl	8000150 <strlen>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	f107 0108 	add.w	r1, r7, #8
 8001e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e76:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001e7a:	2364      	movs	r3, #100	@ 0x64
 8001e7c:	6800      	ldr	r0, [r0, #0]
 8001e7e:	f006 ffe7 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "  Altitude: %.2f m\r\n", gps->position.altitude);
 8001e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e9d3 23a8 	ldrd	r2, r3, [r3, #672]	@ 0x2a0
 8001e90:	f107 0008 	add.w	r0, r7, #8
 8001e94:	4957      	ldr	r1, [pc, #348]	@ (8001ff4 <GPS_DebugPrint+0x284>)
 8001e96:	f009 f9d9 	bl	800b24c <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe f956 	bl	8000150 <strlen>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f107 0108 	add.w	r1, r7, #8
 8001eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001eb0:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001eb4:	2364      	movs	r3, #100	@ 0x64
 8001eb6:	6800      	ldr	r0, [r0, #0]
 8001eb8:	f006 ffca 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "  Satellites: %d\r\n", gps->position.satellites);
 8001ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	4949      	ldr	r1, [pc, #292]	@ (8001ff8 <GPS_DebugPrint+0x288>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f009 f9ba 	bl	800b24c <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe f937 	bl	8000150 <strlen>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	f107 0108 	add.w	r1, r7, #8
 8001eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001eee:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001ef2:	2364      	movs	r3, #100	@ 0x64
 8001ef4:	6800      	ldr	r0, [r0, #0]
 8001ef6:	f006 ffab 	bl	8008e50 <HAL_UART_Transmit>

    // Time info
    sprintf(buffer, "GPS Time:\r\n");
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	493f      	ldr	r1, [pc, #252]	@ (8001ffc <GPS_DebugPrint+0x28c>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f009 f9a3 	bl	800b24c <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe f920 	bl	8000150 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	f107 0108 	add.w	r1, r7, #8
 8001f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f1c:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001f20:	2364      	movs	r3, #100	@ 0x64
 8001f22:	6800      	ldr	r0, [r0, #0]
 8001f24:	f006 ff94 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "  %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
            gps->time.day, gps->time.month, gps->time.year,
 8001f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f893 32d6 	ldrb.w	r3, [r3, #726]	@ 0x2d6
    sprintf(buffer, "  %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 8001f36:	461e      	mov	r6, r3
            gps->time.day, gps->time.month, gps->time.year,
 8001f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f893 32d7 	ldrb.w	r3, [r3, #727]	@ 0x2d7
    sprintf(buffer, "  %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 8001f46:	469c      	mov	ip, r3
            gps->time.day, gps->time.month, gps->time.year,
 8001f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 32d8 	ldrh.w	r3, [r3, #728]	@ 0x2d8
    sprintf(buffer, "  %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 8001f56:	461a      	mov	r2, r3
            gps->time.hour, gps->time.minute, gps->time.second, gps->time.millisecond);
 8001f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f893 32d0 	ldrb.w	r3, [r3, #720]	@ 0x2d0
    sprintf(buffer, "  %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 8001f66:	4619      	mov	r1, r3
            gps->time.hour, gps->time.minute, gps->time.second, gps->time.millisecond);
 8001f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f893 32d1 	ldrb.w	r3, [r3, #721]	@ 0x2d1
    sprintf(buffer, "  %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 8001f76:	461c      	mov	r4, r3
            gps->time.hour, gps->time.minute, gps->time.second, gps->time.millisecond);
 8001f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f893 32d2 	ldrb.w	r3, [r3, #722]	@ 0x2d2
    sprintf(buffer, "  %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 8001f86:	461d      	mov	r5, r3
            gps->time.hour, gps->time.minute, gps->time.second, gps->time.millisecond);
 8001f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	@ 0x2d4
    sprintf(buffer, "  %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 8001f96:	f107 0008 	add.w	r0, r7, #8
 8001f9a:	9304      	str	r3, [sp, #16]
 8001f9c:	9503      	str	r5, [sp, #12]
 8001f9e:	9402      	str	r4, [sp, #8]
 8001fa0:	9101      	str	r1, [sp, #4]
 8001fa2:	9200      	str	r2, [sp, #0]
 8001fa4:	4663      	mov	r3, ip
 8001fa6:	4632      	mov	r2, r6
 8001fa8:	4915      	ldr	r1, [pc, #84]	@ (8002000 <GPS_DebugPrint+0x290>)
 8001faa:	f009 f94f 	bl	800b24c <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe f8cc 	bl	8000150 <strlen>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	f107 0108 	add.w	r1, r7, #8
 8001fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001fc4:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8001fc8:	2364      	movs	r3, #100	@ 0x64
 8001fca:	6800      	ldr	r0, [r0, #0]
 8001fcc:	f006 ff40 	bl	8008e50 <HAL_UART_Transmit>
 8001fd0:	e000      	b.n	8001fd4 <GPS_DebugPrint+0x264>
        return;
 8001fd2:	bf00      	nop
}
 8001fd4:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fdc:	0800deb4 	.word	0x0800deb4
 8001fe0:	0800dec4 	.word	0x0800dec4
 8001fe4:	0800decc 	.word	0x0800decc
 8001fe8:	0800ded4 	.word	0x0800ded4
 8001fec:	0800dee0 	.word	0x0800dee0
 8001ff0:	0800def4 	.word	0x0800def4
 8001ff4:	0800df08 	.word	0x0800df08
 8001ff8:	0800df20 	.word	0x0800df20
 8001ffc:	0800df34 	.word	0x0800df34
 8002000:	0800df40 	.word	0x0800df40

08002004 <L298N_Init>:

#include "l298n.h"
#include "config.h"

void L298N_Init(L298N_HandleTypeDef* hl298n, L298N_InitTypeDef* init)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    // Set basic parameters
    hl298n->htim = init->htim;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	601a      	str	r2, [r3, #0]
    hl298n->channel_a = init->channel_a;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	605a      	str	r2, [r3, #4]
    hl298n->channel_b = init->channel_b;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	609a      	str	r2, [r3, #8]
    hl298n->mode = init->mode;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	7b1a      	ldrb	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    // Set fixed pins from config.h
    hl298n->in1_port = MOTOR_IN1_PORT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a39      	ldr	r2, [pc, #228]	@ (8002118 <L298N_Init+0x114>)
 8002034:	60da      	str	r2, [r3, #12]
    hl298n->in1_pin = MOTOR_IN1_PIN;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	821a      	strh	r2, [r3, #16]
    hl298n->in2_port = MOTOR_IN2_PORT;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a36      	ldr	r2, [pc, #216]	@ (8002118 <L298N_Init+0x114>)
 8002040:	615a      	str	r2, [r3, #20]
    hl298n->in2_pin = MOTOR_IN2_PIN;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2208      	movs	r2, #8
 8002046:	831a      	strh	r2, [r3, #24]
    hl298n->in3_port = MOTOR_IN3_PORT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a33      	ldr	r2, [pc, #204]	@ (8002118 <L298N_Init+0x114>)
 800204c:	61da      	str	r2, [r3, #28]
    hl298n->in3_pin = MOTOR_IN3_PIN;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2210      	movs	r2, #16
 8002052:	841a      	strh	r2, [r3, #32]
    hl298n->in4_port = MOTOR_IN4_PORT;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a30      	ldr	r2, [pc, #192]	@ (8002118 <L298N_Init+0x114>)
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24
    hl298n->in4_pin = MOTOR_IN4_PIN;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	851a      	strh	r2, [r3, #40]	@ 0x28

    // Initialize GPIO pins
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]

    // Enable GPIO clock if not already enabled
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <L298N_Init+0x118>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4a2a      	ldr	r2, [pc, #168]	@ (800211c <L298N_Init+0x118>)
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	6193      	str	r3, [r2, #24]
 800207a:	4b28      	ldr	r3, [pc, #160]	@ (800211c <L298N_Init+0x118>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

    // Configure motor control pins
    GPIO_InitStruct.Pin = hl298n->in1_pin | hl298n->in2_pin;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8a1a      	ldrh	r2, [r3, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8b1b      	ldrh	r3, [r3, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	b29b      	uxth	r3, r3
 8002092:	613b      	str	r3, [r7, #16]
    if(hl298n->mode == L298N_DUAL_CHANNEL) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800209a:	2b01      	cmp	r3, #1
 800209c:	d108      	bne.n	80020b0 <L298N_Init+0xac>
        GPIO_InitStruct.Pin |= hl298n->in3_pin | hl298n->in4_pin;
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	8c11      	ldrh	r1, [r2, #32]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80020a8:	430a      	orrs	r2, r1
 80020aa:	b292      	uxth	r2, r2
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
    }
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(hl298n->in1_port, &GPIO_InitStruct);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f107 0210 	add.w	r2, r7, #16
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fbc8 	bl	800485c <HAL_GPIO_Init>

    // Start PWM and initialize motors
    HAL_TIM_PWM_Start(hl298n->htim, hl298n->channel_a);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f006 f968 	bl	80083ac <HAL_TIM_PWM_Start>
    if(hl298n->mode == L298N_DUAL_CHANNEL) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <L298N_Init+0xf2>
        HAL_TIM_PWM_Start(hl298n->htim, hl298n->channel_b);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f006 f95b 	bl	80083ac <HAL_TIM_PWM_Start>
    }
    L298N_StopMotor(hl298n, MOTOR_A);
 80020f6:	2100      	movs	r1, #0
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f87f 	bl	80021fc <L298N_StopMotor>
    if(hl298n->mode == L298N_DUAL_CHANNEL) {
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002104:	2b01      	cmp	r3, #1
 8002106:	d103      	bne.n	8002110 <L298N_Init+0x10c>
        L298N_StopMotor(hl298n, MOTOR_B);
 8002108:	2101      	movs	r1, #1
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f876 	bl	80021fc <L298N_StopMotor>
    }
}
 8002110:	bf00      	nop
 8002112:	3720      	adds	r7, #32
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40010c00 	.word	0x40010c00
 800211c:	40021000 	.word	0x40021000

08002120 <L298N_SetSpeed>:


void L298N_SetSpeed(L298N_HandleTypeDef* hl298n, Motor_Channel channel, uint8_t speed)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
 800212c:	4613      	mov	r3, r2
 800212e:	70bb      	strb	r3, [r7, #2]
    uint32_t pwm_value = (speed * 999) / 100;  // Convert percentage to PWM value
 8002130:	78bb      	ldrb	r3, [r7, #2]
 8002132:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a2f      	ldr	r2, [pc, #188]	@ (80021f8 <L298N_SetSpeed+0xd8>)
 800213c:	fb82 1203 	smull	r1, r2, r2, r3
 8002140:	1152      	asrs	r2, r2, #5
 8002142:	17db      	asrs	r3, r3, #31
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	60fb      	str	r3, [r7, #12]

    if(channel == MOTOR_A) {
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d123      	bne.n	8002196 <L298N_SetSpeed+0x76>
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_a, pwm_value);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <L298N_SetSpeed+0x42>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_b, pwm_value);
    }
}
 8002160:	e045      	b.n	80021ee <L298N_SetSpeed+0xce>
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_a, pwm_value);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d105      	bne.n	8002176 <L298N_SetSpeed+0x56>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6393      	str	r3, [r2, #56]	@ 0x38
 8002174:	e03b      	b.n	80021ee <L298N_SetSpeed+0xce>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b08      	cmp	r3, #8
 800217c:	d105      	bne.n	800218a <L298N_SetSpeed+0x6a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002188:	e031      	b.n	80021ee <L298N_SetSpeed+0xce>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002194:	e02b      	b.n	80021ee <L298N_SetSpeed+0xce>
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d128      	bne.n	80021ee <L298N_SetSpeed+0xce>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d123      	bne.n	80021ee <L298N_SetSpeed+0xce>
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_b, pwm_value);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <L298N_SetSpeed+0x9a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021b8:	e019      	b.n	80021ee <L298N_SetSpeed+0xce>
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_b, pwm_value);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d105      	bne.n	80021ce <L298N_SetSpeed+0xae>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80021cc:	e00f      	b.n	80021ee <L298N_SetSpeed+0xce>
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_b, pwm_value);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d105      	bne.n	80021e2 <L298N_SetSpeed+0xc2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80021e0:	e005      	b.n	80021ee <L298N_SetSpeed+0xce>
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_b, pwm_value);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80021ec:	e7ff      	b.n	80021ee <L298N_SetSpeed+0xce>
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	51eb851f 	.word	0x51eb851f

080021fc <L298N_StopMotor>:
        }
    }
}

void L298N_StopMotor(L298N_HandleTypeDef* hl298n, Motor_Channel channel)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
    if(channel == MOTOR_A) {
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <L298N_StopMotor+0x3e>
        L298N_SetSpeed(hl298n, MOTOR_A, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff84 	bl	8002120 <L298N_SetSpeed>
        HAL_GPIO_WritePin(hl298n->in1_port, hl298n->in1_pin, GPIO_PIN_RESET);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68d8      	ldr	r0, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	8a1b      	ldrh	r3, [r3, #16]
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	f002 fc9e 	bl	8004b64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(hl298n->in2_port, hl298n->in2_pin, GPIO_PIN_RESET);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6958      	ldr	r0, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8b1b      	ldrh	r3, [r3, #24]
 8002230:	2200      	movs	r2, #0
 8002232:	4619      	mov	r1, r3
 8002234:	f002 fc96 	bl	8004b64 <HAL_GPIO_WritePin>
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
        L298N_SetSpeed(hl298n, MOTOR_B, 0);
        HAL_GPIO_WritePin(hl298n->in3_port, hl298n->in3_pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(hl298n->in4_port, hl298n->in4_pin, GPIO_PIN_RESET);
    }
}
 8002238:	e01c      	b.n	8002274 <L298N_StopMotor+0x78>
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d119      	bne.n	8002274 <L298N_StopMotor+0x78>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002246:	2b01      	cmp	r3, #1
 8002248:	d114      	bne.n	8002274 <L298N_StopMotor+0x78>
        L298N_SetSpeed(hl298n, MOTOR_B, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2101      	movs	r1, #1
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff66 	bl	8002120 <L298N_SetSpeed>
        HAL_GPIO_WritePin(hl298n->in3_port, hl298n->in3_pin, GPIO_PIN_RESET);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69d8      	ldr	r0, [r3, #28]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	8c1b      	ldrh	r3, [r3, #32]
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	f002 fc80 	bl	8004b64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(hl298n->in4_port, hl298n->in4_pin, GPIO_PIN_RESET);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226c:	2200      	movs	r2, #0
 800226e:	4619      	mov	r1, r3
 8002270:	f002 fc78 	bl	8004b64 <HAL_GPIO_WritePin>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <LightSensor_Init>:
    LDR_BACK_CHANNEL,
    LDR_LEFT_CHANNEL
};

void LightSensor_Init(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]

    // Enable GPIO Clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <LightSensor_Init+0x50>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <LightSensor_Init+0x50>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	6193      	str	r3, [r2, #24]
 800229e:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <LightSensor_Init+0x50>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]

    // Configure GPIO pins for analog input using config.h definitions
    GPIO_InitStruct.Pin = LDR_FRONT_PIN | LDR_RIGHT_PIN | LDR_BACK_PIN | LDR_LEFT_PIN;
 80022aa:	23f0      	movs	r3, #240	@ 0xf0
 80022ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ae:	2303      	movs	r3, #3
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LDR_GPIO_PORT, &GPIO_InitStruct);
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	4619      	mov	r1, r3
 80022bc:	4804      	ldr	r0, [pc, #16]	@ (80022d0 <LightSensor_Init+0x54>)
 80022be:	f002 facd 	bl	800485c <HAL_GPIO_Init>
}
 80022c2:	bf00      	nop
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010800 	.word	0x40010800

080022d4 <LightSensor_ReadSingle>:

uint16_t LightSensor_ReadSingle(ADC_HandleTypeDef* hadc, LightSensor_Position position)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
    uint16_t adcValue = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	82fb      	strh	r3, [r7, #22]

    // Configure ADC channel
    sConfig.Channel = SENSOR_CHANNELS[position];
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	4a12      	ldr	r2, [pc, #72]	@ (800233c <LightSensor_ReadSingle+0x68>)
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80022fe:	2307      	movs	r3, #7
 8002300:	613b      	str	r3, [r7, #16]

    // Configure channel and make sure to reset any previous configuration
    HAL_ADC_Stop(hadc);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f001 fe38 	bl	8003f78 <HAL_ADC_Stop>
    HAL_ADC_ConfigChannel(hadc, &sConfig);
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f001 ff70 	bl	80041f4 <HAL_ADC_ConfigChannel>

    // Start ADC conversion
    HAL_ADC_Start(hadc);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f001 fd81 	bl	8003e1c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 100);
 800231a:	2164      	movs	r1, #100	@ 0x64
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f001 fe57 	bl	8003fd0 <HAL_ADC_PollForConversion>
    adcValue = HAL_ADC_GetValue(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f001 ff5a 	bl	80041dc <HAL_ADC_GetValue>
 8002328:	4603      	mov	r3, r0
 800232a:	82fb      	strh	r3, [r7, #22]
    HAL_ADC_Stop(hadc);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f001 fe23 	bl	8003f78 <HAL_ADC_Stop>

    return adcValue;
 8002332:	8afb      	ldrh	r3, [r7, #22]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	0800e1ec 	.word	0x0800e1ec

08002340 <LightSensor_ReadAll>:

void LightSensor_ReadAll(ADC_HandleTypeDef* hadc, LightSensor_Values* values)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    values->front = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_FRONT);
 800234a:	2100      	movs	r1, #0
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ffc1 	bl	80022d4 <LightSensor_ReadSingle>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	801a      	strh	r2, [r3, #0]
    values->right = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_RIGHT);
 800235a:	2101      	movs	r1, #1
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ffb9 	bl	80022d4 <LightSensor_ReadSingle>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	805a      	strh	r2, [r3, #2]
    values->back = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_BACK);
 800236a:	2102      	movs	r1, #2
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffb1 	bl	80022d4 <LightSensor_ReadSingle>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	809a      	strh	r2, [r3, #4]
    values->left = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_LEFT);
 800237a:	2103      	movs	r1, #3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ffa9 	bl	80022d4 <LightSensor_ReadSingle>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	80da      	strh	r2, [r3, #6]
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <LM35_Init>:
 *      Author: Amr_H
 */
#include "lm35.h"

void LM35_Init(ADC_HandleTypeDef* hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <LM35_Init+0x50>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <LM35_Init+0x50>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6193      	str	r3, [r2, #24]
 80023b6:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <LM35_Init+0x50>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = LM35_ADC_PIN;
 80023c2:	2301      	movs	r3, #1
 80023c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c6:	2303      	movs	r3, #3
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LM35_ADC_PORT, &GPIO_InitStruct);
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4619      	mov	r1, r3
 80023d4:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <LM35_Init+0x54>)
 80023d6:	f002 fa41 	bl	800485c <HAL_GPIO_Init>
}
 80023da:	bf00      	nop
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010c00 	.word	0x40010c00

080023ec <LM35_ReadTemperature>:

float LM35_ReadTemperature(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
    uint32_t adcValue = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
    float temperature;

    // First stop any ongoing conversion
    HAL_ADC_Stop(hadc);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f001 fdb7 	bl	8003f78 <HAL_ADC_Stop>

    // Configure for LM35 channel
    sConfig.Channel = LM35_ADC_CHANNEL;
 800240a:	2308      	movs	r3, #8
 800240c:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800240e:	2301      	movs	r3, #1
 8002410:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002412:	2305      	movs	r3, #5
 8002414:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(hadc, &sConfig);
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f001 fee9 	bl	80041f4 <HAL_ADC_ConfigChannel>

    // Now read the value
    HAL_ADC_Start(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f001 fcfa 	bl	8003e1c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 100);
 8002428:	2164      	movs	r1, #100	@ 0x64
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f001 fdd0 	bl	8003fd0 <HAL_ADC_PollForConversion>
    adcValue = HAL_ADC_GetValue(hadc);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f001 fed3 	bl	80041dc <HAL_ADC_GetValue>
 8002436:	61b8      	str	r0, [r7, #24]
    HAL_ADC_Stop(hadc);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 fd9d 	bl	8003f78 <HAL_ADC_Stop>

    temperature = ((float)adcValue * 3.3f * 100.0f) / 4096.0f;
 800243e:	69b8      	ldr	r0, [r7, #24]
 8002440:	f7fe fbf8 	bl	8000c34 <__aeabi_ui2f>
 8002444:	4603      	mov	r3, r0
 8002446:	4913      	ldr	r1, [pc, #76]	@ (8002494 <LM35_ReadTemperature+0xa8>)
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fc4b 	bl	8000ce4 <__aeabi_fmul>
 800244e:	4603      	mov	r3, r0
 8002450:	4911      	ldr	r1, [pc, #68]	@ (8002498 <LM35_ReadTemperature+0xac>)
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fc46 	bl	8000ce4 <__aeabi_fmul>
 8002458:	4603      	mov	r3, r0
 800245a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fcf4 	bl	8000e4c <__aeabi_fdiv>
 8002464:	4603      	mov	r3, r0
 8002466:	61fb      	str	r3, [r7, #28]

    // Compensate for offset
    temperature -= 0.22f;  // Subtract the observed offset
 8002468:	490c      	ldr	r1, [pc, #48]	@ (800249c <LM35_ReadTemperature+0xb0>)
 800246a:	69f8      	ldr	r0, [r7, #28]
 800246c:	f7fe fb30 	bl	8000ad0 <__aeabi_fsub>
 8002470:	4603      	mov	r3, r0
 8002472:	61fb      	str	r3, [r7, #28]

    // Ensure temperature doesn't go negative due to offset correction
    if(temperature < 0)
 8002474:	f04f 0100 	mov.w	r1, #0
 8002478:	69f8      	ldr	r0, [r7, #28]
 800247a:	f7fe fdd1 	bl	8001020 <__aeabi_fcmplt>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <LM35_ReadTemperature+0x9e>
        temperature = 0;
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]

    return temperature;
 800248a:	69fb      	ldr	r3, [r7, #28]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40533333 	.word	0x40533333
 8002498:	42c80000 	.word	0x42c80000
 800249c:	3e6147ae 	.word	0x3e6147ae

080024a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b0aa      	sub	sp, #168	@ 0xa8
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a6:	f001 fb8b 	bl	8003bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024aa:	f000 f8f1 	bl	8002690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ae:	f000 fa79 	bl	80029a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80024b2:	f000 f93d 	bl	8002730 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80024b6:	f000 fa21 	bl	80028fc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80024ba:	f000 f9bb 	bl	8002834 <MX_TIM4_Init>
  MX_I2C1_Init();
 80024be:	f000 f95d 	bl	800277c <MX_I2C1_Init>
  MX_I2C2_Init();
 80024c2:	f000 f989 	bl	80027d8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80024c6:	f000 fa43 	bl	8002950 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LM35_Init(&hadc1);
 80024ca:	4862      	ldr	r0, [pc, #392]	@ (8002654 <main+0x1b4>)
 80024cc:	f7ff ff62 	bl	8002394 <LM35_Init>
  LightSensor_Init(&hadc1);
 80024d0:	4860      	ldr	r0, [pc, #384]	@ (8002654 <main+0x1b4>)
 80024d2:	f7ff fed3 	bl	800227c <LightSensor_Init>

  if (MPU6050_Init(&hmpu, &hi2c1) != MPU6050_OK) {
 80024d6:	4960      	ldr	r1, [pc, #384]	@ (8002658 <main+0x1b8>)
 80024d8:	4860      	ldr	r0, [pc, #384]	@ (800265c <main+0x1bc>)
 80024da:	f000 fb67 	bl	8002bac <MPU6050_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d014      	beq.n	800250e <main+0x6e>
      char msg[] = "MPU6050 initialization failed!\r\n";
 80024e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002660 <main+0x1c0>)
 80024e6:	463c      	mov	r4, r7
 80024e8:	461d      	mov	r5, r3
 80024ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80024f6:	463b      	mov	r3, r7
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd fe29 	bl	8000150 <strlen>
 80024fe:	4603      	mov	r3, r0
 8002500:	b29a      	uxth	r2, r3
 8002502:	4639      	mov	r1, r7
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	4856      	ldr	r0, [pc, #344]	@ (8002664 <main+0x1c4>)
 800250a:	f006 fca1 	bl	8008e50 <HAL_UART_Transmit>
       // Hang if initialization fails
  }

  // Calibrate MPU6050 gyroscope (100 samples)
  if (MPU6050_Calibrate(&hmpu, 100) != MPU6050_OK) {
 800250e:	2164      	movs	r1, #100	@ 0x64
 8002510:	4852      	ldr	r0, [pc, #328]	@ (800265c <main+0x1bc>)
 8002512:	f000 fdee 	bl	80030f2 <MPU6050_Calibrate>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d017      	beq.n	800254c <main+0xac>
      char msg[] = "MPU6050 calibration failed!\r\n";
 800251c:	4b52      	ldr	r3, [pc, #328]	@ (8002668 <main+0x1c8>)
 800251e:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002522:	461d      	mov	r5, r3
 8002524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002528:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800252c:	c407      	stmia	r4!, {r0, r1, r2}
 800252e:	8023      	strh	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002530:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd fe0b 	bl	8000150 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	b29a      	uxth	r2, r3
 800253e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	4847      	ldr	r0, [pc, #284]	@ (8002664 <main+0x1c4>)
 8002548:	f006 fc82 	bl	8008e50 <HAL_UART_Transmit>
  }

  L298N_InitTypeDef motor_init;
  motor_init.htim = &htim4;
 800254c:	4b47      	ldr	r3, [pc, #284]	@ (800266c <main+0x1cc>)
 800254e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  motor_init.channel_a = TIM_CHANNEL_1;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  motor_init.channel_b = TIM_CHANNEL_2;
 8002558:	2304      	movs	r3, #4
 800255a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  motor_init.mode = L298N_DUAL_CHANNEL;
 800255e:	2301      	movs	r3, #1
 8002560:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
  L298N_Init(&hmotor, &motor_init);
 8002564:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002568:	4619      	mov	r1, r3
 800256a:	4841      	ldr	r0, [pc, #260]	@ (8002670 <main+0x1d0>)
 800256c:	f7ff fd4a 	bl	8002004 <L298N_Init>

  // Initialize GPS module with UART2
  if (GPS_Init(&hgps, &huart2) != GPS_OK) {
 8002570:	4940      	ldr	r1, [pc, #256]	@ (8002674 <main+0x1d4>)
 8002572:	4841      	ldr	r0, [pc, #260]	@ (8002678 <main+0x1d8>)
 8002574:	f7fe fdb2 	bl	80010dc <GPS_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d017      	beq.n	80025ae <main+0x10e>
    char msg[] = "GPS initialization failed!\r\n";
 800257e:	4b3f      	ldr	r3, [pc, #252]	@ (800267c <main+0x1dc>)
 8002580:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002584:	461d      	mov	r5, r3
 8002586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800258a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800258e:	c407      	stmia	r4!, {r0, r1, r2}
 8002590:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd fdda 	bl	8000150 <strlen>
 800259c:	4603      	mov	r3, r0
 800259e:	b29a      	uxth	r2, r3
 80025a0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
 80025a8:	482e      	ldr	r0, [pc, #184]	@ (8002664 <main+0x1c4>)
 80025aa:	f006 fc51 	bl	8008e50 <HAL_UART_Transmit>
     // Hang if initialization fails
  }

  char msg[] = "System initialized. Starting main loop...\r\n";
 80025ae:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <main+0x1e0>)
 80025b0:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 80025b4:	461d      	mov	r5, r3
 80025b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80025c6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd fdc0 	bl	8000150 <strlen>
 80025d0:	4603      	mov	r3, r0
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
 80025dc:	4821      	ldr	r0, [pc, #132]	@ (8002664 <main+0x1c4>)
 80025de:	f006 fc37 	bl	8008e50 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		   uint32_t current_time = HAL_GetTick();
 80025e2:	f001 fb15 	bl	8003c10 <HAL_GetTick>
 80025e6:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

		    // Process GPS data continuously
		    GPS_Process(&hgps);
 80025ea:	4823      	ldr	r0, [pc, #140]	@ (8002678 <main+0x1d8>)
 80025ec:	f7fe fdaf 	bl	800114e <GPS_Process>

		    // Print GPS data using GPS_DebugPrint
		    if (current_time - last_sensor_read >= SENSOR_READ_INTERVAL) {
 80025f0:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <main+0x1e4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025fe:	d325      	bcc.n	800264c <main+0x1ac>
		        last_sensor_read = current_time;
 8002600:	4a20      	ldr	r2, [pc, #128]	@ (8002684 <main+0x1e4>)
 8002602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002606:	6013      	str	r3, [r2, #0]

		        // Print GPS information via debug print
		        GPS_DebugPrint(&hgps, &huart1);
 8002608:	4916      	ldr	r1, [pc, #88]	@ (8002664 <main+0x1c4>)
 800260a:	481b      	ldr	r0, [pc, #108]	@ (8002678 <main+0x1d8>)
 800260c:	f7ff fbb0 	bl	8001d70 <GPS_DebugPrint>

		        // Read and display other sensors
		        ReadAndDisplaySensors();
 8002610:	f000 fa6c 	bl	8002aec <ReadAndDisplaySensors>

		        // Blink LED to show activity
		        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002614:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002618:	481b      	ldr	r0, [pc, #108]	@ (8002688 <main+0x1e8>)
 800261a:	f002 fabb 	bl	8004b94 <HAL_GPIO_TogglePin>

		        // Print separator
		        char separator[] = "----------------------------------\r\n";
 800261e:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <main+0x1ec>)
 8002620:	463c      	mov	r4, r7
 8002622:	461d      	mov	r5, r3
 8002624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800262a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800262c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002630:	6020      	str	r0, [r4, #0]
 8002632:	3404      	adds	r4, #4
 8002634:	7021      	strb	r1, [r4, #0]
		        HAL_UART_Transmit(&huart1, (uint8_t*)separator, strlen(separator), 100);
 8002636:	463b      	mov	r3, r7
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd fd89 	bl	8000150 <strlen>
 800263e:	4603      	mov	r3, r0
 8002640:	b29a      	uxth	r2, r3
 8002642:	4639      	mov	r1, r7
 8002644:	2364      	movs	r3, #100	@ 0x64
 8002646:	4807      	ldr	r0, [pc, #28]	@ (8002664 <main+0x1c4>)
 8002648:	f006 fc02 	bl	8008e50 <HAL_UART_Transmit>
		    }

		    HAL_Delay(10);
 800264c:	200a      	movs	r0, #10
 800264e:	f001 fae9 	bl	8003c24 <HAL_Delay>
	while (1) {
 8002652:	e7c6      	b.n	80025e2 <main+0x142>
 8002654:	200001f4 	.word	0x200001f4
 8002658:	20000224 	.word	0x20000224
 800265c:	200006b8 	.word	0x200006b8
 8002660:	0800df68 	.word	0x0800df68
 8002664:	20000314 	.word	0x20000314
 8002668:	0800df8c 	.word	0x0800df8c
 800266c:	200002cc 	.word	0x200002cc
 8002670:	200003ac 	.word	0x200003ac
 8002674:	2000035c 	.word	0x2000035c
 8002678:	200003d8 	.word	0x200003d8
 800267c:	0800dfac 	.word	0x0800dfac
 8002680:	0800dfcc 	.word	0x0800dfcc
 8002684:	200006f8 	.word	0x200006f8
 8002688:	40011000 	.word	0x40011000
 800268c:	0800dff8 	.word	0x0800dff8

08002690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b094      	sub	sp, #80	@ 0x50
 8002694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002696:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800269a:	2228      	movs	r2, #40	@ 0x28
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f008 fe37 	bl	800b312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026c0:	2302      	movs	r3, #2
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026c4:	2301      	movs	r3, #1
 80026c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026c8:	2310      	movs	r3, #16
 80026ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026d4:	4618      	mov	r0, r3
 80026d6:	f004 ffc3 	bl	8007660 <HAL_RCC_OscConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80026e0:	f000 fa5e 	bl	8002ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026e4:	230f      	movs	r3, #15
 80026e6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f005 fa30 	bl	8007b64 <HAL_RCC_ClockConfig>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800270a:	f000 fa49 	bl	8002ba0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800270e:	2302      	movs	r3, #2
 8002710:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	4618      	mov	r0, r3
 800271a:	f005 fbe1 	bl	8007ee0 <HAL_RCCEx_PeriphCLKConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002724:	f000 fa3c 	bl	8002ba0 <Error_Handler>
  }
}
 8002728:	bf00      	nop
 800272a:	3750      	adds	r7, #80	@ 0x50
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002734:	4b0f      	ldr	r3, [pc, #60]	@ (8002774 <MX_ADC1_Init+0x44>)
 8002736:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <MX_ADC1_Init+0x48>)
 8002738:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800273a:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <MX_ADC1_Init+0x44>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002740:	4b0c      	ldr	r3, [pc, #48]	@ (8002774 <MX_ADC1_Init+0x44>)
 8002742:	2200      	movs	r2, #0
 8002744:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002746:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <MX_ADC1_Init+0x44>)
 8002748:	2200      	movs	r2, #0
 800274a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800274c:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <MX_ADC1_Init+0x44>)
 800274e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002752:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002754:	4b07      	ldr	r3, [pc, #28]	@ (8002774 <MX_ADC1_Init+0x44>)
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <MX_ADC1_Init+0x44>)
 800275c:	2201      	movs	r2, #1
 800275e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002760:	4804      	ldr	r0, [pc, #16]	@ (8002774 <MX_ADC1_Init+0x44>)
 8002762:	f001 fa83 	bl	8003c6c <HAL_ADC_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 800276c:	f000 fa18 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200001f4 	.word	0x200001f4
 8002778:	40012400 	.word	0x40012400

0800277c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <MX_I2C1_Init+0x50>)
 8002782:	4a13      	ldr	r2, [pc, #76]	@ (80027d0 <MX_I2C1_Init+0x54>)
 8002784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <MX_I2C1_Init+0x50>)
 8002788:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <MX_I2C1_Init+0x58>)
 800278a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <MX_I2C1_Init+0x50>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <MX_I2C1_Init+0x50>)
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <MX_I2C1_Init+0x50>)
 800279a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800279e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b8:	4804      	ldr	r0, [pc, #16]	@ (80027cc <MX_I2C1_Init+0x50>)
 80027ba:	f002 fa05 	bl	8004bc8 <HAL_I2C_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027c4:	f000 f9ec 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000224 	.word	0x20000224
 80027d0:	40005400 	.word	0x40005400
 80027d4:	000186a0 	.word	0x000186a0

080027d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027dc:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <MX_I2C2_Init+0x50>)
 80027de:	4a13      	ldr	r2, [pc, #76]	@ (800282c <MX_I2C2_Init+0x54>)
 80027e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80027e2:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <MX_I2C2_Init+0x50>)
 80027e4:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <MX_I2C2_Init+0x58>)
 80027e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <MX_I2C2_Init+0x50>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <MX_I2C2_Init+0x50>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <MX_I2C2_Init+0x50>)
 80027f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <MX_I2C2_Init+0x50>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <MX_I2C2_Init+0x50>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002808:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <MX_I2C2_Init+0x50>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <MX_I2C2_Init+0x50>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002814:	4804      	ldr	r0, [pc, #16]	@ (8002828 <MX_I2C2_Init+0x50>)
 8002816:	f002 f9d7 	bl	8004bc8 <HAL_I2C_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002820:	f000 f9be 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000278 	.word	0x20000278
 800282c:	40005800 	.word	0x40005800
 8002830:	000186a0 	.word	0x000186a0

08002834 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283a:	f107 0320 	add.w	r3, r7, #32
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	615a      	str	r2, [r3, #20]
 8002854:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002856:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 8002858:	4a27      	ldr	r2, [pc, #156]	@ (80028f8 <MX_TIM4_Init+0xc4>)
 800285a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 800285c:	4b25      	ldr	r3, [pc, #148]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 800285e:	2207      	movs	r2, #7
 8002860:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002862:	4b24      	ldr	r3, [pc, #144]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002868:	4b22      	ldr	r3, [pc, #136]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 800286a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800286e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002870:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002876:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 8002878:	2280      	movs	r2, #128	@ 0x80
 800287a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800287c:	481d      	ldr	r0, [pc, #116]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 800287e:	f005 fd45 	bl	800830c <HAL_TIM_PWM_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002888:	f000 f98a 	bl	8002ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002894:	f107 0320 	add.w	r3, r7, #32
 8002898:	4619      	mov	r1, r3
 800289a:	4816      	ldr	r0, [pc, #88]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 800289c:	f006 fa18 	bl	8008cd0 <HAL_TIMEx_MasterConfigSynchronization>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80028a6:	f000 f97b 	bl	8002ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028aa:	2360      	movs	r3, #96	@ 0x60
 80028ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2200      	movs	r2, #0
 80028be:	4619      	mov	r1, r3
 80028c0:	480c      	ldr	r0, [pc, #48]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 80028c2:	f005 ff05 	bl	80086d0 <HAL_TIM_PWM_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80028cc:	f000 f968 	bl	8002ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2204      	movs	r2, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4807      	ldr	r0, [pc, #28]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 80028d8:	f005 fefa 	bl	80086d0 <HAL_TIM_PWM_ConfigChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80028e2:	f000 f95d 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80028e6:	4803      	ldr	r0, [pc, #12]	@ (80028f4 <MX_TIM4_Init+0xc0>)
 80028e8:	f000 fef8 	bl	80036dc <HAL_TIM_MspPostInit>

}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	@ 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200002cc 	.word	0x200002cc
 80028f8:	40000800 	.word	0x40000800

080028fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <MX_USART1_UART_Init+0x4c>)
 8002902:	4a12      	ldr	r2, [pc, #72]	@ (800294c <MX_USART1_UART_Init+0x50>)
 8002904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <MX_USART1_UART_Init+0x4c>)
 8002908:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800290c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <MX_USART1_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <MX_USART1_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800291a:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <MX_USART1_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <MX_USART1_UART_Init+0x4c>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <MX_USART1_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <MX_USART1_UART_Init+0x4c>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002932:	4805      	ldr	r0, [pc, #20]	@ (8002948 <MX_USART1_UART_Init+0x4c>)
 8002934:	f006 fa3c 	bl	8008db0 <HAL_UART_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800293e:	f000 f92f 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000314 	.word	0x20000314
 800294c:	40013800 	.word	0x40013800

08002950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <MX_USART2_UART_Init+0x50>)
 8002958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 800295c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002976:	220c      	movs	r2, #12
 8002978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002986:	4805      	ldr	r0, [pc, #20]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002988:	f006 fa12 	bl	8008db0 <HAL_UART_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002992:	f000 f905 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	2000035c 	.word	0x2000035c
 80029a0:	40004400 	.word	0x40004400

080029a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4b18      	ldr	r3, [pc, #96]	@ (8002a1c <MX_GPIO_Init+0x78>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a17      	ldr	r2, [pc, #92]	@ (8002a1c <MX_GPIO_Init+0x78>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <MX_GPIO_Init+0x78>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d0:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <MX_GPIO_Init+0x78>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a11      	ldr	r2, [pc, #68]	@ (8002a1c <MX_GPIO_Init+0x78>)
 80029d6:	f043 0308 	orr.w	r3, r3, #8
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <MX_GPIO_Init+0x78>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|GPIO_PIN_15|IN2_Pin|IN3_Pin
 80029e8:	2200      	movs	r2, #0
 80029ea:	f248 013c 	movw	r1, #32828	@ 0x803c
 80029ee:	480c      	ldr	r0, [pc, #48]	@ (8002a20 <MX_GPIO_Init+0x7c>)
 80029f0:	f002 f8b8 	bl	8004b64 <HAL_GPIO_WritePin>
                          |IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IN1_Pin PB15 IN2_Pin IN3_Pin
                           IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|GPIO_PIN_15|IN2_Pin|IN3_Pin
 80029f4:	f248 033c 	movw	r3, #32828	@ 0x803c
 80029f8:	60bb      	str	r3, [r7, #8]
                          |IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2302      	movs	r3, #2
 8002a04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4804      	ldr	r0, [pc, #16]	@ (8002a20 <MX_GPIO_Init+0x7c>)
 8002a0e:	f001 ff25 	bl	800485c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a12:	bf00      	nop
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40010c00 	.word	0x40010c00

08002a24 <UART_Print>:

/* USER CODE BEGIN 4 */
void UART_Print(float value) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	@ 0x38
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	6078      	str	r0, [r7, #4]
    char buffer[32];
    int length = snprintf(buffer, sizeof(buffer), "Temperature: %.2fC\r\n", value);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7fd fcfb 	bl	8000428 <__aeabi_f2d>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	f107 000c 	add.w	r0, r7, #12
 8002a3a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a3e:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <UART_Print+0x40>)
 8002a40:	2120      	movs	r1, #32
 8002a42:	f008 fbcf 	bl	800b1e4 <sniprintf>
 8002a46:	62f8      	str	r0, [r7, #44]	@ 0x2c
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	f107 010c 	add.w	r1, r7, #12
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	4804      	ldr	r0, [pc, #16]	@ (8002a68 <UART_Print+0x44>)
 8002a56:	f006 f9fb 	bl	8008e50 <HAL_UART_Transmit>
}
 8002a5a:	bf00      	nop
 8002a5c:	3730      	adds	r7, #48	@ 0x30
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	0800e020 	.word	0x0800e020
 8002a68:	20000314 	.word	0x20000314

08002a6c <UART_PrintLDRs>:

void UART_PrintLDRs(LightSensor_Values* values) {
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b099      	sub	sp, #100	@ 0x64
 8002a70:	af04      	add	r7, sp, #16
 8002a72:	6078      	str	r0, [r7, #4]
    char buffer[64];
    int length = snprintf(buffer, sizeof(buffer),
        "LDRs - Front: %4u Right: %4u Back: %4u Left: %4u\r\n",
        values->front, values->right, values->back, values->left);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	881b      	ldrh	r3, [r3, #0]
    int length = snprintf(buffer, sizeof(buffer),
 8002a78:	461c      	mov	r4, r3
        values->front, values->right, values->back, values->left);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	885b      	ldrh	r3, [r3, #2]
    int length = snprintf(buffer, sizeof(buffer),
 8002a7e:	461a      	mov	r2, r3
        values->front, values->right, values->back, values->left);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	889b      	ldrh	r3, [r3, #4]
    int length = snprintf(buffer, sizeof(buffer),
 8002a84:	4619      	mov	r1, r3
        values->front, values->right, values->back, values->left);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	88db      	ldrh	r3, [r3, #6]
    int length = snprintf(buffer, sizeof(buffer),
 8002a8a:	f107 000c 	add.w	r0, r7, #12
 8002a8e:	9302      	str	r3, [sp, #8]
 8002a90:	9101      	str	r1, [sp, #4]
 8002a92:	9200      	str	r2, [sp, #0]
 8002a94:	4623      	mov	r3, r4
 8002a96:	4a09      	ldr	r2, [pc, #36]	@ (8002abc <UART_PrintLDRs+0x50>)
 8002a98:	2140      	movs	r1, #64	@ 0x40
 8002a9a:	f008 fba3 	bl	800b1e4 <sniprintf>
 8002a9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 8002aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	f107 010c 	add.w	r1, r7, #12
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	4804      	ldr	r0, [pc, #16]	@ (8002ac0 <UART_PrintLDRs+0x54>)
 8002aae:	f006 f9cf 	bl	8008e50 <HAL_UART_Transmit>
}
 8002ab2:	bf00      	nop
 8002ab4:	3754      	adds	r7, #84	@ 0x54
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	0800e038 	.word	0x0800e038
 8002ac0:	20000314 	.word	0x20000314

08002ac4 <HAL_UART_RxCpltCallback>:

/* UART RX callback for GPS module */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	@ (8002ae4 <HAL_UART_RxCpltCallback+0x20>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d102      	bne.n	8002adc <HAL_UART_RxCpltCallback+0x18>
    GPS_UART_RxCpltCallback(&hgps);
 8002ad6:	4804      	ldr	r0, [pc, #16]	@ (8002ae8 <HAL_UART_RxCpltCallback+0x24>)
 8002ad8:	f7fe fbbb 	bl	8001252 <GPS_UART_RxCpltCallback>
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40004400 	.word	0x40004400
 8002ae8:	200003d8 	.word	0x200003d8

08002aec <ReadAndDisplaySensors>:

void ReadAndDisplaySensors(void)
{
 8002aec:	b5b0      	push	{r4, r5, r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
    // Read and display temperature
    temperature = LM35_ReadTemperature(&hadc1);
 8002af2:	481c      	ldr	r0, [pc, #112]	@ (8002b64 <ReadAndDisplaySensors+0x78>)
 8002af4:	f7ff fc7a 	bl	80023ec <LM35_ReadTemperature>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a1b      	ldr	r2, [pc, #108]	@ (8002b68 <ReadAndDisplaySensors+0x7c>)
 8002afc:	6013      	str	r3, [r2, #0]
    UART_Print(temperature);
 8002afe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b68 <ReadAndDisplaySensors+0x7c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff8e 	bl	8002a24 <UART_Print>

    // Read and display all LDR values
    LightSensor_ReadAll(&hadc1, &ldr_values);
 8002b08:	4918      	ldr	r1, [pc, #96]	@ (8002b6c <ReadAndDisplaySensors+0x80>)
 8002b0a:	4816      	ldr	r0, [pc, #88]	@ (8002b64 <ReadAndDisplaySensors+0x78>)
 8002b0c:	f7ff fc18 	bl	8002340 <LightSensor_ReadAll>
    UART_PrintLDRs(&ldr_values);
 8002b10:	4816      	ldr	r0, [pc, #88]	@ (8002b6c <ReadAndDisplaySensors+0x80>)
 8002b12:	f7ff ffab 	bl	8002a6c <UART_PrintLDRs>

    // Read and display MPU6050 data
    if (MPU6050_ReadAllData(&hmpu) == MPU6050_OK) {
 8002b16:	4816      	ldr	r0, [pc, #88]	@ (8002b70 <ReadAndDisplaySensors+0x84>)
 8002b18:	f000 f9b4 	bl	8002e84 <MPU6050_ReadAllData>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <ReadAndDisplaySensors+0x40>
        MPU6050_Print(&hmpu, &huart1);
 8002b22:	4914      	ldr	r1, [pc, #80]	@ (8002b74 <ReadAndDisplaySensors+0x88>)
 8002b24:	4812      	ldr	r0, [pc, #72]	@ (8002b70 <ReadAndDisplaySensors+0x84>)
 8002b26:	f000 fb51 	bl	80031cc <MPU6050_Print>
    } else {
        char msg[] = "Failed to read MPU6050 data!\r\n";
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 8002b2a:	e017      	b.n	8002b5c <ReadAndDisplaySensors+0x70>
        char msg[] = "Failed to read MPU6050 data!\r\n";
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <ReadAndDisplaySensors+0x8c>)
 8002b2e:	463c      	mov	r4, r7
 8002b30:	461d      	mov	r5, r3
 8002b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b3a:	c407      	stmia	r4!, {r0, r1, r2}
 8002b3c:	8023      	strh	r3, [r4, #0]
 8002b3e:	3402      	adds	r4, #2
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002b44:	463b      	mov	r3, r7
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fb02 	bl	8000150 <strlen>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	4639      	mov	r1, r7
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	4807      	ldr	r0, [pc, #28]	@ (8002b74 <ReadAndDisplaySensors+0x88>)
 8002b58:	f006 f97a 	bl	8008e50 <HAL_UART_Transmit>
}
 8002b5c:	bf00      	nop
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	200001f4 	.word	0x200001f4
 8002b68:	200006f4 	.word	0x200006f4
 8002b6c:	200003a4 	.word	0x200003a4
 8002b70:	200006b8 	.word	0x200006b8
 8002b74:	20000314 	.word	0x20000314
 8002b78:	0800e06c 	.word	0x0800e06c

08002b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b8e:	f001 f82d 	bl	8003bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40012c00 	.word	0x40012c00

08002ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba4:	b672      	cpsid	i
}
 8002ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <Error_Handler+0x8>

08002bac <MPU6050_Init>:
 * @brief Initialize the MPU6050
 * @param hdev MPU6050 handle
 * @param hi2c I2C handle pointer
 * @return Status
 */
MPU6050_Status MPU6050_Init(MPU6050_Handle *hdev, I2C_HandleTypeDef *hi2c) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
    uint8_t check;
    MPU6050_Status status;

    /* Store I2C handle */
    hdev->hi2c = hi2c;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	601a      	str	r2, [r3, #0]
    hdev->address = MPU6050_ADDR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	22d0      	movs	r2, #208	@ 0xd0
 8002bc0:	711a      	strb	r2, [r3, #4]
    hdev->calibDelay = 50; // Default calibration delay 50ms
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2232      	movs	r2, #50	@ 0x32
 8002bc6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Initialize raw and scaled data structures */
    memset(&hdev->rawAccel, 0, sizeof(hdev->rawAccel));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3308      	adds	r3, #8
 8002bcc:	2206      	movs	r2, #6
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f008 fb9e 	bl	800b312 <memset>
    memset(&hdev->rawGyro, 0, sizeof(hdev->rawGyro));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	330e      	adds	r3, #14
 8002bda:	2206      	movs	r2, #6
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f008 fb97 	bl	800b312 <memset>
    memset(&hdev->scaledAccel, 0, sizeof(hdev->scaledAccel));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3314      	adds	r3, #20
 8002be8:	220c      	movs	r2, #12
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f008 fb90 	bl	800b312 <memset>
    memset(&hdev->scaledGyro, 0, sizeof(hdev->scaledGyro));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3320      	adds	r3, #32
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f008 fb89 	bl	800b312 <memset>
    hdev->temperature = 0.0f;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Check if device is responding */
    status = MPU6050_ReadRegister(hdev, MPU6050_REG_WHO_AM_I, &check);
 8002c08:	f107 030e 	add.w	r3, r7, #14
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2175      	movs	r1, #117	@ 0x75
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fbc3 	bl	800339c <MPU6050_ReadRegister>
 8002c16:	4603      	mov	r3, r0
 8002c18:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK || check != MPU6050_DEVICE_ID) {
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <MPU6050_Init+0x7a>
 8002c20:	7bbb      	ldrb	r3, [r7, #14]
 8002c22:	2b68      	cmp	r3, #104	@ 0x68
 8002c24:	d001      	beq.n	8002c2a <MPU6050_Init+0x7e>
        return MPU6050_NO_DEVICE;
 8002c26:	2304      	movs	r3, #4
 8002c28:	e039      	b.n	8002c9e <MPU6050_Init+0xf2>
    }

    /* Wake up the MPU6050 */
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_PWR_MGMT_1, 0x00);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	216b      	movs	r1, #107	@ 0x6b
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fbff 	bl	8003432 <MPU6050_WriteRegister>
 8002c34:	4603      	mov	r3, r0
 8002c36:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MPU6050_Init+0x96>
        return status;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	e02d      	b.n	8002c9e <MPU6050_Init+0xf2>
    }

    /* Set sample rate divider */
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_SMPLRT_DIV, 0x07); // 1kHz / (1 + 7) = 125Hz
 8002c42:	2207      	movs	r2, #7
 8002c44:	2119      	movs	r1, #25
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fbf3 	bl	8003432 <MPU6050_WriteRegister>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MPU6050_Init+0xae>
        return status;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	e021      	b.n	8002c9e <MPU6050_Init+0xf2>
    }

    /* Set DLPF bandwidth to 42Hz */
    status = MPU6050_SetDLPF(hdev, MPU6050_DLPF_BW_42);
 8002c5a:	2103      	movs	r1, #3
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f8ff 	bl	8002e60 <MPU6050_SetDLPF>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MPU6050_Init+0xc4>
        return status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	e016      	b.n	8002c9e <MPU6050_Init+0xf2>
    }

    /* Set gyroscope scale to ±500 °/s */
    status = MPU6050_SetGyroScale(hdev, MPU6050_GYRO_FS_500);
 8002c70:	2108      	movs	r1, #8
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f818 	bl	8002ca8 <MPU6050_SetGyroScale>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MPU6050_Init+0xda>
        return status;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	e00b      	b.n	8002c9e <MPU6050_Init+0xf2>
    }

    /* Set accelerometer scale to ±4g */
    status = MPU6050_SetAccelScale(hdev, MPU6050_ACCEL_FS_4G);
 8002c86:	2108      	movs	r1, #8
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f87d 	bl	8002d88 <MPU6050_SetAccelScale>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MPU6050_Init+0xf0>
        return status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	e000      	b.n	8002c9e <MPU6050_Init+0xf2>
    }

    return MPU6050_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <MPU6050_SetGyroScale>:
 * @brief Set gyroscope full scale range
 * @param hdev MPU6050 handle
 * @param scale Scale selection (MPU6050_GYRO_FS_xxx)
 * @return Status
 */
MPU6050_Status MPU6050_SetGyroScale(MPU6050_Handle *hdev, uint8_t scale) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
    MPU6050_Status status;

    /* Set gyroscope scale */
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_GYRO_CONFIG, scale);
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	211b      	movs	r1, #27
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fbb9 	bl	8003432 <MPU6050_WriteRegister>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MPU6050_SetGyroScale+0x26>
        return status;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	e04f      	b.n	8002d6e <MPU6050_SetGyroScale+0xc6>
    }

    /* Store current scale selection */
    hdev->gyroScale = scale;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	715a      	strb	r2, [r3, #5]

    /* Calculate scale factor based on selection */
    switch (scale) {
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	2b18      	cmp	r3, #24
 8002cd8:	d844      	bhi.n	8002d64 <MPU6050_SetGyroScale+0xbc>
 8002cda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <MPU6050_SetGyroScale+0x38>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002d45 	.word	0x08002d45
 8002ce4:	08002d65 	.word	0x08002d65
 8002ce8:	08002d65 	.word	0x08002d65
 8002cec:	08002d65 	.word	0x08002d65
 8002cf0:	08002d65 	.word	0x08002d65
 8002cf4:	08002d65 	.word	0x08002d65
 8002cf8:	08002d65 	.word	0x08002d65
 8002cfc:	08002d65 	.word	0x08002d65
 8002d00:	08002d4d 	.word	0x08002d4d
 8002d04:	08002d65 	.word	0x08002d65
 8002d08:	08002d65 	.word	0x08002d65
 8002d0c:	08002d65 	.word	0x08002d65
 8002d10:	08002d65 	.word	0x08002d65
 8002d14:	08002d65 	.word	0x08002d65
 8002d18:	08002d65 	.word	0x08002d65
 8002d1c:	08002d65 	.word	0x08002d65
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002d65 	.word	0x08002d65
 8002d28:	08002d65 	.word	0x08002d65
 8002d2c:	08002d65 	.word	0x08002d65
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002d65 	.word	0x08002d65
 8002d38:	08002d65 	.word	0x08002d65
 8002d3c:	08002d65 	.word	0x08002d65
 8002d40:	08002d5d 	.word	0x08002d5d
        case MPU6050_GYRO_FS_250:
            hdev->gyroScaleFactor = 131.0f; // 131 LSB/(°/s)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a0c      	ldr	r2, [pc, #48]	@ (8002d78 <MPU6050_SetGyroScale+0xd0>)
 8002d48:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002d4a:	e00f      	b.n	8002d6c <MPU6050_SetGyroScale+0xc4>
        case MPU6050_GYRO_FS_500:
            hdev->gyroScaleFactor = 65.5f;  // 65.5 LSB/(°/s)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d7c <MPU6050_SetGyroScale+0xd4>)
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002d52:	e00b      	b.n	8002d6c <MPU6050_SetGyroScale+0xc4>
        case MPU6050_GYRO_FS_1000:
            hdev->gyroScaleFactor = 32.8f;  // 32.8 LSB/(°/s)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <MPU6050_SetGyroScale+0xd8>)
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002d5a:	e007      	b.n	8002d6c <MPU6050_SetGyroScale+0xc4>
        case MPU6050_GYRO_FS_2000:
            hdev->gyroScaleFactor = 16.4f;  // 16.4 LSB/(°/s)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <MPU6050_SetGyroScale+0xdc>)
 8002d60:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002d62:	e003      	b.n	8002d6c <MPU6050_SetGyroScale+0xc4>
        default:
            hdev->gyroScaleFactor = 65.5f;  // Default to ±500 °/s
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a05      	ldr	r2, [pc, #20]	@ (8002d7c <MPU6050_SetGyroScale+0xd4>)
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002d6a:	bf00      	nop
    }

    return MPU6050_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	43030000 	.word	0x43030000
 8002d7c:	42830000 	.word	0x42830000
 8002d80:	42033333 	.word	0x42033333
 8002d84:	41833333 	.word	0x41833333

08002d88 <MPU6050_SetAccelScale>:
 * @brief Set accelerometer full scale range
 * @param hdev MPU6050 handle
 * @param scale Scale selection (MPU6050_ACCEL_FS_xxx)
 * @return Status
 */
MPU6050_Status MPU6050_SetAccelScale(MPU6050_Handle *hdev, uint8_t scale) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
    MPU6050_Status status;

    /* Set accelerometer scale */
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_ACCEL_CONFIG, scale);
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	461a      	mov	r2, r3
 8002d98:	211c      	movs	r1, #28
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fb49 	bl	8003432 <MPU6050_WriteRegister>
 8002da0:	4603      	mov	r3, r0
 8002da2:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MPU6050_SetAccelScale+0x26>
        return status;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	e054      	b.n	8002e58 <MPU6050_SetAccelScale+0xd0>
    }

    /* Store current scale selection */
    hdev->accelScale = scale;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	719a      	strb	r2, [r3, #6]

    /* Calculate scale factor based on selection */
    switch (scale) {
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	2b18      	cmp	r3, #24
 8002db8:	d848      	bhi.n	8002e4c <MPU6050_SetAccelScale+0xc4>
 8002dba:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc0 <MPU6050_SetAccelScale+0x38>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002e25 	.word	0x08002e25
 8002dc4:	08002e4d 	.word	0x08002e4d
 8002dc8:	08002e4d 	.word	0x08002e4d
 8002dcc:	08002e4d 	.word	0x08002e4d
 8002dd0:	08002e4d 	.word	0x08002e4d
 8002dd4:	08002e4d 	.word	0x08002e4d
 8002dd8:	08002e4d 	.word	0x08002e4d
 8002ddc:	08002e4d 	.word	0x08002e4d
 8002de0:	08002e2f 	.word	0x08002e2f
 8002de4:	08002e4d 	.word	0x08002e4d
 8002de8:	08002e4d 	.word	0x08002e4d
 8002dec:	08002e4d 	.word	0x08002e4d
 8002df0:	08002e4d 	.word	0x08002e4d
 8002df4:	08002e4d 	.word	0x08002e4d
 8002df8:	08002e4d 	.word	0x08002e4d
 8002dfc:	08002e4d 	.word	0x08002e4d
 8002e00:	08002e39 	.word	0x08002e39
 8002e04:	08002e4d 	.word	0x08002e4d
 8002e08:	08002e4d 	.word	0x08002e4d
 8002e0c:	08002e4d 	.word	0x08002e4d
 8002e10:	08002e4d 	.word	0x08002e4d
 8002e14:	08002e4d 	.word	0x08002e4d
 8002e18:	08002e4d 	.word	0x08002e4d
 8002e1c:	08002e4d 	.word	0x08002e4d
 8002e20:	08002e43 	.word	0x08002e43
        case MPU6050_ACCEL_FS_2G:
            hdev->accelScaleFactor = 16384.0f; // 16384 LSB/g
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8002e2a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002e2c:	e013      	b.n	8002e56 <MPU6050_SetAccelScale+0xce>
        case MPU6050_ACCEL_FS_4G:
            hdev->accelScaleFactor = 8192.0f;  // 8192 LSB/g
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8002e34:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002e36:	e00e      	b.n	8002e56 <MPU6050_SetAccelScale+0xce>
        case MPU6050_ACCEL_FS_8G:
            hdev->accelScaleFactor = 4096.0f;  // 4096 LSB/g
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8002e3e:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002e40:	e009      	b.n	8002e56 <MPU6050_SetAccelScale+0xce>
        case MPU6050_ACCEL_FS_16G:
            hdev->accelScaleFactor = 2048.0f;  // 2048 LSB/g
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8002e48:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002e4a:	e004      	b.n	8002e56 <MPU6050_SetAccelScale+0xce>
        default:
            hdev->accelScaleFactor = 8192.0f;  // Default to ±4g
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8002e52:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8002e54:	bf00      	nop
    }

    return MPU6050_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <MPU6050_SetDLPF>:
 * @brief Set digital low pass filter bandwidth
 * @param hdev MPU6050 handle
 * @param bandwidth Bandwidth selection (MPU6050_DLPF_BW_xxx)
 * @return Status
 */
MPU6050_Status MPU6050_SetDLPF(MPU6050_Handle *hdev, uint8_t bandwidth) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
    return MPU6050_WriteRegister(hdev, MPU6050_REG_CONFIG, bandwidth);
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	211a      	movs	r1, #26
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fadd 	bl	8003432 <MPU6050_WriteRegister>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <MPU6050_ReadAllData>:
/**
 * @brief Read all data from MPU6050 (accelerometer, gyroscope, temperature)
 * @param hdev MPU6050 handle
 * @return Status
 */
MPU6050_Status MPU6050_ReadAllData(MPU6050_Handle *hdev) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
    uint8_t data[14];
    MPU6050_Status status;

    /* Read all sensor data starting from ACCEL_XOUT_H (14 bytes total) */
    status = MPU6050_ReadRegisters(hdev, MPU6050_REG_ACCEL_XOUT_H, data, 14);
 8002e8c:	f107 020c 	add.w	r2, r7, #12
 8002e90:	230e      	movs	r3, #14
 8002e92:	213b      	movs	r1, #59	@ 0x3b
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 faa4 	bl	80033e2 <MPU6050_ReadRegisters>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	77fb      	strb	r3, [r7, #31]
    if (status != MPU6050_OK) {
 8002e9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MPU6050_ReadAllData+0x24>
        return status;
 8002ea4:	7ffb      	ldrb	r3, [r7, #31]
 8002ea6:	e0b6      	b.n	8003016 <MPU6050_ReadAllData+0x192>
    }

    /* Parse accelerometer data */
    hdev->rawAccel.x = (int16_t)((data[0] << 8) | data[1]);
 8002ea8:	7b3b      	ldrb	r3, [r7, #12]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	b21a      	sxth	r2, r3
 8002eae:	7b7b      	ldrb	r3, [r7, #13]
 8002eb0:	b21b      	sxth	r3, r3
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	b21a      	sxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	811a      	strh	r2, [r3, #8]
    hdev->rawAccel.y = (int16_t)((data[2] << 8) | data[3]);
 8002eba:	7bbb      	ldrb	r3, [r7, #14]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	b21a      	sxth	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	815a      	strh	r2, [r3, #10]
    hdev->rawAccel.z = (int16_t)((data[4] << 8) | data[5]);
 8002ecc:	7c3b      	ldrb	r3, [r7, #16]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	b21a      	sxth	r2, r3
 8002ed2:	7c7b      	ldrb	r3, [r7, #17]
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	b21a      	sxth	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	819a      	strh	r2, [r3, #12]

    /* Parse temperature data */
    int16_t rawTemp = (int16_t)((data[6] << 8) | data[7]);
 8002ede:	7cbb      	ldrb	r3, [r7, #18]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	b21a      	sxth	r2, r3
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	83bb      	strh	r3, [r7, #28]
    hdev->temperature = (float)rawTemp / 340.0f + 36.53f; // MPU6050 formula from datasheet
 8002eec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fea3 	bl	8000c3c <__aeabi_i2f>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4949      	ldr	r1, [pc, #292]	@ (8003020 <MPU6050_ReadAllData+0x19c>)
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd ffa6 	bl	8000e4c <__aeabi_fdiv>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4948      	ldr	r1, [pc, #288]	@ (8003024 <MPU6050_ReadAllData+0x1a0>)
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fde5 	bl	8000ad4 <__addsf3>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Parse gyroscope data */
    hdev->rawGyro.x = (int16_t)((data[8] << 8) | data[9]);
 8002f12:	7d3b      	ldrb	r3, [r7, #20]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	b21a      	sxth	r2, r3
 8002f18:	7d7b      	ldrb	r3, [r7, #21]
 8002f1a:	b21b      	sxth	r3, r3
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	b21a      	sxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	81da      	strh	r2, [r3, #14]
    hdev->rawGyro.y = (int16_t)((data[10] << 8) | data[11]);
 8002f24:	7dbb      	ldrb	r3, [r7, #22]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	b21b      	sxth	r3, r3
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	b21a      	sxth	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	821a      	strh	r2, [r3, #16]
    hdev->rawGyro.z = (int16_t)((data[12] << 8) | data[13]);
 8002f36:	7e3b      	ldrb	r3, [r7, #24]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	b21a      	sxth	r2, r3
 8002f3c:	7e7b      	ldrb	r3, [r7, #25]
 8002f3e:	b21b      	sxth	r3, r3
 8002f40:	4313      	orrs	r3, r2
 8002f42:	b21a      	sxth	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	825a      	strh	r2, [r3, #18]

    /* Convert to scaled values */
    hdev->scaledAccel.x = (float)hdev->rawAccel.x / hdev->accelScaleFactor;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd fe74 	bl	8000c3c <__aeabi_i2f>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f7fd ff75 	bl	8000e4c <__aeabi_fdiv>
 8002f62:	4603      	mov	r3, r0
 8002f64:	461a      	mov	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	615a      	str	r2, [r3, #20]
    hdev->scaledAccel.y = (float)hdev->rawAccel.y / hdev->accelScaleFactor;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fe63 	bl	8000c3c <__aeabi_i2f>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f7fd ff64 	bl	8000e4c <__aeabi_fdiv>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
    hdev->scaledAccel.z = (float)hdev->rawAccel.z / hdev->accelScaleFactor;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fe52 	bl	8000c3c <__aeabi_i2f>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f7fd ff53 	bl	8000e4c <__aeabi_fdiv>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	61da      	str	r2, [r3, #28]

    hdev->scaledGyro.x = (float)hdev->rawGyro.x / hdev->gyroScaleFactor;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fe41 	bl	8000c3c <__aeabi_i2f>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7fd ff42 	bl	8000e4c <__aeabi_fdiv>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	621a      	str	r2, [r3, #32]
    hdev->scaledGyro.y = (float)hdev->rawGyro.y / hdev->gyroScaleFactor;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fe30 	bl	8000c3c <__aeabi_i2f>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f7fd ff31 	bl	8000e4c <__aeabi_fdiv>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdev->scaledGyro.z = (float)hdev->rawGyro.z / hdev->gyroScaleFactor;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fe1f 	bl	8000c3c <__aeabi_i2f>
 8002ffe:	4602      	mov	r2, r0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f7fd ff20 	bl	8000e4c <__aeabi_fdiv>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	@ 0x28

    return MPU6050_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	43aa0000 	.word	0x43aa0000
 8003024:	42121eb8 	.word	0x42121eb8

08003028 <MPU6050_ReadGyroscopeData>:
/**
 * @brief Read gyroscope data only
 * @param hdev MPU6050 handle
 * @return Status
 */
MPU6050_Status MPU6050_ReadGyroscopeData(MPU6050_Handle *hdev) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    MPU6050_Status status;

    /* Read gyroscope data (6 bytes total) */
    status = MPU6050_ReadRegisters(hdev, MPU6050_REG_GYRO_XOUT_H, data, 6);
 8003030:	f107 0208 	add.w	r2, r7, #8
 8003034:	2306      	movs	r3, #6
 8003036:	2143      	movs	r1, #67	@ 0x43
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f9d2 	bl	80033e2 <MPU6050_ReadRegisters>
 800303e:	4603      	mov	r3, r0
 8003040:	73fb      	strb	r3, [r7, #15]
    if (status != MPU6050_OK) {
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MPU6050_ReadGyroscopeData+0x24>
        return status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	e04e      	b.n	80030ea <MPU6050_ReadGyroscopeData+0xc2>
    }

    /* Parse data */
    hdev->rawGyro.x = (int16_t)((data[0] << 8) | data[1]);
 800304c:	7a3b      	ldrb	r3, [r7, #8]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	b21a      	sxth	r2, r3
 8003052:	7a7b      	ldrb	r3, [r7, #9]
 8003054:	b21b      	sxth	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	b21a      	sxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	81da      	strh	r2, [r3, #14]
    hdev->rawGyro.y = (int16_t)((data[2] << 8) | data[3]);
 800305e:	7abb      	ldrb	r3, [r7, #10]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	b21a      	sxth	r2, r3
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	b21b      	sxth	r3, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	b21a      	sxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	821a      	strh	r2, [r3, #16]
    hdev->rawGyro.z = (int16_t)((data[4] << 8) | data[5]);
 8003070:	7b3b      	ldrb	r3, [r7, #12]
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	b21a      	sxth	r2, r3
 8003076:	7b7b      	ldrb	r3, [r7, #13]
 8003078:	b21b      	sxth	r3, r3
 800307a:	4313      	orrs	r3, r2
 800307c:	b21a      	sxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	825a      	strh	r2, [r3, #18]

    /* Convert to scaled values */
    hdev->scaledGyro.x = (float)hdev->rawGyro.x / hdev->gyroScaleFactor;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fdd7 	bl	8000c3c <__aeabi_i2f>
 800308e:	4602      	mov	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f7fd fed8 	bl	8000e4c <__aeabi_fdiv>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	621a      	str	r2, [r3, #32]
    hdev->scaledGyro.y = (float)hdev->rawGyro.y / hdev->gyroScaleFactor;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd fdc6 	bl	8000c3c <__aeabi_i2f>
 80030b0:	4602      	mov	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7fd fec7 	bl	8000e4c <__aeabi_fdiv>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdev->scaledGyro.z = (float)hdev->rawGyro.z / hdev->gyroScaleFactor;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fdb5 	bl	8000c3c <__aeabi_i2f>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f7fd feb6 	bl	8000e4c <__aeabi_fdiv>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28

    return MPU6050_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <MPU6050_Calibrate>:
 * @brief Calibrate the MPU6050 by calculating gyro offset
 * @param hdev MPU6050 handle
 * @param numSamples Number of samples to use for calibration
 * @return Status
 */
MPU6050_Status MPU6050_Calibrate(MPU6050_Handle *hdev, uint16_t numSamples) {
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b088      	sub	sp, #32
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	807b      	strh	r3, [r7, #2]
    int32_t gyroXSum = 0, gyroYSum = 0, gyroZSum = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
    MPU6050_Status status;

    /* Collect multiple samples for better accuracy */
    for (uint16_t i = 0; i < numSamples; i++) {
 800310a:	2300      	movs	r3, #0
 800310c:	827b      	strh	r3, [r7, #18]
 800310e:	e026      	b.n	800315e <MPU6050_Calibrate+0x6c>
        status = MPU6050_ReadGyroscopeData(hdev);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff89 	bl	8003028 <MPU6050_ReadGyroscopeData>
 8003116:	4603      	mov	r3, r0
 8003118:	72fb      	strb	r3, [r7, #11]
        if (status != MPU6050_OK) {
 800311a:	7afb      	ldrb	r3, [r7, #11]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MPU6050_Calibrate+0x32>
            return status;
 8003120:	7afb      	ldrb	r3, [r7, #11]
 8003122:	e04e      	b.n	80031c2 <MPU6050_Calibrate+0xd0>
        }

        gyroXSum += hdev->rawGyro.x;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800312a:	461a      	mov	r2, r3
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	4413      	add	r3, r2
 8003130:	61fb      	str	r3, [r7, #28]
        gyroYSum += hdev->rawGyro.y;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003138:	461a      	mov	r2, r3
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        gyroZSum += hdev->rawGyro.z;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003146:	461a      	mov	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	4413      	add	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

        /* Short delay between measurements */
        HAL_Delay(hdev->calibDelay);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fd66 	bl	8003c24 <HAL_Delay>
    for (uint16_t i = 0; i < numSamples; i++) {
 8003158:	8a7b      	ldrh	r3, [r7, #18]
 800315a:	3301      	adds	r3, #1
 800315c:	827b      	strh	r3, [r7, #18]
 800315e:	8a7a      	ldrh	r2, [r7, #18]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3d4      	bcc.n	8003110 <MPU6050_Calibrate+0x1e>
    }

    /* Calculate average offsets */
    int16_t gyroXOffset = gyroXSum / numSamples;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	fb92 f3f3 	sdiv	r3, r2, r3
 800316e:	823b      	strh	r3, [r7, #16]
    int16_t gyroYOffset = gyroYSum / numSamples;
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	fb92 f3f3 	sdiv	r3, r2, r3
 8003178:	81fb      	strh	r3, [r7, #14]
    int16_t gyroZOffset = gyroZSum / numSamples;
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003182:	81bb      	strh	r3, [r7, #12]

    /* Apply offsets to subsequent readings */
    hdev->rawGyro.x -= gyroXOffset;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800318a:	b29a      	uxth	r2, r3
 800318c:	8a3b      	ldrh	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	b29b      	uxth	r3, r3
 8003192:	b21a      	sxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	81da      	strh	r2, [r3, #14]
    hdev->rawGyro.y -= gyroYOffset;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	89fb      	ldrh	r3, [r7, #14]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	821a      	strh	r2, [r3, #16]
    hdev->rawGyro.z -= gyroZOffset;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	89bb      	ldrh	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b21a      	sxth	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	825a      	strh	r2, [r3, #18]

    return MPU6050_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <MPU6050_Print>:
/**
 * @brief Print MPU6050 data to UART
 * @param hdev MPU6050 handle
 * @param huart UART handle pointer
 */
void MPU6050_Print(MPU6050_Handle *hdev, UART_HandleTypeDef *huart) {
 80031cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031d0:	b0c6      	sub	sp, #280	@ 0x118
 80031d2:	af04      	add	r7, sp, #16
 80031d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031dc:	6018      	str	r0, [r3, #0]
 80031de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80031e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031e6:	6019      	str	r1, [r3, #0]
    char buffer[256];

    sprintf(buffer, "\r\n--------- MPU6050 DATA ---------\r\n");
 80031e8:	f107 0308 	add.w	r3, r7, #8
 80031ec:	4966      	ldr	r1, [pc, #408]	@ (8003388 <MPU6050_Print+0x1bc>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f008 f82c 	bl	800b24c <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 80031f4:	f107 0308 	add.w	r3, r7, #8
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fc ffa9 	bl	8000150 <strlen>
 80031fe:	4603      	mov	r3, r0
 8003200:	b29a      	uxth	r2, r3
 8003202:	f107 0108 	add.w	r1, r7, #8
 8003206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800320a:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 800320e:	2364      	movs	r3, #100	@ 0x64
 8003210:	6800      	ldr	r0, [r0, #0]
 8003212:	f005 fe1d 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "Accel (g): X=%.3f, Y=%.3f, Z=%.3f\r\n",
            hdev->scaledAccel.x, hdev->scaledAccel.y, hdev->scaledAccel.z);
 8003216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800321a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
    sprintf(buffer, "Accel (g): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd f900 	bl	8000428 <__aeabi_f2d>
 8003228:	4680      	mov	r8, r0
 800322a:	4689      	mov	r9, r1
            hdev->scaledAccel.x, hdev->scaledAccel.y, hdev->scaledAccel.z);
 800322c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003230:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
    sprintf(buffer, "Accel (g): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd f8f5 	bl	8000428 <__aeabi_f2d>
 800323e:	4604      	mov	r4, r0
 8003240:	460d      	mov	r5, r1
            hdev->scaledAccel.x, hdev->scaledAccel.y, hdev->scaledAccel.z);
 8003242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
    sprintf(buffer, "Accel (g): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f8ea 	bl	8000428 <__aeabi_f2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	f107 0008 	add.w	r0, r7, #8
 800325c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003260:	e9cd 4500 	strd	r4, r5, [sp]
 8003264:	4642      	mov	r2, r8
 8003266:	464b      	mov	r3, r9
 8003268:	4948      	ldr	r1, [pc, #288]	@ (800338c <MPU6050_Print+0x1c0>)
 800326a:	f007 ffef 	bl	800b24c <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 800326e:	f107 0308 	add.w	r3, r7, #8
 8003272:	4618      	mov	r0, r3
 8003274:	f7fc ff6c 	bl	8000150 <strlen>
 8003278:	4603      	mov	r3, r0
 800327a:	b29a      	uxth	r2, r3
 800327c:	f107 0108 	add.w	r1, r7, #8
 8003280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003284:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8003288:	2364      	movs	r3, #100	@ 0x64
 800328a:	6800      	ldr	r0, [r0, #0]
 800328c:	f005 fde0 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "Gyro (deg/s): X=%.3f, Y=%.3f, Z=%.3f\r\n",
            hdev->scaledGyro.x, hdev->scaledGyro.y, hdev->scaledGyro.z);
 8003290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6a1b      	ldr	r3, [r3, #32]
    sprintf(buffer, "Gyro (deg/s): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f8c3 	bl	8000428 <__aeabi_f2d>
 80032a2:	4680      	mov	r8, r0
 80032a4:	4689      	mov	r9, r1
            hdev->scaledGyro.x, hdev->scaledGyro.y, hdev->scaledGyro.z);
 80032a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    sprintf(buffer, "Gyro (deg/s): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f8b8 	bl	8000428 <__aeabi_f2d>
 80032b8:	4604      	mov	r4, r0
 80032ba:	460d      	mov	r5, r1
            hdev->scaledGyro.x, hdev->scaledGyro.y, hdev->scaledGyro.z);
 80032bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    sprintf(buffer, "Gyro (deg/s): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f8ad 	bl	8000428 <__aeabi_f2d>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	f107 0008 	add.w	r0, r7, #8
 80032d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032da:	e9cd 4500 	strd	r4, r5, [sp]
 80032de:	4642      	mov	r2, r8
 80032e0:	464b      	mov	r3, r9
 80032e2:	492b      	ldr	r1, [pc, #172]	@ (8003390 <MPU6050_Print+0x1c4>)
 80032e4:	f007 ffb2 	bl	800b24c <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 80032e8:	f107 0308 	add.w	r3, r7, #8
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fc ff2f 	bl	8000150 <strlen>
 80032f2:	4603      	mov	r3, r0
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	f107 0108 	add.w	r1, r7, #8
 80032fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80032fe:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8003302:	2364      	movs	r3, #100	@ 0x64
 8003304:	6800      	ldr	r0, [r0, #0]
 8003306:	f005 fda3 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "Temperature: %.2f C\r\n", hdev->temperature);
 800330a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800330e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f886 	bl	8000428 <__aeabi_f2d>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	f107 0008 	add.w	r0, r7, #8
 8003324:	491b      	ldr	r1, [pc, #108]	@ (8003394 <MPU6050_Print+0x1c8>)
 8003326:	f007 ff91 	bl	800b24c <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 800332a:	f107 0308 	add.w	r3, r7, #8
 800332e:	4618      	mov	r0, r3
 8003330:	f7fc ff0e 	bl	8000150 <strlen>
 8003334:	4603      	mov	r3, r0
 8003336:	b29a      	uxth	r2, r3
 8003338:	f107 0108 	add.w	r1, r7, #8
 800333c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003340:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8003344:	2364      	movs	r3, #100	@ 0x64
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	f005 fd82 	bl	8008e50 <HAL_UART_Transmit>

    sprintf(buffer, "--------------------------------\r\n");
 800334c:	f107 0308 	add.w	r3, r7, #8
 8003350:	4911      	ldr	r1, [pc, #68]	@ (8003398 <MPU6050_Print+0x1cc>)
 8003352:	4618      	mov	r0, r3
 8003354:	f007 ff7a 	bl	800b24c <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	4618      	mov	r0, r3
 800335e:	f7fc fef7 	bl	8000150 <strlen>
 8003362:	4603      	mov	r3, r0
 8003364:	b29a      	uxth	r2, r3
 8003366:	f107 0108 	add.w	r1, r7, #8
 800336a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800336e:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8003372:	2364      	movs	r3, #100	@ 0x64
 8003374:	6800      	ldr	r0, [r0, #0]
 8003376:	f005 fd6b 	bl	8008e50 <HAL_UART_Transmit>
}
 800337a:	bf00      	nop
 800337c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003386:	bf00      	nop
 8003388:	0800e13c 	.word	0x0800e13c
 800338c:	0800e164 	.word	0x0800e164
 8003390:	0800e188 	.word	0x0800e188
 8003394:	0800e1b0 	.word	0x0800e1b0
 8003398:	0800e1c8 	.word	0x0800e1c8

0800339c <MPU6050_ReadRegister>:
 * @param hdev MPU6050 handle
 * @param reg Register address
 * @param data Pointer to data buffer
 * @return Status
 */
static MPU6050_Status MPU6050_ReadRegister(MPU6050_Handle *hdev, uint8_t reg, uint8_t *data) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	@ 0x28
 80033a0:	af04      	add	r7, sp, #16
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	460b      	mov	r3, r1
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	791b      	ldrb	r3, [r3, #4]
 80033b2:	4619      	mov	r1, r3
 80033b4:	7afb      	ldrb	r3, [r7, #11]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	2364      	movs	r3, #100	@ 0x64
 80033ba:	9302      	str	r3, [sp, #8]
 80033bc:	2301      	movs	r3, #1
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2301      	movs	r3, #1
 80033c6:	f001 fe51 	bl	800506c <HAL_I2C_Mem_Read>
 80033ca:	4603      	mov	r3, r0
 80033cc:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <MPU6050_ReadRegisters>:
 * @param reg Starting register address
 * @param data Pointer to data buffer
 * @param length Number of bytes to read
 * @return Status
 */
static MPU6050_Status MPU6050_ReadRegisters(MPU6050_Handle *hdev, uint8_t reg, uint8_t *data, uint8_t length) {
 80033e2:	b590      	push	{r4, r7, lr}
 80033e4:	b08b      	sub	sp, #44	@ 0x2c
 80033e6:	af04      	add	r7, sp, #16
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	461a      	mov	r2, r3
 80033ee:	460b      	mov	r3, r1
 80033f0:	72fb      	strb	r3, [r7, #11]
 80033f2:	4613      	mov	r3, r2
 80033f4:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, data, length, 100);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	791b      	ldrb	r3, [r3, #4]
 80033fe:	461c      	mov	r4, r3
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	b29a      	uxth	r2, r3
 8003404:	7abb      	ldrb	r3, [r7, #10]
 8003406:	b29b      	uxth	r3, r3
 8003408:	2164      	movs	r1, #100	@ 0x64
 800340a:	9102      	str	r1, [sp, #8]
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2301      	movs	r3, #1
 8003414:	4621      	mov	r1, r4
 8003416:	f001 fe29 	bl	800506c <HAL_I2C_Mem_Read>
 800341a:	4603      	mov	r3, r0
 800341c:	75fb      	strb	r3, [r7, #23]

    return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
}
 800342a:	4618      	mov	r0, r3
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	bd90      	pop	{r4, r7, pc}

08003432 <MPU6050_WriteRegister>:
 * @param hdev MPU6050 handle
 * @param reg Register address
 * @param data Data to write
 * @return Status
 */
static MPU6050_Status MPU6050_WriteRegister(MPU6050_Handle *hdev, uint8_t reg, uint8_t data) {
 8003432:	b580      	push	{r7, lr}
 8003434:	b088      	sub	sp, #32
 8003436:	af04      	add	r7, sp, #16
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	70fb      	strb	r3, [r7, #3]
 800343e:	4613      	mov	r3, r2
 8003440:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Write(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	791b      	ldrb	r3, [r3, #4]
 800344a:	4619      	mov	r1, r3
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	b29a      	uxth	r2, r3
 8003450:	2364      	movs	r3, #100	@ 0x64
 8003452:	9302      	str	r3, [sp, #8]
 8003454:	2301      	movs	r3, #1
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	1cbb      	adds	r3, r7, #2
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2301      	movs	r3, #1
 800345e:	f001 fd0b 	bl	8004e78 <HAL_I2C_Mem_Write>
 8003462:	4603      	mov	r3, r0
 8003464:	73fb      	strb	r3, [r7, #15]

    return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003482:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <HAL_MspInit+0x5c>)
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	4a14      	ldr	r2, [pc, #80]	@ (80034d8 <HAL_MspInit+0x5c>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6193      	str	r3, [r2, #24]
 800348e:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <HAL_MspInit+0x5c>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b0f      	ldr	r3, [pc, #60]	@ (80034d8 <HAL_MspInit+0x5c>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4a0e      	ldr	r2, [pc, #56]	@ (80034d8 <HAL_MspInit+0x5c>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a4:	61d3      	str	r3, [r2, #28]
 80034a6:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <HAL_MspInit+0x5c>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
 80034b2:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <HAL_MspInit+0x60>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_MspInit+0x60>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6053      	str	r3, [r2, #4]
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();

  /* USER CODE BEGIN MspInit 1 */

 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40010000 	.word	0x40010000

080034e0 <HAL_ADC_MspInit>:
/**
* @brief ADC MSP Initialization
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	@ 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 80034e8:	f107 0318 	add.w	r3, r7, #24
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
{
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <HAL_ADC_MspInit+0x98>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d137      	bne.n	8003570 <HAL_ADC_MspInit+0x90>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
 8003500:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <HAL_ADC_MspInit+0x9c>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_ADC_MspInit+0x9c>)
 8003506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800350a:	6193      	str	r3, [r2, #24]
 800350c:	4b1b      	ldr	r3, [pc, #108]	@ (800357c <HAL_ADC_MspInit+0x9c>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003518:	4b18      	ldr	r3, [pc, #96]	@ (800357c <HAL_ADC_MspInit+0x9c>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	4a17      	ldr	r2, [pc, #92]	@ (800357c <HAL_ADC_MspInit+0x9c>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6193      	str	r3, [r2, #24]
 8003524:	4b15      	ldr	r3, [pc, #84]	@ (800357c <HAL_ADC_MspInit+0x9c>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	693b      	ldr	r3, [r7, #16]

 8003530:	4b12      	ldr	r3, [pc, #72]	@ (800357c <HAL_ADC_MspInit+0x9c>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	4a11      	ldr	r2, [pc, #68]	@ (800357c <HAL_ADC_MspInit+0x9c>)
 8003536:	f043 0308 	orr.w	r3, r3, #8
 800353a:	6193      	str	r3, [r2, #24]
 800353c:	4b0f      	ldr	r3, [pc, #60]	@ (800357c <HAL_ADC_MspInit+0x9c>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
 8003548:	23f0      	movs	r3, #240	@ 0xf0
 800354a:	61bb      	str	r3, [r7, #24]
    */
 800354c:	2303      	movs	r3, #3
 800354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = LDR_F_Pin|LDR_R_Pin|LDR_B_Pin|LDR_L_Pin;
 8003550:	f107 0318 	add.w	r3, r7, #24
 8003554:	4619      	mov	r1, r3
 8003556:	480a      	ldr	r0, [pc, #40]	@ (8003580 <HAL_ADC_MspInit+0xa0>)
 8003558:	f001 f980 	bl	800485c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355c:	2301      	movs	r3, #1
 800355e:	61bb      	str	r3, [r7, #24]

 8003560:	2303      	movs	r3, #3
 8003562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = LM35_Pin;
 8003564:	f107 0318 	add.w	r3, r7, #24
 8003568:	4619      	mov	r1, r3
 800356a:	4806      	ldr	r0, [pc, #24]	@ (8003584 <HAL_ADC_MspInit+0xa4>)
 800356c:	f001 f976 	bl	800485c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */

  }
 8003570:	bf00      	nop
 8003572:	3728      	adds	r7, #40	@ 0x28
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40012400 	.word	0x40012400
 800357c:	40021000 	.word	0x40021000
 8003580:	40010800 	.word	0x40010800
 8003584:	40010c00 	.word	0x40010c00

08003588 <HAL_I2C_MspInit>:
/**
* @brief I2C MSP Initialization
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	@ 0x30
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
 8003590:	f107 031c 	add.w	r3, r7, #28
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
{
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3a      	ldr	r2, [pc, #232]	@ (800368c <HAL_I2C_MspInit+0x104>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d143      	bne.n	8003630 <HAL_I2C_MspInit+0xa8>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
 80035a8:	4b39      	ldr	r3, [pc, #228]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4a38      	ldr	r2, [pc, #224]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
 80035c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035c4:	61fb      	str	r3, [r7, #28]
    */
 80035c6:	2312      	movs	r3, #18
 80035c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035ca:	2303      	movs	r3, #3
 80035cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ce:	f107 031c 	add.w	r3, r7, #28
 80035d2:	4619      	mov	r1, r3
 80035d4:	482f      	ldr	r0, [pc, #188]	@ (8003694 <HAL_I2C_MspInit+0x10c>)
 80035d6:	f001 f941 	bl	800485c <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035da:	4b2f      	ldr	r3, [pc, #188]	@ (8003698 <HAL_I2C_MspInit+0x110>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80035e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f0:	4a29      	ldr	r2, [pc, #164]	@ (8003698 <HAL_I2C_MspInit+0x110>)
 80035f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f4:	6053      	str	r3, [r2, #4]

    __HAL_AFIO_REMAP_I2C1_ENABLE();

 80035f6:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a25      	ldr	r2, [pc, #148]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 80035fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003600:	61d3      	str	r3, [r2, #28]
 8003602:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]
    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800360e:	2200      	movs	r2, #0
 8003610:	2100      	movs	r1, #0
 8003612:	201f      	movs	r0, #31
 8003614:	f001 f837 	bl	8004686 <HAL_NVIC_SetPriority>
    /* I2C1 interrupt Init */
 8003618:	201f      	movs	r0, #31
 800361a:	f001 f850 	bl	80046be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	2100      	movs	r1, #0
 8003622:	2020      	movs	r0, #32
 8003624:	f001 f82f 	bl	8004686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003628:	2020      	movs	r0, #32
 800362a:	f001 f848 	bl	80046be <HAL_NVIC_EnableIRQ>
    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
 800362e:	e029      	b.n	8003684 <HAL_I2C_MspInit+0xfc>
  /* USER CODE END I2C1_MspInit 1 */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_I2C_MspInit+0x114>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d124      	bne.n	8003684 <HAL_I2C_MspInit+0xfc>
  /* USER CODE END I2C2_MspInit 0 */
 800363a:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6193      	str	r3, [r2, #24]
 8003646:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
    PB11     ------> I2C2_SDA
 8003652:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003656:	61fb      	str	r3, [r7, #28]
    */
 8003658:	2312      	movs	r3, #18
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800365c:	2303      	movs	r3, #3
 800365e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003660:	f107 031c 	add.w	r3, r7, #28
 8003664:	4619      	mov	r1, r3
 8003666:	480b      	ldr	r0, [pc, #44]	@ (8003694 <HAL_I2C_MspInit+0x10c>)
 8003668:	f001 f8f8 	bl	800485c <HAL_GPIO_Init>

 800366c:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4a07      	ldr	r2, [pc, #28]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 8003672:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003676:	61d3      	str	r3, [r2, #28]
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <HAL_I2C_MspInit+0x108>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
  }
 8003684:	bf00      	nop
 8003686:	3730      	adds	r7, #48	@ 0x30
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40005400 	.word	0x40005400
 8003690:	40021000 	.word	0x40021000
 8003694:	40010c00 	.word	0x40010c00
 8003698:	40010000 	.word	0x40010000
 800369c:	40005800 	.word	0x40005800

080036a0 <HAL_TIM_PWM_MspInit>:
/**
* @brief TIM_PWM MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <HAL_TIM_PWM_MspInit+0x34>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10b      	bne.n	80036ca <HAL_TIM_PWM_MspInit+0x2a>
{
  if(htim_pwm->Instance==TIM4)
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x38>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4a08      	ldr	r2, [pc, #32]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x38>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	61d3      	str	r3, [r2, #28]
 80036be:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x38>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */

  }
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_TIM_MspPostInit>:

}

 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
{
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003734 <HAL_TIM_MspPostInit+0x58>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d117      	bne.n	800372c <HAL_TIM_MspPostInit+0x50>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM4)
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
 80036fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003738 <HAL_TIM_MspPostInit+0x5c>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <HAL_TIM_MspPostInit+0x5c>)
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	6193      	str	r3, [r2, #24]
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_TIM_MspPostInit+0x5c>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
 8003714:	23c0      	movs	r3, #192	@ 0xc0
 8003716:	613b      	str	r3, [r7, #16]
    */
 8003718:	2302      	movs	r3, #2
 800371a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800371c:	2302      	movs	r3, #2
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	f107 0310 	add.w	r3, r7, #16
 8003724:	4619      	mov	r1, r3
 8003726:	4805      	ldr	r0, [pc, #20]	@ (800373c <HAL_TIM_MspPostInit+0x60>)
 8003728:	f001 f898 	bl	800485c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
 800372c:	bf00      	nop
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40000800 	.word	0x40000800
 8003738:	40021000 	.word	0x40021000
 800373c:	40010c00 	.word	0x40010c00

08003740 <HAL_UART_MspInit>:
/**
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	@ 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
 8003748:	f107 0318 	add.w	r3, r7, #24
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
{
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3b      	ldr	r2, [pc, #236]	@ (8003848 <HAL_UART_MspInit+0x108>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d132      	bne.n	80037c6 <HAL_UART_MspInit+0x86>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
 8003760:	4b3a      	ldr	r3, [pc, #232]	@ (800384c <HAL_UART_MspInit+0x10c>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4a39      	ldr	r2, [pc, #228]	@ (800384c <HAL_UART_MspInit+0x10c>)
 8003766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800376a:	6193      	str	r3, [r2, #24]
 800376c:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_UART_MspInit+0x10c>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697b      	ldr	r3, [r7, #20]
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003778:	4b34      	ldr	r3, [pc, #208]	@ (800384c <HAL_UART_MspInit+0x10c>)
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	4a33      	ldr	r2, [pc, #204]	@ (800384c <HAL_UART_MspInit+0x10c>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6193      	str	r3, [r2, #24]
 8003784:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_UART_MspInit+0x10c>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
 8003790:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003794:	61bb      	str	r3, [r7, #24]
    */
 8003796:	2302      	movs	r3, #2
 8003798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800379a:	2303      	movs	r3, #3
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379e:	f107 0318 	add.w	r3, r7, #24
 80037a2:	4619      	mov	r1, r3
 80037a4:	482a      	ldr	r0, [pc, #168]	@ (8003850 <HAL_UART_MspInit+0x110>)
 80037a6:	f001 f859 	bl	800485c <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037ae:	61bb      	str	r3, [r7, #24]

 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037b4:	2300      	movs	r3, #0
 80037b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037b8:	f107 0318 	add.w	r3, r7, #24
 80037bc:	4619      	mov	r1, r3
 80037be:	4824      	ldr	r0, [pc, #144]	@ (8003850 <HAL_UART_MspInit+0x110>)
 80037c0:	f001 f84c 	bl	800485c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
 80037c4:	e03c      	b.n	8003840 <HAL_UART_MspInit+0x100>
  /* USER CODE END USART1_MspInit 1 */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a22      	ldr	r2, [pc, #136]	@ (8003854 <HAL_UART_MspInit+0x114>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d137      	bne.n	8003840 <HAL_UART_MspInit+0x100>
  /* USER CODE END USART2_MspInit 0 */
 80037d0:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_UART_MspInit+0x10c>)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_UART_MspInit+0x10c>)
 80037d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037da:	61d3      	str	r3, [r2, #28]
 80037dc:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <HAL_UART_MspInit+0x10c>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 80037e8:	4b18      	ldr	r3, [pc, #96]	@ (800384c <HAL_UART_MspInit+0x10c>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	4a17      	ldr	r2, [pc, #92]	@ (800384c <HAL_UART_MspInit+0x10c>)
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	6193      	str	r3, [r2, #24]
 80037f4:	4b15      	ldr	r3, [pc, #84]	@ (800384c <HAL_UART_MspInit+0x10c>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> USART2_RX
 8003800:	2304      	movs	r3, #4
 8003802:	61bb      	str	r3, [r7, #24]
    */
 8003804:	2302      	movs	r3, #2
 8003806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003808:	2303      	movs	r3, #3
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	f107 0318 	add.w	r3, r7, #24
 8003810:	4619      	mov	r1, r3
 8003812:	480f      	ldr	r0, [pc, #60]	@ (8003850 <HAL_UART_MspInit+0x110>)
 8003814:	f001 f822 	bl	800485c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003818:	2308      	movs	r3, #8
 800381a:	61bb      	str	r3, [r7, #24]

 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003820:	2300      	movs	r3, #0
 8003822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003824:	f107 0318 	add.w	r3, r7, #24
 8003828:	4619      	mov	r1, r3
 800382a:	4809      	ldr	r0, [pc, #36]	@ (8003850 <HAL_UART_MspInit+0x110>)
 800382c:	f001 f816 	bl	800485c <HAL_GPIO_Init>

 8003830:	2200      	movs	r2, #0
 8003832:	2100      	movs	r1, #0
 8003834:	2026      	movs	r0, #38	@ 0x26
 8003836:	f000 ff26 	bl	8004686 <HAL_NVIC_SetPriority>
    /* USART2 interrupt Init */
 800383a:	2026      	movs	r0, #38	@ 0x26
 800383c:	f000 ff3f 	bl	80046be <HAL_NVIC_EnableIRQ>
  }
 8003840:	bf00      	nop
 8003842:	3728      	adds	r7, #40	@ 0x28
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40013800 	.word	0x40013800
 800384c:	40021000 	.word	0x40021000
 8003850:	40010800 	.word	0x40010800
 8003854:	40004400 	.word	0x40004400

08003858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08c      	sub	sp, #48	@ 0x30
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800386e:	4b2e      	ldr	r3, [pc, #184]	@ (8003928 <HAL_InitTick+0xd0>)
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	4a2d      	ldr	r2, [pc, #180]	@ (8003928 <HAL_InitTick+0xd0>)
 8003874:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003878:	6193      	str	r3, [r2, #24]
 800387a:	4b2b      	ldr	r3, [pc, #172]	@ (8003928 <HAL_InitTick+0xd0>)
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003886:	f107 020c 	add.w	r2, r7, #12
 800388a:	f107 0310 	add.w	r3, r7, #16
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f004 fad7 	bl	8007e44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003896:	f004 fac1 	bl	8007e1c <HAL_RCC_GetPCLK2Freq>
 800389a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	4a23      	ldr	r2, [pc, #140]	@ (800392c <HAL_InitTick+0xd4>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	0c9b      	lsrs	r3, r3, #18
 80038a6:	3b01      	subs	r3, #1
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038aa:	4b21      	ldr	r3, [pc, #132]	@ (8003930 <HAL_InitTick+0xd8>)
 80038ac:	4a21      	ldr	r2, [pc, #132]	@ (8003934 <HAL_InitTick+0xdc>)
 80038ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80038b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003930 <HAL_InitTick+0xd8>)
 80038b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80038b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80038b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003930 <HAL_InitTick+0xd8>)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80038be:	4b1c      	ldr	r3, [pc, #112]	@ (8003930 <HAL_InitTick+0xd8>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_InitTick+0xd8>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ca:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <HAL_InitTick+0xd8>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80038d0:	4817      	ldr	r0, [pc, #92]	@ (8003930 <HAL_InitTick+0xd8>)
 80038d2:	f004 fc71 	bl	80081b8 <HAL_TIM_Base_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80038dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11b      	bne.n	800391c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80038e4:	4812      	ldr	r0, [pc, #72]	@ (8003930 <HAL_InitTick+0xd8>)
 80038e6:	f004 fcbf 	bl	8008268 <HAL_TIM_Base_Start_IT>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80038f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d111      	bne.n	800391c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80038f8:	2019      	movs	r0, #25
 80038fa:	f000 fee0 	bl	80046be <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b0f      	cmp	r3, #15
 8003902:	d808      	bhi.n	8003916 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003904:	2200      	movs	r2, #0
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	2019      	movs	r0, #25
 800390a:	f000 febc 	bl	8004686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800390e:	4a0a      	ldr	r2, [pc, #40]	@ (8003938 <HAL_InitTick+0xe0>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e002      	b.n	800391c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800391c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003920:	4618      	mov	r0, r3
 8003922:	3730      	adds	r7, #48	@ 0x30
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	431bde83 	.word	0x431bde83
 8003930:	200006fc 	.word	0x200006fc
 8003934:	40012c00 	.word	0x40012c00
 8003938:	20000004 	.word	0x20000004

0800393c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <NMI_Handler+0x4>

08003944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <HardFault_Handler+0x4>

0800394c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003950:	bf00      	nop
 8003952:	e7fd      	b.n	8003950 <MemManage_Handler+0x4>

08003954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003958:	bf00      	nop
 800395a:	e7fd      	b.n	8003958 <BusFault_Handler+0x4>

0800395c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <UsageFault_Handler+0x4>

08003964 <SVC_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <DebugMon_Handler>:

/******************************************************************************/
/* STM32F1xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f1xx.s).                    */
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <PendSV_Handler>:
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
}

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <SysTick_Handler>:
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
}

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <TIM1_UP_IRQHandler>:
  /* USER CODE END I2C1_ER_IRQn 1 */
}

/**
  * @brief This function handles USART2 global interrupt.
  */
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

 8003998:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <TIM1_UP_IRQHandler+0x10>)
 800399a:	f004 fda9 	bl	80084f0 <HAL_TIM_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200006fc 	.word	0x200006fc

080039a8 <I2C1_EV_IRQHandler>:
  /* USER CODE END USART2_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4802      	ldr	r0, [pc, #8]	@ (80039b8 <I2C1_EV_IRQHandler+0x10>)
 80039ae:	f001 fdd1 	bl	8005554 <HAL_I2C_EV_IRQHandler>
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000224 	.word	0x20000224

080039bc <I2C1_ER_IRQHandler>:
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4802      	ldr	r0, [pc, #8]	@ (80039cc <I2C1_ER_IRQHandler+0x10>)
 80039c2:	f001 ff1a 	bl	80057fa <HAL_I2C_ER_IRQHandler>
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000224 	.word	0x20000224

080039d0 <USART2_IRQHandler>:
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4802      	ldr	r0, [pc, #8]	@ (80039e0 <USART2_IRQHandler+0x10>)
 80039d6:	f005 faeb 	bl	8008fb0 <HAL_UART_IRQHandler>
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	2000035c 	.word	0x2000035c

080039e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return 1;
 80039e8:	2301      	movs	r3, #1
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <_kill>:

int _kill(int pid, int sig)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039fc:	f007 fd2c 	bl	800b458 <__errno>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2216      	movs	r2, #22
 8003a04:	601a      	str	r2, [r3, #0]
  return -1;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_exit>:

void _exit (int status)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ffe7 	bl	80039f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a24:	bf00      	nop
 8003a26:	e7fd      	b.n	8003a24 <_exit+0x12>

08003a28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e00a      	b.n	8003a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a3a:	f3af 8000 	nop.w
 8003a3e:	4601      	mov	r1, r0
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	60ba      	str	r2, [r7, #8]
 8003a46:	b2ca      	uxtb	r2, r1
 8003a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dbf0      	blt.n	8003a3a <_read+0x12>
  }

  return len;
 8003a58:	687b      	ldr	r3, [r7, #4]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e009      	b.n	8003a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	60ba      	str	r2, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	3301      	adds	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	dbf1      	blt.n	8003a74 <_write+0x12>
  }
  return len;
 8003a90:	687b      	ldr	r3, [r7, #4]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <_close>:

int _close(int file)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <_isatty>:

int _isatty(int file)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ad6:	2301      	movs	r3, #1
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
	...

08003afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b04:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <_sbrk+0x5c>)
 8003b06:	4b15      	ldr	r3, [pc, #84]	@ (8003b5c <_sbrk+0x60>)
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b10:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <_sbrk+0x64>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b18:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <_sbrk+0x64>)
 8003b1a:	4a12      	ldr	r2, [pc, #72]	@ (8003b64 <_sbrk+0x68>)
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b1e:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <_sbrk+0x64>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d207      	bcs.n	8003b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b2c:	f007 fc94 	bl	800b458 <__errno>
 8003b30:	4603      	mov	r3, r0
 8003b32:	220c      	movs	r2, #12
 8003b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	e009      	b.n	8003b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <_sbrk+0x64>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <_sbrk+0x64>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	4a05      	ldr	r2, [pc, #20]	@ (8003b60 <_sbrk+0x64>)
 8003b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20005000 	.word	0x20005000
 8003b5c:	00000400 	.word	0x00000400
 8003b60:	20000744 	.word	0x20000744
 8003b64:	20000898 	.word	0x20000898

08003b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b74:	f7ff fff8 	bl	8003b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b78:	480b      	ldr	r0, [pc, #44]	@ (8003ba8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b7a:	490c      	ldr	r1, [pc, #48]	@ (8003bac <LoopFillZerobss+0x12>)
	  ldr r2, =_sidata
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b80:	e002      	b.n	8003b88 <LoopCopyDataInit>

08003b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b86:	3304      	adds	r3, #4

08003b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b8c:	d3f9      	bcc.n	8003b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b8e:	4a09      	ldr	r2, [pc, #36]	@ (8003bb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b90:	4c09      	ldr	r4, [pc, #36]	@ (8003bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b94:	e001      	b.n	8003b9a <LoopFillZerobss>

08003b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b98:	3204      	adds	r2, #4

08003b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b9c:	d3fb      	bcc.n	8003b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b9e:	f007 fc61 	bl	800b464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ba2:	f7fe fc7d 	bl	80024a0 <main>
  bx lr
 8003ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8003ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bac:	200001d4 	.word	0x200001d4
	  ldr r2, =_sidata
 8003bb0:	0800e670 	.word	0x0800e670
  ldr r2, =_sbss
 8003bb4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003bb8:	20000898 	.word	0x20000898

08003bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bbc:	e7fe      	b.n	8003bbc <ADC1_2_IRQHandler>
	...

08003bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc4:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <HAL_Init+0x28>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a07      	ldr	r2, [pc, #28]	@ (8003be8 <HAL_Init+0x28>)
 8003bca:	f043 0310 	orr.w	r3, r3, #16
 8003bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd0:	2003      	movs	r0, #3
 8003bd2:	f000 fd4d 	bl	8004670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd6:	200f      	movs	r0, #15
 8003bd8:	f7ff fe3e 	bl	8003858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bdc:	f7ff fc4e 	bl	800347c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40022000 	.word	0x40022000

08003bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <HAL_IncTick+0x1c>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <HAL_IncTick+0x20>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	4a03      	ldr	r2, [pc, #12]	@ (8003c0c <HAL_IncTick+0x20>)
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	20000008 	.word	0x20000008
 8003c0c:	20000748 	.word	0x20000748

08003c10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return uwTick;
 8003c14:	4b02      	ldr	r3, [pc, #8]	@ (8003c20 <HAL_GetTick+0x10>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	20000748 	.word	0x20000748

08003c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c2c:	f7ff fff0 	bl	8003c10 <HAL_GetTick>
 8003c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d005      	beq.n	8003c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <HAL_Delay+0x44>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c4a:	bf00      	nop
 8003c4c:	f7ff ffe0 	bl	8003c10 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d8f7      	bhi.n	8003c4c <HAL_Delay+0x28>
  {
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000008 	.word	0x20000008

08003c6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0be      	b.n	8003e0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fc18 	bl	80034e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fbf1 	bl	8004498 <ADC_ConversionStop_Disable>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 8099 	bne.w	8003dfa <HAL_ADC_Init+0x18e>
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 8095 	bne.w	8003dfa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003cd8:	f023 0302 	bic.w	r3, r3, #2
 8003cdc:	f043 0202 	orr.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7b1b      	ldrb	r3, [r3, #12]
 8003cf2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003cf4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d04:	d003      	beq.n	8003d0e <HAL_ADC_Init+0xa2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d102      	bne.n	8003d14 <HAL_ADC_Init+0xa8>
 8003d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d12:	e000      	b.n	8003d16 <HAL_ADC_Init+0xaa>
 8003d14:	2300      	movs	r3, #0
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7d1b      	ldrb	r3, [r3, #20]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d119      	bne.n	8003d58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7b1b      	ldrb	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	035a      	lsls	r2, r3, #13
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e00b      	b.n	8003d58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	f043 0201 	orr.w	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	4b28      	ldr	r3, [pc, #160]	@ (8003e14 <HAL_ADC_Init+0x1a8>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d88:	d003      	beq.n	8003d92 <HAL_ADC_Init+0x126>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d104      	bne.n	8003d9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	051b      	lsls	r3, r3, #20
 8003d9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	4b18      	ldr	r3, [pc, #96]	@ (8003e18 <HAL_ADC_Init+0x1ac>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dd6:	e018      	b.n	8003e0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ddc:	f023 0312 	bic.w	r3, r3, #18
 8003de0:	f043 0210 	orr.w	r2, r3, #16
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003df8:	e007      	b.n	8003e0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	f043 0210 	orr.w	r2, r3, #16
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	ffe1f7fd 	.word	0xffe1f7fd
 8003e18:	ff1f0efe 	.word	0xff1f0efe

08003e1c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_Start+0x1a>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e098      	b.n	8003f68 <HAL_ADC_Start+0x14c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fad0 	bl	80043e4 <ADC_Enable>
 8003e44:	4603      	mov	r3, r0
 8003e46:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 8087 	bne.w	8003f5e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a41      	ldr	r2, [pc, #260]	@ (8003f70 <HAL_ADC_Start+0x154>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d105      	bne.n	8003e7a <HAL_ADC_Start+0x5e>
 8003e6e:	4b41      	ldr	r3, [pc, #260]	@ (8003f74 <HAL_ADC_Start+0x158>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d115      	bne.n	8003ea6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d026      	beq.n	8003ee2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e9c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ea4:	e01d      	b.n	8003ee2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003f74 <HAL_ADC_Start+0x158>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_ADC_Start+0xaa>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f70 <HAL_ADC_Start+0x154>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10d      	bne.n	8003ee2 <HAL_ADC_Start+0xc6>
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f74 <HAL_ADC_Start+0x158>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003eda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef2:	f023 0206 	bic.w	r2, r3, #6
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003efa:	e002      	b.n	8003f02 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0202 	mvn.w	r2, #2
 8003f12:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003f1e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003f22:	d113      	bne.n	8003f4c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f28:	4a11      	ldr	r2, [pc, #68]	@ (8003f70 <HAL_ADC_Start+0x154>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d105      	bne.n	8003f3a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003f2e:	4b11      	ldr	r3, [pc, #68]	@ (8003f74 <HAL_ADC_Start+0x158>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d108      	bne.n	8003f4c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	e00c      	b.n	8003f66 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	e003      	b.n	8003f66 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40012800 	.word	0x40012800
 8003f74:	40012400 	.word	0x40012400

08003f78 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_Stop+0x1a>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e01a      	b.n	8003fc8 <HAL_ADC_Stop+0x50>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa7c 	bl	8004498 <ADC_ConversionStop_Disable>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003fd0:	b590      	push	{r4, r7, lr}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003fe6:	f7ff fe13 	bl	8003c10 <HAL_GetTick>
 8003fea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0d3      	b.n	80041ba <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d131      	bne.n	8004084 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004026:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800402a:	2b00      	cmp	r3, #0
 800402c:	d12a      	bne.n	8004084 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800402e:	e021      	b.n	8004074 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d01d      	beq.n	8004074 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_ADC_PollForConversion+0x7e>
 800403e:	f7ff fde7 	bl	8003c10 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d212      	bcs.n	8004074 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	f043 0204 	orr.w	r2, r3, #4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0a2      	b.n	80041ba <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0d6      	beq.n	8004030 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004082:	e070      	b.n	8004166 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004084:	4b4f      	ldr	r3, [pc, #316]	@ (80041c4 <HAL_ADC_PollForConversion+0x1f4>)
 8004086:	681c      	ldr	r4, [r3, #0]
 8004088:	2002      	movs	r0, #2
 800408a:	f003 ffdf 	bl	800804c <HAL_RCCEx_GetPeriphCLKFreq>
 800408e:	4603      	mov	r3, r0
 8004090:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6919      	ldr	r1, [r3, #16]
 800409a:	4b4b      	ldr	r3, [pc, #300]	@ (80041c8 <HAL_ADC_PollForConversion+0x1f8>)
 800409c:	400b      	ands	r3, r1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d118      	bne.n	80040d4 <HAL_ADC_PollForConversion+0x104>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68d9      	ldr	r1, [r3, #12]
 80040a8:	4b48      	ldr	r3, [pc, #288]	@ (80041cc <HAL_ADC_PollForConversion+0x1fc>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d111      	bne.n	80040d4 <HAL_ADC_PollForConversion+0x104>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6919      	ldr	r1, [r3, #16]
 80040b6:	4b46      	ldr	r3, [pc, #280]	@ (80041d0 <HAL_ADC_PollForConversion+0x200>)
 80040b8:	400b      	ands	r3, r1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_ADC_PollForConversion+0x100>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68d9      	ldr	r1, [r3, #12]
 80040c4:	4b43      	ldr	r3, [pc, #268]	@ (80041d4 <HAL_ADC_PollForConversion+0x204>)
 80040c6:	400b      	ands	r3, r1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_PollForConversion+0x100>
 80040cc:	2314      	movs	r3, #20
 80040ce:	e020      	b.n	8004112 <HAL_ADC_PollForConversion+0x142>
 80040d0:	2329      	movs	r3, #41	@ 0x29
 80040d2:	e01e      	b.n	8004112 <HAL_ADC_PollForConversion+0x142>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6919      	ldr	r1, [r3, #16]
 80040da:	4b3d      	ldr	r3, [pc, #244]	@ (80041d0 <HAL_ADC_PollForConversion+0x200>)
 80040dc:	400b      	ands	r3, r1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_ADC_PollForConversion+0x120>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68d9      	ldr	r1, [r3, #12]
 80040e8:	4b3a      	ldr	r3, [pc, #232]	@ (80041d4 <HAL_ADC_PollForConversion+0x204>)
 80040ea:	400b      	ands	r3, r1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00d      	beq.n	800410c <HAL_ADC_PollForConversion+0x13c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6919      	ldr	r1, [r3, #16]
 80040f6:	4b38      	ldr	r3, [pc, #224]	@ (80041d8 <HAL_ADC_PollForConversion+0x208>)
 80040f8:	400b      	ands	r3, r1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d108      	bne.n	8004110 <HAL_ADC_PollForConversion+0x140>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68d9      	ldr	r1, [r3, #12]
 8004104:	4b34      	ldr	r3, [pc, #208]	@ (80041d8 <HAL_ADC_PollForConversion+0x208>)
 8004106:	400b      	ands	r3, r1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_ADC_PollForConversion+0x140>
 800410c:	2354      	movs	r3, #84	@ 0x54
 800410e:	e000      	b.n	8004112 <HAL_ADC_PollForConversion+0x142>
 8004110:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004118:	e021      	b.n	800415e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d01a      	beq.n	8004158 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_ADC_PollForConversion+0x168>
 8004128:	f7ff fd72 	bl	8003c10 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d20f      	bcs.n	8004158 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	429a      	cmp	r2, r3
 800413e:	d90b      	bls.n	8004158 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	f043 0204 	orr.w	r2, r3, #4
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e030      	b.n	80041ba <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	429a      	cmp	r2, r3
 8004164:	d8d9      	bhi.n	800411a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0212 	mvn.w	r2, #18
 800416e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004186:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800418a:	d115      	bne.n	80041b8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004190:	2b00      	cmp	r3, #0
 8004192:	d111      	bne.n	80041b8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004198:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	f043 0201 	orr.w	r2, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd90      	pop	{r4, r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000000 	.word	0x20000000
 80041c8:	24924924 	.word	0x24924924
 80041cc:	00924924 	.word	0x00924924
 80041d0:	12492492 	.word	0x12492492
 80041d4:	00492492 	.word	0x00492492
 80041d8:	00249249 	.word	0x00249249

080041dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x20>
 8004210:	2302      	movs	r3, #2
 8004212:	e0dc      	b.n	80043ce <HAL_ADC_ConfigChannel+0x1da>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b06      	cmp	r3, #6
 8004222:	d81c      	bhi.n	800425e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	3b05      	subs	r3, #5
 8004236:	221f      	movs	r2, #31
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	4019      	ands	r1, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	3b05      	subs	r3, #5
 8004250:	fa00 f203 	lsl.w	r2, r0, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	635a      	str	r2, [r3, #52]	@ 0x34
 800425c:	e03c      	b.n	80042d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d81c      	bhi.n	80042a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	3b23      	subs	r3, #35	@ 0x23
 8004278:	221f      	movs	r2, #31
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	4019      	ands	r1, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	3b23      	subs	r3, #35	@ 0x23
 8004292:	fa00 f203 	lsl.w	r2, r0, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	631a      	str	r2, [r3, #48]	@ 0x30
 800429e:	e01b      	b.n	80042d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	3b41      	subs	r3, #65	@ 0x41
 80042b2:	221f      	movs	r2, #31
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	4019      	ands	r1, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	3b41      	subs	r3, #65	@ 0x41
 80042cc:	fa00 f203 	lsl.w	r2, r0, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d91c      	bls.n	800431a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68d9      	ldr	r1, [r3, #12]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	3b1e      	subs	r3, #30
 80042f2:	2207      	movs	r2, #7
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	4019      	ands	r1, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6898      	ldr	r0, [r3, #8]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	3b1e      	subs	r3, #30
 800430c:	fa00 f203 	lsl.w	r2, r0, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	60da      	str	r2, [r3, #12]
 8004318:	e019      	b.n	800434e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6919      	ldr	r1, [r3, #16]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	2207      	movs	r2, #7
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	4019      	ands	r1, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6898      	ldr	r0, [r3, #8]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	fa00 f203 	lsl.w	r2, r0, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b10      	cmp	r3, #16
 8004354:	d003      	beq.n	800435e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800435a:	2b11      	cmp	r3, #17
 800435c:	d132      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1d      	ldr	r2, [pc, #116]	@ (80043d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d125      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d126      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004384:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b10      	cmp	r3, #16
 800438c:	d11a      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800438e:	4b13      	ldr	r3, [pc, #76]	@ (80043dc <HAL_ADC_ConfigChannel+0x1e8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	0c9a      	lsrs	r2, r3, #18
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043a4:	e002      	b.n	80043ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f9      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x1b2>
 80043b2:	e007      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr
 80043d8:	40012400 	.word	0x40012400
 80043dc:	20000000 	.word	0x20000000
 80043e0:	431bde83 	.word	0x431bde83

080043e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d040      	beq.n	8004484 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0201 	orr.w	r2, r2, #1
 8004410:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004412:	4b1f      	ldr	r3, [pc, #124]	@ (8004490 <ADC_Enable+0xac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1f      	ldr	r2, [pc, #124]	@ (8004494 <ADC_Enable+0xb0>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	0c9b      	lsrs	r3, r3, #18
 800441e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004420:	e002      	b.n	8004428 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	3b01      	subs	r3, #1
 8004426:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f9      	bne.n	8004422 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800442e:	f7ff fbef 	bl	8003c10 <HAL_GetTick>
 8004432:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004434:	e01f      	b.n	8004476 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004436:	f7ff fbeb 	bl	8003c10 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d918      	bls.n	8004476 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b01      	cmp	r3, #1
 8004450:	d011      	beq.n	8004476 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	f043 0210 	orr.w	r2, r3, #16
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004462:	f043 0201 	orr.w	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e007      	b.n	8004486 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b01      	cmp	r3, #1
 8004482:	d1d8      	bne.n	8004436 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000000 	.word	0x20000000
 8004494:	431bde83 	.word	0x431bde83

08004498 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d12e      	bne.n	8004510 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044c2:	f7ff fba5 	bl	8003c10 <HAL_GetTick>
 80044c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80044c8:	e01b      	b.n	8004502 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044ca:	f7ff fba1 	bl	8003c10 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d914      	bls.n	8004502 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d10d      	bne.n	8004502 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	f043 0210 	orr.w	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e007      	b.n	8004512 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d0dc      	beq.n	80044ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <__NVIC_SetPriorityGrouping+0x44>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004538:	4013      	ands	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800454c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800454e:	4a04      	ldr	r2, [pc, #16]	@ (8004560 <__NVIC_SetPriorityGrouping+0x44>)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	60d3      	str	r3, [r2, #12]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004568:	4b04      	ldr	r3, [pc, #16]	@ (800457c <__NVIC_GetPriorityGrouping+0x18>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 0307 	and.w	r3, r3, #7
}
 8004572:	4618      	mov	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	2b00      	cmp	r3, #0
 8004590:	db0b      	blt.n	80045aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	f003 021f 	and.w	r2, r3, #31
 8004598:	4906      	ldr	r1, [pc, #24]	@ (80045b4 <__NVIC_EnableIRQ+0x34>)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2001      	movs	r0, #1
 80045a2:	fa00 f202 	lsl.w	r2, r0, r2
 80045a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	e000e100 	.word	0xe000e100

080045b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db0a      	blt.n	80045e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	490c      	ldr	r1, [pc, #48]	@ (8004604 <__NVIC_SetPriority+0x4c>)
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	0112      	lsls	r2, r2, #4
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	440b      	add	r3, r1
 80045dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e0:	e00a      	b.n	80045f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4908      	ldr	r1, [pc, #32]	@ (8004608 <__NVIC_SetPriority+0x50>)
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	3b04      	subs	r3, #4
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	440b      	add	r3, r1
 80045f6:	761a      	strb	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	e000e100 	.word	0xe000e100
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800460c:	b480      	push	{r7}
 800460e:	b089      	sub	sp, #36	@ 0x24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f1c3 0307 	rsb	r3, r3, #7
 8004626:	2b04      	cmp	r3, #4
 8004628:	bf28      	it	cs
 800462a:	2304      	movcs	r3, #4
 800462c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3304      	adds	r3, #4
 8004632:	2b06      	cmp	r3, #6
 8004634:	d902      	bls.n	800463c <NVIC_EncodePriority+0x30>
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3b03      	subs	r3, #3
 800463a:	e000      	b.n	800463e <NVIC_EncodePriority+0x32>
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	401a      	ands	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004654:	f04f 31ff 	mov.w	r1, #4294967295
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	43d9      	mvns	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	4313      	orrs	r3, r2
         );
}
 8004666:	4618      	mov	r0, r3
 8004668:	3724      	adds	r7, #36	@ 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ff4f 	bl	800451c <__NVIC_SetPriorityGrouping>
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004686:	b580      	push	{r7, lr}
 8004688:	b086      	sub	sp, #24
 800468a:	af00      	add	r7, sp, #0
 800468c:	4603      	mov	r3, r0
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004698:	f7ff ff64 	bl	8004564 <__NVIC_GetPriorityGrouping>
 800469c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	6978      	ldr	r0, [r7, #20]
 80046a4:	f7ff ffb2 	bl	800460c <NVIC_EncodePriority>
 80046a8:	4602      	mov	r2, r0
 80046aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff81 	bl	80045b8 <__NVIC_SetPriority>
}
 80046b6:	bf00      	nop
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff57 	bl	8004580 <__NVIC_EnableIRQ>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d008      	beq.n	8004704 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2204      	movs	r2, #4
 80046f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e020      	b.n	8004746 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 020e 	bic.w	r2, r2, #14
 8004712:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472c:	2101      	movs	r1, #1
 800472e:	fa01 f202 	lsl.w	r2, r1, r2
 8004732:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004744:	7bfb      	ldrb	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d005      	beq.n	8004774 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2204      	movs	r2, #4
 800476c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
 8004772:	e051      	b.n	8004818 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 020e 	bic.w	r2, r2, #14
 8004782:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <HAL_DMA_Abort_IT+0xd4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d029      	beq.n	80047f2 <HAL_DMA_Abort_IT+0xa2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a21      	ldr	r2, [pc, #132]	@ (8004828 <HAL_DMA_Abort_IT+0xd8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <HAL_DMA_Abort_IT+0x9e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	@ (800482c <HAL_DMA_Abort_IT+0xdc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01a      	beq.n	80047e8 <HAL_DMA_Abort_IT+0x98>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <HAL_DMA_Abort_IT+0xe0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d012      	beq.n	80047e2 <HAL_DMA_Abort_IT+0x92>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004834 <HAL_DMA_Abort_IT+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00a      	beq.n	80047dc <HAL_DMA_Abort_IT+0x8c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <HAL_DMA_Abort_IT+0xe8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d102      	bne.n	80047d6 <HAL_DMA_Abort_IT+0x86>
 80047d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80047d4:	e00e      	b.n	80047f4 <HAL_DMA_Abort_IT+0xa4>
 80047d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047da:	e00b      	b.n	80047f4 <HAL_DMA_Abort_IT+0xa4>
 80047dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047e0:	e008      	b.n	80047f4 <HAL_DMA_Abort_IT+0xa4>
 80047e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047e6:	e005      	b.n	80047f4 <HAL_DMA_Abort_IT+0xa4>
 80047e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047ec:	e002      	b.n	80047f4 <HAL_DMA_Abort_IT+0xa4>
 80047ee:	2310      	movs	r3, #16
 80047f0:	e000      	b.n	80047f4 <HAL_DMA_Abort_IT+0xa4>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4a11      	ldr	r2, [pc, #68]	@ (800483c <HAL_DMA_Abort_IT+0xec>)
 80047f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
    } 
  }
  return status;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40020008 	.word	0x40020008
 8004828:	4002001c 	.word	0x4002001c
 800482c:	40020030 	.word	0x40020030
 8004830:	40020044 	.word	0x40020044
 8004834:	40020058 	.word	0x40020058
 8004838:	4002006c 	.word	0x4002006c
 800483c:	40020000 	.word	0x40020000

08004840 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800484e:	b2db      	uxtb	r3, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr
	...

0800485c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800485c:	b480      	push	{r7}
 800485e:	b08b      	sub	sp, #44	@ 0x2c
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800486a:	2300      	movs	r3, #0
 800486c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800486e:	e169      	b.n	8004b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004870:	2201      	movs	r2, #1
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	429a      	cmp	r2, r3
 800488a:	f040 8158 	bne.w	8004b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4a9a      	ldr	r2, [pc, #616]	@ (8004afc <HAL_GPIO_Init+0x2a0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d05e      	beq.n	8004956 <HAL_GPIO_Init+0xfa>
 8004898:	4a98      	ldr	r2, [pc, #608]	@ (8004afc <HAL_GPIO_Init+0x2a0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d875      	bhi.n	800498a <HAL_GPIO_Init+0x12e>
 800489e:	4a98      	ldr	r2, [pc, #608]	@ (8004b00 <HAL_GPIO_Init+0x2a4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d058      	beq.n	8004956 <HAL_GPIO_Init+0xfa>
 80048a4:	4a96      	ldr	r2, [pc, #600]	@ (8004b00 <HAL_GPIO_Init+0x2a4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d86f      	bhi.n	800498a <HAL_GPIO_Init+0x12e>
 80048aa:	4a96      	ldr	r2, [pc, #600]	@ (8004b04 <HAL_GPIO_Init+0x2a8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d052      	beq.n	8004956 <HAL_GPIO_Init+0xfa>
 80048b0:	4a94      	ldr	r2, [pc, #592]	@ (8004b04 <HAL_GPIO_Init+0x2a8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d869      	bhi.n	800498a <HAL_GPIO_Init+0x12e>
 80048b6:	4a94      	ldr	r2, [pc, #592]	@ (8004b08 <HAL_GPIO_Init+0x2ac>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d04c      	beq.n	8004956 <HAL_GPIO_Init+0xfa>
 80048bc:	4a92      	ldr	r2, [pc, #584]	@ (8004b08 <HAL_GPIO_Init+0x2ac>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d863      	bhi.n	800498a <HAL_GPIO_Init+0x12e>
 80048c2:	4a92      	ldr	r2, [pc, #584]	@ (8004b0c <HAL_GPIO_Init+0x2b0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d046      	beq.n	8004956 <HAL_GPIO_Init+0xfa>
 80048c8:	4a90      	ldr	r2, [pc, #576]	@ (8004b0c <HAL_GPIO_Init+0x2b0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d85d      	bhi.n	800498a <HAL_GPIO_Init+0x12e>
 80048ce:	2b12      	cmp	r3, #18
 80048d0:	d82a      	bhi.n	8004928 <HAL_GPIO_Init+0xcc>
 80048d2:	2b12      	cmp	r3, #18
 80048d4:	d859      	bhi.n	800498a <HAL_GPIO_Init+0x12e>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <HAL_GPIO_Init+0x80>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004957 	.word	0x08004957
 80048e0:	08004931 	.word	0x08004931
 80048e4:	08004943 	.word	0x08004943
 80048e8:	08004985 	.word	0x08004985
 80048ec:	0800498b 	.word	0x0800498b
 80048f0:	0800498b 	.word	0x0800498b
 80048f4:	0800498b 	.word	0x0800498b
 80048f8:	0800498b 	.word	0x0800498b
 80048fc:	0800498b 	.word	0x0800498b
 8004900:	0800498b 	.word	0x0800498b
 8004904:	0800498b 	.word	0x0800498b
 8004908:	0800498b 	.word	0x0800498b
 800490c:	0800498b 	.word	0x0800498b
 8004910:	0800498b 	.word	0x0800498b
 8004914:	0800498b 	.word	0x0800498b
 8004918:	0800498b 	.word	0x0800498b
 800491c:	0800498b 	.word	0x0800498b
 8004920:	08004939 	.word	0x08004939
 8004924:	0800494d 	.word	0x0800494d
 8004928:	4a79      	ldr	r2, [pc, #484]	@ (8004b10 <HAL_GPIO_Init+0x2b4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800492e:	e02c      	b.n	800498a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	623b      	str	r3, [r7, #32]
          break;
 8004936:	e029      	b.n	800498c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	3304      	adds	r3, #4
 800493e:	623b      	str	r3, [r7, #32]
          break;
 8004940:	e024      	b.n	800498c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	3308      	adds	r3, #8
 8004948:	623b      	str	r3, [r7, #32]
          break;
 800494a:	e01f      	b.n	800498c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	330c      	adds	r3, #12
 8004952:	623b      	str	r3, [r7, #32]
          break;
 8004954:	e01a      	b.n	800498c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800495e:	2304      	movs	r3, #4
 8004960:	623b      	str	r3, [r7, #32]
          break;
 8004962:	e013      	b.n	800498c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800496c:	2308      	movs	r3, #8
 800496e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	611a      	str	r2, [r3, #16]
          break;
 8004976:	e009      	b.n	800498c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004978:	2308      	movs	r3, #8
 800497a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	615a      	str	r2, [r3, #20]
          break;
 8004982:	e003      	b.n	800498c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004984:	2300      	movs	r3, #0
 8004986:	623b      	str	r3, [r7, #32]
          break;
 8004988:	e000      	b.n	800498c <HAL_GPIO_Init+0x130>
          break;
 800498a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2bff      	cmp	r3, #255	@ 0xff
 8004990:	d801      	bhi.n	8004996 <HAL_GPIO_Init+0x13a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	e001      	b.n	800499a <HAL_GPIO_Init+0x13e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2bff      	cmp	r3, #255	@ 0xff
 80049a0:	d802      	bhi.n	80049a8 <HAL_GPIO_Init+0x14c>
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	e002      	b.n	80049ae <HAL_GPIO_Init+0x152>
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	3b08      	subs	r3, #8
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	210f      	movs	r1, #15
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	401a      	ands	r2, r3
 80049c0:	6a39      	ldr	r1, [r7, #32]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	431a      	orrs	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80b1 	beq.w	8004b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004b14 <HAL_GPIO_Init+0x2b8>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004b14 <HAL_GPIO_Init+0x2b8>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6193      	str	r3, [r2, #24]
 80049e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004b14 <HAL_GPIO_Init+0x2b8>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049f4:	4a48      	ldr	r2, [pc, #288]	@ (8004b18 <HAL_GPIO_Init+0x2bc>)
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	3302      	adds	r3, #2
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	220f      	movs	r2, #15
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4013      	ands	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a40      	ldr	r2, [pc, #256]	@ (8004b1c <HAL_GPIO_Init+0x2c0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <HAL_GPIO_Init+0x1ec>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a3f      	ldr	r2, [pc, #252]	@ (8004b20 <HAL_GPIO_Init+0x2c4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00d      	beq.n	8004a44 <HAL_GPIO_Init+0x1e8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8004b24 <HAL_GPIO_Init+0x2c8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <HAL_GPIO_Init+0x1e4>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a3d      	ldr	r2, [pc, #244]	@ (8004b28 <HAL_GPIO_Init+0x2cc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <HAL_GPIO_Init+0x1e0>
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	e004      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e002      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_GPIO_Init+0x1ee>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4c:	f002 0203 	and.w	r2, r2, #3
 8004a50:	0092      	lsls	r2, r2, #2
 8004a52:	4093      	lsls	r3, r2
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a5a:	492f      	ldr	r1, [pc, #188]	@ (8004b18 <HAL_GPIO_Init+0x2bc>)
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	3302      	adds	r3, #2
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a74:	4b2d      	ldr	r3, [pc, #180]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	492c      	ldr	r1, [pc, #176]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]
 8004a80:	e006      	b.n	8004a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a82:	4b2a      	ldr	r3, [pc, #168]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	4928      	ldr	r1, [pc, #160]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a9c:	4b23      	ldr	r3, [pc, #140]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	4922      	ldr	r1, [pc, #136]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60cb      	str	r3, [r1, #12]
 8004aa8:	e006      	b.n	8004ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004aaa:	4b20      	ldr	r3, [pc, #128]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	491e      	ldr	r1, [pc, #120]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d006      	beq.n	8004ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ac4:	4b19      	ldr	r3, [pc, #100]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	4918      	ldr	r1, [pc, #96]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]
 8004ad0:	e006      	b.n	8004ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004ad2:	4b16      	ldr	r3, [pc, #88]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	4914      	ldr	r1, [pc, #80]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d021      	beq.n	8004b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004aec:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	490e      	ldr	r1, [pc, #56]	@ (8004b2c <HAL_GPIO_Init+0x2d0>)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]
 8004af8:	e021      	b.n	8004b3e <HAL_GPIO_Init+0x2e2>
 8004afa:	bf00      	nop
 8004afc:	10320000 	.word	0x10320000
 8004b00:	10310000 	.word	0x10310000
 8004b04:	10220000 	.word	0x10220000
 8004b08:	10210000 	.word	0x10210000
 8004b0c:	10120000 	.word	0x10120000
 8004b10:	10110000 	.word	0x10110000
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40010800 	.word	0x40010800
 8004b20:	40010c00 	.word	0x40010c00
 8004b24:	40011000 	.word	0x40011000
 8004b28:	40011400 	.word	0x40011400
 8004b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b30:	4b0b      	ldr	r3, [pc, #44]	@ (8004b60 <HAL_GPIO_Init+0x304>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	43db      	mvns	r3, r3
 8004b38:	4909      	ldr	r1, [pc, #36]	@ (8004b60 <HAL_GPIO_Init+0x304>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	3301      	adds	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f47f ae8e 	bne.w	8004870 <HAL_GPIO_Init+0x14>
  }
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	372c      	adds	r7, #44	@ 0x2c
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr
 8004b60:	40010400 	.word	0x40010400

08004b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
 8004b70:	4613      	mov	r3, r2
 8004b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b74:	787b      	ldrb	r3, [r7, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b80:	e003      	b.n	8004b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	041a      	lsls	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	611a      	str	r2, [r3, #16]
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	041a      	lsls	r2, r3, #16
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	43d9      	mvns	r1, r3
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	400b      	ands	r3, r1
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	611a      	str	r2, [r3, #16]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
	...

08004bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e12b      	b.n	8004e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fe fcca 	bl	8003588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	@ 0x24
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c2c:	f003 f8e2 	bl	8007df4 <HAL_RCC_GetPCLK1Freq>
 8004c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4a81      	ldr	r2, [pc, #516]	@ (8004e3c <HAL_I2C_Init+0x274>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d807      	bhi.n	8004c4c <HAL_I2C_Init+0x84>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a80      	ldr	r2, [pc, #512]	@ (8004e40 <HAL_I2C_Init+0x278>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	bf94      	ite	ls
 8004c44:	2301      	movls	r3, #1
 8004c46:	2300      	movhi	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e006      	b.n	8004c5a <HAL_I2C_Init+0x92>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e44 <HAL_I2C_Init+0x27c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	bf94      	ite	ls
 8004c54:	2301      	movls	r3, #1
 8004c56:	2300      	movhi	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0e7      	b.n	8004e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a78      	ldr	r2, [pc, #480]	@ (8004e48 <HAL_I2C_Init+0x280>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	0c9b      	lsrs	r3, r3, #18
 8004c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a6a      	ldr	r2, [pc, #424]	@ (8004e3c <HAL_I2C_Init+0x274>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d802      	bhi.n	8004c9c <HAL_I2C_Init+0xd4>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	e009      	b.n	8004cb0 <HAL_I2C_Init+0xe8>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	4a69      	ldr	r2, [pc, #420]	@ (8004e4c <HAL_I2C_Init+0x284>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	099b      	lsrs	r3, r3, #6
 8004cae:	3301      	adds	r3, #1
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004cc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	495c      	ldr	r1, [pc, #368]	@ (8004e3c <HAL_I2C_Init+0x274>)
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	d819      	bhi.n	8004d04 <HAL_I2C_Init+0x13c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1e59      	subs	r1, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cde:	1c59      	adds	r1, r3, #1
 8004ce0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ce4:	400b      	ands	r3, r1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_I2C_Init+0x138>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1e59      	subs	r1, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfe:	e051      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d00:	2304      	movs	r3, #4
 8004d02:	e04f      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d111      	bne.n	8004d30 <HAL_I2C_Init+0x168>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1e58      	subs	r0, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	440b      	add	r3, r1
 8004d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e012      	b.n	8004d56 <HAL_I2C_Init+0x18e>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1e58      	subs	r0, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	0099      	lsls	r1, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Init+0x196>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e022      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10e      	bne.n	8004d84 <HAL_I2C_Init+0x1bc>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1e58      	subs	r0, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	440b      	add	r3, r1
 8004d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d82:	e00f      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1e58      	subs	r0, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6859      	ldr	r1, [r3, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	0099      	lsls	r1, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	6809      	ldr	r1, [r1, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004dd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6911      	ldr	r1, [r2, #16]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68d2      	ldr	r2, [r2, #12]
 8004dde:	4311      	orrs	r1, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	000186a0 	.word	0x000186a0
 8004e40:	001e847f 	.word	0x001e847f
 8004e44:	003d08ff 	.word	0x003d08ff
 8004e48:	431bde83 	.word	0x431bde83
 8004e4c:	10624dd3 	.word	0x10624dd3

08004e50 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e62:	2b80      	cmp	r3, #128	@ 0x80
 8004e64:	d103      	bne.n	8004e6e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	611a      	str	r2, [r3, #16]
  }
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr

08004e78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	813b      	strh	r3, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e92:	f7fe febd 	bl	8003c10 <HAL_GetTick>
 8004e96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	f040 80d9 	bne.w	8005058 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	2319      	movs	r3, #25
 8004eac:	2201      	movs	r2, #1
 8004eae:	496d      	ldr	r1, [pc, #436]	@ (8005064 <HAL_I2C_Mem_Write+0x1ec>)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f002 f953 	bl	800715c <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e0cc      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_I2C_Mem_Write+0x56>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e0c5      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d007      	beq.n	8004ef4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2221      	movs	r2, #33	@ 0x21
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2240      	movs	r2, #64	@ 0x40
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a4d      	ldr	r2, [pc, #308]	@ (8005068 <HAL_I2C_Mem_Write+0x1f0>)
 8004f34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f36:	88f8      	ldrh	r0, [r7, #6]
 8004f38:	893a      	ldrh	r2, [r7, #8]
 8004f3a:	8979      	ldrh	r1, [r7, #10]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4603      	mov	r3, r0
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f001 fee2 	bl	8006d10 <I2C_RequestMemoryWrite>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d052      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e081      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f002 fa18 	bl	8007390 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d107      	bne.n	8004f7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06b      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	781a      	ldrb	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_I2C_Mem_Write+0x180>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d017      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1aa      	bne.n	8004f56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f002 fa0b 	bl	8007420 <I2C_WaitOnBTFFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	2b04      	cmp	r3, #4
 8005016:	d107      	bne.n	8005028 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005026:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e016      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800503a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	00100002 	.word	0x00100002
 8005068:	ffff0000 	.word	0xffff0000

0800506c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	@ 0x30
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	461a      	mov	r2, r3
 800507a:	4603      	mov	r3, r0
 800507c:	817b      	strh	r3, [r7, #10]
 800507e:	460b      	mov	r3, r1
 8005080:	813b      	strh	r3, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800508a:	f7fe fdc1 	bl	8003c10 <HAL_GetTick>
 800508e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b20      	cmp	r3, #32
 800509a:	f040 8250 	bne.w	800553e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	2319      	movs	r3, #25
 80050a4:	2201      	movs	r2, #1
 80050a6:	4982      	ldr	r1, [pc, #520]	@ (80052b0 <HAL_I2C_Mem_Read+0x244>)
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f002 f857 	bl	800715c <I2C_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80050b4:	2302      	movs	r3, #2
 80050b6:	e243      	b.n	8005540 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_I2C_Mem_Read+0x5a>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e23c      	b.n	8005540 <HAL_I2C_Mem_Read+0x4d4>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d007      	beq.n	80050ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2222      	movs	r2, #34	@ 0x22
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2240      	movs	r2, #64	@ 0x40
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005116:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800511c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4a62      	ldr	r2, [pc, #392]	@ (80052b4 <HAL_I2C_Mem_Read+0x248>)
 800512c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800512e:	88f8      	ldrh	r0, [r7, #6]
 8005130:	893a      	ldrh	r2, [r7, #8]
 8005132:	8979      	ldrh	r1, [r7, #10]
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	4603      	mov	r3, r0
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f001 fe7c 	bl	8006e3c <I2C_RequestMemoryRead>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e1f8      	b.n	8005540 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	d113      	bne.n	800517e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	61fb      	str	r3, [r7, #28]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	e1cc      	b.n	8005518 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005182:	2b01      	cmp	r3, #1
 8005184:	d11e      	bne.n	80051c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005194:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005196:	b672      	cpsid	i
}
 8005198:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051c0:	b662      	cpsie	i
}
 80051c2:	e035      	b.n	8005230 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d11e      	bne.n	800520a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051dc:	b672      	cpsid	i
}
 80051de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005204:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005206:	b662      	cpsie	i
}
 8005208:	e012      	b.n	8005230 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005218:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005230:	e172      	b.n	8005518 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	2b03      	cmp	r3, #3
 8005238:	f200 811f 	bhi.w	800547a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005240:	2b01      	cmp	r3, #1
 8005242:	d123      	bne.n	800528c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005246:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f002 f963 	bl	8007514 <I2C_WaitOnRXNEFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e173      	b.n	8005540 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800528a:	e145      	b.n	8005518 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005290:	2b02      	cmp	r3, #2
 8005292:	d152      	bne.n	800533a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529a:	2200      	movs	r2, #0
 800529c:	4906      	ldr	r1, [pc, #24]	@ (80052b8 <HAL_I2C_Mem_Read+0x24c>)
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f001 ff5c 	bl	800715c <I2C_WaitOnFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e148      	b.n	8005540 <HAL_I2C_Mem_Read+0x4d4>
 80052ae:	bf00      	nop
 80052b0:	00100002 	.word	0x00100002
 80052b4:	ffff0000 	.word	0xffff0000
 80052b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80052bc:	b672      	cpsid	i
}
 80052be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005302:	b662      	cpsie	i
}
 8005304:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005338:	e0ee      	b.n	8005518 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005340:	2200      	movs	r2, #0
 8005342:	4981      	ldr	r1, [pc, #516]	@ (8005548 <HAL_I2C_Mem_Read+0x4dc>)
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f001 ff09 	bl	800715c <I2C_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0f5      	b.n	8005540 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005364:	b672      	cpsid	i
}
 8005366:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800539a:	4b6c      	ldr	r3, [pc, #432]	@ (800554c <HAL_I2C_Mem_Read+0x4e0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	08db      	lsrs	r3, r3, #3
 80053a0:	4a6b      	ldr	r2, [pc, #428]	@ (8005550 <HAL_I2C_Mem_Read+0x4e4>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	0a1a      	lsrs	r2, r3, #8
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	00da      	lsls	r2, r3, #3
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d118      	bne.n	80053f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80053e2:	b662      	cpsie	i
}
 80053e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e0a6      	b.n	8005540 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d1d9      	bne.n	80053b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800540e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005442:	b662      	cpsie	i
}
 8005444:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005478:	e04e      	b.n	8005518 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800547c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f002 f848 	bl	8007514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e058      	b.n	8005540 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d124      	bne.n	8005518 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d107      	bne.n	80054e6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	f47f ae88 	bne.w	8005232 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3728      	adds	r7, #40	@ 0x28
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	00010004 	.word	0x00010004
 800554c:	20000000 	.word	0x20000000
 8005550:	14f8b589 	.word	0x14f8b589

08005554 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005574:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800557c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b10      	cmp	r3, #16
 8005582:	d003      	beq.n	800558c <HAL_I2C_EV_IRQHandler+0x38>
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	f040 80b1 	bne.w	80056ee <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10d      	bne.n	80055c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80055ac:	d003      	beq.n	80055b6 <HAL_I2C_EV_IRQHandler+0x62>
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80055b4:	d101      	bne.n	80055ba <HAL_I2C_EV_IRQHandler+0x66>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <HAL_I2C_EV_IRQHandler+0x68>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f000 8114 	beq.w	80057ea <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <HAL_I2C_EV_IRQHandler+0x90>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f002 f827 	bl	800762a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fd74 	bl	80060ca <I2C_Master_SB>
 80055e2:	e083      	b.n	80056ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <HAL_I2C_EV_IRQHandler+0xac>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fdeb 	bl	80061d4 <I2C_Master_ADD10>
 80055fe:	e075      	b.n	80056ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_I2C_EV_IRQHandler+0xc8>
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fe06 	bl	8006226 <I2C_Master_ADDR>
 800561a:	e067      	b.n	80056ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d036      	beq.n	8005694 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005634:	f000 80db 	beq.w	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00d      	beq.n	800565e <HAL_I2C_EV_IRQHandler+0x10a>
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_I2C_EV_IRQHandler+0x10a>
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9d4 	bl	8005a04 <I2C_MasterTransmit_TXE>
 800565c:	e046      	b.n	80056ec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80c2 	beq.w	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80bc 	beq.w	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005676:	7bbb      	ldrb	r3, [r7, #14]
 8005678:	2b21      	cmp	r3, #33	@ 0x21
 800567a:	d103      	bne.n	8005684 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa5d 	bl	8005b3c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005682:	e0b4      	b.n	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	2b40      	cmp	r3, #64	@ 0x40
 8005688:	f040 80b1 	bne.w	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 facb 	bl	8005c28 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005692:	e0ac      	b.n	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800569e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a2:	f000 80a4 	beq.w	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00d      	beq.n	80056cc <HAL_I2C_EV_IRQHandler+0x178>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <HAL_I2C_EV_IRQHandler+0x178>
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d103      	bne.n	80056cc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fb47 	bl	8005d58 <I2C_MasterReceive_RXNE>
 80056ca:	e00f      	b.n	80056ec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 808b 	beq.w	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8085 	beq.w	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fbff 	bl	8005ee8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ea:	e080      	b.n	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
 80056ec:	e07f      	b.n	80057ee <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	e007      	b.n	8005710 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d011      	beq.n	800573e <HAL_I2C_EV_IRQHandler+0x1ea>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00c      	beq.n	800573e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005734:	69b9      	ldr	r1, [r7, #24]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 ffcc 	bl	80066d4 <I2C_Slave_ADDR>
 800573c:	e05a      	b.n	80057f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_I2C_EV_IRQHandler+0x206>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 f806 	bl	8006764 <I2C_Slave_STOPF>
 8005758:	e04c      	b.n	80057f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800575a:	7bbb      	ldrb	r3, [r7, #14]
 800575c:	2b21      	cmp	r3, #33	@ 0x21
 800575e:	d002      	beq.n	8005766 <HAL_I2C_EV_IRQHandler+0x212>
 8005760:	7bbb      	ldrb	r3, [r7, #14]
 8005762:	2b29      	cmp	r3, #41	@ 0x29
 8005764:	d120      	bne.n	80057a8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <HAL_I2C_EV_IRQHandler+0x238>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <HAL_I2C_EV_IRQHandler+0x238>
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fee9 	bl	800655c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800578a:	e032      	b.n	80057f2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d02d      	beq.n	80057f2 <HAL_I2C_EV_IRQHandler+0x29e>
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800579c:	2b00      	cmp	r3, #0
 800579e:	d028      	beq.n	80057f2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 ff18 	bl	80065d6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057a6:	e024      	b.n	80057f2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <HAL_I2C_EV_IRQHandler+0x27a>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <HAL_I2C_EV_IRQHandler+0x27a>
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 ff25 	bl	8006616 <I2C_SlaveReceive_RXNE>
 80057cc:	e012      	b.n	80057f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00d      	beq.n	80057f4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 ff55 	bl	8006692 <I2C_SlaveReceive_BTF>
 80057e8:	e004      	b.n	80057f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80057ea:	bf00      	nop
 80057ec:	e002      	b.n	80057f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ee:	bf00      	nop
 80057f0:	e000      	b.n	80057f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b08a      	sub	sp, #40	@ 0x28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800581c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d015      	beq.n	8005854 <HAL_I2C_ER_IRQHandler+0x5a>
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d010      	beq.n	8005854 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005842:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005852:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <HAL_I2C_ER_IRQHandler+0x80>
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	f043 0302 	orr.w	r3, r3, #2
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005878:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005880:	2b00      	cmp	r3, #0
 8005882:	d03e      	beq.n	8005902 <HAL_I2C_ER_IRQHandler+0x108>
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d039      	beq.n	8005902 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800588e:	7efb      	ldrb	r3, [r7, #27]
 8005890:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80058a8:	7ebb      	ldrb	r3, [r7, #26]
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d112      	bne.n	80058d4 <HAL_I2C_ER_IRQHandler+0xda>
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10f      	bne.n	80058d4 <HAL_I2C_ER_IRQHandler+0xda>
 80058b4:	7cfb      	ldrb	r3, [r7, #19]
 80058b6:	2b21      	cmp	r3, #33	@ 0x21
 80058b8:	d008      	beq.n	80058cc <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	2b29      	cmp	r3, #41	@ 0x29
 80058be:	d005      	beq.n	80058cc <HAL_I2C_ER_IRQHandler+0xd2>
 80058c0:	7cfb      	ldrb	r3, [r7, #19]
 80058c2:	2b28      	cmp	r3, #40	@ 0x28
 80058c4:	d106      	bne.n	80058d4 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b21      	cmp	r3, #33	@ 0x21
 80058ca:	d103      	bne.n	80058d4 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 f879 	bl	80069c4 <I2C_Slave_AF>
 80058d2:	e016      	b.n	8005902 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058dc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	f043 0304 	orr.w	r3, r3, #4
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058e6:	7efb      	ldrb	r3, [r7, #27]
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	d002      	beq.n	80058f2 <HAL_I2C_ER_IRQHandler+0xf8>
 80058ec:	7efb      	ldrb	r3, [r7, #27]
 80058ee:	2b40      	cmp	r3, #64	@ 0x40
 80058f0:	d107      	bne.n	8005902 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005900:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <HAL_I2C_ER_IRQHandler+0x12e>
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	f043 0308 	orr.w	r3, r3, #8
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005926:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 f8b6 	bl	8006aac <I2C_ITError>
  }
}
 8005940:	bf00      	nop
 8005942:	3728      	adds	r7, #40	@ 0x28
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr

0800597e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
 800599c:	4613      	mov	r3, r2
 800599e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d150      	bne.n	8005acc <I2C_MasterTransmit_TXE+0xc8>
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b21      	cmp	r3, #33	@ 0x21
 8005a2e:	d14d      	bne.n	8005acc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d01d      	beq.n	8005a72 <I2C_MasterTransmit_TXE+0x6e>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d01a      	beq.n	8005a72 <I2C_MasterTransmit_TXE+0x6e>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a42:	d016      	beq.n	8005a72 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a52:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2211      	movs	r2, #17
 8005a58:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff ff6c 	bl	8005948 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a70:	e060      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a80:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a90:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	d107      	bne.n	8005abc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff ff81 	bl	80059bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005aba:	e03b      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff ff3f 	bl	8005948 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005aca:	e033      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	2b21      	cmp	r3, #33	@ 0x21
 8005ad0:	d005      	beq.n	8005ade <I2C_MasterTransmit_TXE+0xda>
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	2b40      	cmp	r3, #64	@ 0x40
 8005ad6:	d12d      	bne.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b22      	cmp	r3, #34	@ 0x22
 8005adc:	d12a      	bne.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d108      	bne.n	8005afa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005af8:	e01c      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b40      	cmp	r3, #64	@ 0x40
 8005b04:	d103      	bne.n	8005b0e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f88e 	bl	8005c28 <I2C_MemoryTransmit_TXE_BTF>
}
 8005b0c:	e012      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	781a      	ldrb	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005b32:	e7ff      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b48:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b21      	cmp	r3, #33	@ 0x21
 8005b54:	d164      	bne.n	8005c20 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d012      	beq.n	8005b86 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005b84:	e04c      	b.n	8005c20 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d01d      	beq.n	8005bc8 <I2C_MasterTransmit_BTF+0x8c>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d01a      	beq.n	8005bc8 <I2C_MasterTransmit_BTF+0x8c>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b98:	d016      	beq.n	8005bc8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ba8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2211      	movs	r2, #17
 8005bae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff fec1 	bl	8005948 <HAL_I2C_MasterTxCpltCallback>
}
 8005bc6:	e02b      	b.n	8005c20 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bd6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b40      	cmp	r3, #64	@ 0x40
 8005c00:	d107      	bne.n	8005c12 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fed6 	bl	80059bc <HAL_I2C_MemTxCpltCallback>
}
 8005c10:	e006      	b.n	8005c20 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fe94 	bl	8005948 <HAL_I2C_MasterTxCpltCallback>
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d11d      	bne.n	8005c7c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d10b      	bne.n	8005c60 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c58:	1c9a      	adds	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005c5e:	e077      	b.n	8005d50 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	121b      	asrs	r3, r3, #8
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c7a:	e069      	b.n	8005d50 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d10b      	bne.n	8005c9c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c9a:	e059      	b.n	8005d50 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d152      	bne.n	8005d4a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b22      	cmp	r3, #34	@ 0x22
 8005ca8:	d10d      	bne.n	8005cc6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cb8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005cc4:	e044      	b.n	8005d50 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d015      	beq.n	8005cfc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b21      	cmp	r3, #33	@ 0x21
 8005cd4:	d112      	bne.n	8005cfc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005cfa:	e029      	b.n	8005d50 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d124      	bne.n	8005d50 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	2b21      	cmp	r3, #33	@ 0x21
 8005d0a:	d121      	bne.n	8005d50 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d1a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff fe3a 	bl	80059bc <HAL_I2C_MemTxCpltCallback>
}
 8005d48:	e002      	b.n	8005d50 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff f880 	bl	8004e50 <I2C_Flush_DR>
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b22      	cmp	r3, #34	@ 0x22
 8005d6a:	f040 80b9 	bne.w	8005ee0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d921      	bls.n	8005dc6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	f040 8096 	bne.w	8005ee0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005dc4:	e08c      	b.n	8005ee0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d07f      	beq.n	8005ece <I2C_MasterReceive_RXNE+0x176>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d002      	beq.n	8005dda <I2C_MasterReceive_RXNE+0x82>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d179      	bne.n	8005ece <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 fb68 	bl	80074b0 <I2C_WaitOnSTOPRequestThroughIT>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d14c      	bne.n	8005e80 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005df4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e04:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b40      	cmp	r3, #64	@ 0x40
 8005e3e:	d10a      	bne.n	8005e56 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fdbd 	bl	80059ce <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e54:	e044      	b.n	8005ee0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d002      	beq.n	8005e6a <I2C_MasterReceive_RXNE+0x112>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d103      	bne.n	8005e72 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e70:	e002      	b.n	8005e78 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2212      	movs	r2, #18
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff fd6e 	bl	800595a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e7e:	e02f      	b.n	8005ee0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fd8a 	bl	80059e0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ecc:	e008      	b.n	8005ee0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005edc:	605a      	str	r2, [r3, #4]
}
 8005ede:	e7ff      	b.n	8005ee0 <I2C_MasterReceive_RXNE+0x188>
 8005ee0:	bf00      	nop
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d11b      	bne.n	8005f38 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005f36:	e0c4      	b.n	80060c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d129      	bne.n	8005f96 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d00a      	beq.n	8005f6e <I2C_MasterReceive_BTF+0x86>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d007      	beq.n	8005f6e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f6c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f94:	e095      	b.n	80060c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d17d      	bne.n	800609c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d002      	beq.n	8005fac <I2C_MasterReceive_BTF+0xc4>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d108      	bne.n	8005fbe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	e016      	b.n	8005fec <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d002      	beq.n	8005fca <I2C_MasterReceive_BTF+0xe2>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d108      	bne.n	8005fdc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	e007      	b.n	8005fec <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006046:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b40      	cmp	r3, #64	@ 0x40
 800605a:	d10a      	bne.n	8006072 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff fcaf 	bl	80059ce <HAL_I2C_MemRxCpltCallback>
}
 8006070:	e027      	b.n	80060c2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d002      	beq.n	8006086 <I2C_MasterReceive_BTF+0x19e>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b20      	cmp	r3, #32
 8006084:	d103      	bne.n	800608e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	631a      	str	r2, [r3, #48]	@ 0x30
 800608c:	e002      	b.n	8006094 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2212      	movs	r2, #18
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff fc60 	bl	800595a <HAL_I2C_MasterRxCpltCallback>
}
 800609a:	e012      	b.n	80060c2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b40      	cmp	r3, #64	@ 0x40
 80060dc:	d117      	bne.n	800610e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80060f8:	e067      	b.n	80061ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	b2da      	uxtb	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	611a      	str	r2, [r3, #16]
}
 800610c:	e05d      	b.n	80061ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006116:	d133      	bne.n	8006180 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b21      	cmp	r3, #33	@ 0x21
 8006122:	d109      	bne.n	8006138 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006128:	b2db      	uxtb	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006134:	611a      	str	r2, [r3, #16]
 8006136:	e008      	b.n	800614a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613c:	b2db      	uxtb	r3, r3
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	b2da      	uxtb	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <I2C_Master_SB+0x92>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006158:	2b00      	cmp	r3, #0
 800615a:	d108      	bne.n	800616e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d032      	beq.n	80061ca <I2C_Master_SB+0x100>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d02d      	beq.n	80061ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800617c:	605a      	str	r2, [r3, #4]
}
 800617e:	e024      	b.n	80061ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10e      	bne.n	80061a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618c:	b29b      	uxth	r3, r3
 800618e:	11db      	asrs	r3, r3, #7
 8006190:	b2db      	uxtb	r3, r3
 8006192:	f003 0306 	and.w	r3, r3, #6
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f063 030f 	orn	r3, r3, #15
 800619c:	b2da      	uxtb	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	611a      	str	r2, [r3, #16]
}
 80061a4:	e011      	b.n	80061ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d10d      	bne.n	80061ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	11db      	asrs	r3, r3, #7
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f003 0306 	and.w	r3, r3, #6
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f063 030e 	orn	r3, r3, #14
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	611a      	str	r2, [r3, #16]
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <I2C_Master_ADD10+0x26>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d108      	bne.n	800620c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <I2C_Master_ADD10+0x48>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800621a:	605a      	str	r2, [r3, #4]
  }
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr

08006226 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006226:	b480      	push	{r7}
 8006228:	b091      	sub	sp, #68	@ 0x44
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006234:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b22      	cmp	r3, #34	@ 0x22
 800624e:	f040 8174 	bne.w	800653a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10f      	bne.n	800627a <I2C_Master_ADDR+0x54>
 800625a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800625e:	2b40      	cmp	r3, #64	@ 0x40
 8006260:	d10b      	bne.n	800627a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006262:	2300      	movs	r3, #0
 8006264:	633b      	str	r3, [r7, #48]	@ 0x30
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	633b      	str	r3, [r7, #48]	@ 0x30
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	633b      	str	r3, [r7, #48]	@ 0x30
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	e16b      	b.n	8006552 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627e:	2b00      	cmp	r3, #0
 8006280:	d11d      	bne.n	80062be <I2C_Master_ADDR+0x98>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800628a:	d118      	bne.n	80062be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80062bc:	e149      	b.n	8006552 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d113      	bne.n	80062f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062c8:	2300      	movs	r3, #0
 80062ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	e120      	b.n	8006532 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	f040 808a 	bne.w	8006410 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006302:	d137      	bne.n	8006374 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006312:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800631e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006322:	d113      	bne.n	800634c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006332:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006334:	2300      	movs	r3, #0
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	e0f2      	b.n	8006532 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800634c:	2300      	movs	r3, #0
 800634e:	623b      	str	r3, [r7, #32]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	623b      	str	r3, [r7, #32]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e0de      	b.n	8006532 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006376:	2b08      	cmp	r3, #8
 8006378:	d02e      	beq.n	80063d8 <I2C_Master_ADDR+0x1b2>
 800637a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637c:	2b20      	cmp	r3, #32
 800637e:	d02b      	beq.n	80063d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006382:	2b12      	cmp	r3, #18
 8006384:	d102      	bne.n	800638c <I2C_Master_ADDR+0x166>
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	2b01      	cmp	r3, #1
 800638a:	d125      	bne.n	80063d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	2b04      	cmp	r3, #4
 8006390:	d00e      	beq.n	80063b0 <I2C_Master_ADDR+0x18a>
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	2b02      	cmp	r3, #2
 8006396:	d00b      	beq.n	80063b0 <I2C_Master_ADDR+0x18a>
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	2b10      	cmp	r3, #16
 800639c:	d008      	beq.n	80063b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	e007      	b.n	80063c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	61fb      	str	r3, [r7, #28]
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	e0ac      	b.n	8006532 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e8:	2300      	movs	r3, #0
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e090      	b.n	8006532 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d158      	bne.n	80064cc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641c:	2b04      	cmp	r3, #4
 800641e:	d021      	beq.n	8006464 <I2C_Master_ADDR+0x23e>
 8006420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006422:	2b02      	cmp	r3, #2
 8006424:	d01e      	beq.n	8006464 <I2C_Master_ADDR+0x23e>
 8006426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006428:	2b10      	cmp	r3, #16
 800642a:	d01b      	beq.n	8006464 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800643a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e012      	b.n	800648a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006472:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006498:	d14b      	bne.n	8006532 <I2C_Master_ADDR+0x30c>
 800649a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064a0:	d00b      	beq.n	80064ba <I2C_Master_ADDR+0x294>
 80064a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d008      	beq.n	80064ba <I2C_Master_ADDR+0x294>
 80064a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d005      	beq.n	80064ba <I2C_Master_ADDR+0x294>
 80064ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d002      	beq.n	80064ba <I2C_Master_ADDR+0x294>
 80064b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d13b      	bne.n	8006532 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	e032      	b.n	8006532 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064da:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ea:	d117      	bne.n	800651c <I2C_Master_ADDR+0x2f6>
 80064ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064f2:	d00b      	beq.n	800650c <I2C_Master_ADDR+0x2e6>
 80064f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d008      	beq.n	800650c <I2C_Master_ADDR+0x2e6>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d005      	beq.n	800650c <I2C_Master_ADDR+0x2e6>
 8006500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006502:	2b10      	cmp	r3, #16
 8006504:	d002      	beq.n	800650c <I2C_Master_ADDR+0x2e6>
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	2b20      	cmp	r3, #32
 800650a:	d107      	bne.n	800651c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800651a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006538:	e00b      	b.n	8006552 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	60bb      	str	r3, [r7, #8]
 800654e:	68bb      	ldr	r3, [r7, #8]
}
 8006550:	e7ff      	b.n	8006552 <I2C_Master_ADDR+0x32c>
 8006552:	bf00      	nop
 8006554:	3744      	adds	r7, #68	@ 0x44
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr

0800655c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800656a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d02b      	beq.n	80065ce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657a:	781a      	ldrb	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d114      	bne.n	80065ce <I2C_SlaveTransmit_TXE+0x72>
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b29      	cmp	r3, #41	@ 0x29
 80065a8:	d111      	bne.n	80065ce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2221      	movs	r2, #33	@ 0x21
 80065be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2228      	movs	r2, #40	@ 0x28
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff f9cf 	bl	800596c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d011      	beq.n	800660c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006624:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02c      	beq.n	800668a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691a      	ldr	r2, [r3, #16]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d114      	bne.n	800668a <I2C_SlaveReceive_RXNE+0x74>
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	2b2a      	cmp	r3, #42	@ 0x2a
 8006664:	d111      	bne.n	800668a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006674:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2222      	movs	r2, #34	@ 0x22
 800667a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2228      	movs	r2, #40	@ 0x28
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff f97a 	bl	800597e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d012      	beq.n	80066ca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr

080066d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80066ee:	2b28      	cmp	r3, #40	@ 0x28
 80066f0:	d125      	bne.n	800673e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006700:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006716:	2b00      	cmp	r3, #0
 8006718:	d103      	bne.n	8006722 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	81bb      	strh	r3, [r7, #12]
 8006720:	e002      	b.n	8006728 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006730:	89ba      	ldrh	r2, [r7, #12]
 8006732:	7bfb      	ldrb	r3, [r7, #15]
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff f92a 	bl	8005990 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800673c:	e00e      	b.n	800675c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800675c:	bf00      	nop
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006772:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006782:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006784:	2300      	movs	r3, #0
 8006786:	60bb      	str	r3, [r7, #8]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067c0:	d172      	bne.n	80068a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	2b22      	cmp	r3, #34	@ 0x22
 80067c6:	d002      	beq.n	80067ce <I2C_Slave_STOPF+0x6a>
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80067cc:	d135      	bne.n	800683a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	f043 0204 	orr.w	r2, r3, #4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006800:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe f81a 	bl	8004840 <HAL_DMA_GetState>
 800680c:	4603      	mov	r3, r0
 800680e:	2b01      	cmp	r3, #1
 8006810:	d049      	beq.n	80068a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006816:	4a69      	ldr	r2, [pc, #420]	@ (80069bc <I2C_Slave_STOPF+0x258>)
 8006818:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681e:	4618      	mov	r0, r3
 8006820:	f7fd ff96 	bl	8004750 <HAL_DMA_Abort_IT>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d03d      	beq.n	80068a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006834:	4610      	mov	r0, r2
 8006836:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006838:	e035      	b.n	80068a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	b29a      	uxth	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	f043 0204 	orr.w	r2, r3, #4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800686c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006872:	4618      	mov	r0, r3
 8006874:	f7fd ffe4 	bl	8004840 <HAL_DMA_GetState>
 8006878:	4603      	mov	r3, r0
 800687a:	2b01      	cmp	r3, #1
 800687c:	d014      	beq.n	80068a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006882:	4a4e      	ldr	r2, [pc, #312]	@ (80069bc <I2C_Slave_STOPF+0x258>)
 8006884:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800688a:	4618      	mov	r0, r3
 800688c:	f7fd ff60 	bl	8004750 <HAL_DMA_Abort_IT>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800689a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	e000      	b.n	80068a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d03e      	beq.n	8006930 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d112      	bne.n	80068e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d112      	bne.n	800691a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d005      	beq.n	8006930 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	f043 0204 	orr.w	r2, r3, #4
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f8b7 	bl	8006aac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800693e:	e039      	b.n	80069b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	2b2a      	cmp	r3, #42	@ 0x2a
 8006944:	d109      	bne.n	800695a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2228      	movs	r2, #40	@ 0x28
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff f812 	bl	800597e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b28      	cmp	r3, #40	@ 0x28
 8006964:	d111      	bne.n	800698a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a15      	ldr	r2, [pc, #84]	@ (80069c0 <I2C_Slave_STOPF+0x25c>)
 800696a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff f811 	bl	80059aa <HAL_I2C_ListenCpltCallback>
}
 8006988:	e014      	b.n	80069b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698e:	2b22      	cmp	r3, #34	@ 0x22
 8006990:	d002      	beq.n	8006998 <I2C_Slave_STOPF+0x234>
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b22      	cmp	r3, #34	@ 0x22
 8006996:	d10d      	bne.n	80069b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe ffe5 	bl	800597e <HAL_I2C_SlaveRxCpltCallback>
}
 80069b4:	bf00      	nop
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	0800700d 	.word	0x0800700d
 80069c0:	ffff0000 	.word	0xffff0000

080069c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d002      	beq.n	80069e6 <I2C_Slave_AF+0x22>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d129      	bne.n	8006a3a <I2C_Slave_AF+0x76>
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	2b28      	cmp	r3, #40	@ 0x28
 80069ea:	d126      	bne.n	8006a3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a2e      	ldr	r2, [pc, #184]	@ (8006aa8 <I2C_Slave_AF+0xe4>)
 80069f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fe ffb9 	bl	80059aa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006a38:	e031      	b.n	8006a9e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	2b21      	cmp	r3, #33	@ 0x21
 8006a3e:	d129      	bne.n	8006a94 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a19      	ldr	r2, [pc, #100]	@ (8006aa8 <I2C_Slave_AF+0xe4>)
 8006a44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2221      	movs	r2, #33	@ 0x21
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a84:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fe f9e2 	bl	8004e50 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7fe ff6d 	bl	800596c <HAL_I2C_SlaveTxCpltCallback>
}
 8006a92:	e004      	b.n	8006a9e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a9c:	615a      	str	r2, [r3, #20]
}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	ffff0000 	.word	0xffff0000

08006aac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ac2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
 8006ac6:	2b10      	cmp	r3, #16
 8006ac8:	d002      	beq.n	8006ad0 <I2C_ITError+0x24>
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b40      	cmp	r3, #64	@ 0x40
 8006ace:	d10a      	bne.n	8006ae6 <I2C_ITError+0x3a>
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b22      	cmp	r3, #34	@ 0x22
 8006ad4:	d107      	bne.n	8006ae6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ae4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aec:	2b28      	cmp	r3, #40	@ 0x28
 8006aee:	d107      	bne.n	8006b00 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2228      	movs	r2, #40	@ 0x28
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006afe:	e015      	b.n	8006b2c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b0e:	d00a      	beq.n	8006b26 <I2C_ITError+0x7a>
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	2b60      	cmp	r3, #96	@ 0x60
 8006b14:	d007      	beq.n	8006b26 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b3a:	d162      	bne.n	8006c02 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b4a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d020      	beq.n	8006b9c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b5e:	4a6a      	ldr	r2, [pc, #424]	@ (8006d08 <I2C_ITError+0x25c>)
 8006b60:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fd fdf2 	bl	8004750 <HAL_DMA_Abort_IT>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8089 	beq.w	8006c86 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0201 	bic.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b96:	4610      	mov	r0, r2
 8006b98:	4798      	blx	r3
 8006b9a:	e074      	b.n	8006c86 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba0:	4a59      	ldr	r2, [pc, #356]	@ (8006d08 <I2C_ITError+0x25c>)
 8006ba2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fd fdd1 	bl	8004750 <HAL_DMA_Abort_IT>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d068      	beq.n	8006c86 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbe:	2b40      	cmp	r3, #64	@ 0x40
 8006bc0:	d10b      	bne.n	8006bda <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	e041      	b.n	8006c86 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b60      	cmp	r3, #96	@ 0x60
 8006c0c:	d125      	bne.n	8006c5a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d10b      	bne.n	8006c42 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fe fecd 	bl	80059f2 <HAL_I2C_AbortCpltCallback>
 8006c58:	e015      	b.n	8006c86 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c64:	2b40      	cmp	r3, #64	@ 0x40
 8006c66:	d10b      	bne.n	8006c80 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7fe fead 	bl	80059e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10e      	bne.n	8006cb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d109      	bne.n	8006cb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d104      	bne.n	8006cb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d007      	beq.n	8006cc4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006cc2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d113      	bne.n	8006d00 <I2C_ITError+0x254>
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	2b28      	cmp	r3, #40	@ 0x28
 8006cdc:	d110      	bne.n	8006d00 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8006d0c <I2C_ITError+0x260>)
 8006ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fe fe55 	bl	80059aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	0800700d 	.word	0x0800700d
 8006d0c:	ffff0000 	.word	0xffff0000

08006d10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	4608      	mov	r0, r1
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	817b      	strh	r3, [r7, #10]
 8006d22:	460b      	mov	r3, r1
 8006d24:	813b      	strh	r3, [r7, #8]
 8006d26:	4613      	mov	r3, r2
 8006d28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fa08 	bl	800715c <I2C_WaitOnFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00d      	beq.n	8006d6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d60:	d103      	bne.n	8006d6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e05f      	b.n	8006e2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d6e:	897b      	ldrh	r3, [r7, #10]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006d7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	492d      	ldr	r1, [pc, #180]	@ (8006e38 <I2C_RequestMemoryWrite+0x128>)
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 fa63 	bl	8007250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e04c      	b.n	8006e2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dac:	6a39      	ldr	r1, [r7, #32]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 faee 	bl	8007390 <I2C_WaitOnTXEFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00d      	beq.n	8006dd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d107      	bne.n	8006dd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e02b      	b.n	8006e2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d105      	bne.n	8006de8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ddc:	893b      	ldrh	r3, [r7, #8]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	611a      	str	r2, [r3, #16]
 8006de6:	e021      	b.n	8006e2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006de8:	893b      	ldrh	r3, [r7, #8]
 8006dea:	0a1b      	lsrs	r3, r3, #8
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df8:	6a39      	ldr	r1, [r7, #32]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fac8 	bl	8007390 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00d      	beq.n	8006e22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d107      	bne.n	8006e1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e005      	b.n	8006e2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e22:	893b      	ldrh	r3, [r7, #8]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	00010002 	.word	0x00010002

08006e3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	4608      	mov	r0, r1
 8006e46:	4611      	mov	r1, r2
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	817b      	strh	r3, [r7, #10]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	813b      	strh	r3, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f96a 	bl	800715c <I2C_WaitOnFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e9c:	d103      	bne.n	8006ea6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e0aa      	b.n	8007000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eaa:	897b      	ldrh	r3, [r7, #10]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	461a      	mov	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006eb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	6a3a      	ldr	r2, [r7, #32]
 8006ebe:	4952      	ldr	r1, [pc, #328]	@ (8007008 <I2C_RequestMemoryRead+0x1cc>)
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f9c5 	bl	8007250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e097      	b.n	8007000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee8:	6a39      	ldr	r1, [r7, #32]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fa50 	bl	8007390 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00d      	beq.n	8006f12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d107      	bne.n	8006f0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e076      	b.n	8007000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f12:	88fb      	ldrh	r3, [r7, #6]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d105      	bne.n	8006f24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f18:	893b      	ldrh	r3, [r7, #8]
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	611a      	str	r2, [r3, #16]
 8006f22:	e021      	b.n	8006f68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f24:	893b      	ldrh	r3, [r7, #8]
 8006f26:	0a1b      	lsrs	r3, r3, #8
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f34:	6a39      	ldr	r1, [r7, #32]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 fa2a 	bl	8007390 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00d      	beq.n	8006f5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d107      	bne.n	8006f5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e050      	b.n	8007000 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f5e:	893b      	ldrh	r3, [r7, #8]
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6a:	6a39      	ldr	r1, [r7, #32]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fa0f 	bl	8007390 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00d      	beq.n	8006f94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d107      	bne.n	8006f90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e035      	b.n	8007000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fa2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f8d3 	bl	800715c <I2C_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00d      	beq.n	8006fd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fca:	d103      	bne.n	8006fd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e013      	b.n	8007000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006fd8:	897b      	ldrh	r3, [r7, #10]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fea:	6a3a      	ldr	r2, [r7, #32]
 8006fec:	4906      	ldr	r1, [pc, #24]	@ (8007008 <I2C_RequestMemoryRead+0x1cc>)
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 f92e 	bl	8007250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	00010002 	.word	0x00010002

0800700c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007024:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007026:	4b4b      	ldr	r3, [pc, #300]	@ (8007154 <I2C_DMAAbort+0x148>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	08db      	lsrs	r3, r3, #3
 800702c:	4a4a      	ldr	r2, [pc, #296]	@ (8007158 <I2C_DMAAbort+0x14c>)
 800702e:	fba2 2303 	umull	r2, r3, r2, r3
 8007032:	0a1a      	lsrs	r2, r3, #8
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	00da      	lsls	r2, r3, #3
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	f043 0220 	orr.w	r2, r3, #32
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007052:	e00a      	b.n	800706a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3b01      	subs	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007068:	d0ea      	beq.n	8007040 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007076:	2200      	movs	r2, #0
 8007078:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	2200      	movs	r2, #0
 8007088:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007098:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2200      	movs	r2, #0
 800709e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ac:	2200      	movs	r2, #0
 80070ae:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070bc:	2200      	movs	r2, #0
 80070be:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b60      	cmp	r3, #96	@ 0x60
 80070da:	d10e      	bne.n	80070fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2200      	movs	r2, #0
 80070f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070f2:	6978      	ldr	r0, [r7, #20]
 80070f4:	f7fe fc7d 	bl	80059f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070f8:	e027      	b.n	800714a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070fa:	7cfb      	ldrb	r3, [r7, #19]
 80070fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007100:	2b28      	cmp	r3, #40	@ 0x28
 8007102:	d117      	bne.n	8007134 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0201 	orr.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007122:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2200      	movs	r2, #0
 8007128:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2228      	movs	r2, #40	@ 0x28
 800712e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007132:	e007      	b.n	8007144 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007144:	6978      	ldr	r0, [r7, #20]
 8007146:	f7fe fc4b 	bl	80059e0 <HAL_I2C_ErrorCallback>
}
 800714a:	bf00      	nop
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000000 	.word	0x20000000
 8007158:	14f8b589 	.word	0x14f8b589

0800715c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800716c:	e048      	b.n	8007200 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007174:	d044      	beq.n	8007200 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007176:	f7fc fd4b 	bl	8003c10 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d302      	bcc.n	800718c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d139      	bne.n	8007200 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	0c1b      	lsrs	r3, r3, #16
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b01      	cmp	r3, #1
 8007194:	d10d      	bne.n	80071b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	43da      	mvns	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4013      	ands	r3, r2
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	bf0c      	ite	eq
 80071a8:	2301      	moveq	r3, #1
 80071aa:	2300      	movne	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	461a      	mov	r2, r3
 80071b0:	e00c      	b.n	80071cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	43da      	mvns	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	4013      	ands	r3, r2
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bf0c      	ite	eq
 80071c4:	2301      	moveq	r3, #1
 80071c6:	2300      	movne	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d116      	bne.n	8007200 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	f043 0220 	orr.w	r2, r3, #32
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e023      	b.n	8007248 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	0c1b      	lsrs	r3, r3, #16
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b01      	cmp	r3, #1
 8007208:	d10d      	bne.n	8007226 <I2C_WaitOnFlagUntilTimeout+0xca>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	43da      	mvns	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4013      	ands	r3, r2
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	bf0c      	ite	eq
 800721c:	2301      	moveq	r3, #1
 800721e:	2300      	movne	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	461a      	mov	r2, r3
 8007224:	e00c      	b.n	8007240 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	43da      	mvns	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	4013      	ands	r3, r2
 8007232:	b29b      	uxth	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	bf0c      	ite	eq
 8007238:	2301      	moveq	r3, #1
 800723a:	2300      	movne	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	429a      	cmp	r2, r3
 8007244:	d093      	beq.n	800716e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800725e:	e071      	b.n	8007344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800726a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800726e:	d123      	bne.n	80072b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800727e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007288:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a4:	f043 0204 	orr.w	r2, r3, #4
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e067      	b.n	8007388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d041      	beq.n	8007344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c0:	f7fc fca6 	bl	8003c10 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d302      	bcc.n	80072d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d136      	bne.n	8007344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d10c      	bne.n	80072fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	43da      	mvns	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bf14      	ite	ne
 80072f2:	2301      	movne	r3, #1
 80072f4:	2300      	moveq	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	e00b      	b.n	8007312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	43da      	mvns	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4013      	ands	r3, r2
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	bf14      	ite	ne
 800730c:	2301      	movne	r3, #1
 800730e:	2300      	moveq	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d016      	beq.n	8007344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2220      	movs	r2, #32
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007330:	f043 0220 	orr.w	r2, r3, #32
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e021      	b.n	8007388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b01      	cmp	r3, #1
 800734c:	d10c      	bne.n	8007368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	43da      	mvns	r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	4013      	ands	r3, r2
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	bf14      	ite	ne
 8007360:	2301      	movne	r3, #1
 8007362:	2300      	moveq	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	e00b      	b.n	8007380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	43da      	mvns	r2, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	4013      	ands	r3, r2
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	bf14      	ite	ne
 800737a:	2301      	movne	r3, #1
 800737c:	2300      	moveq	r3, #0
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	f47f af6d 	bne.w	8007260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800739c:	e034      	b.n	8007408 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 f915 	bl	80075ce <I2C_IsAcknowledgeFailed>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e034      	b.n	8007418 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b4:	d028      	beq.n	8007408 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b6:	f7fc fc2b 	bl	8003c10 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d302      	bcc.n	80073cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d11d      	bne.n	8007408 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d6:	2b80      	cmp	r3, #128	@ 0x80
 80073d8:	d016      	beq.n	8007408 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f4:	f043 0220 	orr.w	r2, r3, #32
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e007      	b.n	8007418 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007412:	2b80      	cmp	r3, #128	@ 0x80
 8007414:	d1c3      	bne.n	800739e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800742c:	e034      	b.n	8007498 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f8cd 	bl	80075ce <I2C_IsAcknowledgeFailed>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e034      	b.n	80074a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007444:	d028      	beq.n	8007498 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007446:	f7fc fbe3 	bl	8003c10 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	429a      	cmp	r2, r3
 8007454:	d302      	bcc.n	800745c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11d      	bne.n	8007498 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b04      	cmp	r3, #4
 8007468:	d016      	beq.n	8007498 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e007      	b.n	80074a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d1c3      	bne.n	800742e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80074bc:	4b13      	ldr	r3, [pc, #76]	@ (800750c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	08db      	lsrs	r3, r3, #3
 80074c2:	4a13      	ldr	r2, [pc, #76]	@ (8007510 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80074c4:	fba2 2303 	umull	r2, r3, r2, r3
 80074c8:	0a1a      	lsrs	r2, r3, #8
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d107      	bne.n	80074ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e008      	b.n	8007500 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074fc:	d0e9      	beq.n	80074d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000000 	.word	0x20000000
 8007510:	14f8b589 	.word	0x14f8b589

08007514 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007520:	e049      	b.n	80075b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b10      	cmp	r3, #16
 800752e:	d119      	bne.n	8007564 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f06f 0210 	mvn.w	r2, #16
 8007538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e030      	b.n	80075c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007564:	f7fc fb54 	bl	8003c10 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	429a      	cmp	r2, r3
 8007572:	d302      	bcc.n	800757a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d11d      	bne.n	80075b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007584:	2b40      	cmp	r3, #64	@ 0x40
 8007586:	d016      	beq.n	80075b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a2:	f043 0220 	orr.w	r2, r3, #32
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e007      	b.n	80075c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c0:	2b40      	cmp	r3, #64	@ 0x40
 80075c2:	d1ae      	bne.n	8007522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e4:	d11b      	bne.n	800761e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80075ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760a:	f043 0204 	orr.w	r2, r3, #4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e000      	b.n	8007620 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr

0800762a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007636:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800763a:	d103      	bne.n	8007644 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007642:	e007      	b.n	8007654 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007648:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800764c:	d102      	bne.n	8007654 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2208      	movs	r2, #8
 8007652:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr
	...

08007660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e272      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 8087 	beq.w	800778e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007680:	4b92      	ldr	r3, [pc, #584]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f003 030c 	and.w	r3, r3, #12
 8007688:	2b04      	cmp	r3, #4
 800768a:	d00c      	beq.n	80076a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800768c:	4b8f      	ldr	r3, [pc, #572]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f003 030c 	and.w	r3, r3, #12
 8007694:	2b08      	cmp	r3, #8
 8007696:	d112      	bne.n	80076be <HAL_RCC_OscConfig+0x5e>
 8007698:	4b8c      	ldr	r3, [pc, #560]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a4:	d10b      	bne.n	80076be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a6:	4b89      	ldr	r3, [pc, #548]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d06c      	beq.n	800778c <HAL_RCC_OscConfig+0x12c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d168      	bne.n	800778c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e24c      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c6:	d106      	bne.n	80076d6 <HAL_RCC_OscConfig+0x76>
 80076c8:	4b80      	ldr	r3, [pc, #512]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a7f      	ldr	r2, [pc, #508]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80076ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	e02e      	b.n	8007734 <HAL_RCC_OscConfig+0xd4>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10c      	bne.n	80076f8 <HAL_RCC_OscConfig+0x98>
 80076de:	4b7b      	ldr	r3, [pc, #492]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a7a      	ldr	r2, [pc, #488]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80076e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	4b78      	ldr	r3, [pc, #480]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a77      	ldr	r2, [pc, #476]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80076f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e01d      	b.n	8007734 <HAL_RCC_OscConfig+0xd4>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007700:	d10c      	bne.n	800771c <HAL_RCC_OscConfig+0xbc>
 8007702:	4b72      	ldr	r3, [pc, #456]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a71      	ldr	r2, [pc, #452]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	4b6f      	ldr	r3, [pc, #444]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a6e      	ldr	r2, [pc, #440]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007718:	6013      	str	r3, [r2, #0]
 800771a:	e00b      	b.n	8007734 <HAL_RCC_OscConfig+0xd4>
 800771c:	4b6b      	ldr	r3, [pc, #428]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a6a      	ldr	r2, [pc, #424]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	4b68      	ldr	r3, [pc, #416]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a67      	ldr	r2, [pc, #412]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 800772e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007732:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d013      	beq.n	8007764 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800773c:	f7fc fa68 	bl	8003c10 <HAL_GetTick>
 8007740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007742:	e008      	b.n	8007756 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007744:	f7fc fa64 	bl	8003c10 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b64      	cmp	r3, #100	@ 0x64
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e200      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007756:	4b5d      	ldr	r3, [pc, #372]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0f0      	beq.n	8007744 <HAL_RCC_OscConfig+0xe4>
 8007762:	e014      	b.n	800778e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007764:	f7fc fa54 	bl	8003c10 <HAL_GetTick>
 8007768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800776c:	f7fc fa50 	bl	8003c10 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b64      	cmp	r3, #100	@ 0x64
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e1ec      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800777e:	4b53      	ldr	r3, [pc, #332]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <HAL_RCC_OscConfig+0x10c>
 800778a:	e000      	b.n	800778e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800778c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d063      	beq.n	8007862 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800779a:	4b4c      	ldr	r3, [pc, #304]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f003 030c 	and.w	r3, r3, #12
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80077a6:	4b49      	ldr	r3, [pc, #292]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f003 030c 	and.w	r3, r3, #12
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d11c      	bne.n	80077ec <HAL_RCC_OscConfig+0x18c>
 80077b2:	4b46      	ldr	r3, [pc, #280]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d116      	bne.n	80077ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077be:	4b43      	ldr	r3, [pc, #268]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <HAL_RCC_OscConfig+0x176>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d001      	beq.n	80077d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e1c0      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077d6:	4b3d      	ldr	r3, [pc, #244]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	4939      	ldr	r1, [pc, #228]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ea:	e03a      	b.n	8007862 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d020      	beq.n	8007836 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077f4:	4b36      	ldr	r3, [pc, #216]	@ (80078d0 <HAL_RCC_OscConfig+0x270>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077fa:	f7fc fa09 	bl	8003c10 <HAL_GetTick>
 80077fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007800:	e008      	b.n	8007814 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007802:	f7fc fa05 	bl	8003c10 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e1a1      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007814:	4b2d      	ldr	r3, [pc, #180]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0f0      	beq.n	8007802 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007820:	4b2a      	ldr	r3, [pc, #168]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4927      	ldr	r1, [pc, #156]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007830:	4313      	orrs	r3, r2
 8007832:	600b      	str	r3, [r1, #0]
 8007834:	e015      	b.n	8007862 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007836:	4b26      	ldr	r3, [pc, #152]	@ (80078d0 <HAL_RCC_OscConfig+0x270>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800783c:	f7fc f9e8 	bl	8003c10 <HAL_GetTick>
 8007840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007844:	f7fc f9e4 	bl	8003c10 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e180      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007856:	4b1d      	ldr	r3, [pc, #116]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1f0      	bne.n	8007844 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d03a      	beq.n	80078e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d019      	beq.n	80078aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007876:	4b17      	ldr	r3, [pc, #92]	@ (80078d4 <HAL_RCC_OscConfig+0x274>)
 8007878:	2201      	movs	r2, #1
 800787a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800787c:	f7fc f9c8 	bl	8003c10 <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007884:	f7fc f9c4 	bl	8003c10 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e160      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007896:	4b0d      	ldr	r3, [pc, #52]	@ (80078cc <HAL_RCC_OscConfig+0x26c>)
 8007898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f0      	beq.n	8007884 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80078a2:	2001      	movs	r0, #1
 80078a4:	f000 fafe 	bl	8007ea4 <RCC_Delay>
 80078a8:	e01c      	b.n	80078e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078aa:	4b0a      	ldr	r3, [pc, #40]	@ (80078d4 <HAL_RCC_OscConfig+0x274>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078b0:	f7fc f9ae 	bl	8003c10 <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078b6:	e00f      	b.n	80078d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078b8:	f7fc f9aa 	bl	8003c10 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d908      	bls.n	80078d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e146      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
 80078ca:	bf00      	nop
 80078cc:	40021000 	.word	0x40021000
 80078d0:	42420000 	.word	0x42420000
 80078d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078d8:	4b92      	ldr	r3, [pc, #584]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e9      	bne.n	80078b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 80a6 	beq.w	8007a3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078f6:	4b8b      	ldr	r3, [pc, #556]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10d      	bne.n	800791e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007902:	4b88      	ldr	r3, [pc, #544]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	4a87      	ldr	r2, [pc, #540]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800790c:	61d3      	str	r3, [r2, #28]
 800790e:	4b85      	ldr	r3, [pc, #532]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007916:	60bb      	str	r3, [r7, #8]
 8007918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800791a:	2301      	movs	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800791e:	4b82      	ldr	r3, [pc, #520]	@ (8007b28 <HAL_RCC_OscConfig+0x4c8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007926:	2b00      	cmp	r3, #0
 8007928:	d118      	bne.n	800795c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800792a:	4b7f      	ldr	r3, [pc, #508]	@ (8007b28 <HAL_RCC_OscConfig+0x4c8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a7e      	ldr	r2, [pc, #504]	@ (8007b28 <HAL_RCC_OscConfig+0x4c8>)
 8007930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007936:	f7fc f96b 	bl	8003c10 <HAL_GetTick>
 800793a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800793c:	e008      	b.n	8007950 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800793e:	f7fc f967 	bl	8003c10 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b64      	cmp	r3, #100	@ 0x64
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e103      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007950:	4b75      	ldr	r3, [pc, #468]	@ (8007b28 <HAL_RCC_OscConfig+0x4c8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0f0      	beq.n	800793e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d106      	bne.n	8007972 <HAL_RCC_OscConfig+0x312>
 8007964:	4b6f      	ldr	r3, [pc, #444]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	4a6e      	ldr	r2, [pc, #440]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 800796a:	f043 0301 	orr.w	r3, r3, #1
 800796e:	6213      	str	r3, [r2, #32]
 8007970:	e02d      	b.n	80079ce <HAL_RCC_OscConfig+0x36e>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10c      	bne.n	8007994 <HAL_RCC_OscConfig+0x334>
 800797a:	4b6a      	ldr	r3, [pc, #424]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	4a69      	ldr	r2, [pc, #420]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007980:	f023 0301 	bic.w	r3, r3, #1
 8007984:	6213      	str	r3, [r2, #32]
 8007986:	4b67      	ldr	r3, [pc, #412]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	4a66      	ldr	r2, [pc, #408]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 800798c:	f023 0304 	bic.w	r3, r3, #4
 8007990:	6213      	str	r3, [r2, #32]
 8007992:	e01c      	b.n	80079ce <HAL_RCC_OscConfig+0x36e>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2b05      	cmp	r3, #5
 800799a:	d10c      	bne.n	80079b6 <HAL_RCC_OscConfig+0x356>
 800799c:	4b61      	ldr	r3, [pc, #388]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	4a60      	ldr	r2, [pc, #384]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80079a2:	f043 0304 	orr.w	r3, r3, #4
 80079a6:	6213      	str	r3, [r2, #32]
 80079a8:	4b5e      	ldr	r3, [pc, #376]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	4a5d      	ldr	r2, [pc, #372]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80079ae:	f043 0301 	orr.w	r3, r3, #1
 80079b2:	6213      	str	r3, [r2, #32]
 80079b4:	e00b      	b.n	80079ce <HAL_RCC_OscConfig+0x36e>
 80079b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	4a5a      	ldr	r2, [pc, #360]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	6213      	str	r3, [r2, #32]
 80079c2:	4b58      	ldr	r3, [pc, #352]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	4a57      	ldr	r2, [pc, #348]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80079c8:	f023 0304 	bic.w	r3, r3, #4
 80079cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d015      	beq.n	8007a02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079d6:	f7fc f91b 	bl	8003c10 <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079dc:	e00a      	b.n	80079f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079de:	f7fc f917 	bl	8003c10 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d901      	bls.n	80079f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e0b1      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	f003 0302 	and.w	r3, r3, #2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0ee      	beq.n	80079de <HAL_RCC_OscConfig+0x37e>
 8007a00:	e014      	b.n	8007a2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a02:	f7fc f905 	bl	8003c10 <HAL_GetTick>
 8007a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a08:	e00a      	b.n	8007a20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a0a:	f7fc f901 	bl	8003c10 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d901      	bls.n	8007a20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e09b      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a20:	4b40      	ldr	r3, [pc, #256]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1ee      	bne.n	8007a0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d105      	bne.n	8007a3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a32:	4b3c      	ldr	r3, [pc, #240]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	4a3b      	ldr	r2, [pc, #236]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8087 	beq.w	8007b56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a48:	4b36      	ldr	r3, [pc, #216]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f003 030c 	and.w	r3, r3, #12
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d061      	beq.n	8007b18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d146      	bne.n	8007aea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a5c:	4b33      	ldr	r3, [pc, #204]	@ (8007b2c <HAL_RCC_OscConfig+0x4cc>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a62:	f7fc f8d5 	bl	8003c10 <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a68:	e008      	b.n	8007a7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a6a:	f7fc f8d1 	bl	8003c10 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e06d      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a7c:	4b29      	ldr	r3, [pc, #164]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f0      	bne.n	8007a6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a90:	d108      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a92:	4b24      	ldr	r3, [pc, #144]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	4921      	ldr	r1, [pc, #132]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a19      	ldr	r1, [r3, #32]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	491b      	ldr	r1, [pc, #108]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007abc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b2c <HAL_RCC_OscConfig+0x4cc>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac2:	f7fc f8a5 	bl	8003c10 <HAL_GetTick>
 8007ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ac8:	e008      	b.n	8007adc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aca:	f7fc f8a1 	bl	8003c10 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e03d      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007adc:	4b11      	ldr	r3, [pc, #68]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0f0      	beq.n	8007aca <HAL_RCC_OscConfig+0x46a>
 8007ae8:	e035      	b.n	8007b56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aea:	4b10      	ldr	r3, [pc, #64]	@ (8007b2c <HAL_RCC_OscConfig+0x4cc>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af0:	f7fc f88e 	bl	8003c10 <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007af6:	e008      	b.n	8007b0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007af8:	f7fc f88a 	bl	8003c10 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e026      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b0a:	4b06      	ldr	r3, [pc, #24]	@ (8007b24 <HAL_RCC_OscConfig+0x4c4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f0      	bne.n	8007af8 <HAL_RCC_OscConfig+0x498>
 8007b16:	e01e      	b.n	8007b56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d107      	bne.n	8007b30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e019      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
 8007b24:	40021000 	.word	0x40021000
 8007b28:	40007000 	.word	0x40007000
 8007b2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007b30:	4b0b      	ldr	r3, [pc, #44]	@ (8007b60 <HAL_RCC_OscConfig+0x500>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d106      	bne.n	8007b52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d001      	beq.n	8007b56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	40021000 	.word	0x40021000

08007b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e0d0      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b78:	4b6a      	ldr	r3, [pc, #424]	@ (8007d24 <HAL_RCC_ClockConfig+0x1c0>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0307 	and.w	r3, r3, #7
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d910      	bls.n	8007ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b86:	4b67      	ldr	r3, [pc, #412]	@ (8007d24 <HAL_RCC_ClockConfig+0x1c0>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f023 0207 	bic.w	r2, r3, #7
 8007b8e:	4965      	ldr	r1, [pc, #404]	@ (8007d24 <HAL_RCC_ClockConfig+0x1c0>)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b96:	4b63      	ldr	r3, [pc, #396]	@ (8007d24 <HAL_RCC_ClockConfig+0x1c0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d001      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e0b8      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d020      	beq.n	8007bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bc0:	4b59      	ldr	r3, [pc, #356]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	4a58      	ldr	r2, [pc, #352]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bd8:	4b53      	ldr	r3, [pc, #332]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	4a52      	ldr	r2, [pc, #328]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007bde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007be4:	4b50      	ldr	r3, [pc, #320]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	494d      	ldr	r1, [pc, #308]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d040      	beq.n	8007c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d107      	bne.n	8007c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c0a:	4b47      	ldr	r3, [pc, #284]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d115      	bne.n	8007c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e07f      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d107      	bne.n	8007c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c22:	4b41      	ldr	r3, [pc, #260]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e073      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c32:	4b3d      	ldr	r3, [pc, #244]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e06b      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c42:	4b39      	ldr	r3, [pc, #228]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f023 0203 	bic.w	r2, r3, #3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4936      	ldr	r1, [pc, #216]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c54:	f7fb ffdc 	bl	8003c10 <HAL_GetTick>
 8007c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c5a:	e00a      	b.n	8007c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c5c:	f7fb ffd8 	bl	8003c10 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e053      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c72:	4b2d      	ldr	r3, [pc, #180]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f003 020c 	and.w	r2, r3, #12
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d1eb      	bne.n	8007c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c84:	4b27      	ldr	r3, [pc, #156]	@ (8007d24 <HAL_RCC_ClockConfig+0x1c0>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d210      	bcs.n	8007cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c92:	4b24      	ldr	r3, [pc, #144]	@ (8007d24 <HAL_RCC_ClockConfig+0x1c0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f023 0207 	bic.w	r2, r3, #7
 8007c9a:	4922      	ldr	r1, [pc, #136]	@ (8007d24 <HAL_RCC_ClockConfig+0x1c0>)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ca2:	4b20      	ldr	r3, [pc, #128]	@ (8007d24 <HAL_RCC_ClockConfig+0x1c0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d001      	beq.n	8007cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e032      	b.n	8007d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cc0:	4b19      	ldr	r3, [pc, #100]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	4916      	ldr	r1, [pc, #88]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007cde:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	490e      	ldr	r1, [pc, #56]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cf2:	f000 f821 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d28 <HAL_RCC_ClockConfig+0x1c4>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	091b      	lsrs	r3, r3, #4
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	490a      	ldr	r1, [pc, #40]	@ (8007d2c <HAL_RCC_ClockConfig+0x1c8>)
 8007d04:	5ccb      	ldrb	r3, [r1, r3]
 8007d06:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0a:	4a09      	ldr	r2, [pc, #36]	@ (8007d30 <HAL_RCC_ClockConfig+0x1cc>)
 8007d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d0e:	4b09      	ldr	r3, [pc, #36]	@ (8007d34 <HAL_RCC_ClockConfig+0x1d0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fb fda0 	bl	8003858 <HAL_InitTick>

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	40022000 	.word	0x40022000
 8007d28:	40021000 	.word	0x40021000
 8007d2c:	0800e1fc 	.word	0x0800e1fc
 8007d30:	20000000 	.word	0x20000000
 8007d34:	20000004 	.word	0x20000004

08007d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	2300      	movs	r3, #0
 8007d44:	60bb      	str	r3, [r7, #8]
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007d52:	4b1e      	ldr	r3, [pc, #120]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 030c 	and.w	r3, r3, #12
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d002      	beq.n	8007d68 <HAL_RCC_GetSysClockFreq+0x30>
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d003      	beq.n	8007d6e <HAL_RCC_GetSysClockFreq+0x36>
 8007d66:	e027      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d68:	4b19      	ldr	r3, [pc, #100]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d6a:	613b      	str	r3, [r7, #16]
      break;
 8007d6c:	e027      	b.n	8007dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	0c9b      	lsrs	r3, r3, #18
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	4a17      	ldr	r2, [pc, #92]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007d78:	5cd3      	ldrb	r3, [r2, r3]
 8007d7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d010      	beq.n	8007da8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d86:	4b11      	ldr	r3, [pc, #68]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	0c5b      	lsrs	r3, r3, #17
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	4a11      	ldr	r2, [pc, #68]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007d92:	5cd3      	ldrb	r3, [r2, r3]
 8007d94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d9a:	fb03 f202 	mul.w	r2, r3, r2
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	e004      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a0c      	ldr	r2, [pc, #48]	@ (8007ddc <HAL_RCC_GetSysClockFreq+0xa4>)
 8007dac:	fb02 f303 	mul.w	r3, r2, r3
 8007db0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	613b      	str	r3, [r7, #16]
      break;
 8007db6:	e002      	b.n	8007dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007dba:	613b      	str	r3, [r7, #16]
      break;
 8007dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dbe:	693b      	ldr	r3, [r7, #16]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	40021000 	.word	0x40021000
 8007dd0:	007a1200 	.word	0x007a1200
 8007dd4:	0800e214 	.word	0x0800e214
 8007dd8:	0800e224 	.word	0x0800e224
 8007ddc:	003d0900 	.word	0x003d0900

08007de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007de4:	4b02      	ldr	r3, [pc, #8]	@ (8007df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007de6:	681b      	ldr	r3, [r3, #0]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr
 8007df0:	20000000 	.word	0x20000000

08007df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007df8:	f7ff fff2 	bl	8007de0 <HAL_RCC_GetHCLKFreq>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	4b05      	ldr	r3, [pc, #20]	@ (8007e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	0a1b      	lsrs	r3, r3, #8
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	4903      	ldr	r1, [pc, #12]	@ (8007e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e0a:	5ccb      	ldrb	r3, [r1, r3]
 8007e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	40021000 	.word	0x40021000
 8007e18:	0800e20c 	.word	0x0800e20c

08007e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e20:	f7ff ffde 	bl	8007de0 <HAL_RCC_GetHCLKFreq>
 8007e24:	4602      	mov	r2, r0
 8007e26:	4b05      	ldr	r3, [pc, #20]	@ (8007e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	0adb      	lsrs	r3, r3, #11
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	4903      	ldr	r1, [pc, #12]	@ (8007e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e32:	5ccb      	ldrb	r3, [r1, r3]
 8007e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	40021000 	.word	0x40021000
 8007e40:	0800e20c 	.word	0x0800e20c

08007e44 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	220f      	movs	r2, #15
 8007e52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e54:	4b11      	ldr	r3, [pc, #68]	@ (8007e9c <HAL_RCC_GetClockConfig+0x58>)
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f003 0203 	and.w	r2, r3, #3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e60:	4b0e      	ldr	r3, [pc, #56]	@ (8007e9c <HAL_RCC_GetClockConfig+0x58>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e9c <HAL_RCC_GetClockConfig+0x58>)
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e78:	4b08      	ldr	r3, [pc, #32]	@ (8007e9c <HAL_RCC_GetClockConfig+0x58>)
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	08db      	lsrs	r3, r3, #3
 8007e7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e86:	4b06      	ldr	r3, [pc, #24]	@ (8007ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0207 	and.w	r2, r3, #7
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bc80      	pop	{r7}
 8007e9a:	4770      	bx	lr
 8007e9c:	40021000 	.word	0x40021000
 8007ea0:	40022000 	.word	0x40022000

08007ea4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007eac:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed8 <RCC_Delay+0x34>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8007edc <RCC_Delay+0x38>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	0a5b      	lsrs	r3, r3, #9
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	fb02 f303 	mul.w	r3, r2, r3
 8007ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007ec0:	bf00      	nop
  }
  while (Delay --);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	1e5a      	subs	r2, r3, #1
 8007ec6:	60fa      	str	r2, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1f9      	bne.n	8007ec0 <RCC_Delay+0x1c>
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr
 8007ed8:	20000000 	.word	0x20000000
 8007edc:	10624dd3 	.word	0x10624dd3

08007ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d07d      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007efc:	2300      	movs	r3, #0
 8007efe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f00:	4b4f      	ldr	r3, [pc, #316]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10d      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	4a4b      	ldr	r2, [pc, #300]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f16:	61d3      	str	r3, [r2, #28]
 8007f18:	4b49      	ldr	r3, [pc, #292]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f24:	2301      	movs	r3, #1
 8007f26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f28:	4b46      	ldr	r3, [pc, #280]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d118      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f34:	4b43      	ldr	r3, [pc, #268]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a42      	ldr	r2, [pc, #264]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f40:	f7fb fe66 	bl	8003c10 <HAL_GetTick>
 8007f44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f46:	e008      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f48:	f7fb fe62 	bl	8003c10 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b64      	cmp	r3, #100	@ 0x64
 8007f54:	d901      	bls.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e06d      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0f0      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f66:	4b36      	ldr	r3, [pc, #216]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d02e      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d027      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f84:	4b2e      	ldr	r3, [pc, #184]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8008048 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f94:	4b2c      	ldr	r3, [pc, #176]	@ (8008048 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007f9a:	4a29      	ldr	r2, [pc, #164]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d014      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007faa:	f7fb fe31 	bl	8003c10 <HAL_GetTick>
 8007fae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fb0:	e00a      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb2:	f7fb fe2d 	bl	8003c10 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e036      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d0ee      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	4917      	ldr	r1, [pc, #92]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d105      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fec:	4b14      	ldr	r3, [pc, #80]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	4a13      	ldr	r2, [pc, #76]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ff6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d008      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008004:	4b0e      	ldr	r3, [pc, #56]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	490b      	ldr	r1, [pc, #44]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008012:	4313      	orrs	r3, r2
 8008014:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0310 	and.w	r3, r3, #16
 800801e:	2b00      	cmp	r3, #0
 8008020:	d008      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008022:	4b07      	ldr	r3, [pc, #28]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	4904      	ldr	r1, [pc, #16]	@ (8008040 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008030:	4313      	orrs	r3, r2
 8008032:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	40021000 	.word	0x40021000
 8008044:	40007000 	.word	0x40007000
 8008048:	42420440 	.word	0x42420440

0800804c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	2300      	movs	r3, #0
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	2300      	movs	r3, #0
 800805e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	2300      	movs	r3, #0
 8008066:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b10      	cmp	r3, #16
 800806c:	d00a      	beq.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b10      	cmp	r3, #16
 8008072:	f200 808a 	bhi.w	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d045      	beq.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d075      	beq.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008082:	e082      	b.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8008084:	4b46      	ldr	r3, [pc, #280]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800808a:	4b45      	ldr	r3, [pc, #276]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d07b      	beq.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	0c9b      	lsrs	r3, r3, #18
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	4a41      	ldr	r2, [pc, #260]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80080a0:	5cd3      	ldrb	r3, [r2, r3]
 80080a2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d015      	beq.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80080ae:	4b3c      	ldr	r3, [pc, #240]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	0c5b      	lsrs	r3, r3, #17
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	4a3b      	ldr	r2, [pc, #236]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80080ba:	5cd3      	ldrb	r3, [r2, r3]
 80080bc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80080c8:	4a38      	ldr	r2, [pc, #224]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	61fb      	str	r3, [r7, #28]
 80080d8:	e004      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	4a34      	ldr	r2, [pc, #208]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80080de:	fb02 f303 	mul.w	r3, r2, r3
 80080e2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80080e4:	4b2e      	ldr	r3, [pc, #184]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080f0:	d102      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	61bb      	str	r3, [r7, #24]
      break;
 80080f6:	e04a      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	4a2d      	ldr	r2, [pc, #180]	@ (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80080fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008102:	085b      	lsrs	r3, r3, #1
 8008104:	61bb      	str	r3, [r7, #24]
      break;
 8008106:	e042      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8008108:	4b25      	ldr	r3, [pc, #148]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008118:	d108      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8008124:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008128:	61bb      	str	r3, [r7, #24]
 800812a:	e01f      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008136:	d109      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008138:	4b19      	ldr	r3, [pc, #100]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8008144:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	e00f      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008156:	d11c      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008158:	4b11      	ldr	r3, [pc, #68]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d016      	beq.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8008164:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008168:	61bb      	str	r3, [r7, #24]
      break;
 800816a:	e012      	b.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800816c:	e011      	b.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800816e:	f7ff fe55 	bl	8007e1c <HAL_RCC_GetPCLK2Freq>
 8008172:	4602      	mov	r2, r0
 8008174:	4b0a      	ldr	r3, [pc, #40]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	0b9b      	lsrs	r3, r3, #14
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	3301      	adds	r3, #1
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	fbb2 f3f3 	udiv	r3, r2, r3
 8008186:	61bb      	str	r3, [r7, #24]
      break;
 8008188:	e004      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800818a:	bf00      	nop
 800818c:	e002      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800818e:	bf00      	nop
 8008190:	e000      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8008192:	bf00      	nop
    }
  }
  return (frequency);
 8008194:	69bb      	ldr	r3, [r7, #24]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3720      	adds	r7, #32
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40021000 	.word	0x40021000
 80081a4:	0800e228 	.word	0x0800e228
 80081a8:	0800e238 	.word	0x0800e238
 80081ac:	007a1200 	.word	0x007a1200
 80081b0:	003d0900 	.word	0x003d0900
 80081b4:	aaaaaaab 	.word	0xaaaaaaab

080081b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e041      	b.n	800824e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d106      	bne.n	80081e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f839 	bl	8008256 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	4610      	mov	r0, r2
 80081f8:	f000 fb50 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	bc80      	pop	{r7}
 8008266:	4770      	bx	lr

08008268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b01      	cmp	r3, #1
 800827a:	d001      	beq.n	8008280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e03a      	b.n	80082f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0201 	orr.w	r2, r2, #1
 8008296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a18      	ldr	r2, [pc, #96]	@ (8008300 <HAL_TIM_Base_Start_IT+0x98>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00e      	beq.n	80082c0 <HAL_TIM_Base_Start_IT+0x58>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082aa:	d009      	beq.n	80082c0 <HAL_TIM_Base_Start_IT+0x58>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a14      	ldr	r2, [pc, #80]	@ (8008304 <HAL_TIM_Base_Start_IT+0x9c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d004      	beq.n	80082c0 <HAL_TIM_Base_Start_IT+0x58>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a13      	ldr	r2, [pc, #76]	@ (8008308 <HAL_TIM_Base_Start_IT+0xa0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d111      	bne.n	80082e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b06      	cmp	r3, #6
 80082d0:	d010      	beq.n	80082f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f042 0201 	orr.w	r2, r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e2:	e007      	b.n	80082f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0201 	orr.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr
 8008300:	40012c00 	.word	0x40012c00
 8008304:	40000400 	.word	0x40000400
 8008308:	40000800 	.word	0x40000800

0800830c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e041      	b.n	80083a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7fb f9b4 	bl	80036a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3304      	adds	r3, #4
 8008348:	4619      	mov	r1, r3
 800834a:	4610      	mov	r0, r2
 800834c:	f000 faa6 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d109      	bne.n	80083d0 <HAL_TIM_PWM_Start+0x24>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	bf14      	ite	ne
 80083c8:	2301      	movne	r3, #1
 80083ca:	2300      	moveq	r3, #0
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	e022      	b.n	8008416 <HAL_TIM_PWM_Start+0x6a>
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d109      	bne.n	80083ea <HAL_TIM_PWM_Start+0x3e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b01      	cmp	r3, #1
 80083e0:	bf14      	ite	ne
 80083e2:	2301      	movne	r3, #1
 80083e4:	2300      	moveq	r3, #0
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	e015      	b.n	8008416 <HAL_TIM_PWM_Start+0x6a>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d109      	bne.n	8008404 <HAL_TIM_PWM_Start+0x58>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	bf14      	ite	ne
 80083fc:	2301      	movne	r3, #1
 80083fe:	2300      	moveq	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	e008      	b.n	8008416 <HAL_TIM_PWM_Start+0x6a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b01      	cmp	r3, #1
 800840e:	bf14      	ite	ne
 8008410:	2301      	movne	r3, #1
 8008412:	2300      	moveq	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e05e      	b.n	80084dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d104      	bne.n	800842e <HAL_TIM_PWM_Start+0x82>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800842c:	e013      	b.n	8008456 <HAL_TIM_PWM_Start+0xaa>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b04      	cmp	r3, #4
 8008432:	d104      	bne.n	800843e <HAL_TIM_PWM_Start+0x92>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800843c:	e00b      	b.n	8008456 <HAL_TIM_PWM_Start+0xaa>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b08      	cmp	r3, #8
 8008442:	d104      	bne.n	800844e <HAL_TIM_PWM_Start+0xa2>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800844c:	e003      	b.n	8008456 <HAL_TIM_PWM_Start+0xaa>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2201      	movs	r2, #1
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fc12 	bl	8008c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a1e      	ldr	r2, [pc, #120]	@ (80084e4 <HAL_TIM_PWM_Start+0x138>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d107      	bne.n	800847e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800847c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a18      	ldr	r2, [pc, #96]	@ (80084e4 <HAL_TIM_PWM_Start+0x138>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00e      	beq.n	80084a6 <HAL_TIM_PWM_Start+0xfa>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008490:	d009      	beq.n	80084a6 <HAL_TIM_PWM_Start+0xfa>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a14      	ldr	r2, [pc, #80]	@ (80084e8 <HAL_TIM_PWM_Start+0x13c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d004      	beq.n	80084a6 <HAL_TIM_PWM_Start+0xfa>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a12      	ldr	r2, [pc, #72]	@ (80084ec <HAL_TIM_PWM_Start+0x140>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d111      	bne.n	80084ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b06      	cmp	r3, #6
 80084b6:	d010      	beq.n	80084da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0201 	orr.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c8:	e007      	b.n	80084da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f042 0201 	orr.w	r2, r2, #1
 80084d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40000400 	.word	0x40000400
 80084ec:	40000800 	.word	0x40000800

080084f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d020      	beq.n	8008554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01b      	beq.n	8008554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f06f 0202 	mvn.w	r2, #2
 8008524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	f003 0303 	and.w	r3, r3, #3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f993 	bl	8008866 <HAL_TIM_IC_CaptureCallback>
 8008540:	e005      	b.n	800854e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f986 	bl	8008854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f995 	bl	8008878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d020      	beq.n	80085a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01b      	beq.n	80085a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f06f 0204 	mvn.w	r2, #4
 8008570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f96d 	bl	8008866 <HAL_TIM_IC_CaptureCallback>
 800858c:	e005      	b.n	800859a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f960 	bl	8008854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f96f 	bl	8008878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d020      	beq.n	80085ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01b      	beq.n	80085ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f06f 0208 	mvn.w	r2, #8
 80085bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2204      	movs	r2, #4
 80085c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f947 	bl	8008866 <HAL_TIM_IC_CaptureCallback>
 80085d8:	e005      	b.n	80085e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f93a 	bl	8008854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f949 	bl	8008878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d020      	beq.n	8008638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01b      	beq.n	8008638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0210 	mvn.w	r2, #16
 8008608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2208      	movs	r2, #8
 800860e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f921 	bl	8008866 <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f914 	bl	8008854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f923 	bl	8008878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f06f 0201 	mvn.w	r2, #1
 8008654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fa fa90 	bl	8002b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00c      	beq.n	8008680 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800866c:	2b00      	cmp	r3, #0
 800866e:	d007      	beq.n	8008680 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fb8f 	bl	8008d9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d007      	beq.n	80086a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800869c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f8f3 	bl	800888a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00c      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0220 	mvn.w	r2, #32
 80086c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fb62 	bl	8008d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086c8:	bf00      	nop
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d101      	bne.n	80086ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086ea:	2302      	movs	r3, #2
 80086ec:	e0ae      	b.n	800884c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b0c      	cmp	r3, #12
 80086fa:	f200 809f 	bhi.w	800883c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80086fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008704 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	08008739 	.word	0x08008739
 8008708:	0800883d 	.word	0x0800883d
 800870c:	0800883d 	.word	0x0800883d
 8008710:	0800883d 	.word	0x0800883d
 8008714:	08008779 	.word	0x08008779
 8008718:	0800883d 	.word	0x0800883d
 800871c:	0800883d 	.word	0x0800883d
 8008720:	0800883d 	.word	0x0800883d
 8008724:	080087bb 	.word	0x080087bb
 8008728:	0800883d 	.word	0x0800883d
 800872c:	0800883d 	.word	0x0800883d
 8008730:	0800883d 	.word	0x0800883d
 8008734:	080087fb 	.word	0x080087fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 f91a 	bl	8008978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699a      	ldr	r2, [r3, #24]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f042 0208 	orr.w	r2, r2, #8
 8008752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0204 	bic.w	r2, r2, #4
 8008762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6999      	ldr	r1, [r3, #24]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	691a      	ldr	r2, [r3, #16]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	619a      	str	r2, [r3, #24]
      break;
 8008776:	e064      	b.n	8008842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 f960 	bl	8008a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6999      	ldr	r1, [r3, #24]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	021a      	lsls	r2, r3, #8
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	619a      	str	r2, [r3, #24]
      break;
 80087b8:	e043      	b.n	8008842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f9a9 	bl	8008b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69da      	ldr	r2, [r3, #28]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f042 0208 	orr.w	r2, r2, #8
 80087d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69da      	ldr	r2, [r3, #28]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0204 	bic.w	r2, r2, #4
 80087e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69d9      	ldr	r1, [r3, #28]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	691a      	ldr	r2, [r3, #16]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	61da      	str	r2, [r3, #28]
      break;
 80087f8:	e023      	b.n	8008842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 f9f3 	bl	8008bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69da      	ldr	r2, [r3, #28]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69d9      	ldr	r1, [r3, #28]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	021a      	lsls	r2, r3, #8
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	430a      	orrs	r2, r1
 8008838:	61da      	str	r2, [r3, #28]
      break;
 800883a:	e002      	b.n	8008842 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
      break;
 8008840:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	bc80      	pop	{r7}
 8008864:	4770      	bx	lr

08008866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800886e:	bf00      	nop
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr

08008878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	bc80      	pop	{r7}
 8008888:	4770      	bx	lr

0800888a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr

0800889c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a2f      	ldr	r2, [pc, #188]	@ (800896c <TIM_Base_SetConfig+0xd0>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00b      	beq.n	80088cc <TIM_Base_SetConfig+0x30>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ba:	d007      	beq.n	80088cc <TIM_Base_SetConfig+0x30>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a2c      	ldr	r2, [pc, #176]	@ (8008970 <TIM_Base_SetConfig+0xd4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d003      	beq.n	80088cc <TIM_Base_SetConfig+0x30>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a2b      	ldr	r2, [pc, #172]	@ (8008974 <TIM_Base_SetConfig+0xd8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d108      	bne.n	80088de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a22      	ldr	r2, [pc, #136]	@ (800896c <TIM_Base_SetConfig+0xd0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d00b      	beq.n	80088fe <TIM_Base_SetConfig+0x62>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ec:	d007      	beq.n	80088fe <TIM_Base_SetConfig+0x62>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008970 <TIM_Base_SetConfig+0xd4>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d003      	beq.n	80088fe <TIM_Base_SetConfig+0x62>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a1e      	ldr	r2, [pc, #120]	@ (8008974 <TIM_Base_SetConfig+0xd8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d108      	bne.n	8008910 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4313      	orrs	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a0d      	ldr	r2, [pc, #52]	@ (800896c <TIM_Base_SetConfig+0xd0>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d103      	bne.n	8008944 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	691a      	ldr	r2, [r3, #16]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f023 0201 	bic.w	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	611a      	str	r2, [r3, #16]
  }
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	bc80      	pop	{r7}
 800896a:	4770      	bx	lr
 800896c:	40012c00 	.word	0x40012c00
 8008970:	40000400 	.word	0x40000400
 8008974:	40000800 	.word	0x40000800

08008978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	f023 0201 	bic.w	r2, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 0303 	bic.w	r3, r3, #3
 80089ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f023 0302 	bic.w	r3, r3, #2
 80089c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008a40 <TIM_OC1_SetConfig+0xc8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d10c      	bne.n	80089ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f023 0308 	bic.w	r3, r3, #8
 80089da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f023 0304 	bic.w	r3, r3, #4
 80089ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a13      	ldr	r2, [pc, #76]	@ (8008a40 <TIM_OC1_SetConfig+0xc8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d111      	bne.n	8008a1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	621a      	str	r2, [r3, #32]
}
 8008a34:	bf00      	nop
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40012c00 	.word	0x40012c00

08008a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	f023 0210 	bic.w	r2, r3, #16
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f023 0320 	bic.w	r3, r3, #32
 8008a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008b14 <TIM_OC2_SetConfig+0xd0>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d10d      	bne.n	8008ac0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	011b      	lsls	r3, r3, #4
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008abe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a14      	ldr	r2, [pc, #80]	@ (8008b14 <TIM_OC2_SetConfig+0xd0>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d113      	bne.n	8008af0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	621a      	str	r2, [r3, #32]
}
 8008b0a:	bf00      	nop
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr
 8008b14:	40012c00 	.word	0x40012c00

08008b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a1d      	ldr	r2, [pc, #116]	@ (8008be8 <TIM_OC3_SetConfig+0xd0>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d10d      	bne.n	8008b92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	021b      	lsls	r3, r3, #8
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a14      	ldr	r2, [pc, #80]	@ (8008be8 <TIM_OC3_SetConfig+0xd0>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d113      	bne.n	8008bc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	621a      	str	r2, [r3, #32]
}
 8008bdc:	bf00      	nop
 8008bde:	371c      	adds	r7, #28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40012c00 	.word	0x40012c00

08008bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	021b      	lsls	r3, r3, #8
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	031b      	lsls	r3, r3, #12
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a0f      	ldr	r2, [pc, #60]	@ (8008c84 <TIM_OC4_SetConfig+0x98>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d109      	bne.n	8008c60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	019b      	lsls	r3, r3, #6
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	621a      	str	r2, [r3, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr
 8008c84:	40012c00 	.word	0x40012c00

08008c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	f003 031f 	and.w	r3, r3, #31
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a1a      	ldr	r2, [r3, #32]
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	43db      	mvns	r3, r3
 8008caa:	401a      	ands	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a1a      	ldr	r2, [r3, #32]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f003 031f 	and.w	r3, r3, #31
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	621a      	str	r2, [r3, #32]
}
 8008cc6:	bf00      	nop
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bc80      	pop	{r7}
 8008cce:	4770      	bx	lr

08008cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e046      	b.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a16      	ldr	r2, [pc, #88]	@ (8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00e      	beq.n	8008d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d34:	d009      	beq.n	8008d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a12      	ldr	r2, [pc, #72]	@ (8008d84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d004      	beq.n	8008d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a10      	ldr	r2, [pc, #64]	@ (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d10c      	bne.n	8008d64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bc80      	pop	{r7}
 8008d7e:	4770      	bx	lr
 8008d80:	40012c00 	.word	0x40012c00
 8008d84:	40000400 	.word	0x40000400
 8008d88:	40000800 	.word	0x40000800

08008d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bc80      	pop	{r7}
 8008d9c:	4770      	bx	lr

08008d9e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr

08008db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e042      	b.n	8008e48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7fa fcb2 	bl	8003740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2224      	movs	r2, #36	@ 0x24
 8008de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fdb7 	bl	8009968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695a      	ldr	r2, [r3, #20]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2220      	movs	r2, #32
 8008e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	@ 0x28
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	d175      	bne.n	8008f5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <HAL_UART_Transmit+0x2c>
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e06e      	b.n	8008f5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2221      	movs	r2, #33	@ 0x21
 8008e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e8e:	f7fa febf 	bl	8003c10 <HAL_GetTick>
 8008e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	88fa      	ldrh	r2, [r7, #6]
 8008e98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	88fa      	ldrh	r2, [r7, #6]
 8008e9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ea8:	d108      	bne.n	8008ebc <HAL_UART_Transmit+0x6c>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	61bb      	str	r3, [r7, #24]
 8008eba:	e003      	b.n	8008ec4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ec4:	e02e      	b.n	8008f24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2180      	movs	r1, #128	@ 0x80
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fb1c 	bl	800950e <UART_WaitOnFlagUntilTimeout>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e03a      	b.n	8008f5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10b      	bne.n	8008f06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	3302      	adds	r3, #2
 8008f02:	61bb      	str	r3, [r7, #24]
 8008f04:	e007      	b.n	8008f16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	781a      	ldrb	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	3301      	adds	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1cb      	bne.n	8008ec6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2200      	movs	r2, #0
 8008f36:	2140      	movs	r1, #64	@ 0x40
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 fae8 	bl	800950e <UART_WaitOnFlagUntilTimeout>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e006      	b.n	8008f5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e000      	b.n	8008f5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008f5c:	2302      	movs	r3, #2
  }
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	4613      	mov	r3, r2
 8008f72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b20      	cmp	r3, #32
 8008f7e:	d112      	bne.n	8008fa6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <HAL_UART_Receive_IT+0x26>
 8008f86:	88fb      	ldrh	r3, [r7, #6]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e00b      	b.n	8008fa8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fb0f 	bl	80095c0 <UART_Start_Receive_IT>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	e000      	b.n	8008fa8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008fa6:	2302      	movs	r3, #2
  }
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe6:	f003 030f 	and.w	r3, r3, #15
 8008fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10f      	bne.n	8009016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <HAL_UART_IRQHandler+0x66>
 8009002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fbec 	bl	80097ec <UART_Receive_IT>
      return;
 8009014:	e25b      	b.n	80094ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80de 	beq.w	80091dc <HAL_UART_IRQHandler+0x22c>
 8009020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b00      	cmp	r3, #0
 800902a:	d106      	bne.n	800903a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800902c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009030:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80d1 	beq.w	80091dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800903a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00b      	beq.n	800905e <HAL_UART_IRQHandler+0xae>
 8009046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800904a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009056:	f043 0201 	orr.w	r2, r3, #1
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800905e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009062:	f003 0304 	and.w	r3, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00b      	beq.n	8009082 <HAL_UART_IRQHandler+0xd2>
 800906a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d005      	beq.n	8009082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800907a:	f043 0202 	orr.w	r2, r3, #2
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00b      	beq.n	80090a6 <HAL_UART_IRQHandler+0xf6>
 800908e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800909e:	f043 0204 	orr.w	r2, r3, #4
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090aa:	f003 0308 	and.w	r3, r3, #8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d011      	beq.n	80090d6 <HAL_UART_IRQHandler+0x126>
 80090b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d105      	bne.n	80090ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ce:	f043 0208 	orr.w	r2, r3, #8
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 81f2 	beq.w	80094c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e4:	f003 0320 	and.w	r3, r3, #32
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d008      	beq.n	80090fe <HAL_UART_IRQHandler+0x14e>
 80090ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f0:	f003 0320 	and.w	r3, r3, #32
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fb77 	bl	80097ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	bf14      	ite	ne
 800910c:	2301      	movne	r3, #1
 800910e:	2300      	moveq	r3, #0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800911a:	f003 0308 	and.w	r3, r3, #8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d103      	bne.n	800912a <HAL_UART_IRQHandler+0x17a>
 8009122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009126:	2b00      	cmp	r3, #0
 8009128:	d04f      	beq.n	80091ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fa81 	bl	8009632 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913a:	2b00      	cmp	r3, #0
 800913c:	d041      	beq.n	80091c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3314      	adds	r3, #20
 8009144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800915c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3314      	adds	r3, #20
 8009166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800916a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800916e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1d9      	bne.n	800913e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d013      	beq.n	80091ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009196:	4a7e      	ldr	r2, [pc, #504]	@ (8009390 <HAL_UART_IRQHandler+0x3e0>)
 8009198:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fb fad6 	bl	8004750 <HAL_DMA_Abort_IT>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d016      	beq.n	80091d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80091b4:	4610      	mov	r0, r2
 80091b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091b8:	e00e      	b.n	80091d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f993 	bl	80094e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c0:	e00a      	b.n	80091d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f98f 	bl	80094e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c8:	e006      	b.n	80091d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f98b 	bl	80094e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80091d6:	e175      	b.n	80094c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d8:	bf00      	nop
    return;
 80091da:	e173      	b.n	80094c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	f040 814f 	bne.w	8009484 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80091e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ea:	f003 0310 	and.w	r3, r3, #16
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8148 	beq.w	8009484 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80091f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091f8:	f003 0310 	and.w	r3, r3, #16
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8141 	beq.w	8009484 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009202:	2300      	movs	r3, #0
 8009204:	60bb      	str	r3, [r7, #8]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60bb      	str	r3, [r7, #8]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	60bb      	str	r3, [r7, #8]
 8009216:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80b6 	beq.w	8009394 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009234:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 8145 	beq.w	80094c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009246:	429a      	cmp	r2, r3
 8009248:	f080 813e 	bcs.w	80094c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009252:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	2b20      	cmp	r3, #32
 800925c:	f000 8088 	beq.w	8009370 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	330c      	adds	r3, #12
 8009266:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009276:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800927a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800927e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800928c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009290:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009298:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1d9      	bne.n	8009260 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3314      	adds	r3, #20
 80092b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092be:	f023 0301 	bic.w	r3, r3, #1
 80092c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3314      	adds	r3, #20
 80092cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e1      	bne.n	80092ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3314      	adds	r3, #20
 80092ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3314      	adds	r3, #20
 8009308:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800930c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800930e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009312:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800931a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e3      	bne.n	80092e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	330c      	adds	r3, #12
 8009334:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800933e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009340:	f023 0310 	bic.w	r3, r3, #16
 8009344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	330c      	adds	r3, #12
 800934e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009352:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009354:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009358:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e3      	bne.n	800932e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936a:	4618      	mov	r0, r3
 800936c:	f7fb f9b5 	bl	80046da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800937e:	b29b      	uxth	r3, r3
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	b29b      	uxth	r3, r3
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f8b6 	bl	80094f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800938c:	e09c      	b.n	80094c8 <HAL_UART_IRQHandler+0x518>
 800938e:	bf00      	nop
 8009390:	080096f7 	.word	0x080096f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800939c:	b29b      	uxth	r3, r3
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 808e 	beq.w	80094cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80093b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 8089 	beq.w	80094cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	330c      	adds	r3, #12
 80093c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	330c      	adds	r3, #12
 80093da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80093de:	647a      	str	r2, [r7, #68]	@ 0x44
 80093e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e3      	bne.n	80093ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3314      	adds	r3, #20
 80093f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	623b      	str	r3, [r7, #32]
   return(result);
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	f023 0301 	bic.w	r3, r3, #1
 8009408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3314      	adds	r3, #20
 8009412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009416:	633a      	str	r2, [r7, #48]	@ 0x30
 8009418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800941c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e3      	bne.n	80093f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	330c      	adds	r3, #12
 800943e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	60fb      	str	r3, [r7, #12]
   return(result);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0310 	bic.w	r3, r3, #16
 800944e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	330c      	adds	r3, #12
 8009458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800945c:	61fa      	str	r2, [r7, #28]
 800945e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	69b9      	ldr	r1, [r7, #24]
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	617b      	str	r3, [r7, #20]
   return(result);
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e3      	bne.n	8009438 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f83b 	bl	80094f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009482:	e023      	b.n	80094cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800948c:	2b00      	cmp	r3, #0
 800948e:	d009      	beq.n	80094a4 <HAL_UART_IRQHandler+0x4f4>
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f93e 	bl	800971e <UART_Transmit_IT>
    return;
 80094a2:	e014      	b.n	80094ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00e      	beq.n	80094ce <HAL_UART_IRQHandler+0x51e>
 80094b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d008      	beq.n	80094ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f97d 	bl	80097bc <UART_EndTransmit_IT>
    return;
 80094c2:	e004      	b.n	80094ce <HAL_UART_IRQHandler+0x51e>
    return;
 80094c4:	bf00      	nop
 80094c6:	e002      	b.n	80094ce <HAL_UART_IRQHandler+0x51e>
      return;
 80094c8:	bf00      	nop
 80094ca:	e000      	b.n	80094ce <HAL_UART_IRQHandler+0x51e>
      return;
 80094cc:	bf00      	nop
  }
}
 80094ce:	37e8      	adds	r7, #232	@ 0xe8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr

080094e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bc80      	pop	{r7}
 80094f6:	4770      	bx	lr

080094f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr

0800950e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b086      	sub	sp, #24
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	603b      	str	r3, [r7, #0]
 800951a:	4613      	mov	r3, r2
 800951c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800951e:	e03b      	b.n	8009598 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009526:	d037      	beq.n	8009598 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009528:	f7fa fb72 	bl	8003c10 <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	6a3a      	ldr	r2, [r7, #32]
 8009534:	429a      	cmp	r2, r3
 8009536:	d302      	bcc.n	800953e <UART_WaitOnFlagUntilTimeout+0x30>
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e03a      	b.n	80095b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b00      	cmp	r3, #0
 800954e:	d023      	beq.n	8009598 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2b80      	cmp	r3, #128	@ 0x80
 8009554:	d020      	beq.n	8009598 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b40      	cmp	r3, #64	@ 0x40
 800955a:	d01d      	beq.n	8009598 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	2b08      	cmp	r3, #8
 8009568:	d116      	bne.n	8009598 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800956a:	2300      	movs	r3, #0
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	617b      	str	r3, [r7, #20]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 f856 	bl	8009632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2208      	movs	r2, #8
 800958a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e00f      	b.n	80095b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	4013      	ands	r3, r2
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	bf0c      	ite	eq
 80095a8:	2301      	moveq	r3, #1
 80095aa:	2300      	movne	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d0b4      	beq.n	8009520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	88fa      	ldrh	r2, [r7, #6]
 80095d8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	88fa      	ldrh	r2, [r7, #6]
 80095de:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2222      	movs	r2, #34	@ 0x22
 80095ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d007      	beq.n	8009606 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009604:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	695a      	ldr	r2, [r3, #20]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f042 0201 	orr.w	r2, r2, #1
 8009614:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f042 0220 	orr.w	r2, r2, #32
 8009624:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr

08009632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009632:	b480      	push	{r7}
 8009634:	b095      	sub	sp, #84	@ 0x54
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	330c      	adds	r3, #12
 8009640:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009650:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	330c      	adds	r3, #12
 8009658:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800965a:	643a      	str	r2, [r7, #64]	@ 0x40
 800965c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009660:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e5      	bne.n	800963a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3314      	adds	r3, #20
 8009674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	e853 3f00 	ldrex	r3, [r3]
 800967c:	61fb      	str	r3, [r7, #28]
   return(result);
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	f023 0301 	bic.w	r3, r3, #1
 8009684:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3314      	adds	r3, #20
 800968c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800968e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009690:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e5      	bne.n	800966e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d119      	bne.n	80096de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	330c      	adds	r3, #12
 80096b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f023 0310 	bic.w	r3, r3, #16
 80096c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	330c      	adds	r3, #12
 80096c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096ca:	61ba      	str	r2, [r7, #24]
 80096cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6979      	ldr	r1, [r7, #20]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	613b      	str	r3, [r7, #16]
   return(result);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e5      	bne.n	80096aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2220      	movs	r2, #32
 80096e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80096ec:	bf00      	nop
 80096ee:	3754      	adds	r7, #84	@ 0x54
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bc80      	pop	{r7}
 80096f4:	4770      	bx	lr

080096f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009702:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff fee8 	bl	80094e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009716:	bf00      	nop
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800971e:	b480      	push	{r7}
 8009720:	b085      	sub	sp, #20
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b21      	cmp	r3, #33	@ 0x21
 8009730:	d13e      	bne.n	80097b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800973a:	d114      	bne.n	8009766 <UART_Transmit_IT+0x48>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d110      	bne.n	8009766 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009758:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	1c9a      	adds	r2, r3, #2
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	621a      	str	r2, [r3, #32]
 8009764:	e008      	b.n	8009778 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	1c59      	adds	r1, r3, #1
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	6211      	str	r1, [r2, #32]
 8009770:	781a      	ldrb	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800977c:	b29b      	uxth	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	b29b      	uxth	r3, r3
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	4619      	mov	r1, r3
 8009786:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10f      	bne.n	80097ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800979a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e000      	b.n	80097b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80097b0:	2302      	movs	r3, #2
  }
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bc80      	pop	{r7}
 80097ba:	4770      	bx	lr

080097bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff fe79 	bl	80094d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08c      	sub	sp, #48	@ 0x30
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b22      	cmp	r3, #34	@ 0x22
 80097fe:	f040 80ae 	bne.w	800995e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800980a:	d117      	bne.n	800983c <UART_Receive_IT+0x50>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d113      	bne.n	800983c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982a:	b29a      	uxth	r2, r3
 800982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009834:	1c9a      	adds	r2, r3, #2
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	629a      	str	r2, [r3, #40]	@ 0x28
 800983a:	e026      	b.n	800988a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800984e:	d007      	beq.n	8009860 <UART_Receive_IT+0x74>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <UART_Receive_IT+0x82>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d106      	bne.n	800986e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	b2da      	uxtb	r2, r3
 8009868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800986a:	701a      	strb	r2, [r3, #0]
 800986c:	e008      	b.n	8009880 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800987a:	b2da      	uxtb	r2, r3
 800987c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800988e:	b29b      	uxth	r3, r3
 8009890:	3b01      	subs	r3, #1
 8009892:	b29b      	uxth	r3, r3
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	4619      	mov	r1, r3
 8009898:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800989a:	2b00      	cmp	r3, #0
 800989c:	d15d      	bne.n	800995a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68da      	ldr	r2, [r3, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f022 0220 	bic.w	r2, r2, #32
 80098ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80098bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	695a      	ldr	r2, [r3, #20]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0201 	bic.w	r2, r2, #1
 80098cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d135      	bne.n	8009950 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	330c      	adds	r3, #12
 80098f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	613b      	str	r3, [r7, #16]
   return(result);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f023 0310 	bic.w	r3, r3, #16
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	330c      	adds	r3, #12
 8009908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800990a:	623a      	str	r2, [r7, #32]
 800990c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	69f9      	ldr	r1, [r7, #28]
 8009910:	6a3a      	ldr	r2, [r7, #32]
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	61bb      	str	r3, [r7, #24]
   return(result);
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e5      	bne.n	80098ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0310 	and.w	r3, r3, #16
 8009928:	2b10      	cmp	r3, #16
 800992a:	d10a      	bne.n	8009942 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff fdd5 	bl	80094f8 <HAL_UARTEx_RxEventCallback>
 800994e:	e002      	b.n	8009956 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7f9 f8b7 	bl	8002ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	e002      	b.n	8009960 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	e000      	b.n	8009960 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800995e:	2302      	movs	r3, #2
  }
}
 8009960:	4618      	mov	r0, r3
 8009962:	3730      	adds	r7, #48	@ 0x30
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	4313      	orrs	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80099a2:	f023 030c 	bic.w	r3, r3, #12
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6812      	ldr	r2, [r2, #0]
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	430b      	orrs	r3, r1
 80099ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	699a      	ldr	r2, [r3, #24]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a2c      	ldr	r2, [pc, #176]	@ (8009a7c <UART_SetConfig+0x114>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d103      	bne.n	80099d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80099d0:	f7fe fa24 	bl	8007e1c <HAL_RCC_GetPCLK2Freq>
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	e002      	b.n	80099de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80099d8:	f7fe fa0c 	bl	8007df4 <HAL_RCC_GetPCLK1Freq>
 80099dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	009a      	lsls	r2, r3, #2
 80099e8:	441a      	add	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f4:	4a22      	ldr	r2, [pc, #136]	@ (8009a80 <UART_SetConfig+0x118>)
 80099f6:	fba2 2303 	umull	r2, r3, r2, r3
 80099fa:	095b      	lsrs	r3, r3, #5
 80099fc:	0119      	lsls	r1, r3, #4
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	009a      	lsls	r2, r3, #2
 8009a08:	441a      	add	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a14:	4b1a      	ldr	r3, [pc, #104]	@ (8009a80 <UART_SetConfig+0x118>)
 8009a16:	fba3 0302 	umull	r0, r3, r3, r2
 8009a1a:	095b      	lsrs	r3, r3, #5
 8009a1c:	2064      	movs	r0, #100	@ 0x64
 8009a1e:	fb00 f303 	mul.w	r3, r0, r3
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	011b      	lsls	r3, r3, #4
 8009a26:	3332      	adds	r3, #50	@ 0x32
 8009a28:	4a15      	ldr	r2, [pc, #84]	@ (8009a80 <UART_SetConfig+0x118>)
 8009a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2e:	095b      	lsrs	r3, r3, #5
 8009a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a34:	4419      	add	r1, r3
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009a      	lsls	r2, r3, #2
 8009a40:	441a      	add	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a80 <UART_SetConfig+0x118>)
 8009a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8009a52:	095b      	lsrs	r3, r3, #5
 8009a54:	2064      	movs	r0, #100	@ 0x64
 8009a56:	fb00 f303 	mul.w	r3, r0, r3
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	3332      	adds	r3, #50	@ 0x32
 8009a60:	4a07      	ldr	r2, [pc, #28]	@ (8009a80 <UART_SetConfig+0x118>)
 8009a62:	fba2 2303 	umull	r2, r3, r2, r3
 8009a66:	095b      	lsrs	r3, r3, #5
 8009a68:	f003 020f 	and.w	r2, r3, #15
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	440a      	add	r2, r1
 8009a72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009a74:	bf00      	nop
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	40013800 	.word	0x40013800
 8009a80:	51eb851f 	.word	0x51eb851f

08009a84 <atof>:
 8009a84:	2100      	movs	r1, #0
 8009a86:	f000 bdff 	b.w	800a688 <strtod>

08009a8a <atoi>:
 8009a8a:	220a      	movs	r2, #10
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	f000 be81 	b.w	800a794 <strtol>

08009a92 <sulp>:
 8009a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a96:	460f      	mov	r7, r1
 8009a98:	4690      	mov	r8, r2
 8009a9a:	f003 fb39 	bl	800d110 <__ulp>
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	f1b8 0f00 	cmp.w	r8, #0
 8009aa6:	d011      	beq.n	8009acc <sulp+0x3a>
 8009aa8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009aac:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dd0b      	ble.n	8009acc <sulp+0x3a>
 8009ab4:	2400      	movs	r4, #0
 8009ab6:	051b      	lsls	r3, r3, #20
 8009ab8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009abc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009ac0:	4622      	mov	r2, r4
 8009ac2:	462b      	mov	r3, r5
 8009ac4:	f7f6 fd08 	bl	80004d8 <__aeabi_dmul>
 8009ac8:	4604      	mov	r4, r0
 8009aca:	460d      	mov	r5, r1
 8009acc:	4620      	mov	r0, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad4:	0000      	movs	r0, r0
	...

08009ad8 <_strtod_l>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	b09f      	sub	sp, #124	@ 0x7c
 8009ade:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	921a      	str	r2, [sp, #104]	@ 0x68
 8009ae6:	f04f 0a00 	mov.w	sl, #0
 8009aea:	f04f 0b00 	mov.w	fp, #0
 8009aee:	460a      	mov	r2, r1
 8009af0:	9005      	str	r0, [sp, #20]
 8009af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009af4:	7811      	ldrb	r1, [r2, #0]
 8009af6:	292b      	cmp	r1, #43	@ 0x2b
 8009af8:	d048      	beq.n	8009b8c <_strtod_l+0xb4>
 8009afa:	d836      	bhi.n	8009b6a <_strtod_l+0x92>
 8009afc:	290d      	cmp	r1, #13
 8009afe:	d830      	bhi.n	8009b62 <_strtod_l+0x8a>
 8009b00:	2908      	cmp	r1, #8
 8009b02:	d830      	bhi.n	8009b66 <_strtod_l+0x8e>
 8009b04:	2900      	cmp	r1, #0
 8009b06:	d039      	beq.n	8009b7c <_strtod_l+0xa4>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009b0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009b0e:	782a      	ldrb	r2, [r5, #0]
 8009b10:	2a30      	cmp	r2, #48	@ 0x30
 8009b12:	f040 80b1 	bne.w	8009c78 <_strtod_l+0x1a0>
 8009b16:	786a      	ldrb	r2, [r5, #1]
 8009b18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b1c:	2a58      	cmp	r2, #88	@ 0x58
 8009b1e:	d16c      	bne.n	8009bfa <_strtod_l+0x122>
 8009b20:	9302      	str	r3, [sp, #8]
 8009b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b24:	4a8e      	ldr	r2, [pc, #568]	@ (8009d60 <_strtod_l+0x288>)
 8009b26:	9301      	str	r3, [sp, #4]
 8009b28:	ab1a      	add	r3, sp, #104	@ 0x68
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	9805      	ldr	r0, [sp, #20]
 8009b2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b30:	a919      	add	r1, sp, #100	@ 0x64
 8009b32:	f002 fbe1 	bl	800c2f8 <__gethex>
 8009b36:	f010 060f 	ands.w	r6, r0, #15
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	d005      	beq.n	8009b4a <_strtod_l+0x72>
 8009b3e:	2e06      	cmp	r6, #6
 8009b40:	d126      	bne.n	8009b90 <_strtod_l+0xb8>
 8009b42:	2300      	movs	r3, #0
 8009b44:	3501      	adds	r5, #1
 8009b46:	9519      	str	r5, [sp, #100]	@ 0x64
 8009b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f040 8584 	bne.w	800a65a <_strtod_l+0xb82>
 8009b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b54:	b1bb      	cbz	r3, 8009b86 <_strtod_l+0xae>
 8009b56:	4650      	mov	r0, sl
 8009b58:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009b5c:	b01f      	add	sp, #124	@ 0x7c
 8009b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b62:	2920      	cmp	r1, #32
 8009b64:	d1d0      	bne.n	8009b08 <_strtod_l+0x30>
 8009b66:	3201      	adds	r2, #1
 8009b68:	e7c3      	b.n	8009af2 <_strtod_l+0x1a>
 8009b6a:	292d      	cmp	r1, #45	@ 0x2d
 8009b6c:	d1cc      	bne.n	8009b08 <_strtod_l+0x30>
 8009b6e:	2101      	movs	r1, #1
 8009b70:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009b72:	1c51      	adds	r1, r2, #1
 8009b74:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b76:	7852      	ldrb	r2, [r2, #1]
 8009b78:	2a00      	cmp	r2, #0
 8009b7a:	d1c7      	bne.n	8009b0c <_strtod_l+0x34>
 8009b7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b7e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f040 8568 	bne.w	800a656 <_strtod_l+0xb7e>
 8009b86:	4650      	mov	r0, sl
 8009b88:	4659      	mov	r1, fp
 8009b8a:	e7e7      	b.n	8009b5c <_strtod_l+0x84>
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	e7ef      	b.n	8009b70 <_strtod_l+0x98>
 8009b90:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b92:	b13a      	cbz	r2, 8009ba4 <_strtod_l+0xcc>
 8009b94:	2135      	movs	r1, #53	@ 0x35
 8009b96:	a81c      	add	r0, sp, #112	@ 0x70
 8009b98:	f003 fbaa 	bl	800d2f0 <__copybits>
 8009b9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b9e:	9805      	ldr	r0, [sp, #20]
 8009ba0:	f002 ff84 	bl	800caac <_Bfree>
 8009ba4:	3e01      	subs	r6, #1
 8009ba6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009ba8:	2e04      	cmp	r6, #4
 8009baa:	d806      	bhi.n	8009bba <_strtod_l+0xe2>
 8009bac:	e8df f006 	tbb	[pc, r6]
 8009bb0:	201d0314 	.word	0x201d0314
 8009bb4:	14          	.byte	0x14
 8009bb5:	00          	.byte	0x00
 8009bb6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009bba:	05e1      	lsls	r1, r4, #23
 8009bbc:	bf48      	it	mi
 8009bbe:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009bc2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bc6:	0d1b      	lsrs	r3, r3, #20
 8009bc8:	051b      	lsls	r3, r3, #20
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1bd      	bne.n	8009b4a <_strtod_l+0x72>
 8009bce:	f001 fc43 	bl	800b458 <__errno>
 8009bd2:	2322      	movs	r3, #34	@ 0x22
 8009bd4:	6003      	str	r3, [r0, #0]
 8009bd6:	e7b8      	b.n	8009b4a <_strtod_l+0x72>
 8009bd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009bdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009be0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009be4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009be8:	e7e7      	b.n	8009bba <_strtod_l+0xe2>
 8009bea:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009d64 <_strtod_l+0x28c>
 8009bee:	e7e4      	b.n	8009bba <_strtod_l+0xe2>
 8009bf0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009bf4:	f04f 3aff 	mov.w	sl, #4294967295
 8009bf8:	e7df      	b.n	8009bba <_strtod_l+0xe2>
 8009bfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b30      	cmp	r3, #48	@ 0x30
 8009c04:	d0f9      	beq.n	8009bfa <_strtod_l+0x122>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d09f      	beq.n	8009b4a <_strtod_l+0x72>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c10:	220a      	movs	r2, #10
 8009c12:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c14:	2300      	movs	r3, #0
 8009c16:	461f      	mov	r7, r3
 8009c18:	9308      	str	r3, [sp, #32]
 8009c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c1c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009c1e:	7805      	ldrb	r5, [r0, #0]
 8009c20:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009c24:	b2d9      	uxtb	r1, r3
 8009c26:	2909      	cmp	r1, #9
 8009c28:	d928      	bls.n	8009c7c <_strtod_l+0x1a4>
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	494e      	ldr	r1, [pc, #312]	@ (8009d68 <_strtod_l+0x290>)
 8009c2e:	f001 fb78 	bl	800b322 <strncmp>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d032      	beq.n	8009c9c <_strtod_l+0x1c4>
 8009c36:	2000      	movs	r0, #0
 8009c38:	462a      	mov	r2, r5
 8009c3a:	4681      	mov	r9, r0
 8009c3c:	463d      	mov	r5, r7
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2a65      	cmp	r2, #101	@ 0x65
 8009c42:	d001      	beq.n	8009c48 <_strtod_l+0x170>
 8009c44:	2a45      	cmp	r2, #69	@ 0x45
 8009c46:	d114      	bne.n	8009c72 <_strtod_l+0x19a>
 8009c48:	b91d      	cbnz	r5, 8009c52 <_strtod_l+0x17a>
 8009c4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c4c:	4302      	orrs	r2, r0
 8009c4e:	d095      	beq.n	8009b7c <_strtod_l+0xa4>
 8009c50:	2500      	movs	r5, #0
 8009c52:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009c54:	1c62      	adds	r2, r4, #1
 8009c56:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c58:	7862      	ldrb	r2, [r4, #1]
 8009c5a:	2a2b      	cmp	r2, #43	@ 0x2b
 8009c5c:	d077      	beq.n	8009d4e <_strtod_l+0x276>
 8009c5e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009c60:	d07b      	beq.n	8009d5a <_strtod_l+0x282>
 8009c62:	f04f 0c00 	mov.w	ip, #0
 8009c66:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009c6a:	2909      	cmp	r1, #9
 8009c6c:	f240 8082 	bls.w	8009d74 <_strtod_l+0x29c>
 8009c70:	9419      	str	r4, [sp, #100]	@ 0x64
 8009c72:	f04f 0800 	mov.w	r8, #0
 8009c76:	e0a2      	b.n	8009dbe <_strtod_l+0x2e6>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e7c7      	b.n	8009c0c <_strtod_l+0x134>
 8009c7c:	2f08      	cmp	r7, #8
 8009c7e:	bfd5      	itete	le
 8009c80:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009c82:	9908      	ldrgt	r1, [sp, #32]
 8009c84:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c88:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009c8c:	f100 0001 	add.w	r0, r0, #1
 8009c90:	bfd4      	ite	le
 8009c92:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009c94:	9308      	strgt	r3, [sp, #32]
 8009c96:	3701      	adds	r7, #1
 8009c98:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c9a:	e7bf      	b.n	8009c1c <_strtod_l+0x144>
 8009c9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ca2:	785a      	ldrb	r2, [r3, #1]
 8009ca4:	b37f      	cbz	r7, 8009d06 <_strtod_l+0x22e>
 8009ca6:	4681      	mov	r9, r0
 8009ca8:	463d      	mov	r5, r7
 8009caa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009cae:	2b09      	cmp	r3, #9
 8009cb0:	d912      	bls.n	8009cd8 <_strtod_l+0x200>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e7c4      	b.n	8009c40 <_strtod_l+0x168>
 8009cb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cb8:	3001      	adds	r0, #1
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cbe:	785a      	ldrb	r2, [r3, #1]
 8009cc0:	2a30      	cmp	r2, #48	@ 0x30
 8009cc2:	d0f8      	beq.n	8009cb6 <_strtod_l+0x1de>
 8009cc4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	f200 84cb 	bhi.w	800a664 <_strtod_l+0xb8c>
 8009cce:	4681      	mov	r9, r0
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cd8:	3a30      	subs	r2, #48	@ 0x30
 8009cda:	f100 0301 	add.w	r3, r0, #1
 8009cde:	d02a      	beq.n	8009d36 <_strtod_l+0x25e>
 8009ce0:	4499      	add	r9, r3
 8009ce2:	210a      	movs	r1, #10
 8009ce4:	462b      	mov	r3, r5
 8009ce6:	eb00 0c05 	add.w	ip, r0, r5
 8009cea:	4563      	cmp	r3, ip
 8009cec:	d10d      	bne.n	8009d0a <_strtod_l+0x232>
 8009cee:	1c69      	adds	r1, r5, #1
 8009cf0:	4401      	add	r1, r0
 8009cf2:	4428      	add	r0, r5
 8009cf4:	2808      	cmp	r0, #8
 8009cf6:	dc16      	bgt.n	8009d26 <_strtod_l+0x24e>
 8009cf8:	230a      	movs	r3, #10
 8009cfa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009cfc:	fb03 2300 	mla	r3, r3, r0, r2
 8009d00:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d02:	2300      	movs	r3, #0
 8009d04:	e018      	b.n	8009d38 <_strtod_l+0x260>
 8009d06:	4638      	mov	r0, r7
 8009d08:	e7da      	b.n	8009cc0 <_strtod_l+0x1e8>
 8009d0a:	2b08      	cmp	r3, #8
 8009d0c:	f103 0301 	add.w	r3, r3, #1
 8009d10:	dc03      	bgt.n	8009d1a <_strtod_l+0x242>
 8009d12:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009d14:	434e      	muls	r6, r1
 8009d16:	960a      	str	r6, [sp, #40]	@ 0x28
 8009d18:	e7e7      	b.n	8009cea <_strtod_l+0x212>
 8009d1a:	2b10      	cmp	r3, #16
 8009d1c:	bfde      	ittt	le
 8009d1e:	9e08      	ldrle	r6, [sp, #32]
 8009d20:	434e      	mulle	r6, r1
 8009d22:	9608      	strle	r6, [sp, #32]
 8009d24:	e7e1      	b.n	8009cea <_strtod_l+0x212>
 8009d26:	280f      	cmp	r0, #15
 8009d28:	dceb      	bgt.n	8009d02 <_strtod_l+0x22a>
 8009d2a:	230a      	movs	r3, #10
 8009d2c:	9808      	ldr	r0, [sp, #32]
 8009d2e:	fb03 2300 	mla	r3, r3, r0, r2
 8009d32:	9308      	str	r3, [sp, #32]
 8009d34:	e7e5      	b.n	8009d02 <_strtod_l+0x22a>
 8009d36:	4629      	mov	r1, r5
 8009d38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d3a:	460d      	mov	r5, r1
 8009d3c:	1c50      	adds	r0, r2, #1
 8009d3e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009d40:	7852      	ldrb	r2, [r2, #1]
 8009d42:	4618      	mov	r0, r3
 8009d44:	e7b1      	b.n	8009caa <_strtod_l+0x1d2>
 8009d46:	f04f 0900 	mov.w	r9, #0
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e77d      	b.n	8009c4a <_strtod_l+0x172>
 8009d4e:	f04f 0c00 	mov.w	ip, #0
 8009d52:	1ca2      	adds	r2, r4, #2
 8009d54:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d56:	78a2      	ldrb	r2, [r4, #2]
 8009d58:	e785      	b.n	8009c66 <_strtod_l+0x18e>
 8009d5a:	f04f 0c01 	mov.w	ip, #1
 8009d5e:	e7f8      	b.n	8009d52 <_strtod_l+0x27a>
 8009d60:	0800e250 	.word	0x0800e250
 8009d64:	7ff00000 	.word	0x7ff00000
 8009d68:	0800e23a 	.word	0x0800e23a
 8009d6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d6e:	1c51      	adds	r1, r2, #1
 8009d70:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d72:	7852      	ldrb	r2, [r2, #1]
 8009d74:	2a30      	cmp	r2, #48	@ 0x30
 8009d76:	d0f9      	beq.n	8009d6c <_strtod_l+0x294>
 8009d78:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009d7c:	2908      	cmp	r1, #8
 8009d7e:	f63f af78 	bhi.w	8009c72 <_strtod_l+0x19a>
 8009d82:	f04f 080a 	mov.w	r8, #10
 8009d86:	3a30      	subs	r2, #48	@ 0x30
 8009d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009d8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d90:	1c56      	adds	r6, r2, #1
 8009d92:	9619      	str	r6, [sp, #100]	@ 0x64
 8009d94:	7852      	ldrb	r2, [r2, #1]
 8009d96:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009d9a:	f1be 0f09 	cmp.w	lr, #9
 8009d9e:	d939      	bls.n	8009e14 <_strtod_l+0x33c>
 8009da0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009da2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009da6:	1a76      	subs	r6, r6, r1
 8009da8:	2e08      	cmp	r6, #8
 8009daa:	dc03      	bgt.n	8009db4 <_strtod_l+0x2dc>
 8009dac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009dae:	4588      	cmp	r8, r1
 8009db0:	bfa8      	it	ge
 8009db2:	4688      	movge	r8, r1
 8009db4:	f1bc 0f00 	cmp.w	ip, #0
 8009db8:	d001      	beq.n	8009dbe <_strtod_l+0x2e6>
 8009dba:	f1c8 0800 	rsb	r8, r8, #0
 8009dbe:	2d00      	cmp	r5, #0
 8009dc0:	d14e      	bne.n	8009e60 <_strtod_l+0x388>
 8009dc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dc4:	4308      	orrs	r0, r1
 8009dc6:	f47f aec0 	bne.w	8009b4a <_strtod_l+0x72>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f47f aed6 	bne.w	8009b7c <_strtod_l+0xa4>
 8009dd0:	2a69      	cmp	r2, #105	@ 0x69
 8009dd2:	d028      	beq.n	8009e26 <_strtod_l+0x34e>
 8009dd4:	dc25      	bgt.n	8009e22 <_strtod_l+0x34a>
 8009dd6:	2a49      	cmp	r2, #73	@ 0x49
 8009dd8:	d025      	beq.n	8009e26 <_strtod_l+0x34e>
 8009dda:	2a4e      	cmp	r2, #78	@ 0x4e
 8009ddc:	f47f aece 	bne.w	8009b7c <_strtod_l+0xa4>
 8009de0:	499a      	ldr	r1, [pc, #616]	@ (800a04c <_strtod_l+0x574>)
 8009de2:	a819      	add	r0, sp, #100	@ 0x64
 8009de4:	f002 fcaa 	bl	800c73c <__match>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	f43f aec7 	beq.w	8009b7c <_strtod_l+0xa4>
 8009dee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	2b28      	cmp	r3, #40	@ 0x28
 8009df4:	d12e      	bne.n	8009e54 <_strtod_l+0x37c>
 8009df6:	4996      	ldr	r1, [pc, #600]	@ (800a050 <_strtod_l+0x578>)
 8009df8:	aa1c      	add	r2, sp, #112	@ 0x70
 8009dfa:	a819      	add	r0, sp, #100	@ 0x64
 8009dfc:	f002 fcb2 	bl	800c764 <__hexnan>
 8009e00:	2805      	cmp	r0, #5
 8009e02:	d127      	bne.n	8009e54 <_strtod_l+0x37c>
 8009e04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e06:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009e0a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009e0e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009e12:	e69a      	b.n	8009b4a <_strtod_l+0x72>
 8009e14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009e16:	fb08 2101 	mla	r1, r8, r1, r2
 8009e1a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009e1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e20:	e7b5      	b.n	8009d8e <_strtod_l+0x2b6>
 8009e22:	2a6e      	cmp	r2, #110	@ 0x6e
 8009e24:	e7da      	b.n	8009ddc <_strtod_l+0x304>
 8009e26:	498b      	ldr	r1, [pc, #556]	@ (800a054 <_strtod_l+0x57c>)
 8009e28:	a819      	add	r0, sp, #100	@ 0x64
 8009e2a:	f002 fc87 	bl	800c73c <__match>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f43f aea4 	beq.w	8009b7c <_strtod_l+0xa4>
 8009e34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e36:	4988      	ldr	r1, [pc, #544]	@ (800a058 <_strtod_l+0x580>)
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	a819      	add	r0, sp, #100	@ 0x64
 8009e3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e3e:	f002 fc7d 	bl	800c73c <__match>
 8009e42:	b910      	cbnz	r0, 8009e4a <_strtod_l+0x372>
 8009e44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e46:	3301      	adds	r3, #1
 8009e48:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e4a:	f04f 0a00 	mov.w	sl, #0
 8009e4e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a05c <_strtod_l+0x584>
 8009e52:	e67a      	b.n	8009b4a <_strtod_l+0x72>
 8009e54:	4882      	ldr	r0, [pc, #520]	@ (800a060 <_strtod_l+0x588>)
 8009e56:	f001 fb49 	bl	800b4ec <nan>
 8009e5a:	4682      	mov	sl, r0
 8009e5c:	468b      	mov	fp, r1
 8009e5e:	e674      	b.n	8009b4a <_strtod_l+0x72>
 8009e60:	eba8 0309 	sub.w	r3, r8, r9
 8009e64:	2f00      	cmp	r7, #0
 8009e66:	bf08      	it	eq
 8009e68:	462f      	moveq	r7, r5
 8009e6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e6c:	2d10      	cmp	r5, #16
 8009e6e:	462c      	mov	r4, r5
 8009e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e72:	bfa8      	it	ge
 8009e74:	2410      	movge	r4, #16
 8009e76:	f7f6 fab5 	bl	80003e4 <__aeabi_ui2d>
 8009e7a:	2d09      	cmp	r5, #9
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	468b      	mov	fp, r1
 8009e80:	dc11      	bgt.n	8009ea6 <_strtod_l+0x3ce>
 8009e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f43f ae60 	beq.w	8009b4a <_strtod_l+0x72>
 8009e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e8c:	dd76      	ble.n	8009f7c <_strtod_l+0x4a4>
 8009e8e:	2b16      	cmp	r3, #22
 8009e90:	dc5d      	bgt.n	8009f4e <_strtod_l+0x476>
 8009e92:	4974      	ldr	r1, [pc, #464]	@ (800a064 <_strtod_l+0x58c>)
 8009e94:	4652      	mov	r2, sl
 8009e96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e9a:	465b      	mov	r3, fp
 8009e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea0:	f7f6 fb1a 	bl	80004d8 <__aeabi_dmul>
 8009ea4:	e7d9      	b.n	8009e5a <_strtod_l+0x382>
 8009ea6:	4b6f      	ldr	r3, [pc, #444]	@ (800a064 <_strtod_l+0x58c>)
 8009ea8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009eac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009eb0:	f7f6 fb12 	bl	80004d8 <__aeabi_dmul>
 8009eb4:	4682      	mov	sl, r0
 8009eb6:	9808      	ldr	r0, [sp, #32]
 8009eb8:	468b      	mov	fp, r1
 8009eba:	f7f6 fa93 	bl	80003e4 <__aeabi_ui2d>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	4659      	mov	r1, fp
 8009ec6:	f7f6 f951 	bl	800016c <__adddf3>
 8009eca:	2d0f      	cmp	r5, #15
 8009ecc:	4682      	mov	sl, r0
 8009ece:	468b      	mov	fp, r1
 8009ed0:	ddd7      	ble.n	8009e82 <_strtod_l+0x3aa>
 8009ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed4:	1b2c      	subs	r4, r5, r4
 8009ed6:	441c      	add	r4, r3
 8009ed8:	2c00      	cmp	r4, #0
 8009eda:	f340 8096 	ble.w	800a00a <_strtod_l+0x532>
 8009ede:	f014 030f 	ands.w	r3, r4, #15
 8009ee2:	d00a      	beq.n	8009efa <_strtod_l+0x422>
 8009ee4:	495f      	ldr	r1, [pc, #380]	@ (800a064 <_strtod_l+0x58c>)
 8009ee6:	4652      	mov	r2, sl
 8009ee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ef0:	465b      	mov	r3, fp
 8009ef2:	f7f6 faf1 	bl	80004d8 <__aeabi_dmul>
 8009ef6:	4682      	mov	sl, r0
 8009ef8:	468b      	mov	fp, r1
 8009efa:	f034 040f 	bics.w	r4, r4, #15
 8009efe:	d073      	beq.n	8009fe8 <_strtod_l+0x510>
 8009f00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009f04:	dd48      	ble.n	8009f98 <_strtod_l+0x4c0>
 8009f06:	2400      	movs	r4, #0
 8009f08:	46a0      	mov	r8, r4
 8009f0a:	46a1      	mov	r9, r4
 8009f0c:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f0e:	2322      	movs	r3, #34	@ 0x22
 8009f10:	f04f 0a00 	mov.w	sl, #0
 8009f14:	9a05      	ldr	r2, [sp, #20]
 8009f16:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a05c <_strtod_l+0x584>
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f43f ae13 	beq.w	8009b4a <_strtod_l+0x72>
 8009f24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f26:	9805      	ldr	r0, [sp, #20]
 8009f28:	f002 fdc0 	bl	800caac <_Bfree>
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	9805      	ldr	r0, [sp, #20]
 8009f30:	f002 fdbc 	bl	800caac <_Bfree>
 8009f34:	4641      	mov	r1, r8
 8009f36:	9805      	ldr	r0, [sp, #20]
 8009f38:	f002 fdb8 	bl	800caac <_Bfree>
 8009f3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f3e:	9805      	ldr	r0, [sp, #20]
 8009f40:	f002 fdb4 	bl	800caac <_Bfree>
 8009f44:	4621      	mov	r1, r4
 8009f46:	9805      	ldr	r0, [sp, #20]
 8009f48:	f002 fdb0 	bl	800caac <_Bfree>
 8009f4c:	e5fd      	b.n	8009b4a <_strtod_l+0x72>
 8009f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009f54:	4293      	cmp	r3, r2
 8009f56:	dbbc      	blt.n	8009ed2 <_strtod_l+0x3fa>
 8009f58:	4c42      	ldr	r4, [pc, #264]	@ (800a064 <_strtod_l+0x58c>)
 8009f5a:	f1c5 050f 	rsb	r5, r5, #15
 8009f5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009f62:	4652      	mov	r2, sl
 8009f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f68:	465b      	mov	r3, fp
 8009f6a:	f7f6 fab5 	bl	80004d8 <__aeabi_dmul>
 8009f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f70:	1b5d      	subs	r5, r3, r5
 8009f72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f7a:	e791      	b.n	8009ea0 <_strtod_l+0x3c8>
 8009f7c:	3316      	adds	r3, #22
 8009f7e:	dba8      	blt.n	8009ed2 <_strtod_l+0x3fa>
 8009f80:	4b38      	ldr	r3, [pc, #224]	@ (800a064 <_strtod_l+0x58c>)
 8009f82:	eba9 0808 	sub.w	r8, r9, r8
 8009f86:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009f90:	4659      	mov	r1, fp
 8009f92:	f7f6 fbcb 	bl	800072c <__aeabi_ddiv>
 8009f96:	e760      	b.n	8009e5a <_strtod_l+0x382>
 8009f98:	4b33      	ldr	r3, [pc, #204]	@ (800a068 <_strtod_l+0x590>)
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	9308      	str	r3, [sp, #32]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4659      	mov	r1, fp
 8009fa2:	461e      	mov	r6, r3
 8009fa4:	1124      	asrs	r4, r4, #4
 8009fa6:	2c01      	cmp	r4, #1
 8009fa8:	dc21      	bgt.n	8009fee <_strtod_l+0x516>
 8009faa:	b10b      	cbz	r3, 8009fb0 <_strtod_l+0x4d8>
 8009fac:	4682      	mov	sl, r0
 8009fae:	468b      	mov	fp, r1
 8009fb0:	492d      	ldr	r1, [pc, #180]	@ (800a068 <_strtod_l+0x590>)
 8009fb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009fb6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009fba:	4652      	mov	r2, sl
 8009fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fc0:	465b      	mov	r3, fp
 8009fc2:	f7f6 fa89 	bl	80004d8 <__aeabi_dmul>
 8009fc6:	4b25      	ldr	r3, [pc, #148]	@ (800a05c <_strtod_l+0x584>)
 8009fc8:	460a      	mov	r2, r1
 8009fca:	400b      	ands	r3, r1
 8009fcc:	4927      	ldr	r1, [pc, #156]	@ (800a06c <_strtod_l+0x594>)
 8009fce:	4682      	mov	sl, r0
 8009fd0:	428b      	cmp	r3, r1
 8009fd2:	d898      	bhi.n	8009f06 <_strtod_l+0x42e>
 8009fd4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009fd8:	428b      	cmp	r3, r1
 8009fda:	bf86      	itte	hi
 8009fdc:	f04f 3aff 	movhi.w	sl, #4294967295
 8009fe0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a070 <_strtod_l+0x598>
 8009fe4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9308      	str	r3, [sp, #32]
 8009fec:	e07a      	b.n	800a0e4 <_strtod_l+0x60c>
 8009fee:	07e2      	lsls	r2, r4, #31
 8009ff0:	d505      	bpl.n	8009ffe <_strtod_l+0x526>
 8009ff2:	9b08      	ldr	r3, [sp, #32]
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	f7f6 fa6e 	bl	80004d8 <__aeabi_dmul>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	9a08      	ldr	r2, [sp, #32]
 800a000:	3601      	adds	r6, #1
 800a002:	3208      	adds	r2, #8
 800a004:	1064      	asrs	r4, r4, #1
 800a006:	9208      	str	r2, [sp, #32]
 800a008:	e7cd      	b.n	8009fa6 <_strtod_l+0x4ce>
 800a00a:	d0ed      	beq.n	8009fe8 <_strtod_l+0x510>
 800a00c:	4264      	negs	r4, r4
 800a00e:	f014 020f 	ands.w	r2, r4, #15
 800a012:	d00a      	beq.n	800a02a <_strtod_l+0x552>
 800a014:	4b13      	ldr	r3, [pc, #76]	@ (800a064 <_strtod_l+0x58c>)
 800a016:	4650      	mov	r0, sl
 800a018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a01c:	4659      	mov	r1, fp
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f7f6 fb83 	bl	800072c <__aeabi_ddiv>
 800a026:	4682      	mov	sl, r0
 800a028:	468b      	mov	fp, r1
 800a02a:	1124      	asrs	r4, r4, #4
 800a02c:	d0dc      	beq.n	8009fe8 <_strtod_l+0x510>
 800a02e:	2c1f      	cmp	r4, #31
 800a030:	dd20      	ble.n	800a074 <_strtod_l+0x59c>
 800a032:	2400      	movs	r4, #0
 800a034:	46a0      	mov	r8, r4
 800a036:	46a1      	mov	r9, r4
 800a038:	940a      	str	r4, [sp, #40]	@ 0x28
 800a03a:	2322      	movs	r3, #34	@ 0x22
 800a03c:	9a05      	ldr	r2, [sp, #20]
 800a03e:	f04f 0a00 	mov.w	sl, #0
 800a042:	f04f 0b00 	mov.w	fp, #0
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	e768      	b.n	8009f1c <_strtod_l+0x444>
 800a04a:	bf00      	nop
 800a04c:	0800e39e 	.word	0x0800e39e
 800a050:	0800e23c 	.word	0x0800e23c
 800a054:	0800e396 	.word	0x0800e396
 800a058:	0800e3d0 	.word	0x0800e3d0
 800a05c:	7ff00000 	.word	0x7ff00000
 800a060:	0800e65c 	.word	0x0800e65c
 800a064:	0800e548 	.word	0x0800e548
 800a068:	0800e520 	.word	0x0800e520
 800a06c:	7ca00000 	.word	0x7ca00000
 800a070:	7fefffff 	.word	0x7fefffff
 800a074:	f014 0310 	ands.w	r3, r4, #16
 800a078:	bf18      	it	ne
 800a07a:	236a      	movne	r3, #106	@ 0x6a
 800a07c:	4650      	mov	r0, sl
 800a07e:	9308      	str	r3, [sp, #32]
 800a080:	4659      	mov	r1, fp
 800a082:	2300      	movs	r3, #0
 800a084:	4ea9      	ldr	r6, [pc, #676]	@ (800a32c <_strtod_l+0x854>)
 800a086:	07e2      	lsls	r2, r4, #31
 800a088:	d504      	bpl.n	800a094 <_strtod_l+0x5bc>
 800a08a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a08e:	f7f6 fa23 	bl	80004d8 <__aeabi_dmul>
 800a092:	2301      	movs	r3, #1
 800a094:	1064      	asrs	r4, r4, #1
 800a096:	f106 0608 	add.w	r6, r6, #8
 800a09a:	d1f4      	bne.n	800a086 <_strtod_l+0x5ae>
 800a09c:	b10b      	cbz	r3, 800a0a2 <_strtod_l+0x5ca>
 800a09e:	4682      	mov	sl, r0
 800a0a0:	468b      	mov	fp, r1
 800a0a2:	9b08      	ldr	r3, [sp, #32]
 800a0a4:	b1b3      	cbz	r3, 800a0d4 <_strtod_l+0x5fc>
 800a0a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a0aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	4659      	mov	r1, fp
 800a0b2:	dd0f      	ble.n	800a0d4 <_strtod_l+0x5fc>
 800a0b4:	2b1f      	cmp	r3, #31
 800a0b6:	dd57      	ble.n	800a168 <_strtod_l+0x690>
 800a0b8:	2b34      	cmp	r3, #52	@ 0x34
 800a0ba:	bfd8      	it	le
 800a0bc:	f04f 33ff 	movle.w	r3, #4294967295
 800a0c0:	f04f 0a00 	mov.w	sl, #0
 800a0c4:	bfcf      	iteee	gt
 800a0c6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a0ca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a0ce:	4093      	lslle	r3, r2
 800a0d0:	ea03 0b01 	andle.w	fp, r3, r1
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4650      	mov	r0, sl
 800a0da:	4659      	mov	r1, fp
 800a0dc:	f7f6 fc64 	bl	80009a8 <__aeabi_dcmpeq>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d1a6      	bne.n	800a032 <_strtod_l+0x55a>
 800a0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0e6:	463a      	mov	r2, r7
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a0ec:	462b      	mov	r3, r5
 800a0ee:	9805      	ldr	r0, [sp, #20]
 800a0f0:	f002 fd44 	bl	800cb7c <__s2b>
 800a0f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f43f af05 	beq.w	8009f06 <_strtod_l+0x42e>
 800a0fc:	2400      	movs	r4, #0
 800a0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a100:	eba9 0308 	sub.w	r3, r9, r8
 800a104:	2a00      	cmp	r2, #0
 800a106:	bfa8      	it	ge
 800a108:	2300      	movge	r3, #0
 800a10a:	46a0      	mov	r8, r4
 800a10c:	9312      	str	r3, [sp, #72]	@ 0x48
 800a10e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a112:	9316      	str	r3, [sp, #88]	@ 0x58
 800a114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a116:	9805      	ldr	r0, [sp, #20]
 800a118:	6859      	ldr	r1, [r3, #4]
 800a11a:	f002 fc87 	bl	800ca2c <_Balloc>
 800a11e:	4681      	mov	r9, r0
 800a120:	2800      	cmp	r0, #0
 800a122:	f43f aef4 	beq.w	8009f0e <_strtod_l+0x436>
 800a126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a128:	300c      	adds	r0, #12
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	f103 010c 	add.w	r1, r3, #12
 800a130:	3202      	adds	r2, #2
 800a132:	0092      	lsls	r2, r2, #2
 800a134:	f001 f9cb 	bl	800b4ce <memcpy>
 800a138:	ab1c      	add	r3, sp, #112	@ 0x70
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	4652      	mov	r2, sl
 800a142:	465b      	mov	r3, fp
 800a144:	9805      	ldr	r0, [sp, #20]
 800a146:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a14a:	f003 f849 	bl	800d1e0 <__d2b>
 800a14e:	901a      	str	r0, [sp, #104]	@ 0x68
 800a150:	2800      	cmp	r0, #0
 800a152:	f43f aedc 	beq.w	8009f0e <_strtod_l+0x436>
 800a156:	2101      	movs	r1, #1
 800a158:	9805      	ldr	r0, [sp, #20]
 800a15a:	f002 fda5 	bl	800cca8 <__i2b>
 800a15e:	4680      	mov	r8, r0
 800a160:	b948      	cbnz	r0, 800a176 <_strtod_l+0x69e>
 800a162:	f04f 0800 	mov.w	r8, #0
 800a166:	e6d2      	b.n	8009f0e <_strtod_l+0x436>
 800a168:	f04f 32ff 	mov.w	r2, #4294967295
 800a16c:	fa02 f303 	lsl.w	r3, r2, r3
 800a170:	ea03 0a0a 	and.w	sl, r3, sl
 800a174:	e7ae      	b.n	800a0d4 <_strtod_l+0x5fc>
 800a176:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a178:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a17a:	2d00      	cmp	r5, #0
 800a17c:	bfab      	itete	ge
 800a17e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a180:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a182:	18ef      	addge	r7, r5, r3
 800a184:	1b5e      	sublt	r6, r3, r5
 800a186:	9b08      	ldr	r3, [sp, #32]
 800a188:	bfa8      	it	ge
 800a18a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a18c:	eba5 0503 	sub.w	r5, r5, r3
 800a190:	4415      	add	r5, r2
 800a192:	4b67      	ldr	r3, [pc, #412]	@ (800a330 <_strtod_l+0x858>)
 800a194:	f105 35ff 	add.w	r5, r5, #4294967295
 800a198:	bfb8      	it	lt
 800a19a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a19c:	429d      	cmp	r5, r3
 800a19e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a1a2:	da50      	bge.n	800a246 <_strtod_l+0x76e>
 800a1a4:	1b5b      	subs	r3, r3, r5
 800a1a6:	2b1f      	cmp	r3, #31
 800a1a8:	f04f 0101 	mov.w	r1, #1
 800a1ac:	eba2 0203 	sub.w	r2, r2, r3
 800a1b0:	dc3d      	bgt.n	800a22e <_strtod_l+0x756>
 800a1b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1bc:	18bd      	adds	r5, r7, r2
 800a1be:	9b08      	ldr	r3, [sp, #32]
 800a1c0:	42af      	cmp	r7, r5
 800a1c2:	4416      	add	r6, r2
 800a1c4:	441e      	add	r6, r3
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	bfa8      	it	ge
 800a1ca:	462b      	movge	r3, r5
 800a1cc:	42b3      	cmp	r3, r6
 800a1ce:	bfa8      	it	ge
 800a1d0:	4633      	movge	r3, r6
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bfc2      	ittt	gt
 800a1d6:	1aed      	subgt	r5, r5, r3
 800a1d8:	1af6      	subgt	r6, r6, r3
 800a1da:	1aff      	subgt	r7, r7, r3
 800a1dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	dd16      	ble.n	800a210 <_strtod_l+0x738>
 800a1e2:	4641      	mov	r1, r8
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	9805      	ldr	r0, [sp, #20]
 800a1e8:	f002 fe1c 	bl	800ce24 <__pow5mult>
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d0b7      	beq.n	800a162 <_strtod_l+0x68a>
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1f6:	9805      	ldr	r0, [sp, #20]
 800a1f8:	f002 fd6c 	bl	800ccd4 <__multiply>
 800a1fc:	900e      	str	r0, [sp, #56]	@ 0x38
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f43f ae85 	beq.w	8009f0e <_strtod_l+0x436>
 800a204:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a206:	9805      	ldr	r0, [sp, #20]
 800a208:	f002 fc50 	bl	800caac <_Bfree>
 800a20c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a20e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a210:	2d00      	cmp	r5, #0
 800a212:	dc1d      	bgt.n	800a250 <_strtod_l+0x778>
 800a214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	dd23      	ble.n	800a262 <_strtod_l+0x78a>
 800a21a:	4649      	mov	r1, r9
 800a21c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a21e:	9805      	ldr	r0, [sp, #20]
 800a220:	f002 fe00 	bl	800ce24 <__pow5mult>
 800a224:	4681      	mov	r9, r0
 800a226:	b9e0      	cbnz	r0, 800a262 <_strtod_l+0x78a>
 800a228:	f04f 0900 	mov.w	r9, #0
 800a22c:	e66f      	b.n	8009f0e <_strtod_l+0x436>
 800a22e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a232:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a236:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a23a:	35e2      	adds	r5, #226	@ 0xe2
 800a23c:	fa01 f305 	lsl.w	r3, r1, r5
 800a240:	9310      	str	r3, [sp, #64]	@ 0x40
 800a242:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a244:	e7ba      	b.n	800a1bc <_strtod_l+0x6e4>
 800a246:	2300      	movs	r3, #0
 800a248:	9310      	str	r3, [sp, #64]	@ 0x40
 800a24a:	2301      	movs	r3, #1
 800a24c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a24e:	e7b5      	b.n	800a1bc <_strtod_l+0x6e4>
 800a250:	462a      	mov	r2, r5
 800a252:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a254:	9805      	ldr	r0, [sp, #20]
 800a256:	f002 fe3f 	bl	800ced8 <__lshift>
 800a25a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d1d9      	bne.n	800a214 <_strtod_l+0x73c>
 800a260:	e655      	b.n	8009f0e <_strtod_l+0x436>
 800a262:	2e00      	cmp	r6, #0
 800a264:	dd07      	ble.n	800a276 <_strtod_l+0x79e>
 800a266:	4649      	mov	r1, r9
 800a268:	4632      	mov	r2, r6
 800a26a:	9805      	ldr	r0, [sp, #20]
 800a26c:	f002 fe34 	bl	800ced8 <__lshift>
 800a270:	4681      	mov	r9, r0
 800a272:	2800      	cmp	r0, #0
 800a274:	d0d8      	beq.n	800a228 <_strtod_l+0x750>
 800a276:	2f00      	cmp	r7, #0
 800a278:	dd08      	ble.n	800a28c <_strtod_l+0x7b4>
 800a27a:	4641      	mov	r1, r8
 800a27c:	463a      	mov	r2, r7
 800a27e:	9805      	ldr	r0, [sp, #20]
 800a280:	f002 fe2a 	bl	800ced8 <__lshift>
 800a284:	4680      	mov	r8, r0
 800a286:	2800      	cmp	r0, #0
 800a288:	f43f ae41 	beq.w	8009f0e <_strtod_l+0x436>
 800a28c:	464a      	mov	r2, r9
 800a28e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a290:	9805      	ldr	r0, [sp, #20]
 800a292:	f002 fea9 	bl	800cfe8 <__mdiff>
 800a296:	4604      	mov	r4, r0
 800a298:	2800      	cmp	r0, #0
 800a29a:	f43f ae38 	beq.w	8009f0e <_strtod_l+0x436>
 800a29e:	68c3      	ldr	r3, [r0, #12]
 800a2a0:	4641      	mov	r1, r8
 800a2a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60c3      	str	r3, [r0, #12]
 800a2a8:	f002 fe82 	bl	800cfb0 <__mcmp>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	da45      	bge.n	800a33c <_strtod_l+0x864>
 800a2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2b2:	ea53 030a 	orrs.w	r3, r3, sl
 800a2b6:	d16b      	bne.n	800a390 <_strtod_l+0x8b8>
 800a2b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d167      	bne.n	800a390 <_strtod_l+0x8b8>
 800a2c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2c4:	0d1b      	lsrs	r3, r3, #20
 800a2c6:	051b      	lsls	r3, r3, #20
 800a2c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a2cc:	d960      	bls.n	800a390 <_strtod_l+0x8b8>
 800a2ce:	6963      	ldr	r3, [r4, #20]
 800a2d0:	b913      	cbnz	r3, 800a2d8 <_strtod_l+0x800>
 800a2d2:	6923      	ldr	r3, [r4, #16]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	dd5b      	ble.n	800a390 <_strtod_l+0x8b8>
 800a2d8:	4621      	mov	r1, r4
 800a2da:	2201      	movs	r2, #1
 800a2dc:	9805      	ldr	r0, [sp, #20]
 800a2de:	f002 fdfb 	bl	800ced8 <__lshift>
 800a2e2:	4641      	mov	r1, r8
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	f002 fe63 	bl	800cfb0 <__mcmp>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	dd50      	ble.n	800a390 <_strtod_l+0x8b8>
 800a2ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2f2:	9a08      	ldr	r2, [sp, #32]
 800a2f4:	0d1b      	lsrs	r3, r3, #20
 800a2f6:	051b      	lsls	r3, r3, #20
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	d06a      	beq.n	800a3d2 <_strtod_l+0x8fa>
 800a2fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a300:	d867      	bhi.n	800a3d2 <_strtod_l+0x8fa>
 800a302:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a306:	f67f ae98 	bls.w	800a03a <_strtod_l+0x562>
 800a30a:	4650      	mov	r0, sl
 800a30c:	4659      	mov	r1, fp
 800a30e:	4b09      	ldr	r3, [pc, #36]	@ (800a334 <_strtod_l+0x85c>)
 800a310:	2200      	movs	r2, #0
 800a312:	f7f6 f8e1 	bl	80004d8 <__aeabi_dmul>
 800a316:	4b08      	ldr	r3, [pc, #32]	@ (800a338 <_strtod_l+0x860>)
 800a318:	4682      	mov	sl, r0
 800a31a:	400b      	ands	r3, r1
 800a31c:	468b      	mov	fp, r1
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f47f ae00 	bne.w	8009f24 <_strtod_l+0x44c>
 800a324:	2322      	movs	r3, #34	@ 0x22
 800a326:	9a05      	ldr	r2, [sp, #20]
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	e5fb      	b.n	8009f24 <_strtod_l+0x44c>
 800a32c:	0800e268 	.word	0x0800e268
 800a330:	fffffc02 	.word	0xfffffc02
 800a334:	39500000 	.word	0x39500000
 800a338:	7ff00000 	.word	0x7ff00000
 800a33c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a340:	d165      	bne.n	800a40e <_strtod_l+0x936>
 800a342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a348:	b35a      	cbz	r2, 800a3a2 <_strtod_l+0x8ca>
 800a34a:	4a99      	ldr	r2, [pc, #612]	@ (800a5b0 <_strtod_l+0xad8>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d12b      	bne.n	800a3a8 <_strtod_l+0x8d0>
 800a350:	9b08      	ldr	r3, [sp, #32]
 800a352:	4651      	mov	r1, sl
 800a354:	b303      	cbz	r3, 800a398 <_strtod_l+0x8c0>
 800a356:	465a      	mov	r2, fp
 800a358:	4b96      	ldr	r3, [pc, #600]	@ (800a5b4 <_strtod_l+0xadc>)
 800a35a:	4013      	ands	r3, r2
 800a35c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a360:	f04f 32ff 	mov.w	r2, #4294967295
 800a364:	d81b      	bhi.n	800a39e <_strtod_l+0x8c6>
 800a366:	0d1b      	lsrs	r3, r3, #20
 800a368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a36c:	fa02 f303 	lsl.w	r3, r2, r3
 800a370:	4299      	cmp	r1, r3
 800a372:	d119      	bne.n	800a3a8 <_strtod_l+0x8d0>
 800a374:	4b90      	ldr	r3, [pc, #576]	@ (800a5b8 <_strtod_l+0xae0>)
 800a376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a378:	429a      	cmp	r2, r3
 800a37a:	d102      	bne.n	800a382 <_strtod_l+0x8aa>
 800a37c:	3101      	adds	r1, #1
 800a37e:	f43f adc6 	beq.w	8009f0e <_strtod_l+0x436>
 800a382:	f04f 0a00 	mov.w	sl, #0
 800a386:	4b8b      	ldr	r3, [pc, #556]	@ (800a5b4 <_strtod_l+0xadc>)
 800a388:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a38a:	401a      	ands	r2, r3
 800a38c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a390:	9b08      	ldr	r3, [sp, #32]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1b9      	bne.n	800a30a <_strtod_l+0x832>
 800a396:	e5c5      	b.n	8009f24 <_strtod_l+0x44c>
 800a398:	f04f 33ff 	mov.w	r3, #4294967295
 800a39c:	e7e8      	b.n	800a370 <_strtod_l+0x898>
 800a39e:	4613      	mov	r3, r2
 800a3a0:	e7e6      	b.n	800a370 <_strtod_l+0x898>
 800a3a2:	ea53 030a 	orrs.w	r3, r3, sl
 800a3a6:	d0a2      	beq.n	800a2ee <_strtod_l+0x816>
 800a3a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3aa:	b1db      	cbz	r3, 800a3e4 <_strtod_l+0x90c>
 800a3ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3ae:	4213      	tst	r3, r2
 800a3b0:	d0ee      	beq.n	800a390 <_strtod_l+0x8b8>
 800a3b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3b4:	4650      	mov	r0, sl
 800a3b6:	4659      	mov	r1, fp
 800a3b8:	9a08      	ldr	r2, [sp, #32]
 800a3ba:	b1bb      	cbz	r3, 800a3ec <_strtod_l+0x914>
 800a3bc:	f7ff fb69 	bl	8009a92 <sulp>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3c8:	f7f5 fed0 	bl	800016c <__adddf3>
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	468b      	mov	fp, r1
 800a3d0:	e7de      	b.n	800a390 <_strtod_l+0x8b8>
 800a3d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a3d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a3da:	f04f 3aff 	mov.w	sl, #4294967295
 800a3de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a3e2:	e7d5      	b.n	800a390 <_strtod_l+0x8b8>
 800a3e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3e6:	ea13 0f0a 	tst.w	r3, sl
 800a3ea:	e7e1      	b.n	800a3b0 <_strtod_l+0x8d8>
 800a3ec:	f7ff fb51 	bl	8009a92 <sulp>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3f8:	f7f5 feb6 	bl	8000168 <__aeabi_dsub>
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2300      	movs	r3, #0
 800a400:	4682      	mov	sl, r0
 800a402:	468b      	mov	fp, r1
 800a404:	f7f6 fad0 	bl	80009a8 <__aeabi_dcmpeq>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d0c1      	beq.n	800a390 <_strtod_l+0x8b8>
 800a40c:	e615      	b.n	800a03a <_strtod_l+0x562>
 800a40e:	4641      	mov	r1, r8
 800a410:	4620      	mov	r0, r4
 800a412:	f002 ff3d 	bl	800d290 <__ratio>
 800a416:	2200      	movs	r2, #0
 800a418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a41c:	4606      	mov	r6, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	f7f6 fad6 	bl	80009d0 <__aeabi_dcmple>
 800a424:	2800      	cmp	r0, #0
 800a426:	d06d      	beq.n	800a504 <_strtod_l+0xa2c>
 800a428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d178      	bne.n	800a520 <_strtod_l+0xa48>
 800a42e:	f1ba 0f00 	cmp.w	sl, #0
 800a432:	d156      	bne.n	800a4e2 <_strtod_l+0xa0a>
 800a434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a436:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d158      	bne.n	800a4f0 <_strtod_l+0xa18>
 800a43e:	2200      	movs	r2, #0
 800a440:	4630      	mov	r0, r6
 800a442:	4639      	mov	r1, r7
 800a444:	4b5d      	ldr	r3, [pc, #372]	@ (800a5bc <_strtod_l+0xae4>)
 800a446:	f7f6 fab9 	bl	80009bc <__aeabi_dcmplt>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d157      	bne.n	800a4fe <_strtod_l+0xa26>
 800a44e:	4630      	mov	r0, r6
 800a450:	4639      	mov	r1, r7
 800a452:	2200      	movs	r2, #0
 800a454:	4b5a      	ldr	r3, [pc, #360]	@ (800a5c0 <_strtod_l+0xae8>)
 800a456:	f7f6 f83f 	bl	80004d8 <__aeabi_dmul>
 800a45a:	4606      	mov	r6, r0
 800a45c:	460f      	mov	r7, r1
 800a45e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a462:	9606      	str	r6, [sp, #24]
 800a464:	9307      	str	r3, [sp, #28]
 800a466:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a46a:	4d52      	ldr	r5, [pc, #328]	@ (800a5b4 <_strtod_l+0xadc>)
 800a46c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a472:	401d      	ands	r5, r3
 800a474:	4b53      	ldr	r3, [pc, #332]	@ (800a5c4 <_strtod_l+0xaec>)
 800a476:	429d      	cmp	r5, r3
 800a478:	f040 80aa 	bne.w	800a5d0 <_strtod_l+0xaf8>
 800a47c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a47e:	4650      	mov	r0, sl
 800a480:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a484:	4659      	mov	r1, fp
 800a486:	f002 fe43 	bl	800d110 <__ulp>
 800a48a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a48e:	f7f6 f823 	bl	80004d8 <__aeabi_dmul>
 800a492:	4652      	mov	r2, sl
 800a494:	465b      	mov	r3, fp
 800a496:	f7f5 fe69 	bl	800016c <__adddf3>
 800a49a:	460b      	mov	r3, r1
 800a49c:	4945      	ldr	r1, [pc, #276]	@ (800a5b4 <_strtod_l+0xadc>)
 800a49e:	4a4a      	ldr	r2, [pc, #296]	@ (800a5c8 <_strtod_l+0xaf0>)
 800a4a0:	4019      	ands	r1, r3
 800a4a2:	4291      	cmp	r1, r2
 800a4a4:	4682      	mov	sl, r0
 800a4a6:	d942      	bls.n	800a52e <_strtod_l+0xa56>
 800a4a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4aa:	4b43      	ldr	r3, [pc, #268]	@ (800a5b8 <_strtod_l+0xae0>)
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d103      	bne.n	800a4b8 <_strtod_l+0x9e0>
 800a4b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	f43f ad2b 	beq.w	8009f0e <_strtod_l+0x436>
 800a4b8:	f04f 3aff 	mov.w	sl, #4294967295
 800a4bc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a5b8 <_strtod_l+0xae0>
 800a4c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4c2:	9805      	ldr	r0, [sp, #20]
 800a4c4:	f002 faf2 	bl	800caac <_Bfree>
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	9805      	ldr	r0, [sp, #20]
 800a4cc:	f002 faee 	bl	800caac <_Bfree>
 800a4d0:	4641      	mov	r1, r8
 800a4d2:	9805      	ldr	r0, [sp, #20]
 800a4d4:	f002 faea 	bl	800caac <_Bfree>
 800a4d8:	4621      	mov	r1, r4
 800a4da:	9805      	ldr	r0, [sp, #20]
 800a4dc:	f002 fae6 	bl	800caac <_Bfree>
 800a4e0:	e618      	b.n	800a114 <_strtod_l+0x63c>
 800a4e2:	f1ba 0f01 	cmp.w	sl, #1
 800a4e6:	d103      	bne.n	800a4f0 <_strtod_l+0xa18>
 800a4e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f43f ada5 	beq.w	800a03a <_strtod_l+0x562>
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4b36      	ldr	r3, [pc, #216]	@ (800a5cc <_strtod_l+0xaf4>)
 800a4f4:	2600      	movs	r6, #0
 800a4f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4fa:	4f30      	ldr	r7, [pc, #192]	@ (800a5bc <_strtod_l+0xae4>)
 800a4fc:	e7b3      	b.n	800a466 <_strtod_l+0x98e>
 800a4fe:	2600      	movs	r6, #0
 800a500:	4f2f      	ldr	r7, [pc, #188]	@ (800a5c0 <_strtod_l+0xae8>)
 800a502:	e7ac      	b.n	800a45e <_strtod_l+0x986>
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	4b2d      	ldr	r3, [pc, #180]	@ (800a5c0 <_strtod_l+0xae8>)
 800a50a:	2200      	movs	r2, #0
 800a50c:	f7f5 ffe4 	bl	80004d8 <__aeabi_dmul>
 800a510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a512:	4606      	mov	r6, r0
 800a514:	460f      	mov	r7, r1
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0a1      	beq.n	800a45e <_strtod_l+0x986>
 800a51a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a51e:	e7a2      	b.n	800a466 <_strtod_l+0x98e>
 800a520:	2200      	movs	r2, #0
 800a522:	4b26      	ldr	r3, [pc, #152]	@ (800a5bc <_strtod_l+0xae4>)
 800a524:	4616      	mov	r6, r2
 800a526:	461f      	mov	r7, r3
 800a528:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a52c:	e79b      	b.n	800a466 <_strtod_l+0x98e>
 800a52e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a532:	9b08      	ldr	r3, [sp, #32]
 800a534:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1c1      	bne.n	800a4c0 <_strtod_l+0x9e8>
 800a53c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a540:	0d1b      	lsrs	r3, r3, #20
 800a542:	051b      	lsls	r3, r3, #20
 800a544:	429d      	cmp	r5, r3
 800a546:	d1bb      	bne.n	800a4c0 <_strtod_l+0x9e8>
 800a548:	4630      	mov	r0, r6
 800a54a:	4639      	mov	r1, r7
 800a54c:	f7f6 fd90 	bl	8001070 <__aeabi_d2lz>
 800a550:	f7f5 ff94 	bl	800047c <__aeabi_l2d>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f5 fe04 	bl	8000168 <__aeabi_dsub>
 800a560:	460b      	mov	r3, r1
 800a562:	4602      	mov	r2, r0
 800a564:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a568:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a56e:	ea46 060a 	orr.w	r6, r6, sl
 800a572:	431e      	orrs	r6, r3
 800a574:	d069      	beq.n	800a64a <_strtod_l+0xb72>
 800a576:	a30a      	add	r3, pc, #40	@ (adr r3, 800a5a0 <_strtod_l+0xac8>)
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	f7f6 fa1e 	bl	80009bc <__aeabi_dcmplt>
 800a580:	2800      	cmp	r0, #0
 800a582:	f47f accf 	bne.w	8009f24 <_strtod_l+0x44c>
 800a586:	a308      	add	r3, pc, #32	@ (adr r3, 800a5a8 <_strtod_l+0xad0>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a590:	f7f6 fa32 	bl	80009f8 <__aeabi_dcmpgt>
 800a594:	2800      	cmp	r0, #0
 800a596:	d093      	beq.n	800a4c0 <_strtod_l+0x9e8>
 800a598:	e4c4      	b.n	8009f24 <_strtod_l+0x44c>
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w
 800a5a0:	94a03595 	.word	0x94a03595
 800a5a4:	3fdfffff 	.word	0x3fdfffff
 800a5a8:	35afe535 	.word	0x35afe535
 800a5ac:	3fe00000 	.word	0x3fe00000
 800a5b0:	000fffff 	.word	0x000fffff
 800a5b4:	7ff00000 	.word	0x7ff00000
 800a5b8:	7fefffff 	.word	0x7fefffff
 800a5bc:	3ff00000 	.word	0x3ff00000
 800a5c0:	3fe00000 	.word	0x3fe00000
 800a5c4:	7fe00000 	.word	0x7fe00000
 800a5c8:	7c9fffff 	.word	0x7c9fffff
 800a5cc:	bff00000 	.word	0xbff00000
 800a5d0:	9b08      	ldr	r3, [sp, #32]
 800a5d2:	b323      	cbz	r3, 800a61e <_strtod_l+0xb46>
 800a5d4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a5d8:	d821      	bhi.n	800a61e <_strtod_l+0xb46>
 800a5da:	a327      	add	r3, pc, #156	@ (adr r3, 800a678 <_strtod_l+0xba0>)
 800a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f6 f9f4 	bl	80009d0 <__aeabi_dcmple>
 800a5e8:	b1a0      	cbz	r0, 800a614 <_strtod_l+0xb3c>
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7f6 fa4b 	bl	8000a88 <__aeabi_d2uiz>
 800a5f2:	2801      	cmp	r0, #1
 800a5f4:	bf38      	it	cc
 800a5f6:	2001      	movcc	r0, #1
 800a5f8:	f7f5 fef4 	bl	80003e4 <__aeabi_ui2d>
 800a5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5fe:	4606      	mov	r6, r0
 800a600:	460f      	mov	r7, r1
 800a602:	b9fb      	cbnz	r3, 800a644 <_strtod_l+0xb6c>
 800a604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a608:	9014      	str	r0, [sp, #80]	@ 0x50
 800a60a:	9315      	str	r3, [sp, #84]	@ 0x54
 800a60c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a610:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a614:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a616:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a61a:	1b5b      	subs	r3, r3, r5
 800a61c:	9311      	str	r3, [sp, #68]	@ 0x44
 800a61e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a622:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a626:	f002 fd73 	bl	800d110 <__ulp>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4650      	mov	r0, sl
 800a630:	4659      	mov	r1, fp
 800a632:	f7f5 ff51 	bl	80004d8 <__aeabi_dmul>
 800a636:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a63a:	f7f5 fd97 	bl	800016c <__adddf3>
 800a63e:	4682      	mov	sl, r0
 800a640:	468b      	mov	fp, r1
 800a642:	e776      	b.n	800a532 <_strtod_l+0xa5a>
 800a644:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a648:	e7e0      	b.n	800a60c <_strtod_l+0xb34>
 800a64a:	a30d      	add	r3, pc, #52	@ (adr r3, 800a680 <_strtod_l+0xba8>)
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	f7f6 f9b4 	bl	80009bc <__aeabi_dcmplt>
 800a654:	e79e      	b.n	800a594 <_strtod_l+0xabc>
 800a656:	2300      	movs	r3, #0
 800a658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a65a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a65c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	f7ff ba77 	b.w	8009b52 <_strtod_l+0x7a>
 800a664:	2a65      	cmp	r2, #101	@ 0x65
 800a666:	f43f ab6e 	beq.w	8009d46 <_strtod_l+0x26e>
 800a66a:	2a45      	cmp	r2, #69	@ 0x45
 800a66c:	f43f ab6b 	beq.w	8009d46 <_strtod_l+0x26e>
 800a670:	2301      	movs	r3, #1
 800a672:	f7ff bba6 	b.w	8009dc2 <_strtod_l+0x2ea>
 800a676:	bf00      	nop
 800a678:	ffc00000 	.word	0xffc00000
 800a67c:	41dfffff 	.word	0x41dfffff
 800a680:	94a03595 	.word	0x94a03595
 800a684:	3fcfffff 	.word	0x3fcfffff

0800a688 <strtod>:
 800a688:	460a      	mov	r2, r1
 800a68a:	4601      	mov	r1, r0
 800a68c:	4802      	ldr	r0, [pc, #8]	@ (800a698 <strtod+0x10>)
 800a68e:	4b03      	ldr	r3, [pc, #12]	@ (800a69c <strtod+0x14>)
 800a690:	6800      	ldr	r0, [r0, #0]
 800a692:	f7ff ba21 	b.w	8009ad8 <_strtod_l>
 800a696:	bf00      	nop
 800a698:	20000184 	.word	0x20000184
 800a69c:	20000018 	.word	0x20000018

0800a6a0 <_strtol_l.constprop.0>:
 800a6a0:	2b24      	cmp	r3, #36	@ 0x24
 800a6a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a6:	4686      	mov	lr, r0
 800a6a8:	4690      	mov	r8, r2
 800a6aa:	d801      	bhi.n	800a6b0 <_strtol_l.constprop.0+0x10>
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d106      	bne.n	800a6be <_strtol_l.constprop.0+0x1e>
 800a6b0:	f000 fed2 	bl	800b458 <__errno>
 800a6b4:	2316      	movs	r3, #22
 800a6b6:	6003      	str	r3, [r0, #0]
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6be:	460d      	mov	r5, r1
 800a6c0:	4833      	ldr	r0, [pc, #204]	@ (800a790 <_strtol_l.constprop.0+0xf0>)
 800a6c2:	462a      	mov	r2, r5
 800a6c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6c8:	5d06      	ldrb	r6, [r0, r4]
 800a6ca:	f016 0608 	ands.w	r6, r6, #8
 800a6ce:	d1f8      	bne.n	800a6c2 <_strtol_l.constprop.0+0x22>
 800a6d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a6d2:	d12d      	bne.n	800a730 <_strtol_l.constprop.0+0x90>
 800a6d4:	2601      	movs	r6, #1
 800a6d6:	782c      	ldrb	r4, [r5, #0]
 800a6d8:	1c95      	adds	r5, r2, #2
 800a6da:	f033 0210 	bics.w	r2, r3, #16
 800a6de:	d109      	bne.n	800a6f4 <_strtol_l.constprop.0+0x54>
 800a6e0:	2c30      	cmp	r4, #48	@ 0x30
 800a6e2:	d12a      	bne.n	800a73a <_strtol_l.constprop.0+0x9a>
 800a6e4:	782a      	ldrb	r2, [r5, #0]
 800a6e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6ea:	2a58      	cmp	r2, #88	@ 0x58
 800a6ec:	d125      	bne.n	800a73a <_strtol_l.constprop.0+0x9a>
 800a6ee:	2310      	movs	r3, #16
 800a6f0:	786c      	ldrb	r4, [r5, #1]
 800a6f2:	3502      	adds	r5, #2
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a6fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a6fe:	fbbc f9f3 	udiv	r9, ip, r3
 800a702:	4610      	mov	r0, r2
 800a704:	fb03 ca19 	mls	sl, r3, r9, ip
 800a708:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a70c:	2f09      	cmp	r7, #9
 800a70e:	d81b      	bhi.n	800a748 <_strtol_l.constprop.0+0xa8>
 800a710:	463c      	mov	r4, r7
 800a712:	42a3      	cmp	r3, r4
 800a714:	dd27      	ble.n	800a766 <_strtol_l.constprop.0+0xc6>
 800a716:	1c57      	adds	r7, r2, #1
 800a718:	d007      	beq.n	800a72a <_strtol_l.constprop.0+0x8a>
 800a71a:	4581      	cmp	r9, r0
 800a71c:	d320      	bcc.n	800a760 <_strtol_l.constprop.0+0xc0>
 800a71e:	d101      	bne.n	800a724 <_strtol_l.constprop.0+0x84>
 800a720:	45a2      	cmp	sl, r4
 800a722:	db1d      	blt.n	800a760 <_strtol_l.constprop.0+0xc0>
 800a724:	2201      	movs	r2, #1
 800a726:	fb00 4003 	mla	r0, r0, r3, r4
 800a72a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a72e:	e7eb      	b.n	800a708 <_strtol_l.constprop.0+0x68>
 800a730:	2c2b      	cmp	r4, #43	@ 0x2b
 800a732:	bf04      	itt	eq
 800a734:	782c      	ldrbeq	r4, [r5, #0]
 800a736:	1c95      	addeq	r5, r2, #2
 800a738:	e7cf      	b.n	800a6da <_strtol_l.constprop.0+0x3a>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1da      	bne.n	800a6f4 <_strtol_l.constprop.0+0x54>
 800a73e:	2c30      	cmp	r4, #48	@ 0x30
 800a740:	bf0c      	ite	eq
 800a742:	2308      	moveq	r3, #8
 800a744:	230a      	movne	r3, #10
 800a746:	e7d5      	b.n	800a6f4 <_strtol_l.constprop.0+0x54>
 800a748:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a74c:	2f19      	cmp	r7, #25
 800a74e:	d801      	bhi.n	800a754 <_strtol_l.constprop.0+0xb4>
 800a750:	3c37      	subs	r4, #55	@ 0x37
 800a752:	e7de      	b.n	800a712 <_strtol_l.constprop.0+0x72>
 800a754:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a758:	2f19      	cmp	r7, #25
 800a75a:	d804      	bhi.n	800a766 <_strtol_l.constprop.0+0xc6>
 800a75c:	3c57      	subs	r4, #87	@ 0x57
 800a75e:	e7d8      	b.n	800a712 <_strtol_l.constprop.0+0x72>
 800a760:	f04f 32ff 	mov.w	r2, #4294967295
 800a764:	e7e1      	b.n	800a72a <_strtol_l.constprop.0+0x8a>
 800a766:	1c53      	adds	r3, r2, #1
 800a768:	d108      	bne.n	800a77c <_strtol_l.constprop.0+0xdc>
 800a76a:	2322      	movs	r3, #34	@ 0x22
 800a76c:	4660      	mov	r0, ip
 800a76e:	f8ce 3000 	str.w	r3, [lr]
 800a772:	f1b8 0f00 	cmp.w	r8, #0
 800a776:	d0a0      	beq.n	800a6ba <_strtol_l.constprop.0+0x1a>
 800a778:	1e69      	subs	r1, r5, #1
 800a77a:	e006      	b.n	800a78a <_strtol_l.constprop.0+0xea>
 800a77c:	b106      	cbz	r6, 800a780 <_strtol_l.constprop.0+0xe0>
 800a77e:	4240      	negs	r0, r0
 800a780:	f1b8 0f00 	cmp.w	r8, #0
 800a784:	d099      	beq.n	800a6ba <_strtol_l.constprop.0+0x1a>
 800a786:	2a00      	cmp	r2, #0
 800a788:	d1f6      	bne.n	800a778 <_strtol_l.constprop.0+0xd8>
 800a78a:	f8c8 1000 	str.w	r1, [r8]
 800a78e:	e794      	b.n	800a6ba <_strtol_l.constprop.0+0x1a>
 800a790:	0800e291 	.word	0x0800e291

0800a794 <strtol>:
 800a794:	4613      	mov	r3, r2
 800a796:	460a      	mov	r2, r1
 800a798:	4601      	mov	r1, r0
 800a79a:	4802      	ldr	r0, [pc, #8]	@ (800a7a4 <strtol+0x10>)
 800a79c:	6800      	ldr	r0, [r0, #0]
 800a79e:	f7ff bf7f 	b.w	800a6a0 <_strtol_l.constprop.0>
 800a7a2:	bf00      	nop
 800a7a4:	20000184 	.word	0x20000184

0800a7a8 <__cvt>:
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ae:	461d      	mov	r5, r3
 800a7b0:	bfbb      	ittet	lt
 800a7b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a7b6:	461d      	movlt	r5, r3
 800a7b8:	2300      	movge	r3, #0
 800a7ba:	232d      	movlt	r3, #45	@ 0x2d
 800a7bc:	b088      	sub	sp, #32
 800a7be:	4614      	mov	r4, r2
 800a7c0:	bfb8      	it	lt
 800a7c2:	4614      	movlt	r4, r2
 800a7c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a7c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a7c8:	7013      	strb	r3, [r2, #0]
 800a7ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a7d0:	f023 0820 	bic.w	r8, r3, #32
 800a7d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7d8:	d005      	beq.n	800a7e6 <__cvt+0x3e>
 800a7da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a7de:	d100      	bne.n	800a7e2 <__cvt+0x3a>
 800a7e0:	3601      	adds	r6, #1
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	e000      	b.n	800a7e8 <__cvt+0x40>
 800a7e6:	2303      	movs	r3, #3
 800a7e8:	aa07      	add	r2, sp, #28
 800a7ea:	9204      	str	r2, [sp, #16]
 800a7ec:	aa06      	add	r2, sp, #24
 800a7ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a7f2:	e9cd 3600 	strd	r3, r6, [sp]
 800a7f6:	4622      	mov	r2, r4
 800a7f8:	462b      	mov	r3, r5
 800a7fa:	f000 ff05 	bl	800b608 <_dtoa_r>
 800a7fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a802:	4607      	mov	r7, r0
 800a804:	d119      	bne.n	800a83a <__cvt+0x92>
 800a806:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a808:	07db      	lsls	r3, r3, #31
 800a80a:	d50e      	bpl.n	800a82a <__cvt+0x82>
 800a80c:	eb00 0906 	add.w	r9, r0, r6
 800a810:	2200      	movs	r2, #0
 800a812:	2300      	movs	r3, #0
 800a814:	4620      	mov	r0, r4
 800a816:	4629      	mov	r1, r5
 800a818:	f7f6 f8c6 	bl	80009a8 <__aeabi_dcmpeq>
 800a81c:	b108      	cbz	r0, 800a822 <__cvt+0x7a>
 800a81e:	f8cd 901c 	str.w	r9, [sp, #28]
 800a822:	2230      	movs	r2, #48	@ 0x30
 800a824:	9b07      	ldr	r3, [sp, #28]
 800a826:	454b      	cmp	r3, r9
 800a828:	d31e      	bcc.n	800a868 <__cvt+0xc0>
 800a82a:	4638      	mov	r0, r7
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a830:	1bdb      	subs	r3, r3, r7
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	b008      	add	sp, #32
 800a836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a83e:	eb00 0906 	add.w	r9, r0, r6
 800a842:	d1e5      	bne.n	800a810 <__cvt+0x68>
 800a844:	7803      	ldrb	r3, [r0, #0]
 800a846:	2b30      	cmp	r3, #48	@ 0x30
 800a848:	d10a      	bne.n	800a860 <__cvt+0xb8>
 800a84a:	2200      	movs	r2, #0
 800a84c:	2300      	movs	r3, #0
 800a84e:	4620      	mov	r0, r4
 800a850:	4629      	mov	r1, r5
 800a852:	f7f6 f8a9 	bl	80009a8 <__aeabi_dcmpeq>
 800a856:	b918      	cbnz	r0, 800a860 <__cvt+0xb8>
 800a858:	f1c6 0601 	rsb	r6, r6, #1
 800a85c:	f8ca 6000 	str.w	r6, [sl]
 800a860:	f8da 3000 	ldr.w	r3, [sl]
 800a864:	4499      	add	r9, r3
 800a866:	e7d3      	b.n	800a810 <__cvt+0x68>
 800a868:	1c59      	adds	r1, r3, #1
 800a86a:	9107      	str	r1, [sp, #28]
 800a86c:	701a      	strb	r2, [r3, #0]
 800a86e:	e7d9      	b.n	800a824 <__cvt+0x7c>

0800a870 <__exponent>:
 800a870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a872:	2900      	cmp	r1, #0
 800a874:	bfb6      	itet	lt
 800a876:	232d      	movlt	r3, #45	@ 0x2d
 800a878:	232b      	movge	r3, #43	@ 0x2b
 800a87a:	4249      	neglt	r1, r1
 800a87c:	2909      	cmp	r1, #9
 800a87e:	7002      	strb	r2, [r0, #0]
 800a880:	7043      	strb	r3, [r0, #1]
 800a882:	dd29      	ble.n	800a8d8 <__exponent+0x68>
 800a884:	f10d 0307 	add.w	r3, sp, #7
 800a888:	461d      	mov	r5, r3
 800a88a:	270a      	movs	r7, #10
 800a88c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a890:	461a      	mov	r2, r3
 800a892:	fb07 1416 	mls	r4, r7, r6, r1
 800a896:	3430      	adds	r4, #48	@ 0x30
 800a898:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a89c:	460c      	mov	r4, r1
 800a89e:	2c63      	cmp	r4, #99	@ 0x63
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8a6:	dcf1      	bgt.n	800a88c <__exponent+0x1c>
 800a8a8:	3130      	adds	r1, #48	@ 0x30
 800a8aa:	1e94      	subs	r4, r2, #2
 800a8ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a8b0:	4623      	mov	r3, r4
 800a8b2:	1c41      	adds	r1, r0, #1
 800a8b4:	42ab      	cmp	r3, r5
 800a8b6:	d30a      	bcc.n	800a8ce <__exponent+0x5e>
 800a8b8:	f10d 0309 	add.w	r3, sp, #9
 800a8bc:	1a9b      	subs	r3, r3, r2
 800a8be:	42ac      	cmp	r4, r5
 800a8c0:	bf88      	it	hi
 800a8c2:	2300      	movhi	r3, #0
 800a8c4:	3302      	adds	r3, #2
 800a8c6:	4403      	add	r3, r0
 800a8c8:	1a18      	subs	r0, r3, r0
 800a8ca:	b003      	add	sp, #12
 800a8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a8d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a8d6:	e7ed      	b.n	800a8b4 <__exponent+0x44>
 800a8d8:	2330      	movs	r3, #48	@ 0x30
 800a8da:	3130      	adds	r1, #48	@ 0x30
 800a8dc:	7083      	strb	r3, [r0, #2]
 800a8de:	70c1      	strb	r1, [r0, #3]
 800a8e0:	1d03      	adds	r3, r0, #4
 800a8e2:	e7f1      	b.n	800a8c8 <__exponent+0x58>

0800a8e4 <_printf_float>:
 800a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e8:	b091      	sub	sp, #68	@ 0x44
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a8f0:	4616      	mov	r6, r2
 800a8f2:	461f      	mov	r7, r3
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	f000 fd65 	bl	800b3c4 <_localeconv_r>
 800a8fa:	6803      	ldr	r3, [r0, #0]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	9308      	str	r3, [sp, #32]
 800a900:	f7f5 fc26 	bl	8000150 <strlen>
 800a904:	2300      	movs	r3, #0
 800a906:	930e      	str	r3, [sp, #56]	@ 0x38
 800a908:	f8d8 3000 	ldr.w	r3, [r8]
 800a90c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a90e:	3307      	adds	r3, #7
 800a910:	f023 0307 	bic.w	r3, r3, #7
 800a914:	f103 0208 	add.w	r2, r3, #8
 800a918:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a91c:	f8d4 b000 	ldr.w	fp, [r4]
 800a920:	f8c8 2000 	str.w	r2, [r8]
 800a924:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a928:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a92c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a92e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a932:	f04f 32ff 	mov.w	r2, #4294967295
 800a936:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a93a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a93e:	4b9c      	ldr	r3, [pc, #624]	@ (800abb0 <_printf_float+0x2cc>)
 800a940:	f7f6 f864 	bl	8000a0c <__aeabi_dcmpun>
 800a944:	bb70      	cbnz	r0, 800a9a4 <_printf_float+0xc0>
 800a946:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a94a:	f04f 32ff 	mov.w	r2, #4294967295
 800a94e:	4b98      	ldr	r3, [pc, #608]	@ (800abb0 <_printf_float+0x2cc>)
 800a950:	f7f6 f83e 	bl	80009d0 <__aeabi_dcmple>
 800a954:	bb30      	cbnz	r0, 800a9a4 <_printf_float+0xc0>
 800a956:	2200      	movs	r2, #0
 800a958:	2300      	movs	r3, #0
 800a95a:	4640      	mov	r0, r8
 800a95c:	4649      	mov	r1, r9
 800a95e:	f7f6 f82d 	bl	80009bc <__aeabi_dcmplt>
 800a962:	b110      	cbz	r0, 800a96a <_printf_float+0x86>
 800a964:	232d      	movs	r3, #45	@ 0x2d
 800a966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a96a:	4a92      	ldr	r2, [pc, #584]	@ (800abb4 <_printf_float+0x2d0>)
 800a96c:	4b92      	ldr	r3, [pc, #584]	@ (800abb8 <_printf_float+0x2d4>)
 800a96e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a972:	bf94      	ite	ls
 800a974:	4690      	movls	r8, r2
 800a976:	4698      	movhi	r8, r3
 800a978:	2303      	movs	r3, #3
 800a97a:	f04f 0900 	mov.w	r9, #0
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	f02b 0304 	bic.w	r3, fp, #4
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	4633      	mov	r3, r6
 800a988:	4621      	mov	r1, r4
 800a98a:	4628      	mov	r0, r5
 800a98c:	9700      	str	r7, [sp, #0]
 800a98e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a990:	f000 f9d4 	bl	800ad3c <_printf_common>
 800a994:	3001      	adds	r0, #1
 800a996:	f040 8090 	bne.w	800aaba <_printf_float+0x1d6>
 800a99a:	f04f 30ff 	mov.w	r0, #4294967295
 800a99e:	b011      	add	sp, #68	@ 0x44
 800a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a4:	4642      	mov	r2, r8
 800a9a6:	464b      	mov	r3, r9
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	f7f6 f82e 	bl	8000a0c <__aeabi_dcmpun>
 800a9b0:	b148      	cbz	r0, 800a9c6 <_printf_float+0xe2>
 800a9b2:	464b      	mov	r3, r9
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bfb8      	it	lt
 800a9b8:	232d      	movlt	r3, #45	@ 0x2d
 800a9ba:	4a80      	ldr	r2, [pc, #512]	@ (800abbc <_printf_float+0x2d8>)
 800a9bc:	bfb8      	it	lt
 800a9be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a9c2:	4b7f      	ldr	r3, [pc, #508]	@ (800abc0 <_printf_float+0x2dc>)
 800a9c4:	e7d3      	b.n	800a96e <_printf_float+0x8a>
 800a9c6:	6863      	ldr	r3, [r4, #4]
 800a9c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	d13f      	bne.n	800aa50 <_printf_float+0x16c>
 800a9d0:	2306      	movs	r3, #6
 800a9d2:	6063      	str	r3, [r4, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a9da:	6023      	str	r3, [r4, #0]
 800a9dc:	9206      	str	r2, [sp, #24]
 800a9de:	aa0e      	add	r2, sp, #56	@ 0x38
 800a9e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a9e4:	aa0d      	add	r2, sp, #52	@ 0x34
 800a9e6:	9203      	str	r2, [sp, #12]
 800a9e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a9ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a9f0:	6863      	ldr	r3, [r4, #4]
 800a9f2:	4642      	mov	r2, r8
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	910a      	str	r1, [sp, #40]	@ 0x28
 800a9fc:	f7ff fed4 	bl	800a7a8 <__cvt>
 800aa00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa02:	4680      	mov	r8, r0
 800aa04:	2947      	cmp	r1, #71	@ 0x47
 800aa06:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aa08:	d128      	bne.n	800aa5c <_printf_float+0x178>
 800aa0a:	1cc8      	adds	r0, r1, #3
 800aa0c:	db02      	blt.n	800aa14 <_printf_float+0x130>
 800aa0e:	6863      	ldr	r3, [r4, #4]
 800aa10:	4299      	cmp	r1, r3
 800aa12:	dd40      	ble.n	800aa96 <_printf_float+0x1b2>
 800aa14:	f1aa 0a02 	sub.w	sl, sl, #2
 800aa18:	fa5f fa8a 	uxtb.w	sl, sl
 800aa1c:	4652      	mov	r2, sl
 800aa1e:	3901      	subs	r1, #1
 800aa20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aa24:	910d      	str	r1, [sp, #52]	@ 0x34
 800aa26:	f7ff ff23 	bl	800a870 <__exponent>
 800aa2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa2c:	4681      	mov	r9, r0
 800aa2e:	1813      	adds	r3, r2, r0
 800aa30:	2a01      	cmp	r2, #1
 800aa32:	6123      	str	r3, [r4, #16]
 800aa34:	dc02      	bgt.n	800aa3c <_printf_float+0x158>
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	07d2      	lsls	r2, r2, #31
 800aa3a:	d501      	bpl.n	800aa40 <_printf_float+0x15c>
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	6123      	str	r3, [r4, #16]
 800aa40:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d09e      	beq.n	800a986 <_printf_float+0xa2>
 800aa48:	232d      	movs	r3, #45	@ 0x2d
 800aa4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa4e:	e79a      	b.n	800a986 <_printf_float+0xa2>
 800aa50:	2947      	cmp	r1, #71	@ 0x47
 800aa52:	d1bf      	bne.n	800a9d4 <_printf_float+0xf0>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1bd      	bne.n	800a9d4 <_printf_float+0xf0>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e7ba      	b.n	800a9d2 <_printf_float+0xee>
 800aa5c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa60:	d9dc      	bls.n	800aa1c <_printf_float+0x138>
 800aa62:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa66:	d118      	bne.n	800aa9a <_printf_float+0x1b6>
 800aa68:	2900      	cmp	r1, #0
 800aa6a:	6863      	ldr	r3, [r4, #4]
 800aa6c:	dd0b      	ble.n	800aa86 <_printf_float+0x1a2>
 800aa6e:	6121      	str	r1, [r4, #16]
 800aa70:	b913      	cbnz	r3, 800aa78 <_printf_float+0x194>
 800aa72:	6822      	ldr	r2, [r4, #0]
 800aa74:	07d0      	lsls	r0, r2, #31
 800aa76:	d502      	bpl.n	800aa7e <_printf_float+0x19a>
 800aa78:	3301      	adds	r3, #1
 800aa7a:	440b      	add	r3, r1
 800aa7c:	6123      	str	r3, [r4, #16]
 800aa7e:	f04f 0900 	mov.w	r9, #0
 800aa82:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa84:	e7dc      	b.n	800aa40 <_printf_float+0x15c>
 800aa86:	b913      	cbnz	r3, 800aa8e <_printf_float+0x1aa>
 800aa88:	6822      	ldr	r2, [r4, #0]
 800aa8a:	07d2      	lsls	r2, r2, #31
 800aa8c:	d501      	bpl.n	800aa92 <_printf_float+0x1ae>
 800aa8e:	3302      	adds	r3, #2
 800aa90:	e7f4      	b.n	800aa7c <_printf_float+0x198>
 800aa92:	2301      	movs	r3, #1
 800aa94:	e7f2      	b.n	800aa7c <_printf_float+0x198>
 800aa96:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa9c:	4299      	cmp	r1, r3
 800aa9e:	db05      	blt.n	800aaac <_printf_float+0x1c8>
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	6121      	str	r1, [r4, #16]
 800aaa4:	07d8      	lsls	r0, r3, #31
 800aaa6:	d5ea      	bpl.n	800aa7e <_printf_float+0x19a>
 800aaa8:	1c4b      	adds	r3, r1, #1
 800aaaa:	e7e7      	b.n	800aa7c <_printf_float+0x198>
 800aaac:	2900      	cmp	r1, #0
 800aaae:	bfcc      	ite	gt
 800aab0:	2201      	movgt	r2, #1
 800aab2:	f1c1 0202 	rsble	r2, r1, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	e7e0      	b.n	800aa7c <_printf_float+0x198>
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	055a      	lsls	r2, r3, #21
 800aabe:	d407      	bmi.n	800aad0 <_printf_float+0x1ec>
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	4642      	mov	r2, r8
 800aac4:	4631      	mov	r1, r6
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b8      	blx	r7
 800aaca:	3001      	adds	r0, #1
 800aacc:	d12b      	bne.n	800ab26 <_printf_float+0x242>
 800aace:	e764      	b.n	800a99a <_printf_float+0xb6>
 800aad0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aad4:	f240 80dc 	bls.w	800ac90 <_printf_float+0x3ac>
 800aad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aadc:	2200      	movs	r2, #0
 800aade:	2300      	movs	r3, #0
 800aae0:	f7f5 ff62 	bl	80009a8 <__aeabi_dcmpeq>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d033      	beq.n	800ab50 <_printf_float+0x26c>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4631      	mov	r1, r6
 800aaec:	4628      	mov	r0, r5
 800aaee:	4a35      	ldr	r2, [pc, #212]	@ (800abc4 <_printf_float+0x2e0>)
 800aaf0:	47b8      	blx	r7
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	f43f af51 	beq.w	800a99a <_printf_float+0xb6>
 800aaf8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800aafc:	4543      	cmp	r3, r8
 800aafe:	db02      	blt.n	800ab06 <_printf_float+0x222>
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	07d8      	lsls	r0, r3, #31
 800ab04:	d50f      	bpl.n	800ab26 <_printf_float+0x242>
 800ab06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b8      	blx	r7
 800ab10:	3001      	adds	r0, #1
 800ab12:	f43f af42 	beq.w	800a99a <_printf_float+0xb6>
 800ab16:	f04f 0900 	mov.w	r9, #0
 800ab1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab1e:	f104 0a1a 	add.w	sl, r4, #26
 800ab22:	45c8      	cmp	r8, r9
 800ab24:	dc09      	bgt.n	800ab3a <_printf_float+0x256>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	079b      	lsls	r3, r3, #30
 800ab2a:	f100 8102 	bmi.w	800ad32 <_printf_float+0x44e>
 800ab2e:	68e0      	ldr	r0, [r4, #12]
 800ab30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab32:	4298      	cmp	r0, r3
 800ab34:	bfb8      	it	lt
 800ab36:	4618      	movlt	r0, r3
 800ab38:	e731      	b.n	800a99e <_printf_float+0xba>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4652      	mov	r2, sl
 800ab3e:	4631      	mov	r1, r6
 800ab40:	4628      	mov	r0, r5
 800ab42:	47b8      	blx	r7
 800ab44:	3001      	adds	r0, #1
 800ab46:	f43f af28 	beq.w	800a99a <_printf_float+0xb6>
 800ab4a:	f109 0901 	add.w	r9, r9, #1
 800ab4e:	e7e8      	b.n	800ab22 <_printf_float+0x23e>
 800ab50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dc38      	bgt.n	800abc8 <_printf_float+0x2e4>
 800ab56:	2301      	movs	r3, #1
 800ab58:	4631      	mov	r1, r6
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	4a19      	ldr	r2, [pc, #100]	@ (800abc4 <_printf_float+0x2e0>)
 800ab5e:	47b8      	blx	r7
 800ab60:	3001      	adds	r0, #1
 800ab62:	f43f af1a 	beq.w	800a99a <_printf_float+0xb6>
 800ab66:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ab6a:	ea59 0303 	orrs.w	r3, r9, r3
 800ab6e:	d102      	bne.n	800ab76 <_printf_float+0x292>
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	07d9      	lsls	r1, r3, #31
 800ab74:	d5d7      	bpl.n	800ab26 <_printf_float+0x242>
 800ab76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b8      	blx	r7
 800ab80:	3001      	adds	r0, #1
 800ab82:	f43f af0a 	beq.w	800a99a <_printf_float+0xb6>
 800ab86:	f04f 0a00 	mov.w	sl, #0
 800ab8a:	f104 0b1a 	add.w	fp, r4, #26
 800ab8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab90:	425b      	negs	r3, r3
 800ab92:	4553      	cmp	r3, sl
 800ab94:	dc01      	bgt.n	800ab9a <_printf_float+0x2b6>
 800ab96:	464b      	mov	r3, r9
 800ab98:	e793      	b.n	800aac2 <_printf_float+0x1de>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	465a      	mov	r2, fp
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b8      	blx	r7
 800aba4:	3001      	adds	r0, #1
 800aba6:	f43f aef8 	beq.w	800a99a <_printf_float+0xb6>
 800abaa:	f10a 0a01 	add.w	sl, sl, #1
 800abae:	e7ee      	b.n	800ab8e <_printf_float+0x2aa>
 800abb0:	7fefffff 	.word	0x7fefffff
 800abb4:	0800e391 	.word	0x0800e391
 800abb8:	0800e395 	.word	0x0800e395
 800abbc:	0800e399 	.word	0x0800e399
 800abc0:	0800e39d 	.word	0x0800e39d
 800abc4:	0800e3a1 	.word	0x0800e3a1
 800abc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800abce:	4553      	cmp	r3, sl
 800abd0:	bfa8      	it	ge
 800abd2:	4653      	movge	r3, sl
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	4699      	mov	r9, r3
 800abd8:	dc36      	bgt.n	800ac48 <_printf_float+0x364>
 800abda:	f04f 0b00 	mov.w	fp, #0
 800abde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abe2:	f104 021a 	add.w	r2, r4, #26
 800abe6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abe8:	930a      	str	r3, [sp, #40]	@ 0x28
 800abea:	eba3 0309 	sub.w	r3, r3, r9
 800abee:	455b      	cmp	r3, fp
 800abf0:	dc31      	bgt.n	800ac56 <_printf_float+0x372>
 800abf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abf4:	459a      	cmp	sl, r3
 800abf6:	dc3a      	bgt.n	800ac6e <_printf_float+0x38a>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	07da      	lsls	r2, r3, #31
 800abfc:	d437      	bmi.n	800ac6e <_printf_float+0x38a>
 800abfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac00:	ebaa 0903 	sub.w	r9, sl, r3
 800ac04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac06:	ebaa 0303 	sub.w	r3, sl, r3
 800ac0a:	4599      	cmp	r9, r3
 800ac0c:	bfa8      	it	ge
 800ac0e:	4699      	movge	r9, r3
 800ac10:	f1b9 0f00 	cmp.w	r9, #0
 800ac14:	dc33      	bgt.n	800ac7e <_printf_float+0x39a>
 800ac16:	f04f 0800 	mov.w	r8, #0
 800ac1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac1e:	f104 0b1a 	add.w	fp, r4, #26
 800ac22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac24:	ebaa 0303 	sub.w	r3, sl, r3
 800ac28:	eba3 0309 	sub.w	r3, r3, r9
 800ac2c:	4543      	cmp	r3, r8
 800ac2e:	f77f af7a 	ble.w	800ab26 <_printf_float+0x242>
 800ac32:	2301      	movs	r3, #1
 800ac34:	465a      	mov	r2, fp
 800ac36:	4631      	mov	r1, r6
 800ac38:	4628      	mov	r0, r5
 800ac3a:	47b8      	blx	r7
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	f43f aeac 	beq.w	800a99a <_printf_float+0xb6>
 800ac42:	f108 0801 	add.w	r8, r8, #1
 800ac46:	e7ec      	b.n	800ac22 <_printf_float+0x33e>
 800ac48:	4642      	mov	r2, r8
 800ac4a:	4631      	mov	r1, r6
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	47b8      	blx	r7
 800ac50:	3001      	adds	r0, #1
 800ac52:	d1c2      	bne.n	800abda <_printf_float+0x2f6>
 800ac54:	e6a1      	b.n	800a99a <_printf_float+0xb6>
 800ac56:	2301      	movs	r3, #1
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	920a      	str	r2, [sp, #40]	@ 0x28
 800ac5e:	47b8      	blx	r7
 800ac60:	3001      	adds	r0, #1
 800ac62:	f43f ae9a 	beq.w	800a99a <_printf_float+0xb6>
 800ac66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac68:	f10b 0b01 	add.w	fp, fp, #1
 800ac6c:	e7bb      	b.n	800abe6 <_printf_float+0x302>
 800ac6e:	4631      	mov	r1, r6
 800ac70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac74:	4628      	mov	r0, r5
 800ac76:	47b8      	blx	r7
 800ac78:	3001      	adds	r0, #1
 800ac7a:	d1c0      	bne.n	800abfe <_printf_float+0x31a>
 800ac7c:	e68d      	b.n	800a99a <_printf_float+0xb6>
 800ac7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac80:	464b      	mov	r3, r9
 800ac82:	4631      	mov	r1, r6
 800ac84:	4628      	mov	r0, r5
 800ac86:	4442      	add	r2, r8
 800ac88:	47b8      	blx	r7
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d1c3      	bne.n	800ac16 <_printf_float+0x332>
 800ac8e:	e684      	b.n	800a99a <_printf_float+0xb6>
 800ac90:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ac94:	f1ba 0f01 	cmp.w	sl, #1
 800ac98:	dc01      	bgt.n	800ac9e <_printf_float+0x3ba>
 800ac9a:	07db      	lsls	r3, r3, #31
 800ac9c:	d536      	bpl.n	800ad0c <_printf_float+0x428>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	4642      	mov	r2, r8
 800aca2:	4631      	mov	r1, r6
 800aca4:	4628      	mov	r0, r5
 800aca6:	47b8      	blx	r7
 800aca8:	3001      	adds	r0, #1
 800acaa:	f43f ae76 	beq.w	800a99a <_printf_float+0xb6>
 800acae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800acb2:	4631      	mov	r1, r6
 800acb4:	4628      	mov	r0, r5
 800acb6:	47b8      	blx	r7
 800acb8:	3001      	adds	r0, #1
 800acba:	f43f ae6e 	beq.w	800a99a <_printf_float+0xb6>
 800acbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800acc2:	2200      	movs	r2, #0
 800acc4:	2300      	movs	r3, #0
 800acc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acca:	f7f5 fe6d 	bl	80009a8 <__aeabi_dcmpeq>
 800acce:	b9c0      	cbnz	r0, 800ad02 <_printf_float+0x41e>
 800acd0:	4653      	mov	r3, sl
 800acd2:	f108 0201 	add.w	r2, r8, #1
 800acd6:	4631      	mov	r1, r6
 800acd8:	4628      	mov	r0, r5
 800acda:	47b8      	blx	r7
 800acdc:	3001      	adds	r0, #1
 800acde:	d10c      	bne.n	800acfa <_printf_float+0x416>
 800ace0:	e65b      	b.n	800a99a <_printf_float+0xb6>
 800ace2:	2301      	movs	r3, #1
 800ace4:	465a      	mov	r2, fp
 800ace6:	4631      	mov	r1, r6
 800ace8:	4628      	mov	r0, r5
 800acea:	47b8      	blx	r7
 800acec:	3001      	adds	r0, #1
 800acee:	f43f ae54 	beq.w	800a99a <_printf_float+0xb6>
 800acf2:	f108 0801 	add.w	r8, r8, #1
 800acf6:	45d0      	cmp	r8, sl
 800acf8:	dbf3      	blt.n	800ace2 <_printf_float+0x3fe>
 800acfa:	464b      	mov	r3, r9
 800acfc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad00:	e6e0      	b.n	800aac4 <_printf_float+0x1e0>
 800ad02:	f04f 0800 	mov.w	r8, #0
 800ad06:	f104 0b1a 	add.w	fp, r4, #26
 800ad0a:	e7f4      	b.n	800acf6 <_printf_float+0x412>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	4642      	mov	r2, r8
 800ad10:	e7e1      	b.n	800acd6 <_printf_float+0x3f2>
 800ad12:	2301      	movs	r3, #1
 800ad14:	464a      	mov	r2, r9
 800ad16:	4631      	mov	r1, r6
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b8      	blx	r7
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	f43f ae3c 	beq.w	800a99a <_printf_float+0xb6>
 800ad22:	f108 0801 	add.w	r8, r8, #1
 800ad26:	68e3      	ldr	r3, [r4, #12]
 800ad28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad2a:	1a5b      	subs	r3, r3, r1
 800ad2c:	4543      	cmp	r3, r8
 800ad2e:	dcf0      	bgt.n	800ad12 <_printf_float+0x42e>
 800ad30:	e6fd      	b.n	800ab2e <_printf_float+0x24a>
 800ad32:	f04f 0800 	mov.w	r8, #0
 800ad36:	f104 0919 	add.w	r9, r4, #25
 800ad3a:	e7f4      	b.n	800ad26 <_printf_float+0x442>

0800ad3c <_printf_common>:
 800ad3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad40:	4616      	mov	r6, r2
 800ad42:	4698      	mov	r8, r3
 800ad44:	688a      	ldr	r2, [r1, #8]
 800ad46:	690b      	ldr	r3, [r1, #16]
 800ad48:	4607      	mov	r7, r0
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	bfb8      	it	lt
 800ad4e:	4613      	movlt	r3, r2
 800ad50:	6033      	str	r3, [r6, #0]
 800ad52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad56:	460c      	mov	r4, r1
 800ad58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad5c:	b10a      	cbz	r2, 800ad62 <_printf_common+0x26>
 800ad5e:	3301      	adds	r3, #1
 800ad60:	6033      	str	r3, [r6, #0]
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	0699      	lsls	r1, r3, #26
 800ad66:	bf42      	ittt	mi
 800ad68:	6833      	ldrmi	r3, [r6, #0]
 800ad6a:	3302      	addmi	r3, #2
 800ad6c:	6033      	strmi	r3, [r6, #0]
 800ad6e:	6825      	ldr	r5, [r4, #0]
 800ad70:	f015 0506 	ands.w	r5, r5, #6
 800ad74:	d106      	bne.n	800ad84 <_printf_common+0x48>
 800ad76:	f104 0a19 	add.w	sl, r4, #25
 800ad7a:	68e3      	ldr	r3, [r4, #12]
 800ad7c:	6832      	ldr	r2, [r6, #0]
 800ad7e:	1a9b      	subs	r3, r3, r2
 800ad80:	42ab      	cmp	r3, r5
 800ad82:	dc2b      	bgt.n	800addc <_printf_common+0xa0>
 800ad84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad88:	6822      	ldr	r2, [r4, #0]
 800ad8a:	3b00      	subs	r3, #0
 800ad8c:	bf18      	it	ne
 800ad8e:	2301      	movne	r3, #1
 800ad90:	0692      	lsls	r2, r2, #26
 800ad92:	d430      	bmi.n	800adf6 <_printf_common+0xba>
 800ad94:	4641      	mov	r1, r8
 800ad96:	4638      	mov	r0, r7
 800ad98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad9c:	47c8      	blx	r9
 800ad9e:	3001      	adds	r0, #1
 800ada0:	d023      	beq.n	800adea <_printf_common+0xae>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	6922      	ldr	r2, [r4, #16]
 800ada6:	f003 0306 	and.w	r3, r3, #6
 800adaa:	2b04      	cmp	r3, #4
 800adac:	bf14      	ite	ne
 800adae:	2500      	movne	r5, #0
 800adb0:	6833      	ldreq	r3, [r6, #0]
 800adb2:	f04f 0600 	mov.w	r6, #0
 800adb6:	bf08      	it	eq
 800adb8:	68e5      	ldreq	r5, [r4, #12]
 800adba:	f104 041a 	add.w	r4, r4, #26
 800adbe:	bf08      	it	eq
 800adc0:	1aed      	subeq	r5, r5, r3
 800adc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800adc6:	bf08      	it	eq
 800adc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adcc:	4293      	cmp	r3, r2
 800adce:	bfc4      	itt	gt
 800add0:	1a9b      	subgt	r3, r3, r2
 800add2:	18ed      	addgt	r5, r5, r3
 800add4:	42b5      	cmp	r5, r6
 800add6:	d11a      	bne.n	800ae0e <_printf_common+0xd2>
 800add8:	2000      	movs	r0, #0
 800adda:	e008      	b.n	800adee <_printf_common+0xb2>
 800addc:	2301      	movs	r3, #1
 800adde:	4652      	mov	r2, sl
 800ade0:	4641      	mov	r1, r8
 800ade2:	4638      	mov	r0, r7
 800ade4:	47c8      	blx	r9
 800ade6:	3001      	adds	r0, #1
 800ade8:	d103      	bne.n	800adf2 <_printf_common+0xb6>
 800adea:	f04f 30ff 	mov.w	r0, #4294967295
 800adee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf2:	3501      	adds	r5, #1
 800adf4:	e7c1      	b.n	800ad7a <_printf_common+0x3e>
 800adf6:	2030      	movs	r0, #48	@ 0x30
 800adf8:	18e1      	adds	r1, r4, r3
 800adfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae04:	4422      	add	r2, r4
 800ae06:	3302      	adds	r3, #2
 800ae08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae0c:	e7c2      	b.n	800ad94 <_printf_common+0x58>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	4622      	mov	r2, r4
 800ae12:	4641      	mov	r1, r8
 800ae14:	4638      	mov	r0, r7
 800ae16:	47c8      	blx	r9
 800ae18:	3001      	adds	r0, #1
 800ae1a:	d0e6      	beq.n	800adea <_printf_common+0xae>
 800ae1c:	3601      	adds	r6, #1
 800ae1e:	e7d9      	b.n	800add4 <_printf_common+0x98>

0800ae20 <_printf_i>:
 800ae20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae24:	7e0f      	ldrb	r7, [r1, #24]
 800ae26:	4691      	mov	r9, r2
 800ae28:	2f78      	cmp	r7, #120	@ 0x78
 800ae2a:	4680      	mov	r8, r0
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	469a      	mov	sl, r3
 800ae30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae36:	d807      	bhi.n	800ae48 <_printf_i+0x28>
 800ae38:	2f62      	cmp	r7, #98	@ 0x62
 800ae3a:	d80a      	bhi.n	800ae52 <_printf_i+0x32>
 800ae3c:	2f00      	cmp	r7, #0
 800ae3e:	f000 80d3 	beq.w	800afe8 <_printf_i+0x1c8>
 800ae42:	2f58      	cmp	r7, #88	@ 0x58
 800ae44:	f000 80ba 	beq.w	800afbc <_printf_i+0x19c>
 800ae48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae50:	e03a      	b.n	800aec8 <_printf_i+0xa8>
 800ae52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae56:	2b15      	cmp	r3, #21
 800ae58:	d8f6      	bhi.n	800ae48 <_printf_i+0x28>
 800ae5a:	a101      	add	r1, pc, #4	@ (adr r1, 800ae60 <_printf_i+0x40>)
 800ae5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae60:	0800aeb9 	.word	0x0800aeb9
 800ae64:	0800aecd 	.word	0x0800aecd
 800ae68:	0800ae49 	.word	0x0800ae49
 800ae6c:	0800ae49 	.word	0x0800ae49
 800ae70:	0800ae49 	.word	0x0800ae49
 800ae74:	0800ae49 	.word	0x0800ae49
 800ae78:	0800aecd 	.word	0x0800aecd
 800ae7c:	0800ae49 	.word	0x0800ae49
 800ae80:	0800ae49 	.word	0x0800ae49
 800ae84:	0800ae49 	.word	0x0800ae49
 800ae88:	0800ae49 	.word	0x0800ae49
 800ae8c:	0800afcf 	.word	0x0800afcf
 800ae90:	0800aef7 	.word	0x0800aef7
 800ae94:	0800af89 	.word	0x0800af89
 800ae98:	0800ae49 	.word	0x0800ae49
 800ae9c:	0800ae49 	.word	0x0800ae49
 800aea0:	0800aff1 	.word	0x0800aff1
 800aea4:	0800ae49 	.word	0x0800ae49
 800aea8:	0800aef7 	.word	0x0800aef7
 800aeac:	0800ae49 	.word	0x0800ae49
 800aeb0:	0800ae49 	.word	0x0800ae49
 800aeb4:	0800af91 	.word	0x0800af91
 800aeb8:	6833      	ldr	r3, [r6, #0]
 800aeba:	1d1a      	adds	r2, r3, #4
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6032      	str	r2, [r6, #0]
 800aec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aec8:	2301      	movs	r3, #1
 800aeca:	e09e      	b.n	800b00a <_printf_i+0x1ea>
 800aecc:	6833      	ldr	r3, [r6, #0]
 800aece:	6820      	ldr	r0, [r4, #0]
 800aed0:	1d19      	adds	r1, r3, #4
 800aed2:	6031      	str	r1, [r6, #0]
 800aed4:	0606      	lsls	r6, r0, #24
 800aed6:	d501      	bpl.n	800aedc <_printf_i+0xbc>
 800aed8:	681d      	ldr	r5, [r3, #0]
 800aeda:	e003      	b.n	800aee4 <_printf_i+0xc4>
 800aedc:	0645      	lsls	r5, r0, #25
 800aede:	d5fb      	bpl.n	800aed8 <_printf_i+0xb8>
 800aee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aee4:	2d00      	cmp	r5, #0
 800aee6:	da03      	bge.n	800aef0 <_printf_i+0xd0>
 800aee8:	232d      	movs	r3, #45	@ 0x2d
 800aeea:	426d      	negs	r5, r5
 800aeec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aef0:	230a      	movs	r3, #10
 800aef2:	4859      	ldr	r0, [pc, #356]	@ (800b058 <_printf_i+0x238>)
 800aef4:	e011      	b.n	800af1a <_printf_i+0xfa>
 800aef6:	6821      	ldr	r1, [r4, #0]
 800aef8:	6833      	ldr	r3, [r6, #0]
 800aefa:	0608      	lsls	r0, r1, #24
 800aefc:	f853 5b04 	ldr.w	r5, [r3], #4
 800af00:	d402      	bmi.n	800af08 <_printf_i+0xe8>
 800af02:	0649      	lsls	r1, r1, #25
 800af04:	bf48      	it	mi
 800af06:	b2ad      	uxthmi	r5, r5
 800af08:	2f6f      	cmp	r7, #111	@ 0x6f
 800af0a:	6033      	str	r3, [r6, #0]
 800af0c:	bf14      	ite	ne
 800af0e:	230a      	movne	r3, #10
 800af10:	2308      	moveq	r3, #8
 800af12:	4851      	ldr	r0, [pc, #324]	@ (800b058 <_printf_i+0x238>)
 800af14:	2100      	movs	r1, #0
 800af16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af1a:	6866      	ldr	r6, [r4, #4]
 800af1c:	2e00      	cmp	r6, #0
 800af1e:	bfa8      	it	ge
 800af20:	6821      	ldrge	r1, [r4, #0]
 800af22:	60a6      	str	r6, [r4, #8]
 800af24:	bfa4      	itt	ge
 800af26:	f021 0104 	bicge.w	r1, r1, #4
 800af2a:	6021      	strge	r1, [r4, #0]
 800af2c:	b90d      	cbnz	r5, 800af32 <_printf_i+0x112>
 800af2e:	2e00      	cmp	r6, #0
 800af30:	d04b      	beq.n	800afca <_printf_i+0x1aa>
 800af32:	4616      	mov	r6, r2
 800af34:	fbb5 f1f3 	udiv	r1, r5, r3
 800af38:	fb03 5711 	mls	r7, r3, r1, r5
 800af3c:	5dc7      	ldrb	r7, [r0, r7]
 800af3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af42:	462f      	mov	r7, r5
 800af44:	42bb      	cmp	r3, r7
 800af46:	460d      	mov	r5, r1
 800af48:	d9f4      	bls.n	800af34 <_printf_i+0x114>
 800af4a:	2b08      	cmp	r3, #8
 800af4c:	d10b      	bne.n	800af66 <_printf_i+0x146>
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	07df      	lsls	r7, r3, #31
 800af52:	d508      	bpl.n	800af66 <_printf_i+0x146>
 800af54:	6923      	ldr	r3, [r4, #16]
 800af56:	6861      	ldr	r1, [r4, #4]
 800af58:	4299      	cmp	r1, r3
 800af5a:	bfde      	ittt	le
 800af5c:	2330      	movle	r3, #48	@ 0x30
 800af5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af66:	1b92      	subs	r2, r2, r6
 800af68:	6122      	str	r2, [r4, #16]
 800af6a:	464b      	mov	r3, r9
 800af6c:	4621      	mov	r1, r4
 800af6e:	4640      	mov	r0, r8
 800af70:	f8cd a000 	str.w	sl, [sp]
 800af74:	aa03      	add	r2, sp, #12
 800af76:	f7ff fee1 	bl	800ad3c <_printf_common>
 800af7a:	3001      	adds	r0, #1
 800af7c:	d14a      	bne.n	800b014 <_printf_i+0x1f4>
 800af7e:	f04f 30ff 	mov.w	r0, #4294967295
 800af82:	b004      	add	sp, #16
 800af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	f043 0320 	orr.w	r3, r3, #32
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	2778      	movs	r7, #120	@ 0x78
 800af92:	4832      	ldr	r0, [pc, #200]	@ (800b05c <_printf_i+0x23c>)
 800af94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	6831      	ldr	r1, [r6, #0]
 800af9c:	061f      	lsls	r7, r3, #24
 800af9e:	f851 5b04 	ldr.w	r5, [r1], #4
 800afa2:	d402      	bmi.n	800afaa <_printf_i+0x18a>
 800afa4:	065f      	lsls	r7, r3, #25
 800afa6:	bf48      	it	mi
 800afa8:	b2ad      	uxthmi	r5, r5
 800afaa:	6031      	str	r1, [r6, #0]
 800afac:	07d9      	lsls	r1, r3, #31
 800afae:	bf44      	itt	mi
 800afb0:	f043 0320 	orrmi.w	r3, r3, #32
 800afb4:	6023      	strmi	r3, [r4, #0]
 800afb6:	b11d      	cbz	r5, 800afc0 <_printf_i+0x1a0>
 800afb8:	2310      	movs	r3, #16
 800afba:	e7ab      	b.n	800af14 <_printf_i+0xf4>
 800afbc:	4826      	ldr	r0, [pc, #152]	@ (800b058 <_printf_i+0x238>)
 800afbe:	e7e9      	b.n	800af94 <_printf_i+0x174>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	f023 0320 	bic.w	r3, r3, #32
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	e7f6      	b.n	800afb8 <_printf_i+0x198>
 800afca:	4616      	mov	r6, r2
 800afcc:	e7bd      	b.n	800af4a <_printf_i+0x12a>
 800afce:	6833      	ldr	r3, [r6, #0]
 800afd0:	6825      	ldr	r5, [r4, #0]
 800afd2:	1d18      	adds	r0, r3, #4
 800afd4:	6961      	ldr	r1, [r4, #20]
 800afd6:	6030      	str	r0, [r6, #0]
 800afd8:	062e      	lsls	r6, r5, #24
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	d501      	bpl.n	800afe2 <_printf_i+0x1c2>
 800afde:	6019      	str	r1, [r3, #0]
 800afe0:	e002      	b.n	800afe8 <_printf_i+0x1c8>
 800afe2:	0668      	lsls	r0, r5, #25
 800afe4:	d5fb      	bpl.n	800afde <_printf_i+0x1be>
 800afe6:	8019      	strh	r1, [r3, #0]
 800afe8:	2300      	movs	r3, #0
 800afea:	4616      	mov	r6, r2
 800afec:	6123      	str	r3, [r4, #16]
 800afee:	e7bc      	b.n	800af6a <_printf_i+0x14a>
 800aff0:	6833      	ldr	r3, [r6, #0]
 800aff2:	2100      	movs	r1, #0
 800aff4:	1d1a      	adds	r2, r3, #4
 800aff6:	6032      	str	r2, [r6, #0]
 800aff8:	681e      	ldr	r6, [r3, #0]
 800affa:	6862      	ldr	r2, [r4, #4]
 800affc:	4630      	mov	r0, r6
 800affe:	f000 fa58 	bl	800b4b2 <memchr>
 800b002:	b108      	cbz	r0, 800b008 <_printf_i+0x1e8>
 800b004:	1b80      	subs	r0, r0, r6
 800b006:	6060      	str	r0, [r4, #4]
 800b008:	6863      	ldr	r3, [r4, #4]
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	2300      	movs	r3, #0
 800b00e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b012:	e7aa      	b.n	800af6a <_printf_i+0x14a>
 800b014:	4632      	mov	r2, r6
 800b016:	4649      	mov	r1, r9
 800b018:	4640      	mov	r0, r8
 800b01a:	6923      	ldr	r3, [r4, #16]
 800b01c:	47d0      	blx	sl
 800b01e:	3001      	adds	r0, #1
 800b020:	d0ad      	beq.n	800af7e <_printf_i+0x15e>
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	079b      	lsls	r3, r3, #30
 800b026:	d413      	bmi.n	800b050 <_printf_i+0x230>
 800b028:	68e0      	ldr	r0, [r4, #12]
 800b02a:	9b03      	ldr	r3, [sp, #12]
 800b02c:	4298      	cmp	r0, r3
 800b02e:	bfb8      	it	lt
 800b030:	4618      	movlt	r0, r3
 800b032:	e7a6      	b.n	800af82 <_printf_i+0x162>
 800b034:	2301      	movs	r3, #1
 800b036:	4632      	mov	r2, r6
 800b038:	4649      	mov	r1, r9
 800b03a:	4640      	mov	r0, r8
 800b03c:	47d0      	blx	sl
 800b03e:	3001      	adds	r0, #1
 800b040:	d09d      	beq.n	800af7e <_printf_i+0x15e>
 800b042:	3501      	adds	r5, #1
 800b044:	68e3      	ldr	r3, [r4, #12]
 800b046:	9903      	ldr	r1, [sp, #12]
 800b048:	1a5b      	subs	r3, r3, r1
 800b04a:	42ab      	cmp	r3, r5
 800b04c:	dcf2      	bgt.n	800b034 <_printf_i+0x214>
 800b04e:	e7eb      	b.n	800b028 <_printf_i+0x208>
 800b050:	2500      	movs	r5, #0
 800b052:	f104 0619 	add.w	r6, r4, #25
 800b056:	e7f5      	b.n	800b044 <_printf_i+0x224>
 800b058:	0800e3a3 	.word	0x0800e3a3
 800b05c:	0800e3b4 	.word	0x0800e3b4

0800b060 <std>:
 800b060:	2300      	movs	r3, #0
 800b062:	b510      	push	{r4, lr}
 800b064:	4604      	mov	r4, r0
 800b066:	e9c0 3300 	strd	r3, r3, [r0]
 800b06a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b06e:	6083      	str	r3, [r0, #8]
 800b070:	8181      	strh	r1, [r0, #12]
 800b072:	6643      	str	r3, [r0, #100]	@ 0x64
 800b074:	81c2      	strh	r2, [r0, #14]
 800b076:	6183      	str	r3, [r0, #24]
 800b078:	4619      	mov	r1, r3
 800b07a:	2208      	movs	r2, #8
 800b07c:	305c      	adds	r0, #92	@ 0x5c
 800b07e:	f000 f948 	bl	800b312 <memset>
 800b082:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b8 <std+0x58>)
 800b084:	6224      	str	r4, [r4, #32]
 800b086:	6263      	str	r3, [r4, #36]	@ 0x24
 800b088:	4b0c      	ldr	r3, [pc, #48]	@ (800b0bc <std+0x5c>)
 800b08a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b08c:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c0 <std+0x60>)
 800b08e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b090:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c4 <std+0x64>)
 800b092:	6323      	str	r3, [r4, #48]	@ 0x30
 800b094:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c8 <std+0x68>)
 800b096:	429c      	cmp	r4, r3
 800b098:	d006      	beq.n	800b0a8 <std+0x48>
 800b09a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b09e:	4294      	cmp	r4, r2
 800b0a0:	d002      	beq.n	800b0a8 <std+0x48>
 800b0a2:	33d0      	adds	r3, #208	@ 0xd0
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	d105      	bne.n	800b0b4 <std+0x54>
 800b0a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b0:	f000 b9fc 	b.w	800b4ac <__retarget_lock_init_recursive>
 800b0b4:	bd10      	pop	{r4, pc}
 800b0b6:	bf00      	nop
 800b0b8:	0800b28d 	.word	0x0800b28d
 800b0bc:	0800b2af 	.word	0x0800b2af
 800b0c0:	0800b2e7 	.word	0x0800b2e7
 800b0c4:	0800b30b 	.word	0x0800b30b
 800b0c8:	2000074c 	.word	0x2000074c

0800b0cc <stdio_exit_handler>:
 800b0cc:	4a02      	ldr	r2, [pc, #8]	@ (800b0d8 <stdio_exit_handler+0xc>)
 800b0ce:	4903      	ldr	r1, [pc, #12]	@ (800b0dc <stdio_exit_handler+0x10>)
 800b0d0:	4803      	ldr	r0, [pc, #12]	@ (800b0e0 <stdio_exit_handler+0x14>)
 800b0d2:	f000 b869 	b.w	800b1a8 <_fwalk_sglue>
 800b0d6:	bf00      	nop
 800b0d8:	2000000c 	.word	0x2000000c
 800b0dc:	0800d741 	.word	0x0800d741
 800b0e0:	20000188 	.word	0x20000188

0800b0e4 <cleanup_stdio>:
 800b0e4:	6841      	ldr	r1, [r0, #4]
 800b0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b118 <cleanup_stdio+0x34>)
 800b0e8:	b510      	push	{r4, lr}
 800b0ea:	4299      	cmp	r1, r3
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	d001      	beq.n	800b0f4 <cleanup_stdio+0x10>
 800b0f0:	f002 fb26 	bl	800d740 <_fflush_r>
 800b0f4:	68a1      	ldr	r1, [r4, #8]
 800b0f6:	4b09      	ldr	r3, [pc, #36]	@ (800b11c <cleanup_stdio+0x38>)
 800b0f8:	4299      	cmp	r1, r3
 800b0fa:	d002      	beq.n	800b102 <cleanup_stdio+0x1e>
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f002 fb1f 	bl	800d740 <_fflush_r>
 800b102:	68e1      	ldr	r1, [r4, #12]
 800b104:	4b06      	ldr	r3, [pc, #24]	@ (800b120 <cleanup_stdio+0x3c>)
 800b106:	4299      	cmp	r1, r3
 800b108:	d004      	beq.n	800b114 <cleanup_stdio+0x30>
 800b10a:	4620      	mov	r0, r4
 800b10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b110:	f002 bb16 	b.w	800d740 <_fflush_r>
 800b114:	bd10      	pop	{r4, pc}
 800b116:	bf00      	nop
 800b118:	2000074c 	.word	0x2000074c
 800b11c:	200007b4 	.word	0x200007b4
 800b120:	2000081c 	.word	0x2000081c

0800b124 <global_stdio_init.part.0>:
 800b124:	b510      	push	{r4, lr}
 800b126:	4b0b      	ldr	r3, [pc, #44]	@ (800b154 <global_stdio_init.part.0+0x30>)
 800b128:	4c0b      	ldr	r4, [pc, #44]	@ (800b158 <global_stdio_init.part.0+0x34>)
 800b12a:	4a0c      	ldr	r2, [pc, #48]	@ (800b15c <global_stdio_init.part.0+0x38>)
 800b12c:	4620      	mov	r0, r4
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	2104      	movs	r1, #4
 800b132:	2200      	movs	r2, #0
 800b134:	f7ff ff94 	bl	800b060 <std>
 800b138:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b13c:	2201      	movs	r2, #1
 800b13e:	2109      	movs	r1, #9
 800b140:	f7ff ff8e 	bl	800b060 <std>
 800b144:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b148:	2202      	movs	r2, #2
 800b14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b14e:	2112      	movs	r1, #18
 800b150:	f7ff bf86 	b.w	800b060 <std>
 800b154:	20000884 	.word	0x20000884
 800b158:	2000074c 	.word	0x2000074c
 800b15c:	0800b0cd 	.word	0x0800b0cd

0800b160 <__sfp_lock_acquire>:
 800b160:	4801      	ldr	r0, [pc, #4]	@ (800b168 <__sfp_lock_acquire+0x8>)
 800b162:	f000 b9a4 	b.w	800b4ae <__retarget_lock_acquire_recursive>
 800b166:	bf00      	nop
 800b168:	2000088d 	.word	0x2000088d

0800b16c <__sfp_lock_release>:
 800b16c:	4801      	ldr	r0, [pc, #4]	@ (800b174 <__sfp_lock_release+0x8>)
 800b16e:	f000 b99f 	b.w	800b4b0 <__retarget_lock_release_recursive>
 800b172:	bf00      	nop
 800b174:	2000088d 	.word	0x2000088d

0800b178 <__sinit>:
 800b178:	b510      	push	{r4, lr}
 800b17a:	4604      	mov	r4, r0
 800b17c:	f7ff fff0 	bl	800b160 <__sfp_lock_acquire>
 800b180:	6a23      	ldr	r3, [r4, #32]
 800b182:	b11b      	cbz	r3, 800b18c <__sinit+0x14>
 800b184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b188:	f7ff bff0 	b.w	800b16c <__sfp_lock_release>
 800b18c:	4b04      	ldr	r3, [pc, #16]	@ (800b1a0 <__sinit+0x28>)
 800b18e:	6223      	str	r3, [r4, #32]
 800b190:	4b04      	ldr	r3, [pc, #16]	@ (800b1a4 <__sinit+0x2c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1f5      	bne.n	800b184 <__sinit+0xc>
 800b198:	f7ff ffc4 	bl	800b124 <global_stdio_init.part.0>
 800b19c:	e7f2      	b.n	800b184 <__sinit+0xc>
 800b19e:	bf00      	nop
 800b1a0:	0800b0e5 	.word	0x0800b0e5
 800b1a4:	20000884 	.word	0x20000884

0800b1a8 <_fwalk_sglue>:
 800b1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ac:	4607      	mov	r7, r0
 800b1ae:	4688      	mov	r8, r1
 800b1b0:	4614      	mov	r4, r2
 800b1b2:	2600      	movs	r6, #0
 800b1b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1b8:	f1b9 0901 	subs.w	r9, r9, #1
 800b1bc:	d505      	bpl.n	800b1ca <_fwalk_sglue+0x22>
 800b1be:	6824      	ldr	r4, [r4, #0]
 800b1c0:	2c00      	cmp	r4, #0
 800b1c2:	d1f7      	bne.n	800b1b4 <_fwalk_sglue+0xc>
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d907      	bls.n	800b1e0 <_fwalk_sglue+0x38>
 800b1d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	d003      	beq.n	800b1e0 <_fwalk_sglue+0x38>
 800b1d8:	4629      	mov	r1, r5
 800b1da:	4638      	mov	r0, r7
 800b1dc:	47c0      	blx	r8
 800b1de:	4306      	orrs	r6, r0
 800b1e0:	3568      	adds	r5, #104	@ 0x68
 800b1e2:	e7e9      	b.n	800b1b8 <_fwalk_sglue+0x10>

0800b1e4 <sniprintf>:
 800b1e4:	b40c      	push	{r2, r3}
 800b1e6:	b530      	push	{r4, r5, lr}
 800b1e8:	4b17      	ldr	r3, [pc, #92]	@ (800b248 <sniprintf+0x64>)
 800b1ea:	1e0c      	subs	r4, r1, #0
 800b1ec:	681d      	ldr	r5, [r3, #0]
 800b1ee:	b09d      	sub	sp, #116	@ 0x74
 800b1f0:	da08      	bge.n	800b204 <sniprintf+0x20>
 800b1f2:	238b      	movs	r3, #139	@ 0x8b
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	602b      	str	r3, [r5, #0]
 800b1fa:	b01d      	add	sp, #116	@ 0x74
 800b1fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b200:	b002      	add	sp, #8
 800b202:	4770      	bx	lr
 800b204:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b208:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b20c:	bf0c      	ite	eq
 800b20e:	4623      	moveq	r3, r4
 800b210:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b214:	9304      	str	r3, [sp, #16]
 800b216:	9307      	str	r3, [sp, #28]
 800b218:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b21c:	9002      	str	r0, [sp, #8]
 800b21e:	9006      	str	r0, [sp, #24]
 800b220:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b224:	4628      	mov	r0, r5
 800b226:	ab21      	add	r3, sp, #132	@ 0x84
 800b228:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b22a:	a902      	add	r1, sp, #8
 800b22c:	9301      	str	r3, [sp, #4]
 800b22e:	f002 f90b 	bl	800d448 <_svfiprintf_r>
 800b232:	1c43      	adds	r3, r0, #1
 800b234:	bfbc      	itt	lt
 800b236:	238b      	movlt	r3, #139	@ 0x8b
 800b238:	602b      	strlt	r3, [r5, #0]
 800b23a:	2c00      	cmp	r4, #0
 800b23c:	d0dd      	beq.n	800b1fa <sniprintf+0x16>
 800b23e:	2200      	movs	r2, #0
 800b240:	9b02      	ldr	r3, [sp, #8]
 800b242:	701a      	strb	r2, [r3, #0]
 800b244:	e7d9      	b.n	800b1fa <sniprintf+0x16>
 800b246:	bf00      	nop
 800b248:	20000184 	.word	0x20000184

0800b24c <siprintf>:
 800b24c:	b40e      	push	{r1, r2, r3}
 800b24e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b252:	b500      	push	{lr}
 800b254:	b09c      	sub	sp, #112	@ 0x70
 800b256:	ab1d      	add	r3, sp, #116	@ 0x74
 800b258:	9002      	str	r0, [sp, #8]
 800b25a:	9006      	str	r0, [sp, #24]
 800b25c:	9107      	str	r1, [sp, #28]
 800b25e:	9104      	str	r1, [sp, #16]
 800b260:	4808      	ldr	r0, [pc, #32]	@ (800b284 <siprintf+0x38>)
 800b262:	4909      	ldr	r1, [pc, #36]	@ (800b288 <siprintf+0x3c>)
 800b264:	f853 2b04 	ldr.w	r2, [r3], #4
 800b268:	9105      	str	r1, [sp, #20]
 800b26a:	6800      	ldr	r0, [r0, #0]
 800b26c:	a902      	add	r1, sp, #8
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	f002 f8ea 	bl	800d448 <_svfiprintf_r>
 800b274:	2200      	movs	r2, #0
 800b276:	9b02      	ldr	r3, [sp, #8]
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	b01c      	add	sp, #112	@ 0x70
 800b27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b280:	b003      	add	sp, #12
 800b282:	4770      	bx	lr
 800b284:	20000184 	.word	0x20000184
 800b288:	ffff0208 	.word	0xffff0208

0800b28c <__sread>:
 800b28c:	b510      	push	{r4, lr}
 800b28e:	460c      	mov	r4, r1
 800b290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b294:	f000 f8bc 	bl	800b410 <_read_r>
 800b298:	2800      	cmp	r0, #0
 800b29a:	bfab      	itete	ge
 800b29c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b29e:	89a3      	ldrhlt	r3, [r4, #12]
 800b2a0:	181b      	addge	r3, r3, r0
 800b2a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b2a6:	bfac      	ite	ge
 800b2a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b2aa:	81a3      	strhlt	r3, [r4, #12]
 800b2ac:	bd10      	pop	{r4, pc}

0800b2ae <__swrite>:
 800b2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b2:	461f      	mov	r7, r3
 800b2b4:	898b      	ldrh	r3, [r1, #12]
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	05db      	lsls	r3, r3, #23
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	4616      	mov	r6, r2
 800b2be:	d505      	bpl.n	800b2cc <__swrite+0x1e>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c8:	f000 f890 	bl	800b3ec <_lseek_r>
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	4632      	mov	r2, r6
 800b2d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2d4:	81a3      	strh	r3, [r4, #12]
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	463b      	mov	r3, r7
 800b2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e2:	f000 b8a7 	b.w	800b434 <_write_r>

0800b2e6 <__sseek>:
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ee:	f000 f87d 	bl	800b3ec <_lseek_r>
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	bf15      	itete	ne
 800b2f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b2fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b2fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b302:	81a3      	strheq	r3, [r4, #12]
 800b304:	bf18      	it	ne
 800b306:	81a3      	strhne	r3, [r4, #12]
 800b308:	bd10      	pop	{r4, pc}

0800b30a <__sclose>:
 800b30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b30e:	f000 b85d 	b.w	800b3cc <_close_r>

0800b312 <memset>:
 800b312:	4603      	mov	r3, r0
 800b314:	4402      	add	r2, r0
 800b316:	4293      	cmp	r3, r2
 800b318:	d100      	bne.n	800b31c <memset+0xa>
 800b31a:	4770      	bx	lr
 800b31c:	f803 1b01 	strb.w	r1, [r3], #1
 800b320:	e7f9      	b.n	800b316 <memset+0x4>

0800b322 <strncmp>:
 800b322:	b510      	push	{r4, lr}
 800b324:	b16a      	cbz	r2, 800b342 <strncmp+0x20>
 800b326:	3901      	subs	r1, #1
 800b328:	1884      	adds	r4, r0, r2
 800b32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b32e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b332:	429a      	cmp	r2, r3
 800b334:	d103      	bne.n	800b33e <strncmp+0x1c>
 800b336:	42a0      	cmp	r0, r4
 800b338:	d001      	beq.n	800b33e <strncmp+0x1c>
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	d1f5      	bne.n	800b32a <strncmp+0x8>
 800b33e:	1ad0      	subs	r0, r2, r3
 800b340:	bd10      	pop	{r4, pc}
 800b342:	4610      	mov	r0, r2
 800b344:	e7fc      	b.n	800b340 <strncmp+0x1e>

0800b346 <strncpy>:
 800b346:	4603      	mov	r3, r0
 800b348:	b510      	push	{r4, lr}
 800b34a:	3901      	subs	r1, #1
 800b34c:	b132      	cbz	r2, 800b35c <strncpy+0x16>
 800b34e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b352:	3a01      	subs	r2, #1
 800b354:	f803 4b01 	strb.w	r4, [r3], #1
 800b358:	2c00      	cmp	r4, #0
 800b35a:	d1f7      	bne.n	800b34c <strncpy+0x6>
 800b35c:	2100      	movs	r1, #0
 800b35e:	441a      	add	r2, r3
 800b360:	4293      	cmp	r3, r2
 800b362:	d100      	bne.n	800b366 <strncpy+0x20>
 800b364:	bd10      	pop	{r4, pc}
 800b366:	f803 1b01 	strb.w	r1, [r3], #1
 800b36a:	e7f9      	b.n	800b360 <strncpy+0x1a>

0800b36c <__strtok_r>:
 800b36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36e:	4604      	mov	r4, r0
 800b370:	b908      	cbnz	r0, 800b376 <__strtok_r+0xa>
 800b372:	6814      	ldr	r4, [r2, #0]
 800b374:	b144      	cbz	r4, 800b388 <__strtok_r+0x1c>
 800b376:	460f      	mov	r7, r1
 800b378:	4620      	mov	r0, r4
 800b37a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b37e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b382:	b91e      	cbnz	r6, 800b38c <__strtok_r+0x20>
 800b384:	b965      	cbnz	r5, 800b3a0 <__strtok_r+0x34>
 800b386:	6015      	str	r5, [r2, #0]
 800b388:	2000      	movs	r0, #0
 800b38a:	e005      	b.n	800b398 <__strtok_r+0x2c>
 800b38c:	42b5      	cmp	r5, r6
 800b38e:	d1f6      	bne.n	800b37e <__strtok_r+0x12>
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1f0      	bne.n	800b376 <__strtok_r+0xa>
 800b394:	6014      	str	r4, [r2, #0]
 800b396:	7003      	strb	r3, [r0, #0]
 800b398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39a:	461c      	mov	r4, r3
 800b39c:	e00c      	b.n	800b3b8 <__strtok_r+0x4c>
 800b39e:	b915      	cbnz	r5, 800b3a6 <__strtok_r+0x3a>
 800b3a0:	460e      	mov	r6, r1
 800b3a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b3aa:	42ab      	cmp	r3, r5
 800b3ac:	d1f7      	bne.n	800b39e <__strtok_r+0x32>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0f3      	beq.n	800b39a <__strtok_r+0x2e>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b3b8:	6014      	str	r4, [r2, #0]
 800b3ba:	e7ed      	b.n	800b398 <__strtok_r+0x2c>

0800b3bc <strtok_r>:
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f7ff bfd5 	b.w	800b36c <__strtok_r>
	...

0800b3c4 <_localeconv_r>:
 800b3c4:	4800      	ldr	r0, [pc, #0]	@ (800b3c8 <_localeconv_r+0x4>)
 800b3c6:	4770      	bx	lr
 800b3c8:	20000108 	.word	0x20000108

0800b3cc <_close_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	4d05      	ldr	r5, [pc, #20]	@ (800b3e8 <_close_r+0x1c>)
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	602b      	str	r3, [r5, #0]
 800b3d8:	f7f8 fb5f 	bl	8003a9a <_close>
 800b3dc:	1c43      	adds	r3, r0, #1
 800b3de:	d102      	bne.n	800b3e6 <_close_r+0x1a>
 800b3e0:	682b      	ldr	r3, [r5, #0]
 800b3e2:	b103      	cbz	r3, 800b3e6 <_close_r+0x1a>
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	20000888 	.word	0x20000888

0800b3ec <_lseek_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4d05      	ldr	r5, [pc, #20]	@ (800b40c <_lseek_r+0x20>)
 800b3f8:	602a      	str	r2, [r5, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f7f8 fb71 	bl	8003ae2 <_lseek>
 800b400:	1c43      	adds	r3, r0, #1
 800b402:	d102      	bne.n	800b40a <_lseek_r+0x1e>
 800b404:	682b      	ldr	r3, [r5, #0]
 800b406:	b103      	cbz	r3, 800b40a <_lseek_r+0x1e>
 800b408:	6023      	str	r3, [r4, #0]
 800b40a:	bd38      	pop	{r3, r4, r5, pc}
 800b40c:	20000888 	.word	0x20000888

0800b410 <_read_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	2200      	movs	r2, #0
 800b41a:	4d05      	ldr	r5, [pc, #20]	@ (800b430 <_read_r+0x20>)
 800b41c:	602a      	str	r2, [r5, #0]
 800b41e:	461a      	mov	r2, r3
 800b420:	f7f8 fb02 	bl	8003a28 <_read>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d102      	bne.n	800b42e <_read_r+0x1e>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	b103      	cbz	r3, 800b42e <_read_r+0x1e>
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
 800b430:	20000888 	.word	0x20000888

0800b434 <_write_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	4611      	mov	r1, r2
 800b43c:	2200      	movs	r2, #0
 800b43e:	4d05      	ldr	r5, [pc, #20]	@ (800b454 <_write_r+0x20>)
 800b440:	602a      	str	r2, [r5, #0]
 800b442:	461a      	mov	r2, r3
 800b444:	f7f8 fb0d 	bl	8003a62 <_write>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_write_r+0x1e>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_write_r+0x1e>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	20000888 	.word	0x20000888

0800b458 <__errno>:
 800b458:	4b01      	ldr	r3, [pc, #4]	@ (800b460 <__errno+0x8>)
 800b45a:	6818      	ldr	r0, [r3, #0]
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	20000184 	.word	0x20000184

0800b464 <__libc_init_array>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	2600      	movs	r6, #0
 800b468:	4d0c      	ldr	r5, [pc, #48]	@ (800b49c <__libc_init_array+0x38>)
 800b46a:	4c0d      	ldr	r4, [pc, #52]	@ (800b4a0 <__libc_init_array+0x3c>)
 800b46c:	1b64      	subs	r4, r4, r5
 800b46e:	10a4      	asrs	r4, r4, #2
 800b470:	42a6      	cmp	r6, r4
 800b472:	d109      	bne.n	800b488 <__libc_init_array+0x24>
 800b474:	f002 fcd2 	bl	800de1c <_init>
 800b478:	2600      	movs	r6, #0
 800b47a:	4d0a      	ldr	r5, [pc, #40]	@ (800b4a4 <__libc_init_array+0x40>)
 800b47c:	4c0a      	ldr	r4, [pc, #40]	@ (800b4a8 <__libc_init_array+0x44>)
 800b47e:	1b64      	subs	r4, r4, r5
 800b480:	10a4      	asrs	r4, r4, #2
 800b482:	42a6      	cmp	r6, r4
 800b484:	d105      	bne.n	800b492 <__libc_init_array+0x2e>
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	f855 3b04 	ldr.w	r3, [r5], #4
 800b48c:	4798      	blx	r3
 800b48e:	3601      	adds	r6, #1
 800b490:	e7ee      	b.n	800b470 <__libc_init_array+0xc>
 800b492:	f855 3b04 	ldr.w	r3, [r5], #4
 800b496:	4798      	blx	r3
 800b498:	3601      	adds	r6, #1
 800b49a:	e7f2      	b.n	800b482 <__libc_init_array+0x1e>
 800b49c:	0800e668 	.word	0x0800e668
 800b4a0:	0800e668 	.word	0x0800e668
 800b4a4:	0800e668 	.word	0x0800e668
 800b4a8:	0800e66c 	.word	0x0800e66c

0800b4ac <__retarget_lock_init_recursive>:
 800b4ac:	4770      	bx	lr

0800b4ae <__retarget_lock_acquire_recursive>:
 800b4ae:	4770      	bx	lr

0800b4b0 <__retarget_lock_release_recursive>:
 800b4b0:	4770      	bx	lr

0800b4b2 <memchr>:
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	b510      	push	{r4, lr}
 800b4b6:	b2c9      	uxtb	r1, r1
 800b4b8:	4402      	add	r2, r0
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	4618      	mov	r0, r3
 800b4be:	d101      	bne.n	800b4c4 <memchr+0x12>
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	e003      	b.n	800b4cc <memchr+0x1a>
 800b4c4:	7804      	ldrb	r4, [r0, #0]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	428c      	cmp	r4, r1
 800b4ca:	d1f6      	bne.n	800b4ba <memchr+0x8>
 800b4cc:	bd10      	pop	{r4, pc}

0800b4ce <memcpy>:
 800b4ce:	440a      	add	r2, r1
 800b4d0:	4291      	cmp	r1, r2
 800b4d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4d6:	d100      	bne.n	800b4da <memcpy+0xc>
 800b4d8:	4770      	bx	lr
 800b4da:	b510      	push	{r4, lr}
 800b4dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4e0:	4291      	cmp	r1, r2
 800b4e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4e6:	d1f9      	bne.n	800b4dc <memcpy+0xe>
 800b4e8:	bd10      	pop	{r4, pc}
	...

0800b4ec <nan>:
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	4901      	ldr	r1, [pc, #4]	@ (800b4f4 <nan+0x8>)
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	7ff80000 	.word	0x7ff80000

0800b4f8 <quorem>:
 800b4f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	6903      	ldr	r3, [r0, #16]
 800b4fe:	690c      	ldr	r4, [r1, #16]
 800b500:	4607      	mov	r7, r0
 800b502:	42a3      	cmp	r3, r4
 800b504:	db7e      	blt.n	800b604 <quorem+0x10c>
 800b506:	3c01      	subs	r4, #1
 800b508:	00a3      	lsls	r3, r4, #2
 800b50a:	f100 0514 	add.w	r5, r0, #20
 800b50e:	f101 0814 	add.w	r8, r1, #20
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b518:	9301      	str	r3, [sp, #4]
 800b51a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b51e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b522:	3301      	adds	r3, #1
 800b524:	429a      	cmp	r2, r3
 800b526:	fbb2 f6f3 	udiv	r6, r2, r3
 800b52a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b52e:	d32e      	bcc.n	800b58e <quorem+0x96>
 800b530:	f04f 0a00 	mov.w	sl, #0
 800b534:	46c4      	mov	ip, r8
 800b536:	46ae      	mov	lr, r5
 800b538:	46d3      	mov	fp, sl
 800b53a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b53e:	b298      	uxth	r0, r3
 800b540:	fb06 a000 	mla	r0, r6, r0, sl
 800b544:	0c1b      	lsrs	r3, r3, #16
 800b546:	0c02      	lsrs	r2, r0, #16
 800b548:	fb06 2303 	mla	r3, r6, r3, r2
 800b54c:	f8de 2000 	ldr.w	r2, [lr]
 800b550:	b280      	uxth	r0, r0
 800b552:	b292      	uxth	r2, r2
 800b554:	1a12      	subs	r2, r2, r0
 800b556:	445a      	add	r2, fp
 800b558:	f8de 0000 	ldr.w	r0, [lr]
 800b55c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b560:	b29b      	uxth	r3, r3
 800b562:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b566:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b56a:	b292      	uxth	r2, r2
 800b56c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b570:	45e1      	cmp	r9, ip
 800b572:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b576:	f84e 2b04 	str.w	r2, [lr], #4
 800b57a:	d2de      	bcs.n	800b53a <quorem+0x42>
 800b57c:	9b00      	ldr	r3, [sp, #0]
 800b57e:	58eb      	ldr	r3, [r5, r3]
 800b580:	b92b      	cbnz	r3, 800b58e <quorem+0x96>
 800b582:	9b01      	ldr	r3, [sp, #4]
 800b584:	3b04      	subs	r3, #4
 800b586:	429d      	cmp	r5, r3
 800b588:	461a      	mov	r2, r3
 800b58a:	d32f      	bcc.n	800b5ec <quorem+0xf4>
 800b58c:	613c      	str	r4, [r7, #16]
 800b58e:	4638      	mov	r0, r7
 800b590:	f001 fd0e 	bl	800cfb0 <__mcmp>
 800b594:	2800      	cmp	r0, #0
 800b596:	db25      	blt.n	800b5e4 <quorem+0xec>
 800b598:	4629      	mov	r1, r5
 800b59a:	2000      	movs	r0, #0
 800b59c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5a0:	f8d1 c000 	ldr.w	ip, [r1]
 800b5a4:	fa1f fe82 	uxth.w	lr, r2
 800b5a8:	fa1f f38c 	uxth.w	r3, ip
 800b5ac:	eba3 030e 	sub.w	r3, r3, lr
 800b5b0:	4403      	add	r3, r0
 800b5b2:	0c12      	lsrs	r2, r2, #16
 800b5b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b5b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5c2:	45c1      	cmp	r9, r8
 800b5c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b5c8:	f841 3b04 	str.w	r3, [r1], #4
 800b5cc:	d2e6      	bcs.n	800b59c <quorem+0xa4>
 800b5ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5d6:	b922      	cbnz	r2, 800b5e2 <quorem+0xea>
 800b5d8:	3b04      	subs	r3, #4
 800b5da:	429d      	cmp	r5, r3
 800b5dc:	461a      	mov	r2, r3
 800b5de:	d30b      	bcc.n	800b5f8 <quorem+0x100>
 800b5e0:	613c      	str	r4, [r7, #16]
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	b003      	add	sp, #12
 800b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ec:	6812      	ldr	r2, [r2, #0]
 800b5ee:	3b04      	subs	r3, #4
 800b5f0:	2a00      	cmp	r2, #0
 800b5f2:	d1cb      	bne.n	800b58c <quorem+0x94>
 800b5f4:	3c01      	subs	r4, #1
 800b5f6:	e7c6      	b.n	800b586 <quorem+0x8e>
 800b5f8:	6812      	ldr	r2, [r2, #0]
 800b5fa:	3b04      	subs	r3, #4
 800b5fc:	2a00      	cmp	r2, #0
 800b5fe:	d1ef      	bne.n	800b5e0 <quorem+0xe8>
 800b600:	3c01      	subs	r4, #1
 800b602:	e7ea      	b.n	800b5da <quorem+0xe2>
 800b604:	2000      	movs	r0, #0
 800b606:	e7ee      	b.n	800b5e6 <quorem+0xee>

0800b608 <_dtoa_r>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	4614      	mov	r4, r2
 800b60e:	461d      	mov	r5, r3
 800b610:	69c7      	ldr	r7, [r0, #28]
 800b612:	b097      	sub	sp, #92	@ 0x5c
 800b614:	4683      	mov	fp, r0
 800b616:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b61a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b61c:	b97f      	cbnz	r7, 800b63e <_dtoa_r+0x36>
 800b61e:	2010      	movs	r0, #16
 800b620:	f001 f93c 	bl	800c89c <malloc>
 800b624:	4602      	mov	r2, r0
 800b626:	f8cb 001c 	str.w	r0, [fp, #28]
 800b62a:	b920      	cbnz	r0, 800b636 <_dtoa_r+0x2e>
 800b62c:	21ef      	movs	r1, #239	@ 0xef
 800b62e:	4ba8      	ldr	r3, [pc, #672]	@ (800b8d0 <_dtoa_r+0x2c8>)
 800b630:	48a8      	ldr	r0, [pc, #672]	@ (800b8d4 <_dtoa_r+0x2cc>)
 800b632:	f002 f8d7 	bl	800d7e4 <__assert_func>
 800b636:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b63a:	6007      	str	r7, [r0, #0]
 800b63c:	60c7      	str	r7, [r0, #12]
 800b63e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b642:	6819      	ldr	r1, [r3, #0]
 800b644:	b159      	cbz	r1, 800b65e <_dtoa_r+0x56>
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	2301      	movs	r3, #1
 800b64a:	4093      	lsls	r3, r2
 800b64c:	604a      	str	r2, [r1, #4]
 800b64e:	608b      	str	r3, [r1, #8]
 800b650:	4658      	mov	r0, fp
 800b652:	f001 fa2b 	bl	800caac <_Bfree>
 800b656:	2200      	movs	r2, #0
 800b658:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	1e2b      	subs	r3, r5, #0
 800b660:	bfaf      	iteee	ge
 800b662:	2300      	movge	r3, #0
 800b664:	2201      	movlt	r2, #1
 800b666:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b66a:	9303      	strlt	r3, [sp, #12]
 800b66c:	bfa8      	it	ge
 800b66e:	6033      	strge	r3, [r6, #0]
 800b670:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b674:	4b98      	ldr	r3, [pc, #608]	@ (800b8d8 <_dtoa_r+0x2d0>)
 800b676:	bfb8      	it	lt
 800b678:	6032      	strlt	r2, [r6, #0]
 800b67a:	ea33 0308 	bics.w	r3, r3, r8
 800b67e:	d112      	bne.n	800b6a6 <_dtoa_r+0x9e>
 800b680:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b684:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b68c:	4323      	orrs	r3, r4
 800b68e:	f000 8550 	beq.w	800c132 <_dtoa_r+0xb2a>
 800b692:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b694:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b8dc <_dtoa_r+0x2d4>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 8552 	beq.w	800c142 <_dtoa_r+0xb3a>
 800b69e:	f10a 0303 	add.w	r3, sl, #3
 800b6a2:	f000 bd4c 	b.w	800c13e <_dtoa_r+0xb36>
 800b6a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f7f5 f977 	bl	80009a8 <__aeabi_dcmpeq>
 800b6ba:	4607      	mov	r7, r0
 800b6bc:	b158      	cbz	r0, 800b6d6 <_dtoa_r+0xce>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b6c2:	6013      	str	r3, [r2, #0]
 800b6c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b6c6:	b113      	cbz	r3, 800b6ce <_dtoa_r+0xc6>
 800b6c8:	4b85      	ldr	r3, [pc, #532]	@ (800b8e0 <_dtoa_r+0x2d8>)
 800b6ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b6cc:	6013      	str	r3, [r2, #0]
 800b6ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b8e4 <_dtoa_r+0x2dc>
 800b6d2:	f000 bd36 	b.w	800c142 <_dtoa_r+0xb3a>
 800b6d6:	ab14      	add	r3, sp, #80	@ 0x50
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	ab15      	add	r3, sp, #84	@ 0x54
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	4658      	mov	r0, fp
 800b6e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6e4:	f001 fd7c 	bl	800d1e0 <__d2b>
 800b6e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b6ec:	4681      	mov	r9, r0
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	d077      	beq.n	800b7e2 <_dtoa_r+0x1da>
 800b6f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b6fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b700:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b704:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b708:	9712      	str	r7, [sp, #72]	@ 0x48
 800b70a:	4619      	mov	r1, r3
 800b70c:	2200      	movs	r2, #0
 800b70e:	4b76      	ldr	r3, [pc, #472]	@ (800b8e8 <_dtoa_r+0x2e0>)
 800b710:	f7f4 fd2a 	bl	8000168 <__aeabi_dsub>
 800b714:	a368      	add	r3, pc, #416	@ (adr r3, 800b8b8 <_dtoa_r+0x2b0>)
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f7f4 fedd 	bl	80004d8 <__aeabi_dmul>
 800b71e:	a368      	add	r3, pc, #416	@ (adr r3, 800b8c0 <_dtoa_r+0x2b8>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f7f4 fd22 	bl	800016c <__adddf3>
 800b728:	4604      	mov	r4, r0
 800b72a:	4630      	mov	r0, r6
 800b72c:	460d      	mov	r5, r1
 800b72e:	f7f4 fe69 	bl	8000404 <__aeabi_i2d>
 800b732:	a365      	add	r3, pc, #404	@ (adr r3, 800b8c8 <_dtoa_r+0x2c0>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 fece 	bl	80004d8 <__aeabi_dmul>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4620      	mov	r0, r4
 800b742:	4629      	mov	r1, r5
 800b744:	f7f4 fd12 	bl	800016c <__adddf3>
 800b748:	4604      	mov	r4, r0
 800b74a:	460d      	mov	r5, r1
 800b74c:	f7f5 f974 	bl	8000a38 <__aeabi_d2iz>
 800b750:	2200      	movs	r2, #0
 800b752:	4607      	mov	r7, r0
 800b754:	2300      	movs	r3, #0
 800b756:	4620      	mov	r0, r4
 800b758:	4629      	mov	r1, r5
 800b75a:	f7f5 f92f 	bl	80009bc <__aeabi_dcmplt>
 800b75e:	b140      	cbz	r0, 800b772 <_dtoa_r+0x16a>
 800b760:	4638      	mov	r0, r7
 800b762:	f7f4 fe4f 	bl	8000404 <__aeabi_i2d>
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	f7f5 f91d 	bl	80009a8 <__aeabi_dcmpeq>
 800b76e:	b900      	cbnz	r0, 800b772 <_dtoa_r+0x16a>
 800b770:	3f01      	subs	r7, #1
 800b772:	2f16      	cmp	r7, #22
 800b774:	d853      	bhi.n	800b81e <_dtoa_r+0x216>
 800b776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b77a:	4b5c      	ldr	r3, [pc, #368]	@ (800b8ec <_dtoa_r+0x2e4>)
 800b77c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f7f5 f91a 	bl	80009bc <__aeabi_dcmplt>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d04a      	beq.n	800b822 <_dtoa_r+0x21a>
 800b78c:	2300      	movs	r3, #0
 800b78e:	3f01      	subs	r7, #1
 800b790:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b792:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b794:	1b9b      	subs	r3, r3, r6
 800b796:	1e5a      	subs	r2, r3, #1
 800b798:	bf46      	itte	mi
 800b79a:	f1c3 0801 	rsbmi	r8, r3, #1
 800b79e:	2300      	movmi	r3, #0
 800b7a0:	f04f 0800 	movpl.w	r8, #0
 800b7a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7a6:	bf48      	it	mi
 800b7a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b7aa:	2f00      	cmp	r7, #0
 800b7ac:	db3b      	blt.n	800b826 <_dtoa_r+0x21e>
 800b7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b0:	970e      	str	r7, [sp, #56]	@ 0x38
 800b7b2:	443b      	add	r3, r7
 800b7b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b7bc:	2b09      	cmp	r3, #9
 800b7be:	d866      	bhi.n	800b88e <_dtoa_r+0x286>
 800b7c0:	2b05      	cmp	r3, #5
 800b7c2:	bfc4      	itt	gt
 800b7c4:	3b04      	subgt	r3, #4
 800b7c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b7c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b7ca:	bfc8      	it	gt
 800b7cc:	2400      	movgt	r4, #0
 800b7ce:	f1a3 0302 	sub.w	r3, r3, #2
 800b7d2:	bfd8      	it	le
 800b7d4:	2401      	movle	r4, #1
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d864      	bhi.n	800b8a4 <_dtoa_r+0x29c>
 800b7da:	e8df f003 	tbb	[pc, r3]
 800b7de:	382b      	.short	0x382b
 800b7e0:	5636      	.short	0x5636
 800b7e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b7e6:	441e      	add	r6, r3
 800b7e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b7ec:	2b20      	cmp	r3, #32
 800b7ee:	bfc1      	itttt	gt
 800b7f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b7f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b7f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b7fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b800:	bfd6      	itet	le
 800b802:	f1c3 0320 	rsble	r3, r3, #32
 800b806:	ea48 0003 	orrgt.w	r0, r8, r3
 800b80a:	fa04 f003 	lslle.w	r0, r4, r3
 800b80e:	f7f4 fde9 	bl	80003e4 <__aeabi_ui2d>
 800b812:	2201      	movs	r2, #1
 800b814:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b818:	3e01      	subs	r6, #1
 800b81a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b81c:	e775      	b.n	800b70a <_dtoa_r+0x102>
 800b81e:	2301      	movs	r3, #1
 800b820:	e7b6      	b.n	800b790 <_dtoa_r+0x188>
 800b822:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b824:	e7b5      	b.n	800b792 <_dtoa_r+0x18a>
 800b826:	427b      	negs	r3, r7
 800b828:	930a      	str	r3, [sp, #40]	@ 0x28
 800b82a:	2300      	movs	r3, #0
 800b82c:	eba8 0807 	sub.w	r8, r8, r7
 800b830:	930e      	str	r3, [sp, #56]	@ 0x38
 800b832:	e7c2      	b.n	800b7ba <_dtoa_r+0x1b2>
 800b834:	2300      	movs	r3, #0
 800b836:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b838:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dc35      	bgt.n	800b8aa <_dtoa_r+0x2a2>
 800b83e:	2301      	movs	r3, #1
 800b840:	461a      	mov	r2, r3
 800b842:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b846:	9221      	str	r2, [sp, #132]	@ 0x84
 800b848:	e00b      	b.n	800b862 <_dtoa_r+0x25a>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e7f3      	b.n	800b836 <_dtoa_r+0x22e>
 800b84e:	2300      	movs	r3, #0
 800b850:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b852:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b854:	18fb      	adds	r3, r7, r3
 800b856:	9308      	str	r3, [sp, #32]
 800b858:	3301      	adds	r3, #1
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	9307      	str	r3, [sp, #28]
 800b85e:	bfb8      	it	lt
 800b860:	2301      	movlt	r3, #1
 800b862:	2100      	movs	r1, #0
 800b864:	2204      	movs	r2, #4
 800b866:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b86a:	f102 0514 	add.w	r5, r2, #20
 800b86e:	429d      	cmp	r5, r3
 800b870:	d91f      	bls.n	800b8b2 <_dtoa_r+0x2aa>
 800b872:	6041      	str	r1, [r0, #4]
 800b874:	4658      	mov	r0, fp
 800b876:	f001 f8d9 	bl	800ca2c <_Balloc>
 800b87a:	4682      	mov	sl, r0
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d139      	bne.n	800b8f4 <_dtoa_r+0x2ec>
 800b880:	4602      	mov	r2, r0
 800b882:	f240 11af 	movw	r1, #431	@ 0x1af
 800b886:	4b1a      	ldr	r3, [pc, #104]	@ (800b8f0 <_dtoa_r+0x2e8>)
 800b888:	e6d2      	b.n	800b630 <_dtoa_r+0x28>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e7e0      	b.n	800b850 <_dtoa_r+0x248>
 800b88e:	2401      	movs	r4, #1
 800b890:	2300      	movs	r3, #0
 800b892:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b894:	9320      	str	r3, [sp, #128]	@ 0x80
 800b896:	f04f 33ff 	mov.w	r3, #4294967295
 800b89a:	2200      	movs	r2, #0
 800b89c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b8a0:	2312      	movs	r3, #18
 800b8a2:	e7d0      	b.n	800b846 <_dtoa_r+0x23e>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8a8:	e7f5      	b.n	800b896 <_dtoa_r+0x28e>
 800b8aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b8b0:	e7d7      	b.n	800b862 <_dtoa_r+0x25a>
 800b8b2:	3101      	adds	r1, #1
 800b8b4:	0052      	lsls	r2, r2, #1
 800b8b6:	e7d8      	b.n	800b86a <_dtoa_r+0x262>
 800b8b8:	636f4361 	.word	0x636f4361
 800b8bc:	3fd287a7 	.word	0x3fd287a7
 800b8c0:	8b60c8b3 	.word	0x8b60c8b3
 800b8c4:	3fc68a28 	.word	0x3fc68a28
 800b8c8:	509f79fb 	.word	0x509f79fb
 800b8cc:	3fd34413 	.word	0x3fd34413
 800b8d0:	0800e3da 	.word	0x0800e3da
 800b8d4:	0800e3f1 	.word	0x0800e3f1
 800b8d8:	7ff00000 	.word	0x7ff00000
 800b8dc:	0800e3d6 	.word	0x0800e3d6
 800b8e0:	0800e3a2 	.word	0x0800e3a2
 800b8e4:	0800e3a1 	.word	0x0800e3a1
 800b8e8:	3ff80000 	.word	0x3ff80000
 800b8ec:	0800e548 	.word	0x0800e548
 800b8f0:	0800e449 	.word	0x0800e449
 800b8f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8f8:	6018      	str	r0, [r3, #0]
 800b8fa:	9b07      	ldr	r3, [sp, #28]
 800b8fc:	2b0e      	cmp	r3, #14
 800b8fe:	f200 80a4 	bhi.w	800ba4a <_dtoa_r+0x442>
 800b902:	2c00      	cmp	r4, #0
 800b904:	f000 80a1 	beq.w	800ba4a <_dtoa_r+0x442>
 800b908:	2f00      	cmp	r7, #0
 800b90a:	dd33      	ble.n	800b974 <_dtoa_r+0x36c>
 800b90c:	4b86      	ldr	r3, [pc, #536]	@ (800bb28 <_dtoa_r+0x520>)
 800b90e:	f007 020f 	and.w	r2, r7, #15
 800b912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b916:	05f8      	lsls	r0, r7, #23
 800b918:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b91c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b920:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b924:	d516      	bpl.n	800b954 <_dtoa_r+0x34c>
 800b926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b92a:	4b80      	ldr	r3, [pc, #512]	@ (800bb2c <_dtoa_r+0x524>)
 800b92c:	2603      	movs	r6, #3
 800b92e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b932:	f7f4 fefb 	bl	800072c <__aeabi_ddiv>
 800b936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b93a:	f004 040f 	and.w	r4, r4, #15
 800b93e:	4d7b      	ldr	r5, [pc, #492]	@ (800bb2c <_dtoa_r+0x524>)
 800b940:	b954      	cbnz	r4, 800b958 <_dtoa_r+0x350>
 800b942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b94a:	f7f4 feef 	bl	800072c <__aeabi_ddiv>
 800b94e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b952:	e028      	b.n	800b9a6 <_dtoa_r+0x39e>
 800b954:	2602      	movs	r6, #2
 800b956:	e7f2      	b.n	800b93e <_dtoa_r+0x336>
 800b958:	07e1      	lsls	r1, r4, #31
 800b95a:	d508      	bpl.n	800b96e <_dtoa_r+0x366>
 800b95c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b960:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b964:	f7f4 fdb8 	bl	80004d8 <__aeabi_dmul>
 800b968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b96c:	3601      	adds	r6, #1
 800b96e:	1064      	asrs	r4, r4, #1
 800b970:	3508      	adds	r5, #8
 800b972:	e7e5      	b.n	800b940 <_dtoa_r+0x338>
 800b974:	f000 80d2 	beq.w	800bb1c <_dtoa_r+0x514>
 800b978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b97c:	427c      	negs	r4, r7
 800b97e:	4b6a      	ldr	r3, [pc, #424]	@ (800bb28 <_dtoa_r+0x520>)
 800b980:	f004 020f 	and.w	r2, r4, #15
 800b984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	f7f4 fda4 	bl	80004d8 <__aeabi_dmul>
 800b990:	2602      	movs	r6, #2
 800b992:	2300      	movs	r3, #0
 800b994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b998:	4d64      	ldr	r5, [pc, #400]	@ (800bb2c <_dtoa_r+0x524>)
 800b99a:	1124      	asrs	r4, r4, #4
 800b99c:	2c00      	cmp	r4, #0
 800b99e:	f040 80b2 	bne.w	800bb06 <_dtoa_r+0x4fe>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1d3      	bne.n	800b94e <_dtoa_r+0x346>
 800b9a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b9aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80b7 	beq.w	800bb20 <_dtoa_r+0x518>
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	4b5d      	ldr	r3, [pc, #372]	@ (800bb30 <_dtoa_r+0x528>)
 800b9ba:	f7f4 ffff 	bl	80009bc <__aeabi_dcmplt>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f000 80ae 	beq.w	800bb20 <_dtoa_r+0x518>
 800b9c4:	9b07      	ldr	r3, [sp, #28]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 80aa 	beq.w	800bb20 <_dtoa_r+0x518>
 800b9cc:	9b08      	ldr	r3, [sp, #32]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dd37      	ble.n	800ba42 <_dtoa_r+0x43a>
 800b9d2:	1e7b      	subs	r3, r7, #1
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	9304      	str	r3, [sp, #16]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	4629      	mov	r1, r5
 800b9dc:	4b55      	ldr	r3, [pc, #340]	@ (800bb34 <_dtoa_r+0x52c>)
 800b9de:	f7f4 fd7b 	bl	80004d8 <__aeabi_dmul>
 800b9e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e6:	9c08      	ldr	r4, [sp, #32]
 800b9e8:	3601      	adds	r6, #1
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7f4 fd0a 	bl	8000404 <__aeabi_i2d>
 800b9f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9f4:	f7f4 fd70 	bl	80004d8 <__aeabi_dmul>
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	4b4f      	ldr	r3, [pc, #316]	@ (800bb38 <_dtoa_r+0x530>)
 800b9fc:	f7f4 fbb6 	bl	800016c <__adddf3>
 800ba00:	4605      	mov	r5, r0
 800ba02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba06:	2c00      	cmp	r4, #0
 800ba08:	f040 809a 	bne.w	800bb40 <_dtoa_r+0x538>
 800ba0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba10:	2200      	movs	r2, #0
 800ba12:	4b4a      	ldr	r3, [pc, #296]	@ (800bb3c <_dtoa_r+0x534>)
 800ba14:	f7f4 fba8 	bl	8000168 <__aeabi_dsub>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba20:	462a      	mov	r2, r5
 800ba22:	4633      	mov	r3, r6
 800ba24:	f7f4 ffe8 	bl	80009f8 <__aeabi_dcmpgt>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	f040 828e 	bne.w	800bf4a <_dtoa_r+0x942>
 800ba2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba32:	462a      	mov	r2, r5
 800ba34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba38:	f7f4 ffc0 	bl	80009bc <__aeabi_dcmplt>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	f040 8127 	bne.w	800bc90 <_dtoa_r+0x688>
 800ba42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ba46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ba4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f2c0 8163 	blt.w	800bd18 <_dtoa_r+0x710>
 800ba52:	2f0e      	cmp	r7, #14
 800ba54:	f300 8160 	bgt.w	800bd18 <_dtoa_r+0x710>
 800ba58:	4b33      	ldr	r3, [pc, #204]	@ (800bb28 <_dtoa_r+0x520>)
 800ba5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	da03      	bge.n	800ba74 <_dtoa_r+0x46c>
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f340 8100 	ble.w	800bc74 <_dtoa_r+0x66c>
 800ba74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba78:	4656      	mov	r6, sl
 800ba7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba7e:	4620      	mov	r0, r4
 800ba80:	4629      	mov	r1, r5
 800ba82:	f7f4 fe53 	bl	800072c <__aeabi_ddiv>
 800ba86:	f7f4 ffd7 	bl	8000a38 <__aeabi_d2iz>
 800ba8a:	4680      	mov	r8, r0
 800ba8c:	f7f4 fcba 	bl	8000404 <__aeabi_i2d>
 800ba90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba94:	f7f4 fd20 	bl	80004d8 <__aeabi_dmul>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 fb62 	bl	8000168 <__aeabi_dsub>
 800baa4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800baa8:	9d07      	ldr	r5, [sp, #28]
 800baaa:	f806 4b01 	strb.w	r4, [r6], #1
 800baae:	eba6 040a 	sub.w	r4, r6, sl
 800bab2:	42a5      	cmp	r5, r4
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	f040 8116 	bne.w	800bce8 <_dtoa_r+0x6e0>
 800babc:	f7f4 fb56 	bl	800016c <__adddf3>
 800bac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bac4:	4604      	mov	r4, r0
 800bac6:	460d      	mov	r5, r1
 800bac8:	f7f4 ff96 	bl	80009f8 <__aeabi_dcmpgt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	f040 80f8 	bne.w	800bcc2 <_dtoa_r+0x6ba>
 800bad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bad6:	4620      	mov	r0, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	f7f4 ff65 	bl	80009a8 <__aeabi_dcmpeq>
 800bade:	b118      	cbz	r0, 800bae8 <_dtoa_r+0x4e0>
 800bae0:	f018 0f01 	tst.w	r8, #1
 800bae4:	f040 80ed 	bne.w	800bcc2 <_dtoa_r+0x6ba>
 800bae8:	4649      	mov	r1, r9
 800baea:	4658      	mov	r0, fp
 800baec:	f000 ffde 	bl	800caac <_Bfree>
 800baf0:	2300      	movs	r3, #0
 800baf2:	7033      	strb	r3, [r6, #0]
 800baf4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800baf6:	3701      	adds	r7, #1
 800baf8:	601f      	str	r7, [r3, #0]
 800bafa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 8320 	beq.w	800c142 <_dtoa_r+0xb3a>
 800bb02:	601e      	str	r6, [r3, #0]
 800bb04:	e31d      	b.n	800c142 <_dtoa_r+0xb3a>
 800bb06:	07e2      	lsls	r2, r4, #31
 800bb08:	d505      	bpl.n	800bb16 <_dtoa_r+0x50e>
 800bb0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb0e:	f7f4 fce3 	bl	80004d8 <__aeabi_dmul>
 800bb12:	2301      	movs	r3, #1
 800bb14:	3601      	adds	r6, #1
 800bb16:	1064      	asrs	r4, r4, #1
 800bb18:	3508      	adds	r5, #8
 800bb1a:	e73f      	b.n	800b99c <_dtoa_r+0x394>
 800bb1c:	2602      	movs	r6, #2
 800bb1e:	e742      	b.n	800b9a6 <_dtoa_r+0x39e>
 800bb20:	9c07      	ldr	r4, [sp, #28]
 800bb22:	9704      	str	r7, [sp, #16]
 800bb24:	e761      	b.n	800b9ea <_dtoa_r+0x3e2>
 800bb26:	bf00      	nop
 800bb28:	0800e548 	.word	0x0800e548
 800bb2c:	0800e520 	.word	0x0800e520
 800bb30:	3ff00000 	.word	0x3ff00000
 800bb34:	40240000 	.word	0x40240000
 800bb38:	401c0000 	.word	0x401c0000
 800bb3c:	40140000 	.word	0x40140000
 800bb40:	4b70      	ldr	r3, [pc, #448]	@ (800bd04 <_dtoa_r+0x6fc>)
 800bb42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb4c:	4454      	add	r4, sl
 800bb4e:	2900      	cmp	r1, #0
 800bb50:	d045      	beq.n	800bbde <_dtoa_r+0x5d6>
 800bb52:	2000      	movs	r0, #0
 800bb54:	496c      	ldr	r1, [pc, #432]	@ (800bd08 <_dtoa_r+0x700>)
 800bb56:	f7f4 fde9 	bl	800072c <__aeabi_ddiv>
 800bb5a:	4633      	mov	r3, r6
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	f7f4 fb03 	bl	8000168 <__aeabi_dsub>
 800bb62:	4656      	mov	r6, sl
 800bb64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6c:	f7f4 ff64 	bl	8000a38 <__aeabi_d2iz>
 800bb70:	4605      	mov	r5, r0
 800bb72:	f7f4 fc47 	bl	8000404 <__aeabi_i2d>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb7e:	f7f4 faf3 	bl	8000168 <__aeabi_dsub>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	3530      	adds	r5, #48	@ 0x30
 800bb88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb90:	f806 5b01 	strb.w	r5, [r6], #1
 800bb94:	f7f4 ff12 	bl	80009bc <__aeabi_dcmplt>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d163      	bne.n	800bc64 <_dtoa_r+0x65c>
 800bb9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bba0:	2000      	movs	r0, #0
 800bba2:	495a      	ldr	r1, [pc, #360]	@ (800bd0c <_dtoa_r+0x704>)
 800bba4:	f7f4 fae0 	bl	8000168 <__aeabi_dsub>
 800bba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbac:	f7f4 ff06 	bl	80009bc <__aeabi_dcmplt>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	f040 8087 	bne.w	800bcc4 <_dtoa_r+0x6bc>
 800bbb6:	42a6      	cmp	r6, r4
 800bbb8:	f43f af43 	beq.w	800ba42 <_dtoa_r+0x43a>
 800bbbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4b53      	ldr	r3, [pc, #332]	@ (800bd10 <_dtoa_r+0x708>)
 800bbc4:	f7f4 fc88 	bl	80004d8 <__aeabi_dmul>
 800bbc8:	2200      	movs	r2, #0
 800bbca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd2:	4b4f      	ldr	r3, [pc, #316]	@ (800bd10 <_dtoa_r+0x708>)
 800bbd4:	f7f4 fc80 	bl	80004d8 <__aeabi_dmul>
 800bbd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbdc:	e7c4      	b.n	800bb68 <_dtoa_r+0x560>
 800bbde:	4631      	mov	r1, r6
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f7f4 fc79 	bl	80004d8 <__aeabi_dmul>
 800bbe6:	4656      	mov	r6, sl
 800bbe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbec:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bbee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf2:	f7f4 ff21 	bl	8000a38 <__aeabi_d2iz>
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	f7f4 fc04 	bl	8000404 <__aeabi_i2d>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc04:	f7f4 fab0 	bl	8000168 <__aeabi_dsub>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	3530      	adds	r5, #48	@ 0x30
 800bc0e:	f806 5b01 	strb.w	r5, [r6], #1
 800bc12:	42a6      	cmp	r6, r4
 800bc14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc18:	f04f 0200 	mov.w	r2, #0
 800bc1c:	d124      	bne.n	800bc68 <_dtoa_r+0x660>
 800bc1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc22:	4b39      	ldr	r3, [pc, #228]	@ (800bd08 <_dtoa_r+0x700>)
 800bc24:	f7f4 faa2 	bl	800016c <__adddf3>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc30:	f7f4 fee2 	bl	80009f8 <__aeabi_dcmpgt>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d145      	bne.n	800bcc4 <_dtoa_r+0x6bc>
 800bc38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	4932      	ldr	r1, [pc, #200]	@ (800bd08 <_dtoa_r+0x700>)
 800bc40:	f7f4 fa92 	bl	8000168 <__aeabi_dsub>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc4c:	f7f4 feb6 	bl	80009bc <__aeabi_dcmplt>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	f43f aef6 	beq.w	800ba42 <_dtoa_r+0x43a>
 800bc56:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bc58:	1e73      	subs	r3, r6, #1
 800bc5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc60:	2b30      	cmp	r3, #48	@ 0x30
 800bc62:	d0f8      	beq.n	800bc56 <_dtoa_r+0x64e>
 800bc64:	9f04      	ldr	r7, [sp, #16]
 800bc66:	e73f      	b.n	800bae8 <_dtoa_r+0x4e0>
 800bc68:	4b29      	ldr	r3, [pc, #164]	@ (800bd10 <_dtoa_r+0x708>)
 800bc6a:	f7f4 fc35 	bl	80004d8 <__aeabi_dmul>
 800bc6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc72:	e7bc      	b.n	800bbee <_dtoa_r+0x5e6>
 800bc74:	d10c      	bne.n	800bc90 <_dtoa_r+0x688>
 800bc76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	4b25      	ldr	r3, [pc, #148]	@ (800bd14 <_dtoa_r+0x70c>)
 800bc7e:	f7f4 fc2b 	bl	80004d8 <__aeabi_dmul>
 800bc82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc86:	f7f4 fead 	bl	80009e4 <__aeabi_dcmpge>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	f000 815b 	beq.w	800bf46 <_dtoa_r+0x93e>
 800bc90:	2400      	movs	r4, #0
 800bc92:	4625      	mov	r5, r4
 800bc94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc96:	4656      	mov	r6, sl
 800bc98:	43db      	mvns	r3, r3
 800bc9a:	9304      	str	r3, [sp, #16]
 800bc9c:	2700      	movs	r7, #0
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4658      	mov	r0, fp
 800bca2:	f000 ff03 	bl	800caac <_Bfree>
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	d0dc      	beq.n	800bc64 <_dtoa_r+0x65c>
 800bcaa:	b12f      	cbz	r7, 800bcb8 <_dtoa_r+0x6b0>
 800bcac:	42af      	cmp	r7, r5
 800bcae:	d003      	beq.n	800bcb8 <_dtoa_r+0x6b0>
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	4658      	mov	r0, fp
 800bcb4:	f000 fefa 	bl	800caac <_Bfree>
 800bcb8:	4629      	mov	r1, r5
 800bcba:	4658      	mov	r0, fp
 800bcbc:	f000 fef6 	bl	800caac <_Bfree>
 800bcc0:	e7d0      	b.n	800bc64 <_dtoa_r+0x65c>
 800bcc2:	9704      	str	r7, [sp, #16]
 800bcc4:	4633      	mov	r3, r6
 800bcc6:	461e      	mov	r6, r3
 800bcc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bccc:	2a39      	cmp	r2, #57	@ 0x39
 800bcce:	d107      	bne.n	800bce0 <_dtoa_r+0x6d8>
 800bcd0:	459a      	cmp	sl, r3
 800bcd2:	d1f8      	bne.n	800bcc6 <_dtoa_r+0x6be>
 800bcd4:	9a04      	ldr	r2, [sp, #16]
 800bcd6:	3201      	adds	r2, #1
 800bcd8:	9204      	str	r2, [sp, #16]
 800bcda:	2230      	movs	r2, #48	@ 0x30
 800bcdc:	f88a 2000 	strb.w	r2, [sl]
 800bce0:	781a      	ldrb	r2, [r3, #0]
 800bce2:	3201      	adds	r2, #1
 800bce4:	701a      	strb	r2, [r3, #0]
 800bce6:	e7bd      	b.n	800bc64 <_dtoa_r+0x65c>
 800bce8:	2200      	movs	r2, #0
 800bcea:	4b09      	ldr	r3, [pc, #36]	@ (800bd10 <_dtoa_r+0x708>)
 800bcec:	f7f4 fbf4 	bl	80004d8 <__aeabi_dmul>
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	460d      	mov	r5, r1
 800bcf8:	f7f4 fe56 	bl	80009a8 <__aeabi_dcmpeq>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	f43f aebc 	beq.w	800ba7a <_dtoa_r+0x472>
 800bd02:	e6f1      	b.n	800bae8 <_dtoa_r+0x4e0>
 800bd04:	0800e548 	.word	0x0800e548
 800bd08:	3fe00000 	.word	0x3fe00000
 800bd0c:	3ff00000 	.word	0x3ff00000
 800bd10:	40240000 	.word	0x40240000
 800bd14:	40140000 	.word	0x40140000
 800bd18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd1a:	2a00      	cmp	r2, #0
 800bd1c:	f000 80db 	beq.w	800bed6 <_dtoa_r+0x8ce>
 800bd20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bd22:	2a01      	cmp	r2, #1
 800bd24:	f300 80bf 	bgt.w	800bea6 <_dtoa_r+0x89e>
 800bd28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd2a:	2a00      	cmp	r2, #0
 800bd2c:	f000 80b7 	beq.w	800be9e <_dtoa_r+0x896>
 800bd30:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bd34:	4646      	mov	r6, r8
 800bd36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	441a      	add	r2, r3
 800bd3e:	4658      	mov	r0, fp
 800bd40:	4498      	add	r8, r3
 800bd42:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd44:	f000 ffb0 	bl	800cca8 <__i2b>
 800bd48:	4605      	mov	r5, r0
 800bd4a:	b15e      	cbz	r6, 800bd64 <_dtoa_r+0x75c>
 800bd4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	dd08      	ble.n	800bd64 <_dtoa_r+0x75c>
 800bd52:	42b3      	cmp	r3, r6
 800bd54:	bfa8      	it	ge
 800bd56:	4633      	movge	r3, r6
 800bd58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd5a:	eba8 0803 	sub.w	r8, r8, r3
 800bd5e:	1af6      	subs	r6, r6, r3
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd66:	b1f3      	cbz	r3, 800bda6 <_dtoa_r+0x79e>
 800bd68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 80b7 	beq.w	800bede <_dtoa_r+0x8d6>
 800bd70:	b18c      	cbz	r4, 800bd96 <_dtoa_r+0x78e>
 800bd72:	4629      	mov	r1, r5
 800bd74:	4622      	mov	r2, r4
 800bd76:	4658      	mov	r0, fp
 800bd78:	f001 f854 	bl	800ce24 <__pow5mult>
 800bd7c:	464a      	mov	r2, r9
 800bd7e:	4601      	mov	r1, r0
 800bd80:	4605      	mov	r5, r0
 800bd82:	4658      	mov	r0, fp
 800bd84:	f000 ffa6 	bl	800ccd4 <__multiply>
 800bd88:	4649      	mov	r1, r9
 800bd8a:	9004      	str	r0, [sp, #16]
 800bd8c:	4658      	mov	r0, fp
 800bd8e:	f000 fe8d 	bl	800caac <_Bfree>
 800bd92:	9b04      	ldr	r3, [sp, #16]
 800bd94:	4699      	mov	r9, r3
 800bd96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd98:	1b1a      	subs	r2, r3, r4
 800bd9a:	d004      	beq.n	800bda6 <_dtoa_r+0x79e>
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	4658      	mov	r0, fp
 800bda0:	f001 f840 	bl	800ce24 <__pow5mult>
 800bda4:	4681      	mov	r9, r0
 800bda6:	2101      	movs	r1, #1
 800bda8:	4658      	mov	r0, fp
 800bdaa:	f000 ff7d 	bl	800cca8 <__i2b>
 800bdae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 81c9 	beq.w	800c14a <_dtoa_r+0xb42>
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4601      	mov	r1, r0
 800bdbc:	4658      	mov	r0, fp
 800bdbe:	f001 f831 	bl	800ce24 <__pow5mult>
 800bdc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	f300 808f 	bgt.w	800beea <_dtoa_r+0x8e2>
 800bdcc:	9b02      	ldr	r3, [sp, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f040 8087 	bne.w	800bee2 <_dtoa_r+0x8da>
 800bdd4:	9b03      	ldr	r3, [sp, #12]
 800bdd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f040 8083 	bne.w	800bee6 <_dtoa_r+0x8de>
 800bde0:	9b03      	ldr	r3, [sp, #12]
 800bde2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bde6:	0d1b      	lsrs	r3, r3, #20
 800bde8:	051b      	lsls	r3, r3, #20
 800bdea:	b12b      	cbz	r3, 800bdf8 <_dtoa_r+0x7f0>
 800bdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdee:	f108 0801 	add.w	r8, r8, #1
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f000 81aa 	beq.w	800c156 <_dtoa_r+0xb4e>
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be08:	6918      	ldr	r0, [r3, #16]
 800be0a:	f000 ff01 	bl	800cc10 <__hi0bits>
 800be0e:	f1c0 0020 	rsb	r0, r0, #32
 800be12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be14:	4418      	add	r0, r3
 800be16:	f010 001f 	ands.w	r0, r0, #31
 800be1a:	d071      	beq.n	800bf00 <_dtoa_r+0x8f8>
 800be1c:	f1c0 0320 	rsb	r3, r0, #32
 800be20:	2b04      	cmp	r3, #4
 800be22:	dd65      	ble.n	800bef0 <_dtoa_r+0x8e8>
 800be24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be26:	f1c0 001c 	rsb	r0, r0, #28
 800be2a:	4403      	add	r3, r0
 800be2c:	4480      	add	r8, r0
 800be2e:	4406      	add	r6, r0
 800be30:	9309      	str	r3, [sp, #36]	@ 0x24
 800be32:	f1b8 0f00 	cmp.w	r8, #0
 800be36:	dd05      	ble.n	800be44 <_dtoa_r+0x83c>
 800be38:	4649      	mov	r1, r9
 800be3a:	4642      	mov	r2, r8
 800be3c:	4658      	mov	r0, fp
 800be3e:	f001 f84b 	bl	800ced8 <__lshift>
 800be42:	4681      	mov	r9, r0
 800be44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be46:	2b00      	cmp	r3, #0
 800be48:	dd05      	ble.n	800be56 <_dtoa_r+0x84e>
 800be4a:	4621      	mov	r1, r4
 800be4c:	461a      	mov	r2, r3
 800be4e:	4658      	mov	r0, fp
 800be50:	f001 f842 	bl	800ced8 <__lshift>
 800be54:	4604      	mov	r4, r0
 800be56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d053      	beq.n	800bf04 <_dtoa_r+0x8fc>
 800be5c:	4621      	mov	r1, r4
 800be5e:	4648      	mov	r0, r9
 800be60:	f001 f8a6 	bl	800cfb0 <__mcmp>
 800be64:	2800      	cmp	r0, #0
 800be66:	da4d      	bge.n	800bf04 <_dtoa_r+0x8fc>
 800be68:	1e7b      	subs	r3, r7, #1
 800be6a:	4649      	mov	r1, r9
 800be6c:	9304      	str	r3, [sp, #16]
 800be6e:	220a      	movs	r2, #10
 800be70:	2300      	movs	r3, #0
 800be72:	4658      	mov	r0, fp
 800be74:	f000 fe3c 	bl	800caf0 <__multadd>
 800be78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be7a:	4681      	mov	r9, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 816c 	beq.w	800c15a <_dtoa_r+0xb52>
 800be82:	2300      	movs	r3, #0
 800be84:	4629      	mov	r1, r5
 800be86:	220a      	movs	r2, #10
 800be88:	4658      	mov	r0, fp
 800be8a:	f000 fe31 	bl	800caf0 <__multadd>
 800be8e:	9b08      	ldr	r3, [sp, #32]
 800be90:	4605      	mov	r5, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	dc61      	bgt.n	800bf5a <_dtoa_r+0x952>
 800be96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be98:	2b02      	cmp	r3, #2
 800be9a:	dc3b      	bgt.n	800bf14 <_dtoa_r+0x90c>
 800be9c:	e05d      	b.n	800bf5a <_dtoa_r+0x952>
 800be9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bea0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bea4:	e746      	b.n	800bd34 <_dtoa_r+0x72c>
 800bea6:	9b07      	ldr	r3, [sp, #28]
 800bea8:	1e5c      	subs	r4, r3, #1
 800beaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beac:	42a3      	cmp	r3, r4
 800beae:	bfbf      	itttt	lt
 800beb0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800beb2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800beb4:	1ae3      	sublt	r3, r4, r3
 800beb6:	18d2      	addlt	r2, r2, r3
 800beb8:	bfa8      	it	ge
 800beba:	1b1c      	subge	r4, r3, r4
 800bebc:	9b07      	ldr	r3, [sp, #28]
 800bebe:	bfbe      	ittt	lt
 800bec0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bec2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800bec4:	2400      	movlt	r4, #0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bfb5      	itete	lt
 800beca:	eba8 0603 	sublt.w	r6, r8, r3
 800bece:	4646      	movge	r6, r8
 800bed0:	2300      	movlt	r3, #0
 800bed2:	9b07      	ldrge	r3, [sp, #28]
 800bed4:	e730      	b.n	800bd38 <_dtoa_r+0x730>
 800bed6:	4646      	mov	r6, r8
 800bed8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800beda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bedc:	e735      	b.n	800bd4a <_dtoa_r+0x742>
 800bede:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bee0:	e75c      	b.n	800bd9c <_dtoa_r+0x794>
 800bee2:	2300      	movs	r3, #0
 800bee4:	e788      	b.n	800bdf8 <_dtoa_r+0x7f0>
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	e786      	b.n	800bdf8 <_dtoa_r+0x7f0>
 800beea:	2300      	movs	r3, #0
 800beec:	930a      	str	r3, [sp, #40]	@ 0x28
 800beee:	e788      	b.n	800be02 <_dtoa_r+0x7fa>
 800bef0:	d09f      	beq.n	800be32 <_dtoa_r+0x82a>
 800bef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bef4:	331c      	adds	r3, #28
 800bef6:	441a      	add	r2, r3
 800bef8:	4498      	add	r8, r3
 800befa:	441e      	add	r6, r3
 800befc:	9209      	str	r2, [sp, #36]	@ 0x24
 800befe:	e798      	b.n	800be32 <_dtoa_r+0x82a>
 800bf00:	4603      	mov	r3, r0
 800bf02:	e7f6      	b.n	800bef2 <_dtoa_r+0x8ea>
 800bf04:	9b07      	ldr	r3, [sp, #28]
 800bf06:	9704      	str	r7, [sp, #16]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	dc20      	bgt.n	800bf4e <_dtoa_r+0x946>
 800bf0c:	9308      	str	r3, [sp, #32]
 800bf0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	dd1e      	ble.n	800bf52 <_dtoa_r+0x94a>
 800bf14:	9b08      	ldr	r3, [sp, #32]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f47f aebc 	bne.w	800bc94 <_dtoa_r+0x68c>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	2205      	movs	r2, #5
 800bf20:	4658      	mov	r0, fp
 800bf22:	f000 fde5 	bl	800caf0 <__multadd>
 800bf26:	4601      	mov	r1, r0
 800bf28:	4604      	mov	r4, r0
 800bf2a:	4648      	mov	r0, r9
 800bf2c:	f001 f840 	bl	800cfb0 <__mcmp>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	f77f aeaf 	ble.w	800bc94 <_dtoa_r+0x68c>
 800bf36:	2331      	movs	r3, #49	@ 0x31
 800bf38:	4656      	mov	r6, sl
 800bf3a:	f806 3b01 	strb.w	r3, [r6], #1
 800bf3e:	9b04      	ldr	r3, [sp, #16]
 800bf40:	3301      	adds	r3, #1
 800bf42:	9304      	str	r3, [sp, #16]
 800bf44:	e6aa      	b.n	800bc9c <_dtoa_r+0x694>
 800bf46:	9c07      	ldr	r4, [sp, #28]
 800bf48:	9704      	str	r7, [sp, #16]
 800bf4a:	4625      	mov	r5, r4
 800bf4c:	e7f3      	b.n	800bf36 <_dtoa_r+0x92e>
 800bf4e:	9b07      	ldr	r3, [sp, #28]
 800bf50:	9308      	str	r3, [sp, #32]
 800bf52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 8104 	beq.w	800c162 <_dtoa_r+0xb5a>
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	dd05      	ble.n	800bf6a <_dtoa_r+0x962>
 800bf5e:	4629      	mov	r1, r5
 800bf60:	4632      	mov	r2, r6
 800bf62:	4658      	mov	r0, fp
 800bf64:	f000 ffb8 	bl	800ced8 <__lshift>
 800bf68:	4605      	mov	r5, r0
 800bf6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d05a      	beq.n	800c026 <_dtoa_r+0xa1e>
 800bf70:	4658      	mov	r0, fp
 800bf72:	6869      	ldr	r1, [r5, #4]
 800bf74:	f000 fd5a 	bl	800ca2c <_Balloc>
 800bf78:	4606      	mov	r6, r0
 800bf7a:	b928      	cbnz	r0, 800bf88 <_dtoa_r+0x980>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bf82:	4b83      	ldr	r3, [pc, #524]	@ (800c190 <_dtoa_r+0xb88>)
 800bf84:	f7ff bb54 	b.w	800b630 <_dtoa_r+0x28>
 800bf88:	692a      	ldr	r2, [r5, #16]
 800bf8a:	f105 010c 	add.w	r1, r5, #12
 800bf8e:	3202      	adds	r2, #2
 800bf90:	0092      	lsls	r2, r2, #2
 800bf92:	300c      	adds	r0, #12
 800bf94:	f7ff fa9b 	bl	800b4ce <memcpy>
 800bf98:	2201      	movs	r2, #1
 800bf9a:	4631      	mov	r1, r6
 800bf9c:	4658      	mov	r0, fp
 800bf9e:	f000 ff9b 	bl	800ced8 <__lshift>
 800bfa2:	462f      	mov	r7, r5
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	f10a 0301 	add.w	r3, sl, #1
 800bfaa:	9307      	str	r3, [sp, #28]
 800bfac:	9b08      	ldr	r3, [sp, #32]
 800bfae:	4453      	add	r3, sl
 800bfb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfb2:	9b02      	ldr	r3, [sp, #8]
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfba:	9b07      	ldr	r3, [sp, #28]
 800bfbc:	4621      	mov	r1, r4
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	4648      	mov	r0, r9
 800bfc2:	9302      	str	r3, [sp, #8]
 800bfc4:	f7ff fa98 	bl	800b4f8 <quorem>
 800bfc8:	4639      	mov	r1, r7
 800bfca:	9008      	str	r0, [sp, #32]
 800bfcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bfd0:	4648      	mov	r0, r9
 800bfd2:	f000 ffed 	bl	800cfb0 <__mcmp>
 800bfd6:	462a      	mov	r2, r5
 800bfd8:	9009      	str	r0, [sp, #36]	@ 0x24
 800bfda:	4621      	mov	r1, r4
 800bfdc:	4658      	mov	r0, fp
 800bfde:	f001 f803 	bl	800cfe8 <__mdiff>
 800bfe2:	68c2      	ldr	r2, [r0, #12]
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	bb02      	cbnz	r2, 800c02a <_dtoa_r+0xa22>
 800bfe8:	4601      	mov	r1, r0
 800bfea:	4648      	mov	r0, r9
 800bfec:	f000 ffe0 	bl	800cfb0 <__mcmp>
 800bff0:	4602      	mov	r2, r0
 800bff2:	4631      	mov	r1, r6
 800bff4:	4658      	mov	r0, fp
 800bff6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bff8:	f000 fd58 	bl	800caac <_Bfree>
 800bffc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bffe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c000:	9e07      	ldr	r6, [sp, #28]
 800c002:	ea43 0102 	orr.w	r1, r3, r2
 800c006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c008:	4319      	orrs	r1, r3
 800c00a:	d110      	bne.n	800c02e <_dtoa_r+0xa26>
 800c00c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c010:	d029      	beq.n	800c066 <_dtoa_r+0xa5e>
 800c012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c014:	2b00      	cmp	r3, #0
 800c016:	dd02      	ble.n	800c01e <_dtoa_r+0xa16>
 800c018:	9b08      	ldr	r3, [sp, #32]
 800c01a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c01e:	9b02      	ldr	r3, [sp, #8]
 800c020:	f883 8000 	strb.w	r8, [r3]
 800c024:	e63b      	b.n	800bc9e <_dtoa_r+0x696>
 800c026:	4628      	mov	r0, r5
 800c028:	e7bb      	b.n	800bfa2 <_dtoa_r+0x99a>
 800c02a:	2201      	movs	r2, #1
 800c02c:	e7e1      	b.n	800bff2 <_dtoa_r+0x9ea>
 800c02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c030:	2b00      	cmp	r3, #0
 800c032:	db04      	blt.n	800c03e <_dtoa_r+0xa36>
 800c034:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c036:	430b      	orrs	r3, r1
 800c038:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c03a:	430b      	orrs	r3, r1
 800c03c:	d120      	bne.n	800c080 <_dtoa_r+0xa78>
 800c03e:	2a00      	cmp	r2, #0
 800c040:	dded      	ble.n	800c01e <_dtoa_r+0xa16>
 800c042:	4649      	mov	r1, r9
 800c044:	2201      	movs	r2, #1
 800c046:	4658      	mov	r0, fp
 800c048:	f000 ff46 	bl	800ced8 <__lshift>
 800c04c:	4621      	mov	r1, r4
 800c04e:	4681      	mov	r9, r0
 800c050:	f000 ffae 	bl	800cfb0 <__mcmp>
 800c054:	2800      	cmp	r0, #0
 800c056:	dc03      	bgt.n	800c060 <_dtoa_r+0xa58>
 800c058:	d1e1      	bne.n	800c01e <_dtoa_r+0xa16>
 800c05a:	f018 0f01 	tst.w	r8, #1
 800c05e:	d0de      	beq.n	800c01e <_dtoa_r+0xa16>
 800c060:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c064:	d1d8      	bne.n	800c018 <_dtoa_r+0xa10>
 800c066:	2339      	movs	r3, #57	@ 0x39
 800c068:	9a02      	ldr	r2, [sp, #8]
 800c06a:	7013      	strb	r3, [r2, #0]
 800c06c:	4633      	mov	r3, r6
 800c06e:	461e      	mov	r6, r3
 800c070:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c074:	3b01      	subs	r3, #1
 800c076:	2a39      	cmp	r2, #57	@ 0x39
 800c078:	d052      	beq.n	800c120 <_dtoa_r+0xb18>
 800c07a:	3201      	adds	r2, #1
 800c07c:	701a      	strb	r2, [r3, #0]
 800c07e:	e60e      	b.n	800bc9e <_dtoa_r+0x696>
 800c080:	2a00      	cmp	r2, #0
 800c082:	dd07      	ble.n	800c094 <_dtoa_r+0xa8c>
 800c084:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c088:	d0ed      	beq.n	800c066 <_dtoa_r+0xa5e>
 800c08a:	9a02      	ldr	r2, [sp, #8]
 800c08c:	f108 0301 	add.w	r3, r8, #1
 800c090:	7013      	strb	r3, [r2, #0]
 800c092:	e604      	b.n	800bc9e <_dtoa_r+0x696>
 800c094:	9b07      	ldr	r3, [sp, #28]
 800c096:	9a07      	ldr	r2, [sp, #28]
 800c098:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d028      	beq.n	800c0f4 <_dtoa_r+0xaec>
 800c0a2:	4649      	mov	r1, r9
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	220a      	movs	r2, #10
 800c0a8:	4658      	mov	r0, fp
 800c0aa:	f000 fd21 	bl	800caf0 <__multadd>
 800c0ae:	42af      	cmp	r7, r5
 800c0b0:	4681      	mov	r9, r0
 800c0b2:	f04f 0300 	mov.w	r3, #0
 800c0b6:	f04f 020a 	mov.w	r2, #10
 800c0ba:	4639      	mov	r1, r7
 800c0bc:	4658      	mov	r0, fp
 800c0be:	d107      	bne.n	800c0d0 <_dtoa_r+0xac8>
 800c0c0:	f000 fd16 	bl	800caf0 <__multadd>
 800c0c4:	4607      	mov	r7, r0
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	9b07      	ldr	r3, [sp, #28]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	9307      	str	r3, [sp, #28]
 800c0ce:	e774      	b.n	800bfba <_dtoa_r+0x9b2>
 800c0d0:	f000 fd0e 	bl	800caf0 <__multadd>
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	4607      	mov	r7, r0
 800c0d8:	2300      	movs	r3, #0
 800c0da:	220a      	movs	r2, #10
 800c0dc:	4658      	mov	r0, fp
 800c0de:	f000 fd07 	bl	800caf0 <__multadd>
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	e7f0      	b.n	800c0c8 <_dtoa_r+0xac0>
 800c0e6:	9b08      	ldr	r3, [sp, #32]
 800c0e8:	2700      	movs	r7, #0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	bfcc      	ite	gt
 800c0ee:	461e      	movgt	r6, r3
 800c0f0:	2601      	movle	r6, #1
 800c0f2:	4456      	add	r6, sl
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	4658      	mov	r0, fp
 800c0fa:	f000 feed 	bl	800ced8 <__lshift>
 800c0fe:	4621      	mov	r1, r4
 800c100:	4681      	mov	r9, r0
 800c102:	f000 ff55 	bl	800cfb0 <__mcmp>
 800c106:	2800      	cmp	r0, #0
 800c108:	dcb0      	bgt.n	800c06c <_dtoa_r+0xa64>
 800c10a:	d102      	bne.n	800c112 <_dtoa_r+0xb0a>
 800c10c:	f018 0f01 	tst.w	r8, #1
 800c110:	d1ac      	bne.n	800c06c <_dtoa_r+0xa64>
 800c112:	4633      	mov	r3, r6
 800c114:	461e      	mov	r6, r3
 800c116:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c11a:	2a30      	cmp	r2, #48	@ 0x30
 800c11c:	d0fa      	beq.n	800c114 <_dtoa_r+0xb0c>
 800c11e:	e5be      	b.n	800bc9e <_dtoa_r+0x696>
 800c120:	459a      	cmp	sl, r3
 800c122:	d1a4      	bne.n	800c06e <_dtoa_r+0xa66>
 800c124:	9b04      	ldr	r3, [sp, #16]
 800c126:	3301      	adds	r3, #1
 800c128:	9304      	str	r3, [sp, #16]
 800c12a:	2331      	movs	r3, #49	@ 0x31
 800c12c:	f88a 3000 	strb.w	r3, [sl]
 800c130:	e5b5      	b.n	800bc9e <_dtoa_r+0x696>
 800c132:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c134:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c194 <_dtoa_r+0xb8c>
 800c138:	b11b      	cbz	r3, 800c142 <_dtoa_r+0xb3a>
 800c13a:	f10a 0308 	add.w	r3, sl, #8
 800c13e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	4650      	mov	r0, sl
 800c144:	b017      	add	sp, #92	@ 0x5c
 800c146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c14a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	f77f ae3d 	ble.w	800bdcc <_dtoa_r+0x7c4>
 800c152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c154:	930a      	str	r3, [sp, #40]	@ 0x28
 800c156:	2001      	movs	r0, #1
 800c158:	e65b      	b.n	800be12 <_dtoa_r+0x80a>
 800c15a:	9b08      	ldr	r3, [sp, #32]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f77f aed6 	ble.w	800bf0e <_dtoa_r+0x906>
 800c162:	4656      	mov	r6, sl
 800c164:	4621      	mov	r1, r4
 800c166:	4648      	mov	r0, r9
 800c168:	f7ff f9c6 	bl	800b4f8 <quorem>
 800c16c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c170:	9b08      	ldr	r3, [sp, #32]
 800c172:	f806 8b01 	strb.w	r8, [r6], #1
 800c176:	eba6 020a 	sub.w	r2, r6, sl
 800c17a:	4293      	cmp	r3, r2
 800c17c:	ddb3      	ble.n	800c0e6 <_dtoa_r+0xade>
 800c17e:	4649      	mov	r1, r9
 800c180:	2300      	movs	r3, #0
 800c182:	220a      	movs	r2, #10
 800c184:	4658      	mov	r0, fp
 800c186:	f000 fcb3 	bl	800caf0 <__multadd>
 800c18a:	4681      	mov	r9, r0
 800c18c:	e7ea      	b.n	800c164 <_dtoa_r+0xb5c>
 800c18e:	bf00      	nop
 800c190:	0800e449 	.word	0x0800e449
 800c194:	0800e3cd 	.word	0x0800e3cd

0800c198 <_free_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	4605      	mov	r5, r0
 800c19c:	2900      	cmp	r1, #0
 800c19e:	d040      	beq.n	800c222 <_free_r+0x8a>
 800c1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1a4:	1f0c      	subs	r4, r1, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bfb8      	it	lt
 800c1aa:	18e4      	addlt	r4, r4, r3
 800c1ac:	f000 fc32 	bl	800ca14 <__malloc_lock>
 800c1b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c224 <_free_r+0x8c>)
 800c1b2:	6813      	ldr	r3, [r2, #0]
 800c1b4:	b933      	cbnz	r3, 800c1c4 <_free_r+0x2c>
 800c1b6:	6063      	str	r3, [r4, #4]
 800c1b8:	6014      	str	r4, [r2, #0]
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c0:	f000 bc2e 	b.w	800ca20 <__malloc_unlock>
 800c1c4:	42a3      	cmp	r3, r4
 800c1c6:	d908      	bls.n	800c1da <_free_r+0x42>
 800c1c8:	6820      	ldr	r0, [r4, #0]
 800c1ca:	1821      	adds	r1, r4, r0
 800c1cc:	428b      	cmp	r3, r1
 800c1ce:	bf01      	itttt	eq
 800c1d0:	6819      	ldreq	r1, [r3, #0]
 800c1d2:	685b      	ldreq	r3, [r3, #4]
 800c1d4:	1809      	addeq	r1, r1, r0
 800c1d6:	6021      	streq	r1, [r4, #0]
 800c1d8:	e7ed      	b.n	800c1b6 <_free_r+0x1e>
 800c1da:	461a      	mov	r2, r3
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	b10b      	cbz	r3, 800c1e4 <_free_r+0x4c>
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	d9fa      	bls.n	800c1da <_free_r+0x42>
 800c1e4:	6811      	ldr	r1, [r2, #0]
 800c1e6:	1850      	adds	r0, r2, r1
 800c1e8:	42a0      	cmp	r0, r4
 800c1ea:	d10b      	bne.n	800c204 <_free_r+0x6c>
 800c1ec:	6820      	ldr	r0, [r4, #0]
 800c1ee:	4401      	add	r1, r0
 800c1f0:	1850      	adds	r0, r2, r1
 800c1f2:	4283      	cmp	r3, r0
 800c1f4:	6011      	str	r1, [r2, #0]
 800c1f6:	d1e0      	bne.n	800c1ba <_free_r+0x22>
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	4408      	add	r0, r1
 800c1fe:	6010      	str	r0, [r2, #0]
 800c200:	6053      	str	r3, [r2, #4]
 800c202:	e7da      	b.n	800c1ba <_free_r+0x22>
 800c204:	d902      	bls.n	800c20c <_free_r+0x74>
 800c206:	230c      	movs	r3, #12
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	e7d6      	b.n	800c1ba <_free_r+0x22>
 800c20c:	6820      	ldr	r0, [r4, #0]
 800c20e:	1821      	adds	r1, r4, r0
 800c210:	428b      	cmp	r3, r1
 800c212:	bf01      	itttt	eq
 800c214:	6819      	ldreq	r1, [r3, #0]
 800c216:	685b      	ldreq	r3, [r3, #4]
 800c218:	1809      	addeq	r1, r1, r0
 800c21a:	6021      	streq	r1, [r4, #0]
 800c21c:	6063      	str	r3, [r4, #4]
 800c21e:	6054      	str	r4, [r2, #4]
 800c220:	e7cb      	b.n	800c1ba <_free_r+0x22>
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	20000894 	.word	0x20000894

0800c228 <rshift>:
 800c228:	6903      	ldr	r3, [r0, #16]
 800c22a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c22e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c232:	f100 0414 	add.w	r4, r0, #20
 800c236:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c23a:	dd46      	ble.n	800c2ca <rshift+0xa2>
 800c23c:	f011 011f 	ands.w	r1, r1, #31
 800c240:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c244:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c248:	d10c      	bne.n	800c264 <rshift+0x3c>
 800c24a:	4629      	mov	r1, r5
 800c24c:	f100 0710 	add.w	r7, r0, #16
 800c250:	42b1      	cmp	r1, r6
 800c252:	d335      	bcc.n	800c2c0 <rshift+0x98>
 800c254:	1a9b      	subs	r3, r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	1eea      	subs	r2, r5, #3
 800c25a:	4296      	cmp	r6, r2
 800c25c:	bf38      	it	cc
 800c25e:	2300      	movcc	r3, #0
 800c260:	4423      	add	r3, r4
 800c262:	e015      	b.n	800c290 <rshift+0x68>
 800c264:	46a1      	mov	r9, r4
 800c266:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c26a:	f1c1 0820 	rsb	r8, r1, #32
 800c26e:	40cf      	lsrs	r7, r1
 800c270:	f105 0e04 	add.w	lr, r5, #4
 800c274:	4576      	cmp	r6, lr
 800c276:	46f4      	mov	ip, lr
 800c278:	d816      	bhi.n	800c2a8 <rshift+0x80>
 800c27a:	1a9a      	subs	r2, r3, r2
 800c27c:	0092      	lsls	r2, r2, #2
 800c27e:	3a04      	subs	r2, #4
 800c280:	3501      	adds	r5, #1
 800c282:	42ae      	cmp	r6, r5
 800c284:	bf38      	it	cc
 800c286:	2200      	movcc	r2, #0
 800c288:	18a3      	adds	r3, r4, r2
 800c28a:	50a7      	str	r7, [r4, r2]
 800c28c:	b107      	cbz	r7, 800c290 <rshift+0x68>
 800c28e:	3304      	adds	r3, #4
 800c290:	42a3      	cmp	r3, r4
 800c292:	eba3 0204 	sub.w	r2, r3, r4
 800c296:	bf08      	it	eq
 800c298:	2300      	moveq	r3, #0
 800c29a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c29e:	6102      	str	r2, [r0, #16]
 800c2a0:	bf08      	it	eq
 800c2a2:	6143      	streq	r3, [r0, #20]
 800c2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2a8:	f8dc c000 	ldr.w	ip, [ip]
 800c2ac:	fa0c fc08 	lsl.w	ip, ip, r8
 800c2b0:	ea4c 0707 	orr.w	r7, ip, r7
 800c2b4:	f849 7b04 	str.w	r7, [r9], #4
 800c2b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2bc:	40cf      	lsrs	r7, r1
 800c2be:	e7d9      	b.n	800c274 <rshift+0x4c>
 800c2c0:	f851 cb04 	ldr.w	ip, [r1], #4
 800c2c4:	f847 cf04 	str.w	ip, [r7, #4]!
 800c2c8:	e7c2      	b.n	800c250 <rshift+0x28>
 800c2ca:	4623      	mov	r3, r4
 800c2cc:	e7e0      	b.n	800c290 <rshift+0x68>

0800c2ce <__hexdig_fun>:
 800c2ce:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c2d2:	2b09      	cmp	r3, #9
 800c2d4:	d802      	bhi.n	800c2dc <__hexdig_fun+0xe>
 800c2d6:	3820      	subs	r0, #32
 800c2d8:	b2c0      	uxtb	r0, r0
 800c2da:	4770      	bx	lr
 800c2dc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c2e0:	2b05      	cmp	r3, #5
 800c2e2:	d801      	bhi.n	800c2e8 <__hexdig_fun+0x1a>
 800c2e4:	3847      	subs	r0, #71	@ 0x47
 800c2e6:	e7f7      	b.n	800c2d8 <__hexdig_fun+0xa>
 800c2e8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c2ec:	2b05      	cmp	r3, #5
 800c2ee:	d801      	bhi.n	800c2f4 <__hexdig_fun+0x26>
 800c2f0:	3827      	subs	r0, #39	@ 0x27
 800c2f2:	e7f1      	b.n	800c2d8 <__hexdig_fun+0xa>
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	4770      	bx	lr

0800c2f8 <__gethex>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	468a      	mov	sl, r1
 800c2fe:	4690      	mov	r8, r2
 800c300:	b085      	sub	sp, #20
 800c302:	9302      	str	r3, [sp, #8]
 800c304:	680b      	ldr	r3, [r1, #0]
 800c306:	9001      	str	r0, [sp, #4]
 800c308:	1c9c      	adds	r4, r3, #2
 800c30a:	46a1      	mov	r9, r4
 800c30c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c310:	2830      	cmp	r0, #48	@ 0x30
 800c312:	d0fa      	beq.n	800c30a <__gethex+0x12>
 800c314:	eba9 0303 	sub.w	r3, r9, r3
 800c318:	f1a3 0b02 	sub.w	fp, r3, #2
 800c31c:	f7ff ffd7 	bl	800c2ce <__hexdig_fun>
 800c320:	4605      	mov	r5, r0
 800c322:	2800      	cmp	r0, #0
 800c324:	d168      	bne.n	800c3f8 <__gethex+0x100>
 800c326:	2201      	movs	r2, #1
 800c328:	4648      	mov	r0, r9
 800c32a:	499f      	ldr	r1, [pc, #636]	@ (800c5a8 <__gethex+0x2b0>)
 800c32c:	f7fe fff9 	bl	800b322 <strncmp>
 800c330:	4607      	mov	r7, r0
 800c332:	2800      	cmp	r0, #0
 800c334:	d167      	bne.n	800c406 <__gethex+0x10e>
 800c336:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c33a:	4626      	mov	r6, r4
 800c33c:	f7ff ffc7 	bl	800c2ce <__hexdig_fun>
 800c340:	2800      	cmp	r0, #0
 800c342:	d062      	beq.n	800c40a <__gethex+0x112>
 800c344:	4623      	mov	r3, r4
 800c346:	7818      	ldrb	r0, [r3, #0]
 800c348:	4699      	mov	r9, r3
 800c34a:	2830      	cmp	r0, #48	@ 0x30
 800c34c:	f103 0301 	add.w	r3, r3, #1
 800c350:	d0f9      	beq.n	800c346 <__gethex+0x4e>
 800c352:	f7ff ffbc 	bl	800c2ce <__hexdig_fun>
 800c356:	fab0 f580 	clz	r5, r0
 800c35a:	f04f 0b01 	mov.w	fp, #1
 800c35e:	096d      	lsrs	r5, r5, #5
 800c360:	464a      	mov	r2, r9
 800c362:	4616      	mov	r6, r2
 800c364:	7830      	ldrb	r0, [r6, #0]
 800c366:	3201      	adds	r2, #1
 800c368:	f7ff ffb1 	bl	800c2ce <__hexdig_fun>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d1f8      	bne.n	800c362 <__gethex+0x6a>
 800c370:	2201      	movs	r2, #1
 800c372:	4630      	mov	r0, r6
 800c374:	498c      	ldr	r1, [pc, #560]	@ (800c5a8 <__gethex+0x2b0>)
 800c376:	f7fe ffd4 	bl	800b322 <strncmp>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	d13f      	bne.n	800c3fe <__gethex+0x106>
 800c37e:	b944      	cbnz	r4, 800c392 <__gethex+0x9a>
 800c380:	1c74      	adds	r4, r6, #1
 800c382:	4622      	mov	r2, r4
 800c384:	4616      	mov	r6, r2
 800c386:	7830      	ldrb	r0, [r6, #0]
 800c388:	3201      	adds	r2, #1
 800c38a:	f7ff ffa0 	bl	800c2ce <__hexdig_fun>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d1f8      	bne.n	800c384 <__gethex+0x8c>
 800c392:	1ba4      	subs	r4, r4, r6
 800c394:	00a7      	lsls	r7, r4, #2
 800c396:	7833      	ldrb	r3, [r6, #0]
 800c398:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c39c:	2b50      	cmp	r3, #80	@ 0x50
 800c39e:	d13e      	bne.n	800c41e <__gethex+0x126>
 800c3a0:	7873      	ldrb	r3, [r6, #1]
 800c3a2:	2b2b      	cmp	r3, #43	@ 0x2b
 800c3a4:	d033      	beq.n	800c40e <__gethex+0x116>
 800c3a6:	2b2d      	cmp	r3, #45	@ 0x2d
 800c3a8:	d034      	beq.n	800c414 <__gethex+0x11c>
 800c3aa:	2400      	movs	r4, #0
 800c3ac:	1c71      	adds	r1, r6, #1
 800c3ae:	7808      	ldrb	r0, [r1, #0]
 800c3b0:	f7ff ff8d 	bl	800c2ce <__hexdig_fun>
 800c3b4:	1e43      	subs	r3, r0, #1
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2b18      	cmp	r3, #24
 800c3ba:	d830      	bhi.n	800c41e <__gethex+0x126>
 800c3bc:	f1a0 0210 	sub.w	r2, r0, #16
 800c3c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c3c4:	f7ff ff83 	bl	800c2ce <__hexdig_fun>
 800c3c8:	f100 3cff 	add.w	ip, r0, #4294967295
 800c3cc:	fa5f fc8c 	uxtb.w	ip, ip
 800c3d0:	f1bc 0f18 	cmp.w	ip, #24
 800c3d4:	f04f 030a 	mov.w	r3, #10
 800c3d8:	d91e      	bls.n	800c418 <__gethex+0x120>
 800c3da:	b104      	cbz	r4, 800c3de <__gethex+0xe6>
 800c3dc:	4252      	negs	r2, r2
 800c3de:	4417      	add	r7, r2
 800c3e0:	f8ca 1000 	str.w	r1, [sl]
 800c3e4:	b1ed      	cbz	r5, 800c422 <__gethex+0x12a>
 800c3e6:	f1bb 0f00 	cmp.w	fp, #0
 800c3ea:	bf0c      	ite	eq
 800c3ec:	2506      	moveq	r5, #6
 800c3ee:	2500      	movne	r5, #0
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	b005      	add	sp, #20
 800c3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f8:	2500      	movs	r5, #0
 800c3fa:	462c      	mov	r4, r5
 800c3fc:	e7b0      	b.n	800c360 <__gethex+0x68>
 800c3fe:	2c00      	cmp	r4, #0
 800c400:	d1c7      	bne.n	800c392 <__gethex+0x9a>
 800c402:	4627      	mov	r7, r4
 800c404:	e7c7      	b.n	800c396 <__gethex+0x9e>
 800c406:	464e      	mov	r6, r9
 800c408:	462f      	mov	r7, r5
 800c40a:	2501      	movs	r5, #1
 800c40c:	e7c3      	b.n	800c396 <__gethex+0x9e>
 800c40e:	2400      	movs	r4, #0
 800c410:	1cb1      	adds	r1, r6, #2
 800c412:	e7cc      	b.n	800c3ae <__gethex+0xb6>
 800c414:	2401      	movs	r4, #1
 800c416:	e7fb      	b.n	800c410 <__gethex+0x118>
 800c418:	fb03 0002 	mla	r0, r3, r2, r0
 800c41c:	e7ce      	b.n	800c3bc <__gethex+0xc4>
 800c41e:	4631      	mov	r1, r6
 800c420:	e7de      	b.n	800c3e0 <__gethex+0xe8>
 800c422:	4629      	mov	r1, r5
 800c424:	eba6 0309 	sub.w	r3, r6, r9
 800c428:	3b01      	subs	r3, #1
 800c42a:	2b07      	cmp	r3, #7
 800c42c:	dc0a      	bgt.n	800c444 <__gethex+0x14c>
 800c42e:	9801      	ldr	r0, [sp, #4]
 800c430:	f000 fafc 	bl	800ca2c <_Balloc>
 800c434:	4604      	mov	r4, r0
 800c436:	b940      	cbnz	r0, 800c44a <__gethex+0x152>
 800c438:	4602      	mov	r2, r0
 800c43a:	21e4      	movs	r1, #228	@ 0xe4
 800c43c:	4b5b      	ldr	r3, [pc, #364]	@ (800c5ac <__gethex+0x2b4>)
 800c43e:	485c      	ldr	r0, [pc, #368]	@ (800c5b0 <__gethex+0x2b8>)
 800c440:	f001 f9d0 	bl	800d7e4 <__assert_func>
 800c444:	3101      	adds	r1, #1
 800c446:	105b      	asrs	r3, r3, #1
 800c448:	e7ef      	b.n	800c42a <__gethex+0x132>
 800c44a:	2300      	movs	r3, #0
 800c44c:	f100 0a14 	add.w	sl, r0, #20
 800c450:	4655      	mov	r5, sl
 800c452:	469b      	mov	fp, r3
 800c454:	45b1      	cmp	r9, r6
 800c456:	d337      	bcc.n	800c4c8 <__gethex+0x1d0>
 800c458:	f845 bb04 	str.w	fp, [r5], #4
 800c45c:	eba5 050a 	sub.w	r5, r5, sl
 800c460:	10ad      	asrs	r5, r5, #2
 800c462:	6125      	str	r5, [r4, #16]
 800c464:	4658      	mov	r0, fp
 800c466:	f000 fbd3 	bl	800cc10 <__hi0bits>
 800c46a:	016d      	lsls	r5, r5, #5
 800c46c:	f8d8 6000 	ldr.w	r6, [r8]
 800c470:	1a2d      	subs	r5, r5, r0
 800c472:	42b5      	cmp	r5, r6
 800c474:	dd54      	ble.n	800c520 <__gethex+0x228>
 800c476:	1bad      	subs	r5, r5, r6
 800c478:	4629      	mov	r1, r5
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 ff5b 	bl	800d336 <__any_on>
 800c480:	4681      	mov	r9, r0
 800c482:	b178      	cbz	r0, 800c4a4 <__gethex+0x1ac>
 800c484:	f04f 0901 	mov.w	r9, #1
 800c488:	1e6b      	subs	r3, r5, #1
 800c48a:	1159      	asrs	r1, r3, #5
 800c48c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c490:	f003 021f 	and.w	r2, r3, #31
 800c494:	fa09 f202 	lsl.w	r2, r9, r2
 800c498:	420a      	tst	r2, r1
 800c49a:	d003      	beq.n	800c4a4 <__gethex+0x1ac>
 800c49c:	454b      	cmp	r3, r9
 800c49e:	dc36      	bgt.n	800c50e <__gethex+0x216>
 800c4a0:	f04f 0902 	mov.w	r9, #2
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f7ff febe 	bl	800c228 <rshift>
 800c4ac:	442f      	add	r7, r5
 800c4ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4b2:	42bb      	cmp	r3, r7
 800c4b4:	da42      	bge.n	800c53c <__gethex+0x244>
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	9801      	ldr	r0, [sp, #4]
 800c4ba:	f000 faf7 	bl	800caac <_Bfree>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4c2:	25a3      	movs	r5, #163	@ 0xa3
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	e793      	b.n	800c3f0 <__gethex+0xf8>
 800c4c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c4cc:	2a2e      	cmp	r2, #46	@ 0x2e
 800c4ce:	d012      	beq.n	800c4f6 <__gethex+0x1fe>
 800c4d0:	2b20      	cmp	r3, #32
 800c4d2:	d104      	bne.n	800c4de <__gethex+0x1e6>
 800c4d4:	f845 bb04 	str.w	fp, [r5], #4
 800c4d8:	f04f 0b00 	mov.w	fp, #0
 800c4dc:	465b      	mov	r3, fp
 800c4de:	7830      	ldrb	r0, [r6, #0]
 800c4e0:	9303      	str	r3, [sp, #12]
 800c4e2:	f7ff fef4 	bl	800c2ce <__hexdig_fun>
 800c4e6:	9b03      	ldr	r3, [sp, #12]
 800c4e8:	f000 000f 	and.w	r0, r0, #15
 800c4ec:	4098      	lsls	r0, r3
 800c4ee:	ea4b 0b00 	orr.w	fp, fp, r0
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	e7ae      	b.n	800c454 <__gethex+0x15c>
 800c4f6:	45b1      	cmp	r9, r6
 800c4f8:	d8ea      	bhi.n	800c4d0 <__gethex+0x1d8>
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	492a      	ldr	r1, [pc, #168]	@ (800c5a8 <__gethex+0x2b0>)
 800c500:	9303      	str	r3, [sp, #12]
 800c502:	f7fe ff0e 	bl	800b322 <strncmp>
 800c506:	9b03      	ldr	r3, [sp, #12]
 800c508:	2800      	cmp	r0, #0
 800c50a:	d1e1      	bne.n	800c4d0 <__gethex+0x1d8>
 800c50c:	e7a2      	b.n	800c454 <__gethex+0x15c>
 800c50e:	4620      	mov	r0, r4
 800c510:	1ea9      	subs	r1, r5, #2
 800c512:	f000 ff10 	bl	800d336 <__any_on>
 800c516:	2800      	cmp	r0, #0
 800c518:	d0c2      	beq.n	800c4a0 <__gethex+0x1a8>
 800c51a:	f04f 0903 	mov.w	r9, #3
 800c51e:	e7c1      	b.n	800c4a4 <__gethex+0x1ac>
 800c520:	da09      	bge.n	800c536 <__gethex+0x23e>
 800c522:	1b75      	subs	r5, r6, r5
 800c524:	4621      	mov	r1, r4
 800c526:	462a      	mov	r2, r5
 800c528:	9801      	ldr	r0, [sp, #4]
 800c52a:	f000 fcd5 	bl	800ced8 <__lshift>
 800c52e:	4604      	mov	r4, r0
 800c530:	1b7f      	subs	r7, r7, r5
 800c532:	f100 0a14 	add.w	sl, r0, #20
 800c536:	f04f 0900 	mov.w	r9, #0
 800c53a:	e7b8      	b.n	800c4ae <__gethex+0x1b6>
 800c53c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c540:	42bd      	cmp	r5, r7
 800c542:	dd6f      	ble.n	800c624 <__gethex+0x32c>
 800c544:	1bed      	subs	r5, r5, r7
 800c546:	42ae      	cmp	r6, r5
 800c548:	dc34      	bgt.n	800c5b4 <__gethex+0x2bc>
 800c54a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c54e:	2b02      	cmp	r3, #2
 800c550:	d022      	beq.n	800c598 <__gethex+0x2a0>
 800c552:	2b03      	cmp	r3, #3
 800c554:	d024      	beq.n	800c5a0 <__gethex+0x2a8>
 800c556:	2b01      	cmp	r3, #1
 800c558:	d115      	bne.n	800c586 <__gethex+0x28e>
 800c55a:	42ae      	cmp	r6, r5
 800c55c:	d113      	bne.n	800c586 <__gethex+0x28e>
 800c55e:	2e01      	cmp	r6, #1
 800c560:	d10b      	bne.n	800c57a <__gethex+0x282>
 800c562:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c566:	9a02      	ldr	r2, [sp, #8]
 800c568:	2562      	movs	r5, #98	@ 0x62
 800c56a:	6013      	str	r3, [r2, #0]
 800c56c:	2301      	movs	r3, #1
 800c56e:	6123      	str	r3, [r4, #16]
 800c570:	f8ca 3000 	str.w	r3, [sl]
 800c574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c576:	601c      	str	r4, [r3, #0]
 800c578:	e73a      	b.n	800c3f0 <__gethex+0xf8>
 800c57a:	4620      	mov	r0, r4
 800c57c:	1e71      	subs	r1, r6, #1
 800c57e:	f000 feda 	bl	800d336 <__any_on>
 800c582:	2800      	cmp	r0, #0
 800c584:	d1ed      	bne.n	800c562 <__gethex+0x26a>
 800c586:	4621      	mov	r1, r4
 800c588:	9801      	ldr	r0, [sp, #4]
 800c58a:	f000 fa8f 	bl	800caac <_Bfree>
 800c58e:	2300      	movs	r3, #0
 800c590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c592:	2550      	movs	r5, #80	@ 0x50
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	e72b      	b.n	800c3f0 <__gethex+0xf8>
 800c598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1f3      	bne.n	800c586 <__gethex+0x28e>
 800c59e:	e7e0      	b.n	800c562 <__gethex+0x26a>
 800c5a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1dd      	bne.n	800c562 <__gethex+0x26a>
 800c5a6:	e7ee      	b.n	800c586 <__gethex+0x28e>
 800c5a8:	0800e23a 	.word	0x0800e23a
 800c5ac:	0800e449 	.word	0x0800e449
 800c5b0:	0800e45a 	.word	0x0800e45a
 800c5b4:	1e6f      	subs	r7, r5, #1
 800c5b6:	f1b9 0f00 	cmp.w	r9, #0
 800c5ba:	d130      	bne.n	800c61e <__gethex+0x326>
 800c5bc:	b127      	cbz	r7, 800c5c8 <__gethex+0x2d0>
 800c5be:	4639      	mov	r1, r7
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 feb8 	bl	800d336 <__any_on>
 800c5c6:	4681      	mov	r9, r0
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	1b76      	subs	r6, r6, r5
 800c5ce:	2502      	movs	r5, #2
 800c5d0:	117a      	asrs	r2, r7, #5
 800c5d2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c5d6:	f007 071f 	and.w	r7, r7, #31
 800c5da:	40bb      	lsls	r3, r7
 800c5dc:	4213      	tst	r3, r2
 800c5de:	4620      	mov	r0, r4
 800c5e0:	bf18      	it	ne
 800c5e2:	f049 0902 	orrne.w	r9, r9, #2
 800c5e6:	f7ff fe1f 	bl	800c228 <rshift>
 800c5ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c5ee:	f1b9 0f00 	cmp.w	r9, #0
 800c5f2:	d047      	beq.n	800c684 <__gethex+0x38c>
 800c5f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d015      	beq.n	800c628 <__gethex+0x330>
 800c5fc:	2b03      	cmp	r3, #3
 800c5fe:	d017      	beq.n	800c630 <__gethex+0x338>
 800c600:	2b01      	cmp	r3, #1
 800c602:	d109      	bne.n	800c618 <__gethex+0x320>
 800c604:	f019 0f02 	tst.w	r9, #2
 800c608:	d006      	beq.n	800c618 <__gethex+0x320>
 800c60a:	f8da 3000 	ldr.w	r3, [sl]
 800c60e:	ea49 0903 	orr.w	r9, r9, r3
 800c612:	f019 0f01 	tst.w	r9, #1
 800c616:	d10e      	bne.n	800c636 <__gethex+0x33e>
 800c618:	f045 0510 	orr.w	r5, r5, #16
 800c61c:	e032      	b.n	800c684 <__gethex+0x38c>
 800c61e:	f04f 0901 	mov.w	r9, #1
 800c622:	e7d1      	b.n	800c5c8 <__gethex+0x2d0>
 800c624:	2501      	movs	r5, #1
 800c626:	e7e2      	b.n	800c5ee <__gethex+0x2f6>
 800c628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c62a:	f1c3 0301 	rsb	r3, r3, #1
 800c62e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0f0      	beq.n	800c618 <__gethex+0x320>
 800c636:	f04f 0c00 	mov.w	ip, #0
 800c63a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c63e:	f104 0314 	add.w	r3, r4, #20
 800c642:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c646:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c64a:	4618      	mov	r0, r3
 800c64c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c650:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c654:	d01b      	beq.n	800c68e <__gethex+0x396>
 800c656:	3201      	adds	r2, #1
 800c658:	6002      	str	r2, [r0, #0]
 800c65a:	2d02      	cmp	r5, #2
 800c65c:	f104 0314 	add.w	r3, r4, #20
 800c660:	d13c      	bne.n	800c6dc <__gethex+0x3e4>
 800c662:	f8d8 2000 	ldr.w	r2, [r8]
 800c666:	3a01      	subs	r2, #1
 800c668:	42b2      	cmp	r2, r6
 800c66a:	d109      	bne.n	800c680 <__gethex+0x388>
 800c66c:	2201      	movs	r2, #1
 800c66e:	1171      	asrs	r1, r6, #5
 800c670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c674:	f006 061f 	and.w	r6, r6, #31
 800c678:	fa02 f606 	lsl.w	r6, r2, r6
 800c67c:	421e      	tst	r6, r3
 800c67e:	d13a      	bne.n	800c6f6 <__gethex+0x3fe>
 800c680:	f045 0520 	orr.w	r5, r5, #32
 800c684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c686:	601c      	str	r4, [r3, #0]
 800c688:	9b02      	ldr	r3, [sp, #8]
 800c68a:	601f      	str	r7, [r3, #0]
 800c68c:	e6b0      	b.n	800c3f0 <__gethex+0xf8>
 800c68e:	4299      	cmp	r1, r3
 800c690:	f843 cc04 	str.w	ip, [r3, #-4]
 800c694:	d8d9      	bhi.n	800c64a <__gethex+0x352>
 800c696:	68a3      	ldr	r3, [r4, #8]
 800c698:	459b      	cmp	fp, r3
 800c69a:	db17      	blt.n	800c6cc <__gethex+0x3d4>
 800c69c:	6861      	ldr	r1, [r4, #4]
 800c69e:	9801      	ldr	r0, [sp, #4]
 800c6a0:	3101      	adds	r1, #1
 800c6a2:	f000 f9c3 	bl	800ca2c <_Balloc>
 800c6a6:	4681      	mov	r9, r0
 800c6a8:	b918      	cbnz	r0, 800c6b2 <__gethex+0x3ba>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	2184      	movs	r1, #132	@ 0x84
 800c6ae:	4b19      	ldr	r3, [pc, #100]	@ (800c714 <__gethex+0x41c>)
 800c6b0:	e6c5      	b.n	800c43e <__gethex+0x146>
 800c6b2:	6922      	ldr	r2, [r4, #16]
 800c6b4:	f104 010c 	add.w	r1, r4, #12
 800c6b8:	3202      	adds	r2, #2
 800c6ba:	0092      	lsls	r2, r2, #2
 800c6bc:	300c      	adds	r0, #12
 800c6be:	f7fe ff06 	bl	800b4ce <memcpy>
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	9801      	ldr	r0, [sp, #4]
 800c6c6:	f000 f9f1 	bl	800caac <_Bfree>
 800c6ca:	464c      	mov	r4, r9
 800c6cc:	6923      	ldr	r3, [r4, #16]
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	6122      	str	r2, [r4, #16]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6d8:	615a      	str	r2, [r3, #20]
 800c6da:	e7be      	b.n	800c65a <__gethex+0x362>
 800c6dc:	6922      	ldr	r2, [r4, #16]
 800c6de:	455a      	cmp	r2, fp
 800c6e0:	dd0b      	ble.n	800c6fa <__gethex+0x402>
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f7ff fd9f 	bl	800c228 <rshift>
 800c6ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6ee:	3701      	adds	r7, #1
 800c6f0:	42bb      	cmp	r3, r7
 800c6f2:	f6ff aee0 	blt.w	800c4b6 <__gethex+0x1be>
 800c6f6:	2501      	movs	r5, #1
 800c6f8:	e7c2      	b.n	800c680 <__gethex+0x388>
 800c6fa:	f016 061f 	ands.w	r6, r6, #31
 800c6fe:	d0fa      	beq.n	800c6f6 <__gethex+0x3fe>
 800c700:	4453      	add	r3, sl
 800c702:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c706:	f000 fa83 	bl	800cc10 <__hi0bits>
 800c70a:	f1c6 0620 	rsb	r6, r6, #32
 800c70e:	42b0      	cmp	r0, r6
 800c710:	dbe7      	blt.n	800c6e2 <__gethex+0x3ea>
 800c712:	e7f0      	b.n	800c6f6 <__gethex+0x3fe>
 800c714:	0800e449 	.word	0x0800e449

0800c718 <L_shift>:
 800c718:	f1c2 0208 	rsb	r2, r2, #8
 800c71c:	0092      	lsls	r2, r2, #2
 800c71e:	b570      	push	{r4, r5, r6, lr}
 800c720:	f1c2 0620 	rsb	r6, r2, #32
 800c724:	6843      	ldr	r3, [r0, #4]
 800c726:	6804      	ldr	r4, [r0, #0]
 800c728:	fa03 f506 	lsl.w	r5, r3, r6
 800c72c:	432c      	orrs	r4, r5
 800c72e:	40d3      	lsrs	r3, r2
 800c730:	6004      	str	r4, [r0, #0]
 800c732:	f840 3f04 	str.w	r3, [r0, #4]!
 800c736:	4288      	cmp	r0, r1
 800c738:	d3f4      	bcc.n	800c724 <L_shift+0xc>
 800c73a:	bd70      	pop	{r4, r5, r6, pc}

0800c73c <__match>:
 800c73c:	b530      	push	{r4, r5, lr}
 800c73e:	6803      	ldr	r3, [r0, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c746:	b914      	cbnz	r4, 800c74e <__match+0x12>
 800c748:	6003      	str	r3, [r0, #0]
 800c74a:	2001      	movs	r0, #1
 800c74c:	bd30      	pop	{r4, r5, pc}
 800c74e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c752:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c756:	2d19      	cmp	r5, #25
 800c758:	bf98      	it	ls
 800c75a:	3220      	addls	r2, #32
 800c75c:	42a2      	cmp	r2, r4
 800c75e:	d0f0      	beq.n	800c742 <__match+0x6>
 800c760:	2000      	movs	r0, #0
 800c762:	e7f3      	b.n	800c74c <__match+0x10>

0800c764 <__hexnan>:
 800c764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c768:	2500      	movs	r5, #0
 800c76a:	680b      	ldr	r3, [r1, #0]
 800c76c:	4682      	mov	sl, r0
 800c76e:	115e      	asrs	r6, r3, #5
 800c770:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c774:	f013 031f 	ands.w	r3, r3, #31
 800c778:	bf18      	it	ne
 800c77a:	3604      	addne	r6, #4
 800c77c:	1f37      	subs	r7, r6, #4
 800c77e:	4690      	mov	r8, r2
 800c780:	46b9      	mov	r9, r7
 800c782:	463c      	mov	r4, r7
 800c784:	46ab      	mov	fp, r5
 800c786:	b087      	sub	sp, #28
 800c788:	6801      	ldr	r1, [r0, #0]
 800c78a:	9301      	str	r3, [sp, #4]
 800c78c:	f846 5c04 	str.w	r5, [r6, #-4]
 800c790:	9502      	str	r5, [sp, #8]
 800c792:	784a      	ldrb	r2, [r1, #1]
 800c794:	1c4b      	adds	r3, r1, #1
 800c796:	9303      	str	r3, [sp, #12]
 800c798:	b342      	cbz	r2, 800c7ec <__hexnan+0x88>
 800c79a:	4610      	mov	r0, r2
 800c79c:	9105      	str	r1, [sp, #20]
 800c79e:	9204      	str	r2, [sp, #16]
 800c7a0:	f7ff fd95 	bl	800c2ce <__hexdig_fun>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d151      	bne.n	800c84c <__hexnan+0xe8>
 800c7a8:	9a04      	ldr	r2, [sp, #16]
 800c7aa:	9905      	ldr	r1, [sp, #20]
 800c7ac:	2a20      	cmp	r2, #32
 800c7ae:	d818      	bhi.n	800c7e2 <__hexnan+0x7e>
 800c7b0:	9b02      	ldr	r3, [sp, #8]
 800c7b2:	459b      	cmp	fp, r3
 800c7b4:	dd13      	ble.n	800c7de <__hexnan+0x7a>
 800c7b6:	454c      	cmp	r4, r9
 800c7b8:	d206      	bcs.n	800c7c8 <__hexnan+0x64>
 800c7ba:	2d07      	cmp	r5, #7
 800c7bc:	dc04      	bgt.n	800c7c8 <__hexnan+0x64>
 800c7be:	462a      	mov	r2, r5
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f7ff ffa8 	bl	800c718 <L_shift>
 800c7c8:	4544      	cmp	r4, r8
 800c7ca:	d952      	bls.n	800c872 <__hexnan+0x10e>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f1a4 0904 	sub.w	r9, r4, #4
 800c7d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7d6:	461d      	mov	r5, r3
 800c7d8:	464c      	mov	r4, r9
 800c7da:	f8cd b008 	str.w	fp, [sp, #8]
 800c7de:	9903      	ldr	r1, [sp, #12]
 800c7e0:	e7d7      	b.n	800c792 <__hexnan+0x2e>
 800c7e2:	2a29      	cmp	r2, #41	@ 0x29
 800c7e4:	d157      	bne.n	800c896 <__hexnan+0x132>
 800c7e6:	3102      	adds	r1, #2
 800c7e8:	f8ca 1000 	str.w	r1, [sl]
 800c7ec:	f1bb 0f00 	cmp.w	fp, #0
 800c7f0:	d051      	beq.n	800c896 <__hexnan+0x132>
 800c7f2:	454c      	cmp	r4, r9
 800c7f4:	d206      	bcs.n	800c804 <__hexnan+0xa0>
 800c7f6:	2d07      	cmp	r5, #7
 800c7f8:	dc04      	bgt.n	800c804 <__hexnan+0xa0>
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	4620      	mov	r0, r4
 800c800:	f7ff ff8a 	bl	800c718 <L_shift>
 800c804:	4544      	cmp	r4, r8
 800c806:	d936      	bls.n	800c876 <__hexnan+0x112>
 800c808:	4623      	mov	r3, r4
 800c80a:	f1a8 0204 	sub.w	r2, r8, #4
 800c80e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c812:	429f      	cmp	r7, r3
 800c814:	f842 1f04 	str.w	r1, [r2, #4]!
 800c818:	d2f9      	bcs.n	800c80e <__hexnan+0xaa>
 800c81a:	1b3b      	subs	r3, r7, r4
 800c81c:	f023 0303 	bic.w	r3, r3, #3
 800c820:	3304      	adds	r3, #4
 800c822:	3401      	adds	r4, #1
 800c824:	3e03      	subs	r6, #3
 800c826:	42b4      	cmp	r4, r6
 800c828:	bf88      	it	hi
 800c82a:	2304      	movhi	r3, #4
 800c82c:	2200      	movs	r2, #0
 800c82e:	4443      	add	r3, r8
 800c830:	f843 2b04 	str.w	r2, [r3], #4
 800c834:	429f      	cmp	r7, r3
 800c836:	d2fb      	bcs.n	800c830 <__hexnan+0xcc>
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	b91b      	cbnz	r3, 800c844 <__hexnan+0xe0>
 800c83c:	4547      	cmp	r7, r8
 800c83e:	d128      	bne.n	800c892 <__hexnan+0x12e>
 800c840:	2301      	movs	r3, #1
 800c842:	603b      	str	r3, [r7, #0]
 800c844:	2005      	movs	r0, #5
 800c846:	b007      	add	sp, #28
 800c848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84c:	3501      	adds	r5, #1
 800c84e:	2d08      	cmp	r5, #8
 800c850:	f10b 0b01 	add.w	fp, fp, #1
 800c854:	dd06      	ble.n	800c864 <__hexnan+0x100>
 800c856:	4544      	cmp	r4, r8
 800c858:	d9c1      	bls.n	800c7de <__hexnan+0x7a>
 800c85a:	2300      	movs	r3, #0
 800c85c:	2501      	movs	r5, #1
 800c85e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c862:	3c04      	subs	r4, #4
 800c864:	6822      	ldr	r2, [r4, #0]
 800c866:	f000 000f 	and.w	r0, r0, #15
 800c86a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c86e:	6020      	str	r0, [r4, #0]
 800c870:	e7b5      	b.n	800c7de <__hexnan+0x7a>
 800c872:	2508      	movs	r5, #8
 800c874:	e7b3      	b.n	800c7de <__hexnan+0x7a>
 800c876:	9b01      	ldr	r3, [sp, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0dd      	beq.n	800c838 <__hexnan+0xd4>
 800c87c:	f04f 32ff 	mov.w	r2, #4294967295
 800c880:	f1c3 0320 	rsb	r3, r3, #32
 800c884:	40da      	lsrs	r2, r3
 800c886:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c88a:	4013      	ands	r3, r2
 800c88c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c890:	e7d2      	b.n	800c838 <__hexnan+0xd4>
 800c892:	3f04      	subs	r7, #4
 800c894:	e7d0      	b.n	800c838 <__hexnan+0xd4>
 800c896:	2004      	movs	r0, #4
 800c898:	e7d5      	b.n	800c846 <__hexnan+0xe2>
	...

0800c89c <malloc>:
 800c89c:	4b02      	ldr	r3, [pc, #8]	@ (800c8a8 <malloc+0xc>)
 800c89e:	4601      	mov	r1, r0
 800c8a0:	6818      	ldr	r0, [r3, #0]
 800c8a2:	f000 b825 	b.w	800c8f0 <_malloc_r>
 800c8a6:	bf00      	nop
 800c8a8:	20000184 	.word	0x20000184

0800c8ac <sbrk_aligned>:
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c8ec <sbrk_aligned+0x40>)
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	6831      	ldr	r1, [r6, #0]
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	b911      	cbnz	r1, 800c8be <sbrk_aligned+0x12>
 800c8b8:	f000 ff84 	bl	800d7c4 <_sbrk_r>
 800c8bc:	6030      	str	r0, [r6, #0]
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	f000 ff7f 	bl	800d7c4 <_sbrk_r>
 800c8c6:	1c43      	adds	r3, r0, #1
 800c8c8:	d103      	bne.n	800c8d2 <sbrk_aligned+0x26>
 800c8ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	bd70      	pop	{r4, r5, r6, pc}
 800c8d2:	1cc4      	adds	r4, r0, #3
 800c8d4:	f024 0403 	bic.w	r4, r4, #3
 800c8d8:	42a0      	cmp	r0, r4
 800c8da:	d0f8      	beq.n	800c8ce <sbrk_aligned+0x22>
 800c8dc:	1a21      	subs	r1, r4, r0
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 ff70 	bl	800d7c4 <_sbrk_r>
 800c8e4:	3001      	adds	r0, #1
 800c8e6:	d1f2      	bne.n	800c8ce <sbrk_aligned+0x22>
 800c8e8:	e7ef      	b.n	800c8ca <sbrk_aligned+0x1e>
 800c8ea:	bf00      	nop
 800c8ec:	20000890 	.word	0x20000890

0800c8f0 <_malloc_r>:
 800c8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f4:	1ccd      	adds	r5, r1, #3
 800c8f6:	f025 0503 	bic.w	r5, r5, #3
 800c8fa:	3508      	adds	r5, #8
 800c8fc:	2d0c      	cmp	r5, #12
 800c8fe:	bf38      	it	cc
 800c900:	250c      	movcc	r5, #12
 800c902:	2d00      	cmp	r5, #0
 800c904:	4606      	mov	r6, r0
 800c906:	db01      	blt.n	800c90c <_malloc_r+0x1c>
 800c908:	42a9      	cmp	r1, r5
 800c90a:	d904      	bls.n	800c916 <_malloc_r+0x26>
 800c90c:	230c      	movs	r3, #12
 800c90e:	6033      	str	r3, [r6, #0]
 800c910:	2000      	movs	r0, #0
 800c912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9ec <_malloc_r+0xfc>
 800c91a:	f000 f87b 	bl	800ca14 <__malloc_lock>
 800c91e:	f8d8 3000 	ldr.w	r3, [r8]
 800c922:	461c      	mov	r4, r3
 800c924:	bb44      	cbnz	r4, 800c978 <_malloc_r+0x88>
 800c926:	4629      	mov	r1, r5
 800c928:	4630      	mov	r0, r6
 800c92a:	f7ff ffbf 	bl	800c8ac <sbrk_aligned>
 800c92e:	1c43      	adds	r3, r0, #1
 800c930:	4604      	mov	r4, r0
 800c932:	d158      	bne.n	800c9e6 <_malloc_r+0xf6>
 800c934:	f8d8 4000 	ldr.w	r4, [r8]
 800c938:	4627      	mov	r7, r4
 800c93a:	2f00      	cmp	r7, #0
 800c93c:	d143      	bne.n	800c9c6 <_malloc_r+0xd6>
 800c93e:	2c00      	cmp	r4, #0
 800c940:	d04b      	beq.n	800c9da <_malloc_r+0xea>
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	4639      	mov	r1, r7
 800c946:	4630      	mov	r0, r6
 800c948:	eb04 0903 	add.w	r9, r4, r3
 800c94c:	f000 ff3a 	bl	800d7c4 <_sbrk_r>
 800c950:	4581      	cmp	r9, r0
 800c952:	d142      	bne.n	800c9da <_malloc_r+0xea>
 800c954:	6821      	ldr	r1, [r4, #0]
 800c956:	4630      	mov	r0, r6
 800c958:	1a6d      	subs	r5, r5, r1
 800c95a:	4629      	mov	r1, r5
 800c95c:	f7ff ffa6 	bl	800c8ac <sbrk_aligned>
 800c960:	3001      	adds	r0, #1
 800c962:	d03a      	beq.n	800c9da <_malloc_r+0xea>
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	442b      	add	r3, r5
 800c968:	6023      	str	r3, [r4, #0]
 800c96a:	f8d8 3000 	ldr.w	r3, [r8]
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	bb62      	cbnz	r2, 800c9cc <_malloc_r+0xdc>
 800c972:	f8c8 7000 	str.w	r7, [r8]
 800c976:	e00f      	b.n	800c998 <_malloc_r+0xa8>
 800c978:	6822      	ldr	r2, [r4, #0]
 800c97a:	1b52      	subs	r2, r2, r5
 800c97c:	d420      	bmi.n	800c9c0 <_malloc_r+0xd0>
 800c97e:	2a0b      	cmp	r2, #11
 800c980:	d917      	bls.n	800c9b2 <_malloc_r+0xc2>
 800c982:	1961      	adds	r1, r4, r5
 800c984:	42a3      	cmp	r3, r4
 800c986:	6025      	str	r5, [r4, #0]
 800c988:	bf18      	it	ne
 800c98a:	6059      	strne	r1, [r3, #4]
 800c98c:	6863      	ldr	r3, [r4, #4]
 800c98e:	bf08      	it	eq
 800c990:	f8c8 1000 	streq.w	r1, [r8]
 800c994:	5162      	str	r2, [r4, r5]
 800c996:	604b      	str	r3, [r1, #4]
 800c998:	4630      	mov	r0, r6
 800c99a:	f000 f841 	bl	800ca20 <__malloc_unlock>
 800c99e:	f104 000b 	add.w	r0, r4, #11
 800c9a2:	1d23      	adds	r3, r4, #4
 800c9a4:	f020 0007 	bic.w	r0, r0, #7
 800c9a8:	1ac2      	subs	r2, r0, r3
 800c9aa:	bf1c      	itt	ne
 800c9ac:	1a1b      	subne	r3, r3, r0
 800c9ae:	50a3      	strne	r3, [r4, r2]
 800c9b0:	e7af      	b.n	800c912 <_malloc_r+0x22>
 800c9b2:	6862      	ldr	r2, [r4, #4]
 800c9b4:	42a3      	cmp	r3, r4
 800c9b6:	bf0c      	ite	eq
 800c9b8:	f8c8 2000 	streq.w	r2, [r8]
 800c9bc:	605a      	strne	r2, [r3, #4]
 800c9be:	e7eb      	b.n	800c998 <_malloc_r+0xa8>
 800c9c0:	4623      	mov	r3, r4
 800c9c2:	6864      	ldr	r4, [r4, #4]
 800c9c4:	e7ae      	b.n	800c924 <_malloc_r+0x34>
 800c9c6:	463c      	mov	r4, r7
 800c9c8:	687f      	ldr	r7, [r7, #4]
 800c9ca:	e7b6      	b.n	800c93a <_malloc_r+0x4a>
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	42a3      	cmp	r3, r4
 800c9d2:	d1fb      	bne.n	800c9cc <_malloc_r+0xdc>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	6053      	str	r3, [r2, #4]
 800c9d8:	e7de      	b.n	800c998 <_malloc_r+0xa8>
 800c9da:	230c      	movs	r3, #12
 800c9dc:	4630      	mov	r0, r6
 800c9de:	6033      	str	r3, [r6, #0]
 800c9e0:	f000 f81e 	bl	800ca20 <__malloc_unlock>
 800c9e4:	e794      	b.n	800c910 <_malloc_r+0x20>
 800c9e6:	6005      	str	r5, [r0, #0]
 800c9e8:	e7d6      	b.n	800c998 <_malloc_r+0xa8>
 800c9ea:	bf00      	nop
 800c9ec:	20000894 	.word	0x20000894

0800c9f0 <__ascii_mbtowc>:
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	b901      	cbnz	r1, 800c9f6 <__ascii_mbtowc+0x6>
 800c9f4:	a901      	add	r1, sp, #4
 800c9f6:	b142      	cbz	r2, 800ca0a <__ascii_mbtowc+0x1a>
 800c9f8:	b14b      	cbz	r3, 800ca0e <__ascii_mbtowc+0x1e>
 800c9fa:	7813      	ldrb	r3, [r2, #0]
 800c9fc:	600b      	str	r3, [r1, #0]
 800c9fe:	7812      	ldrb	r2, [r2, #0]
 800ca00:	1e10      	subs	r0, r2, #0
 800ca02:	bf18      	it	ne
 800ca04:	2001      	movne	r0, #1
 800ca06:	b002      	add	sp, #8
 800ca08:	4770      	bx	lr
 800ca0a:	4610      	mov	r0, r2
 800ca0c:	e7fb      	b.n	800ca06 <__ascii_mbtowc+0x16>
 800ca0e:	f06f 0001 	mvn.w	r0, #1
 800ca12:	e7f8      	b.n	800ca06 <__ascii_mbtowc+0x16>

0800ca14 <__malloc_lock>:
 800ca14:	4801      	ldr	r0, [pc, #4]	@ (800ca1c <__malloc_lock+0x8>)
 800ca16:	f7fe bd4a 	b.w	800b4ae <__retarget_lock_acquire_recursive>
 800ca1a:	bf00      	nop
 800ca1c:	2000088c 	.word	0x2000088c

0800ca20 <__malloc_unlock>:
 800ca20:	4801      	ldr	r0, [pc, #4]	@ (800ca28 <__malloc_unlock+0x8>)
 800ca22:	f7fe bd45 	b.w	800b4b0 <__retarget_lock_release_recursive>
 800ca26:	bf00      	nop
 800ca28:	2000088c 	.word	0x2000088c

0800ca2c <_Balloc>:
 800ca2c:	b570      	push	{r4, r5, r6, lr}
 800ca2e:	69c6      	ldr	r6, [r0, #28]
 800ca30:	4604      	mov	r4, r0
 800ca32:	460d      	mov	r5, r1
 800ca34:	b976      	cbnz	r6, 800ca54 <_Balloc+0x28>
 800ca36:	2010      	movs	r0, #16
 800ca38:	f7ff ff30 	bl	800c89c <malloc>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	61e0      	str	r0, [r4, #28]
 800ca40:	b920      	cbnz	r0, 800ca4c <_Balloc+0x20>
 800ca42:	216b      	movs	r1, #107	@ 0x6b
 800ca44:	4b17      	ldr	r3, [pc, #92]	@ (800caa4 <_Balloc+0x78>)
 800ca46:	4818      	ldr	r0, [pc, #96]	@ (800caa8 <_Balloc+0x7c>)
 800ca48:	f000 fecc 	bl	800d7e4 <__assert_func>
 800ca4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca50:	6006      	str	r6, [r0, #0]
 800ca52:	60c6      	str	r6, [r0, #12]
 800ca54:	69e6      	ldr	r6, [r4, #28]
 800ca56:	68f3      	ldr	r3, [r6, #12]
 800ca58:	b183      	cbz	r3, 800ca7c <_Balloc+0x50>
 800ca5a:	69e3      	ldr	r3, [r4, #28]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca62:	b9b8      	cbnz	r0, 800ca94 <_Balloc+0x68>
 800ca64:	2101      	movs	r1, #1
 800ca66:	fa01 f605 	lsl.w	r6, r1, r5
 800ca6a:	1d72      	adds	r2, r6, #5
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	0092      	lsls	r2, r2, #2
 800ca70:	f000 fed6 	bl	800d820 <_calloc_r>
 800ca74:	b160      	cbz	r0, 800ca90 <_Balloc+0x64>
 800ca76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca7a:	e00e      	b.n	800ca9a <_Balloc+0x6e>
 800ca7c:	2221      	movs	r2, #33	@ 0x21
 800ca7e:	2104      	movs	r1, #4
 800ca80:	4620      	mov	r0, r4
 800ca82:	f000 fecd 	bl	800d820 <_calloc_r>
 800ca86:	69e3      	ldr	r3, [r4, #28]
 800ca88:	60f0      	str	r0, [r6, #12]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1e4      	bne.n	800ca5a <_Balloc+0x2e>
 800ca90:	2000      	movs	r0, #0
 800ca92:	bd70      	pop	{r4, r5, r6, pc}
 800ca94:	6802      	ldr	r2, [r0, #0]
 800ca96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800caa0:	e7f7      	b.n	800ca92 <_Balloc+0x66>
 800caa2:	bf00      	nop
 800caa4:	0800e3da 	.word	0x0800e3da
 800caa8:	0800e4ba 	.word	0x0800e4ba

0800caac <_Bfree>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	69c6      	ldr	r6, [r0, #28]
 800cab0:	4605      	mov	r5, r0
 800cab2:	460c      	mov	r4, r1
 800cab4:	b976      	cbnz	r6, 800cad4 <_Bfree+0x28>
 800cab6:	2010      	movs	r0, #16
 800cab8:	f7ff fef0 	bl	800c89c <malloc>
 800cabc:	4602      	mov	r2, r0
 800cabe:	61e8      	str	r0, [r5, #28]
 800cac0:	b920      	cbnz	r0, 800cacc <_Bfree+0x20>
 800cac2:	218f      	movs	r1, #143	@ 0x8f
 800cac4:	4b08      	ldr	r3, [pc, #32]	@ (800cae8 <_Bfree+0x3c>)
 800cac6:	4809      	ldr	r0, [pc, #36]	@ (800caec <_Bfree+0x40>)
 800cac8:	f000 fe8c 	bl	800d7e4 <__assert_func>
 800cacc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cad0:	6006      	str	r6, [r0, #0]
 800cad2:	60c6      	str	r6, [r0, #12]
 800cad4:	b13c      	cbz	r4, 800cae6 <_Bfree+0x3a>
 800cad6:	69eb      	ldr	r3, [r5, #28]
 800cad8:	6862      	ldr	r2, [r4, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cae0:	6021      	str	r1, [r4, #0]
 800cae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cae6:	bd70      	pop	{r4, r5, r6, pc}
 800cae8:	0800e3da 	.word	0x0800e3da
 800caec:	0800e4ba 	.word	0x0800e4ba

0800caf0 <__multadd>:
 800caf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf4:	4607      	mov	r7, r0
 800caf6:	460c      	mov	r4, r1
 800caf8:	461e      	mov	r6, r3
 800cafa:	2000      	movs	r0, #0
 800cafc:	690d      	ldr	r5, [r1, #16]
 800cafe:	f101 0c14 	add.w	ip, r1, #20
 800cb02:	f8dc 3000 	ldr.w	r3, [ip]
 800cb06:	3001      	adds	r0, #1
 800cb08:	b299      	uxth	r1, r3
 800cb0a:	fb02 6101 	mla	r1, r2, r1, r6
 800cb0e:	0c1e      	lsrs	r6, r3, #16
 800cb10:	0c0b      	lsrs	r3, r1, #16
 800cb12:	fb02 3306 	mla	r3, r2, r6, r3
 800cb16:	b289      	uxth	r1, r1
 800cb18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb1c:	4285      	cmp	r5, r0
 800cb1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb22:	f84c 1b04 	str.w	r1, [ip], #4
 800cb26:	dcec      	bgt.n	800cb02 <__multadd+0x12>
 800cb28:	b30e      	cbz	r6, 800cb6e <__multadd+0x7e>
 800cb2a:	68a3      	ldr	r3, [r4, #8]
 800cb2c:	42ab      	cmp	r3, r5
 800cb2e:	dc19      	bgt.n	800cb64 <__multadd+0x74>
 800cb30:	6861      	ldr	r1, [r4, #4]
 800cb32:	4638      	mov	r0, r7
 800cb34:	3101      	adds	r1, #1
 800cb36:	f7ff ff79 	bl	800ca2c <_Balloc>
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	b928      	cbnz	r0, 800cb4a <__multadd+0x5a>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	21ba      	movs	r1, #186	@ 0xba
 800cb42:	4b0c      	ldr	r3, [pc, #48]	@ (800cb74 <__multadd+0x84>)
 800cb44:	480c      	ldr	r0, [pc, #48]	@ (800cb78 <__multadd+0x88>)
 800cb46:	f000 fe4d 	bl	800d7e4 <__assert_func>
 800cb4a:	6922      	ldr	r2, [r4, #16]
 800cb4c:	f104 010c 	add.w	r1, r4, #12
 800cb50:	3202      	adds	r2, #2
 800cb52:	0092      	lsls	r2, r2, #2
 800cb54:	300c      	adds	r0, #12
 800cb56:	f7fe fcba 	bl	800b4ce <memcpy>
 800cb5a:	4621      	mov	r1, r4
 800cb5c:	4638      	mov	r0, r7
 800cb5e:	f7ff ffa5 	bl	800caac <_Bfree>
 800cb62:	4644      	mov	r4, r8
 800cb64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb68:	3501      	adds	r5, #1
 800cb6a:	615e      	str	r6, [r3, #20]
 800cb6c:	6125      	str	r5, [r4, #16]
 800cb6e:	4620      	mov	r0, r4
 800cb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb74:	0800e449 	.word	0x0800e449
 800cb78:	0800e4ba 	.word	0x0800e4ba

0800cb7c <__s2b>:
 800cb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb80:	4615      	mov	r5, r2
 800cb82:	2209      	movs	r2, #9
 800cb84:	461f      	mov	r7, r3
 800cb86:	3308      	adds	r3, #8
 800cb88:	460c      	mov	r4, r1
 800cb8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb8e:	4606      	mov	r6, r0
 800cb90:	2201      	movs	r2, #1
 800cb92:	2100      	movs	r1, #0
 800cb94:	429a      	cmp	r2, r3
 800cb96:	db09      	blt.n	800cbac <__s2b+0x30>
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7ff ff47 	bl	800ca2c <_Balloc>
 800cb9e:	b940      	cbnz	r0, 800cbb2 <__s2b+0x36>
 800cba0:	4602      	mov	r2, r0
 800cba2:	21d3      	movs	r1, #211	@ 0xd3
 800cba4:	4b18      	ldr	r3, [pc, #96]	@ (800cc08 <__s2b+0x8c>)
 800cba6:	4819      	ldr	r0, [pc, #100]	@ (800cc0c <__s2b+0x90>)
 800cba8:	f000 fe1c 	bl	800d7e4 <__assert_func>
 800cbac:	0052      	lsls	r2, r2, #1
 800cbae:	3101      	adds	r1, #1
 800cbb0:	e7f0      	b.n	800cb94 <__s2b+0x18>
 800cbb2:	9b08      	ldr	r3, [sp, #32]
 800cbb4:	2d09      	cmp	r5, #9
 800cbb6:	6143      	str	r3, [r0, #20]
 800cbb8:	f04f 0301 	mov.w	r3, #1
 800cbbc:	6103      	str	r3, [r0, #16]
 800cbbe:	dd16      	ble.n	800cbee <__s2b+0x72>
 800cbc0:	f104 0909 	add.w	r9, r4, #9
 800cbc4:	46c8      	mov	r8, r9
 800cbc6:	442c      	add	r4, r5
 800cbc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cbcc:	4601      	mov	r1, r0
 800cbce:	220a      	movs	r2, #10
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	3b30      	subs	r3, #48	@ 0x30
 800cbd4:	f7ff ff8c 	bl	800caf0 <__multadd>
 800cbd8:	45a0      	cmp	r8, r4
 800cbda:	d1f5      	bne.n	800cbc8 <__s2b+0x4c>
 800cbdc:	f1a5 0408 	sub.w	r4, r5, #8
 800cbe0:	444c      	add	r4, r9
 800cbe2:	1b2d      	subs	r5, r5, r4
 800cbe4:	1963      	adds	r3, r4, r5
 800cbe6:	42bb      	cmp	r3, r7
 800cbe8:	db04      	blt.n	800cbf4 <__s2b+0x78>
 800cbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbee:	2509      	movs	r5, #9
 800cbf0:	340a      	adds	r4, #10
 800cbf2:	e7f6      	b.n	800cbe2 <__s2b+0x66>
 800cbf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbf8:	4601      	mov	r1, r0
 800cbfa:	220a      	movs	r2, #10
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	3b30      	subs	r3, #48	@ 0x30
 800cc00:	f7ff ff76 	bl	800caf0 <__multadd>
 800cc04:	e7ee      	b.n	800cbe4 <__s2b+0x68>
 800cc06:	bf00      	nop
 800cc08:	0800e449 	.word	0x0800e449
 800cc0c:	0800e4ba 	.word	0x0800e4ba

0800cc10 <__hi0bits>:
 800cc10:	4603      	mov	r3, r0
 800cc12:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc16:	bf3a      	itte	cc
 800cc18:	0403      	lslcc	r3, r0, #16
 800cc1a:	2010      	movcc	r0, #16
 800cc1c:	2000      	movcs	r0, #0
 800cc1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc22:	bf3c      	itt	cc
 800cc24:	021b      	lslcc	r3, r3, #8
 800cc26:	3008      	addcc	r0, #8
 800cc28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc2c:	bf3c      	itt	cc
 800cc2e:	011b      	lslcc	r3, r3, #4
 800cc30:	3004      	addcc	r0, #4
 800cc32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc36:	bf3c      	itt	cc
 800cc38:	009b      	lslcc	r3, r3, #2
 800cc3a:	3002      	addcc	r0, #2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	db05      	blt.n	800cc4c <__hi0bits+0x3c>
 800cc40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc44:	f100 0001 	add.w	r0, r0, #1
 800cc48:	bf08      	it	eq
 800cc4a:	2020      	moveq	r0, #32
 800cc4c:	4770      	bx	lr

0800cc4e <__lo0bits>:
 800cc4e:	6803      	ldr	r3, [r0, #0]
 800cc50:	4602      	mov	r2, r0
 800cc52:	f013 0007 	ands.w	r0, r3, #7
 800cc56:	d00b      	beq.n	800cc70 <__lo0bits+0x22>
 800cc58:	07d9      	lsls	r1, r3, #31
 800cc5a:	d421      	bmi.n	800cca0 <__lo0bits+0x52>
 800cc5c:	0798      	lsls	r0, r3, #30
 800cc5e:	bf49      	itett	mi
 800cc60:	085b      	lsrmi	r3, r3, #1
 800cc62:	089b      	lsrpl	r3, r3, #2
 800cc64:	2001      	movmi	r0, #1
 800cc66:	6013      	strmi	r3, [r2, #0]
 800cc68:	bf5c      	itt	pl
 800cc6a:	2002      	movpl	r0, #2
 800cc6c:	6013      	strpl	r3, [r2, #0]
 800cc6e:	4770      	bx	lr
 800cc70:	b299      	uxth	r1, r3
 800cc72:	b909      	cbnz	r1, 800cc78 <__lo0bits+0x2a>
 800cc74:	2010      	movs	r0, #16
 800cc76:	0c1b      	lsrs	r3, r3, #16
 800cc78:	b2d9      	uxtb	r1, r3
 800cc7a:	b909      	cbnz	r1, 800cc80 <__lo0bits+0x32>
 800cc7c:	3008      	adds	r0, #8
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	0719      	lsls	r1, r3, #28
 800cc82:	bf04      	itt	eq
 800cc84:	091b      	lsreq	r3, r3, #4
 800cc86:	3004      	addeq	r0, #4
 800cc88:	0799      	lsls	r1, r3, #30
 800cc8a:	bf04      	itt	eq
 800cc8c:	089b      	lsreq	r3, r3, #2
 800cc8e:	3002      	addeq	r0, #2
 800cc90:	07d9      	lsls	r1, r3, #31
 800cc92:	d403      	bmi.n	800cc9c <__lo0bits+0x4e>
 800cc94:	085b      	lsrs	r3, r3, #1
 800cc96:	f100 0001 	add.w	r0, r0, #1
 800cc9a:	d003      	beq.n	800cca4 <__lo0bits+0x56>
 800cc9c:	6013      	str	r3, [r2, #0]
 800cc9e:	4770      	bx	lr
 800cca0:	2000      	movs	r0, #0
 800cca2:	4770      	bx	lr
 800cca4:	2020      	movs	r0, #32
 800cca6:	4770      	bx	lr

0800cca8 <__i2b>:
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	460c      	mov	r4, r1
 800ccac:	2101      	movs	r1, #1
 800ccae:	f7ff febd 	bl	800ca2c <_Balloc>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	b928      	cbnz	r0, 800ccc2 <__i2b+0x1a>
 800ccb6:	f240 1145 	movw	r1, #325	@ 0x145
 800ccba:	4b04      	ldr	r3, [pc, #16]	@ (800cccc <__i2b+0x24>)
 800ccbc:	4804      	ldr	r0, [pc, #16]	@ (800ccd0 <__i2b+0x28>)
 800ccbe:	f000 fd91 	bl	800d7e4 <__assert_func>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	6144      	str	r4, [r0, #20]
 800ccc6:	6103      	str	r3, [r0, #16]
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	bf00      	nop
 800cccc:	0800e449 	.word	0x0800e449
 800ccd0:	0800e4ba 	.word	0x0800e4ba

0800ccd4 <__multiply>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	4614      	mov	r4, r2
 800ccda:	690a      	ldr	r2, [r1, #16]
 800ccdc:	6923      	ldr	r3, [r4, #16]
 800ccde:	460f      	mov	r7, r1
 800cce0:	429a      	cmp	r2, r3
 800cce2:	bfa2      	ittt	ge
 800cce4:	4623      	movge	r3, r4
 800cce6:	460c      	movge	r4, r1
 800cce8:	461f      	movge	r7, r3
 800ccea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ccee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ccf2:	68a3      	ldr	r3, [r4, #8]
 800ccf4:	6861      	ldr	r1, [r4, #4]
 800ccf6:	eb0a 0609 	add.w	r6, sl, r9
 800ccfa:	42b3      	cmp	r3, r6
 800ccfc:	b085      	sub	sp, #20
 800ccfe:	bfb8      	it	lt
 800cd00:	3101      	addlt	r1, #1
 800cd02:	f7ff fe93 	bl	800ca2c <_Balloc>
 800cd06:	b930      	cbnz	r0, 800cd16 <__multiply+0x42>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd0e:	4b43      	ldr	r3, [pc, #268]	@ (800ce1c <__multiply+0x148>)
 800cd10:	4843      	ldr	r0, [pc, #268]	@ (800ce20 <__multiply+0x14c>)
 800cd12:	f000 fd67 	bl	800d7e4 <__assert_func>
 800cd16:	f100 0514 	add.w	r5, r0, #20
 800cd1a:	462b      	mov	r3, r5
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd22:	4543      	cmp	r3, r8
 800cd24:	d321      	bcc.n	800cd6a <__multiply+0x96>
 800cd26:	f107 0114 	add.w	r1, r7, #20
 800cd2a:	f104 0214 	add.w	r2, r4, #20
 800cd2e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cd32:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cd36:	9302      	str	r3, [sp, #8]
 800cd38:	1b13      	subs	r3, r2, r4
 800cd3a:	3b15      	subs	r3, #21
 800cd3c:	f023 0303 	bic.w	r3, r3, #3
 800cd40:	3304      	adds	r3, #4
 800cd42:	f104 0715 	add.w	r7, r4, #21
 800cd46:	42ba      	cmp	r2, r7
 800cd48:	bf38      	it	cc
 800cd4a:	2304      	movcc	r3, #4
 800cd4c:	9301      	str	r3, [sp, #4]
 800cd4e:	9b02      	ldr	r3, [sp, #8]
 800cd50:	9103      	str	r1, [sp, #12]
 800cd52:	428b      	cmp	r3, r1
 800cd54:	d80c      	bhi.n	800cd70 <__multiply+0x9c>
 800cd56:	2e00      	cmp	r6, #0
 800cd58:	dd03      	ble.n	800cd62 <__multiply+0x8e>
 800cd5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d05a      	beq.n	800ce18 <__multiply+0x144>
 800cd62:	6106      	str	r6, [r0, #16]
 800cd64:	b005      	add	sp, #20
 800cd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd6a:	f843 2b04 	str.w	r2, [r3], #4
 800cd6e:	e7d8      	b.n	800cd22 <__multiply+0x4e>
 800cd70:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd74:	f1ba 0f00 	cmp.w	sl, #0
 800cd78:	d023      	beq.n	800cdc2 <__multiply+0xee>
 800cd7a:	46a9      	mov	r9, r5
 800cd7c:	f04f 0c00 	mov.w	ip, #0
 800cd80:	f104 0e14 	add.w	lr, r4, #20
 800cd84:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd88:	f8d9 3000 	ldr.w	r3, [r9]
 800cd8c:	fa1f fb87 	uxth.w	fp, r7
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd96:	4463      	add	r3, ip
 800cd98:	f8d9 c000 	ldr.w	ip, [r9]
 800cd9c:	0c3f      	lsrs	r7, r7, #16
 800cd9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cda2:	fb0a c707 	mla	r7, sl, r7, ip
 800cda6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cdb0:	4572      	cmp	r2, lr
 800cdb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cdb6:	f849 3b04 	str.w	r3, [r9], #4
 800cdba:	d8e3      	bhi.n	800cd84 <__multiply+0xb0>
 800cdbc:	9b01      	ldr	r3, [sp, #4]
 800cdbe:	f845 c003 	str.w	ip, [r5, r3]
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	3104      	adds	r1, #4
 800cdc6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cdca:	f1b9 0f00 	cmp.w	r9, #0
 800cdce:	d021      	beq.n	800ce14 <__multiply+0x140>
 800cdd0:	46ae      	mov	lr, r5
 800cdd2:	f04f 0a00 	mov.w	sl, #0
 800cdd6:	682b      	ldr	r3, [r5, #0]
 800cdd8:	f104 0c14 	add.w	ip, r4, #20
 800cddc:	f8bc b000 	ldrh.w	fp, [ip]
 800cde0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	fb09 770b 	mla	r7, r9, fp, r7
 800cdea:	4457      	add	r7, sl
 800cdec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cdf0:	f84e 3b04 	str.w	r3, [lr], #4
 800cdf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cdf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdfc:	f8be 3000 	ldrh.w	r3, [lr]
 800ce00:	4562      	cmp	r2, ip
 800ce02:	fb09 330a 	mla	r3, r9, sl, r3
 800ce06:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ce0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce0e:	d8e5      	bhi.n	800cddc <__multiply+0x108>
 800ce10:	9f01      	ldr	r7, [sp, #4]
 800ce12:	51eb      	str	r3, [r5, r7]
 800ce14:	3504      	adds	r5, #4
 800ce16:	e79a      	b.n	800cd4e <__multiply+0x7a>
 800ce18:	3e01      	subs	r6, #1
 800ce1a:	e79c      	b.n	800cd56 <__multiply+0x82>
 800ce1c:	0800e449 	.word	0x0800e449
 800ce20:	0800e4ba 	.word	0x0800e4ba

0800ce24 <__pow5mult>:
 800ce24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce28:	4615      	mov	r5, r2
 800ce2a:	f012 0203 	ands.w	r2, r2, #3
 800ce2e:	4607      	mov	r7, r0
 800ce30:	460e      	mov	r6, r1
 800ce32:	d007      	beq.n	800ce44 <__pow5mult+0x20>
 800ce34:	4c25      	ldr	r4, [pc, #148]	@ (800cecc <__pow5mult+0xa8>)
 800ce36:	3a01      	subs	r2, #1
 800ce38:	2300      	movs	r3, #0
 800ce3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce3e:	f7ff fe57 	bl	800caf0 <__multadd>
 800ce42:	4606      	mov	r6, r0
 800ce44:	10ad      	asrs	r5, r5, #2
 800ce46:	d03d      	beq.n	800cec4 <__pow5mult+0xa0>
 800ce48:	69fc      	ldr	r4, [r7, #28]
 800ce4a:	b97c      	cbnz	r4, 800ce6c <__pow5mult+0x48>
 800ce4c:	2010      	movs	r0, #16
 800ce4e:	f7ff fd25 	bl	800c89c <malloc>
 800ce52:	4602      	mov	r2, r0
 800ce54:	61f8      	str	r0, [r7, #28]
 800ce56:	b928      	cbnz	r0, 800ce64 <__pow5mult+0x40>
 800ce58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce5c:	4b1c      	ldr	r3, [pc, #112]	@ (800ced0 <__pow5mult+0xac>)
 800ce5e:	481d      	ldr	r0, [pc, #116]	@ (800ced4 <__pow5mult+0xb0>)
 800ce60:	f000 fcc0 	bl	800d7e4 <__assert_func>
 800ce64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce68:	6004      	str	r4, [r0, #0]
 800ce6a:	60c4      	str	r4, [r0, #12]
 800ce6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce74:	b94c      	cbnz	r4, 800ce8a <__pow5mult+0x66>
 800ce76:	f240 2171 	movw	r1, #625	@ 0x271
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	f7ff ff14 	bl	800cca8 <__i2b>
 800ce80:	2300      	movs	r3, #0
 800ce82:	4604      	mov	r4, r0
 800ce84:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce88:	6003      	str	r3, [r0, #0]
 800ce8a:	f04f 0900 	mov.w	r9, #0
 800ce8e:	07eb      	lsls	r3, r5, #31
 800ce90:	d50a      	bpl.n	800cea8 <__pow5mult+0x84>
 800ce92:	4631      	mov	r1, r6
 800ce94:	4622      	mov	r2, r4
 800ce96:	4638      	mov	r0, r7
 800ce98:	f7ff ff1c 	bl	800ccd4 <__multiply>
 800ce9c:	4680      	mov	r8, r0
 800ce9e:	4631      	mov	r1, r6
 800cea0:	4638      	mov	r0, r7
 800cea2:	f7ff fe03 	bl	800caac <_Bfree>
 800cea6:	4646      	mov	r6, r8
 800cea8:	106d      	asrs	r5, r5, #1
 800ceaa:	d00b      	beq.n	800cec4 <__pow5mult+0xa0>
 800ceac:	6820      	ldr	r0, [r4, #0]
 800ceae:	b938      	cbnz	r0, 800cec0 <__pow5mult+0x9c>
 800ceb0:	4622      	mov	r2, r4
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	4638      	mov	r0, r7
 800ceb6:	f7ff ff0d 	bl	800ccd4 <__multiply>
 800ceba:	6020      	str	r0, [r4, #0]
 800cebc:	f8c0 9000 	str.w	r9, [r0]
 800cec0:	4604      	mov	r4, r0
 800cec2:	e7e4      	b.n	800ce8e <__pow5mult+0x6a>
 800cec4:	4630      	mov	r0, r6
 800cec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceca:	bf00      	nop
 800cecc:	0800e514 	.word	0x0800e514
 800ced0:	0800e3da 	.word	0x0800e3da
 800ced4:	0800e4ba 	.word	0x0800e4ba

0800ced8 <__lshift>:
 800ced8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cedc:	460c      	mov	r4, r1
 800cede:	4607      	mov	r7, r0
 800cee0:	4691      	mov	r9, r2
 800cee2:	6923      	ldr	r3, [r4, #16]
 800cee4:	6849      	ldr	r1, [r1, #4]
 800cee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ceea:	68a3      	ldr	r3, [r4, #8]
 800ceec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cef0:	f108 0601 	add.w	r6, r8, #1
 800cef4:	42b3      	cmp	r3, r6
 800cef6:	db0b      	blt.n	800cf10 <__lshift+0x38>
 800cef8:	4638      	mov	r0, r7
 800cefa:	f7ff fd97 	bl	800ca2c <_Balloc>
 800cefe:	4605      	mov	r5, r0
 800cf00:	b948      	cbnz	r0, 800cf16 <__lshift+0x3e>
 800cf02:	4602      	mov	r2, r0
 800cf04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf08:	4b27      	ldr	r3, [pc, #156]	@ (800cfa8 <__lshift+0xd0>)
 800cf0a:	4828      	ldr	r0, [pc, #160]	@ (800cfac <__lshift+0xd4>)
 800cf0c:	f000 fc6a 	bl	800d7e4 <__assert_func>
 800cf10:	3101      	adds	r1, #1
 800cf12:	005b      	lsls	r3, r3, #1
 800cf14:	e7ee      	b.n	800cef4 <__lshift+0x1c>
 800cf16:	2300      	movs	r3, #0
 800cf18:	f100 0114 	add.w	r1, r0, #20
 800cf1c:	f100 0210 	add.w	r2, r0, #16
 800cf20:	4618      	mov	r0, r3
 800cf22:	4553      	cmp	r3, sl
 800cf24:	db33      	blt.n	800cf8e <__lshift+0xb6>
 800cf26:	6920      	ldr	r0, [r4, #16]
 800cf28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf2c:	f104 0314 	add.w	r3, r4, #20
 800cf30:	f019 091f 	ands.w	r9, r9, #31
 800cf34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf3c:	d02b      	beq.n	800cf96 <__lshift+0xbe>
 800cf3e:	468a      	mov	sl, r1
 800cf40:	2200      	movs	r2, #0
 800cf42:	f1c9 0e20 	rsb	lr, r9, #32
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	fa00 f009 	lsl.w	r0, r0, r9
 800cf4c:	4310      	orrs	r0, r2
 800cf4e:	f84a 0b04 	str.w	r0, [sl], #4
 800cf52:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf56:	459c      	cmp	ip, r3
 800cf58:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf5c:	d8f3      	bhi.n	800cf46 <__lshift+0x6e>
 800cf5e:	ebac 0304 	sub.w	r3, ip, r4
 800cf62:	3b15      	subs	r3, #21
 800cf64:	f023 0303 	bic.w	r3, r3, #3
 800cf68:	3304      	adds	r3, #4
 800cf6a:	f104 0015 	add.w	r0, r4, #21
 800cf6e:	4584      	cmp	ip, r0
 800cf70:	bf38      	it	cc
 800cf72:	2304      	movcc	r3, #4
 800cf74:	50ca      	str	r2, [r1, r3]
 800cf76:	b10a      	cbz	r2, 800cf7c <__lshift+0xa4>
 800cf78:	f108 0602 	add.w	r6, r8, #2
 800cf7c:	3e01      	subs	r6, #1
 800cf7e:	4638      	mov	r0, r7
 800cf80:	4621      	mov	r1, r4
 800cf82:	612e      	str	r6, [r5, #16]
 800cf84:	f7ff fd92 	bl	800caac <_Bfree>
 800cf88:	4628      	mov	r0, r5
 800cf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf92:	3301      	adds	r3, #1
 800cf94:	e7c5      	b.n	800cf22 <__lshift+0x4a>
 800cf96:	3904      	subs	r1, #4
 800cf98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf9c:	459c      	cmp	ip, r3
 800cf9e:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfa2:	d8f9      	bhi.n	800cf98 <__lshift+0xc0>
 800cfa4:	e7ea      	b.n	800cf7c <__lshift+0xa4>
 800cfa6:	bf00      	nop
 800cfa8:	0800e449 	.word	0x0800e449
 800cfac:	0800e4ba 	.word	0x0800e4ba

0800cfb0 <__mcmp>:
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	690a      	ldr	r2, [r1, #16]
 800cfb4:	6900      	ldr	r0, [r0, #16]
 800cfb6:	b530      	push	{r4, r5, lr}
 800cfb8:	1a80      	subs	r0, r0, r2
 800cfba:	d10e      	bne.n	800cfda <__mcmp+0x2a>
 800cfbc:	3314      	adds	r3, #20
 800cfbe:	3114      	adds	r1, #20
 800cfc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfd0:	4295      	cmp	r5, r2
 800cfd2:	d003      	beq.n	800cfdc <__mcmp+0x2c>
 800cfd4:	d205      	bcs.n	800cfe2 <__mcmp+0x32>
 800cfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfda:	bd30      	pop	{r4, r5, pc}
 800cfdc:	42a3      	cmp	r3, r4
 800cfde:	d3f3      	bcc.n	800cfc8 <__mcmp+0x18>
 800cfe0:	e7fb      	b.n	800cfda <__mcmp+0x2a>
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	e7f9      	b.n	800cfda <__mcmp+0x2a>
	...

0800cfe8 <__mdiff>:
 800cfe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfec:	4689      	mov	r9, r1
 800cfee:	4606      	mov	r6, r0
 800cff0:	4611      	mov	r1, r2
 800cff2:	4648      	mov	r0, r9
 800cff4:	4614      	mov	r4, r2
 800cff6:	f7ff ffdb 	bl	800cfb0 <__mcmp>
 800cffa:	1e05      	subs	r5, r0, #0
 800cffc:	d112      	bne.n	800d024 <__mdiff+0x3c>
 800cffe:	4629      	mov	r1, r5
 800d000:	4630      	mov	r0, r6
 800d002:	f7ff fd13 	bl	800ca2c <_Balloc>
 800d006:	4602      	mov	r2, r0
 800d008:	b928      	cbnz	r0, 800d016 <__mdiff+0x2e>
 800d00a:	f240 2137 	movw	r1, #567	@ 0x237
 800d00e:	4b3e      	ldr	r3, [pc, #248]	@ (800d108 <__mdiff+0x120>)
 800d010:	483e      	ldr	r0, [pc, #248]	@ (800d10c <__mdiff+0x124>)
 800d012:	f000 fbe7 	bl	800d7e4 <__assert_func>
 800d016:	2301      	movs	r3, #1
 800d018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d01c:	4610      	mov	r0, r2
 800d01e:	b003      	add	sp, #12
 800d020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d024:	bfbc      	itt	lt
 800d026:	464b      	movlt	r3, r9
 800d028:	46a1      	movlt	r9, r4
 800d02a:	4630      	mov	r0, r6
 800d02c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d030:	bfba      	itte	lt
 800d032:	461c      	movlt	r4, r3
 800d034:	2501      	movlt	r5, #1
 800d036:	2500      	movge	r5, #0
 800d038:	f7ff fcf8 	bl	800ca2c <_Balloc>
 800d03c:	4602      	mov	r2, r0
 800d03e:	b918      	cbnz	r0, 800d048 <__mdiff+0x60>
 800d040:	f240 2145 	movw	r1, #581	@ 0x245
 800d044:	4b30      	ldr	r3, [pc, #192]	@ (800d108 <__mdiff+0x120>)
 800d046:	e7e3      	b.n	800d010 <__mdiff+0x28>
 800d048:	f100 0b14 	add.w	fp, r0, #20
 800d04c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d050:	f109 0310 	add.w	r3, r9, #16
 800d054:	60c5      	str	r5, [r0, #12]
 800d056:	f04f 0c00 	mov.w	ip, #0
 800d05a:	f109 0514 	add.w	r5, r9, #20
 800d05e:	46d9      	mov	r9, fp
 800d060:	6926      	ldr	r6, [r4, #16]
 800d062:	f104 0e14 	add.w	lr, r4, #20
 800d066:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d06a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	9b01      	ldr	r3, [sp, #4]
 800d072:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d076:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d07a:	b281      	uxth	r1, r0
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	fa1f f38a 	uxth.w	r3, sl
 800d082:	1a5b      	subs	r3, r3, r1
 800d084:	0c00      	lsrs	r0, r0, #16
 800d086:	4463      	add	r3, ip
 800d088:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d08c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d090:	b29b      	uxth	r3, r3
 800d092:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d096:	4576      	cmp	r6, lr
 800d098:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d09c:	f849 3b04 	str.w	r3, [r9], #4
 800d0a0:	d8e6      	bhi.n	800d070 <__mdiff+0x88>
 800d0a2:	1b33      	subs	r3, r6, r4
 800d0a4:	3b15      	subs	r3, #21
 800d0a6:	f023 0303 	bic.w	r3, r3, #3
 800d0aa:	3415      	adds	r4, #21
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	42a6      	cmp	r6, r4
 800d0b0:	bf38      	it	cc
 800d0b2:	2304      	movcc	r3, #4
 800d0b4:	441d      	add	r5, r3
 800d0b6:	445b      	add	r3, fp
 800d0b8:	461e      	mov	r6, r3
 800d0ba:	462c      	mov	r4, r5
 800d0bc:	4544      	cmp	r4, r8
 800d0be:	d30e      	bcc.n	800d0de <__mdiff+0xf6>
 800d0c0:	f108 0103 	add.w	r1, r8, #3
 800d0c4:	1b49      	subs	r1, r1, r5
 800d0c6:	f021 0103 	bic.w	r1, r1, #3
 800d0ca:	3d03      	subs	r5, #3
 800d0cc:	45a8      	cmp	r8, r5
 800d0ce:	bf38      	it	cc
 800d0d0:	2100      	movcc	r1, #0
 800d0d2:	440b      	add	r3, r1
 800d0d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0d8:	b199      	cbz	r1, 800d102 <__mdiff+0x11a>
 800d0da:	6117      	str	r7, [r2, #16]
 800d0dc:	e79e      	b.n	800d01c <__mdiff+0x34>
 800d0de:	46e6      	mov	lr, ip
 800d0e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0e4:	fa1f fc81 	uxth.w	ip, r1
 800d0e8:	44f4      	add	ip, lr
 800d0ea:	0c08      	lsrs	r0, r1, #16
 800d0ec:	4471      	add	r1, lr
 800d0ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0f2:	b289      	uxth	r1, r1
 800d0f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0fc:	f846 1b04 	str.w	r1, [r6], #4
 800d100:	e7dc      	b.n	800d0bc <__mdiff+0xd4>
 800d102:	3f01      	subs	r7, #1
 800d104:	e7e6      	b.n	800d0d4 <__mdiff+0xec>
 800d106:	bf00      	nop
 800d108:	0800e449 	.word	0x0800e449
 800d10c:	0800e4ba 	.word	0x0800e4ba

0800d110 <__ulp>:
 800d110:	4b0e      	ldr	r3, [pc, #56]	@ (800d14c <__ulp+0x3c>)
 800d112:	400b      	ands	r3, r1
 800d114:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	dc08      	bgt.n	800d12e <__ulp+0x1e>
 800d11c:	425b      	negs	r3, r3
 800d11e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d122:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d126:	da04      	bge.n	800d132 <__ulp+0x22>
 800d128:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d12c:	4113      	asrs	r3, r2
 800d12e:	2200      	movs	r2, #0
 800d130:	e008      	b.n	800d144 <__ulp+0x34>
 800d132:	f1a2 0314 	sub.w	r3, r2, #20
 800d136:	2b1e      	cmp	r3, #30
 800d138:	bfd6      	itet	le
 800d13a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d13e:	2201      	movgt	r2, #1
 800d140:	40da      	lsrle	r2, r3
 800d142:	2300      	movs	r3, #0
 800d144:	4619      	mov	r1, r3
 800d146:	4610      	mov	r0, r2
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	7ff00000 	.word	0x7ff00000

0800d150 <__b2d>:
 800d150:	6902      	ldr	r2, [r0, #16]
 800d152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d154:	f100 0614 	add.w	r6, r0, #20
 800d158:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d15c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d160:	4f1e      	ldr	r7, [pc, #120]	@ (800d1dc <__b2d+0x8c>)
 800d162:	4620      	mov	r0, r4
 800d164:	f7ff fd54 	bl	800cc10 <__hi0bits>
 800d168:	4603      	mov	r3, r0
 800d16a:	f1c0 0020 	rsb	r0, r0, #32
 800d16e:	2b0a      	cmp	r3, #10
 800d170:	f1a2 0504 	sub.w	r5, r2, #4
 800d174:	6008      	str	r0, [r1, #0]
 800d176:	dc12      	bgt.n	800d19e <__b2d+0x4e>
 800d178:	42ae      	cmp	r6, r5
 800d17a:	bf2c      	ite	cs
 800d17c:	2200      	movcs	r2, #0
 800d17e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d182:	f1c3 0c0b 	rsb	ip, r3, #11
 800d186:	3315      	adds	r3, #21
 800d188:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d18c:	fa04 f303 	lsl.w	r3, r4, r3
 800d190:	fa22 f20c 	lsr.w	r2, r2, ip
 800d194:	ea4e 0107 	orr.w	r1, lr, r7
 800d198:	431a      	orrs	r2, r3
 800d19a:	4610      	mov	r0, r2
 800d19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d19e:	42ae      	cmp	r6, r5
 800d1a0:	bf36      	itet	cc
 800d1a2:	f1a2 0508 	subcc.w	r5, r2, #8
 800d1a6:	2200      	movcs	r2, #0
 800d1a8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d1ac:	3b0b      	subs	r3, #11
 800d1ae:	d012      	beq.n	800d1d6 <__b2d+0x86>
 800d1b0:	f1c3 0720 	rsb	r7, r3, #32
 800d1b4:	fa22 f107 	lsr.w	r1, r2, r7
 800d1b8:	409c      	lsls	r4, r3
 800d1ba:	430c      	orrs	r4, r1
 800d1bc:	42b5      	cmp	r5, r6
 800d1be:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d1c2:	bf94      	ite	ls
 800d1c4:	2400      	movls	r4, #0
 800d1c6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d1ca:	409a      	lsls	r2, r3
 800d1cc:	40fc      	lsrs	r4, r7
 800d1ce:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d1d2:	4322      	orrs	r2, r4
 800d1d4:	e7e1      	b.n	800d19a <__b2d+0x4a>
 800d1d6:	ea44 0107 	orr.w	r1, r4, r7
 800d1da:	e7de      	b.n	800d19a <__b2d+0x4a>
 800d1dc:	3ff00000 	.word	0x3ff00000

0800d1e0 <__d2b>:
 800d1e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d1e4:	2101      	movs	r1, #1
 800d1e6:	4690      	mov	r8, r2
 800d1e8:	4699      	mov	r9, r3
 800d1ea:	9e08      	ldr	r6, [sp, #32]
 800d1ec:	f7ff fc1e 	bl	800ca2c <_Balloc>
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	b930      	cbnz	r0, 800d202 <__d2b+0x22>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1fa:	4b23      	ldr	r3, [pc, #140]	@ (800d288 <__d2b+0xa8>)
 800d1fc:	4823      	ldr	r0, [pc, #140]	@ (800d28c <__d2b+0xac>)
 800d1fe:	f000 faf1 	bl	800d7e4 <__assert_func>
 800d202:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d206:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d20a:	b10d      	cbz	r5, 800d210 <__d2b+0x30>
 800d20c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	f1b8 0300 	subs.w	r3, r8, #0
 800d216:	d024      	beq.n	800d262 <__d2b+0x82>
 800d218:	4668      	mov	r0, sp
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	f7ff fd17 	bl	800cc4e <__lo0bits>
 800d220:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d224:	b1d8      	cbz	r0, 800d25e <__d2b+0x7e>
 800d226:	f1c0 0320 	rsb	r3, r0, #32
 800d22a:	fa02 f303 	lsl.w	r3, r2, r3
 800d22e:	430b      	orrs	r3, r1
 800d230:	40c2      	lsrs	r2, r0
 800d232:	6163      	str	r3, [r4, #20]
 800d234:	9201      	str	r2, [sp, #4]
 800d236:	9b01      	ldr	r3, [sp, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	bf0c      	ite	eq
 800d23c:	2201      	moveq	r2, #1
 800d23e:	2202      	movne	r2, #2
 800d240:	61a3      	str	r3, [r4, #24]
 800d242:	6122      	str	r2, [r4, #16]
 800d244:	b1ad      	cbz	r5, 800d272 <__d2b+0x92>
 800d246:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d24a:	4405      	add	r5, r0
 800d24c:	6035      	str	r5, [r6, #0]
 800d24e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d254:	6018      	str	r0, [r3, #0]
 800d256:	4620      	mov	r0, r4
 800d258:	b002      	add	sp, #8
 800d25a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d25e:	6161      	str	r1, [r4, #20]
 800d260:	e7e9      	b.n	800d236 <__d2b+0x56>
 800d262:	a801      	add	r0, sp, #4
 800d264:	f7ff fcf3 	bl	800cc4e <__lo0bits>
 800d268:	9b01      	ldr	r3, [sp, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	6163      	str	r3, [r4, #20]
 800d26e:	3020      	adds	r0, #32
 800d270:	e7e7      	b.n	800d242 <__d2b+0x62>
 800d272:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d276:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d27a:	6030      	str	r0, [r6, #0]
 800d27c:	6918      	ldr	r0, [r3, #16]
 800d27e:	f7ff fcc7 	bl	800cc10 <__hi0bits>
 800d282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d286:	e7e4      	b.n	800d252 <__d2b+0x72>
 800d288:	0800e449 	.word	0x0800e449
 800d28c:	0800e4ba 	.word	0x0800e4ba

0800d290 <__ratio>:
 800d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	b085      	sub	sp, #20
 800d296:	e9cd 1000 	strd	r1, r0, [sp]
 800d29a:	a902      	add	r1, sp, #8
 800d29c:	f7ff ff58 	bl	800d150 <__b2d>
 800d2a0:	468b      	mov	fp, r1
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	9800      	ldr	r0, [sp, #0]
 800d2a8:	a903      	add	r1, sp, #12
 800d2aa:	f7ff ff51 	bl	800d150 <__b2d>
 800d2ae:	460d      	mov	r5, r1
 800d2b0:	9b01      	ldr	r3, [sp, #4]
 800d2b2:	4689      	mov	r9, r1
 800d2b4:	6919      	ldr	r1, [r3, #16]
 800d2b6:	9b00      	ldr	r3, [sp, #0]
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	4630      	mov	r0, r6
 800d2be:	1ac9      	subs	r1, r1, r3
 800d2c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	bfcd      	iteet	gt
 800d2ce:	463a      	movgt	r2, r7
 800d2d0:	462a      	movle	r2, r5
 800d2d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d2d6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d2da:	bfd8      	it	le
 800d2dc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d2e0:	464b      	mov	r3, r9
 800d2e2:	4622      	mov	r2, r4
 800d2e4:	4659      	mov	r1, fp
 800d2e6:	f7f3 fa21 	bl	800072c <__aeabi_ddiv>
 800d2ea:	b005      	add	sp, #20
 800d2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d2f0 <__copybits>:
 800d2f0:	3901      	subs	r1, #1
 800d2f2:	b570      	push	{r4, r5, r6, lr}
 800d2f4:	1149      	asrs	r1, r1, #5
 800d2f6:	6914      	ldr	r4, [r2, #16]
 800d2f8:	3101      	adds	r1, #1
 800d2fa:	f102 0314 	add.w	r3, r2, #20
 800d2fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d302:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d306:	1f05      	subs	r5, r0, #4
 800d308:	42a3      	cmp	r3, r4
 800d30a:	d30c      	bcc.n	800d326 <__copybits+0x36>
 800d30c:	1aa3      	subs	r3, r4, r2
 800d30e:	3b11      	subs	r3, #17
 800d310:	f023 0303 	bic.w	r3, r3, #3
 800d314:	3211      	adds	r2, #17
 800d316:	42a2      	cmp	r2, r4
 800d318:	bf88      	it	hi
 800d31a:	2300      	movhi	r3, #0
 800d31c:	4418      	add	r0, r3
 800d31e:	2300      	movs	r3, #0
 800d320:	4288      	cmp	r0, r1
 800d322:	d305      	bcc.n	800d330 <__copybits+0x40>
 800d324:	bd70      	pop	{r4, r5, r6, pc}
 800d326:	f853 6b04 	ldr.w	r6, [r3], #4
 800d32a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d32e:	e7eb      	b.n	800d308 <__copybits+0x18>
 800d330:	f840 3b04 	str.w	r3, [r0], #4
 800d334:	e7f4      	b.n	800d320 <__copybits+0x30>

0800d336 <__any_on>:
 800d336:	f100 0214 	add.w	r2, r0, #20
 800d33a:	6900      	ldr	r0, [r0, #16]
 800d33c:	114b      	asrs	r3, r1, #5
 800d33e:	4298      	cmp	r0, r3
 800d340:	b510      	push	{r4, lr}
 800d342:	db11      	blt.n	800d368 <__any_on+0x32>
 800d344:	dd0a      	ble.n	800d35c <__any_on+0x26>
 800d346:	f011 011f 	ands.w	r1, r1, #31
 800d34a:	d007      	beq.n	800d35c <__any_on+0x26>
 800d34c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d350:	fa24 f001 	lsr.w	r0, r4, r1
 800d354:	fa00 f101 	lsl.w	r1, r0, r1
 800d358:	428c      	cmp	r4, r1
 800d35a:	d10b      	bne.n	800d374 <__any_on+0x3e>
 800d35c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d360:	4293      	cmp	r3, r2
 800d362:	d803      	bhi.n	800d36c <__any_on+0x36>
 800d364:	2000      	movs	r0, #0
 800d366:	bd10      	pop	{r4, pc}
 800d368:	4603      	mov	r3, r0
 800d36a:	e7f7      	b.n	800d35c <__any_on+0x26>
 800d36c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d370:	2900      	cmp	r1, #0
 800d372:	d0f5      	beq.n	800d360 <__any_on+0x2a>
 800d374:	2001      	movs	r0, #1
 800d376:	e7f6      	b.n	800d366 <__any_on+0x30>

0800d378 <__ascii_wctomb>:
 800d378:	4603      	mov	r3, r0
 800d37a:	4608      	mov	r0, r1
 800d37c:	b141      	cbz	r1, 800d390 <__ascii_wctomb+0x18>
 800d37e:	2aff      	cmp	r2, #255	@ 0xff
 800d380:	d904      	bls.n	800d38c <__ascii_wctomb+0x14>
 800d382:	228a      	movs	r2, #138	@ 0x8a
 800d384:	f04f 30ff 	mov.w	r0, #4294967295
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	4770      	bx	lr
 800d38c:	2001      	movs	r0, #1
 800d38e:	700a      	strb	r2, [r1, #0]
 800d390:	4770      	bx	lr

0800d392 <__ssputs_r>:
 800d392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d396:	461f      	mov	r7, r3
 800d398:	688e      	ldr	r6, [r1, #8]
 800d39a:	4682      	mov	sl, r0
 800d39c:	42be      	cmp	r6, r7
 800d39e:	460c      	mov	r4, r1
 800d3a0:	4690      	mov	r8, r2
 800d3a2:	680b      	ldr	r3, [r1, #0]
 800d3a4:	d82d      	bhi.n	800d402 <__ssputs_r+0x70>
 800d3a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d3aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d3ae:	d026      	beq.n	800d3fe <__ssputs_r+0x6c>
 800d3b0:	6965      	ldr	r5, [r4, #20]
 800d3b2:	6909      	ldr	r1, [r1, #16]
 800d3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3b8:	eba3 0901 	sub.w	r9, r3, r1
 800d3bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3c0:	1c7b      	adds	r3, r7, #1
 800d3c2:	444b      	add	r3, r9
 800d3c4:	106d      	asrs	r5, r5, #1
 800d3c6:	429d      	cmp	r5, r3
 800d3c8:	bf38      	it	cc
 800d3ca:	461d      	movcc	r5, r3
 800d3cc:	0553      	lsls	r3, r2, #21
 800d3ce:	d527      	bpl.n	800d420 <__ssputs_r+0x8e>
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	f7ff fa8d 	bl	800c8f0 <_malloc_r>
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	b360      	cbz	r0, 800d434 <__ssputs_r+0xa2>
 800d3da:	464a      	mov	r2, r9
 800d3dc:	6921      	ldr	r1, [r4, #16]
 800d3de:	f7fe f876 	bl	800b4ce <memcpy>
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d3e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ec:	81a3      	strh	r3, [r4, #12]
 800d3ee:	6126      	str	r6, [r4, #16]
 800d3f0:	444e      	add	r6, r9
 800d3f2:	6026      	str	r6, [r4, #0]
 800d3f4:	463e      	mov	r6, r7
 800d3f6:	6165      	str	r5, [r4, #20]
 800d3f8:	eba5 0509 	sub.w	r5, r5, r9
 800d3fc:	60a5      	str	r5, [r4, #8]
 800d3fe:	42be      	cmp	r6, r7
 800d400:	d900      	bls.n	800d404 <__ssputs_r+0x72>
 800d402:	463e      	mov	r6, r7
 800d404:	4632      	mov	r2, r6
 800d406:	4641      	mov	r1, r8
 800d408:	6820      	ldr	r0, [r4, #0]
 800d40a:	f000 f9c1 	bl	800d790 <memmove>
 800d40e:	2000      	movs	r0, #0
 800d410:	68a3      	ldr	r3, [r4, #8]
 800d412:	1b9b      	subs	r3, r3, r6
 800d414:	60a3      	str	r3, [r4, #8]
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	4433      	add	r3, r6
 800d41a:	6023      	str	r3, [r4, #0]
 800d41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d420:	462a      	mov	r2, r5
 800d422:	f000 fa11 	bl	800d848 <_realloc_r>
 800d426:	4606      	mov	r6, r0
 800d428:	2800      	cmp	r0, #0
 800d42a:	d1e0      	bne.n	800d3ee <__ssputs_r+0x5c>
 800d42c:	4650      	mov	r0, sl
 800d42e:	6921      	ldr	r1, [r4, #16]
 800d430:	f7fe feb2 	bl	800c198 <_free_r>
 800d434:	230c      	movs	r3, #12
 800d436:	f8ca 3000 	str.w	r3, [sl]
 800d43a:	89a3      	ldrh	r3, [r4, #12]
 800d43c:	f04f 30ff 	mov.w	r0, #4294967295
 800d440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d444:	81a3      	strh	r3, [r4, #12]
 800d446:	e7e9      	b.n	800d41c <__ssputs_r+0x8a>

0800d448 <_svfiprintf_r>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	4698      	mov	r8, r3
 800d44e:	898b      	ldrh	r3, [r1, #12]
 800d450:	4607      	mov	r7, r0
 800d452:	061b      	lsls	r3, r3, #24
 800d454:	460d      	mov	r5, r1
 800d456:	4614      	mov	r4, r2
 800d458:	b09d      	sub	sp, #116	@ 0x74
 800d45a:	d510      	bpl.n	800d47e <_svfiprintf_r+0x36>
 800d45c:	690b      	ldr	r3, [r1, #16]
 800d45e:	b973      	cbnz	r3, 800d47e <_svfiprintf_r+0x36>
 800d460:	2140      	movs	r1, #64	@ 0x40
 800d462:	f7ff fa45 	bl	800c8f0 <_malloc_r>
 800d466:	6028      	str	r0, [r5, #0]
 800d468:	6128      	str	r0, [r5, #16]
 800d46a:	b930      	cbnz	r0, 800d47a <_svfiprintf_r+0x32>
 800d46c:	230c      	movs	r3, #12
 800d46e:	603b      	str	r3, [r7, #0]
 800d470:	f04f 30ff 	mov.w	r0, #4294967295
 800d474:	b01d      	add	sp, #116	@ 0x74
 800d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47a:	2340      	movs	r3, #64	@ 0x40
 800d47c:	616b      	str	r3, [r5, #20]
 800d47e:	2300      	movs	r3, #0
 800d480:	9309      	str	r3, [sp, #36]	@ 0x24
 800d482:	2320      	movs	r3, #32
 800d484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d488:	2330      	movs	r3, #48	@ 0x30
 800d48a:	f04f 0901 	mov.w	r9, #1
 800d48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d492:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d62c <_svfiprintf_r+0x1e4>
 800d496:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d49a:	4623      	mov	r3, r4
 800d49c:	469a      	mov	sl, r3
 800d49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4a2:	b10a      	cbz	r2, 800d4a8 <_svfiprintf_r+0x60>
 800d4a4:	2a25      	cmp	r2, #37	@ 0x25
 800d4a6:	d1f9      	bne.n	800d49c <_svfiprintf_r+0x54>
 800d4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ac:	d00b      	beq.n	800d4c6 <_svfiprintf_r+0x7e>
 800d4ae:	465b      	mov	r3, fp
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	4638      	mov	r0, r7
 800d4b6:	f7ff ff6c 	bl	800d392 <__ssputs_r>
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	f000 80a7 	beq.w	800d60e <_svfiprintf_r+0x1c6>
 800d4c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4c2:	445a      	add	r2, fp
 800d4c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f000 809f 	beq.w	800d60e <_svfiprintf_r+0x1c6>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4da:	f10a 0a01 	add.w	sl, sl, #1
 800d4de:	9304      	str	r3, [sp, #16]
 800d4e0:	9307      	str	r3, [sp, #28]
 800d4e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4e8:	4654      	mov	r4, sl
 800d4ea:	2205      	movs	r2, #5
 800d4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f0:	484e      	ldr	r0, [pc, #312]	@ (800d62c <_svfiprintf_r+0x1e4>)
 800d4f2:	f7fd ffde 	bl	800b4b2 <memchr>
 800d4f6:	9a04      	ldr	r2, [sp, #16]
 800d4f8:	b9d8      	cbnz	r0, 800d532 <_svfiprintf_r+0xea>
 800d4fa:	06d0      	lsls	r0, r2, #27
 800d4fc:	bf44      	itt	mi
 800d4fe:	2320      	movmi	r3, #32
 800d500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d504:	0711      	lsls	r1, r2, #28
 800d506:	bf44      	itt	mi
 800d508:	232b      	movmi	r3, #43	@ 0x2b
 800d50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d50e:	f89a 3000 	ldrb.w	r3, [sl]
 800d512:	2b2a      	cmp	r3, #42	@ 0x2a
 800d514:	d015      	beq.n	800d542 <_svfiprintf_r+0xfa>
 800d516:	4654      	mov	r4, sl
 800d518:	2000      	movs	r0, #0
 800d51a:	f04f 0c0a 	mov.w	ip, #10
 800d51e:	9a07      	ldr	r2, [sp, #28]
 800d520:	4621      	mov	r1, r4
 800d522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d526:	3b30      	subs	r3, #48	@ 0x30
 800d528:	2b09      	cmp	r3, #9
 800d52a:	d94b      	bls.n	800d5c4 <_svfiprintf_r+0x17c>
 800d52c:	b1b0      	cbz	r0, 800d55c <_svfiprintf_r+0x114>
 800d52e:	9207      	str	r2, [sp, #28]
 800d530:	e014      	b.n	800d55c <_svfiprintf_r+0x114>
 800d532:	eba0 0308 	sub.w	r3, r0, r8
 800d536:	fa09 f303 	lsl.w	r3, r9, r3
 800d53a:	4313      	orrs	r3, r2
 800d53c:	46a2      	mov	sl, r4
 800d53e:	9304      	str	r3, [sp, #16]
 800d540:	e7d2      	b.n	800d4e8 <_svfiprintf_r+0xa0>
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	1d19      	adds	r1, r3, #4
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	9103      	str	r1, [sp, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	bfbb      	ittet	lt
 800d54e:	425b      	neglt	r3, r3
 800d550:	f042 0202 	orrlt.w	r2, r2, #2
 800d554:	9307      	strge	r3, [sp, #28]
 800d556:	9307      	strlt	r3, [sp, #28]
 800d558:	bfb8      	it	lt
 800d55a:	9204      	strlt	r2, [sp, #16]
 800d55c:	7823      	ldrb	r3, [r4, #0]
 800d55e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d560:	d10a      	bne.n	800d578 <_svfiprintf_r+0x130>
 800d562:	7863      	ldrb	r3, [r4, #1]
 800d564:	2b2a      	cmp	r3, #42	@ 0x2a
 800d566:	d132      	bne.n	800d5ce <_svfiprintf_r+0x186>
 800d568:	9b03      	ldr	r3, [sp, #12]
 800d56a:	3402      	adds	r4, #2
 800d56c:	1d1a      	adds	r2, r3, #4
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	9203      	str	r2, [sp, #12]
 800d572:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d576:	9305      	str	r3, [sp, #20]
 800d578:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d630 <_svfiprintf_r+0x1e8>
 800d57c:	2203      	movs	r2, #3
 800d57e:	4650      	mov	r0, sl
 800d580:	7821      	ldrb	r1, [r4, #0]
 800d582:	f7fd ff96 	bl	800b4b2 <memchr>
 800d586:	b138      	cbz	r0, 800d598 <_svfiprintf_r+0x150>
 800d588:	2240      	movs	r2, #64	@ 0x40
 800d58a:	9b04      	ldr	r3, [sp, #16]
 800d58c:	eba0 000a 	sub.w	r0, r0, sl
 800d590:	4082      	lsls	r2, r0
 800d592:	4313      	orrs	r3, r2
 800d594:	3401      	adds	r4, #1
 800d596:	9304      	str	r3, [sp, #16]
 800d598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d59c:	2206      	movs	r2, #6
 800d59e:	4825      	ldr	r0, [pc, #148]	@ (800d634 <_svfiprintf_r+0x1ec>)
 800d5a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5a4:	f7fd ff85 	bl	800b4b2 <memchr>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	d036      	beq.n	800d61a <_svfiprintf_r+0x1d2>
 800d5ac:	4b22      	ldr	r3, [pc, #136]	@ (800d638 <_svfiprintf_r+0x1f0>)
 800d5ae:	bb1b      	cbnz	r3, 800d5f8 <_svfiprintf_r+0x1b0>
 800d5b0:	9b03      	ldr	r3, [sp, #12]
 800d5b2:	3307      	adds	r3, #7
 800d5b4:	f023 0307 	bic.w	r3, r3, #7
 800d5b8:	3308      	adds	r3, #8
 800d5ba:	9303      	str	r3, [sp, #12]
 800d5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5be:	4433      	add	r3, r6
 800d5c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c2:	e76a      	b.n	800d49a <_svfiprintf_r+0x52>
 800d5c4:	460c      	mov	r4, r1
 800d5c6:	2001      	movs	r0, #1
 800d5c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5cc:	e7a8      	b.n	800d520 <_svfiprintf_r+0xd8>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f04f 0c0a 	mov.w	ip, #10
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	3401      	adds	r4, #1
 800d5d8:	9305      	str	r3, [sp, #20]
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e0:	3a30      	subs	r2, #48	@ 0x30
 800d5e2:	2a09      	cmp	r2, #9
 800d5e4:	d903      	bls.n	800d5ee <_svfiprintf_r+0x1a6>
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d0c6      	beq.n	800d578 <_svfiprintf_r+0x130>
 800d5ea:	9105      	str	r1, [sp, #20]
 800d5ec:	e7c4      	b.n	800d578 <_svfiprintf_r+0x130>
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5f6:	e7f0      	b.n	800d5da <_svfiprintf_r+0x192>
 800d5f8:	ab03      	add	r3, sp, #12
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	462a      	mov	r2, r5
 800d5fe:	4638      	mov	r0, r7
 800d600:	4b0e      	ldr	r3, [pc, #56]	@ (800d63c <_svfiprintf_r+0x1f4>)
 800d602:	a904      	add	r1, sp, #16
 800d604:	f7fd f96e 	bl	800a8e4 <_printf_float>
 800d608:	1c42      	adds	r2, r0, #1
 800d60a:	4606      	mov	r6, r0
 800d60c:	d1d6      	bne.n	800d5bc <_svfiprintf_r+0x174>
 800d60e:	89ab      	ldrh	r3, [r5, #12]
 800d610:	065b      	lsls	r3, r3, #25
 800d612:	f53f af2d 	bmi.w	800d470 <_svfiprintf_r+0x28>
 800d616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d618:	e72c      	b.n	800d474 <_svfiprintf_r+0x2c>
 800d61a:	ab03      	add	r3, sp, #12
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	462a      	mov	r2, r5
 800d620:	4638      	mov	r0, r7
 800d622:	4b06      	ldr	r3, [pc, #24]	@ (800d63c <_svfiprintf_r+0x1f4>)
 800d624:	a904      	add	r1, sp, #16
 800d626:	f7fd fbfb 	bl	800ae20 <_printf_i>
 800d62a:	e7ed      	b.n	800d608 <_svfiprintf_r+0x1c0>
 800d62c:	0800e610 	.word	0x0800e610
 800d630:	0800e616 	.word	0x0800e616
 800d634:	0800e61a 	.word	0x0800e61a
 800d638:	0800a8e5 	.word	0x0800a8e5
 800d63c:	0800d393 	.word	0x0800d393

0800d640 <__sflush_r>:
 800d640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d646:	0716      	lsls	r6, r2, #28
 800d648:	4605      	mov	r5, r0
 800d64a:	460c      	mov	r4, r1
 800d64c:	d454      	bmi.n	800d6f8 <__sflush_r+0xb8>
 800d64e:	684b      	ldr	r3, [r1, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	dc02      	bgt.n	800d65a <__sflush_r+0x1a>
 800d654:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d656:	2b00      	cmp	r3, #0
 800d658:	dd48      	ble.n	800d6ec <__sflush_r+0xac>
 800d65a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d65c:	2e00      	cmp	r6, #0
 800d65e:	d045      	beq.n	800d6ec <__sflush_r+0xac>
 800d660:	2300      	movs	r3, #0
 800d662:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d666:	682f      	ldr	r7, [r5, #0]
 800d668:	6a21      	ldr	r1, [r4, #32]
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	d030      	beq.n	800d6d0 <__sflush_r+0x90>
 800d66e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d670:	89a3      	ldrh	r3, [r4, #12]
 800d672:	0759      	lsls	r1, r3, #29
 800d674:	d505      	bpl.n	800d682 <__sflush_r+0x42>
 800d676:	6863      	ldr	r3, [r4, #4]
 800d678:	1ad2      	subs	r2, r2, r3
 800d67a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d67c:	b10b      	cbz	r3, 800d682 <__sflush_r+0x42>
 800d67e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d680:	1ad2      	subs	r2, r2, r3
 800d682:	2300      	movs	r3, #0
 800d684:	4628      	mov	r0, r5
 800d686:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d688:	6a21      	ldr	r1, [r4, #32]
 800d68a:	47b0      	blx	r6
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	89a3      	ldrh	r3, [r4, #12]
 800d690:	d106      	bne.n	800d6a0 <__sflush_r+0x60>
 800d692:	6829      	ldr	r1, [r5, #0]
 800d694:	291d      	cmp	r1, #29
 800d696:	d82b      	bhi.n	800d6f0 <__sflush_r+0xb0>
 800d698:	4a28      	ldr	r2, [pc, #160]	@ (800d73c <__sflush_r+0xfc>)
 800d69a:	410a      	asrs	r2, r1
 800d69c:	07d6      	lsls	r6, r2, #31
 800d69e:	d427      	bmi.n	800d6f0 <__sflush_r+0xb0>
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	6062      	str	r2, [r4, #4]
 800d6a4:	6922      	ldr	r2, [r4, #16]
 800d6a6:	04d9      	lsls	r1, r3, #19
 800d6a8:	6022      	str	r2, [r4, #0]
 800d6aa:	d504      	bpl.n	800d6b6 <__sflush_r+0x76>
 800d6ac:	1c42      	adds	r2, r0, #1
 800d6ae:	d101      	bne.n	800d6b4 <__sflush_r+0x74>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	b903      	cbnz	r3, 800d6b6 <__sflush_r+0x76>
 800d6b4:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6b8:	602f      	str	r7, [r5, #0]
 800d6ba:	b1b9      	cbz	r1, 800d6ec <__sflush_r+0xac>
 800d6bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6c0:	4299      	cmp	r1, r3
 800d6c2:	d002      	beq.n	800d6ca <__sflush_r+0x8a>
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	f7fe fd67 	bl	800c198 <_free_r>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6ce:	e00d      	b.n	800d6ec <__sflush_r+0xac>
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	47b0      	blx	r6
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	1c50      	adds	r0, r2, #1
 800d6da:	d1c9      	bne.n	800d670 <__sflush_r+0x30>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d0c6      	beq.n	800d670 <__sflush_r+0x30>
 800d6e2:	2b1d      	cmp	r3, #29
 800d6e4:	d001      	beq.n	800d6ea <__sflush_r+0xaa>
 800d6e6:	2b16      	cmp	r3, #22
 800d6e8:	d11d      	bne.n	800d726 <__sflush_r+0xe6>
 800d6ea:	602f      	str	r7, [r5, #0]
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	e021      	b.n	800d734 <__sflush_r+0xf4>
 800d6f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6f4:	b21b      	sxth	r3, r3
 800d6f6:	e01a      	b.n	800d72e <__sflush_r+0xee>
 800d6f8:	690f      	ldr	r7, [r1, #16]
 800d6fa:	2f00      	cmp	r7, #0
 800d6fc:	d0f6      	beq.n	800d6ec <__sflush_r+0xac>
 800d6fe:	0793      	lsls	r3, r2, #30
 800d700:	bf18      	it	ne
 800d702:	2300      	movne	r3, #0
 800d704:	680e      	ldr	r6, [r1, #0]
 800d706:	bf08      	it	eq
 800d708:	694b      	ldreq	r3, [r1, #20]
 800d70a:	1bf6      	subs	r6, r6, r7
 800d70c:	600f      	str	r7, [r1, #0]
 800d70e:	608b      	str	r3, [r1, #8]
 800d710:	2e00      	cmp	r6, #0
 800d712:	ddeb      	ble.n	800d6ec <__sflush_r+0xac>
 800d714:	4633      	mov	r3, r6
 800d716:	463a      	mov	r2, r7
 800d718:	4628      	mov	r0, r5
 800d71a:	6a21      	ldr	r1, [r4, #32]
 800d71c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d720:	47e0      	blx	ip
 800d722:	2800      	cmp	r0, #0
 800d724:	dc07      	bgt.n	800d736 <__sflush_r+0xf6>
 800d726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d72a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d72e:	f04f 30ff 	mov.w	r0, #4294967295
 800d732:	81a3      	strh	r3, [r4, #12]
 800d734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d736:	4407      	add	r7, r0
 800d738:	1a36      	subs	r6, r6, r0
 800d73a:	e7e9      	b.n	800d710 <__sflush_r+0xd0>
 800d73c:	dfbffffe 	.word	0xdfbffffe

0800d740 <_fflush_r>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	690b      	ldr	r3, [r1, #16]
 800d744:	4605      	mov	r5, r0
 800d746:	460c      	mov	r4, r1
 800d748:	b913      	cbnz	r3, 800d750 <_fflush_r+0x10>
 800d74a:	2500      	movs	r5, #0
 800d74c:	4628      	mov	r0, r5
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
 800d750:	b118      	cbz	r0, 800d75a <_fflush_r+0x1a>
 800d752:	6a03      	ldr	r3, [r0, #32]
 800d754:	b90b      	cbnz	r3, 800d75a <_fflush_r+0x1a>
 800d756:	f7fd fd0f 	bl	800b178 <__sinit>
 800d75a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d0f3      	beq.n	800d74a <_fflush_r+0xa>
 800d762:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d764:	07d0      	lsls	r0, r2, #31
 800d766:	d404      	bmi.n	800d772 <_fflush_r+0x32>
 800d768:	0599      	lsls	r1, r3, #22
 800d76a:	d402      	bmi.n	800d772 <_fflush_r+0x32>
 800d76c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d76e:	f7fd fe9e 	bl	800b4ae <__retarget_lock_acquire_recursive>
 800d772:	4628      	mov	r0, r5
 800d774:	4621      	mov	r1, r4
 800d776:	f7ff ff63 	bl	800d640 <__sflush_r>
 800d77a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d77c:	4605      	mov	r5, r0
 800d77e:	07da      	lsls	r2, r3, #31
 800d780:	d4e4      	bmi.n	800d74c <_fflush_r+0xc>
 800d782:	89a3      	ldrh	r3, [r4, #12]
 800d784:	059b      	lsls	r3, r3, #22
 800d786:	d4e1      	bmi.n	800d74c <_fflush_r+0xc>
 800d788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d78a:	f7fd fe91 	bl	800b4b0 <__retarget_lock_release_recursive>
 800d78e:	e7dd      	b.n	800d74c <_fflush_r+0xc>

0800d790 <memmove>:
 800d790:	4288      	cmp	r0, r1
 800d792:	b510      	push	{r4, lr}
 800d794:	eb01 0402 	add.w	r4, r1, r2
 800d798:	d902      	bls.n	800d7a0 <memmove+0x10>
 800d79a:	4284      	cmp	r4, r0
 800d79c:	4623      	mov	r3, r4
 800d79e:	d807      	bhi.n	800d7b0 <memmove+0x20>
 800d7a0:	1e43      	subs	r3, r0, #1
 800d7a2:	42a1      	cmp	r1, r4
 800d7a4:	d008      	beq.n	800d7b8 <memmove+0x28>
 800d7a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7ae:	e7f8      	b.n	800d7a2 <memmove+0x12>
 800d7b0:	4601      	mov	r1, r0
 800d7b2:	4402      	add	r2, r0
 800d7b4:	428a      	cmp	r2, r1
 800d7b6:	d100      	bne.n	800d7ba <memmove+0x2a>
 800d7b8:	bd10      	pop	{r4, pc}
 800d7ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7c2:	e7f7      	b.n	800d7b4 <memmove+0x24>

0800d7c4 <_sbrk_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	4d05      	ldr	r5, [pc, #20]	@ (800d7e0 <_sbrk_r+0x1c>)
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4608      	mov	r0, r1
 800d7ce:	602b      	str	r3, [r5, #0]
 800d7d0:	f7f6 f994 	bl	8003afc <_sbrk>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	d102      	bne.n	800d7de <_sbrk_r+0x1a>
 800d7d8:	682b      	ldr	r3, [r5, #0]
 800d7da:	b103      	cbz	r3, 800d7de <_sbrk_r+0x1a>
 800d7dc:	6023      	str	r3, [r4, #0]
 800d7de:	bd38      	pop	{r3, r4, r5, pc}
 800d7e0:	20000888 	.word	0x20000888

0800d7e4 <__assert_func>:
 800d7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7e6:	4614      	mov	r4, r2
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	4b09      	ldr	r3, [pc, #36]	@ (800d810 <__assert_func+0x2c>)
 800d7ec:	4605      	mov	r5, r0
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	68d8      	ldr	r0, [r3, #12]
 800d7f2:	b954      	cbnz	r4, 800d80a <__assert_func+0x26>
 800d7f4:	4b07      	ldr	r3, [pc, #28]	@ (800d814 <__assert_func+0x30>)
 800d7f6:	461c      	mov	r4, r3
 800d7f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7fc:	9100      	str	r1, [sp, #0]
 800d7fe:	462b      	mov	r3, r5
 800d800:	4905      	ldr	r1, [pc, #20]	@ (800d818 <__assert_func+0x34>)
 800d802:	f000 f84f 	bl	800d8a4 <fiprintf>
 800d806:	f000 f85f 	bl	800d8c8 <abort>
 800d80a:	4b04      	ldr	r3, [pc, #16]	@ (800d81c <__assert_func+0x38>)
 800d80c:	e7f4      	b.n	800d7f8 <__assert_func+0x14>
 800d80e:	bf00      	nop
 800d810:	20000184 	.word	0x20000184
 800d814:	0800e65c 	.word	0x0800e65c
 800d818:	0800e62e 	.word	0x0800e62e
 800d81c:	0800e621 	.word	0x0800e621

0800d820 <_calloc_r>:
 800d820:	b570      	push	{r4, r5, r6, lr}
 800d822:	fba1 5402 	umull	r5, r4, r1, r2
 800d826:	b93c      	cbnz	r4, 800d838 <_calloc_r+0x18>
 800d828:	4629      	mov	r1, r5
 800d82a:	f7ff f861 	bl	800c8f0 <_malloc_r>
 800d82e:	4606      	mov	r6, r0
 800d830:	b928      	cbnz	r0, 800d83e <_calloc_r+0x1e>
 800d832:	2600      	movs	r6, #0
 800d834:	4630      	mov	r0, r6
 800d836:	bd70      	pop	{r4, r5, r6, pc}
 800d838:	220c      	movs	r2, #12
 800d83a:	6002      	str	r2, [r0, #0]
 800d83c:	e7f9      	b.n	800d832 <_calloc_r+0x12>
 800d83e:	462a      	mov	r2, r5
 800d840:	4621      	mov	r1, r4
 800d842:	f7fd fd66 	bl	800b312 <memset>
 800d846:	e7f5      	b.n	800d834 <_calloc_r+0x14>

0800d848 <_realloc_r>:
 800d848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84c:	4680      	mov	r8, r0
 800d84e:	4615      	mov	r5, r2
 800d850:	460c      	mov	r4, r1
 800d852:	b921      	cbnz	r1, 800d85e <_realloc_r+0x16>
 800d854:	4611      	mov	r1, r2
 800d856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d85a:	f7ff b849 	b.w	800c8f0 <_malloc_r>
 800d85e:	b92a      	cbnz	r2, 800d86c <_realloc_r+0x24>
 800d860:	f7fe fc9a 	bl	800c198 <_free_r>
 800d864:	2400      	movs	r4, #0
 800d866:	4620      	mov	r0, r4
 800d868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d86c:	f000 f833 	bl	800d8d6 <_malloc_usable_size_r>
 800d870:	4285      	cmp	r5, r0
 800d872:	4606      	mov	r6, r0
 800d874:	d802      	bhi.n	800d87c <_realloc_r+0x34>
 800d876:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d87a:	d8f4      	bhi.n	800d866 <_realloc_r+0x1e>
 800d87c:	4629      	mov	r1, r5
 800d87e:	4640      	mov	r0, r8
 800d880:	f7ff f836 	bl	800c8f0 <_malloc_r>
 800d884:	4607      	mov	r7, r0
 800d886:	2800      	cmp	r0, #0
 800d888:	d0ec      	beq.n	800d864 <_realloc_r+0x1c>
 800d88a:	42b5      	cmp	r5, r6
 800d88c:	462a      	mov	r2, r5
 800d88e:	4621      	mov	r1, r4
 800d890:	bf28      	it	cs
 800d892:	4632      	movcs	r2, r6
 800d894:	f7fd fe1b 	bl	800b4ce <memcpy>
 800d898:	4621      	mov	r1, r4
 800d89a:	4640      	mov	r0, r8
 800d89c:	f7fe fc7c 	bl	800c198 <_free_r>
 800d8a0:	463c      	mov	r4, r7
 800d8a2:	e7e0      	b.n	800d866 <_realloc_r+0x1e>

0800d8a4 <fiprintf>:
 800d8a4:	b40e      	push	{r1, r2, r3}
 800d8a6:	b503      	push	{r0, r1, lr}
 800d8a8:	4601      	mov	r1, r0
 800d8aa:	ab03      	add	r3, sp, #12
 800d8ac:	4805      	ldr	r0, [pc, #20]	@ (800d8c4 <fiprintf+0x20>)
 800d8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8b2:	6800      	ldr	r0, [r0, #0]
 800d8b4:	9301      	str	r3, [sp, #4]
 800d8b6:	f000 f83d 	bl	800d934 <_vfiprintf_r>
 800d8ba:	b002      	add	sp, #8
 800d8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8c0:	b003      	add	sp, #12
 800d8c2:	4770      	bx	lr
 800d8c4:	20000184 	.word	0x20000184

0800d8c8 <abort>:
 800d8c8:	2006      	movs	r0, #6
 800d8ca:	b508      	push	{r3, lr}
 800d8cc:	f000 fa06 	bl	800dcdc <raise>
 800d8d0:	2001      	movs	r0, #1
 800d8d2:	f7f6 f89e 	bl	8003a12 <_exit>

0800d8d6 <_malloc_usable_size_r>:
 800d8d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8da:	1f18      	subs	r0, r3, #4
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	bfbc      	itt	lt
 800d8e0:	580b      	ldrlt	r3, [r1, r0]
 800d8e2:	18c0      	addlt	r0, r0, r3
 800d8e4:	4770      	bx	lr

0800d8e6 <__sfputc_r>:
 800d8e6:	6893      	ldr	r3, [r2, #8]
 800d8e8:	b410      	push	{r4}
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	6093      	str	r3, [r2, #8]
 800d8f0:	da07      	bge.n	800d902 <__sfputc_r+0x1c>
 800d8f2:	6994      	ldr	r4, [r2, #24]
 800d8f4:	42a3      	cmp	r3, r4
 800d8f6:	db01      	blt.n	800d8fc <__sfputc_r+0x16>
 800d8f8:	290a      	cmp	r1, #10
 800d8fa:	d102      	bne.n	800d902 <__sfputc_r+0x1c>
 800d8fc:	bc10      	pop	{r4}
 800d8fe:	f000 b931 	b.w	800db64 <__swbuf_r>
 800d902:	6813      	ldr	r3, [r2, #0]
 800d904:	1c58      	adds	r0, r3, #1
 800d906:	6010      	str	r0, [r2, #0]
 800d908:	7019      	strb	r1, [r3, #0]
 800d90a:	4608      	mov	r0, r1
 800d90c:	bc10      	pop	{r4}
 800d90e:	4770      	bx	lr

0800d910 <__sfputs_r>:
 800d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d912:	4606      	mov	r6, r0
 800d914:	460f      	mov	r7, r1
 800d916:	4614      	mov	r4, r2
 800d918:	18d5      	adds	r5, r2, r3
 800d91a:	42ac      	cmp	r4, r5
 800d91c:	d101      	bne.n	800d922 <__sfputs_r+0x12>
 800d91e:	2000      	movs	r0, #0
 800d920:	e007      	b.n	800d932 <__sfputs_r+0x22>
 800d922:	463a      	mov	r2, r7
 800d924:	4630      	mov	r0, r6
 800d926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92a:	f7ff ffdc 	bl	800d8e6 <__sfputc_r>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	d1f3      	bne.n	800d91a <__sfputs_r+0xa>
 800d932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d934 <_vfiprintf_r>:
 800d934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d938:	460d      	mov	r5, r1
 800d93a:	4614      	mov	r4, r2
 800d93c:	4698      	mov	r8, r3
 800d93e:	4606      	mov	r6, r0
 800d940:	b09d      	sub	sp, #116	@ 0x74
 800d942:	b118      	cbz	r0, 800d94c <_vfiprintf_r+0x18>
 800d944:	6a03      	ldr	r3, [r0, #32]
 800d946:	b90b      	cbnz	r3, 800d94c <_vfiprintf_r+0x18>
 800d948:	f7fd fc16 	bl	800b178 <__sinit>
 800d94c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d94e:	07d9      	lsls	r1, r3, #31
 800d950:	d405      	bmi.n	800d95e <_vfiprintf_r+0x2a>
 800d952:	89ab      	ldrh	r3, [r5, #12]
 800d954:	059a      	lsls	r2, r3, #22
 800d956:	d402      	bmi.n	800d95e <_vfiprintf_r+0x2a>
 800d958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d95a:	f7fd fda8 	bl	800b4ae <__retarget_lock_acquire_recursive>
 800d95e:	89ab      	ldrh	r3, [r5, #12]
 800d960:	071b      	lsls	r3, r3, #28
 800d962:	d501      	bpl.n	800d968 <_vfiprintf_r+0x34>
 800d964:	692b      	ldr	r3, [r5, #16]
 800d966:	b99b      	cbnz	r3, 800d990 <_vfiprintf_r+0x5c>
 800d968:	4629      	mov	r1, r5
 800d96a:	4630      	mov	r0, r6
 800d96c:	f000 f938 	bl	800dbe0 <__swsetup_r>
 800d970:	b170      	cbz	r0, 800d990 <_vfiprintf_r+0x5c>
 800d972:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d974:	07dc      	lsls	r4, r3, #31
 800d976:	d504      	bpl.n	800d982 <_vfiprintf_r+0x4e>
 800d978:	f04f 30ff 	mov.w	r0, #4294967295
 800d97c:	b01d      	add	sp, #116	@ 0x74
 800d97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d982:	89ab      	ldrh	r3, [r5, #12]
 800d984:	0598      	lsls	r0, r3, #22
 800d986:	d4f7      	bmi.n	800d978 <_vfiprintf_r+0x44>
 800d988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d98a:	f7fd fd91 	bl	800b4b0 <__retarget_lock_release_recursive>
 800d98e:	e7f3      	b.n	800d978 <_vfiprintf_r+0x44>
 800d990:	2300      	movs	r3, #0
 800d992:	9309      	str	r3, [sp, #36]	@ 0x24
 800d994:	2320      	movs	r3, #32
 800d996:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d99a:	2330      	movs	r3, #48	@ 0x30
 800d99c:	f04f 0901 	mov.w	r9, #1
 800d9a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800db50 <_vfiprintf_r+0x21c>
 800d9a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9ac:	4623      	mov	r3, r4
 800d9ae:	469a      	mov	sl, r3
 800d9b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9b4:	b10a      	cbz	r2, 800d9ba <_vfiprintf_r+0x86>
 800d9b6:	2a25      	cmp	r2, #37	@ 0x25
 800d9b8:	d1f9      	bne.n	800d9ae <_vfiprintf_r+0x7a>
 800d9ba:	ebba 0b04 	subs.w	fp, sl, r4
 800d9be:	d00b      	beq.n	800d9d8 <_vfiprintf_r+0xa4>
 800d9c0:	465b      	mov	r3, fp
 800d9c2:	4622      	mov	r2, r4
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f7ff ffa2 	bl	800d910 <__sfputs_r>
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	f000 80a7 	beq.w	800db20 <_vfiprintf_r+0x1ec>
 800d9d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9d4:	445a      	add	r2, fp
 800d9d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f000 809f 	beq.w	800db20 <_vfiprintf_r+0x1ec>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9ec:	f10a 0a01 	add.w	sl, sl, #1
 800d9f0:	9304      	str	r3, [sp, #16]
 800d9f2:	9307      	str	r3, [sp, #28]
 800d9f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9fa:	4654      	mov	r4, sl
 800d9fc:	2205      	movs	r2, #5
 800d9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da02:	4853      	ldr	r0, [pc, #332]	@ (800db50 <_vfiprintf_r+0x21c>)
 800da04:	f7fd fd55 	bl	800b4b2 <memchr>
 800da08:	9a04      	ldr	r2, [sp, #16]
 800da0a:	b9d8      	cbnz	r0, 800da44 <_vfiprintf_r+0x110>
 800da0c:	06d1      	lsls	r1, r2, #27
 800da0e:	bf44      	itt	mi
 800da10:	2320      	movmi	r3, #32
 800da12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da16:	0713      	lsls	r3, r2, #28
 800da18:	bf44      	itt	mi
 800da1a:	232b      	movmi	r3, #43	@ 0x2b
 800da1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da20:	f89a 3000 	ldrb.w	r3, [sl]
 800da24:	2b2a      	cmp	r3, #42	@ 0x2a
 800da26:	d015      	beq.n	800da54 <_vfiprintf_r+0x120>
 800da28:	4654      	mov	r4, sl
 800da2a:	2000      	movs	r0, #0
 800da2c:	f04f 0c0a 	mov.w	ip, #10
 800da30:	9a07      	ldr	r2, [sp, #28]
 800da32:	4621      	mov	r1, r4
 800da34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da38:	3b30      	subs	r3, #48	@ 0x30
 800da3a:	2b09      	cmp	r3, #9
 800da3c:	d94b      	bls.n	800dad6 <_vfiprintf_r+0x1a2>
 800da3e:	b1b0      	cbz	r0, 800da6e <_vfiprintf_r+0x13a>
 800da40:	9207      	str	r2, [sp, #28]
 800da42:	e014      	b.n	800da6e <_vfiprintf_r+0x13a>
 800da44:	eba0 0308 	sub.w	r3, r0, r8
 800da48:	fa09 f303 	lsl.w	r3, r9, r3
 800da4c:	4313      	orrs	r3, r2
 800da4e:	46a2      	mov	sl, r4
 800da50:	9304      	str	r3, [sp, #16]
 800da52:	e7d2      	b.n	800d9fa <_vfiprintf_r+0xc6>
 800da54:	9b03      	ldr	r3, [sp, #12]
 800da56:	1d19      	adds	r1, r3, #4
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	9103      	str	r1, [sp, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	bfbb      	ittet	lt
 800da60:	425b      	neglt	r3, r3
 800da62:	f042 0202 	orrlt.w	r2, r2, #2
 800da66:	9307      	strge	r3, [sp, #28]
 800da68:	9307      	strlt	r3, [sp, #28]
 800da6a:	bfb8      	it	lt
 800da6c:	9204      	strlt	r2, [sp, #16]
 800da6e:	7823      	ldrb	r3, [r4, #0]
 800da70:	2b2e      	cmp	r3, #46	@ 0x2e
 800da72:	d10a      	bne.n	800da8a <_vfiprintf_r+0x156>
 800da74:	7863      	ldrb	r3, [r4, #1]
 800da76:	2b2a      	cmp	r3, #42	@ 0x2a
 800da78:	d132      	bne.n	800dae0 <_vfiprintf_r+0x1ac>
 800da7a:	9b03      	ldr	r3, [sp, #12]
 800da7c:	3402      	adds	r4, #2
 800da7e:	1d1a      	adds	r2, r3, #4
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	9203      	str	r2, [sp, #12]
 800da84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da88:	9305      	str	r3, [sp, #20]
 800da8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800db54 <_vfiprintf_r+0x220>
 800da8e:	2203      	movs	r2, #3
 800da90:	4650      	mov	r0, sl
 800da92:	7821      	ldrb	r1, [r4, #0]
 800da94:	f7fd fd0d 	bl	800b4b2 <memchr>
 800da98:	b138      	cbz	r0, 800daaa <_vfiprintf_r+0x176>
 800da9a:	2240      	movs	r2, #64	@ 0x40
 800da9c:	9b04      	ldr	r3, [sp, #16]
 800da9e:	eba0 000a 	sub.w	r0, r0, sl
 800daa2:	4082      	lsls	r2, r0
 800daa4:	4313      	orrs	r3, r2
 800daa6:	3401      	adds	r4, #1
 800daa8:	9304      	str	r3, [sp, #16]
 800daaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daae:	2206      	movs	r2, #6
 800dab0:	4829      	ldr	r0, [pc, #164]	@ (800db58 <_vfiprintf_r+0x224>)
 800dab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dab6:	f7fd fcfc 	bl	800b4b2 <memchr>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d03f      	beq.n	800db3e <_vfiprintf_r+0x20a>
 800dabe:	4b27      	ldr	r3, [pc, #156]	@ (800db5c <_vfiprintf_r+0x228>)
 800dac0:	bb1b      	cbnz	r3, 800db0a <_vfiprintf_r+0x1d6>
 800dac2:	9b03      	ldr	r3, [sp, #12]
 800dac4:	3307      	adds	r3, #7
 800dac6:	f023 0307 	bic.w	r3, r3, #7
 800daca:	3308      	adds	r3, #8
 800dacc:	9303      	str	r3, [sp, #12]
 800dace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dad0:	443b      	add	r3, r7
 800dad2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dad4:	e76a      	b.n	800d9ac <_vfiprintf_r+0x78>
 800dad6:	460c      	mov	r4, r1
 800dad8:	2001      	movs	r0, #1
 800dada:	fb0c 3202 	mla	r2, ip, r2, r3
 800dade:	e7a8      	b.n	800da32 <_vfiprintf_r+0xfe>
 800dae0:	2300      	movs	r3, #0
 800dae2:	f04f 0c0a 	mov.w	ip, #10
 800dae6:	4619      	mov	r1, r3
 800dae8:	3401      	adds	r4, #1
 800daea:	9305      	str	r3, [sp, #20]
 800daec:	4620      	mov	r0, r4
 800daee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daf2:	3a30      	subs	r2, #48	@ 0x30
 800daf4:	2a09      	cmp	r2, #9
 800daf6:	d903      	bls.n	800db00 <_vfiprintf_r+0x1cc>
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d0c6      	beq.n	800da8a <_vfiprintf_r+0x156>
 800dafc:	9105      	str	r1, [sp, #20]
 800dafe:	e7c4      	b.n	800da8a <_vfiprintf_r+0x156>
 800db00:	4604      	mov	r4, r0
 800db02:	2301      	movs	r3, #1
 800db04:	fb0c 2101 	mla	r1, ip, r1, r2
 800db08:	e7f0      	b.n	800daec <_vfiprintf_r+0x1b8>
 800db0a:	ab03      	add	r3, sp, #12
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	462a      	mov	r2, r5
 800db10:	4630      	mov	r0, r6
 800db12:	4b13      	ldr	r3, [pc, #76]	@ (800db60 <_vfiprintf_r+0x22c>)
 800db14:	a904      	add	r1, sp, #16
 800db16:	f7fc fee5 	bl	800a8e4 <_printf_float>
 800db1a:	4607      	mov	r7, r0
 800db1c:	1c78      	adds	r0, r7, #1
 800db1e:	d1d6      	bne.n	800dace <_vfiprintf_r+0x19a>
 800db20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db22:	07d9      	lsls	r1, r3, #31
 800db24:	d405      	bmi.n	800db32 <_vfiprintf_r+0x1fe>
 800db26:	89ab      	ldrh	r3, [r5, #12]
 800db28:	059a      	lsls	r2, r3, #22
 800db2a:	d402      	bmi.n	800db32 <_vfiprintf_r+0x1fe>
 800db2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db2e:	f7fd fcbf 	bl	800b4b0 <__retarget_lock_release_recursive>
 800db32:	89ab      	ldrh	r3, [r5, #12]
 800db34:	065b      	lsls	r3, r3, #25
 800db36:	f53f af1f 	bmi.w	800d978 <_vfiprintf_r+0x44>
 800db3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db3c:	e71e      	b.n	800d97c <_vfiprintf_r+0x48>
 800db3e:	ab03      	add	r3, sp, #12
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	462a      	mov	r2, r5
 800db44:	4630      	mov	r0, r6
 800db46:	4b06      	ldr	r3, [pc, #24]	@ (800db60 <_vfiprintf_r+0x22c>)
 800db48:	a904      	add	r1, sp, #16
 800db4a:	f7fd f969 	bl	800ae20 <_printf_i>
 800db4e:	e7e4      	b.n	800db1a <_vfiprintf_r+0x1e6>
 800db50:	0800e610 	.word	0x0800e610
 800db54:	0800e616 	.word	0x0800e616
 800db58:	0800e61a 	.word	0x0800e61a
 800db5c:	0800a8e5 	.word	0x0800a8e5
 800db60:	0800d911 	.word	0x0800d911

0800db64 <__swbuf_r>:
 800db64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db66:	460e      	mov	r6, r1
 800db68:	4614      	mov	r4, r2
 800db6a:	4605      	mov	r5, r0
 800db6c:	b118      	cbz	r0, 800db76 <__swbuf_r+0x12>
 800db6e:	6a03      	ldr	r3, [r0, #32]
 800db70:	b90b      	cbnz	r3, 800db76 <__swbuf_r+0x12>
 800db72:	f7fd fb01 	bl	800b178 <__sinit>
 800db76:	69a3      	ldr	r3, [r4, #24]
 800db78:	60a3      	str	r3, [r4, #8]
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	071a      	lsls	r2, r3, #28
 800db7e:	d501      	bpl.n	800db84 <__swbuf_r+0x20>
 800db80:	6923      	ldr	r3, [r4, #16]
 800db82:	b943      	cbnz	r3, 800db96 <__swbuf_r+0x32>
 800db84:	4621      	mov	r1, r4
 800db86:	4628      	mov	r0, r5
 800db88:	f000 f82a 	bl	800dbe0 <__swsetup_r>
 800db8c:	b118      	cbz	r0, 800db96 <__swbuf_r+0x32>
 800db8e:	f04f 37ff 	mov.w	r7, #4294967295
 800db92:	4638      	mov	r0, r7
 800db94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db96:	6823      	ldr	r3, [r4, #0]
 800db98:	6922      	ldr	r2, [r4, #16]
 800db9a:	b2f6      	uxtb	r6, r6
 800db9c:	1a98      	subs	r0, r3, r2
 800db9e:	6963      	ldr	r3, [r4, #20]
 800dba0:	4637      	mov	r7, r6
 800dba2:	4283      	cmp	r3, r0
 800dba4:	dc05      	bgt.n	800dbb2 <__swbuf_r+0x4e>
 800dba6:	4621      	mov	r1, r4
 800dba8:	4628      	mov	r0, r5
 800dbaa:	f7ff fdc9 	bl	800d740 <_fflush_r>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d1ed      	bne.n	800db8e <__swbuf_r+0x2a>
 800dbb2:	68a3      	ldr	r3, [r4, #8]
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	60a3      	str	r3, [r4, #8]
 800dbb8:	6823      	ldr	r3, [r4, #0]
 800dbba:	1c5a      	adds	r2, r3, #1
 800dbbc:	6022      	str	r2, [r4, #0]
 800dbbe:	701e      	strb	r6, [r3, #0]
 800dbc0:	6962      	ldr	r2, [r4, #20]
 800dbc2:	1c43      	adds	r3, r0, #1
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d004      	beq.n	800dbd2 <__swbuf_r+0x6e>
 800dbc8:	89a3      	ldrh	r3, [r4, #12]
 800dbca:	07db      	lsls	r3, r3, #31
 800dbcc:	d5e1      	bpl.n	800db92 <__swbuf_r+0x2e>
 800dbce:	2e0a      	cmp	r6, #10
 800dbd0:	d1df      	bne.n	800db92 <__swbuf_r+0x2e>
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	f7ff fdb3 	bl	800d740 <_fflush_r>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d0d9      	beq.n	800db92 <__swbuf_r+0x2e>
 800dbde:	e7d6      	b.n	800db8e <__swbuf_r+0x2a>

0800dbe0 <__swsetup_r>:
 800dbe0:	b538      	push	{r3, r4, r5, lr}
 800dbe2:	4b29      	ldr	r3, [pc, #164]	@ (800dc88 <__swsetup_r+0xa8>)
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	6818      	ldr	r0, [r3, #0]
 800dbe8:	460c      	mov	r4, r1
 800dbea:	b118      	cbz	r0, 800dbf4 <__swsetup_r+0x14>
 800dbec:	6a03      	ldr	r3, [r0, #32]
 800dbee:	b90b      	cbnz	r3, 800dbf4 <__swsetup_r+0x14>
 800dbf0:	f7fd fac2 	bl	800b178 <__sinit>
 800dbf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbf8:	0719      	lsls	r1, r3, #28
 800dbfa:	d422      	bmi.n	800dc42 <__swsetup_r+0x62>
 800dbfc:	06da      	lsls	r2, r3, #27
 800dbfe:	d407      	bmi.n	800dc10 <__swsetup_r+0x30>
 800dc00:	2209      	movs	r2, #9
 800dc02:	602a      	str	r2, [r5, #0]
 800dc04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc08:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0c:	81a3      	strh	r3, [r4, #12]
 800dc0e:	e033      	b.n	800dc78 <__swsetup_r+0x98>
 800dc10:	0758      	lsls	r0, r3, #29
 800dc12:	d512      	bpl.n	800dc3a <__swsetup_r+0x5a>
 800dc14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc16:	b141      	cbz	r1, 800dc2a <__swsetup_r+0x4a>
 800dc18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc1c:	4299      	cmp	r1, r3
 800dc1e:	d002      	beq.n	800dc26 <__swsetup_r+0x46>
 800dc20:	4628      	mov	r0, r5
 800dc22:	f7fe fab9 	bl	800c198 <_free_r>
 800dc26:	2300      	movs	r3, #0
 800dc28:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc30:	81a3      	strh	r3, [r4, #12]
 800dc32:	2300      	movs	r3, #0
 800dc34:	6063      	str	r3, [r4, #4]
 800dc36:	6923      	ldr	r3, [r4, #16]
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	f043 0308 	orr.w	r3, r3, #8
 800dc40:	81a3      	strh	r3, [r4, #12]
 800dc42:	6923      	ldr	r3, [r4, #16]
 800dc44:	b94b      	cbnz	r3, 800dc5a <__swsetup_r+0x7a>
 800dc46:	89a3      	ldrh	r3, [r4, #12]
 800dc48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc50:	d003      	beq.n	800dc5a <__swsetup_r+0x7a>
 800dc52:	4621      	mov	r1, r4
 800dc54:	4628      	mov	r0, r5
 800dc56:	f000 f882 	bl	800dd5e <__smakebuf_r>
 800dc5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc5e:	f013 0201 	ands.w	r2, r3, #1
 800dc62:	d00a      	beq.n	800dc7a <__swsetup_r+0x9a>
 800dc64:	2200      	movs	r2, #0
 800dc66:	60a2      	str	r2, [r4, #8]
 800dc68:	6962      	ldr	r2, [r4, #20]
 800dc6a:	4252      	negs	r2, r2
 800dc6c:	61a2      	str	r2, [r4, #24]
 800dc6e:	6922      	ldr	r2, [r4, #16]
 800dc70:	b942      	cbnz	r2, 800dc84 <__swsetup_r+0xa4>
 800dc72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc76:	d1c5      	bne.n	800dc04 <__swsetup_r+0x24>
 800dc78:	bd38      	pop	{r3, r4, r5, pc}
 800dc7a:	0799      	lsls	r1, r3, #30
 800dc7c:	bf58      	it	pl
 800dc7e:	6962      	ldrpl	r2, [r4, #20]
 800dc80:	60a2      	str	r2, [r4, #8]
 800dc82:	e7f4      	b.n	800dc6e <__swsetup_r+0x8e>
 800dc84:	2000      	movs	r0, #0
 800dc86:	e7f7      	b.n	800dc78 <__swsetup_r+0x98>
 800dc88:	20000184 	.word	0x20000184

0800dc8c <_raise_r>:
 800dc8c:	291f      	cmp	r1, #31
 800dc8e:	b538      	push	{r3, r4, r5, lr}
 800dc90:	4605      	mov	r5, r0
 800dc92:	460c      	mov	r4, r1
 800dc94:	d904      	bls.n	800dca0 <_raise_r+0x14>
 800dc96:	2316      	movs	r3, #22
 800dc98:	6003      	str	r3, [r0, #0]
 800dc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dca2:	b112      	cbz	r2, 800dcaa <_raise_r+0x1e>
 800dca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dca8:	b94b      	cbnz	r3, 800dcbe <_raise_r+0x32>
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f000 f830 	bl	800dd10 <_getpid_r>
 800dcb0:	4622      	mov	r2, r4
 800dcb2:	4601      	mov	r1, r0
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcba:	f000 b817 	b.w	800dcec <_kill_r>
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d00a      	beq.n	800dcd8 <_raise_r+0x4c>
 800dcc2:	1c59      	adds	r1, r3, #1
 800dcc4:	d103      	bne.n	800dcce <_raise_r+0x42>
 800dcc6:	2316      	movs	r3, #22
 800dcc8:	6003      	str	r3, [r0, #0]
 800dcca:	2001      	movs	r0, #1
 800dccc:	e7e7      	b.n	800dc9e <_raise_r+0x12>
 800dcce:	2100      	movs	r1, #0
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcd6:	4798      	blx	r3
 800dcd8:	2000      	movs	r0, #0
 800dcda:	e7e0      	b.n	800dc9e <_raise_r+0x12>

0800dcdc <raise>:
 800dcdc:	4b02      	ldr	r3, [pc, #8]	@ (800dce8 <raise+0xc>)
 800dcde:	4601      	mov	r1, r0
 800dce0:	6818      	ldr	r0, [r3, #0]
 800dce2:	f7ff bfd3 	b.w	800dc8c <_raise_r>
 800dce6:	bf00      	nop
 800dce8:	20000184 	.word	0x20000184

0800dcec <_kill_r>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	2300      	movs	r3, #0
 800dcf0:	4d06      	ldr	r5, [pc, #24]	@ (800dd0c <_kill_r+0x20>)
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	4608      	mov	r0, r1
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	602b      	str	r3, [r5, #0]
 800dcfa:	f7f5 fe7a 	bl	80039f2 <_kill>
 800dcfe:	1c43      	adds	r3, r0, #1
 800dd00:	d102      	bne.n	800dd08 <_kill_r+0x1c>
 800dd02:	682b      	ldr	r3, [r5, #0]
 800dd04:	b103      	cbz	r3, 800dd08 <_kill_r+0x1c>
 800dd06:	6023      	str	r3, [r4, #0]
 800dd08:	bd38      	pop	{r3, r4, r5, pc}
 800dd0a:	bf00      	nop
 800dd0c:	20000888 	.word	0x20000888

0800dd10 <_getpid_r>:
 800dd10:	f7f5 be68 	b.w	80039e4 <_getpid>

0800dd14 <__swhatbuf_r>:
 800dd14:	b570      	push	{r4, r5, r6, lr}
 800dd16:	460c      	mov	r4, r1
 800dd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd1c:	4615      	mov	r5, r2
 800dd1e:	2900      	cmp	r1, #0
 800dd20:	461e      	mov	r6, r3
 800dd22:	b096      	sub	sp, #88	@ 0x58
 800dd24:	da0c      	bge.n	800dd40 <__swhatbuf_r+0x2c>
 800dd26:	89a3      	ldrh	r3, [r4, #12]
 800dd28:	2100      	movs	r1, #0
 800dd2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd2e:	bf14      	ite	ne
 800dd30:	2340      	movne	r3, #64	@ 0x40
 800dd32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd36:	2000      	movs	r0, #0
 800dd38:	6031      	str	r1, [r6, #0]
 800dd3a:	602b      	str	r3, [r5, #0]
 800dd3c:	b016      	add	sp, #88	@ 0x58
 800dd3e:	bd70      	pop	{r4, r5, r6, pc}
 800dd40:	466a      	mov	r2, sp
 800dd42:	f000 f849 	bl	800ddd8 <_fstat_r>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	dbed      	blt.n	800dd26 <__swhatbuf_r+0x12>
 800dd4a:	9901      	ldr	r1, [sp, #4]
 800dd4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd54:	4259      	negs	r1, r3
 800dd56:	4159      	adcs	r1, r3
 800dd58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd5c:	e7eb      	b.n	800dd36 <__swhatbuf_r+0x22>

0800dd5e <__smakebuf_r>:
 800dd5e:	898b      	ldrh	r3, [r1, #12]
 800dd60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd62:	079d      	lsls	r5, r3, #30
 800dd64:	4606      	mov	r6, r0
 800dd66:	460c      	mov	r4, r1
 800dd68:	d507      	bpl.n	800dd7a <__smakebuf_r+0x1c>
 800dd6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd6e:	6023      	str	r3, [r4, #0]
 800dd70:	6123      	str	r3, [r4, #16]
 800dd72:	2301      	movs	r3, #1
 800dd74:	6163      	str	r3, [r4, #20]
 800dd76:	b003      	add	sp, #12
 800dd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd7a:	466a      	mov	r2, sp
 800dd7c:	ab01      	add	r3, sp, #4
 800dd7e:	f7ff ffc9 	bl	800dd14 <__swhatbuf_r>
 800dd82:	9f00      	ldr	r7, [sp, #0]
 800dd84:	4605      	mov	r5, r0
 800dd86:	4639      	mov	r1, r7
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f7fe fdb1 	bl	800c8f0 <_malloc_r>
 800dd8e:	b948      	cbnz	r0, 800dda4 <__smakebuf_r+0x46>
 800dd90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd94:	059a      	lsls	r2, r3, #22
 800dd96:	d4ee      	bmi.n	800dd76 <__smakebuf_r+0x18>
 800dd98:	f023 0303 	bic.w	r3, r3, #3
 800dd9c:	f043 0302 	orr.w	r3, r3, #2
 800dda0:	81a3      	strh	r3, [r4, #12]
 800dda2:	e7e2      	b.n	800dd6a <__smakebuf_r+0xc>
 800dda4:	89a3      	ldrh	r3, [r4, #12]
 800dda6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddae:	81a3      	strh	r3, [r4, #12]
 800ddb0:	9b01      	ldr	r3, [sp, #4]
 800ddb2:	6020      	str	r0, [r4, #0]
 800ddb4:	b15b      	cbz	r3, 800ddce <__smakebuf_r+0x70>
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddbc:	f000 f81e 	bl	800ddfc <_isatty_r>
 800ddc0:	b128      	cbz	r0, 800ddce <__smakebuf_r+0x70>
 800ddc2:	89a3      	ldrh	r3, [r4, #12]
 800ddc4:	f023 0303 	bic.w	r3, r3, #3
 800ddc8:	f043 0301 	orr.w	r3, r3, #1
 800ddcc:	81a3      	strh	r3, [r4, #12]
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	431d      	orrs	r5, r3
 800ddd2:	81a5      	strh	r5, [r4, #12]
 800ddd4:	e7cf      	b.n	800dd76 <__smakebuf_r+0x18>
	...

0800ddd8 <_fstat_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	2300      	movs	r3, #0
 800dddc:	4d06      	ldr	r5, [pc, #24]	@ (800ddf8 <_fstat_r+0x20>)
 800ddde:	4604      	mov	r4, r0
 800dde0:	4608      	mov	r0, r1
 800dde2:	4611      	mov	r1, r2
 800dde4:	602b      	str	r3, [r5, #0]
 800dde6:	f7f5 fe63 	bl	8003ab0 <_fstat>
 800ddea:	1c43      	adds	r3, r0, #1
 800ddec:	d102      	bne.n	800ddf4 <_fstat_r+0x1c>
 800ddee:	682b      	ldr	r3, [r5, #0]
 800ddf0:	b103      	cbz	r3, 800ddf4 <_fstat_r+0x1c>
 800ddf2:	6023      	str	r3, [r4, #0]
 800ddf4:	bd38      	pop	{r3, r4, r5, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20000888 	.word	0x20000888

0800ddfc <_isatty_r>:
 800ddfc:	b538      	push	{r3, r4, r5, lr}
 800ddfe:	2300      	movs	r3, #0
 800de00:	4d05      	ldr	r5, [pc, #20]	@ (800de18 <_isatty_r+0x1c>)
 800de02:	4604      	mov	r4, r0
 800de04:	4608      	mov	r0, r1
 800de06:	602b      	str	r3, [r5, #0]
 800de08:	f7f5 fe61 	bl	8003ace <_isatty>
 800de0c:	1c43      	adds	r3, r0, #1
 800de0e:	d102      	bne.n	800de16 <_isatty_r+0x1a>
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	b103      	cbz	r3, 800de16 <_isatty_r+0x1a>
 800de14:	6023      	str	r3, [r4, #0]
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	20000888 	.word	0x20000888

0800de1c <_init>:
 800de1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1e:	bf00      	nop
 800de20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de22:	bc08      	pop	{r3}
 800de24:	469e      	mov	lr, r3
 800de26:	4770      	bx	lr

0800de28 <_fini>:
 800de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2a:	bf00      	nop
 800de2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de2e:	bc08      	pop	{r3}
 800de30:	469e      	mov	lr, r3
 800de32:	4770      	bx	lr
