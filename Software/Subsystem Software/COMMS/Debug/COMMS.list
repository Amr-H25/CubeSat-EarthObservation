
COMMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a84  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c58  08008b98  08008b98  00009b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097f0  080097f0  0000b3a4  2**0
                  CONTENTS
  4 .ARM          00000008  080097f0  080097f0  0000a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f8  080097f8  0000b3a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f8  080097f8  0000a7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097fc  080097fc  0000a7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a4  20000000  08009800  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d70  200003a4  08009ba4  0000b3a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001114  08009ba4  0000c114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b3a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0b0  00000000  00000000  0000b3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d3  00000000  00000000  0001947d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0001b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac2  00000000  00000000  0001c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dd9  00000000  00000000  0001d0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbc5  00000000  00000000  00035eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d18e  00000000  00000000  00045a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e58  00000000  00000000  000d2c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d7aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003a4 	.word	0x200003a4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b7c 	.word	0x08008b7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003a8 	.word	0x200003a8
 800014c:	08008b7c 	.word	0x08008b7c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpun>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	d102      	bne.n	80010f8 <__aeabi_fcmpun+0x14>
 80010f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010f6:	d108      	bne.n	800110a <__aeabi_fcmpun+0x26>
 80010f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010fc:	d102      	bne.n	8001104 <__aeabi_fcmpun+0x20>
 80010fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001102:	d102      	bne.n	800110a <__aeabi_fcmpun+0x26>
 8001104:	f04f 0000 	mov.w	r0, #0
 8001108:	4770      	bx	lr
 800110a:	f04f 0001 	mov.w	r0, #1
 800110e:	4770      	bx	lr

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redirect printf to DEBUG_UART (USART2)
int _write(int file, char *ptr, int len) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(DEBUG_UART, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	b29a      	uxth	r2, r3
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	4804      	ldr	r0, [pc, #16]	@ (8001184 <_write+0x28>)
 8001174:	f003 fa70 	bl	8004658 <HAL_UART_Transmit>
    return len;
 8001178:	687b      	ldr	r3, [r7, #4]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000450 	.word	0x20000450

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b090      	sub	sp, #64	@ 0x40
 800118c:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800118e:	f001 fccf 	bl	8002b30 <HAL_Init>
  SystemClock_Config();
 8001192:	f000 f889 	bl	80012a8 <SystemClock_Config>
  MX_GPIO_Init();
 8001196:	f000 f97b 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 800119a:	f000 f953 	bl	8001444 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800119e:	f000 f927 	bl	80013f0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80011a2:	f000 fce9 	bl	8001b78 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80011a6:	f000 f8f9 	bl	800139c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80011aa:	f000 f8cd 	bl	8001348 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  if (BT_Init(COMMS_UART) != BT_OK) {
 80011ae:	4834      	ldr	r0, [pc, #208]	@ (8001280 <main+0xf8>)
 80011b0:	f000 fdc0 	bl	8001d34 <BT_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <main+0x36>
    Error_Handler();
 80011ba:	f000 fd29 	bl	8001c10 <Error_Handler>
  }
  printf("COMMS System Initialized\r\n");
 80011be:	4831      	ldr	r0, [pc, #196]	@ (8001284 <main+0xfc>)
 80011c0:	f005 f952 	bl	8006468 <puts>
  UpdateSystemStatus();
 80011c4:	f000 fc8a 	bl	8001adc <UpdateSystemStatus>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // 1. Continuously check for and process incoming data from ADCS
    ADCS_UART_ReceiveHandler();
 80011c8:	f000 f9da 	bl	8001580 <ADCS_UART_ReceiveHandler>

    // 2. If a full, valid packet has been received, update telemetry
    if(new_sensor_data_ready) {
 80011cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001288 <main+0x100>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d008      	beq.n	80011e8 <main+0x60>
        new_sensor_data_ready = false; // Reset flag
 80011d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <main+0x100>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
        UpdateTelemetryFromSensors(&received_sensor_data);
 80011dc:	482b      	ldr	r0, [pc, #172]	@ (800128c <main+0x104>)
 80011de:	f000 fb5f 	bl	80018a0 <UpdateTelemetryFromSensors>
        printf("ADCS Telemetry Updated.\r\n");
 80011e2:	482b      	ldr	r0, [pc, #172]	@ (8001290 <main+0x108>)
 80011e4:	f005 f940 	bl	8006468 <puts>
    }

    // 3. Check for commands received from ground station via Bluetooth
    if(BT_IsCommandReceived()) {
 80011e8:	f000 fe88 	bl	8001efc <BT_IsCommandReceived>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00d      	beq.n	800120e <main+0x86>
        char cmd[COMMAND_BUFFER_SIZE];
        if(BT_ReceiveCommand(cmd, 10) == BT_OK) {
 80011f2:	463b      	mov	r3, r7
 80011f4:	210a      	movs	r1, #10
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 feb0 	bl	8001f5c <BT_ReceiveCommand>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <main+0x82>
            ProcessReceivedCommand(cmd);
 8001202:	463b      	mov	r3, r7
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fbe5 	bl	80019d4 <ProcessReceivedCommand>
        }
        BT_ClearCommandFlag();
 800120a:	f000 fe97 	bl	8001f3c <BT_ClearCommandFlag>
    }

    // 4. Periodically send the full telemetry packet via Bluetooth
    static uint32_t last_telemetry_tx = 0;
    if(HAL_GetTick() - last_telemetry_tx >= 10000) { // Send every 10 seconds
 800120e:	f001 fce7 	bl	8002be0 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <main+0x10c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800121e:	4293      	cmp	r3, r2
 8001220:	d916      	bls.n	8001250 <main+0xc8>
        last_telemetry_tx = HAL_GetTick();
 8001222:	f001 fcdd 	bl	8002be0 <HAL_GetTick>
 8001226:	4603      	mov	r3, r0
 8001228:	4a1a      	ldr	r2, [pc, #104]	@ (8001294 <main+0x10c>)
 800122a:	6013      	str	r3, [r2, #0]
        UpdateSystemStatus(); // Update statuses before sending
 800122c:	f000 fc56 	bl	8001adc <UpdateSystemStatus>
        if(BT_SendJSON(&telemetry) == BT_OK) {
 8001230:	4819      	ldr	r0, [pc, #100]	@ (8001298 <main+0x110>)
 8001232:	f000 fdc3 	bl	8001dbc <BT_SendJSON>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <main+0xc8>
            telemetry.comms.packets_sent++;
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <main+0x110>)
 800123e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001242:	3301      	adds	r3, #1
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <main+0x110>)
 8001246:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
            printf("Telemetry JSON sent via Bluetooth.\r\n");
 800124a:	4814      	ldr	r0, [pc, #80]	@ (800129c <main+0x114>)
 800124c:	f005 f90c 	bl	8006468 <puts>
        }
    }

    // 5. Blink LED as a heartbeat
    static uint32_t last_heartbeat = 0;
    if(HAL_GetTick() - last_heartbeat >= 500) {
 8001250:	f001 fcc6 	bl	8002be0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <main+0x118>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001260:	d309      	bcc.n	8001276 <main+0xee>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001266:	480f      	ldr	r0, [pc, #60]	@ (80012a4 <main+0x11c>)
 8001268:	f002 fa4e 	bl	8003708 <HAL_GPIO_TogglePin>
        last_heartbeat = HAL_GetTick();
 800126c:	f001 fcb8 	bl	8002be0 <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <main+0x118>)
 8001274:	6013      	str	r3, [r2, #0]
    }

    HAL_Delay(10);
 8001276:	200a      	movs	r0, #10
 8001278:	f001 fcbc 	bl	8002bf4 <HAL_Delay>
  {
 800127c:	e7a4      	b.n	80011c8 <main+0x40>
 800127e:	bf00      	nop
 8001280:	20000498 	.word	0x20000498
 8001284:	08008b98 	.word	0x08008b98
 8001288:	20000568 	.word	0x20000568
 800128c:	2000056c 	.word	0x2000056c
 8001290:	08008bb4 	.word	0x08008bb4
 8001294:	200005e0 	.word	0x200005e0
 8001298:	20000000 	.word	0x20000000
 800129c:	08008bd0 	.word	0x08008bd0
 80012a0:	200005e4 	.word	0x200005e4
 80012a4:	40011000 	.word	0x40011000

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b094      	sub	sp, #80	@ 0x50
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b2:	2228      	movs	r2, #40	@ 0x28
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f005 f9ea 	bl	8006690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fa25 	bl	800373c <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012f8:	f000 fc8a 	bl	8001c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fc92 	bl	8003c40 <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001322:	f000 fc75 	bl	8001c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001326:	2302      	movs	r3, #2
 8001328:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fe13 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800133c:	f000 fc68 	bl	8001c10 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3750      	adds	r7, #80	@ 0x50
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <MX_USART1_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001380:	f003 f91a 	bl	80045b8 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f000 fc41 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000408 	.word	0x20000408
 8001398:	40013800 	.word	0x40013800

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <MX_USART2_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f003 f8f0 	bl	80045b8 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 fc17 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000450 	.word	0x20000450
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_USART3_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <MX_USART3_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <MX_USART3_UART_Init+0x4c>)
 80013fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_USART3_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_USART3_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <MX_USART3_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_USART3_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	@ (800143c <MX_USART3_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_USART3_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_USART3_UART_Init+0x4c>)
 8001428:	f003 f8c6 	bl	80045b8 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f000 fbed 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000498 	.word	0x20000498
 8001440:	40004800 	.word	0x40004800

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MX_DMA_Init+0x48>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <MX_DMA_Init+0x48>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <MX_DMA_Init+0x48>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	200c      	movs	r0, #12
 8001468:	f001 fcd5 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800146c:	200c      	movs	r0, #12
 800146e:	f001 fcee 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	200d      	movs	r0, #13
 8001478:	f001 fccd 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800147c:	200d      	movs	r0, #13
 800147e:	f001 fce6 	bl	8002e4e <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a32      	ldr	r2, [pc, #200]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a26      	ldr	r2, [pc, #152]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a20      	ldr	r2, [pc, #128]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <MX_GPIO_Init+0xe4>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800150a:	481b      	ldr	r0, [pc, #108]	@ (8001578 <MX_GPIO_Init+0xe8>)
 800150c:	f002 f8e4 	bl	80036d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2101      	movs	r1, #1
 8001514:	4819      	ldr	r0, [pc, #100]	@ (800157c <MX_GPIO_Init+0xec>)
 8001516:	f002 f8df 	bl	80036d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800151a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2302      	movs	r3, #2
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	4811      	ldr	r0, [pc, #68]	@ (8001578 <MX_GPIO_Init+0xe8>)
 8001534:	f001 ff4c 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2302      	movs	r3, #2
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	480b      	ldr	r0, [pc, #44]	@ (800157c <MX_GPIO_Init+0xec>)
 8001550:	f001 ff3e 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001554:	2302      	movs	r3, #2
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4619      	mov	r1, r3
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_GPIO_Init+0xec>)
 8001568:	f001 ff32 	bl	80033d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156c:	bf00      	nop
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	40011000 	.word	0x40011000
 800157c:	40010800 	.word	0x40010800

08001580 <ADCS_UART_ReceiveHandler>:

/**
  * @brief Handles receiving bytes from ADCS UART and reconstructing packets.
  * This function should be called repeatedly in the main loop.
  */
void ADCS_UART_ReceiveHandler(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
    uint8_t byte;
    // Check for a new byte with a very short timeout (non-blocking)
    if (HAL_UART_Receive(ADCS_UART, &byte, 1, 0) == HAL_OK) {
 8001586:	1df9      	adds	r1, r7, #7
 8001588:	2300      	movs	r3, #0
 800158a:	2201      	movs	r2, #1
 800158c:	4820      	ldr	r0, [pc, #128]	@ (8001610 <ADCS_UART_ReceiveHandler+0x90>)
 800158e:	f003 f8ee 	bl	800476e <HAL_UART_Receive>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d136      	bne.n	8001606 <ADCS_UART_ReceiveHandler+0x86>
        switch (packet_state) {
 8001598:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <ADCS_UART_ReceiveHandler+0x94>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <ADCS_UART_ReceiveHandler+0x26>
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d014      	beq.n	80015ce <ADCS_UART_ReceiveHandler+0x4e>
                    packet_state = WAIT_START; // Reset for next packet
                }
                break;
        }
    }
}
 80015a4:	e02f      	b.n	8001606 <ADCS_UART_ReceiveHandler+0x86>
                if (byte == PACKET_START_MARKER) {
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2baa      	cmp	r3, #170	@ 0xaa
 80015aa:	d129      	bne.n	8001600 <ADCS_UART_ReceiveHandler+0x80>
                    sensor_rx_idx = 0;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <ADCS_UART_ReceiveHandler+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]
                    sensor_rx_buffer[sensor_rx_idx++] = byte;
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <ADCS_UART_ReceiveHandler+0x98>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	b291      	uxth	r1, r2
 80015ba:	4a17      	ldr	r2, [pc, #92]	@ (8001618 <ADCS_UART_ReceiveHandler+0x98>)
 80015bc:	8011      	strh	r1, [r2, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	79f9      	ldrb	r1, [r7, #7]
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <ADCS_UART_ReceiveHandler+0x9c>)
 80015c4:	5499      	strb	r1, [r3, r2]
                    packet_state = WAIT_DATA;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <ADCS_UART_ReceiveHandler+0x94>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
                break;
 80015cc:	e018      	b.n	8001600 <ADCS_UART_ReceiveHandler+0x80>
                if (sensor_rx_idx < SENSOR_PACKET_SIZE) {
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <ADCS_UART_ReceiveHandler+0x98>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	2b39      	cmp	r3, #57	@ 0x39
 80015d4:	d809      	bhi.n	80015ea <ADCS_UART_ReceiveHandler+0x6a>
                    sensor_rx_buffer[sensor_rx_idx++] = byte;
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <ADCS_UART_ReceiveHandler+0x98>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	b291      	uxth	r1, r2
 80015de:	4a0e      	ldr	r2, [pc, #56]	@ (8001618 <ADCS_UART_ReceiveHandler+0x98>)
 80015e0:	8011      	strh	r1, [r2, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	79f9      	ldrb	r1, [r7, #7]
 80015e6:	4b0d      	ldr	r3, [pc, #52]	@ (800161c <ADCS_UART_ReceiveHandler+0x9c>)
 80015e8:	5499      	strb	r1, [r3, r2]
                if (sensor_rx_idx >= SENSOR_PACKET_SIZE) {
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <ADCS_UART_ReceiveHandler+0x98>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	2b39      	cmp	r3, #57	@ 0x39
 80015f0:	d908      	bls.n	8001604 <ADCS_UART_ReceiveHandler+0x84>
                    ProcessSensorPacket((SensorDataPacket_t*)sensor_rx_buffer);
 80015f2:	480a      	ldr	r0, [pc, #40]	@ (800161c <ADCS_UART_ReceiveHandler+0x9c>)
 80015f4:	f000 f876 	bl	80016e4 <ProcessSensorPacket>
                    packet_state = WAIT_START; // Reset for next packet
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <ADCS_UART_ReceiveHandler+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
                break;
 80015fe:	e001      	b.n	8001604 <ADCS_UART_ReceiveHandler+0x84>
                break;
 8001600:	bf00      	nop
 8001602:	e000      	b.n	8001606 <ADCS_UART_ReceiveHandler+0x86>
                break;
 8001604:	bf00      	nop
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000408 	.word	0x20000408
 8001614:	200005dc 	.word	0x200005dc
 8001618:	200005da 	.word	0x200005da
 800161c:	200005a0 	.word	0x200005a0

08001620 <CalculateChecksum>:

/**
  * @brief Calculates a simple XOR checksum. Must match the sender's implementation.
  */
uint8_t CalculateChecksum(uint8_t *data, uint16_t length) {
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
    uint8_t checksum = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i++) {
 8001630:	2300      	movs	r3, #0
 8001632:	81bb      	strh	r3, [r7, #12]
 8001634:	e009      	b.n	800164a <CalculateChecksum+0x2a>
        checksum ^= data[i];
 8001636:	89bb      	ldrh	r3, [r7, #12]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4053      	eors	r3, r2
 8001642:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i++) {
 8001644:	89bb      	ldrh	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	81bb      	strh	r3, [r7, #12]
 800164a:	89ba      	ldrh	r2, [r7, #12]
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3f1      	bcc.n	8001636 <CalculateChecksum+0x16>
    }
    return checksum;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
	...

08001660 <ValidatePacket>:

/**
  * @brief Validates a received sensor packet.
  * @retval true if packet is valid, false otherwise.
  */
bool ValidatePacket(SensorDataPacket_t *packet) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    // 1. Check start and end markers
    if (packet->start_marker != PACKET_START_MARKER || packet->end_marker != PACKET_END_MARKER) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2baa      	cmp	r3, #170	@ 0xaa
 800166e:	d104      	bne.n	800167a <ValidatePacket+0x1a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001676:	2b55      	cmp	r3, #85	@ 0x55
 8001678:	d004      	beq.n	8001684 <ValidatePacket+0x24>
        printf("Error: Invalid markers\r\n");
 800167a:	4817      	ldr	r0, [pc, #92]	@ (80016d8 <ValidatePacket+0x78>)
 800167c:	f004 fef4 	bl	8006468 <puts>
        return false;
 8001680:	2300      	movs	r3, #0
 8001682:	e025      	b.n	80016d0 <ValidatePacket+0x70>
    }
    // 2. Check packet ID
    if (packet->packet_id != SENSOR_DATA_PACKET_ID) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d004      	beq.n	8001696 <ValidatePacket+0x36>
        printf("Error: Invalid packet ID\r\n");
 800168c:	4813      	ldr	r0, [pc, #76]	@ (80016dc <ValidatePacket+0x7c>)
 800168e:	f004 feeb 	bl	8006468 <puts>
        return false;
 8001692:	2300      	movs	r3, #0
 8001694:	e01c      	b.n	80016d0 <ValidatePacket+0x70>
    }
    // 3. Validate checksum
    uint16_t checksum_len = sizeof(SensorDataPacket_t) - 4; // Length from packet_id to mpu_temp
 8001696:	2336      	movs	r3, #54	@ 0x36
 8001698:	81fb      	strh	r3, [r7, #14]
    uint8_t calculated_checksum = CalculateChecksum((uint8_t*)&packet->packet_id, checksum_len);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3301      	adds	r3, #1
 800169e:	89fa      	ldrh	r2, [r7, #14]
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ffbc 	bl	8001620 <CalculateChecksum>
 80016a8:	4603      	mov	r3, r0
 80016aa:	737b      	strb	r3, [r7, #13]
    if (calculated_checksum != packet->checksum) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016b2:	7b7a      	ldrb	r2, [r7, #13]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d00a      	beq.n	80016ce <ValidatePacket+0x6e>
        printf("Error: Checksum mismatch. Got: %u, Expected: %u\r\n", packet->checksum, calculated_checksum);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016be:	4619      	mov	r1, r3
 80016c0:	7b7b      	ldrb	r3, [r7, #13]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4806      	ldr	r0, [pc, #24]	@ (80016e0 <ValidatePacket+0x80>)
 80016c6:	f004 fe67 	bl	8006398 <iprintf>
        return false;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <ValidatePacket+0x70>
    }
    return true;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	08008bf4 	.word	0x08008bf4
 80016dc:	08008c0c 	.word	0x08008c0c
 80016e0:	08008c28 	.word	0x08008c28

080016e4 <ProcessSensorPacket>:
  * @brief Processes a complete sensor packet after it's received.
  */
/**
  * @brief Processes a complete sensor packet after it's received.
  */
void ProcessSensorPacket(SensorDataPacket_t *packet) {
 80016e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af04      	add	r7, sp, #16
 80016ec:	6078      	str	r0, [r7, #4]
    if (!ValidatePacket(packet)) {
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffb6 	bl	8001660 <ValidatePacket>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f083 0301 	eor.w	r3, r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <ProcessSensorPacket+0x24>
        printf("Invalid sensor packet received.\r\n");
 8001700:	4859      	ldr	r0, [pc, #356]	@ (8001868 <ProcessSensorPacket+0x184>)
 8001702:	f004 feb1 	bl	8006468 <puts>
        return;
 8001706:	e0ab      	b.n	8001860 <ProcessSensorPacket+0x17c>
    }

    // Debug print received values
    printf("[COMMS] Received sensor data:\r\n");
 8001708:	4858      	ldr	r0, [pc, #352]	@ (800186c <ProcessSensorPacket+0x188>)
 800170a:	f004 fead 	bl	8006468 <puts>
    printf("  Temp: %.2f C\r\n", packet->temperature);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fe92 	bl	800043c <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4854      	ldr	r0, [pc, #336]	@ (8001870 <ProcessSensorPacket+0x18c>)
 800171e:	f004 fe3b 	bl	8006398 <iprintf>
    printf("  LDR: F=%d, R=%d, B=%d, L=%d\r\n",
           packet->ldr_values.front, packet->ldr_values.right,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	891b      	ldrh	r3, [r3, #8]
 8001726:	b29b      	uxth	r3, r3
    printf("  LDR: F=%d, R=%d, B=%d, L=%d\r\n",
 8001728:	4619      	mov	r1, r3
           packet->ldr_values.front, packet->ldr_values.right,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	895b      	ldrh	r3, [r3, #10]
 800172e:	b29b      	uxth	r3, r3
    printf("  LDR: F=%d, R=%d, B=%d, L=%d\r\n",
 8001730:	461a      	mov	r2, r3
           packet->ldr_values.back, packet->ldr_values.left);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	899b      	ldrh	r3, [r3, #12]
 8001736:	b29b      	uxth	r3, r3
    printf("  LDR: F=%d, R=%d, B=%d, L=%d\r\n",
 8001738:	4618      	mov	r0, r3
           packet->ldr_values.back, packet->ldr_values.left);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	89db      	ldrh	r3, [r3, #14]
 800173e:	b29b      	uxth	r3, r3
    printf("  LDR: F=%d, R=%d, B=%d, L=%d\r\n",
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	4603      	mov	r3, r0
 8001744:	484b      	ldr	r0, [pc, #300]	@ (8001874 <ProcessSensorPacket+0x190>)
 8001746:	f004 fe27 	bl	8006398 <iprintf>
    printf("  GPS: Lat=%.4f, Lon=%.4f, Alt=%.1f\r\n",
           packet->gps_position.latitude, packet->gps_position.longitude,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
    printf("  GPS: Lat=%.4f, Lon=%.4f, Alt=%.1f\r\n",
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fe74 	bl	800043c <__aeabi_f2d>
 8001754:	4680      	mov	r8, r0
 8001756:	4689      	mov	r9, r1
           packet->gps_position.latitude, packet->gps_position.longitude,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
    printf("  GPS: Lat=%.4f, Lon=%.4f, Alt=%.1f\r\n",
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fe6d 	bl	800043c <__aeabi_f2d>
 8001762:	4604      	mov	r4, r0
 8001764:	460d      	mov	r5, r1
           packet->gps_position.altitude);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
    printf("  GPS: Lat=%.4f, Lon=%.4f, Alt=%.1f\r\n",
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fe66 	bl	800043c <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001778:	e9cd 4500 	strd	r4, r5, [sp]
 800177c:	4642      	mov	r2, r8
 800177e:	464b      	mov	r3, r9
 8001780:	483d      	ldr	r0, [pc, #244]	@ (8001878 <ProcessSensorPacket+0x194>)
 8001782:	f004 fe09 	bl	8006398 <iprintf>
    printf("  Accel: X=%.2f, Y=%.2f, Z=%.2f\r\n",
           packet->accel.x, packet->accel.y, packet->accel.z);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
    printf("  Accel: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe56 	bl	800043c <__aeabi_f2d>
 8001790:	4680      	mov	r8, r0
 8001792:	4689      	mov	r9, r1
           packet->accel.x, packet->accel.y, packet->accel.z);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
    printf("  Accel: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe4f 	bl	800043c <__aeabi_f2d>
 800179e:	4604      	mov	r4, r0
 80017a0:	460d      	mov	r5, r1
           packet->accel.x, packet->accel.y, packet->accel.z);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    printf("  Accel: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe48 	bl	800043c <__aeabi_f2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017b4:	e9cd 4500 	strd	r4, r5, [sp]
 80017b8:	4642      	mov	r2, r8
 80017ba:	464b      	mov	r3, r9
 80017bc:	482f      	ldr	r0, [pc, #188]	@ (800187c <ProcessSensorPacket+0x198>)
 80017be:	f004 fdeb 	bl	8006398 <iprintf>
    printf("  Gyro: X=%.2f, Y=%.2f, Z=%.2f\r\n",
           packet->gyro.x, packet->gyro.y, packet->gyro.z);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    printf("  Gyro: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe38 	bl	800043c <__aeabi_f2d>
 80017cc:	4680      	mov	r8, r0
 80017ce:	4689      	mov	r9, r1
           packet->gyro.x, packet->gyro.y, packet->gyro.z);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    printf("  Gyro: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe31 	bl	800043c <__aeabi_f2d>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
           packet->gyro.x, packet->gyro.y, packet->gyro.z);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    printf("  Gyro: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe2a 	bl	800043c <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017f0:	e9cd 4500 	strd	r4, r5, [sp]
 80017f4:	4642      	mov	r2, r8
 80017f6:	464b      	mov	r3, r9
 80017f8:	4821      	ldr	r0, [pc, #132]	@ (8001880 <ProcessSensorPacket+0x19c>)
 80017fa:	f004 fdcd 	bl	8006398 <iprintf>
    printf("  MPU Temp: %.2f C\r\n", packet->mpu_temp);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe1a 	bl	800043c <__aeabi_f2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	481d      	ldr	r0, [pc, #116]	@ (8001884 <ProcessSensorPacket+0x1a0>)
 800180e:	f004 fdc3 	bl	8006398 <iprintf>

    // Copy data to global structure
    received_sensor_data.temperature = packet->temperature;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <ProcessSensorPacket+0x1a4>)
 8001818:	6013      	str	r3, [r2, #0]
    memcpy(&received_sensor_data.ldr_values, &packet->ldr_values, sizeof(packet->ldr_values));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3308      	adds	r3, #8
 800181e:	2208      	movs	r2, #8
 8001820:	4619      	mov	r1, r3
 8001822:	481a      	ldr	r0, [pc, #104]	@ (800188c <ProcessSensorPacket+0x1a8>)
 8001824:	f004 ffd5 	bl	80067d2 <memcpy>
    memcpy(&received_sensor_data.gps_position, &packet->gps_position, sizeof(packet->gps_position));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3310      	adds	r3, #16
 800182c:	220c      	movs	r2, #12
 800182e:	4619      	mov	r1, r3
 8001830:	4817      	ldr	r0, [pc, #92]	@ (8001890 <ProcessSensorPacket+0x1ac>)
 8001832:	f004 ffce 	bl	80067d2 <memcpy>
    memcpy(&received_sensor_data.accel, &packet->accel, sizeof(packet->accel));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	331c      	adds	r3, #28
 800183a:	220c      	movs	r2, #12
 800183c:	4619      	mov	r1, r3
 800183e:	4815      	ldr	r0, [pc, #84]	@ (8001894 <ProcessSensorPacket+0x1b0>)
 8001840:	f004 ffc7 	bl	80067d2 <memcpy>
    memcpy(&received_sensor_data.gyro, &packet->gyro, sizeof(packet->gyro));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3328      	adds	r3, #40	@ 0x28
 8001848:	220c      	movs	r2, #12
 800184a:	4619      	mov	r1, r3
 800184c:	4812      	ldr	r0, [pc, #72]	@ (8001898 <ProcessSensorPacket+0x1b4>)
 800184e:	f004 ffc0 	bl	80067d2 <memcpy>
    received_sensor_data.mpu_temp = packet->mpu_temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001856:	4a0c      	ldr	r2, [pc, #48]	@ (8001888 <ProcessSensorPacket+0x1a4>)
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30

    new_sensor_data_ready = true;
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <ProcessSensorPacket+0x1b8>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
}
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001868:	08008c5c 	.word	0x08008c5c
 800186c:	08008c80 	.word	0x08008c80
 8001870:	08008ca0 	.word	0x08008ca0
 8001874:	08008cb4 	.word	0x08008cb4
 8001878:	08008cd4 	.word	0x08008cd4
 800187c:	08008cfc 	.word	0x08008cfc
 8001880:	08008d20 	.word	0x08008d20
 8001884:	08008d44 	.word	0x08008d44
 8001888:	2000056c 	.word	0x2000056c
 800188c:	20000570 	.word	0x20000570
 8001890:	20000578 	.word	0x20000578
 8001894:	20000584 	.word	0x20000584
 8001898:	20000590 	.word	0x20000590
 800189c:	20000568 	.word	0x20000568

080018a0 <UpdateTelemetryFromSensors>:


/**
  * @brief Updates the main telemetry structure with fresh data from sensors.
  */
void UpdateTelemetryFromSensors(SensorData_t *sensor_data) {
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    // Update ADCS status to ONLINE since we're receiving data
    strcpy(telemetry.adcs.status, "ONLINE");
 80018a8:	4b45      	ldr	r3, [pc, #276]	@ (80019c0 <UpdateTelemetryFromSensors+0x120>)
 80018aa:	4a46      	ldr	r2, [pc, #280]	@ (80019c4 <UpdateTelemetryFromSensors+0x124>)
 80018ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b0:	6018      	str	r0, [r3, #0]
 80018b2:	3304      	adds	r3, #4
 80018b4:	8019      	strh	r1, [r3, #0]
 80018b6:	3302      	adds	r3, #2
 80018b8:	0c0a      	lsrs	r2, r1, #16
 80018ba:	701a      	strb	r2, [r3, #0]

    // Map direct readings
    telemetry.adcs.temperature = (int)sensor_data->temperature;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fc25 	bl	8001110 <__aeabi_f2iz>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a3f      	ldr	r2, [pc, #252]	@ (80019c8 <UpdateTelemetryFromSensors+0x128>)
 80018ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
    telemetry.adcs.light_sensors.face_a = sensor_data->ldr_values.front;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	889b      	ldrh	r3, [r3, #4]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <UpdateTelemetryFromSensors+0x128>)
 80018d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    telemetry.adcs.light_sensors.face_b = sensor_data->ldr_values.right;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	88db      	ldrh	r3, [r3, #6]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <UpdateTelemetryFromSensors+0x128>)
 80018de:	651a      	str	r2, [r3, #80]	@ 0x50
    telemetry.adcs.light_sensors.face_c = sensor_data->ldr_values.back;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	891b      	ldrh	r3, [r3, #8]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <UpdateTelemetryFromSensors+0x128>)
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54
    telemetry.adcs.light_sensors.face_d = sensor_data->ldr_values.left;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	895b      	ldrh	r3, [r3, #10]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b35      	ldr	r3, [pc, #212]	@ (80019c8 <UpdateTelemetryFromSensors+0x128>)
 80018f2:	659a      	str	r2, [r3, #88]	@ 0x58

    // Copy GPS data
    memcpy(&telemetry.adcs.gps, &sensor_data->gps_position, sizeof(telemetry.adcs.gps));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330c      	adds	r3, #12
 80018f8:	220c      	movs	r2, #12
 80018fa:	4619      	mov	r1, r3
 80018fc:	4833      	ldr	r0, [pc, #204]	@ (80019cc <UpdateTelemetryFromSensors+0x12c>)
 80018fe:	f004 ff68 	bl	80067d2 <memcpy>

    // Calculate orientation from accelerometer
    telemetry.adcs.roll = atan2f(sensor_data->accel.y, sensor_data->accel.z) * (180.0f / M_PI);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4619      	mov	r1, r3
 800190c:	4610      	mov	r0, r2
 800190e:	f006 ff11 	bl	8008734 <atan2f>
 8001912:	4603      	mov	r3, r0
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fd91 	bl	800043c <__aeabi_f2d>
 800191a:	a327      	add	r3, pc, #156	@ (adr r3, 80019b8 <UpdateTelemetryFromSensors+0x118>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fde4 	bl	80004ec <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f8b6 	bl	8000a9c <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	4a25      	ldr	r2, [pc, #148]	@ (80019c8 <UpdateTelemetryFromSensors+0x128>)
 8001934:	6393      	str	r3, [r2, #56]	@ 0x38
    telemetry.adcs.pitch = atan2f(-sensor_data->accel.x,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
                                 sqrtf(sensor_data->accel.y * sensor_data->accel.y +
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69da      	ldr	r2, [r3, #28]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f7ff fa05 	bl	8000d58 <__aeabi_fmul>
 800194e:	4603      	mov	r3, r0
 8001950:	461d      	mov	r5, r3
                                       sensor_data->accel.z * sensor_data->accel.z)) * (180.0f / M_PI);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1a      	ldr	r2, [r3, #32]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f7ff f9fb 	bl	8000d58 <__aeabi_fmul>
 8001962:	4603      	mov	r3, r0
    telemetry.adcs.pitch = atan2f(-sensor_data->accel.x,
 8001964:	4619      	mov	r1, r3
 8001966:	4628      	mov	r0, r5
 8001968:	f7ff f8ee 	bl	8000b48 <__addsf3>
 800196c:	4603      	mov	r3, r0
 800196e:	4618      	mov	r0, r3
 8001970:	f006 fee2 	bl	8008738 <sqrtf>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	4620      	mov	r0, r4
 800197a:	f006 fedb 	bl	8008734 <atan2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fd5b 	bl	800043c <__aeabi_f2d>
                                       sensor_data->accel.z * sensor_data->accel.z)) * (180.0f / M_PI);
 8001986:	a30c      	add	r3, pc, #48	@ (adr r3, 80019b8 <UpdateTelemetryFromSensors+0x118>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fdae 	bl	80004ec <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f880 	bl	8000a9c <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
    telemetry.adcs.pitch = atan2f(-sensor_data->accel.x,
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <UpdateTelemetryFromSensors+0x128>)
 80019a0:	6353      	str	r3, [r2, #52]	@ 0x34
    telemetry.adcs.yaw = sensor_data->gyro.z; // Using gyro Z as yaw rate
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <UpdateTelemetryFromSensors+0x128>)
 80019a8:	63d3      	str	r3, [r2, #60]	@ 0x3c

    printf("[COMMS] Updated telemetry with new sensor data\r\n");
 80019aa:	4809      	ldr	r0, [pc, #36]	@ (80019d0 <UpdateTelemetryFromSensors+0x130>)
 80019ac:	f004 fd5c 	bl	8006468 <puts>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	1a63c1f8 	.word	0x1a63c1f8
 80019bc:	404ca5dc 	.word	0x404ca5dc
 80019c0:	20000024 	.word	0x20000024
 80019c4:	08008d5c 	.word	0x08008d5c
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000040 	.word	0x20000040
 80019d0:	08008d64 	.word	0x08008d64

080019d4 <ProcessReceivedCommand>:

/**
  * @brief Processes commands received over Bluetooth.
  */
void ProcessReceivedCommand(const char* command) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    printf("Received command: %s\r\n", command);
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	480e      	ldr	r0, [pc, #56]	@ (8001a18 <ProcessReceivedCommand+0x44>)
 80019e0:	f004 fcda 	bl	8006398 <iprintf>
    strncpy(telemetry.last_command_button, command, sizeof(telemetry.last_command_button) - 1);
 80019e4:	220f      	movs	r2, #15
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <ProcessReceivedCommand+0x48>)
 80019ea:	f004 fe59 	bl	80066a0 <strncpy>

    // Update command timestamp
    uint32_t secs = HAL_GetTick() / 1000;
 80019ee:	f001 f8f7 	bl	8002be0 <HAL_GetTick>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <ProcessReceivedCommand+0x4c>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	60fb      	str	r3, [r7, #12]
    snprintf(telemetry.last_command_time, sizeof(telemetry.last_command_time), "T+%lu s", secs);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <ProcessReceivedCommand+0x50>)
 8001a02:	2120      	movs	r1, #32
 8001a04:	4808      	ldr	r0, [pc, #32]	@ (8001a28 <ProcessReceivedCommand+0x54>)
 8001a06:	f004 fd37 	bl	8006478 <sniprintf>

    ExecuteCommand(command);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f80e 	bl	8001a2c <ExecuteCommand>
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	08008d94 	.word	0x08008d94
 8001a1c:	20000178 	.word	0x20000178
 8001a20:	10624dd3 	.word	0x10624dd3
 8001a24:	08008dac 	.word	0x08008dac
 8001a28:	20000188 	.word	0x20000188

08001a2c <ExecuteCommand>:

/**
  * @brief Executes a specific action based on the command string.
  */
void ExecuteCommand(const char* command) {
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    strcpy(telemetry.command_status, "Executing");
 8001a34:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <ExecuteCommand+0x88>)
 8001a36:	4a20      	ldr	r2, [pc, #128]	@ (8001ab8 <ExecuteCommand+0x8c>)
 8001a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a3a:	c303      	stmia	r3!, {r0, r1}
 8001a3c:	801a      	strh	r2, [r3, #0]

    if (strcmp(command, "STATUS_PING") == 0) {
 8001a3e:	491f      	ldr	r1, [pc, #124]	@ (8001abc <ExecuteCommand+0x90>)
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7fe fb85 	bl	8000150 <strcmp>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <ExecuteCommand+0x3c>
        printf("Executing STATUS_PING\r\n");
 8001a4c:	481c      	ldr	r0, [pc, #112]	@ (8001ac0 <ExecuteCommand+0x94>)
 8001a4e:	f004 fd0b 	bl	8006468 <puts>
        UpdateSystemStatus();
 8001a52:	f000 f843 	bl	8001adc <UpdateSystemStatus>
        strcpy(telemetry.command_status, "Ping Acknowledged");
 8001a56:	4a17      	ldr	r2, [pc, #92]	@ (8001ab4 <ExecuteCommand+0x88>)
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <ExecuteCommand+0x98>)
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	461d      	mov	r5, r3
 8001a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a62:	682b      	ldr	r3, [r5, #0]
 8001a64:	8023      	strh	r3, [r4, #0]
        HAL_NVIC_SystemReset();
    } else {
        printf("Unknown command: %s\r\n", command);
        strcpy(telemetry.command_status, "Unknown Command");
    }
}
 8001a66:	e020      	b.n	8001aaa <ExecuteCommand+0x7e>
    } else if (strcmp(command, "REBOOT_SYS") == 0) {
 8001a68:	4917      	ldr	r1, [pc, #92]	@ (8001ac8 <ExecuteCommand+0x9c>)
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fb70 	bl	8000150 <strcmp>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10f      	bne.n	8001a96 <ExecuteCommand+0x6a>
        printf("Executing REBOOT_SYS\r\n");
 8001a76:	4815      	ldr	r0, [pc, #84]	@ (8001acc <ExecuteCommand+0xa0>)
 8001a78:	f004 fcf6 	bl	8006468 <puts>
        strcpy(telemetry.command_status, "Rebooting...");
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <ExecuteCommand+0x88>)
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <ExecuteCommand+0xa4>)
 8001a80:	4614      	mov	r4, r2
 8001a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a84:	c407      	stmia	r4!, {r0, r1, r2}
 8001a86:	7023      	strb	r3, [r4, #0]
        HAL_Delay(1000);
 8001a88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a8c:	f001 f8b2 	bl	8002bf4 <HAL_Delay>
        HAL_NVIC_SystemReset();
 8001a90:	f001 f9eb 	bl	8002e6a <HAL_NVIC_SystemReset>
}
 8001a94:	e009      	b.n	8001aaa <ExecuteCommand+0x7e>
        printf("Unknown command: %s\r\n", command);
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	480e      	ldr	r0, [pc, #56]	@ (8001ad4 <ExecuteCommand+0xa8>)
 8001a9a:	f004 fc7d 	bl	8006398 <iprintf>
        strcpy(telemetry.command_status, "Unknown Command");
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <ExecuteCommand+0x88>)
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <ExecuteCommand+0xac>)
 8001aa2:	4614      	mov	r4, r2
 8001aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200001a8 	.word	0x200001a8
 8001ab8:	08008db4 	.word	0x08008db4
 8001abc:	08008dc0 	.word	0x08008dc0
 8001ac0:	08008dcc 	.word	0x08008dcc
 8001ac4:	08008de4 	.word	0x08008de4
 8001ac8:	08008df8 	.word	0x08008df8
 8001acc:	08008e04 	.word	0x08008e04
 8001ad0:	08008e1c 	.word	0x08008e1c
 8001ad4:	08008e2c 	.word	0x08008e2c
 8001ad8:	08008e44 	.word	0x08008e44

08001adc <UpdateSystemStatus>:

/**
  * @brief Updates the overall system status based on subsystem health.
  */
void UpdateSystemStatus(void) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
    // Update COMMS status
    strcpy(telemetry.comms.status, "ONLINE");
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <UpdateSystemStatus+0x74>)
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <UpdateSystemStatus+0x78>)
 8001ae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aea:	6018      	str	r0, [r3, #0]
 8001aec:	3304      	adds	r3, #4
 8001aee:	8019      	strh	r1, [r3, #0]
 8001af0:	3302      	adds	r3, #2
 8001af2:	0c0a      	lsrs	r2, r1, #16
 8001af4:	701a      	strb	r2, [r3, #0]

    // Update overall system status
    if (strcmp(telemetry.adcs.status, "ONLINE") == 0 && strcmp(telemetry.obc.status, "ONLINE") == 0) {
 8001af6:	4917      	ldr	r1, [pc, #92]	@ (8001b54 <UpdateSystemStatus+0x78>)
 8001af8:	4817      	ldr	r0, [pc, #92]	@ (8001b58 <UpdateSystemStatus+0x7c>)
 8001afa:	f7fe fb29 	bl	8000150 <strcmp>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10d      	bne.n	8001b20 <UpdateSystemStatus+0x44>
 8001b04:	4913      	ldr	r1, [pc, #76]	@ (8001b54 <UpdateSystemStatus+0x78>)
 8001b06:	4815      	ldr	r0, [pc, #84]	@ (8001b5c <UpdateSystemStatus+0x80>)
 8001b08:	f7fe fb22 	bl	8000150 <strcmp>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <UpdateSystemStatus+0x44>
        strcpy(telemetry.system_status, "NOMINAL");
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <UpdateSystemStatus+0x84>)
 8001b14:	4a13      	ldr	r2, [pc, #76]	@ (8001b64 <UpdateSystemStatus+0x88>)
 8001b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b1e:	e004      	b.n	8001b2a <UpdateSystemStatus+0x4e>
    } else {
        strcpy(telemetry.system_status, "DEGRADED");
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <UpdateSystemStatus+0x84>)
 8001b22:	4a11      	ldr	r2, [pc, #68]	@ (8001b68 <UpdateSystemStatus+0x8c>)
 8001b24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b26:	c303      	stmia	r3!, {r0, r1}
 8001b28:	701a      	strb	r2, [r3, #0]
    }

    // Update timestamp
    uint32_t secs = HAL_GetTick() / 1000;
 8001b2a:	f001 f859 	bl	8002be0 <HAL_GetTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <UpdateSystemStatus+0x90>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	607b      	str	r3, [r7, #4]
    snprintf(telemetry.timestamp, sizeof(telemetry.timestamp), "T+%lu s", secs);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <UpdateSystemStatus+0x94>)
 8001b3e:	2114      	movs	r1, #20
 8001b40:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <UpdateSystemStatus+0x98>)
 8001b42:	f004 fc99 	bl	8006478 <sniprintf>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200000f0 	.word	0x200000f0
 8001b54:	08008d5c 	.word	0x08008d5c
 8001b58:	20000024 	.word	0x20000024
 8001b5c:	200000b0 	.word	0x200000b0
 8001b60:	20000014 	.word	0x20000014
 8001b64:	08008e54 	.word	0x08008e54
 8001b68:	08008e5c 	.word	0x08008e5c
 8001b6c:	10624dd3 	.word	0x10624dd3
 8001b70:	08008dac 	.word	0x08008dac
 8001b74:	20000000 	.word	0x20000000

08001b78 <MX_TIM2_Init>:

/* ... (TIM2_Init, Error_Handler, etc. remain the same) ... */
static void MX_TIM2_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <MX_TIM2_Init+0x94>)
 8001b96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <MX_TIM2_Init+0x94>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <MX_TIM2_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <MX_TIM2_Init+0x94>)
 8001baa:	f04f 32ff 	mov.w	r2, #4294967295
 8001bae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <MX_TIM2_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <MX_TIM2_Init+0x94>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bbc:	4813      	ldr	r0, [pc, #76]	@ (8001c0c <MX_TIM2_Init+0x94>)
 8001bbe:	f002 fa83 	bl	80040c8 <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bc8:	f000 f822 	bl	8001c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480c      	ldr	r0, [pc, #48]	@ (8001c0c <MX_TIM2_Init+0x94>)
 8001bda:	f002 fac4 	bl	8004166 <HAL_TIM_ConfigClockSource>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001be4:	f000 f814 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <MX_TIM2_Init+0x94>)
 8001bf6:	f002 fc81 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c00:	f000 f806 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200003c0 	.word	0x200003c0

08001c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    printf("--- SYSTEM ERROR ---\r\n");
 8001c14:	4807      	ldr	r0, [pc, #28]	@ (8001c34 <Error_Handler+0x24>)
 8001c16:	f004 fc27 	bl	8006468 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1a:	b672      	cpsid	i
}
 8001c1c:	bf00      	nop
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c22:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <Error_Handler+0x28>)
 8001c24:	f001 fd70 	bl	8003708 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8001c28:	2064      	movs	r0, #100	@ 0x64
 8001c2a:	f000 ffe3 	bl	8002bf4 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c2e:	bf00      	nop
 8001c30:	e7f5      	b.n	8001c1e <Error_Handler+0xe>
 8001c32:	bf00      	nop
 8001c34:	08008e68 	.word	0x08008e68
 8001c38:	40011000 	.word	0x40011000

08001c3c <QueueCommand>:

extern UART_HandleTypeDef huart2;
#define DEBUG_UART &huart2

// Helper function to queue commands
static bool QueueCommand(const char* command) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    uint8_t next_head = (cmd_queue_head + 1) % CMD_QUEUE_SIZE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <QueueCommand+0x70>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <QueueCommand+0x74>)
 8001c4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c52:	1059      	asrs	r1, r3, #1
 8001c54:	17d3      	asrs	r3, r2, #31
 8001c56:	1ac9      	subs	r1, r1, r3
 8001c58:	460b      	mov	r3, r1
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	1ad1      	subs	r1, r2, r3
 8001c60:	460b      	mov	r3, r1
 8001c62:	73fb      	strb	r3, [r7, #15]
    if (next_head != cmd_queue_tail) {
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <QueueCommand+0x78>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d018      	beq.n	8001ca2 <QueueCommand+0x66>
        strncpy(cmd_queue[cmd_queue_head], command, COMMAND_BUFFER_SIZE - 1);
 8001c70:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <QueueCommand+0x70>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	019b      	lsls	r3, r3, #6
 8001c78:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb8 <QueueCommand+0x7c>)
 8001c7a:	4413      	add	r3, r2
 8001c7c:	223f      	movs	r2, #63	@ 0x3f
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 fd0d 	bl	80066a0 <strncpy>
        cmd_queue[cmd_queue_head][COMMAND_BUFFER_SIZE - 1] = '\0';
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <QueueCommand+0x70>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <QueueCommand+0x7c>)
 8001c8e:	019b      	lsls	r3, r3, #6
 8001c90:	4413      	add	r3, r2
 8001c92:	333f      	adds	r3, #63	@ 0x3f
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
        cmd_queue_head = next_head;
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <QueueCommand+0x70>)
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	7013      	strb	r3, [r2, #0]
        return true;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <QueueCommand+0x68>
    }
    return false; // Queue full
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200007bc 	.word	0x200007bc
 8001cb0:	66666667 	.word	0x66666667
 8001cb4:	200007bd 	.word	0x200007bd
 8001cb8:	2000067c 	.word	0x2000067c

08001cbc <DequeueCommand>:

// Helper function to dequeue commands
static bool DequeueCommand(char* command) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    if (cmd_queue_head != cmd_queue_tail) {
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <DequeueCommand+0x68>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <DequeueCommand+0x6c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d021      	beq.n	8001d18 <DequeueCommand+0x5c>
        strncpy(command, cmd_queue[cmd_queue_tail], COMMAND_BUFFER_SIZE - 1);
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <DequeueCommand+0x6c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	019b      	lsls	r3, r3, #6
 8001cdc:	4a13      	ldr	r2, [pc, #76]	@ (8001d2c <DequeueCommand+0x70>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	223f      	movs	r2, #63	@ 0x3f
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f004 fcdb 	bl	80066a0 <strncpy>
        command[COMMAND_BUFFER_SIZE - 1] = '\0';
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	333f      	adds	r3, #63	@ 0x3f
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
        cmd_queue_tail = (cmd_queue_tail + 1) % CMD_QUEUE_SIZE;
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <DequeueCommand+0x6c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <DequeueCommand+0x74>)
 8001cfc:	fb83 1302 	smull	r1, r3, r3, r2
 8001d00:	1059      	asrs	r1, r3, #1
 8001d02:	17d3      	asrs	r3, r2, #31
 8001d04:	1ac9      	subs	r1, r1, r3
 8001d06:	460b      	mov	r3, r1
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	1ad1      	subs	r1, r2, r3
 8001d0e:	b2ca      	uxtb	r2, r1
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <DequeueCommand+0x6c>)
 8001d12:	701a      	strb	r2, [r3, #0]
        return true;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <DequeueCommand+0x5e>
    }
    return false; // Queue empty
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200007bc 	.word	0x200007bc
 8001d28:	200007bd 	.word	0x200007bd
 8001d2c:	2000067c 	.word	0x2000067c
 8001d30:	66666667 	.word	0x66666667

08001d34 <BT_Init>:

// Initialize Bluetooth module
BT_StatusTypeDef BT_Init(UART_HandleTypeDef *huart) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    // Clear buffers
    memset(rx_buffer, 0, COMMAND_BUFFER_SIZE);
 8001d3c:	2240      	movs	r2, #64	@ 0x40
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4815      	ldr	r0, [pc, #84]	@ (8001d98 <BT_Init+0x64>)
 8001d42:	f004 fca5 	bl	8006690 <memset>
    memset(received_command, 0, COMMAND_BUFFER_SIZE);
 8001d46:	2240      	movs	r2, #64	@ 0x40
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4814      	ldr	r0, [pc, #80]	@ (8001d9c <BT_Init+0x68>)
 8001d4c:	f004 fca0 	bl	8006690 <memset>
    memset(cmd_queue, 0, sizeof(cmd_queue));
 8001d50:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001d54:	2100      	movs	r1, #0
 8001d56:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <BT_Init+0x6c>)
 8001d58:	f004 fc9a 	bl	8006690 <memset>
    rx_index = 0;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <BT_Init+0x70>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	801a      	strh	r2, [r3, #0]
    command_received = false;
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <BT_Init+0x74>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
    bt_comm_state = BT_COMM_IDLE;
 8001d68:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <BT_Init+0x78>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
    cmd_queue_head = 0;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <BT_Init+0x7c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
    cmd_queue_tail = 0;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <BT_Init+0x80>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]

    // Start single byte DMA reception (circular mode)
    if (HAL_UART_Receive_DMA(huart, &rx_single_byte, 1) != HAL_OK) {
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	490e      	ldr	r1, [pc, #56]	@ (8001db8 <BT_Init+0x84>)
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f002 fdfc 	bl	800497c <HAL_UART_Receive_DMA>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <BT_Init+0x5a>
        return BT_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <BT_Init+0x5c>
    }
    return BT_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000062c 	.word	0x2000062c
 8001d9c:	200005ec 	.word	0x200005ec
 8001da0:	2000067c 	.word	0x2000067c
 8001da4:	2000066e 	.word	0x2000066e
 8001da8:	200005e8 	.word	0x200005e8
 8001dac:	20000671 	.word	0x20000671
 8001db0:	200007bc 	.word	0x200007bc
 8001db4:	200007bd 	.word	0x200007bd
 8001db8:	2000066c 	.word	0x2000066c

08001dbc <BT_SendJSON>:

// Send JSON data with state management
BT_StatusTypeDef BT_SendJSON(TelemetryData *data) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
    // Check if already transmitting
    if (bt_comm_state != BT_COMM_IDLE) {
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <BT_SendJSON+0xb8>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <BT_SendJSON+0x24>
        printf("[BT] Bluetooth busy, current state: %d\r\n", bt_comm_state);
 8001dce:	4b29      	ldr	r3, [pc, #164]	@ (8001e74 <BT_SendJSON+0xb8>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4828      	ldr	r0, [pc, #160]	@ (8001e78 <BT_SendJSON+0xbc>)
 8001dd8:	f004 fade 	bl	8006398 <iprintf>
        return BT_BUSY;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e044      	b.n	8001e6a <BT_SendJSON+0xae>
    }

    // Allocate buffer for JSON (static to persist during DMA)
    static char json_buffer[JSON_BUFFER_SIZE];
    memset(json_buffer, 0, JSON_BUFFER_SIZE);
 8001de0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001de4:	2100      	movs	r1, #0
 8001de6:	4825      	ldr	r0, [pc, #148]	@ (8001e7c <BT_SendJSON+0xc0>)
 8001de8:	f004 fc52 	bl	8006690 <memset>

    BT_GenerateJSONString(data, json_buffer);
 8001dec:	4923      	ldr	r1, [pc, #140]	@ (8001e7c <BT_SendJSON+0xc0>)
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f91e 	bl	8002030 <BT_GenerateJSONString>
    uint16_t len = strlen(json_buffer);
 8001df4:	4821      	ldr	r0, [pc, #132]	@ (8001e7c <BT_SendJSON+0xc0>)
 8001df6:	f7fe f9b5 	bl	8000164 <strlen>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	81fb      	strh	r3, [r7, #14]

    // Check UART state before transmission
    if (huart3.gState != HAL_UART_STATE_READY) {
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <BT_SendJSON+0xc4>)
 8001e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d009      	beq.n	8001e1e <BT_SendJSON+0x62>
        printf("[BT] UART not ready, state: %d\r\n", huart3.gState);
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <BT_SendJSON+0xc4>)
 8001e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	481b      	ldr	r0, [pc, #108]	@ (8001e84 <BT_SendJSON+0xc8>)
 8001e16:	f004 fabf 	bl	8006398 <iprintf>
        return BT_BUSY;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e025      	b.n	8001e6a <BT_SendJSON+0xae>
    }

    printf("[BT] Sending JSON (%d bytes)...\r\n", len);
 8001e1e:	89fb      	ldrh	r3, [r7, #14]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4819      	ldr	r0, [pc, #100]	@ (8001e88 <BT_SendJSON+0xcc>)
 8001e24:	f004 fab8 	bl	8006398 <iprintf>

    // Set state to transmitting
    bt_comm_state = BT_COMM_TRANSMITTING;
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <BT_SendJSON+0xb8>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
    tx_buffer_ptr = json_buffer;
 8001e2e:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <BT_SendJSON+0xd0>)
 8001e30:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <BT_SendJSON+0xc0>)
 8001e32:	601a      	str	r2, [r3, #0]
    tx_buffer_size = len;
 8001e34:	4a16      	ldr	r2, [pc, #88]	@ (8001e90 <BT_SendJSON+0xd4>)
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	8013      	strh	r3, [r2, #0]

    // Use DMA for transmission to get completion callback
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart3, (uint8_t*)json_buffer, len);
 8001e3a:	89fb      	ldrh	r3, [r7, #14]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	490f      	ldr	r1, [pc, #60]	@ (8001e7c <BT_SendJSON+0xc0>)
 8001e40:	480f      	ldr	r0, [pc, #60]	@ (8001e80 <BT_SendJSON+0xc4>)
 8001e42:	f002 fd2b 	bl	800489c <HAL_UART_Transmit_DMA>
 8001e46:	4603      	mov	r3, r0
 8001e48:	737b      	strb	r3, [r7, #13]

    if (status != HAL_OK) {
 8001e4a:	7b7b      	ldrb	r3, [r7, #13]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00b      	beq.n	8001e68 <BT_SendJSON+0xac>
        printf("[BT] HAL_UART_Transmit_DMA failed: %d, ErrorCode: 0x%08lX\r\n", status, huart3.ErrorCode);
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	4a0b      	ldr	r2, [pc, #44]	@ (8001e80 <BT_SendJSON+0xc4>)
 8001e54:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e56:	4619      	mov	r1, r3
 8001e58:	480e      	ldr	r0, [pc, #56]	@ (8001e94 <BT_SendJSON+0xd8>)
 8001e5a:	f004 fa9d 	bl	8006398 <iprintf>
        bt_comm_state = BT_COMM_IDLE; // Reset state on error
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <BT_SendJSON+0xb8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
        return BT_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <BT_SendJSON+0xae>
    }

    return BT_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000671 	.word	0x20000671
 8001e78:	08008e80 	.word	0x08008e80
 8001e7c:	200007c0 	.word	0x200007c0
 8001e80:	20000498 	.word	0x20000498
 8001e84:	08008eac 	.word	0x08008eac
 8001e88:	08008ed0 	.word	0x08008ed0
 8001e8c:	20000674 	.word	0x20000674
 8001e90:	20000678 	.word	0x20000678
 8001e94:	08008ef4 	.word	0x08008ef4

08001e98 <BT_ErrorHandler>:
// Get current communication state
BT_CommunicationState BT_GetCommunicationState(void) {
    return bt_comm_state;
}

void BT_ErrorHandler(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
    printf("[ERROR] Reinitializing Bluetooth...\r\n");
 8001e9c:	480f      	ldr	r0, [pc, #60]	@ (8001edc <BT_ErrorHandler+0x44>)
 8001e9e:	f004 fae3 	bl	8006468 <puts>

    // Stop DMA
    HAL_UART_DMAStop(&huart3);
 8001ea2:	480f      	ldr	r0, [pc, #60]	@ (8001ee0 <BT_ErrorHandler+0x48>)
 8001ea4:	f002 fd8f 	bl	80049c6 <HAL_UART_DMAStop>

    // Reset state
    bt_comm_state = BT_COMM_IDLE;
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <BT_ErrorHandler+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]

    // Reset buffers
    memset(rx_buffer, 0, COMMAND_BUFFER_SIZE);
 8001eae:	2240      	movs	r2, #64	@ 0x40
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <BT_ErrorHandler+0x50>)
 8001eb4:	f004 fbec 	bl	8006690 <memset>
    memset(received_command, 0, COMMAND_BUFFER_SIZE);
 8001eb8:	2240      	movs	r2, #64	@ 0x40
 8001eba:	2100      	movs	r1, #0
 8001ebc:	480b      	ldr	r0, [pc, #44]	@ (8001eec <BT_ErrorHandler+0x54>)
 8001ebe:	f004 fbe7 	bl	8006690 <memset>
    rx_index = 0;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <BT_ErrorHandler+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	801a      	strh	r2, [r3, #0]
    command_received = false;
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <BT_ErrorHandler+0x5c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]

    // Restart single byte reception
    HAL_UART_Receive_DMA(&huart3, &rx_single_byte, 1);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4909      	ldr	r1, [pc, #36]	@ (8001ef8 <BT_ErrorHandler+0x60>)
 8001ed2:	4803      	ldr	r0, [pc, #12]	@ (8001ee0 <BT_ErrorHandler+0x48>)
 8001ed4:	f002 fd52 	bl	800497c <HAL_UART_Receive_DMA>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	08008f30 	.word	0x08008f30
 8001ee0:	20000498 	.word	0x20000498
 8001ee4:	20000671 	.word	0x20000671
 8001ee8:	2000062c 	.word	0x2000062c
 8001eec:	200005ec 	.word	0x200005ec
 8001ef0:	2000066e 	.word	0x2000066e
 8001ef4:	200005e8 	.word	0x200005e8
 8001ef8:	2000066c 	.word	0x2000066c

08001efc <BT_IsCommandReceived>:

// Check if command received (including queued commands)
bool BT_IsCommandReceived(void) {
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
    return command_received || (cmd_queue_head != cmd_queue_tail);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <BT_IsCommandReceived+0x34>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d107      	bne.n	8001f1a <BT_IsCommandReceived+0x1e>
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <BT_IsCommandReceived+0x38>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <BT_IsCommandReceived+0x3c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <BT_IsCommandReceived+0x22>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <BT_IsCommandReceived+0x24>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200005e8 	.word	0x200005e8
 8001f34:	200007bc 	.word	0x200007bc
 8001f38:	200007bd 	.word	0x200007bd

08001f3c <BT_ClearCommandFlag>:

// Clear command flag
void BT_ClearCommandFlag(void) {
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
    command_received = false;
 8001f40:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <BT_ClearCommandFlag+0x18>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    led_blink_flag = false;
 8001f46:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <BT_ClearCommandFlag+0x1c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	200005e8 	.word	0x200005e8
 8001f58:	20000670 	.word	0x20000670

08001f5c <BT_ReceiveCommand>:

// Receive command with timeout (now handles queued commands)
BT_StatusTypeDef BT_ReceiveCommand(char *command, uint32_t timeout) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    // First check if there are queued commands
    if (DequeueCommand(command)) {
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fea8 	bl	8001cbc <DequeueCommand>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <BT_ReceiveCommand+0x22>
        printf("[BT] Retrieved queued command: %s\r\n", command);
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4829      	ldr	r0, [pc, #164]	@ (800201c <BT_ReceiveCommand+0xc0>)
 8001f76:	f004 fa0f 	bl	8006398 <iprintf>
        return BT_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e049      	b.n	8002012 <BT_ReceiveCommand+0xb6>
    }

    // Then check for immediate command
    if (command_received) {
 8001f7e:	4b28      	ldr	r3, [pc, #160]	@ (8002020 <BT_ReceiveCommand+0xc4>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <BT_ReceiveCommand+0x42>
        strncpy(command, received_command, COMMAND_BUFFER_SIZE - 1);
 8001f88:	223f      	movs	r2, #63	@ 0x3f
 8001f8a:	4926      	ldr	r1, [pc, #152]	@ (8002024 <BT_ReceiveCommand+0xc8>)
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f004 fb87 	bl	80066a0 <strncpy>
        command[COMMAND_BUFFER_SIZE - 1] = '\0';
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	333f      	adds	r3, #63	@ 0x3f
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
        return BT_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e039      	b.n	8002012 <BT_ReceiveCommand+0xb6>
    }

    // Wait for new command with timeout
    uint32_t start = HAL_GetTick();
 8001f9e:	f000 fe1f 	bl	8002be0 <HAL_GetTick>
 8001fa2:	60f8      	str	r0, [r7, #12]
    while (!command_received && (cmd_queue_head == cmd_queue_tail)) {
 8001fa4:	e00c      	b.n	8001fc0 <BT_ReceiveCommand+0x64>
        if (HAL_GetTick() - start > timeout) {
 8001fa6:	f000 fe1b 	bl	8002be0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d201      	bcs.n	8001fba <BT_ReceiveCommand+0x5e>
            return BT_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e02b      	b.n	8002012 <BT_ReceiveCommand+0xb6>
        }
        HAL_Delay(1);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f000 fe1a 	bl	8002bf4 <HAL_Delay>
    while (!command_received && (cmd_queue_head == cmd_queue_tail)) {
 8001fc0:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <BT_ReceiveCommand+0xc4>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f083 0301 	eor.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <BT_ReceiveCommand+0x84>
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <BT_ReceiveCommand+0xcc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <BT_ReceiveCommand+0xd0>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d0e2      	beq.n	8001fa6 <BT_ReceiveCommand+0x4a>
    }

    // Check queued commands first
    if (DequeueCommand(command)) {
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fe6b 	bl	8001cbc <DequeueCommand>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <BT_ReceiveCommand+0x94>
        return BT_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e010      	b.n	8002012 <BT_ReceiveCommand+0xb6>
    }

    // Then immediate command
    if (command_received) {
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <BT_ReceiveCommand+0xc4>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <BT_ReceiveCommand+0xb4>
        strncpy(command, received_command, COMMAND_BUFFER_SIZE - 1);
 8001ffa:	223f      	movs	r2, #63	@ 0x3f
 8001ffc:	4909      	ldr	r1, [pc, #36]	@ (8002024 <BT_ReceiveCommand+0xc8>)
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f004 fb4e 	bl	80066a0 <strncpy>
        command[COMMAND_BUFFER_SIZE - 1] = '\0';
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	333f      	adds	r3, #63	@ 0x3f
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
        return BT_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	e000      	b.n	8002012 <BT_ReceiveCommand+0xb6>
    }

    return BT_TIMEOUT;
 8002010:	2303      	movs	r3, #3
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	08008f58 	.word	0x08008f58
 8002020:	200005e8 	.word	0x200005e8
 8002024:	200005ec 	.word	0x200005ec
 8002028:	200007bc 	.word	0x200007bc
 800202c:	200007bd 	.word	0x200007bd

08002030 <BT_GenerateJSONString>:

// In hc05_driver.c

// In hc05_driver.c

void BT_GenerateJSONString(TelemetryData *data, char *buffer) {
 8002030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002034:	b0e7      	sub	sp, #412	@ 0x19c
 8002036:	af38      	add	r7, sp, #224	@ 0xe0
 8002038:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 800203c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
        "},"
        "\"last_command_button\":\"%s\","
        "\"last_command_time\":\"%s\","
        "\"command_status\":\"%s\""
        "}",
        data->timestamp, data->system_status,
 8002040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800204c:	f103 0214 	add.w	r2, r3, #20
 8002050:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
        data->adcs.status, data->adcs.pitch, data->adcs.roll, data->adcs.yaw,
 8002054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002058:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800205c:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 8002060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f9e8 	bl	800043c <__aeabi_f2d>
 800206c:	e9c7 0126 	strd	r0, r1, [r7, #152]	@ 0x98
        data->adcs.status, data->adcs.pitch, data->adcs.roll, data->adcs.yaw,
 8002070:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f9e0 	bl	800043c <__aeabi_f2d>
 800207c:	e9c7 0124 	strd	r0, r1, [r7, #144]	@ 0x90
        data->adcs.status, data->adcs.pitch, data->adcs.roll, data->adcs.yaw,
 8002080:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe f9d8 	bl	800043c <__aeabi_f2d>
 800208c:	e9c7 0122 	strd	r0, r1, [r7, #136]	@ 0x88
        data->adcs.gps.latitude, data->adcs.gps.longitude, data->adcs.gps.altitude,
 8002090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe f9d0 	bl	800043c <__aeabi_f2d>
 800209c:	e9c7 0120 	strd	r0, r1, [r7, #128]	@ 0x80
        data->adcs.gps.latitude, data->adcs.gps.longitude, data->adcs.gps.altitude,
 80020a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    snprintf(buffer, JSON_BUFFER_SIZE,
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f9c8 	bl	800043c <__aeabi_f2d>
 80020ac:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
        data->adcs.gps.latitude, data->adcs.gps.longitude, data->adcs.gps.altitude,
 80020b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    snprintf(buffer, JSON_BUFFER_SIZE,
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe f9c0 	bl	800043c <__aeabi_f2d>
 80020bc:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 80020c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020c4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80020c6:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 80020ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020ce:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 80020d0:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80020d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020d6:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 80020d8:	66be      	str	r6, [r7, #104]	@ 0x68
 80020da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020de:	f8d3 c058 	ldr.w	ip, [r3, #88]	@ 0x58
 80020e2:	f8c7 c064 	str.w	ip, [r7, #100]	@ 0x64
 80020e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020ea:	f8d3 e05c 	ldr.w	lr, [r3, #92]	@ 0x5c
 80020ee:	f8c7 e060 	str.w	lr, [r7, #96]	@ 0x60
        data->adcs.light_sensors.face_a, data->adcs.light_sensors.face_b,
        data->adcs.light_sensors.face_c, data->adcs.light_sensors.face_d,
        data->adcs.temperature,
        data->eps.status, data->eps.battery_voltage, data->eps.battery_percentage,
 80020f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020f6:	f103 0878 	add.w	r8, r3, #120	@ 0x78
 80020fa:	f8c7 805c 	str.w	r8, [r7, #92]	@ 0x5c
 80020fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe f998 	bl	800043c <__aeabi_f2d>
 800210c:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8002110:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002114:	f8d3 908c 	ldr.w	r9, [r3, #140]	@ 0x8c
 8002118:	f8c7 9058 	str.w	r9, [r7, #88]	@ 0x58
        data->eps.current, data->eps.solar_power, data->eps.charging_status,
 800211c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f989 	bl	800043c <__aeabi_f2d>
 800212a:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
        data->eps.current, data->eps.solar_power, data->eps.charging_status,
 800212e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe f980 	bl	800043c <__aeabi_f2d>
 800213c:	4682      	mov	sl, r0
 800213e:	468b      	mov	fp, r1
        data->eps.current, data->eps.solar_power, data->eps.charging_status,
 8002140:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002144:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8002148:	6479      	str	r1, [r7, #68]	@ 0x44
    snprintf(buffer, JSON_BUFFER_SIZE,
 800214a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800214e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8002152:	643c      	str	r4, [r7, #64]	@ 0x40
 8002154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002158:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 800215c:	63fd      	str	r5, [r7, #60]	@ 0x3c
        data->eps.boost_output, data->eps.temperature,
        data->obc.status, data->obc.data_logging, data->obc.storage_usage,
 800215e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002162:	f103 06b0 	add.w	r6, r3, #176	@ 0xb0
 8002166:	63be      	str	r6, [r7, #56]	@ 0x38
 8002168:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800216c:	f103 0cc0 	add.w	ip, r3, #192	@ 0xc0
 8002170:	f8c7 c034 	str.w	ip, [r7, #52]	@ 0x34
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002174:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002178:	f8d3 e0d0 	ldr.w	lr, [r3, #208]	@ 0xd0
 800217c:	f8c7 e030 	str.w	lr, [r7, #48]	@ 0x30
        data->obc.rtc_sync, data->obc.i2c_status, data->obc.command_queue,
 8002180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002184:	f103 08d4 	add.w	r8, r3, #212	@ 0xd4
 8002188:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
 800218c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002190:	f103 09dc 	add.w	r9, r3, #220	@ 0xdc
 8002194:	f8c7 9028 	str.w	r9, [r7, #40]	@ 0x28
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002198:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800219c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
        data->comms.status, data->comms.rf_link, data->comms.signal_strength,
 80021a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80021aa:	6239      	str	r1, [r7, #32]
 80021ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021b0:	f503 7480 	add.w	r4, r3, #256	@ 0x100
 80021b4:	61fc      	str	r4, [r7, #28]
    snprintf(buffer, JSON_BUFFER_SIZE,
 80021b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021ba:	f8d3 5110 	ldr.w	r5, [r3, #272]	@ 0x110
 80021be:	61bd      	str	r5, [r7, #24]
 80021c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021c4:	f8d3 6114 	ldr.w	r6, [r3, #276]	@ 0x114
 80021c8:	617e      	str	r6, [r7, #20]
 80021ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021ce:	f8d3 c118 	ldr.w	ip, [r3, #280]	@ 0x118
 80021d2:	f8c7 c010 	str.w	ip, [r7, #16]
        data->comms.packets_sent, data->comms.packets_received, data->comms.last_command,
 80021d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021da:	f503 7e8e 	add.w	lr, r3, #284	@ 0x11c
 80021de:	f8c7 e00c 	str.w	lr, [r7, #12]
        data->payload.status, data->payload.payload_status, data->payload.images_today,
 80021e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021e6:	f503 7896 	add.w	r8, r3, #300	@ 0x12c
 80021ea:	f8c7 8008 	str.w	r8, [r7, #8]
 80021ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021f2:	f503 799e 	add.w	r9, r3, #316	@ 0x13c
 80021f6:	f8c7 9004 	str.w	r9, [r7, #4]
    snprintf(buffer, JSON_BUFFER_SIZE,
 80021fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021fe:	f8d3 614c 	ldr.w	r6, [r3, #332]	@ 0x14c
        data->payload.last_image_size, data->payload.ai_classification.result,
 8002202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002206:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
    snprintf(buffer, JSON_BUFFER_SIZE,
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f916 	bl	800043c <__aeabi_f2d>
 8002210:	4680      	mov	r8, r0
 8002212:	4689      	mov	r9, r1
        data->payload.last_image_size, data->payload.ai_classification.result,
 8002214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002218:	f503 75aa 	add.w	r5, r3, #340	@ 0x154
        data->payload.ai_classification.confidence,
 800221c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002220:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe f909 	bl	800043c <__aeabi_f2d>
        data->last_command_button, data->last_command_time, data->command_status
 800222a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800222e:	f503 74bc 	add.w	r4, r3, #376	@ 0x178
 8002232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002236:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800223a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800223e:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
    snprintf(buffer, JSON_BUFFER_SIZE,
 8002242:	9336      	str	r3, [sp, #216]	@ 0xd8
 8002244:	9235      	str	r2, [sp, #212]	@ 0xd4
 8002246:	9434      	str	r4, [sp, #208]	@ 0xd0
 8002248:	e9cd 0132 	strd	r0, r1, [sp, #200]	@ 0xc8
 800224c:	9530      	str	r5, [sp, #192]	@ 0xc0
 800224e:	e9cd 892e 	strd	r8, r9, [sp, #184]	@ 0xb8
 8002252:	962d      	str	r6, [sp, #180]	@ 0xb4
 8002254:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8002258:	f8cd 90b0 	str.w	r9, [sp, #176]	@ 0xb0
 800225c:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8002260:	f8cd 80ac 	str.w	r8, [sp, #172]	@ 0xac
 8002264:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8002268:	f8cd e0a8 	str.w	lr, [sp, #168]	@ 0xa8
 800226c:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8002270:	f8cd c0a4 	str.w	ip, [sp, #164]	@ 0xa4
 8002274:	697e      	ldr	r6, [r7, #20]
 8002276:	9628      	str	r6, [sp, #160]	@ 0xa0
 8002278:	69bd      	ldr	r5, [r7, #24]
 800227a:	9527      	str	r5, [sp, #156]	@ 0x9c
 800227c:	69fc      	ldr	r4, [r7, #28]
 800227e:	9426      	str	r4, [sp, #152]	@ 0x98
 8002280:	6a39      	ldr	r1, [r7, #32]
 8002282:	9125      	str	r1, [sp, #148]	@ 0x94
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	9324      	str	r3, [sp, #144]	@ 0x90
 8002288:	f8d7 9028 	ldr.w	r9, [r7, #40]	@ 0x28
 800228c:	f8cd 908c 	str.w	r9, [sp, #140]	@ 0x8c
 8002290:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 8002294:	f8cd 8088 	str.w	r8, [sp, #136]	@ 0x88
 8002298:	f8d7 e030 	ldr.w	lr, [r7, #48]	@ 0x30
 800229c:	f8cd e084 	str.w	lr, [sp, #132]	@ 0x84
 80022a0:	f8d7 c034 	ldr.w	ip, [r7, #52]	@ 0x34
 80022a4:	f8cd c080 	str.w	ip, [sp, #128]	@ 0x80
 80022a8:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80022aa:	961f      	str	r6, [sp, #124]	@ 0x7c
 80022ac:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 80022ae:	951e      	str	r5, [sp, #120]	@ 0x78
 80022b0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80022b2:	941d      	str	r4, [sp, #116]	@ 0x74
 80022b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80022b6:	911c      	str	r1, [sp, #112]	@ 0x70
 80022b8:	e9cd ab1a 	strd	sl, fp, [sp, #104]	@ 0x68
 80022bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022c0:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 80022c4:	f8d7 9058 	ldr.w	r9, [r7, #88]	@ 0x58
 80022c8:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
 80022cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 80022d4:	f8d7 805c 	ldr.w	r8, [r7, #92]	@ 0x5c
 80022d8:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 80022dc:	f8d7 e060 	ldr.w	lr, [r7, #96]	@ 0x60
 80022e0:	f8cd e048 	str.w	lr, [sp, #72]	@ 0x48
 80022e4:	f8d7 c064 	ldr.w	ip, [r7, #100]	@ 0x64
 80022e8:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80022ec:	6ebe      	ldr	r6, [r7, #104]	@ 0x68
 80022ee:	9610      	str	r6, [sp, #64]	@ 0x40
 80022f0:	6efd      	ldr	r5, [r7, #108]	@ 0x6c
 80022f2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80022f4:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80022f8:	940e      	str	r4, [sp, #56]	@ 0x38
 80022fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80022fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8002302:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002306:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800230a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800230e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002312:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002316:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800231a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800231e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002322:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002326:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800232a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800232e:	9101      	str	r1, [sp, #4]
 8002330:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002334:	9200      	str	r2, [sp, #0]
 8002336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800233a:	4a06      	ldr	r2, [pc, #24]	@ (8002354 <BT_GenerateJSONString+0x324>)
 800233c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002340:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002344:	f004 f898 	bl	8006478 <sniprintf>
    );
}
 8002348:	bf00      	nop
 800234a:	37bc      	adds	r7, #188	@ 0xbc
 800234c:	46bd      	mov	sp, r7
 800234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002352:	bf00      	nop
 8002354:	08008f7c 	.word	0x08008f7c

08002358 <HAL_UART_TxCpltCallback>:
bool BT_ShouldBlinkLED(void) {
    return led_blink_flag;
}

// UART TX Complete callback - handles transmission completion
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a18      	ldr	r2, [pc, #96]	@ (80023c8 <HAL_UART_TxCpltCallback+0x70>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d129      	bne.n	80023be <HAL_UART_TxCpltCallback+0x66>
        printf("[BT] JSON sent successfully\r\n");
 800236a:	4818      	ldr	r0, [pc, #96]	@ (80023cc <HAL_UART_TxCpltCallback+0x74>)
 800236c:	f004 f87c 	bl	8006468 <puts>
        bt_comm_state = BT_COMM_IDLE;
 8002370:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <HAL_UART_TxCpltCallback+0x78>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]

        // Process any queued commands
        if (cmd_queue_head != cmd_queue_tail) {
 8002376:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <HAL_UART_TxCpltCallback+0x7c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <HAL_UART_TxCpltCallback+0x80>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	429a      	cmp	r2, r3
 8002384:	d01b      	beq.n	80023be <HAL_UART_TxCpltCallback+0x66>
            printf("[BT] Processing queued commands (%d in queue)\r\n",
                   (cmd_queue_head - cmd_queue_tail + CMD_QUEUE_SIZE) % CMD_QUEUE_SIZE);
 8002386:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <HAL_UART_TxCpltCallback+0x7c>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_UART_TxCpltCallback+0x80>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	1d5a      	adds	r2, r3, #5
            printf("[BT] Processing queued commands (%d in queue)\r\n",
 8002398:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_UART_TxCpltCallback+0x84>)
 800239a:	fb83 1302 	smull	r1, r3, r3, r2
 800239e:	1059      	asrs	r1, r3, #1
 80023a0:	17d3      	asrs	r3, r2, #31
 80023a2:	1ac9      	subs	r1, r1, r3
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	1ad1      	subs	r1, r2, r3
 80023ac:	480c      	ldr	r0, [pc, #48]	@ (80023e0 <HAL_UART_TxCpltCallback+0x88>)
 80023ae:	f003 fff3 	bl	8006398 <iprintf>
            command_received = true;
 80023b2:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_UART_TxCpltCallback+0x8c>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
            led_blink_flag = true;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_UART_TxCpltCallback+0x90>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40004800 	.word	0x40004800
 80023cc:	080092d0 	.word	0x080092d0
 80023d0:	20000671 	.word	0x20000671
 80023d4:	200007bc 	.word	0x200007bc
 80023d8:	200007bd 	.word	0x200007bd
 80023dc:	66666667 	.word	0x66666667
 80023e0:	080092f0 	.word	0x080092f0
 80023e4:	200005e8 	.word	0x200005e8
 80023e8:	20000670 	.word	0x20000670

080023ec <HAL_UART_RxCpltCallback>:

// UART RX Complete callback - handles single byte reception with state management
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b092      	sub	sp, #72	@ 0x48
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a41      	ldr	r2, [pc, #260]	@ (8002500 <HAL_UART_RxCpltCallback+0x114>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d17b      	bne.n	80024f6 <HAL_UART_RxCpltCallback+0x10a>
        // Process received byte
        if (rx_single_byte == '\n' || rx_single_byte == '\r') {
 80023fe:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <HAL_UART_RxCpltCallback+0x118>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b0a      	cmp	r3, #10
 8002404:	d003      	beq.n	800240e <HAL_UART_RxCpltCallback+0x22>
 8002406:	4b3f      	ldr	r3, [pc, #252]	@ (8002504 <HAL_UART_RxCpltCallback+0x118>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b0d      	cmp	r3, #13
 800240c:	d14b      	bne.n	80024a6 <HAL_UART_RxCpltCallback+0xba>
            // End of command
            if (rx_index > 0) {
 800240e:	4b3e      	ldr	r3, [pc, #248]	@ (8002508 <HAL_UART_RxCpltCallback+0x11c>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d06a      	beq.n	80024ec <HAL_UART_RxCpltCallback+0x100>
                rx_buffer[rx_index] = '\0'; // Null terminate
 8002416:	4b3c      	ldr	r3, [pc, #240]	@ (8002508 <HAL_UART_RxCpltCallback+0x11c>)
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4b3b      	ldr	r3, [pc, #236]	@ (800250c <HAL_UART_RxCpltCallback+0x120>)
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]

                // Copy to temporary buffer
                char temp_command[COMMAND_BUFFER_SIZE];
                strncpy(temp_command, (char*)rx_buffer, COMMAND_BUFFER_SIZE - 1);
 8002422:	f107 0308 	add.w	r3, r7, #8
 8002426:	223f      	movs	r2, #63	@ 0x3f
 8002428:	4938      	ldr	r1, [pc, #224]	@ (800250c <HAL_UART_RxCpltCallback+0x120>)
 800242a:	4618      	mov	r0, r3
 800242c:	f004 f938 	bl	80066a0 <strncpy>
                temp_command[COMMAND_BUFFER_SIZE - 1] = '\0';
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

                printf("[BT] Command received: %s (len: %d)\r\n", temp_command, rx_index);
 8002436:	4b34      	ldr	r3, [pc, #208]	@ (8002508 <HAL_UART_RxCpltCallback+0x11c>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	4619      	mov	r1, r3
 8002442:	4833      	ldr	r0, [pc, #204]	@ (8002510 <HAL_UART_RxCpltCallback+0x124>)
 8002444:	f003 ffa8 	bl	8006398 <iprintf>

                // Handle command based on current state
                if (bt_comm_state == BT_COMM_TRANSMITTING) {
 8002448:	4b32      	ldr	r3, [pc, #200]	@ (8002514 <HAL_UART_RxCpltCallback+0x128>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10f      	bne.n	8002472 <HAL_UART_RxCpltCallback+0x86>
                    // Queue command for later processing
                    if (QueueCommand(temp_command)) {
 8002452:	f107 0308 	add.w	r3, r7, #8
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fbf0 	bl	8001c3c <QueueCommand>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_UART_RxCpltCallback+0x7e>
                        printf("[BT] Command queued during transmission\r\n");
 8002462:	482d      	ldr	r0, [pc, #180]	@ (8002518 <HAL_UART_RxCpltCallback+0x12c>)
 8002464:	f004 f800 	bl	8006468 <puts>
 8002468:	e014      	b.n	8002494 <HAL_UART_RxCpltCallback+0xa8>
                    } else {
                        printf("[BT] Command queue full! Dropping command\r\n");
 800246a:	482c      	ldr	r0, [pc, #176]	@ (800251c <HAL_UART_RxCpltCallback+0x130>)
 800246c:	f003 fffc 	bl	8006468 <puts>
 8002470:	e010      	b.n	8002494 <HAL_UART_RxCpltCallback+0xa8>
                    }
                } else {
                    // Process immediately
                    strncpy(received_command, temp_command, COMMAND_BUFFER_SIZE - 1);
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	223f      	movs	r2, #63	@ 0x3f
 8002478:	4619      	mov	r1, r3
 800247a:	4829      	ldr	r0, [pc, #164]	@ (8002520 <HAL_UART_RxCpltCallback+0x134>)
 800247c:	f004 f910 	bl	80066a0 <strncpy>
                    received_command[COMMAND_BUFFER_SIZE - 1] = '\0';
 8002480:	4b27      	ldr	r3, [pc, #156]	@ (8002520 <HAL_UART_RxCpltCallback+0x134>)
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
                    command_received = true;
 8002488:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <HAL_UART_RxCpltCallback+0x138>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
                    led_blink_flag = true;
 800248e:	4b26      	ldr	r3, [pc, #152]	@ (8002528 <HAL_UART_RxCpltCallback+0x13c>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
                }

                // Reset buffer
                memset(rx_buffer, 0, COMMAND_BUFFER_SIZE);
 8002494:	2240      	movs	r2, #64	@ 0x40
 8002496:	2100      	movs	r1, #0
 8002498:	481c      	ldr	r0, [pc, #112]	@ (800250c <HAL_UART_RxCpltCallback+0x120>)
 800249a:	f004 f8f9 	bl	8006690 <memset>
                rx_index = 0;
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <HAL_UART_RxCpltCallback+0x11c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	801a      	strh	r2, [r3, #0]
            if (rx_index > 0) {
 80024a4:	e022      	b.n	80024ec <HAL_UART_RxCpltCallback+0x100>
            }
        } else if (rx_single_byte >= 32 && rx_single_byte <= 126) { // Printable ASCII
 80024a6:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <HAL_UART_RxCpltCallback+0x118>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b1f      	cmp	r3, #31
 80024ac:	d91e      	bls.n	80024ec <HAL_UART_RxCpltCallback+0x100>
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_UART_RxCpltCallback+0x118>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b7e      	cmp	r3, #126	@ 0x7e
 80024b4:	d81a      	bhi.n	80024ec <HAL_UART_RxCpltCallback+0x100>
            // Add to buffer if there's space
            if (rx_index < (COMMAND_BUFFER_SIZE - 1)) {
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <HAL_UART_RxCpltCallback+0x11c>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80024bc:	d80b      	bhi.n	80024d6 <HAL_UART_RxCpltCallback+0xea>
                rx_buffer[rx_index++] = rx_single_byte;
 80024be:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <HAL_UART_RxCpltCallback+0x11c>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	b291      	uxth	r1, r2
 80024c6:	4a10      	ldr	r2, [pc, #64]	@ (8002508 <HAL_UART_RxCpltCallback+0x11c>)
 80024c8:	8011      	strh	r1, [r2, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <HAL_UART_RxCpltCallback+0x118>)
 80024ce:	7819      	ldrb	r1, [r3, #0]
 80024d0:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <HAL_UART_RxCpltCallback+0x120>)
 80024d2:	5499      	strb	r1, [r3, r2]
 80024d4:	e00a      	b.n	80024ec <HAL_UART_RxCpltCallback+0x100>
            } else {
                // Buffer overflow protection
                printf("[BT] RX Buffer overflow, resetting\r\n");
 80024d6:	4815      	ldr	r0, [pc, #84]	@ (800252c <HAL_UART_RxCpltCallback+0x140>)
 80024d8:	f003 ffc6 	bl	8006468 <puts>
                memset(rx_buffer, 0, COMMAND_BUFFER_SIZE);
 80024dc:	2240      	movs	r2, #64	@ 0x40
 80024de:	2100      	movs	r1, #0
 80024e0:	480a      	ldr	r0, [pc, #40]	@ (800250c <HAL_UART_RxCpltCallback+0x120>)
 80024e2:	f004 f8d5 	bl	8006690 <memset>
                rx_index = 0;
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <HAL_UART_RxCpltCallback+0x11c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	801a      	strh	r2, [r3, #0]
            }
        }
        // Ignore other characters (like control characters)

        // Restart single byte reception
        HAL_UART_Receive_DMA(&huart3, &rx_single_byte, 1);
 80024ec:	2201      	movs	r2, #1
 80024ee:	4905      	ldr	r1, [pc, #20]	@ (8002504 <HAL_UART_RxCpltCallback+0x118>)
 80024f0:	480f      	ldr	r0, [pc, #60]	@ (8002530 <HAL_UART_RxCpltCallback+0x144>)
 80024f2:	f002 fa43 	bl	800497c <HAL_UART_Receive_DMA>
    }
}
 80024f6:	bf00      	nop
 80024f8:	3748      	adds	r7, #72	@ 0x48
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40004800 	.word	0x40004800
 8002504:	2000066c 	.word	0x2000066c
 8002508:	2000066e 	.word	0x2000066e
 800250c:	2000062c 	.word	0x2000062c
 8002510:	08009320 	.word	0x08009320
 8002514:	20000671 	.word	0x20000671
 8002518:	08009348 	.word	0x08009348
 800251c:	08009374 	.word	0x08009374
 8002520:	200005ec 	.word	0x200005ec
 8002524:	200005e8 	.word	0x200005e8
 8002528:	20000670 	.word	0x20000670
 800252c:	080093a0 	.word	0x080093a0
 8002530:	20000498 	.word	0x20000498

08002534 <HAL_UART_ErrorCallback>:

// DMA error callback
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1e      	ldr	r2, [pc, #120]	@ (80025bc <HAL_UART_ErrorCallback+0x88>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d136      	bne.n	80025b4 <HAL_UART_ErrorCallback+0x80>
        printf("[BT] UART Error: 0x%08lX\r\n", huart->ErrorCode);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	4619      	mov	r1, r3
 800254c:	481c      	ldr	r0, [pc, #112]	@ (80025c0 <HAL_UART_ErrorCallback+0x8c>)
 800254e:	f003 ff23 	bl	8006398 <iprintf>

        // Clear error flags
        __HAL_UART_CLEAR_OREFLAG(huart);
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697b      	ldr	r3, [r7, #20]
        __HAL_UART_CLEAR_NEFLAG(huart);
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]
        __HAL_UART_CLEAR_FEFLAG(huart);
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
        __HAL_UART_CLEAR_PEFLAG(huart);
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]

        // Reset state
        bt_comm_state = BT_COMM_IDLE;
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_UART_ErrorCallback+0x90>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]

        // Restart reception
        BT_ErrorHandler();
 80025b0:	f7ff fc72 	bl	8001e98 <BT_ErrorHandler>
    }
}
 80025b4:	bf00      	nop
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40004800 	.word	0x40004800
 80025c0:	080093c4 	.word	0x080093c4
 80025c4:	20000671 	.word	0x20000671

080025c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_MspInit+0x5c>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	4a14      	ldr	r2, [pc, #80]	@ (8002624 <HAL_MspInit+0x5c>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6193      	str	r3, [r2, #24]
 80025da:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_MspInit+0x5c>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <HAL_MspInit+0x5c>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002624 <HAL_MspInit+0x5c>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <HAL_MspInit+0x5c>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <HAL_MspInit+0x60>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <HAL_MspInit+0x60>)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	40021000 	.word	0x40021000
 8002628:	40010000 	.word	0x40010000

0800262c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800263c:	d10b      	bne.n	8002656 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <HAL_TIM_Base_MspInit+0x34>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a07      	ldr	r2, [pc, #28]	@ (8002660 <HAL_TIM_Base_MspInit+0x34>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	61d3      	str	r3, [r2, #28]
 800264a:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_TIM_Base_MspInit+0x34>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	40021000 	.word	0x40021000

08002664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	@ 0x30
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0320 	add.w	r3, r7, #32
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a7f      	ldr	r2, [pc, #508]	@ (800287c <HAL_UART_MspInit+0x218>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d132      	bne.n	80026ea <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002684:	4b7e      	ldr	r3, [pc, #504]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a7d      	ldr	r2, [pc, #500]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 800268a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b7b      	ldr	r3, [pc, #492]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	4b78      	ldr	r3, [pc, #480]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a77      	ldr	r2, [pc, #476]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b75      	ldr	r3, [pc, #468]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0320 	add.w	r3, r7, #32
 80026c6:	4619      	mov	r1, r3
 80026c8:	486e      	ldr	r0, [pc, #440]	@ (8002884 <HAL_UART_MspInit+0x220>)
 80026ca:	f000 fe81 	bl	80033d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 0320 	add.w	r3, r7, #32
 80026e0:	4619      	mov	r1, r3
 80026e2:	4868      	ldr	r0, [pc, #416]	@ (8002884 <HAL_UART_MspInit+0x220>)
 80026e4:	f000 fe74 	bl	80033d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026e8:	e0c3      	b.n	8002872 <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==USART2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a66      	ldr	r2, [pc, #408]	@ (8002888 <HAL_UART_MspInit+0x224>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d130      	bne.n	8002756 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026f4:	4b62      	ldr	r3, [pc, #392]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a61      	ldr	r2, [pc, #388]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 80026fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026fe:	61d3      	str	r3, [r2, #28]
 8002700:	4b5f      	ldr	r3, [pc, #380]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	4b5c      	ldr	r3, [pc, #368]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a5b      	ldr	r2, [pc, #364]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b59      	ldr	r3, [pc, #356]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002724:	2304      	movs	r3, #4
 8002726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 0320 	add.w	r3, r7, #32
 8002734:	4619      	mov	r1, r3
 8002736:	4853      	ldr	r0, [pc, #332]	@ (8002884 <HAL_UART_MspInit+0x220>)
 8002738:	f000 fe4a 	bl	80033d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800273c:	2308      	movs	r3, #8
 800273e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	4619      	mov	r1, r3
 800274e:	484d      	ldr	r0, [pc, #308]	@ (8002884 <HAL_UART_MspInit+0x220>)
 8002750:	f000 fe3e 	bl	80033d0 <HAL_GPIO_Init>
}
 8002754:	e08d      	b.n	8002872 <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==USART3)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a4c      	ldr	r2, [pc, #304]	@ (800288c <HAL_UART_MspInit+0x228>)
 800275c:	4293      	cmp	r3, r2
 800275e:	f040 8088 	bne.w	8002872 <HAL_UART_MspInit+0x20e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002762:	4b47      	ldr	r3, [pc, #284]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a46      	ldr	r2, [pc, #280]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	4b41      	ldr	r3, [pc, #260]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	4a40      	ldr	r2, [pc, #256]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	6193      	str	r3, [r2, #24]
 8002786:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_UART_MspInit+0x21c>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 0320 	add.w	r3, r7, #32
 80027a4:	4619      	mov	r1, r3
 80027a6:	483a      	ldr	r0, [pc, #232]	@ (8002890 <HAL_UART_MspInit+0x22c>)
 80027a8:	f000 fe12 	bl	80033d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	f107 0320 	add.w	r3, r7, #32
 80027be:	4619      	mov	r1, r3
 80027c0:	4833      	ldr	r0, [pc, #204]	@ (8002890 <HAL_UART_MspInit+0x22c>)
 80027c2:	f000 fe05 	bl	80033d0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80027c6:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <HAL_UART_MspInit+0x230>)
 80027c8:	4a33      	ldr	r2, [pc, #204]	@ (8002898 <HAL_UART_MspInit+0x234>)
 80027ca:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HAL_UART_MspInit+0x230>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d2:	4b30      	ldr	r3, [pc, #192]	@ (8002894 <HAL_UART_MspInit+0x230>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002894 <HAL_UART_MspInit+0x230>)
 80027da:	2280      	movs	r2, #128	@ 0x80
 80027dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027de:	4b2d      	ldr	r3, [pc, #180]	@ (8002894 <HAL_UART_MspInit+0x230>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002894 <HAL_UART_MspInit+0x230>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80027ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002894 <HAL_UART_MspInit+0x230>)
 80027ec:	2220      	movs	r2, #32
 80027ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027f0:	4b28      	ldr	r3, [pc, #160]	@ (8002894 <HAL_UART_MspInit+0x230>)
 80027f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80027f8:	4826      	ldr	r0, [pc, #152]	@ (8002894 <HAL_UART_MspInit+0x230>)
 80027fa:	f000 fb47 	bl	8002e8c <HAL_DMA_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8002804:	f7ff fa04 	bl	8001c10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a22      	ldr	r2, [pc, #136]	@ (8002894 <HAL_UART_MspInit+0x230>)
 800280c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800280e:	4a21      	ldr	r2, [pc, #132]	@ (8002894 <HAL_UART_MspInit+0x230>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002814:	4b21      	ldr	r3, [pc, #132]	@ (800289c <HAL_UART_MspInit+0x238>)
 8002816:	4a22      	ldr	r2, [pc, #136]	@ (80028a0 <HAL_UART_MspInit+0x23c>)
 8002818:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <HAL_UART_MspInit+0x238>)
 800281c:	2210      	movs	r2, #16
 800281e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002820:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <HAL_UART_MspInit+0x238>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002826:	4b1d      	ldr	r3, [pc, #116]	@ (800289c <HAL_UART_MspInit+0x238>)
 8002828:	2280      	movs	r2, #128	@ 0x80
 800282a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <HAL_UART_MspInit+0x238>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002832:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <HAL_UART_MspInit+0x238>)
 8002834:	2200      	movs	r2, #0
 8002836:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002838:	4b18      	ldr	r3, [pc, #96]	@ (800289c <HAL_UART_MspInit+0x238>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800283e:	4b17      	ldr	r3, [pc, #92]	@ (800289c <HAL_UART_MspInit+0x238>)
 8002840:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002844:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002846:	4815      	ldr	r0, [pc, #84]	@ (800289c <HAL_UART_MspInit+0x238>)
 8002848:	f000 fb20 	bl	8002e8c <HAL_DMA_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8002852:	f7ff f9dd 	bl	8001c10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a10      	ldr	r2, [pc, #64]	@ (800289c <HAL_UART_MspInit+0x238>)
 800285a:	639a      	str	r2, [r3, #56]	@ 0x38
 800285c:	4a0f      	ldr	r2, [pc, #60]	@ (800289c <HAL_UART_MspInit+0x238>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	2027      	movs	r0, #39	@ 0x27
 8002868:	f000 fad5 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800286c:	2027      	movs	r0, #39	@ 0x27
 800286e:	f000 faee 	bl	8002e4e <HAL_NVIC_EnableIRQ>
}
 8002872:	bf00      	nop
 8002874:	3730      	adds	r7, #48	@ 0x30
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40013800 	.word	0x40013800
 8002880:	40021000 	.word	0x40021000
 8002884:	40010800 	.word	0x40010800
 8002888:	40004400 	.word	0x40004400
 800288c:	40004800 	.word	0x40004800
 8002890:	40010c00 	.word	0x40010c00
 8002894:	200004e0 	.word	0x200004e0
 8002898:	40020030 	.word	0x40020030
 800289c:	20000524 	.word	0x20000524
 80028a0:	4002001c 	.word	0x4002001c

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
       // Rapid LED blinking to indicate crash
       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80028a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028ac:	4803      	ldr	r0, [pc, #12]	@ (80028bc <NMI_Handler+0x18>)
 80028ae:	f000 ff2b 	bl	8003708 <HAL_GPIO_TogglePin>
       HAL_Delay(100);
 80028b2:	2064      	movs	r0, #100	@ 0x64
 80028b4:	f000 f99e 	bl	8002bf4 <HAL_Delay>
       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80028b8:	bf00      	nop
 80028ba:	e7f5      	b.n	80028a8 <NMI_Handler+0x4>
 80028bc:	40011000 	.word	0x40011000

080028c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    printf("[CRIT] HardFault detected!\r\n");
 80028c4:	4806      	ldr	r0, [pc, #24]	@ (80028e0 <HardFault_Handler+0x20>)
 80028c6:	f003 fdcf 	bl	8006468 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
      // Rapid LED blinking to indicate crash
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80028ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028ce:	4805      	ldr	r0, [pc, #20]	@ (80028e4 <HardFault_Handler+0x24>)
 80028d0:	f000 ff1a 	bl	8003708 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 80028d4:	2064      	movs	r0, #100	@ 0x64
 80028d6:	f000 f98d 	bl	8002bf4 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80028da:	bf00      	nop
 80028dc:	e7f5      	b.n	80028ca <HardFault_Handler+0xa>
 80028de:	bf00      	nop
 80028e0:	080093e0 	.word	0x080093e0
 80028e4:	40011000 	.word	0x40011000

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
    printf("[CRIT] Memory Manager Fault!\r\n");
 80028ec:	4806      	ldr	r0, [pc, #24]	@ (8002908 <MemManage_Handler+0x20>)
 80028ee:	f003 fdbb 	bl	8006468 <puts>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80028f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028f6:	4805      	ldr	r0, [pc, #20]	@ (800290c <MemManage_Handler+0x24>)
 80028f8:	f000 ff06 	bl	8003708 <HAL_GPIO_TogglePin>
      HAL_Delay(200);
 80028fc:	20c8      	movs	r0, #200	@ 0xc8
 80028fe:	f000 f979 	bl	8002bf4 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002902:	bf00      	nop
 8002904:	e7f5      	b.n	80028f2 <MemManage_Handler+0xa>
 8002906:	bf00      	nop
 8002908:	080093fc 	.word	0x080093fc
 800290c:	40011000 	.word	0x40011000

08002910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <UsageFault_Handler+0x4>

08002920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002948:	f000 f938 	bl	8002bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}

08002950 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002954:	4802      	ldr	r0, [pc, #8]	@ (8002960 <DMA1_Channel2_IRQHandler+0x10>)
 8002956:	f000 fc07 	bl	8003168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000524 	.word	0x20000524

08002964 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002968:	4802      	ldr	r0, [pc, #8]	@ (8002974 <DMA1_Channel3_IRQHandler+0x10>)
 800296a:	f000 fbfd 	bl	8003168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200004e0 	.word	0x200004e0

08002978 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800297c:	4802      	ldr	r0, [pc, #8]	@ (8002988 <USART3_IRQHandler+0x10>)
 800297e:	f002 f8a1 	bl	8004ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000498 	.word	0x20000498

0800298c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return 1;
 8002990:	2301      	movs	r3, #1
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <_kill>:

int _kill(int pid, int sig)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029a4:	f003 feda 	bl	800675c <__errno>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2216      	movs	r2, #22
 80029ac:	601a      	str	r2, [r3, #0]
  return -1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_exit>:

void _exit (int status)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029c2:	f04f 31ff 	mov.w	r1, #4294967295
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffe7 	bl	800299a <_kill>
  while (1) {}    /* Make sure we hang here */
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <_exit+0x12>

080029d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e00a      	b.n	80029f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029e2:	f3af 8000 	nop.w
 80029e6:	4601      	mov	r1, r0
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	60ba      	str	r2, [r7, #8]
 80029ee:	b2ca      	uxtb	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3301      	adds	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	dbf0      	blt.n	80029e2 <_read+0x12>
  }

  return len;
 8002a00:	687b      	ldr	r3, [r7, #4]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a30:	605a      	str	r2, [r3, #4]
  return 0;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <_isatty>:

int _isatty(int file)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a74:	4a14      	ldr	r2, [pc, #80]	@ (8002ac8 <_sbrk+0x5c>)
 8002a76:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <_sbrk+0x60>)
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a80:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <_sbrk+0x64>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ad4 <_sbrk+0x68>)
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <_sbrk+0x64>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d207      	bcs.n	8002aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a9c:	f003 fe5e 	bl	800675c <__errno>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aaa:	e009      	b.n	8002ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aac:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab2:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <_sbrk+0x64>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	4a05      	ldr	r2, [pc, #20]	@ (8002ad0 <_sbrk+0x64>)
 8002abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20005000 	.word	0x20005000
 8002acc:	00000400 	.word	0x00000400
 8002ad0:	20000fc0 	.word	0x20000fc0
 8002ad4:	20001118 	.word	0x20001118

08002ad8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ae4:	f7ff fff8 	bl	8002ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae8:	480b      	ldr	r0, [pc, #44]	@ (8002b18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002aea:	490c      	ldr	r1, [pc, #48]	@ (8002b1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002aec:	4a0c      	ldr	r2, [pc, #48]	@ (8002b20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af0:	e002      	b.n	8002af8 <LoopCopyDataInit>

08002af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af6:	3304      	adds	r3, #4

08002af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002afc:	d3f9      	bcc.n	8002af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afe:	4a09      	ldr	r2, [pc, #36]	@ (8002b24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b00:	4c09      	ldr	r4, [pc, #36]	@ (8002b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b04:	e001      	b.n	8002b0a <LoopFillZerobss>

08002b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b08:	3204      	adds	r2, #4

08002b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b0c:	d3fb      	bcc.n	8002b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f003 fe2b 	bl	8006768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b12:	f7fe fb39 	bl	8001188 <main>
  bx lr
 8002b16:	4770      	bx	lr
  ldr r0, =_sdata
 8002b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b1c:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8002b20:	08009800 	.word	0x08009800
  ldr r2, =_sbss
 8002b24:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 8002b28:	20001114 	.word	0x20001114

08002b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <ADC1_2_IRQHandler>
	...

08002b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <HAL_Init+0x28>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	@ (8002b58 <HAL_Init+0x28>)
 8002b3a:	f043 0310 	orr.w	r3, r3, #16
 8002b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f000 f95d 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b46:	200f      	movs	r0, #15
 8002b48:	f000 f808 	bl	8002b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4c:	f7ff fd3c 	bl	80025c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40022000 	.word	0x40022000

08002b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b64:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_InitTick+0x54>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_InitTick+0x58>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f979 	bl	8002e72 <HAL_SYSTICK_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00e      	b.n	8002ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d80a      	bhi.n	8002ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b90:	2200      	movs	r2, #0
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f000 f93d 	bl	8002e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b9c:	4a06      	ldr	r2, [pc, #24]	@ (8002bb8 <HAL_InitTick+0x5c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200001c8 	.word	0x200001c8
 8002bb4:	200001d0 	.word	0x200001d0
 8002bb8:	200001cc 	.word	0x200001cc

08002bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_IncTick+0x1c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <HAL_IncTick+0x20>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a03      	ldr	r2, [pc, #12]	@ (8002bdc <HAL_IncTick+0x20>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	200001d0 	.word	0x200001d0
 8002bdc:	20000fc4 	.word	0x20000fc4

08002be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return uwTick;
 8002be4:	4b02      	ldr	r3, [pc, #8]	@ (8002bf0 <HAL_GetTick+0x10>)
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	20000fc4 	.word	0x20000fc4

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff fff0 	bl	8002be0 <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffe0 	bl	8002be0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200001d0 	.word	0x200001d0

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db0b      	blt.n	8002cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4906      	ldr	r1, [pc, #24]	@ (8002cd4 <__NVIC_EnableIRQ+0x34>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	@ (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	@ (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	@ 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	@ 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d94:	f3bf 8f4f 	dsb	sy
}
 8002d98:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <__NVIC_SystemReset+0x24>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002da2:	4904      	ldr	r1, [pc, #16]	@ (8002db4 <__NVIC_SystemReset+0x24>)
 8002da4:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <__NVIC_SystemReset+0x28>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002daa:	f3bf 8f4f 	dsb	sy
}
 8002dae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <__NVIC_SystemReset+0x20>
 8002db4:	e000ed00 	.word	0xe000ed00
 8002db8:	05fa0004 	.word	0x05fa0004

08002dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dcc:	d301      	bcc.n	8002dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00f      	b.n	8002df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <SysTick_Config+0x40>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f7ff ff7a 	bl	8002cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <SysTick_Config+0x40>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <SysTick_Config+0x40>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff17 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff2c 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff7a 	bl	8002d2c <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff49 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff1f 	bl	8002ca0 <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002e6e:	f7ff ff8f 	bl	8002d90 <__NVIC_SystemReset>

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff9e 	bl	8002dbc <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e043      	b.n	8002f2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b22      	ldr	r3, [pc, #136]	@ (8002f34 <HAL_DMA_Init+0xa8>)
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a22      	ldr	r2, [pc, #136]	@ (8002f38 <HAL_DMA_Init+0xac>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	009a      	lsls	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f3c <HAL_DMA_Init+0xb0>)
 8002ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ed6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002eda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	bffdfff8 	.word	0xbffdfff8
 8002f38:	cccccccd 	.word	0xcccccccd
 8002f3c:	40020000 	.word	0x40020000

08002f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_DMA_Start_IT+0x20>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e04b      	b.n	8002ff8 <HAL_DMA_Start_IT+0xb8>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d13a      	bne.n	8002fea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0201 	bic.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f9eb 	bl	8003374 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 020e 	orr.w	r2, r2, #14
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	e00f      	b.n	8002fd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0204 	bic.w	r2, r2, #4
 8002fc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 020a 	orr.w	r2, r2, #10
 8002fd6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e005      	b.n	8002ff6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d008      	beq.n	800302a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2204      	movs	r2, #4
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e020      	b.n	800306c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 020e 	bic.w	r2, r2, #14
 8003038:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f202 	lsl.w	r2, r1, r2
 8003058:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
	...

08003078 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d005      	beq.n	800309c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2204      	movs	r2, #4
 8003094:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
 800309a:	e051      	b.n	8003140 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 020e 	bic.w	r2, r2, #14
 80030aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a22      	ldr	r2, [pc, #136]	@ (800314c <HAL_DMA_Abort_IT+0xd4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d029      	beq.n	800311a <HAL_DMA_Abort_IT+0xa2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a21      	ldr	r2, [pc, #132]	@ (8003150 <HAL_DMA_Abort_IT+0xd8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <HAL_DMA_Abort_IT+0x9e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003154 <HAL_DMA_Abort_IT+0xdc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01a      	beq.n	8003110 <HAL_DMA_Abort_IT+0x98>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1e      	ldr	r2, [pc, #120]	@ (8003158 <HAL_DMA_Abort_IT+0xe0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d012      	beq.n	800310a <HAL_DMA_Abort_IT+0x92>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <HAL_DMA_Abort_IT+0xe4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00a      	beq.n	8003104 <HAL_DMA_Abort_IT+0x8c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003160 <HAL_DMA_Abort_IT+0xe8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d102      	bne.n	80030fe <HAL_DMA_Abort_IT+0x86>
 80030f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030fc:	e00e      	b.n	800311c <HAL_DMA_Abort_IT+0xa4>
 80030fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003102:	e00b      	b.n	800311c <HAL_DMA_Abort_IT+0xa4>
 8003104:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003108:	e008      	b.n	800311c <HAL_DMA_Abort_IT+0xa4>
 800310a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800310e:	e005      	b.n	800311c <HAL_DMA_Abort_IT+0xa4>
 8003110:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003114:	e002      	b.n	800311c <HAL_DMA_Abort_IT+0xa4>
 8003116:	2310      	movs	r3, #16
 8003118:	e000      	b.n	800311c <HAL_DMA_Abort_IT+0xa4>
 800311a:	2301      	movs	r3, #1
 800311c:	4a11      	ldr	r2, [pc, #68]	@ (8003164 <HAL_DMA_Abort_IT+0xec>)
 800311e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4798      	blx	r3
    } 
  }
  return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40020008 	.word	0x40020008
 8003150:	4002001c 	.word	0x4002001c
 8003154:	40020030 	.word	0x40020030
 8003158:	40020044 	.word	0x40020044
 800315c:	40020058 	.word	0x40020058
 8003160:	4002006c 	.word	0x4002006c
 8003164:	40020000 	.word	0x40020000

08003168 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	2204      	movs	r2, #4
 8003186:	409a      	lsls	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04f      	beq.n	8003230 <HAL_DMA_IRQHandler+0xc8>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d04a      	beq.n	8003230 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0204 	bic.w	r2, r2, #4
 80031b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a66      	ldr	r2, [pc, #408]	@ (8003358 <HAL_DMA_IRQHandler+0x1f0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d029      	beq.n	8003216 <HAL_DMA_IRQHandler+0xae>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a65      	ldr	r2, [pc, #404]	@ (800335c <HAL_DMA_IRQHandler+0x1f4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_IRQHandler+0xaa>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a63      	ldr	r2, [pc, #396]	@ (8003360 <HAL_DMA_IRQHandler+0x1f8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01a      	beq.n	800320c <HAL_DMA_IRQHandler+0xa4>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a62      	ldr	r2, [pc, #392]	@ (8003364 <HAL_DMA_IRQHandler+0x1fc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d012      	beq.n	8003206 <HAL_DMA_IRQHandler+0x9e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a60      	ldr	r2, [pc, #384]	@ (8003368 <HAL_DMA_IRQHandler+0x200>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00a      	beq.n	8003200 <HAL_DMA_IRQHandler+0x98>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a5f      	ldr	r2, [pc, #380]	@ (800336c <HAL_DMA_IRQHandler+0x204>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d102      	bne.n	80031fa <HAL_DMA_IRQHandler+0x92>
 80031f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031f8:	e00e      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 80031fa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80031fe:	e00b      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 8003200:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003204:	e008      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 8003206:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800320a:	e005      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 800320c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003210:	e002      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 8003212:	2340      	movs	r3, #64	@ 0x40
 8003214:	e000      	b.n	8003218 <HAL_DMA_IRQHandler+0xb0>
 8003216:	2304      	movs	r3, #4
 8003218:	4a55      	ldr	r2, [pc, #340]	@ (8003370 <HAL_DMA_IRQHandler+0x208>)
 800321a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8094 	beq.w	800334e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800322e:	e08e      	b.n	800334e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	2202      	movs	r2, #2
 8003236:	409a      	lsls	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d056      	beq.n	80032ee <HAL_DMA_IRQHandler+0x186>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d051      	beq.n	80032ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 020a 	bic.w	r2, r2, #10
 8003266:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a38      	ldr	r2, [pc, #224]	@ (8003358 <HAL_DMA_IRQHandler+0x1f0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d029      	beq.n	80032ce <HAL_DMA_IRQHandler+0x166>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a37      	ldr	r2, [pc, #220]	@ (800335c <HAL_DMA_IRQHandler+0x1f4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_DMA_IRQHandler+0x162>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a35      	ldr	r2, [pc, #212]	@ (8003360 <HAL_DMA_IRQHandler+0x1f8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01a      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x15c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a34      	ldr	r2, [pc, #208]	@ (8003364 <HAL_DMA_IRQHandler+0x1fc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d012      	beq.n	80032be <HAL_DMA_IRQHandler+0x156>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a32      	ldr	r2, [pc, #200]	@ (8003368 <HAL_DMA_IRQHandler+0x200>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00a      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x150>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a31      	ldr	r2, [pc, #196]	@ (800336c <HAL_DMA_IRQHandler+0x204>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d102      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x14a>
 80032ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80032b0:	e00e      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032b6:	e00b      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032bc:	e008      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032c2:	e005      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032c8:	e002      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032ca:	2320      	movs	r3, #32
 80032cc:	e000      	b.n	80032d0 <HAL_DMA_IRQHandler+0x168>
 80032ce:	2302      	movs	r3, #2
 80032d0:	4a27      	ldr	r2, [pc, #156]	@ (8003370 <HAL_DMA_IRQHandler+0x208>)
 80032d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d034      	beq.n	800334e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032ec:	e02f      	b.n	800334e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	2208      	movs	r2, #8
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d028      	beq.n	8003350 <HAL_DMA_IRQHandler+0x1e8>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d023      	beq.n	8003350 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 020e 	bic.w	r2, r2, #14
 8003316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
    }
  }
  return;
 800334e:	bf00      	nop
 8003350:	bf00      	nop
}
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40020008 	.word	0x40020008
 800335c:	4002001c 	.word	0x4002001c
 8003360:	40020030 	.word	0x40020030
 8003364:	40020044 	.word	0x40020044
 8003368:	40020058 	.word	0x40020058
 800336c:	4002006c 	.word	0x4002006c
 8003370:	40020000 	.word	0x40020000

08003374 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f202 	lsl.w	r2, r1, r2
 8003390:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d108      	bne.n	80033b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033b2:	e007      	b.n	80033c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b08b      	sub	sp, #44	@ 0x2c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e2:	e169      	b.n	80036b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033e4:	2201      	movs	r2, #1
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	f040 8158 	bne.w	80036b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a9a      	ldr	r2, [pc, #616]	@ (8003670 <HAL_GPIO_Init+0x2a0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d05e      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 800340c:	4a98      	ldr	r2, [pc, #608]	@ (8003670 <HAL_GPIO_Init+0x2a0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d875      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 8003412:	4a98      	ldr	r2, [pc, #608]	@ (8003674 <HAL_GPIO_Init+0x2a4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d058      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 8003418:	4a96      	ldr	r2, [pc, #600]	@ (8003674 <HAL_GPIO_Init+0x2a4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d86f      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 800341e:	4a96      	ldr	r2, [pc, #600]	@ (8003678 <HAL_GPIO_Init+0x2a8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d052      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 8003424:	4a94      	ldr	r2, [pc, #592]	@ (8003678 <HAL_GPIO_Init+0x2a8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d869      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 800342a:	4a94      	ldr	r2, [pc, #592]	@ (800367c <HAL_GPIO_Init+0x2ac>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d04c      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 8003430:	4a92      	ldr	r2, [pc, #584]	@ (800367c <HAL_GPIO_Init+0x2ac>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d863      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 8003436:	4a92      	ldr	r2, [pc, #584]	@ (8003680 <HAL_GPIO_Init+0x2b0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d046      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
 800343c:	4a90      	ldr	r2, [pc, #576]	@ (8003680 <HAL_GPIO_Init+0x2b0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d85d      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 8003442:	2b12      	cmp	r3, #18
 8003444:	d82a      	bhi.n	800349c <HAL_GPIO_Init+0xcc>
 8003446:	2b12      	cmp	r3, #18
 8003448:	d859      	bhi.n	80034fe <HAL_GPIO_Init+0x12e>
 800344a:	a201      	add	r2, pc, #4	@ (adr r2, 8003450 <HAL_GPIO_Init+0x80>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	080034cb 	.word	0x080034cb
 8003454:	080034a5 	.word	0x080034a5
 8003458:	080034b7 	.word	0x080034b7
 800345c:	080034f9 	.word	0x080034f9
 8003460:	080034ff 	.word	0x080034ff
 8003464:	080034ff 	.word	0x080034ff
 8003468:	080034ff 	.word	0x080034ff
 800346c:	080034ff 	.word	0x080034ff
 8003470:	080034ff 	.word	0x080034ff
 8003474:	080034ff 	.word	0x080034ff
 8003478:	080034ff 	.word	0x080034ff
 800347c:	080034ff 	.word	0x080034ff
 8003480:	080034ff 	.word	0x080034ff
 8003484:	080034ff 	.word	0x080034ff
 8003488:	080034ff 	.word	0x080034ff
 800348c:	080034ff 	.word	0x080034ff
 8003490:	080034ff 	.word	0x080034ff
 8003494:	080034ad 	.word	0x080034ad
 8003498:	080034c1 	.word	0x080034c1
 800349c:	4a79      	ldr	r2, [pc, #484]	@ (8003684 <HAL_GPIO_Init+0x2b4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034a2:	e02c      	b.n	80034fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	623b      	str	r3, [r7, #32]
          break;
 80034aa:	e029      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	3304      	adds	r3, #4
 80034b2:	623b      	str	r3, [r7, #32]
          break;
 80034b4:	e024      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	3308      	adds	r3, #8
 80034bc:	623b      	str	r3, [r7, #32]
          break;
 80034be:	e01f      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	330c      	adds	r3, #12
 80034c6:	623b      	str	r3, [r7, #32]
          break;
 80034c8:	e01a      	b.n	8003500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034d2:	2304      	movs	r3, #4
 80034d4:	623b      	str	r3, [r7, #32]
          break;
 80034d6:	e013      	b.n	8003500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034e0:	2308      	movs	r3, #8
 80034e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	611a      	str	r2, [r3, #16]
          break;
 80034ea:	e009      	b.n	8003500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034ec:	2308      	movs	r3, #8
 80034ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	615a      	str	r2, [r3, #20]
          break;
 80034f6:	e003      	b.n	8003500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
          break;
 80034fc:	e000      	b.n	8003500 <HAL_GPIO_Init+0x130>
          break;
 80034fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2bff      	cmp	r3, #255	@ 0xff
 8003504:	d801      	bhi.n	800350a <HAL_GPIO_Init+0x13a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	e001      	b.n	800350e <HAL_GPIO_Init+0x13e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2bff      	cmp	r3, #255	@ 0xff
 8003514:	d802      	bhi.n	800351c <HAL_GPIO_Init+0x14c>
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	e002      	b.n	8003522 <HAL_GPIO_Init+0x152>
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	3b08      	subs	r3, #8
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	210f      	movs	r1, #15
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	401a      	ands	r2, r3
 8003534:	6a39      	ldr	r1, [r7, #32]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	431a      	orrs	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80b1 	beq.w	80036b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003550:	4b4d      	ldr	r3, [pc, #308]	@ (8003688 <HAL_GPIO_Init+0x2b8>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	4a4c      	ldr	r2, [pc, #304]	@ (8003688 <HAL_GPIO_Init+0x2b8>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6193      	str	r3, [r2, #24]
 800355c:	4b4a      	ldr	r3, [pc, #296]	@ (8003688 <HAL_GPIO_Init+0x2b8>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003568:	4a48      	ldr	r2, [pc, #288]	@ (800368c <HAL_GPIO_Init+0x2bc>)
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4013      	ands	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a40      	ldr	r2, [pc, #256]	@ (8003690 <HAL_GPIO_Init+0x2c0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_GPIO_Init+0x1ec>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3f      	ldr	r2, [pc, #252]	@ (8003694 <HAL_GPIO_Init+0x2c4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00d      	beq.n	80035b8 <HAL_GPIO_Init+0x1e8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3e      	ldr	r2, [pc, #248]	@ (8003698 <HAL_GPIO_Init+0x2c8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <HAL_GPIO_Init+0x1e4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3d      	ldr	r2, [pc, #244]	@ (800369c <HAL_GPIO_Init+0x2cc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_GPIO_Init+0x1e0>
 80035ac:	2303      	movs	r3, #3
 80035ae:	e006      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035b0:	2304      	movs	r3, #4
 80035b2:	e004      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e002      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_GPIO_Init+0x1ee>
 80035bc:	2300      	movs	r3, #0
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	f002 0203 	and.w	r2, r2, #3
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	4093      	lsls	r3, r2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035ce:	492f      	ldr	r1, [pc, #188]	@ (800368c <HAL_GPIO_Init+0x2bc>)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	3302      	adds	r3, #2
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035e8:	4b2d      	ldr	r3, [pc, #180]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	492c      	ldr	r1, [pc, #176]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	608b      	str	r3, [r1, #8]
 80035f4:	e006      	b.n	8003604 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035f6:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	4928      	ldr	r1, [pc, #160]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003600:	4013      	ands	r3, r2
 8003602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003610:	4b23      	ldr	r3, [pc, #140]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4922      	ldr	r1, [pc, #136]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800361e:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	43db      	mvns	r3, r3
 8003626:	491e      	ldr	r1, [pc, #120]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003628:	4013      	ands	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003638:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4918      	ldr	r1, [pc, #96]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
 8003644:	e006      	b.n	8003654 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003646:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	43db      	mvns	r3, r3
 800364e:	4914      	ldr	r1, [pc, #80]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003650:	4013      	ands	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	490e      	ldr	r1, [pc, #56]	@ (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	600b      	str	r3, [r1, #0]
 800366c:	e021      	b.n	80036b2 <HAL_GPIO_Init+0x2e2>
 800366e:	bf00      	nop
 8003670:	10320000 	.word	0x10320000
 8003674:	10310000 	.word	0x10310000
 8003678:	10220000 	.word	0x10220000
 800367c:	10210000 	.word	0x10210000
 8003680:	10120000 	.word	0x10120000
 8003684:	10110000 	.word	0x10110000
 8003688:	40021000 	.word	0x40021000
 800368c:	40010000 	.word	0x40010000
 8003690:	40010800 	.word	0x40010800
 8003694:	40010c00 	.word	0x40010c00
 8003698:	40011000 	.word	0x40011000
 800369c:	40011400 	.word	0x40011400
 80036a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_GPIO_Init+0x304>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	4909      	ldr	r1, [pc, #36]	@ (80036d4 <HAL_GPIO_Init+0x304>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	3301      	adds	r3, #1
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	fa22 f303 	lsr.w	r3, r2, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f47f ae8e 	bne.w	80033e4 <HAL_GPIO_Init+0x14>
  }
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	372c      	adds	r7, #44	@ 0x2c
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	40010400 	.word	0x40010400

080036d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
 80036e4:	4613      	mov	r3, r2
 80036e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036e8:	787b      	ldrb	r3, [r7, #1]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ee:	887a      	ldrh	r2, [r7, #2]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036f4:	e003      	b.n	80036fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	041a      	lsls	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4013      	ands	r3, r2
 8003720:	041a      	lsls	r2, r3, #16
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	43d9      	mvns	r1, r3
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	400b      	ands	r3, r1
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	611a      	str	r2, [r3, #16]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
	...

0800373c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e272      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8087 	beq.w	800386a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800375c:	4b92      	ldr	r3, [pc, #584]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b04      	cmp	r3, #4
 8003766:	d00c      	beq.n	8003782 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003768:	4b8f      	ldr	r3, [pc, #572]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b08      	cmp	r3, #8
 8003772:	d112      	bne.n	800379a <HAL_RCC_OscConfig+0x5e>
 8003774:	4b8c      	ldr	r3, [pc, #560]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003780:	d10b      	bne.n	800379a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003782:	4b89      	ldr	r3, [pc, #548]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d06c      	beq.n	8003868 <HAL_RCC_OscConfig+0x12c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d168      	bne.n	8003868 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e24c      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a2:	d106      	bne.n	80037b2 <HAL_RCC_OscConfig+0x76>
 80037a4:	4b80      	ldr	r3, [pc, #512]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a7f      	ldr	r2, [pc, #508]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	e02e      	b.n	8003810 <HAL_RCC_OscConfig+0xd4>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x98>
 80037ba:	4b7b      	ldr	r3, [pc, #492]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7a      	ldr	r2, [pc, #488]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b78      	ldr	r3, [pc, #480]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a77      	ldr	r2, [pc, #476]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e01d      	b.n	8003810 <HAL_RCC_OscConfig+0xd4>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0xbc>
 80037de:	4b72      	ldr	r3, [pc, #456]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a71      	ldr	r2, [pc, #452]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b6f      	ldr	r3, [pc, #444]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6e      	ldr	r2, [pc, #440]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0xd4>
 80037f8:	4b6b      	ldr	r3, [pc, #428]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a6a      	ldr	r2, [pc, #424]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b68      	ldr	r3, [pc, #416]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a67      	ldr	r2, [pc, #412]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800380a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800380e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d013      	beq.n	8003840 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7ff f9e2 	bl	8002be0 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003820:	f7ff f9de 	bl	8002be0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	@ 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e200      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b5d      	ldr	r3, [pc, #372]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0xe4>
 800383e:	e014      	b.n	800386a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7ff f9ce 	bl	8002be0 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003848:	f7ff f9ca 	bl	8002be0 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	@ 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1ec      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	4b53      	ldr	r3, [pc, #332]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x10c>
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d063      	beq.n	800393e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003876:	4b4c      	ldr	r3, [pc, #304]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003882:	4b49      	ldr	r3, [pc, #292]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b08      	cmp	r3, #8
 800388c:	d11c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x18c>
 800388e:	4b46      	ldr	r3, [pc, #280]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x176>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1c0      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b3d      	ldr	r3, [pc, #244]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4939      	ldr	r1, [pc, #228]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	e03a      	b.n	800393e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4b36      	ldr	r3, [pc, #216]	@ (80039ac <HAL_RCC_OscConfig+0x270>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7ff f983 	bl	8002be0 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038de:	f7ff f97f 	bl	8002be0 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1a1      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	4b2d      	ldr	r3, [pc, #180]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4927      	ldr	r1, [pc, #156]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	e015      	b.n	800393e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003912:	4b26      	ldr	r3, [pc, #152]	@ (80039ac <HAL_RCC_OscConfig+0x270>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7ff f962 	bl	8002be0 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003920:	f7ff f95e 	bl	8002be0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e180      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d03a      	beq.n	80039c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d019      	beq.n	8003986 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003952:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <HAL_RCC_OscConfig+0x274>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003958:	f7ff f942 	bl	8002be0 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003960:	f7ff f93e 	bl	8002be0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e160      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800397e:	2001      	movs	r0, #1
 8003980:	f000 face 	bl	8003f20 <RCC_Delay>
 8003984:	e01c      	b.n	80039c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003986:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <HAL_RCC_OscConfig+0x274>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398c:	f7ff f928 	bl	8002be0 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003992:	e00f      	b.n	80039b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003994:	f7ff f924 	bl	8002be0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d908      	bls.n	80039b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e146      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	42420000 	.word	0x42420000
 80039b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	4b92      	ldr	r3, [pc, #584]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e9      	bne.n	8003994 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80a6 	beq.w	8003b1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10d      	bne.n	80039fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	4b88      	ldr	r3, [pc, #544]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	4a87      	ldr	r2, [pc, #540]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	61d3      	str	r3, [r2, #28]
 80039ea:	4b85      	ldr	r3, [pc, #532]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b82      	ldr	r3, [pc, #520]	@ (8003c04 <HAL_RCC_OscConfig+0x4c8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a06:	4b7f      	ldr	r3, [pc, #508]	@ (8003c04 <HAL_RCC_OscConfig+0x4c8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c04 <HAL_RCC_OscConfig+0x4c8>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7ff f8e5 	bl	8002be0 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7ff f8e1 	bl	8002be0 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b64      	cmp	r3, #100	@ 0x64
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e103      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b75      	ldr	r3, [pc, #468]	@ (8003c04 <HAL_RCC_OscConfig+0x4c8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x312>
 8003a40:	4b6f      	ldr	r3, [pc, #444]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a6e      	ldr	r2, [pc, #440]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	e02d      	b.n	8003aaa <HAL_RCC_OscConfig+0x36e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x334>
 8003a56:	4b6a      	ldr	r3, [pc, #424]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a69      	ldr	r2, [pc, #420]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6213      	str	r3, [r2, #32]
 8003a62:	4b67      	ldr	r3, [pc, #412]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4a66      	ldr	r2, [pc, #408]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	6213      	str	r3, [r2, #32]
 8003a6e:	e01c      	b.n	8003aaa <HAL_RCC_OscConfig+0x36e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x356>
 8003a78:	4b61      	ldr	r3, [pc, #388]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4a60      	ldr	r2, [pc, #384]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	6213      	str	r3, [r2, #32]
 8003a84:	4b5e      	ldr	r3, [pc, #376]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4a5d      	ldr	r2, [pc, #372]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6213      	str	r3, [r2, #32]
 8003a90:	e00b      	b.n	8003aaa <HAL_RCC_OscConfig+0x36e>
 8003a92:	4b5b      	ldr	r3, [pc, #364]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	4a5a      	ldr	r2, [pc, #360]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6213      	str	r3, [r2, #32]
 8003a9e:	4b58      	ldr	r3, [pc, #352]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4a57      	ldr	r2, [pc, #348]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d015      	beq.n	8003ade <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab2:	f7ff f895 	bl	8002be0 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7ff f891 	bl	8002be0 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e0b1      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ee      	beq.n	8003aba <HAL_RCC_OscConfig+0x37e>
 8003adc:	e014      	b.n	8003b08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7ff f87f 	bl	8002be0 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7ff f87b 	bl	8002be0 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e09b      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	4b40      	ldr	r3, [pc, #256]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ee      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4a3b      	ldr	r2, [pc, #236]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8087 	beq.w	8003c32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b24:	4b36      	ldr	r3, [pc, #216]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d061      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d146      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b33      	ldr	r3, [pc, #204]	@ (8003c08 <HAL_RCC_OscConfig+0x4cc>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7ff f84f 	bl	8002be0 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b46:	f7ff f84b 	bl	8002be0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e06d      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	4b29      	ldr	r3, [pc, #164]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6c:	d108      	bne.n	8003b80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b6e:	4b24      	ldr	r3, [pc, #144]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4921      	ldr	r1, [pc, #132]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b80:	4b1f      	ldr	r3, [pc, #124]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a19      	ldr	r1, [r3, #32]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	430b      	orrs	r3, r1
 8003b92:	491b      	ldr	r1, [pc, #108]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b98:	4b1b      	ldr	r3, [pc, #108]	@ (8003c08 <HAL_RCC_OscConfig+0x4cc>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7ff f81f 	bl	8002be0 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba6:	f7ff f81b 	bl	8002be0 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e03d      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb8:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x46a>
 8003bc4:	e035      	b.n	8003c32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc6:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <HAL_RCC_OscConfig+0x4cc>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7ff f808 	bl	8002be0 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7ff f804 	bl	8002be0 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e026      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be6:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x498>
 8003bf2:	e01e      	b.n	8003c32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e019      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
 8003c08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_RCC_OscConfig+0x500>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000

08003c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0d0      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c54:	4b6a      	ldr	r3, [pc, #424]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d910      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b67      	ldr	r3, [pc, #412]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 0207 	bic.w	r2, r3, #7
 8003c6a:	4965      	ldr	r1, [pc, #404]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b63      	ldr	r3, [pc, #396]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0b8      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c9c:	4b59      	ldr	r3, [pc, #356]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a58      	ldr	r2, [pc, #352]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ca6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb4:	4b53      	ldr	r3, [pc, #332]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4a52      	ldr	r2, [pc, #328]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc0:	4b50      	ldr	r3, [pc, #320]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	494d      	ldr	r1, [pc, #308]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d040      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b47      	ldr	r3, [pc, #284]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d115      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e07f      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	4b41      	ldr	r3, [pc, #260]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e073      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e06b      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d1e:	4b39      	ldr	r3, [pc, #228]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f023 0203 	bic.w	r2, r3, #3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4936      	ldr	r1, [pc, #216]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d30:	f7fe ff56 	bl	8002be0 <HAL_GetTick>
 8003d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d38:	f7fe ff52 	bl	8002be0 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e053      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 020c 	and.w	r2, r3, #12
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d1eb      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d60:	4b27      	ldr	r3, [pc, #156]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d210      	bcs.n	8003d90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b24      	ldr	r3, [pc, #144]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 0207 	bic.w	r2, r3, #7
 8003d76:	4922      	ldr	r1, [pc, #136]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e032      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d9c:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4916      	ldr	r1, [pc, #88]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dba:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	490e      	ldr	r1, [pc, #56]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dce:	f000 f821 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	490a      	ldr	r1, [pc, #40]	@ (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003de0:	5ccb      	ldrb	r3, [r1, r3]
 8003de2:	fa22 f303 	lsr.w	r3, r2, r3
 8003de6:	4a09      	ldr	r2, [pc, #36]	@ (8003e0c <HAL_RCC_ClockConfig+0x1cc>)
 8003de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dea:	4b09      	ldr	r3, [pc, #36]	@ (8003e10 <HAL_RCC_ClockConfig+0x1d0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe feb4 	bl	8002b5c <HAL_InitTick>

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40021000 	.word	0x40021000
 8003e08:	0800941c 	.word	0x0800941c
 8003e0c:	200001c8 	.word	0x200001c8
 8003e10:	200001cc 	.word	0x200001cc

08003e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x30>
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d003      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0x36>
 8003e42:	e027      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e44:	4b19      	ldr	r3, [pc, #100]	@ (8003eac <HAL_RCC_GetSysClockFreq+0x98>)
 8003e46:	613b      	str	r3, [r7, #16]
      break;
 8003e48:	e027      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	0c9b      	lsrs	r3, r3, #18
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e54:	5cd3      	ldrb	r3, [r2, r3]
 8003e56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d010      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e62:	4b11      	ldr	r3, [pc, #68]	@ (8003ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	0c5b      	lsrs	r3, r3, #17
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	4a11      	ldr	r2, [pc, #68]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e6e:	5cd3      	ldrb	r3, [r2, r3]
 8003e70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a0d      	ldr	r2, [pc, #52]	@ (8003eac <HAL_RCC_GetSysClockFreq+0x98>)
 8003e76:	fb03 f202 	mul.w	r2, r3, r2
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e004      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a0c      	ldr	r2, [pc, #48]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	613b      	str	r3, [r7, #16]
      break;
 8003e92:	e002      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e94:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <HAL_RCC_GetSysClockFreq+0x98>)
 8003e96:	613b      	str	r3, [r7, #16]
      break;
 8003e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9a:	693b      	ldr	r3, [r7, #16]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	007a1200 	.word	0x007a1200
 8003eb0:	08009434 	.word	0x08009434
 8003eb4:	08009444 	.word	0x08009444
 8003eb8:	003d0900 	.word	0x003d0900

08003ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec0:	4b02      	ldr	r3, [pc, #8]	@ (8003ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	200001c8 	.word	0x200001c8

08003ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ed4:	f7ff fff2 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4903      	ldr	r1, [pc, #12]	@ (8003ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	0800942c 	.word	0x0800942c

08003ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003efc:	f7ff ffde 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	0adb      	lsrs	r3, r3, #11
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4903      	ldr	r1, [pc, #12]	@ (8003f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	0800942c 	.word	0x0800942c

08003f20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f28:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <RCC_Delay+0x34>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f58 <RCC_Delay+0x38>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	0a5b      	lsrs	r3, r3, #9
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f3c:	bf00      	nop
  }
  while (Delay --);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1e5a      	subs	r2, r3, #1
 8003f42:	60fa      	str	r2, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1f9      	bne.n	8003f3c <RCC_Delay+0x1c>
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	200001c8 	.word	0x200001c8
 8003f58:	10624dd3 	.word	0x10624dd3

08003f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d07d      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10d      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f88:	4b4c      	ldr	r3, [pc, #304]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	61d3      	str	r3, [r2, #28]
 8003f94:	4b49      	ldr	r3, [pc, #292]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b46      	ldr	r3, [pc, #280]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d118      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb0:	4b43      	ldr	r3, [pc, #268]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a42      	ldr	r2, [pc, #264]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbc:	f7fe fe10 	bl	8002be0 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc4:	f7fe fe0c 	bl	8002be0 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	@ 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e06d      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fe2:	4b36      	ldr	r3, [pc, #216]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d02e      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d027      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004000:	4b2e      	ldr	r3, [pc, #184]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004008:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800400a:	4b2e      	ldr	r3, [pc, #184]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004010:	4b2c      	ldr	r3, [pc, #176]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004016:	4a29      	ldr	r2, [pc, #164]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d014      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004026:	f7fe fddb 	bl	8002be0 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402c:	e00a      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fe fdd7 	bl	8002be0 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e036      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	4b1d      	ldr	r3, [pc, #116]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0ee      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004050:	4b1a      	ldr	r3, [pc, #104]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4917      	ldr	r1, [pc, #92]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405e:	4313      	orrs	r3, r2
 8004060:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004062:	7dfb      	ldrb	r3, [r7, #23]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d105      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004068:	4b14      	ldr	r3, [pc, #80]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	4a13      	ldr	r2, [pc, #76]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004072:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004080:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	490b      	ldr	r1, [pc, #44]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409e:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	4904      	ldr	r1, [pc, #16]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40007000 	.word	0x40007000
 80040c4:	42420440 	.word	0x42420440

080040c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e041      	b.n	800415e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fe fa9c 	bl	800262c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f000 f8f4 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_TIM_ConfigClockSource+0x1c>
 800417e:	2302      	movs	r3, #2
 8004180:	e0b4      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x186>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041a8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ba:	d03e      	beq.n	800423a <HAL_TIM_ConfigClockSource+0xd4>
 80041bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041c0:	f200 8087 	bhi.w	80042d2 <HAL_TIM_ConfigClockSource+0x16c>
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c8:	f000 8086 	beq.w	80042d8 <HAL_TIM_ConfigClockSource+0x172>
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d0:	d87f      	bhi.n	80042d2 <HAL_TIM_ConfigClockSource+0x16c>
 80041d2:	2b70      	cmp	r3, #112	@ 0x70
 80041d4:	d01a      	beq.n	800420c <HAL_TIM_ConfigClockSource+0xa6>
 80041d6:	2b70      	cmp	r3, #112	@ 0x70
 80041d8:	d87b      	bhi.n	80042d2 <HAL_TIM_ConfigClockSource+0x16c>
 80041da:	2b60      	cmp	r3, #96	@ 0x60
 80041dc:	d050      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0x11a>
 80041de:	2b60      	cmp	r3, #96	@ 0x60
 80041e0:	d877      	bhi.n	80042d2 <HAL_TIM_ConfigClockSource+0x16c>
 80041e2:	2b50      	cmp	r3, #80	@ 0x50
 80041e4:	d03c      	beq.n	8004260 <HAL_TIM_ConfigClockSource+0xfa>
 80041e6:	2b50      	cmp	r3, #80	@ 0x50
 80041e8:	d873      	bhi.n	80042d2 <HAL_TIM_ConfigClockSource+0x16c>
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d058      	beq.n	80042a0 <HAL_TIM_ConfigClockSource+0x13a>
 80041ee:	2b40      	cmp	r3, #64	@ 0x40
 80041f0:	d86f      	bhi.n	80042d2 <HAL_TIM_ConfigClockSource+0x16c>
 80041f2:	2b30      	cmp	r3, #48	@ 0x30
 80041f4:	d064      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0x15a>
 80041f6:	2b30      	cmp	r3, #48	@ 0x30
 80041f8:	d86b      	bhi.n	80042d2 <HAL_TIM_ConfigClockSource+0x16c>
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d060      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0x15a>
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d867      	bhi.n	80042d2 <HAL_TIM_ConfigClockSource+0x16c>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d05c      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0x15a>
 8004206:	2b10      	cmp	r3, #16
 8004208:	d05a      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0x15a>
 800420a:	e062      	b.n	80042d2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800421c:	f000 f94f 	bl	80044be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800422e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	609a      	str	r2, [r3, #8]
      break;
 8004238:	e04f      	b.n	80042da <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800424a:	f000 f938 	bl	80044be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800425c:	609a      	str	r2, [r3, #8]
      break;
 800425e:	e03c      	b.n	80042da <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800426c:	461a      	mov	r2, r3
 800426e:	f000 f8af 	bl	80043d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2150      	movs	r1, #80	@ 0x50
 8004278:	4618      	mov	r0, r3
 800427a:	f000 f906 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 800427e:	e02c      	b.n	80042da <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800428c:	461a      	mov	r2, r3
 800428e:	f000 f8cd 	bl	800442c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2160      	movs	r1, #96	@ 0x60
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f8f6 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 800429e:	e01c      	b.n	80042da <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ac:	461a      	mov	r2, r3
 80042ae:	f000 f88f 	bl	80043d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2140      	movs	r1, #64	@ 0x40
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f8e6 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 80042be:	e00c      	b.n	80042da <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4619      	mov	r1, r3
 80042ca:	4610      	mov	r0, r2
 80042cc:	f000 f8dd 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 80042d0:	e003      	b.n	80042da <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
      break;
 80042d6:	e000      	b.n	80042da <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a2f      	ldr	r2, [pc, #188]	@ (80043c4 <TIM_Base_SetConfig+0xd0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00b      	beq.n	8004324 <TIM_Base_SetConfig+0x30>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004312:	d007      	beq.n	8004324 <TIM_Base_SetConfig+0x30>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a2c      	ldr	r2, [pc, #176]	@ (80043c8 <TIM_Base_SetConfig+0xd4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_Base_SetConfig+0x30>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a2b      	ldr	r2, [pc, #172]	@ (80043cc <TIM_Base_SetConfig+0xd8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d108      	bne.n	8004336 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a22      	ldr	r2, [pc, #136]	@ (80043c4 <TIM_Base_SetConfig+0xd0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <TIM_Base_SetConfig+0x62>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004344:	d007      	beq.n	8004356 <TIM_Base_SetConfig+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1f      	ldr	r2, [pc, #124]	@ (80043c8 <TIM_Base_SetConfig+0xd4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_Base_SetConfig+0x62>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1e      	ldr	r2, [pc, #120]	@ (80043cc <TIM_Base_SetConfig+0xd8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800435c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a0d      	ldr	r2, [pc, #52]	@ (80043c4 <TIM_Base_SetConfig+0xd0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d103      	bne.n	800439c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f023 0201 	bic.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]
  }
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40000800 	.word	0x40000800

080043d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f023 0201 	bic.w	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 030a 	bic.w	r3, r3, #10
 800440c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0210 	bic.w	r2, r3, #16
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	031b      	lsls	r3, r3, #12
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004468:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	621a      	str	r2, [r3, #32]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f043 0307 	orr.w	r3, r3, #7
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr

080044be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044be:	b480      	push	{r7}
 80044c0:	b087      	sub	sp, #28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	021a      	lsls	r2, r3, #8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	609a      	str	r2, [r3, #8]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004510:	2302      	movs	r3, #2
 8004512:	e046      	b.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a16      	ldr	r2, [pc, #88]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004560:	d009      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a12      	ldr	r2, [pc, #72]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a10      	ldr	r2, [pc, #64]	@ (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d10c      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800457c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4313      	orrs	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800

080045b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e042      	b.n	8004650 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fe f840 	bl	8002664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2224      	movs	r2, #36	@ 0x24
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f001 f91f 	bl	8005840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	@ 0x28
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b20      	cmp	r3, #32
 8004676:	d175      	bne.n	8004764 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_UART_Transmit+0x2c>
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e06e      	b.n	8004766 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2221      	movs	r2, #33	@ 0x21
 8004692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004696:	f7fe faa3 	bl	8002be0 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b0:	d108      	bne.n	80046c4 <HAL_UART_Transmit+0x6c>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	e003      	b.n	80046cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046cc:	e02e      	b.n	800472c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2180      	movs	r1, #128	@ 0x80
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fdfb 	bl	80052d4 <UART_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e03a      	b.n	8004766 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004704:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	3302      	adds	r3, #2
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e007      	b.n	800471e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3301      	adds	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1cb      	bne.n	80046ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2140      	movs	r1, #64	@ 0x40
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fdc7 	bl	80052d4 <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e006      	b.n	8004766 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	e000      	b.n	8004766 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b08a      	sub	sp, #40	@ 0x28
 8004772:	af02      	add	r7, sp, #8
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b20      	cmp	r3, #32
 800478c:	f040 8081 	bne.w	8004892 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_UART_Receive+0x2e>
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e079      	b.n	8004894 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2222      	movs	r2, #34	@ 0x22
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047b4:	f7fe fa14 	bl	8002be0 <HAL_GetTick>
 80047b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ce:	d108      	bne.n	80047e2 <HAL_UART_Receive+0x74>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e003      	b.n	80047ea <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047ea:	e047      	b.n	800487c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2200      	movs	r2, #0
 80047f4:	2120      	movs	r1, #32
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fd6c 	bl	80052d4 <UART_WaitOnFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e042      	b.n	8004894 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10c      	bne.n	800482e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b29b      	uxth	r3, r3
 800481c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004820:	b29a      	uxth	r2, r3
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	3302      	adds	r3, #2
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	e01f      	b.n	800486e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004836:	d007      	beq.n	8004848 <HAL_UART_Receive+0xda>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <HAL_UART_Receive+0xe8>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b2da      	uxtb	r2, r3
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	e008      	b.n	8004868 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004862:	b2da      	uxtb	r2, r3
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	3301      	adds	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1b2      	bne.n	80047ec <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3720      	adds	r7, #32
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08c      	sub	sp, #48	@ 0x30
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d156      	bne.n	8004964 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_UART_Transmit_DMA+0x26>
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e04f      	b.n	8004966 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2221      	movs	r2, #33	@ 0x21
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	4a21      	ldr	r2, [pc, #132]	@ (8004970 <HAL_UART_Transmit_DMA+0xd4>)
 80048ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f2:	4a20      	ldr	r2, [pc, #128]	@ (8004974 <HAL_UART_Transmit_DMA+0xd8>)
 80048f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004978 <HAL_UART_Transmit_DMA+0xdc>)
 80048fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004902:	2200      	movs	r2, #0
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004906:	f107 0308 	add.w	r3, r7, #8
 800490a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004912:	6819      	ldr	r1, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3304      	adds	r3, #4
 800491a:	461a      	mov	r2, r3
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	f7fe fb0f 	bl	8002f40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800492a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3314      	adds	r3, #20
 8004932:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	617b      	str	r3, [r7, #20]
   return(result);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3314      	adds	r3, #20
 800494a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800494c:	627a      	str	r2, [r7, #36]	@ 0x24
 800494e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6a39      	ldr	r1, [r7, #32]
 8004952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	61fb      	str	r3, [r7, #28]
   return(result);
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e000      	b.n	8004966 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3730      	adds	r7, #48	@ 0x30
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	08005023 	.word	0x08005023
 8004974:	080050bd 	.word	0x080050bd
 8004978:	08005241 	.word	0x08005241

0800497c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b20      	cmp	r3, #32
 8004994:	d112      	bne.n	80049bc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_Receive_DMA+0x26>
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e00b      	b.n	80049be <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fce8 	bl	8005388 <UART_Start_Receive_DMA>
 80049b8:	4603      	mov	r3, r0
 80049ba:	e000      	b.n	80049be <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b090      	sub	sp, #64	@ 0x40
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b21      	cmp	r3, #33	@ 0x21
 80049f2:	d128      	bne.n	8004a46 <HAL_UART_DMAStop+0x80>
 80049f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d025      	beq.n	8004a46 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3314      	adds	r3, #20
 8004a18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e5      	bne.n	80049fa <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fae0 	bl	8003000 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fd3b 	bl	80054bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b22      	cmp	r3, #34	@ 0x22
 8004a66:	d128      	bne.n	8004aba <HAL_UART_DMAStop+0xf4>
 8004a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d025      	beq.n	8004aba <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3314      	adds	r3, #20
 8004a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3314      	adds	r3, #20
 8004a8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a8e:	61fa      	str	r2, [r7, #28]
 8004a90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	69b9      	ldr	r1, [r7, #24]
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e5      	bne.n	8004a6e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d004      	beq.n	8004ab4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe faa6 	bl	8003000 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fd28 	bl	800550a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3740      	adds	r7, #64	@ 0x40
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10f      	bne.n	8004b2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_UART_IRQHandler+0x66>
 8004b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fdce 	bl	80056c4 <UART_Receive_IT>
      return;
 8004b28:	e25b      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80de 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x22c>
 8004b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80d1 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <HAL_UART_IRQHandler+0xae>
 8004b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f043 0201 	orr.w	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <HAL_UART_IRQHandler+0xd2>
 8004b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	f043 0202 	orr.w	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <HAL_UART_IRQHandler+0xf6>
 8004ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb2:	f043 0204 	orr.w	r2, r3, #4
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d011      	beq.n	8004bea <HAL_UART_IRQHandler+0x126>
 8004bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f043 0208 	orr.w	r2, r3, #8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 81f2 	beq.w	8004fd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_UART_IRQHandler+0x14e>
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fd59 	bl	80056c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d103      	bne.n	8004c3e <HAL_UART_IRQHandler+0x17a>
 8004c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d04f      	beq.n	8004cde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fc63 	bl	800550a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d041      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1d9      	bne.n	8004c52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d013      	beq.n	8004cce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004caa:	4a7e      	ldr	r2, [pc, #504]	@ (8004ea4 <HAL_UART_IRQHandler+0x3e0>)
 8004cac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe f9e0 	bl	8003078 <HAL_DMA_Abort_IT>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	e00e      	b.n	8004cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd fc30 	bl	8002534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	e00a      	b.n	8004cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fd fc2c 	bl	8002534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	e006      	b.n	8004cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fd fc28 	bl	8002534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cea:	e175      	b.n	8004fd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	bf00      	nop
    return;
 8004cee:	e173      	b.n	8004fd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	f040 814f 	bne.w	8004f98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8148 	beq.w	8004f98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8141 	beq.w	8004f98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80b6 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8145 	beq.w	8004fdc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	f080 813e 	bcs.w	8004fdc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	f000 8088 	beq.w	8004e84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004da0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004da4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1d9      	bne.n	8004d74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3314      	adds	r3, #20
 8004dc6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004de4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e1      	bne.n	8004dc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3314      	adds	r3, #20
 8004e1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e3      	bne.n	8004dfc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e54:	f023 0310 	bic.w	r3, r3, #16
 8004e58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e68:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e3      	bne.n	8004e42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe f8be 	bl	8003000 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f8b6 	bl	800500c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ea0:	e09c      	b.n	8004fdc <HAL_UART_IRQHandler+0x518>
 8004ea2:	bf00      	nop
 8004ea4:	080055cf 	.word	0x080055cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 808e 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8089 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ef2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ef4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ef8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e3      	bne.n	8004ece <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	623b      	str	r3, [r7, #32]
   return(result);
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e3      	bne.n	8004f06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0310 	bic.w	r3, r3, #16
 8004f62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f70:	61fa      	str	r2, [r7, #28]
 8004f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	69b9      	ldr	r1, [r7, #24]
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e3      	bne.n	8004f4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f83b 	bl	800500c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f96:	e023      	b.n	8004fe0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d009      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x4f4>
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb20 	bl	80055f6 <UART_Transmit_IT>
    return;
 8004fb6:	e014      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
 8004fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb5f 	bl	8005694 <UART_EndTransmit_IT>
    return;
 8004fd6:	e004      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004fd8:	bf00      	nop
 8004fda:	e002      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fdc:	bf00      	nop
 8004fde:	e000      	b.n	8004fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fe0:	bf00      	nop
  }
}
 8004fe2:	37e8      	adds	r7, #232	@ 0xe8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b090      	sub	sp, #64	@ 0x40
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d137      	bne.n	80050ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800503e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005040:	2200      	movs	r2, #0
 8005042:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3314      	adds	r3, #20
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	623b      	str	r3, [r7, #32]
   return(result);
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800505a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800505c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3314      	adds	r3, #20
 8005062:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005064:	633a      	str	r2, [r7, #48]	@ 0x30
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800506a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e5      	bne.n	8005044 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	60fb      	str	r3, [r7, #12]
   return(result);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800508e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005098:	61fa      	str	r2, [r7, #28]
 800509a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	69b9      	ldr	r1, [r7, #24]
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	617b      	str	r3, [r7, #20]
   return(result);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e5      	bne.n	8005078 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050ac:	e002      	b.n	80050b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80050ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80050b0:	f7fd f952 	bl	8002358 <HAL_UART_TxCpltCallback>
}
 80050b4:	bf00      	nop
 80050b6:	3740      	adds	r7, #64	@ 0x40
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ff8c 	bl	8004fe8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b09c      	sub	sp, #112	@ 0x70
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d172      	bne.n	80051da <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80050f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050f6:	2200      	movs	r2, #0
 80050f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800510a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800510c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800511a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800511c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005120:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800513e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	667b      	str	r3, [r7, #100]	@ 0x64
 8005146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3314      	adds	r3, #20
 800514c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800514e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005150:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005154:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800515c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e5      	bne.n	800512e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	623b      	str	r3, [r7, #32]
   return(result);
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005178:	663b      	str	r3, [r7, #96]	@ 0x60
 800517a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005182:	633a      	str	r2, [r7, #48]	@ 0x30
 8005184:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005198:	2220      	movs	r2, #32
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d119      	bne.n	80051da <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f023 0310 	bic.w	r3, r3, #16
 80051bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80051c6:	61fa      	str	r2, [r7, #28]
 80051c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	69b9      	ldr	r1, [r7, #24]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	617b      	str	r3, [r7, #20]
   return(result);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e5      	bne.n	80051a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051dc:	2200      	movs	r2, #0
 80051de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d106      	bne.n	80051f6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ec:	4619      	mov	r1, r3
 80051ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051f0:	f7ff ff0c 	bl	800500c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051f4:	e002      	b.n	80051fc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80051f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051f8:	f7fd f8f8 	bl	80023ec <HAL_UART_RxCpltCallback>
}
 80051fc:	bf00      	nop
 80051fe:	3770      	adds	r7, #112	@ 0x70
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521c:	2b01      	cmp	r3, #1
 800521e:	d108      	bne.n	8005232 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	b29b      	uxth	r3, r3
 8005228:	4619      	mov	r1, r3
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff feee 	bl	800500c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005230:	e002      	b.n	8005238 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fee1 	bl	8004ffa <HAL_UART_RxHalfCpltCallback>
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf14      	ite	ne
 8005260:	2301      	movne	r3, #1
 8005262:	2300      	moveq	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b21      	cmp	r3, #33	@ 0x21
 8005272:	d108      	bne.n	8005286 <UART_DMAError+0x46>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005280:	68b8      	ldr	r0, [r7, #8]
 8005282:	f000 f91b 	bl	80054bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	bf14      	ite	ne
 8005294:	2301      	movne	r3, #1
 8005296:	2300      	moveq	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b22      	cmp	r3, #34	@ 0x22
 80052a6:	d108      	bne.n	80052ba <UART_DMAError+0x7a>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2200      	movs	r2, #0
 80052b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80052b4:	68b8      	ldr	r0, [r7, #8]
 80052b6:	f000 f928 	bl	800550a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052be:	f043 0210 	orr.w	r2, r3, #16
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052c6:	68b8      	ldr	r0, [r7, #8]
 80052c8:	f7fd f934 	bl	8002534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e4:	e03b      	b.n	800535e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d037      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ee:	f7fd fc77 	bl	8002be0 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	6a3a      	ldr	r2, [r7, #32]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d302      	bcc.n	8005304 <UART_WaitOnFlagUntilTimeout+0x30>
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e03a      	b.n	800537e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d023      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b80      	cmp	r3, #128	@ 0x80
 800531a:	d020      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0x8a>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b40      	cmp	r3, #64	@ 0x40
 8005320:	d01d      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b08      	cmp	r3, #8
 800532e:	d116      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f8df 	bl	800550a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2208      	movs	r2, #8
 8005350:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e00f      	b.n	800537e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4013      	ands	r3, r2
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	429a      	cmp	r2, r3
 800537a:	d0b4      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b098      	sub	sp, #96	@ 0x60
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	4613      	mov	r3, r2
 8005394:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2222      	movs	r2, #34	@ 0x22
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b4:	4a3e      	ldr	r2, [pc, #248]	@ (80054b0 <UART_Start_Receive_DMA+0x128>)
 80053b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053bc:	4a3d      	ldr	r2, [pc, #244]	@ (80054b4 <UART_Start_Receive_DMA+0x12c>)
 80053be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c4:	4a3c      	ldr	r2, [pc, #240]	@ (80054b8 <UART_Start_Receive_DMA+0x130>)
 80053c6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053cc:	2200      	movs	r2, #0
 80053ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80053d0:	f107 0308 	add.w	r3, r7, #8
 80053d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	f7fd fdaa 	bl	8002f40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d019      	beq.n	800543e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800541a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800542a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800542c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005430:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e5      	bne.n	800540a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3314      	adds	r3, #20
 8005444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	657b      	str	r3, [r7, #84]	@ 0x54
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3314      	adds	r3, #20
 800545c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800545e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005460:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e5      	bne.n	800543e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	617b      	str	r3, [r7, #20]
   return(result);
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005488:	653b      	str	r3, [r7, #80]	@ 0x50
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005492:	627a      	str	r2, [r7, #36]	@ 0x24
 8005494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6a39      	ldr	r1, [r7, #32]
 8005498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e5      	bne.n	8005472 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3760      	adds	r7, #96	@ 0x60
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	080050d9 	.word	0x080050d9
 80054b4:	08005205 	.word	0x08005205
 80054b8:	08005241 	.word	0x08005241

080054bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	@ 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	330c      	adds	r3, #12
 80054ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	61ba      	str	r2, [r7, #24]
 80054e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6979      	ldr	r1, [r7, #20]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	613b      	str	r3, [r7, #16]
   return(result);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005500:	bf00      	nop
 8005502:	3724      	adds	r7, #36	@ 0x24
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800550a:	b480      	push	{r7}
 800550c:	b095      	sub	sp, #84	@ 0x54
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005532:	643a      	str	r2, [r7, #64]	@ 0x40
 8005534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3314      	adds	r3, #20
 800554c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	61fb      	str	r3, [r7, #28]
   return(result);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3314      	adds	r3, #20
 8005564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005568:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800556c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557e:	2b01      	cmp	r3, #1
 8005580:	d119      	bne.n	80055b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	330c      	adds	r3, #12
 8005588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	60bb      	str	r3, [r7, #8]
   return(result);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f023 0310 	bic.w	r3, r3, #16
 8005598:	647b      	str	r3, [r7, #68]	@ 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055a2:	61ba      	str	r2, [r7, #24]
 80055a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6979      	ldr	r1, [r7, #20]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	613b      	str	r3, [r7, #16]
   return(result);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e5      	bne.n	8005582 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055c4:	bf00      	nop
 80055c6:	3754      	adds	r7, #84	@ 0x54
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7fc ffa3 	bl	8002534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b21      	cmp	r3, #33	@ 0x21
 8005608:	d13e      	bne.n	8005688 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005612:	d114      	bne.n	800563e <UART_Transmit_IT+0x48>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d110      	bne.n	800563e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005630:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	621a      	str	r2, [r3, #32]
 800563c:	e008      	b.n	8005650 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	1c59      	adds	r1, r3, #1
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6211      	str	r1, [r2, #32]
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29b      	uxth	r3, r3
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4619      	mov	r1, r3
 800565e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10f      	bne.n	8005684 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005672:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005682:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	e000      	b.n	800568a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005688:	2302      	movs	r3, #2
  }
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7fc fe4f 	bl	8002358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08c      	sub	sp, #48	@ 0x30
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b22      	cmp	r3, #34	@ 0x22
 80056d6:	f040 80ae 	bne.w	8005836 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e2:	d117      	bne.n	8005714 <UART_Receive_IT+0x50>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d113      	bne.n	8005714 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005702:	b29a      	uxth	r2, r3
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570c:	1c9a      	adds	r2, r3, #2
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	629a      	str	r2, [r3, #40]	@ 0x28
 8005712:	e026      	b.n	8005762 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005726:	d007      	beq.n	8005738 <UART_Receive_IT+0x74>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <UART_Receive_IT+0x82>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	e008      	b.n	8005758 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005752:	b2da      	uxtb	r2, r3
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29b      	uxth	r3, r3
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4619      	mov	r1, r3
 8005770:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005772:	2b00      	cmp	r3, #0
 8005774:	d15d      	bne.n	8005832 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0220 	bic.w	r2, r2, #32
 8005784:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005794:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695a      	ldr	r2, [r3, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d135      	bne.n	8005828 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	613b      	str	r3, [r7, #16]
   return(result);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f023 0310 	bic.w	r3, r3, #16
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e2:	623a      	str	r2, [r7, #32]
 80057e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	69f9      	ldr	r1, [r7, #28]
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b10      	cmp	r3, #16
 8005802:	d10a      	bne.n	800581a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff fbf3 	bl	800500c <HAL_UARTEx_RxEventCallback>
 8005826:	e002      	b.n	800582e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fc fddf 	bl	80023ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e002      	b.n	8005838 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e000      	b.n	8005838 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005836:	2302      	movs	r3, #2
  }
}
 8005838:	4618      	mov	r0, r3
 800583a:	3730      	adds	r7, #48	@ 0x30
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800587a:	f023 030c 	bic.w	r3, r3, #12
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	430b      	orrs	r3, r1
 8005886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005954 <UART_SetConfig+0x114>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d103      	bne.n	80058b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7fe fb26 	bl	8003ef8 <HAL_RCC_GetPCLK2Freq>
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	e002      	b.n	80058b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058b0:	f7fe fb0e 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 80058b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009a      	lsls	r2, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058cc:	4a22      	ldr	r2, [pc, #136]	@ (8005958 <UART_SetConfig+0x118>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	0119      	lsls	r1, r3, #4
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009a      	lsls	r2, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <UART_SetConfig+0x118>)
 80058ee:	fba3 0302 	umull	r0, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	2064      	movs	r0, #100	@ 0x64
 80058f6:	fb00 f303 	mul.w	r3, r0, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	3332      	adds	r3, #50	@ 0x32
 8005900:	4a15      	ldr	r2, [pc, #84]	@ (8005958 <UART_SetConfig+0x118>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800590c:	4419      	add	r1, r3
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009a      	lsls	r2, r3, #2
 8005918:	441a      	add	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	fbb2 f2f3 	udiv	r2, r2, r3
 8005924:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <UART_SetConfig+0x118>)
 8005926:	fba3 0302 	umull	r0, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2064      	movs	r0, #100	@ 0x64
 800592e:	fb00 f303 	mul.w	r3, r0, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	3332      	adds	r3, #50	@ 0x32
 8005938:	4a07      	ldr	r2, [pc, #28]	@ (8005958 <UART_SetConfig+0x118>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	f003 020f 	and.w	r2, r3, #15
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	440a      	add	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40013800 	.word	0x40013800
 8005958:	51eb851f 	.word	0x51eb851f

0800595c <__cvt>:
 800595c:	2b00      	cmp	r3, #0
 800595e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005962:	461d      	mov	r5, r3
 8005964:	bfbb      	ittet	lt
 8005966:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800596a:	461d      	movlt	r5, r3
 800596c:	2300      	movge	r3, #0
 800596e:	232d      	movlt	r3, #45	@ 0x2d
 8005970:	b088      	sub	sp, #32
 8005972:	4614      	mov	r4, r2
 8005974:	bfb8      	it	lt
 8005976:	4614      	movlt	r4, r2
 8005978:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800597a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800597c:	7013      	strb	r3, [r2, #0]
 800597e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005980:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005984:	f023 0820 	bic.w	r8, r3, #32
 8005988:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800598c:	d005      	beq.n	800599a <__cvt+0x3e>
 800598e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005992:	d100      	bne.n	8005996 <__cvt+0x3a>
 8005994:	3601      	adds	r6, #1
 8005996:	2302      	movs	r3, #2
 8005998:	e000      	b.n	800599c <__cvt+0x40>
 800599a:	2303      	movs	r3, #3
 800599c:	aa07      	add	r2, sp, #28
 800599e:	9204      	str	r2, [sp, #16]
 80059a0:	aa06      	add	r2, sp, #24
 80059a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80059a6:	e9cd 3600 	strd	r3, r6, [sp]
 80059aa:	4622      	mov	r2, r4
 80059ac:	462b      	mov	r3, r5
 80059ae:	f000 ffa7 	bl	8006900 <_dtoa_r>
 80059b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80059b6:	4607      	mov	r7, r0
 80059b8:	d119      	bne.n	80059ee <__cvt+0x92>
 80059ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80059bc:	07db      	lsls	r3, r3, #31
 80059be:	d50e      	bpl.n	80059de <__cvt+0x82>
 80059c0:	eb00 0906 	add.w	r9, r0, r6
 80059c4:	2200      	movs	r2, #0
 80059c6:	2300      	movs	r3, #0
 80059c8:	4620      	mov	r0, r4
 80059ca:	4629      	mov	r1, r5
 80059cc:	f7fa fff6 	bl	80009bc <__aeabi_dcmpeq>
 80059d0:	b108      	cbz	r0, 80059d6 <__cvt+0x7a>
 80059d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80059d6:	2230      	movs	r2, #48	@ 0x30
 80059d8:	9b07      	ldr	r3, [sp, #28]
 80059da:	454b      	cmp	r3, r9
 80059dc:	d31e      	bcc.n	8005a1c <__cvt+0xc0>
 80059de:	4638      	mov	r0, r7
 80059e0:	9b07      	ldr	r3, [sp, #28]
 80059e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80059e4:	1bdb      	subs	r3, r3, r7
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	b008      	add	sp, #32
 80059ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059f2:	eb00 0906 	add.w	r9, r0, r6
 80059f6:	d1e5      	bne.n	80059c4 <__cvt+0x68>
 80059f8:	7803      	ldrb	r3, [r0, #0]
 80059fa:	2b30      	cmp	r3, #48	@ 0x30
 80059fc:	d10a      	bne.n	8005a14 <__cvt+0xb8>
 80059fe:	2200      	movs	r2, #0
 8005a00:	2300      	movs	r3, #0
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	f7fa ffd9 	bl	80009bc <__aeabi_dcmpeq>
 8005a0a:	b918      	cbnz	r0, 8005a14 <__cvt+0xb8>
 8005a0c:	f1c6 0601 	rsb	r6, r6, #1
 8005a10:	f8ca 6000 	str.w	r6, [sl]
 8005a14:	f8da 3000 	ldr.w	r3, [sl]
 8005a18:	4499      	add	r9, r3
 8005a1a:	e7d3      	b.n	80059c4 <__cvt+0x68>
 8005a1c:	1c59      	adds	r1, r3, #1
 8005a1e:	9107      	str	r1, [sp, #28]
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e7d9      	b.n	80059d8 <__cvt+0x7c>

08005a24 <__exponent>:
 8005a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a26:	2900      	cmp	r1, #0
 8005a28:	bfb6      	itet	lt
 8005a2a:	232d      	movlt	r3, #45	@ 0x2d
 8005a2c:	232b      	movge	r3, #43	@ 0x2b
 8005a2e:	4249      	neglt	r1, r1
 8005a30:	2909      	cmp	r1, #9
 8005a32:	7002      	strb	r2, [r0, #0]
 8005a34:	7043      	strb	r3, [r0, #1]
 8005a36:	dd29      	ble.n	8005a8c <__exponent+0x68>
 8005a38:	f10d 0307 	add.w	r3, sp, #7
 8005a3c:	461d      	mov	r5, r3
 8005a3e:	270a      	movs	r7, #10
 8005a40:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a44:	461a      	mov	r2, r3
 8005a46:	fb07 1416 	mls	r4, r7, r6, r1
 8005a4a:	3430      	adds	r4, #48	@ 0x30
 8005a4c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a50:	460c      	mov	r4, r1
 8005a52:	2c63      	cmp	r4, #99	@ 0x63
 8005a54:	4631      	mov	r1, r6
 8005a56:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a5a:	dcf1      	bgt.n	8005a40 <__exponent+0x1c>
 8005a5c:	3130      	adds	r1, #48	@ 0x30
 8005a5e:	1e94      	subs	r4, r2, #2
 8005a60:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a64:	4623      	mov	r3, r4
 8005a66:	1c41      	adds	r1, r0, #1
 8005a68:	42ab      	cmp	r3, r5
 8005a6a:	d30a      	bcc.n	8005a82 <__exponent+0x5e>
 8005a6c:	f10d 0309 	add.w	r3, sp, #9
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	42ac      	cmp	r4, r5
 8005a74:	bf88      	it	hi
 8005a76:	2300      	movhi	r3, #0
 8005a78:	3302      	adds	r3, #2
 8005a7a:	4403      	add	r3, r0
 8005a7c:	1a18      	subs	r0, r3, r0
 8005a7e:	b003      	add	sp, #12
 8005a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a82:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a86:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a8a:	e7ed      	b.n	8005a68 <__exponent+0x44>
 8005a8c:	2330      	movs	r3, #48	@ 0x30
 8005a8e:	3130      	adds	r1, #48	@ 0x30
 8005a90:	7083      	strb	r3, [r0, #2]
 8005a92:	70c1      	strb	r1, [r0, #3]
 8005a94:	1d03      	adds	r3, r0, #4
 8005a96:	e7f1      	b.n	8005a7c <__exponent+0x58>

08005a98 <_printf_float>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	b091      	sub	sp, #68	@ 0x44
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	f000 fe0d 	bl	80066c8 <_localeconv_r>
 8005aae:	6803      	ldr	r3, [r0, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	9308      	str	r3, [sp, #32]
 8005ab4:	f7fa fb56 	bl	8000164 <strlen>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	930e      	str	r3, [sp, #56]	@ 0x38
 8005abc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ac2:	3307      	adds	r3, #7
 8005ac4:	f023 0307 	bic.w	r3, r3, #7
 8005ac8:	f103 0208 	add.w	r2, r3, #8
 8005acc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ad0:	f8d4 b000 	ldr.w	fp, [r4]
 8005ad4:	f8c8 2000 	str.w	r2, [r8]
 8005ad8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005adc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ae2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005aee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005af2:	4b9c      	ldr	r3, [pc, #624]	@ (8005d64 <_printf_float+0x2cc>)
 8005af4:	f7fa ff94 	bl	8000a20 <__aeabi_dcmpun>
 8005af8:	bb70      	cbnz	r0, 8005b58 <_printf_float+0xc0>
 8005afa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005afe:	f04f 32ff 	mov.w	r2, #4294967295
 8005b02:	4b98      	ldr	r3, [pc, #608]	@ (8005d64 <_printf_float+0x2cc>)
 8005b04:	f7fa ff6e 	bl	80009e4 <__aeabi_dcmple>
 8005b08:	bb30      	cbnz	r0, 8005b58 <_printf_float+0xc0>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4649      	mov	r1, r9
 8005b12:	f7fa ff5d 	bl	80009d0 <__aeabi_dcmplt>
 8005b16:	b110      	cbz	r0, 8005b1e <_printf_float+0x86>
 8005b18:	232d      	movs	r3, #45	@ 0x2d
 8005b1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b1e:	4a92      	ldr	r2, [pc, #584]	@ (8005d68 <_printf_float+0x2d0>)
 8005b20:	4b92      	ldr	r3, [pc, #584]	@ (8005d6c <_printf_float+0x2d4>)
 8005b22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b26:	bf94      	ite	ls
 8005b28:	4690      	movls	r8, r2
 8005b2a:	4698      	movhi	r8, r3
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	f04f 0900 	mov.w	r9, #0
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	f02b 0304 	bic.w	r3, fp, #4
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	4633      	mov	r3, r6
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4628      	mov	r0, r5
 8005b40:	9700      	str	r7, [sp, #0]
 8005b42:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005b44:	f000 f9d4 	bl	8005ef0 <_printf_common>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f040 8090 	bne.w	8005c6e <_printf_float+0x1d6>
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b52:	b011      	add	sp, #68	@ 0x44
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fa ff5e 	bl	8000a20 <__aeabi_dcmpun>
 8005b64:	b148      	cbz	r0, 8005b7a <_printf_float+0xe2>
 8005b66:	464b      	mov	r3, r9
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bfb8      	it	lt
 8005b6c:	232d      	movlt	r3, #45	@ 0x2d
 8005b6e:	4a80      	ldr	r2, [pc, #512]	@ (8005d70 <_printf_float+0x2d8>)
 8005b70:	bfb8      	it	lt
 8005b72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b76:	4b7f      	ldr	r3, [pc, #508]	@ (8005d74 <_printf_float+0x2dc>)
 8005b78:	e7d3      	b.n	8005b22 <_printf_float+0x8a>
 8005b7a:	6863      	ldr	r3, [r4, #4]
 8005b7c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	d13f      	bne.n	8005c04 <_printf_float+0x16c>
 8005b84:	2306      	movs	r3, #6
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	9206      	str	r2, [sp, #24]
 8005b92:	aa0e      	add	r2, sp, #56	@ 0x38
 8005b94:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005b98:	aa0d      	add	r2, sp, #52	@ 0x34
 8005b9a:	9203      	str	r2, [sp, #12]
 8005b9c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005ba0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	4642      	mov	r2, r8
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	4628      	mov	r0, r5
 8005bac:	464b      	mov	r3, r9
 8005bae:	910a      	str	r1, [sp, #40]	@ 0x28
 8005bb0:	f7ff fed4 	bl	800595c <__cvt>
 8005bb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	2947      	cmp	r1, #71	@ 0x47
 8005bba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005bbc:	d128      	bne.n	8005c10 <_printf_float+0x178>
 8005bbe:	1cc8      	adds	r0, r1, #3
 8005bc0:	db02      	blt.n	8005bc8 <_printf_float+0x130>
 8005bc2:	6863      	ldr	r3, [r4, #4]
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	dd40      	ble.n	8005c4a <_printf_float+0x1b2>
 8005bc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bcc:	fa5f fa8a 	uxtb.w	sl, sl
 8005bd0:	4652      	mov	r2, sl
 8005bd2:	3901      	subs	r1, #1
 8005bd4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005bd8:	910d      	str	r1, [sp, #52]	@ 0x34
 8005bda:	f7ff ff23 	bl	8005a24 <__exponent>
 8005bde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005be0:	4681      	mov	r9, r0
 8005be2:	1813      	adds	r3, r2, r0
 8005be4:	2a01      	cmp	r2, #1
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	dc02      	bgt.n	8005bf0 <_printf_float+0x158>
 8005bea:	6822      	ldr	r2, [r4, #0]
 8005bec:	07d2      	lsls	r2, r2, #31
 8005bee:	d501      	bpl.n	8005bf4 <_printf_float+0x15c>
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d09e      	beq.n	8005b3a <_printf_float+0xa2>
 8005bfc:	232d      	movs	r3, #45	@ 0x2d
 8005bfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c02:	e79a      	b.n	8005b3a <_printf_float+0xa2>
 8005c04:	2947      	cmp	r1, #71	@ 0x47
 8005c06:	d1bf      	bne.n	8005b88 <_printf_float+0xf0>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1bd      	bne.n	8005b88 <_printf_float+0xf0>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e7ba      	b.n	8005b86 <_printf_float+0xee>
 8005c10:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c14:	d9dc      	bls.n	8005bd0 <_printf_float+0x138>
 8005c16:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c1a:	d118      	bne.n	8005c4e <_printf_float+0x1b6>
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	6863      	ldr	r3, [r4, #4]
 8005c20:	dd0b      	ble.n	8005c3a <_printf_float+0x1a2>
 8005c22:	6121      	str	r1, [r4, #16]
 8005c24:	b913      	cbnz	r3, 8005c2c <_printf_float+0x194>
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	07d0      	lsls	r0, r2, #31
 8005c2a:	d502      	bpl.n	8005c32 <_printf_float+0x19a>
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	440b      	add	r3, r1
 8005c30:	6123      	str	r3, [r4, #16]
 8005c32:	f04f 0900 	mov.w	r9, #0
 8005c36:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c38:	e7dc      	b.n	8005bf4 <_printf_float+0x15c>
 8005c3a:	b913      	cbnz	r3, 8005c42 <_printf_float+0x1aa>
 8005c3c:	6822      	ldr	r2, [r4, #0]
 8005c3e:	07d2      	lsls	r2, r2, #31
 8005c40:	d501      	bpl.n	8005c46 <_printf_float+0x1ae>
 8005c42:	3302      	adds	r3, #2
 8005c44:	e7f4      	b.n	8005c30 <_printf_float+0x198>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e7f2      	b.n	8005c30 <_printf_float+0x198>
 8005c4a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c50:	4299      	cmp	r1, r3
 8005c52:	db05      	blt.n	8005c60 <_printf_float+0x1c8>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	6121      	str	r1, [r4, #16]
 8005c58:	07d8      	lsls	r0, r3, #31
 8005c5a:	d5ea      	bpl.n	8005c32 <_printf_float+0x19a>
 8005c5c:	1c4b      	adds	r3, r1, #1
 8005c5e:	e7e7      	b.n	8005c30 <_printf_float+0x198>
 8005c60:	2900      	cmp	r1, #0
 8005c62:	bfcc      	ite	gt
 8005c64:	2201      	movgt	r2, #1
 8005c66:	f1c1 0202 	rsble	r2, r1, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	e7e0      	b.n	8005c30 <_printf_float+0x198>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	055a      	lsls	r2, r3, #21
 8005c72:	d407      	bmi.n	8005c84 <_printf_float+0x1ec>
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	4642      	mov	r2, r8
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d12b      	bne.n	8005cda <_printf_float+0x242>
 8005c82:	e764      	b.n	8005b4e <_printf_float+0xb6>
 8005c84:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c88:	f240 80dc 	bls.w	8005e44 <_printf_float+0x3ac>
 8005c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c90:	2200      	movs	r2, #0
 8005c92:	2300      	movs	r3, #0
 8005c94:	f7fa fe92 	bl	80009bc <__aeabi_dcmpeq>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d033      	beq.n	8005d04 <_printf_float+0x26c>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	4a35      	ldr	r2, [pc, #212]	@ (8005d78 <_printf_float+0x2e0>)
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f43f af51 	beq.w	8005b4e <_printf_float+0xb6>
 8005cac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005cb0:	4543      	cmp	r3, r8
 8005cb2:	db02      	blt.n	8005cba <_printf_float+0x222>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	07d8      	lsls	r0, r3, #31
 8005cb8:	d50f      	bpl.n	8005cda <_printf_float+0x242>
 8005cba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f af42 	beq.w	8005b4e <_printf_float+0xb6>
 8005cca:	f04f 0900 	mov.w	r9, #0
 8005cce:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cd2:	f104 0a1a 	add.w	sl, r4, #26
 8005cd6:	45c8      	cmp	r8, r9
 8005cd8:	dc09      	bgt.n	8005cee <_printf_float+0x256>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	079b      	lsls	r3, r3, #30
 8005cde:	f100 8102 	bmi.w	8005ee6 <_printf_float+0x44e>
 8005ce2:	68e0      	ldr	r0, [r4, #12]
 8005ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ce6:	4298      	cmp	r0, r3
 8005ce8:	bfb8      	it	lt
 8005cea:	4618      	movlt	r0, r3
 8005cec:	e731      	b.n	8005b52 <_printf_float+0xba>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f43f af28 	beq.w	8005b4e <_printf_float+0xb6>
 8005cfe:	f109 0901 	add.w	r9, r9, #1
 8005d02:	e7e8      	b.n	8005cd6 <_printf_float+0x23e>
 8005d04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	dc38      	bgt.n	8005d7c <_printf_float+0x2e4>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	4a19      	ldr	r2, [pc, #100]	@ (8005d78 <_printf_float+0x2e0>)
 8005d12:	47b8      	blx	r7
 8005d14:	3001      	adds	r0, #1
 8005d16:	f43f af1a 	beq.w	8005b4e <_printf_float+0xb6>
 8005d1a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005d1e:	ea59 0303 	orrs.w	r3, r9, r3
 8005d22:	d102      	bne.n	8005d2a <_printf_float+0x292>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	07d9      	lsls	r1, r3, #31
 8005d28:	d5d7      	bpl.n	8005cda <_printf_float+0x242>
 8005d2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b8      	blx	r7
 8005d34:	3001      	adds	r0, #1
 8005d36:	f43f af0a 	beq.w	8005b4e <_printf_float+0xb6>
 8005d3a:	f04f 0a00 	mov.w	sl, #0
 8005d3e:	f104 0b1a 	add.w	fp, r4, #26
 8005d42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d44:	425b      	negs	r3, r3
 8005d46:	4553      	cmp	r3, sl
 8005d48:	dc01      	bgt.n	8005d4e <_printf_float+0x2b6>
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	e793      	b.n	8005c76 <_printf_float+0x1de>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	465a      	mov	r2, fp
 8005d52:	4631      	mov	r1, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b8      	blx	r7
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f43f aef8 	beq.w	8005b4e <_printf_float+0xb6>
 8005d5e:	f10a 0a01 	add.w	sl, sl, #1
 8005d62:	e7ee      	b.n	8005d42 <_printf_float+0x2aa>
 8005d64:	7fefffff 	.word	0x7fefffff
 8005d68:	08009446 	.word	0x08009446
 8005d6c:	0800944a 	.word	0x0800944a
 8005d70:	0800944e 	.word	0x0800944e
 8005d74:	08009452 	.word	0x08009452
 8005d78:	08009456 	.word	0x08009456
 8005d7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d7e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d82:	4553      	cmp	r3, sl
 8005d84:	bfa8      	it	ge
 8005d86:	4653      	movge	r3, sl
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	4699      	mov	r9, r3
 8005d8c:	dc36      	bgt.n	8005dfc <_printf_float+0x364>
 8005d8e:	f04f 0b00 	mov.w	fp, #0
 8005d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d96:	f104 021a 	add.w	r2, r4, #26
 8005d9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d9e:	eba3 0309 	sub.w	r3, r3, r9
 8005da2:	455b      	cmp	r3, fp
 8005da4:	dc31      	bgt.n	8005e0a <_printf_float+0x372>
 8005da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005da8:	459a      	cmp	sl, r3
 8005daa:	dc3a      	bgt.n	8005e22 <_printf_float+0x38a>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	07da      	lsls	r2, r3, #31
 8005db0:	d437      	bmi.n	8005e22 <_printf_float+0x38a>
 8005db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005db4:	ebaa 0903 	sub.w	r9, sl, r3
 8005db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dba:	ebaa 0303 	sub.w	r3, sl, r3
 8005dbe:	4599      	cmp	r9, r3
 8005dc0:	bfa8      	it	ge
 8005dc2:	4699      	movge	r9, r3
 8005dc4:	f1b9 0f00 	cmp.w	r9, #0
 8005dc8:	dc33      	bgt.n	8005e32 <_printf_float+0x39a>
 8005dca:	f04f 0800 	mov.w	r8, #0
 8005dce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dd2:	f104 0b1a 	add.w	fp, r4, #26
 8005dd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dd8:	ebaa 0303 	sub.w	r3, sl, r3
 8005ddc:	eba3 0309 	sub.w	r3, r3, r9
 8005de0:	4543      	cmp	r3, r8
 8005de2:	f77f af7a 	ble.w	8005cda <_printf_float+0x242>
 8005de6:	2301      	movs	r3, #1
 8005de8:	465a      	mov	r2, fp
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	f43f aeac 	beq.w	8005b4e <_printf_float+0xb6>
 8005df6:	f108 0801 	add.w	r8, r8, #1
 8005dfa:	e7ec      	b.n	8005dd6 <_printf_float+0x33e>
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	4631      	mov	r1, r6
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	d1c2      	bne.n	8005d8e <_printf_float+0x2f6>
 8005e08:	e6a1      	b.n	8005b4e <_printf_float+0xb6>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	f43f ae9a 	beq.w	8005b4e <_printf_float+0xb6>
 8005e1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e1c:	f10b 0b01 	add.w	fp, fp, #1
 8005e20:	e7bb      	b.n	8005d9a <_printf_float+0x302>
 8005e22:	4631      	mov	r1, r6
 8005e24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d1c0      	bne.n	8005db2 <_printf_float+0x31a>
 8005e30:	e68d      	b.n	8005b4e <_printf_float+0xb6>
 8005e32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e34:	464b      	mov	r3, r9
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	4442      	add	r2, r8
 8005e3c:	47b8      	blx	r7
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d1c3      	bne.n	8005dca <_printf_float+0x332>
 8005e42:	e684      	b.n	8005b4e <_printf_float+0xb6>
 8005e44:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e48:	f1ba 0f01 	cmp.w	sl, #1
 8005e4c:	dc01      	bgt.n	8005e52 <_printf_float+0x3ba>
 8005e4e:	07db      	lsls	r3, r3, #31
 8005e50:	d536      	bpl.n	8005ec0 <_printf_float+0x428>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4642      	mov	r2, r8
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	47b8      	blx	r7
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	f43f ae76 	beq.w	8005b4e <_printf_float+0xb6>
 8005e62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e66:	4631      	mov	r1, r6
 8005e68:	4628      	mov	r0, r5
 8005e6a:	47b8      	blx	r7
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	f43f ae6e 	beq.w	8005b4e <_printf_float+0xb6>
 8005e72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e76:	2200      	movs	r2, #0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e7e:	f7fa fd9d 	bl	80009bc <__aeabi_dcmpeq>
 8005e82:	b9c0      	cbnz	r0, 8005eb6 <_printf_float+0x41e>
 8005e84:	4653      	mov	r3, sl
 8005e86:	f108 0201 	add.w	r2, r8, #1
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	d10c      	bne.n	8005eae <_printf_float+0x416>
 8005e94:	e65b      	b.n	8005b4e <_printf_float+0xb6>
 8005e96:	2301      	movs	r3, #1
 8005e98:	465a      	mov	r2, fp
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	f43f ae54 	beq.w	8005b4e <_printf_float+0xb6>
 8005ea6:	f108 0801 	add.w	r8, r8, #1
 8005eaa:	45d0      	cmp	r8, sl
 8005eac:	dbf3      	blt.n	8005e96 <_printf_float+0x3fe>
 8005eae:	464b      	mov	r3, r9
 8005eb0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005eb4:	e6e0      	b.n	8005c78 <_printf_float+0x1e0>
 8005eb6:	f04f 0800 	mov.w	r8, #0
 8005eba:	f104 0b1a 	add.w	fp, r4, #26
 8005ebe:	e7f4      	b.n	8005eaa <_printf_float+0x412>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4642      	mov	r2, r8
 8005ec4:	e7e1      	b.n	8005e8a <_printf_float+0x3f2>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	464a      	mov	r2, r9
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f43f ae3c 	beq.w	8005b4e <_printf_float+0xb6>
 8005ed6:	f108 0801 	add.w	r8, r8, #1
 8005eda:	68e3      	ldr	r3, [r4, #12]
 8005edc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ede:	1a5b      	subs	r3, r3, r1
 8005ee0:	4543      	cmp	r3, r8
 8005ee2:	dcf0      	bgt.n	8005ec6 <_printf_float+0x42e>
 8005ee4:	e6fd      	b.n	8005ce2 <_printf_float+0x24a>
 8005ee6:	f04f 0800 	mov.w	r8, #0
 8005eea:	f104 0919 	add.w	r9, r4, #25
 8005eee:	e7f4      	b.n	8005eda <_printf_float+0x442>

08005ef0 <_printf_common>:
 8005ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	4698      	mov	r8, r3
 8005ef8:	688a      	ldr	r2, [r1, #8]
 8005efa:	690b      	ldr	r3, [r1, #16]
 8005efc:	4607      	mov	r7, r0
 8005efe:	4293      	cmp	r3, r2
 8005f00:	bfb8      	it	lt
 8005f02:	4613      	movlt	r3, r2
 8005f04:	6033      	str	r3, [r6, #0]
 8005f06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f10:	b10a      	cbz	r2, 8005f16 <_printf_common+0x26>
 8005f12:	3301      	adds	r3, #1
 8005f14:	6033      	str	r3, [r6, #0]
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	0699      	lsls	r1, r3, #26
 8005f1a:	bf42      	ittt	mi
 8005f1c:	6833      	ldrmi	r3, [r6, #0]
 8005f1e:	3302      	addmi	r3, #2
 8005f20:	6033      	strmi	r3, [r6, #0]
 8005f22:	6825      	ldr	r5, [r4, #0]
 8005f24:	f015 0506 	ands.w	r5, r5, #6
 8005f28:	d106      	bne.n	8005f38 <_printf_common+0x48>
 8005f2a:	f104 0a19 	add.w	sl, r4, #25
 8005f2e:	68e3      	ldr	r3, [r4, #12]
 8005f30:	6832      	ldr	r2, [r6, #0]
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	42ab      	cmp	r3, r5
 8005f36:	dc2b      	bgt.n	8005f90 <_printf_common+0xa0>
 8005f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	3b00      	subs	r3, #0
 8005f40:	bf18      	it	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	0692      	lsls	r2, r2, #26
 8005f46:	d430      	bmi.n	8005faa <_printf_common+0xba>
 8005f48:	4641      	mov	r1, r8
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f50:	47c8      	blx	r9
 8005f52:	3001      	adds	r0, #1
 8005f54:	d023      	beq.n	8005f9e <_printf_common+0xae>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	f003 0306 	and.w	r3, r3, #6
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	bf14      	ite	ne
 8005f62:	2500      	movne	r5, #0
 8005f64:	6833      	ldreq	r3, [r6, #0]
 8005f66:	f04f 0600 	mov.w	r6, #0
 8005f6a:	bf08      	it	eq
 8005f6c:	68e5      	ldreq	r5, [r4, #12]
 8005f6e:	f104 041a 	add.w	r4, r4, #26
 8005f72:	bf08      	it	eq
 8005f74:	1aed      	subeq	r5, r5, r3
 8005f76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f7a:	bf08      	it	eq
 8005f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f80:	4293      	cmp	r3, r2
 8005f82:	bfc4      	itt	gt
 8005f84:	1a9b      	subgt	r3, r3, r2
 8005f86:	18ed      	addgt	r5, r5, r3
 8005f88:	42b5      	cmp	r5, r6
 8005f8a:	d11a      	bne.n	8005fc2 <_printf_common+0xd2>
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e008      	b.n	8005fa2 <_printf_common+0xb2>
 8005f90:	2301      	movs	r3, #1
 8005f92:	4652      	mov	r2, sl
 8005f94:	4641      	mov	r1, r8
 8005f96:	4638      	mov	r0, r7
 8005f98:	47c8      	blx	r9
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d103      	bne.n	8005fa6 <_printf_common+0xb6>
 8005f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa6:	3501      	adds	r5, #1
 8005fa8:	e7c1      	b.n	8005f2e <_printf_common+0x3e>
 8005faa:	2030      	movs	r0, #48	@ 0x30
 8005fac:	18e1      	adds	r1, r4, r3
 8005fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fb8:	4422      	add	r2, r4
 8005fba:	3302      	adds	r3, #2
 8005fbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fc0:	e7c2      	b.n	8005f48 <_printf_common+0x58>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4641      	mov	r1, r8
 8005fc8:	4638      	mov	r0, r7
 8005fca:	47c8      	blx	r9
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d0e6      	beq.n	8005f9e <_printf_common+0xae>
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	e7d9      	b.n	8005f88 <_printf_common+0x98>

08005fd4 <_printf_i>:
 8005fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd8:	7e0f      	ldrb	r7, [r1, #24]
 8005fda:	4691      	mov	r9, r2
 8005fdc:	2f78      	cmp	r7, #120	@ 0x78
 8005fde:	4680      	mov	r8, r0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	469a      	mov	sl, r3
 8005fe4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fea:	d807      	bhi.n	8005ffc <_printf_i+0x28>
 8005fec:	2f62      	cmp	r7, #98	@ 0x62
 8005fee:	d80a      	bhi.n	8006006 <_printf_i+0x32>
 8005ff0:	2f00      	cmp	r7, #0
 8005ff2:	f000 80d3 	beq.w	800619c <_printf_i+0x1c8>
 8005ff6:	2f58      	cmp	r7, #88	@ 0x58
 8005ff8:	f000 80ba 	beq.w	8006170 <_printf_i+0x19c>
 8005ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006004:	e03a      	b.n	800607c <_printf_i+0xa8>
 8006006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800600a:	2b15      	cmp	r3, #21
 800600c:	d8f6      	bhi.n	8005ffc <_printf_i+0x28>
 800600e:	a101      	add	r1, pc, #4	@ (adr r1, 8006014 <_printf_i+0x40>)
 8006010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006014:	0800606d 	.word	0x0800606d
 8006018:	08006081 	.word	0x08006081
 800601c:	08005ffd 	.word	0x08005ffd
 8006020:	08005ffd 	.word	0x08005ffd
 8006024:	08005ffd 	.word	0x08005ffd
 8006028:	08005ffd 	.word	0x08005ffd
 800602c:	08006081 	.word	0x08006081
 8006030:	08005ffd 	.word	0x08005ffd
 8006034:	08005ffd 	.word	0x08005ffd
 8006038:	08005ffd 	.word	0x08005ffd
 800603c:	08005ffd 	.word	0x08005ffd
 8006040:	08006183 	.word	0x08006183
 8006044:	080060ab 	.word	0x080060ab
 8006048:	0800613d 	.word	0x0800613d
 800604c:	08005ffd 	.word	0x08005ffd
 8006050:	08005ffd 	.word	0x08005ffd
 8006054:	080061a5 	.word	0x080061a5
 8006058:	08005ffd 	.word	0x08005ffd
 800605c:	080060ab 	.word	0x080060ab
 8006060:	08005ffd 	.word	0x08005ffd
 8006064:	08005ffd 	.word	0x08005ffd
 8006068:	08006145 	.word	0x08006145
 800606c:	6833      	ldr	r3, [r6, #0]
 800606e:	1d1a      	adds	r2, r3, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6032      	str	r2, [r6, #0]
 8006074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800607c:	2301      	movs	r3, #1
 800607e:	e09e      	b.n	80061be <_printf_i+0x1ea>
 8006080:	6833      	ldr	r3, [r6, #0]
 8006082:	6820      	ldr	r0, [r4, #0]
 8006084:	1d19      	adds	r1, r3, #4
 8006086:	6031      	str	r1, [r6, #0]
 8006088:	0606      	lsls	r6, r0, #24
 800608a:	d501      	bpl.n	8006090 <_printf_i+0xbc>
 800608c:	681d      	ldr	r5, [r3, #0]
 800608e:	e003      	b.n	8006098 <_printf_i+0xc4>
 8006090:	0645      	lsls	r5, r0, #25
 8006092:	d5fb      	bpl.n	800608c <_printf_i+0xb8>
 8006094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006098:	2d00      	cmp	r5, #0
 800609a:	da03      	bge.n	80060a4 <_printf_i+0xd0>
 800609c:	232d      	movs	r3, #45	@ 0x2d
 800609e:	426d      	negs	r5, r5
 80060a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060a4:	230a      	movs	r3, #10
 80060a6:	4859      	ldr	r0, [pc, #356]	@ (800620c <_printf_i+0x238>)
 80060a8:	e011      	b.n	80060ce <_printf_i+0xfa>
 80060aa:	6821      	ldr	r1, [r4, #0]
 80060ac:	6833      	ldr	r3, [r6, #0]
 80060ae:	0608      	lsls	r0, r1, #24
 80060b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80060b4:	d402      	bmi.n	80060bc <_printf_i+0xe8>
 80060b6:	0649      	lsls	r1, r1, #25
 80060b8:	bf48      	it	mi
 80060ba:	b2ad      	uxthmi	r5, r5
 80060bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	bf14      	ite	ne
 80060c2:	230a      	movne	r3, #10
 80060c4:	2308      	moveq	r3, #8
 80060c6:	4851      	ldr	r0, [pc, #324]	@ (800620c <_printf_i+0x238>)
 80060c8:	2100      	movs	r1, #0
 80060ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060ce:	6866      	ldr	r6, [r4, #4]
 80060d0:	2e00      	cmp	r6, #0
 80060d2:	bfa8      	it	ge
 80060d4:	6821      	ldrge	r1, [r4, #0]
 80060d6:	60a6      	str	r6, [r4, #8]
 80060d8:	bfa4      	itt	ge
 80060da:	f021 0104 	bicge.w	r1, r1, #4
 80060de:	6021      	strge	r1, [r4, #0]
 80060e0:	b90d      	cbnz	r5, 80060e6 <_printf_i+0x112>
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	d04b      	beq.n	800617e <_printf_i+0x1aa>
 80060e6:	4616      	mov	r6, r2
 80060e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80060ec:	fb03 5711 	mls	r7, r3, r1, r5
 80060f0:	5dc7      	ldrb	r7, [r0, r7]
 80060f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060f6:	462f      	mov	r7, r5
 80060f8:	42bb      	cmp	r3, r7
 80060fa:	460d      	mov	r5, r1
 80060fc:	d9f4      	bls.n	80060e8 <_printf_i+0x114>
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d10b      	bne.n	800611a <_printf_i+0x146>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	07df      	lsls	r7, r3, #31
 8006106:	d508      	bpl.n	800611a <_printf_i+0x146>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	6861      	ldr	r1, [r4, #4]
 800610c:	4299      	cmp	r1, r3
 800610e:	bfde      	ittt	le
 8006110:	2330      	movle	r3, #48	@ 0x30
 8006112:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006116:	f106 36ff 	addle.w	r6, r6, #4294967295
 800611a:	1b92      	subs	r2, r2, r6
 800611c:	6122      	str	r2, [r4, #16]
 800611e:	464b      	mov	r3, r9
 8006120:	4621      	mov	r1, r4
 8006122:	4640      	mov	r0, r8
 8006124:	f8cd a000 	str.w	sl, [sp]
 8006128:	aa03      	add	r2, sp, #12
 800612a:	f7ff fee1 	bl	8005ef0 <_printf_common>
 800612e:	3001      	adds	r0, #1
 8006130:	d14a      	bne.n	80061c8 <_printf_i+0x1f4>
 8006132:	f04f 30ff 	mov.w	r0, #4294967295
 8006136:	b004      	add	sp, #16
 8006138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	f043 0320 	orr.w	r3, r3, #32
 8006142:	6023      	str	r3, [r4, #0]
 8006144:	2778      	movs	r7, #120	@ 0x78
 8006146:	4832      	ldr	r0, [pc, #200]	@ (8006210 <_printf_i+0x23c>)
 8006148:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	6831      	ldr	r1, [r6, #0]
 8006150:	061f      	lsls	r7, r3, #24
 8006152:	f851 5b04 	ldr.w	r5, [r1], #4
 8006156:	d402      	bmi.n	800615e <_printf_i+0x18a>
 8006158:	065f      	lsls	r7, r3, #25
 800615a:	bf48      	it	mi
 800615c:	b2ad      	uxthmi	r5, r5
 800615e:	6031      	str	r1, [r6, #0]
 8006160:	07d9      	lsls	r1, r3, #31
 8006162:	bf44      	itt	mi
 8006164:	f043 0320 	orrmi.w	r3, r3, #32
 8006168:	6023      	strmi	r3, [r4, #0]
 800616a:	b11d      	cbz	r5, 8006174 <_printf_i+0x1a0>
 800616c:	2310      	movs	r3, #16
 800616e:	e7ab      	b.n	80060c8 <_printf_i+0xf4>
 8006170:	4826      	ldr	r0, [pc, #152]	@ (800620c <_printf_i+0x238>)
 8006172:	e7e9      	b.n	8006148 <_printf_i+0x174>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	f023 0320 	bic.w	r3, r3, #32
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	e7f6      	b.n	800616c <_printf_i+0x198>
 800617e:	4616      	mov	r6, r2
 8006180:	e7bd      	b.n	80060fe <_printf_i+0x12a>
 8006182:	6833      	ldr	r3, [r6, #0]
 8006184:	6825      	ldr	r5, [r4, #0]
 8006186:	1d18      	adds	r0, r3, #4
 8006188:	6961      	ldr	r1, [r4, #20]
 800618a:	6030      	str	r0, [r6, #0]
 800618c:	062e      	lsls	r6, r5, #24
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	d501      	bpl.n	8006196 <_printf_i+0x1c2>
 8006192:	6019      	str	r1, [r3, #0]
 8006194:	e002      	b.n	800619c <_printf_i+0x1c8>
 8006196:	0668      	lsls	r0, r5, #25
 8006198:	d5fb      	bpl.n	8006192 <_printf_i+0x1be>
 800619a:	8019      	strh	r1, [r3, #0]
 800619c:	2300      	movs	r3, #0
 800619e:	4616      	mov	r6, r2
 80061a0:	6123      	str	r3, [r4, #16]
 80061a2:	e7bc      	b.n	800611e <_printf_i+0x14a>
 80061a4:	6833      	ldr	r3, [r6, #0]
 80061a6:	2100      	movs	r1, #0
 80061a8:	1d1a      	adds	r2, r3, #4
 80061aa:	6032      	str	r2, [r6, #0]
 80061ac:	681e      	ldr	r6, [r3, #0]
 80061ae:	6862      	ldr	r2, [r4, #4]
 80061b0:	4630      	mov	r0, r6
 80061b2:	f000 fb00 	bl	80067b6 <memchr>
 80061b6:	b108      	cbz	r0, 80061bc <_printf_i+0x1e8>
 80061b8:	1b80      	subs	r0, r0, r6
 80061ba:	6060      	str	r0, [r4, #4]
 80061bc:	6863      	ldr	r3, [r4, #4]
 80061be:	6123      	str	r3, [r4, #16]
 80061c0:	2300      	movs	r3, #0
 80061c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061c6:	e7aa      	b.n	800611e <_printf_i+0x14a>
 80061c8:	4632      	mov	r2, r6
 80061ca:	4649      	mov	r1, r9
 80061cc:	4640      	mov	r0, r8
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	47d0      	blx	sl
 80061d2:	3001      	adds	r0, #1
 80061d4:	d0ad      	beq.n	8006132 <_printf_i+0x15e>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	079b      	lsls	r3, r3, #30
 80061da:	d413      	bmi.n	8006204 <_printf_i+0x230>
 80061dc:	68e0      	ldr	r0, [r4, #12]
 80061de:	9b03      	ldr	r3, [sp, #12]
 80061e0:	4298      	cmp	r0, r3
 80061e2:	bfb8      	it	lt
 80061e4:	4618      	movlt	r0, r3
 80061e6:	e7a6      	b.n	8006136 <_printf_i+0x162>
 80061e8:	2301      	movs	r3, #1
 80061ea:	4632      	mov	r2, r6
 80061ec:	4649      	mov	r1, r9
 80061ee:	4640      	mov	r0, r8
 80061f0:	47d0      	blx	sl
 80061f2:	3001      	adds	r0, #1
 80061f4:	d09d      	beq.n	8006132 <_printf_i+0x15e>
 80061f6:	3501      	adds	r5, #1
 80061f8:	68e3      	ldr	r3, [r4, #12]
 80061fa:	9903      	ldr	r1, [sp, #12]
 80061fc:	1a5b      	subs	r3, r3, r1
 80061fe:	42ab      	cmp	r3, r5
 8006200:	dcf2      	bgt.n	80061e8 <_printf_i+0x214>
 8006202:	e7eb      	b.n	80061dc <_printf_i+0x208>
 8006204:	2500      	movs	r5, #0
 8006206:	f104 0619 	add.w	r6, r4, #25
 800620a:	e7f5      	b.n	80061f8 <_printf_i+0x224>
 800620c:	08009458 	.word	0x08009458
 8006210:	08009469 	.word	0x08009469

08006214 <std>:
 8006214:	2300      	movs	r3, #0
 8006216:	b510      	push	{r4, lr}
 8006218:	4604      	mov	r4, r0
 800621a:	e9c0 3300 	strd	r3, r3, [r0]
 800621e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006222:	6083      	str	r3, [r0, #8]
 8006224:	8181      	strh	r1, [r0, #12]
 8006226:	6643      	str	r3, [r0, #100]	@ 0x64
 8006228:	81c2      	strh	r2, [r0, #14]
 800622a:	6183      	str	r3, [r0, #24]
 800622c:	4619      	mov	r1, r3
 800622e:	2208      	movs	r2, #8
 8006230:	305c      	adds	r0, #92	@ 0x5c
 8006232:	f000 fa2d 	bl	8006690 <memset>
 8006236:	4b0d      	ldr	r3, [pc, #52]	@ (800626c <std+0x58>)
 8006238:	6224      	str	r4, [r4, #32]
 800623a:	6263      	str	r3, [r4, #36]	@ 0x24
 800623c:	4b0c      	ldr	r3, [pc, #48]	@ (8006270 <std+0x5c>)
 800623e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006240:	4b0c      	ldr	r3, [pc, #48]	@ (8006274 <std+0x60>)
 8006242:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006244:	4b0c      	ldr	r3, [pc, #48]	@ (8006278 <std+0x64>)
 8006246:	6323      	str	r3, [r4, #48]	@ 0x30
 8006248:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <std+0x68>)
 800624a:	429c      	cmp	r4, r3
 800624c:	d006      	beq.n	800625c <std+0x48>
 800624e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006252:	4294      	cmp	r4, r2
 8006254:	d002      	beq.n	800625c <std+0x48>
 8006256:	33d0      	adds	r3, #208	@ 0xd0
 8006258:	429c      	cmp	r4, r3
 800625a:	d105      	bne.n	8006268 <std+0x54>
 800625c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006264:	f000 baa4 	b.w	80067b0 <__retarget_lock_init_recursive>
 8006268:	bd10      	pop	{r4, pc}
 800626a:	bf00      	nop
 800626c:	080064e1 	.word	0x080064e1
 8006270:	08006503 	.word	0x08006503
 8006274:	0800653b 	.word	0x0800653b
 8006278:	0800655f 	.word	0x0800655f
 800627c:	20000fc8 	.word	0x20000fc8

08006280 <stdio_exit_handler>:
 8006280:	4a02      	ldr	r2, [pc, #8]	@ (800628c <stdio_exit_handler+0xc>)
 8006282:	4903      	ldr	r1, [pc, #12]	@ (8006290 <stdio_exit_handler+0x10>)
 8006284:	4803      	ldr	r0, [pc, #12]	@ (8006294 <stdio_exit_handler+0x14>)
 8006286:	f000 b869 	b.w	800635c <_fwalk_sglue>
 800628a:	bf00      	nop
 800628c:	200001d4 	.word	0x200001d4
 8006290:	080083bd 	.word	0x080083bd
 8006294:	200001e4 	.word	0x200001e4

08006298 <cleanup_stdio>:
 8006298:	6841      	ldr	r1, [r0, #4]
 800629a:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <cleanup_stdio+0x34>)
 800629c:	b510      	push	{r4, lr}
 800629e:	4299      	cmp	r1, r3
 80062a0:	4604      	mov	r4, r0
 80062a2:	d001      	beq.n	80062a8 <cleanup_stdio+0x10>
 80062a4:	f002 f88a 	bl	80083bc <_fflush_r>
 80062a8:	68a1      	ldr	r1, [r4, #8]
 80062aa:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <cleanup_stdio+0x38>)
 80062ac:	4299      	cmp	r1, r3
 80062ae:	d002      	beq.n	80062b6 <cleanup_stdio+0x1e>
 80062b0:	4620      	mov	r0, r4
 80062b2:	f002 f883 	bl	80083bc <_fflush_r>
 80062b6:	68e1      	ldr	r1, [r4, #12]
 80062b8:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <cleanup_stdio+0x3c>)
 80062ba:	4299      	cmp	r1, r3
 80062bc:	d004      	beq.n	80062c8 <cleanup_stdio+0x30>
 80062be:	4620      	mov	r0, r4
 80062c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c4:	f002 b87a 	b.w	80083bc <_fflush_r>
 80062c8:	bd10      	pop	{r4, pc}
 80062ca:	bf00      	nop
 80062cc:	20000fc8 	.word	0x20000fc8
 80062d0:	20001030 	.word	0x20001030
 80062d4:	20001098 	.word	0x20001098

080062d8 <global_stdio_init.part.0>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	4b0b      	ldr	r3, [pc, #44]	@ (8006308 <global_stdio_init.part.0+0x30>)
 80062dc:	4c0b      	ldr	r4, [pc, #44]	@ (800630c <global_stdio_init.part.0+0x34>)
 80062de:	4a0c      	ldr	r2, [pc, #48]	@ (8006310 <global_stdio_init.part.0+0x38>)
 80062e0:	4620      	mov	r0, r4
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	2104      	movs	r1, #4
 80062e6:	2200      	movs	r2, #0
 80062e8:	f7ff ff94 	bl	8006214 <std>
 80062ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062f0:	2201      	movs	r2, #1
 80062f2:	2109      	movs	r1, #9
 80062f4:	f7ff ff8e 	bl	8006214 <std>
 80062f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062fc:	2202      	movs	r2, #2
 80062fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006302:	2112      	movs	r1, #18
 8006304:	f7ff bf86 	b.w	8006214 <std>
 8006308:	20001100 	.word	0x20001100
 800630c:	20000fc8 	.word	0x20000fc8
 8006310:	08006281 	.word	0x08006281

08006314 <__sfp_lock_acquire>:
 8006314:	4801      	ldr	r0, [pc, #4]	@ (800631c <__sfp_lock_acquire+0x8>)
 8006316:	f000 ba4c 	b.w	80067b2 <__retarget_lock_acquire_recursive>
 800631a:	bf00      	nop
 800631c:	20001109 	.word	0x20001109

08006320 <__sfp_lock_release>:
 8006320:	4801      	ldr	r0, [pc, #4]	@ (8006328 <__sfp_lock_release+0x8>)
 8006322:	f000 ba47 	b.w	80067b4 <__retarget_lock_release_recursive>
 8006326:	bf00      	nop
 8006328:	20001109 	.word	0x20001109

0800632c <__sinit>:
 800632c:	b510      	push	{r4, lr}
 800632e:	4604      	mov	r4, r0
 8006330:	f7ff fff0 	bl	8006314 <__sfp_lock_acquire>
 8006334:	6a23      	ldr	r3, [r4, #32]
 8006336:	b11b      	cbz	r3, 8006340 <__sinit+0x14>
 8006338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800633c:	f7ff bff0 	b.w	8006320 <__sfp_lock_release>
 8006340:	4b04      	ldr	r3, [pc, #16]	@ (8006354 <__sinit+0x28>)
 8006342:	6223      	str	r3, [r4, #32]
 8006344:	4b04      	ldr	r3, [pc, #16]	@ (8006358 <__sinit+0x2c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f5      	bne.n	8006338 <__sinit+0xc>
 800634c:	f7ff ffc4 	bl	80062d8 <global_stdio_init.part.0>
 8006350:	e7f2      	b.n	8006338 <__sinit+0xc>
 8006352:	bf00      	nop
 8006354:	08006299 	.word	0x08006299
 8006358:	20001100 	.word	0x20001100

0800635c <_fwalk_sglue>:
 800635c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006360:	4607      	mov	r7, r0
 8006362:	4688      	mov	r8, r1
 8006364:	4614      	mov	r4, r2
 8006366:	2600      	movs	r6, #0
 8006368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800636c:	f1b9 0901 	subs.w	r9, r9, #1
 8006370:	d505      	bpl.n	800637e <_fwalk_sglue+0x22>
 8006372:	6824      	ldr	r4, [r4, #0]
 8006374:	2c00      	cmp	r4, #0
 8006376:	d1f7      	bne.n	8006368 <_fwalk_sglue+0xc>
 8006378:	4630      	mov	r0, r6
 800637a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800637e:	89ab      	ldrh	r3, [r5, #12]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d907      	bls.n	8006394 <_fwalk_sglue+0x38>
 8006384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006388:	3301      	adds	r3, #1
 800638a:	d003      	beq.n	8006394 <_fwalk_sglue+0x38>
 800638c:	4629      	mov	r1, r5
 800638e:	4638      	mov	r0, r7
 8006390:	47c0      	blx	r8
 8006392:	4306      	orrs	r6, r0
 8006394:	3568      	adds	r5, #104	@ 0x68
 8006396:	e7e9      	b.n	800636c <_fwalk_sglue+0x10>

08006398 <iprintf>:
 8006398:	b40f      	push	{r0, r1, r2, r3}
 800639a:	b507      	push	{r0, r1, r2, lr}
 800639c:	4906      	ldr	r1, [pc, #24]	@ (80063b8 <iprintf+0x20>)
 800639e:	ab04      	add	r3, sp, #16
 80063a0:	6808      	ldr	r0, [r1, #0]
 80063a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a6:	6881      	ldr	r1, [r0, #8]
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	f001 fe6f 	bl	800808c <_vfiprintf_r>
 80063ae:	b003      	add	sp, #12
 80063b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b4:	b004      	add	sp, #16
 80063b6:	4770      	bx	lr
 80063b8:	200001e0 	.word	0x200001e0

080063bc <_puts_r>:
 80063bc:	6a03      	ldr	r3, [r0, #32]
 80063be:	b570      	push	{r4, r5, r6, lr}
 80063c0:	4605      	mov	r5, r0
 80063c2:	460e      	mov	r6, r1
 80063c4:	6884      	ldr	r4, [r0, #8]
 80063c6:	b90b      	cbnz	r3, 80063cc <_puts_r+0x10>
 80063c8:	f7ff ffb0 	bl	800632c <__sinit>
 80063cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063ce:	07db      	lsls	r3, r3, #31
 80063d0:	d405      	bmi.n	80063de <_puts_r+0x22>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	0598      	lsls	r0, r3, #22
 80063d6:	d402      	bmi.n	80063de <_puts_r+0x22>
 80063d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063da:	f000 f9ea 	bl	80067b2 <__retarget_lock_acquire_recursive>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	0719      	lsls	r1, r3, #28
 80063e2:	d502      	bpl.n	80063ea <_puts_r+0x2e>
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d135      	bne.n	8006456 <_puts_r+0x9a>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4628      	mov	r0, r5
 80063ee:	f000 f8f9 	bl	80065e4 <__swsetup_r>
 80063f2:	b380      	cbz	r0, 8006456 <_puts_r+0x9a>
 80063f4:	f04f 35ff 	mov.w	r5, #4294967295
 80063f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063fa:	07da      	lsls	r2, r3, #31
 80063fc:	d405      	bmi.n	800640a <_puts_r+0x4e>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	059b      	lsls	r3, r3, #22
 8006402:	d402      	bmi.n	800640a <_puts_r+0x4e>
 8006404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006406:	f000 f9d5 	bl	80067b4 <__retarget_lock_release_recursive>
 800640a:	4628      	mov	r0, r5
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	2b00      	cmp	r3, #0
 8006410:	da04      	bge.n	800641c <_puts_r+0x60>
 8006412:	69a2      	ldr	r2, [r4, #24]
 8006414:	429a      	cmp	r2, r3
 8006416:	dc17      	bgt.n	8006448 <_puts_r+0x8c>
 8006418:	290a      	cmp	r1, #10
 800641a:	d015      	beq.n	8006448 <_puts_r+0x8c>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	6022      	str	r2, [r4, #0]
 8006422:	7019      	strb	r1, [r3, #0]
 8006424:	68a3      	ldr	r3, [r4, #8]
 8006426:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800642a:	3b01      	subs	r3, #1
 800642c:	60a3      	str	r3, [r4, #8]
 800642e:	2900      	cmp	r1, #0
 8006430:	d1ed      	bne.n	800640e <_puts_r+0x52>
 8006432:	2b00      	cmp	r3, #0
 8006434:	da11      	bge.n	800645a <_puts_r+0x9e>
 8006436:	4622      	mov	r2, r4
 8006438:	210a      	movs	r1, #10
 800643a:	4628      	mov	r0, r5
 800643c:	f000 f893 	bl	8006566 <__swbuf_r>
 8006440:	3001      	adds	r0, #1
 8006442:	d0d7      	beq.n	80063f4 <_puts_r+0x38>
 8006444:	250a      	movs	r5, #10
 8006446:	e7d7      	b.n	80063f8 <_puts_r+0x3c>
 8006448:	4622      	mov	r2, r4
 800644a:	4628      	mov	r0, r5
 800644c:	f000 f88b 	bl	8006566 <__swbuf_r>
 8006450:	3001      	adds	r0, #1
 8006452:	d1e7      	bne.n	8006424 <_puts_r+0x68>
 8006454:	e7ce      	b.n	80063f4 <_puts_r+0x38>
 8006456:	3e01      	subs	r6, #1
 8006458:	e7e4      	b.n	8006424 <_puts_r+0x68>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	6022      	str	r2, [r4, #0]
 8006460:	220a      	movs	r2, #10
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	e7ee      	b.n	8006444 <_puts_r+0x88>
	...

08006468 <puts>:
 8006468:	4b02      	ldr	r3, [pc, #8]	@ (8006474 <puts+0xc>)
 800646a:	4601      	mov	r1, r0
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	f7ff bfa5 	b.w	80063bc <_puts_r>
 8006472:	bf00      	nop
 8006474:	200001e0 	.word	0x200001e0

08006478 <sniprintf>:
 8006478:	b40c      	push	{r2, r3}
 800647a:	b530      	push	{r4, r5, lr}
 800647c:	4b17      	ldr	r3, [pc, #92]	@ (80064dc <sniprintf+0x64>)
 800647e:	1e0c      	subs	r4, r1, #0
 8006480:	681d      	ldr	r5, [r3, #0]
 8006482:	b09d      	sub	sp, #116	@ 0x74
 8006484:	da08      	bge.n	8006498 <sniprintf+0x20>
 8006486:	238b      	movs	r3, #139	@ 0x8b
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	b01d      	add	sp, #116	@ 0x74
 8006490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006494:	b002      	add	sp, #8
 8006496:	4770      	bx	lr
 8006498:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800649c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80064a0:	bf0c      	ite	eq
 80064a2:	4623      	moveq	r3, r4
 80064a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	9307      	str	r3, [sp, #28]
 80064ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064b0:	9002      	str	r0, [sp, #8]
 80064b2:	9006      	str	r0, [sp, #24]
 80064b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064b8:	4628      	mov	r0, r5
 80064ba:	ab21      	add	r3, sp, #132	@ 0x84
 80064bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80064be:	a902      	add	r1, sp, #8
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	f001 fcbf 	bl	8007e44 <_svfiprintf_r>
 80064c6:	1c43      	adds	r3, r0, #1
 80064c8:	bfbc      	itt	lt
 80064ca:	238b      	movlt	r3, #139	@ 0x8b
 80064cc:	602b      	strlt	r3, [r5, #0]
 80064ce:	2c00      	cmp	r4, #0
 80064d0:	d0dd      	beq.n	800648e <sniprintf+0x16>
 80064d2:	2200      	movs	r2, #0
 80064d4:	9b02      	ldr	r3, [sp, #8]
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e7d9      	b.n	800648e <sniprintf+0x16>
 80064da:	bf00      	nop
 80064dc:	200001e0 	.word	0x200001e0

080064e0 <__sread>:
 80064e0:	b510      	push	{r4, lr}
 80064e2:	460c      	mov	r4, r1
 80064e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e8:	f000 f914 	bl	8006714 <_read_r>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	bfab      	itete	ge
 80064f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064f2:	89a3      	ldrhlt	r3, [r4, #12]
 80064f4:	181b      	addge	r3, r3, r0
 80064f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064fa:	bfac      	ite	ge
 80064fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064fe:	81a3      	strhlt	r3, [r4, #12]
 8006500:	bd10      	pop	{r4, pc}

08006502 <__swrite>:
 8006502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	461f      	mov	r7, r3
 8006508:	898b      	ldrh	r3, [r1, #12]
 800650a:	4605      	mov	r5, r0
 800650c:	05db      	lsls	r3, r3, #23
 800650e:	460c      	mov	r4, r1
 8006510:	4616      	mov	r6, r2
 8006512:	d505      	bpl.n	8006520 <__swrite+0x1e>
 8006514:	2302      	movs	r3, #2
 8006516:	2200      	movs	r2, #0
 8006518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651c:	f000 f8e8 	bl	80066f0 <_lseek_r>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	4632      	mov	r2, r6
 8006524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	4628      	mov	r0, r5
 800652c:	463b      	mov	r3, r7
 800652e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006536:	f000 b8ff 	b.w	8006738 <_write_r>

0800653a <__sseek>:
 800653a:	b510      	push	{r4, lr}
 800653c:	460c      	mov	r4, r1
 800653e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006542:	f000 f8d5 	bl	80066f0 <_lseek_r>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	bf15      	itete	ne
 800654c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800654e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006552:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006556:	81a3      	strheq	r3, [r4, #12]
 8006558:	bf18      	it	ne
 800655a:	81a3      	strhne	r3, [r4, #12]
 800655c:	bd10      	pop	{r4, pc}

0800655e <__sclose>:
 800655e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006562:	f000 b8b5 	b.w	80066d0 <_close_r>

08006566 <__swbuf_r>:
 8006566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006568:	460e      	mov	r6, r1
 800656a:	4614      	mov	r4, r2
 800656c:	4605      	mov	r5, r0
 800656e:	b118      	cbz	r0, 8006578 <__swbuf_r+0x12>
 8006570:	6a03      	ldr	r3, [r0, #32]
 8006572:	b90b      	cbnz	r3, 8006578 <__swbuf_r+0x12>
 8006574:	f7ff feda 	bl	800632c <__sinit>
 8006578:	69a3      	ldr	r3, [r4, #24]
 800657a:	60a3      	str	r3, [r4, #8]
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	071a      	lsls	r2, r3, #28
 8006580:	d501      	bpl.n	8006586 <__swbuf_r+0x20>
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	b943      	cbnz	r3, 8006598 <__swbuf_r+0x32>
 8006586:	4621      	mov	r1, r4
 8006588:	4628      	mov	r0, r5
 800658a:	f000 f82b 	bl	80065e4 <__swsetup_r>
 800658e:	b118      	cbz	r0, 8006598 <__swbuf_r+0x32>
 8006590:	f04f 37ff 	mov.w	r7, #4294967295
 8006594:	4638      	mov	r0, r7
 8006596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	6922      	ldr	r2, [r4, #16]
 800659c:	b2f6      	uxtb	r6, r6
 800659e:	1a98      	subs	r0, r3, r2
 80065a0:	6963      	ldr	r3, [r4, #20]
 80065a2:	4637      	mov	r7, r6
 80065a4:	4283      	cmp	r3, r0
 80065a6:	dc05      	bgt.n	80065b4 <__swbuf_r+0x4e>
 80065a8:	4621      	mov	r1, r4
 80065aa:	4628      	mov	r0, r5
 80065ac:	f001 ff06 	bl	80083bc <_fflush_r>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d1ed      	bne.n	8006590 <__swbuf_r+0x2a>
 80065b4:	68a3      	ldr	r3, [r4, #8]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	6022      	str	r2, [r4, #0]
 80065c0:	701e      	strb	r6, [r3, #0]
 80065c2:	6962      	ldr	r2, [r4, #20]
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d004      	beq.n	80065d4 <__swbuf_r+0x6e>
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	07db      	lsls	r3, r3, #31
 80065ce:	d5e1      	bpl.n	8006594 <__swbuf_r+0x2e>
 80065d0:	2e0a      	cmp	r6, #10
 80065d2:	d1df      	bne.n	8006594 <__swbuf_r+0x2e>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f001 fef0 	bl	80083bc <_fflush_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d0d9      	beq.n	8006594 <__swbuf_r+0x2e>
 80065e0:	e7d6      	b.n	8006590 <__swbuf_r+0x2a>
	...

080065e4 <__swsetup_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4b29      	ldr	r3, [pc, #164]	@ (800668c <__swsetup_r+0xa8>)
 80065e8:	4605      	mov	r5, r0
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	460c      	mov	r4, r1
 80065ee:	b118      	cbz	r0, 80065f8 <__swsetup_r+0x14>
 80065f0:	6a03      	ldr	r3, [r0, #32]
 80065f2:	b90b      	cbnz	r3, 80065f8 <__swsetup_r+0x14>
 80065f4:	f7ff fe9a 	bl	800632c <__sinit>
 80065f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fc:	0719      	lsls	r1, r3, #28
 80065fe:	d422      	bmi.n	8006646 <__swsetup_r+0x62>
 8006600:	06da      	lsls	r2, r3, #27
 8006602:	d407      	bmi.n	8006614 <__swsetup_r+0x30>
 8006604:	2209      	movs	r2, #9
 8006606:	602a      	str	r2, [r5, #0]
 8006608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	81a3      	strh	r3, [r4, #12]
 8006612:	e033      	b.n	800667c <__swsetup_r+0x98>
 8006614:	0758      	lsls	r0, r3, #29
 8006616:	d512      	bpl.n	800663e <__swsetup_r+0x5a>
 8006618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800661a:	b141      	cbz	r1, 800662e <__swsetup_r+0x4a>
 800661c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006620:	4299      	cmp	r1, r3
 8006622:	d002      	beq.n	800662a <__swsetup_r+0x46>
 8006624:	4628      	mov	r0, r5
 8006626:	f000 ff33 	bl	8007490 <_free_r>
 800662a:	2300      	movs	r3, #0
 800662c:	6363      	str	r3, [r4, #52]	@ 0x34
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006634:	81a3      	strh	r3, [r4, #12]
 8006636:	2300      	movs	r3, #0
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	f043 0308 	orr.w	r3, r3, #8
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	6923      	ldr	r3, [r4, #16]
 8006648:	b94b      	cbnz	r3, 800665e <__swsetup_r+0x7a>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006654:	d003      	beq.n	800665e <__swsetup_r+0x7a>
 8006656:	4621      	mov	r1, r4
 8006658:	4628      	mov	r0, r5
 800665a:	f001 fefc 	bl	8008456 <__smakebuf_r>
 800665e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006662:	f013 0201 	ands.w	r2, r3, #1
 8006666:	d00a      	beq.n	800667e <__swsetup_r+0x9a>
 8006668:	2200      	movs	r2, #0
 800666a:	60a2      	str	r2, [r4, #8]
 800666c:	6962      	ldr	r2, [r4, #20]
 800666e:	4252      	negs	r2, r2
 8006670:	61a2      	str	r2, [r4, #24]
 8006672:	6922      	ldr	r2, [r4, #16]
 8006674:	b942      	cbnz	r2, 8006688 <__swsetup_r+0xa4>
 8006676:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800667a:	d1c5      	bne.n	8006608 <__swsetup_r+0x24>
 800667c:	bd38      	pop	{r3, r4, r5, pc}
 800667e:	0799      	lsls	r1, r3, #30
 8006680:	bf58      	it	pl
 8006682:	6962      	ldrpl	r2, [r4, #20]
 8006684:	60a2      	str	r2, [r4, #8]
 8006686:	e7f4      	b.n	8006672 <__swsetup_r+0x8e>
 8006688:	2000      	movs	r0, #0
 800668a:	e7f7      	b.n	800667c <__swsetup_r+0x98>
 800668c:	200001e0 	.word	0x200001e0

08006690 <memset>:
 8006690:	4603      	mov	r3, r0
 8006692:	4402      	add	r2, r0
 8006694:	4293      	cmp	r3, r2
 8006696:	d100      	bne.n	800669a <memset+0xa>
 8006698:	4770      	bx	lr
 800669a:	f803 1b01 	strb.w	r1, [r3], #1
 800669e:	e7f9      	b.n	8006694 <memset+0x4>

080066a0 <strncpy>:
 80066a0:	4603      	mov	r3, r0
 80066a2:	b510      	push	{r4, lr}
 80066a4:	3901      	subs	r1, #1
 80066a6:	b132      	cbz	r2, 80066b6 <strncpy+0x16>
 80066a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066ac:	3a01      	subs	r2, #1
 80066ae:	f803 4b01 	strb.w	r4, [r3], #1
 80066b2:	2c00      	cmp	r4, #0
 80066b4:	d1f7      	bne.n	80066a6 <strncpy+0x6>
 80066b6:	2100      	movs	r1, #0
 80066b8:	441a      	add	r2, r3
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d100      	bne.n	80066c0 <strncpy+0x20>
 80066be:	bd10      	pop	{r4, pc}
 80066c0:	f803 1b01 	strb.w	r1, [r3], #1
 80066c4:	e7f9      	b.n	80066ba <strncpy+0x1a>
	...

080066c8 <_localeconv_r>:
 80066c8:	4800      	ldr	r0, [pc, #0]	@ (80066cc <_localeconv_r+0x4>)
 80066ca:	4770      	bx	lr
 80066cc:	20000320 	.word	0x20000320

080066d0 <_close_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	2300      	movs	r3, #0
 80066d4:	4d05      	ldr	r5, [pc, #20]	@ (80066ec <_close_r+0x1c>)
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	f7fc f995 	bl	8002a0a <_close>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_close_r+0x1a>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_close_r+0x1a>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	20001104 	.word	0x20001104

080066f0 <_lseek_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	2200      	movs	r2, #0
 80066fa:	4d05      	ldr	r5, [pc, #20]	@ (8006710 <_lseek_r+0x20>)
 80066fc:	602a      	str	r2, [r5, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7fc f9a7 	bl	8002a52 <_lseek>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_lseek_r+0x1e>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_lseek_r+0x1e>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20001104 	.word	0x20001104

08006714 <_read_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4604      	mov	r4, r0
 8006718:	4608      	mov	r0, r1
 800671a:	4611      	mov	r1, r2
 800671c:	2200      	movs	r2, #0
 800671e:	4d05      	ldr	r5, [pc, #20]	@ (8006734 <_read_r+0x20>)
 8006720:	602a      	str	r2, [r5, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	f7fc f954 	bl	80029d0 <_read>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_read_r+0x1e>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_read_r+0x1e>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	20001104 	.word	0x20001104

08006738 <_write_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	2200      	movs	r2, #0
 8006742:	4d05      	ldr	r5, [pc, #20]	@ (8006758 <_write_r+0x20>)
 8006744:	602a      	str	r2, [r5, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	f7fa fd08 	bl	800115c <_write>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d102      	bne.n	8006756 <_write_r+0x1e>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	b103      	cbz	r3, 8006756 <_write_r+0x1e>
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	bd38      	pop	{r3, r4, r5, pc}
 8006758:	20001104 	.word	0x20001104

0800675c <__errno>:
 800675c:	4b01      	ldr	r3, [pc, #4]	@ (8006764 <__errno+0x8>)
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	200001e0 	.word	0x200001e0

08006768 <__libc_init_array>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	2600      	movs	r6, #0
 800676c:	4d0c      	ldr	r5, [pc, #48]	@ (80067a0 <__libc_init_array+0x38>)
 800676e:	4c0d      	ldr	r4, [pc, #52]	@ (80067a4 <__libc_init_array+0x3c>)
 8006770:	1b64      	subs	r4, r4, r5
 8006772:	10a4      	asrs	r4, r4, #2
 8006774:	42a6      	cmp	r6, r4
 8006776:	d109      	bne.n	800678c <__libc_init_array+0x24>
 8006778:	f002 fa00 	bl	8008b7c <_init>
 800677c:	2600      	movs	r6, #0
 800677e:	4d0a      	ldr	r5, [pc, #40]	@ (80067a8 <__libc_init_array+0x40>)
 8006780:	4c0a      	ldr	r4, [pc, #40]	@ (80067ac <__libc_init_array+0x44>)
 8006782:	1b64      	subs	r4, r4, r5
 8006784:	10a4      	asrs	r4, r4, #2
 8006786:	42a6      	cmp	r6, r4
 8006788:	d105      	bne.n	8006796 <__libc_init_array+0x2e>
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006790:	4798      	blx	r3
 8006792:	3601      	adds	r6, #1
 8006794:	e7ee      	b.n	8006774 <__libc_init_array+0xc>
 8006796:	f855 3b04 	ldr.w	r3, [r5], #4
 800679a:	4798      	blx	r3
 800679c:	3601      	adds	r6, #1
 800679e:	e7f2      	b.n	8006786 <__libc_init_array+0x1e>
 80067a0:	080097f8 	.word	0x080097f8
 80067a4:	080097f8 	.word	0x080097f8
 80067a8:	080097f8 	.word	0x080097f8
 80067ac:	080097fc 	.word	0x080097fc

080067b0 <__retarget_lock_init_recursive>:
 80067b0:	4770      	bx	lr

080067b2 <__retarget_lock_acquire_recursive>:
 80067b2:	4770      	bx	lr

080067b4 <__retarget_lock_release_recursive>:
 80067b4:	4770      	bx	lr

080067b6 <memchr>:
 80067b6:	4603      	mov	r3, r0
 80067b8:	b510      	push	{r4, lr}
 80067ba:	b2c9      	uxtb	r1, r1
 80067bc:	4402      	add	r2, r0
 80067be:	4293      	cmp	r3, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	d101      	bne.n	80067c8 <memchr+0x12>
 80067c4:	2000      	movs	r0, #0
 80067c6:	e003      	b.n	80067d0 <memchr+0x1a>
 80067c8:	7804      	ldrb	r4, [r0, #0]
 80067ca:	3301      	adds	r3, #1
 80067cc:	428c      	cmp	r4, r1
 80067ce:	d1f6      	bne.n	80067be <memchr+0x8>
 80067d0:	bd10      	pop	{r4, pc}

080067d2 <memcpy>:
 80067d2:	440a      	add	r2, r1
 80067d4:	4291      	cmp	r1, r2
 80067d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80067da:	d100      	bne.n	80067de <memcpy+0xc>
 80067dc:	4770      	bx	lr
 80067de:	b510      	push	{r4, lr}
 80067e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067e4:	4291      	cmp	r1, r2
 80067e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ea:	d1f9      	bne.n	80067e0 <memcpy+0xe>
 80067ec:	bd10      	pop	{r4, pc}

080067ee <quorem>:
 80067ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f2:	6903      	ldr	r3, [r0, #16]
 80067f4:	690c      	ldr	r4, [r1, #16]
 80067f6:	4607      	mov	r7, r0
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	db7e      	blt.n	80068fa <quorem+0x10c>
 80067fc:	3c01      	subs	r4, #1
 80067fe:	00a3      	lsls	r3, r4, #2
 8006800:	f100 0514 	add.w	r5, r0, #20
 8006804:	f101 0814 	add.w	r8, r1, #20
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006814:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006818:	3301      	adds	r3, #1
 800681a:	429a      	cmp	r2, r3
 800681c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006820:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006824:	d32e      	bcc.n	8006884 <quorem+0x96>
 8006826:	f04f 0a00 	mov.w	sl, #0
 800682a:	46c4      	mov	ip, r8
 800682c:	46ae      	mov	lr, r5
 800682e:	46d3      	mov	fp, sl
 8006830:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006834:	b298      	uxth	r0, r3
 8006836:	fb06 a000 	mla	r0, r6, r0, sl
 800683a:	0c1b      	lsrs	r3, r3, #16
 800683c:	0c02      	lsrs	r2, r0, #16
 800683e:	fb06 2303 	mla	r3, r6, r3, r2
 8006842:	f8de 2000 	ldr.w	r2, [lr]
 8006846:	b280      	uxth	r0, r0
 8006848:	b292      	uxth	r2, r2
 800684a:	1a12      	subs	r2, r2, r0
 800684c:	445a      	add	r2, fp
 800684e:	f8de 0000 	ldr.w	r0, [lr]
 8006852:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006856:	b29b      	uxth	r3, r3
 8006858:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800685c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006860:	b292      	uxth	r2, r2
 8006862:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006866:	45e1      	cmp	r9, ip
 8006868:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800686c:	f84e 2b04 	str.w	r2, [lr], #4
 8006870:	d2de      	bcs.n	8006830 <quorem+0x42>
 8006872:	9b00      	ldr	r3, [sp, #0]
 8006874:	58eb      	ldr	r3, [r5, r3]
 8006876:	b92b      	cbnz	r3, 8006884 <quorem+0x96>
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	3b04      	subs	r3, #4
 800687c:	429d      	cmp	r5, r3
 800687e:	461a      	mov	r2, r3
 8006880:	d32f      	bcc.n	80068e2 <quorem+0xf4>
 8006882:	613c      	str	r4, [r7, #16]
 8006884:	4638      	mov	r0, r7
 8006886:	f001 f979 	bl	8007b7c <__mcmp>
 800688a:	2800      	cmp	r0, #0
 800688c:	db25      	blt.n	80068da <quorem+0xec>
 800688e:	4629      	mov	r1, r5
 8006890:	2000      	movs	r0, #0
 8006892:	f858 2b04 	ldr.w	r2, [r8], #4
 8006896:	f8d1 c000 	ldr.w	ip, [r1]
 800689a:	fa1f fe82 	uxth.w	lr, r2
 800689e:	fa1f f38c 	uxth.w	r3, ip
 80068a2:	eba3 030e 	sub.w	r3, r3, lr
 80068a6:	4403      	add	r3, r0
 80068a8:	0c12      	lsrs	r2, r2, #16
 80068aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b8:	45c1      	cmp	r9, r8
 80068ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068be:	f841 3b04 	str.w	r3, [r1], #4
 80068c2:	d2e6      	bcs.n	8006892 <quorem+0xa4>
 80068c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068cc:	b922      	cbnz	r2, 80068d8 <quorem+0xea>
 80068ce:	3b04      	subs	r3, #4
 80068d0:	429d      	cmp	r5, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	d30b      	bcc.n	80068ee <quorem+0x100>
 80068d6:	613c      	str	r4, [r7, #16]
 80068d8:	3601      	adds	r6, #1
 80068da:	4630      	mov	r0, r6
 80068dc:	b003      	add	sp, #12
 80068de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	3b04      	subs	r3, #4
 80068e6:	2a00      	cmp	r2, #0
 80068e8:	d1cb      	bne.n	8006882 <quorem+0x94>
 80068ea:	3c01      	subs	r4, #1
 80068ec:	e7c6      	b.n	800687c <quorem+0x8e>
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d1ef      	bne.n	80068d6 <quorem+0xe8>
 80068f6:	3c01      	subs	r4, #1
 80068f8:	e7ea      	b.n	80068d0 <quorem+0xe2>
 80068fa:	2000      	movs	r0, #0
 80068fc:	e7ee      	b.n	80068dc <quorem+0xee>
	...

08006900 <_dtoa_r>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	4614      	mov	r4, r2
 8006906:	461d      	mov	r5, r3
 8006908:	69c7      	ldr	r7, [r0, #28]
 800690a:	b097      	sub	sp, #92	@ 0x5c
 800690c:	4683      	mov	fp, r0
 800690e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006912:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006914:	b97f      	cbnz	r7, 8006936 <_dtoa_r+0x36>
 8006916:	2010      	movs	r0, #16
 8006918:	f000 fe02 	bl	8007520 <malloc>
 800691c:	4602      	mov	r2, r0
 800691e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006922:	b920      	cbnz	r0, 800692e <_dtoa_r+0x2e>
 8006924:	21ef      	movs	r1, #239	@ 0xef
 8006926:	4ba8      	ldr	r3, [pc, #672]	@ (8006bc8 <_dtoa_r+0x2c8>)
 8006928:	48a8      	ldr	r0, [pc, #672]	@ (8006bcc <_dtoa_r+0x2cc>)
 800692a:	f001 fe1d 	bl	8008568 <__assert_func>
 800692e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006932:	6007      	str	r7, [r0, #0]
 8006934:	60c7      	str	r7, [r0, #12]
 8006936:	f8db 301c 	ldr.w	r3, [fp, #28]
 800693a:	6819      	ldr	r1, [r3, #0]
 800693c:	b159      	cbz	r1, 8006956 <_dtoa_r+0x56>
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	2301      	movs	r3, #1
 8006942:	4093      	lsls	r3, r2
 8006944:	604a      	str	r2, [r1, #4]
 8006946:	608b      	str	r3, [r1, #8]
 8006948:	4658      	mov	r0, fp
 800694a:	f000 fedf 	bl	800770c <_Bfree>
 800694e:	2200      	movs	r2, #0
 8006950:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	1e2b      	subs	r3, r5, #0
 8006958:	bfaf      	iteee	ge
 800695a:	2300      	movge	r3, #0
 800695c:	2201      	movlt	r2, #1
 800695e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006962:	9303      	strlt	r3, [sp, #12]
 8006964:	bfa8      	it	ge
 8006966:	6033      	strge	r3, [r6, #0]
 8006968:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800696c:	4b98      	ldr	r3, [pc, #608]	@ (8006bd0 <_dtoa_r+0x2d0>)
 800696e:	bfb8      	it	lt
 8006970:	6032      	strlt	r2, [r6, #0]
 8006972:	ea33 0308 	bics.w	r3, r3, r8
 8006976:	d112      	bne.n	800699e <_dtoa_r+0x9e>
 8006978:	f242 730f 	movw	r3, #9999	@ 0x270f
 800697c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006984:	4323      	orrs	r3, r4
 8006986:	f000 8550 	beq.w	800742a <_dtoa_r+0xb2a>
 800698a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800698c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006bd4 <_dtoa_r+0x2d4>
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8552 	beq.w	800743a <_dtoa_r+0xb3a>
 8006996:	f10a 0303 	add.w	r3, sl, #3
 800699a:	f000 bd4c 	b.w	8007436 <_dtoa_r+0xb36>
 800699e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80069a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069aa:	2200      	movs	r2, #0
 80069ac:	2300      	movs	r3, #0
 80069ae:	f7fa f805 	bl	80009bc <__aeabi_dcmpeq>
 80069b2:	4607      	mov	r7, r0
 80069b4:	b158      	cbz	r0, 80069ce <_dtoa_r+0xce>
 80069b6:	2301      	movs	r3, #1
 80069b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069be:	b113      	cbz	r3, 80069c6 <_dtoa_r+0xc6>
 80069c0:	4b85      	ldr	r3, [pc, #532]	@ (8006bd8 <_dtoa_r+0x2d8>)
 80069c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006bdc <_dtoa_r+0x2dc>
 80069ca:	f000 bd36 	b.w	800743a <_dtoa_r+0xb3a>
 80069ce:	ab14      	add	r3, sp, #80	@ 0x50
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	ab15      	add	r3, sp, #84	@ 0x54
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	4658      	mov	r0, fp
 80069d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80069dc:	f001 f97e 	bl	8007cdc <__d2b>
 80069e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80069e4:	4681      	mov	r9, r0
 80069e6:	2e00      	cmp	r6, #0
 80069e8:	d077      	beq.n	8006ada <_dtoa_r+0x1da>
 80069ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a00:	9712      	str	r7, [sp, #72]	@ 0x48
 8006a02:	4619      	mov	r1, r3
 8006a04:	2200      	movs	r2, #0
 8006a06:	4b76      	ldr	r3, [pc, #472]	@ (8006be0 <_dtoa_r+0x2e0>)
 8006a08:	f7f9 fbb8 	bl	800017c <__aeabi_dsub>
 8006a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8006bb0 <_dtoa_r+0x2b0>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fd6b 	bl	80004ec <__aeabi_dmul>
 8006a16:	a368      	add	r3, pc, #416	@ (adr r3, 8006bb8 <_dtoa_r+0x2b8>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f7f9 fbb0 	bl	8000180 <__adddf3>
 8006a20:	4604      	mov	r4, r0
 8006a22:	4630      	mov	r0, r6
 8006a24:	460d      	mov	r5, r1
 8006a26:	f7f9 fcf7 	bl	8000418 <__aeabi_i2d>
 8006a2a:	a365      	add	r3, pc, #404	@ (adr r3, 8006bc0 <_dtoa_r+0x2c0>)
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	f7f9 fd5c 	bl	80004ec <__aeabi_dmul>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4620      	mov	r0, r4
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	f7f9 fba0 	bl	8000180 <__adddf3>
 8006a40:	4604      	mov	r4, r0
 8006a42:	460d      	mov	r5, r1
 8006a44:	f7fa f802 	bl	8000a4c <__aeabi_d2iz>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4607      	mov	r7, r0
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	f7f9 ffbd 	bl	80009d0 <__aeabi_dcmplt>
 8006a56:	b140      	cbz	r0, 8006a6a <_dtoa_r+0x16a>
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f7f9 fcdd 	bl	8000418 <__aeabi_i2d>
 8006a5e:	4622      	mov	r2, r4
 8006a60:	462b      	mov	r3, r5
 8006a62:	f7f9 ffab 	bl	80009bc <__aeabi_dcmpeq>
 8006a66:	b900      	cbnz	r0, 8006a6a <_dtoa_r+0x16a>
 8006a68:	3f01      	subs	r7, #1
 8006a6a:	2f16      	cmp	r7, #22
 8006a6c:	d853      	bhi.n	8006b16 <_dtoa_r+0x216>
 8006a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a72:	4b5c      	ldr	r3, [pc, #368]	@ (8006be4 <_dtoa_r+0x2e4>)
 8006a74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f7f9 ffa8 	bl	80009d0 <__aeabi_dcmplt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d04a      	beq.n	8006b1a <_dtoa_r+0x21a>
 8006a84:	2300      	movs	r3, #0
 8006a86:	3f01      	subs	r7, #1
 8006a88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a8c:	1b9b      	subs	r3, r3, r6
 8006a8e:	1e5a      	subs	r2, r3, #1
 8006a90:	bf46      	itte	mi
 8006a92:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a96:	2300      	movmi	r3, #0
 8006a98:	f04f 0800 	movpl.w	r8, #0
 8006a9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a9e:	bf48      	it	mi
 8006aa0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	db3b      	blt.n	8006b1e <_dtoa_r+0x21e>
 8006aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa8:	970e      	str	r7, [sp, #56]	@ 0x38
 8006aaa:	443b      	add	r3, r7
 8006aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aae:	2300      	movs	r3, #0
 8006ab0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ab4:	2b09      	cmp	r3, #9
 8006ab6:	d866      	bhi.n	8006b86 <_dtoa_r+0x286>
 8006ab8:	2b05      	cmp	r3, #5
 8006aba:	bfc4      	itt	gt
 8006abc:	3b04      	subgt	r3, #4
 8006abe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006ac0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ac2:	bfc8      	it	gt
 8006ac4:	2400      	movgt	r4, #0
 8006ac6:	f1a3 0302 	sub.w	r3, r3, #2
 8006aca:	bfd8      	it	le
 8006acc:	2401      	movle	r4, #1
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d864      	bhi.n	8006b9c <_dtoa_r+0x29c>
 8006ad2:	e8df f003 	tbb	[pc, r3]
 8006ad6:	382b      	.short	0x382b
 8006ad8:	5636      	.short	0x5636
 8006ada:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006ade:	441e      	add	r6, r3
 8006ae0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	bfc1      	itttt	gt
 8006ae8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006aec:	fa08 f803 	lslgt.w	r8, r8, r3
 8006af0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006af4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006af8:	bfd6      	itet	le
 8006afa:	f1c3 0320 	rsble	r3, r3, #32
 8006afe:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b02:	fa04 f003 	lslle.w	r0, r4, r3
 8006b06:	f7f9 fc77 	bl	80003f8 <__aeabi_ui2d>
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b10:	3e01      	subs	r6, #1
 8006b12:	9212      	str	r2, [sp, #72]	@ 0x48
 8006b14:	e775      	b.n	8006a02 <_dtoa_r+0x102>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e7b6      	b.n	8006a88 <_dtoa_r+0x188>
 8006b1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006b1c:	e7b5      	b.n	8006a8a <_dtoa_r+0x18a>
 8006b1e:	427b      	negs	r3, r7
 8006b20:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b22:	2300      	movs	r3, #0
 8006b24:	eba8 0807 	sub.w	r8, r8, r7
 8006b28:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b2a:	e7c2      	b.n	8006ab2 <_dtoa_r+0x1b2>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	dc35      	bgt.n	8006ba2 <_dtoa_r+0x2a2>
 8006b36:	2301      	movs	r3, #1
 8006b38:	461a      	mov	r2, r3
 8006b3a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b3e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006b40:	e00b      	b.n	8006b5a <_dtoa_r+0x25a>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e7f3      	b.n	8006b2e <_dtoa_r+0x22e>
 8006b46:	2300      	movs	r3, #0
 8006b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	9308      	str	r3, [sp, #32]
 8006b50:	3301      	adds	r3, #1
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	9307      	str	r3, [sp, #28]
 8006b56:	bfb8      	it	lt
 8006b58:	2301      	movlt	r3, #1
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b62:	f102 0514 	add.w	r5, r2, #20
 8006b66:	429d      	cmp	r5, r3
 8006b68:	d91f      	bls.n	8006baa <_dtoa_r+0x2aa>
 8006b6a:	6041      	str	r1, [r0, #4]
 8006b6c:	4658      	mov	r0, fp
 8006b6e:	f000 fd8d 	bl	800768c <_Balloc>
 8006b72:	4682      	mov	sl, r0
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d139      	bne.n	8006bec <_dtoa_r+0x2ec>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <_dtoa_r+0x2e8>)
 8006b80:	e6d2      	b.n	8006928 <_dtoa_r+0x28>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e7e0      	b.n	8006b48 <_dtoa_r+0x248>
 8006b86:	2401      	movs	r4, #1
 8006b88:	2300      	movs	r3, #0
 8006b8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b8c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	2200      	movs	r2, #0
 8006b94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b98:	2312      	movs	r3, #18
 8006b9a:	e7d0      	b.n	8006b3e <_dtoa_r+0x23e>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ba0:	e7f5      	b.n	8006b8e <_dtoa_r+0x28e>
 8006ba2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ba4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ba8:	e7d7      	b.n	8006b5a <_dtoa_r+0x25a>
 8006baa:	3101      	adds	r1, #1
 8006bac:	0052      	lsls	r2, r2, #1
 8006bae:	e7d8      	b.n	8006b62 <_dtoa_r+0x262>
 8006bb0:	636f4361 	.word	0x636f4361
 8006bb4:	3fd287a7 	.word	0x3fd287a7
 8006bb8:	8b60c8b3 	.word	0x8b60c8b3
 8006bbc:	3fc68a28 	.word	0x3fc68a28
 8006bc0:	509f79fb 	.word	0x509f79fb
 8006bc4:	3fd34413 	.word	0x3fd34413
 8006bc8:	08009487 	.word	0x08009487
 8006bcc:	0800949e 	.word	0x0800949e
 8006bd0:	7ff00000 	.word	0x7ff00000
 8006bd4:	08009483 	.word	0x08009483
 8006bd8:	08009457 	.word	0x08009457
 8006bdc:	08009456 	.word	0x08009456
 8006be0:	3ff80000 	.word	0x3ff80000
 8006be4:	08009598 	.word	0x08009598
 8006be8:	080094f6 	.word	0x080094f6
 8006bec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bf0:	6018      	str	r0, [r3, #0]
 8006bf2:	9b07      	ldr	r3, [sp, #28]
 8006bf4:	2b0e      	cmp	r3, #14
 8006bf6:	f200 80a4 	bhi.w	8006d42 <_dtoa_r+0x442>
 8006bfa:	2c00      	cmp	r4, #0
 8006bfc:	f000 80a1 	beq.w	8006d42 <_dtoa_r+0x442>
 8006c00:	2f00      	cmp	r7, #0
 8006c02:	dd33      	ble.n	8006c6c <_dtoa_r+0x36c>
 8006c04:	4b86      	ldr	r3, [pc, #536]	@ (8006e20 <_dtoa_r+0x520>)
 8006c06:	f007 020f 	and.w	r2, r7, #15
 8006c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c0e:	05f8      	lsls	r0, r7, #23
 8006c10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c1c:	d516      	bpl.n	8006c4c <_dtoa_r+0x34c>
 8006c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c22:	4b80      	ldr	r3, [pc, #512]	@ (8006e24 <_dtoa_r+0x524>)
 8006c24:	2603      	movs	r6, #3
 8006c26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c2a:	f7f9 fd89 	bl	8000740 <__aeabi_ddiv>
 8006c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c32:	f004 040f 	and.w	r4, r4, #15
 8006c36:	4d7b      	ldr	r5, [pc, #492]	@ (8006e24 <_dtoa_r+0x524>)
 8006c38:	b954      	cbnz	r4, 8006c50 <_dtoa_r+0x350>
 8006c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c42:	f7f9 fd7d 	bl	8000740 <__aeabi_ddiv>
 8006c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c4a:	e028      	b.n	8006c9e <_dtoa_r+0x39e>
 8006c4c:	2602      	movs	r6, #2
 8006c4e:	e7f2      	b.n	8006c36 <_dtoa_r+0x336>
 8006c50:	07e1      	lsls	r1, r4, #31
 8006c52:	d508      	bpl.n	8006c66 <_dtoa_r+0x366>
 8006c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c5c:	f7f9 fc46 	bl	80004ec <__aeabi_dmul>
 8006c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c64:	3601      	adds	r6, #1
 8006c66:	1064      	asrs	r4, r4, #1
 8006c68:	3508      	adds	r5, #8
 8006c6a:	e7e5      	b.n	8006c38 <_dtoa_r+0x338>
 8006c6c:	f000 80d2 	beq.w	8006e14 <_dtoa_r+0x514>
 8006c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c74:	427c      	negs	r4, r7
 8006c76:	4b6a      	ldr	r3, [pc, #424]	@ (8006e20 <_dtoa_r+0x520>)
 8006c78:	f004 020f 	and.w	r2, r4, #15
 8006c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 fc32 	bl	80004ec <__aeabi_dmul>
 8006c88:	2602      	movs	r6, #2
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c90:	4d64      	ldr	r5, [pc, #400]	@ (8006e24 <_dtoa_r+0x524>)
 8006c92:	1124      	asrs	r4, r4, #4
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	f040 80b2 	bne.w	8006dfe <_dtoa_r+0x4fe>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1d3      	bne.n	8006c46 <_dtoa_r+0x346>
 8006c9e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80b7 	beq.w	8006e18 <_dtoa_r+0x518>
 8006caa:	2200      	movs	r2, #0
 8006cac:	4620      	mov	r0, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8006e28 <_dtoa_r+0x528>)
 8006cb2:	f7f9 fe8d 	bl	80009d0 <__aeabi_dcmplt>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f000 80ae 	beq.w	8006e18 <_dtoa_r+0x518>
 8006cbc:	9b07      	ldr	r3, [sp, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 80aa 	beq.w	8006e18 <_dtoa_r+0x518>
 8006cc4:	9b08      	ldr	r3, [sp, #32]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dd37      	ble.n	8006d3a <_dtoa_r+0x43a>
 8006cca:	1e7b      	subs	r3, r7, #1
 8006ccc:	4620      	mov	r0, r4
 8006cce:	9304      	str	r3, [sp, #16]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4b55      	ldr	r3, [pc, #340]	@ (8006e2c <_dtoa_r+0x52c>)
 8006cd6:	f7f9 fc09 	bl	80004ec <__aeabi_dmul>
 8006cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cde:	9c08      	ldr	r4, [sp, #32]
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7f9 fb98 	bl	8000418 <__aeabi_i2d>
 8006ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cec:	f7f9 fbfe 	bl	80004ec <__aeabi_dmul>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8006e30 <_dtoa_r+0x530>)
 8006cf4:	f7f9 fa44 	bl	8000180 <__adddf3>
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	f040 809a 	bne.w	8006e38 <_dtoa_r+0x538>
 8006d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8006e34 <_dtoa_r+0x534>)
 8006d0c:	f7f9 fa36 	bl	800017c <__aeabi_dsub>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d18:	462a      	mov	r2, r5
 8006d1a:	4633      	mov	r3, r6
 8006d1c:	f7f9 fe76 	bl	8000a0c <__aeabi_dcmpgt>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	f040 828e 	bne.w	8007242 <_dtoa_r+0x942>
 8006d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d30:	f7f9 fe4e 	bl	80009d0 <__aeabi_dcmplt>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f040 8127 	bne.w	8006f88 <_dtoa_r+0x688>
 8006d3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f2c0 8163 	blt.w	8007010 <_dtoa_r+0x710>
 8006d4a:	2f0e      	cmp	r7, #14
 8006d4c:	f300 8160 	bgt.w	8007010 <_dtoa_r+0x710>
 8006d50:	4b33      	ldr	r3, [pc, #204]	@ (8006e20 <_dtoa_r+0x520>)
 8006d52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	da03      	bge.n	8006d6c <_dtoa_r+0x46c>
 8006d64:	9b07      	ldr	r3, [sp, #28]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f340 8100 	ble.w	8006f6c <_dtoa_r+0x66c>
 8006d6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d70:	4656      	mov	r6, sl
 8006d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d76:	4620      	mov	r0, r4
 8006d78:	4629      	mov	r1, r5
 8006d7a:	f7f9 fce1 	bl	8000740 <__aeabi_ddiv>
 8006d7e:	f7f9 fe65 	bl	8000a4c <__aeabi_d2iz>
 8006d82:	4680      	mov	r8, r0
 8006d84:	f7f9 fb48 	bl	8000418 <__aeabi_i2d>
 8006d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8c:	f7f9 fbae 	bl	80004ec <__aeabi_dmul>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 f9f0 	bl	800017c <__aeabi_dsub>
 8006d9c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006da0:	9d07      	ldr	r5, [sp, #28]
 8006da2:	f806 4b01 	strb.w	r4, [r6], #1
 8006da6:	eba6 040a 	sub.w	r4, r6, sl
 8006daa:	42a5      	cmp	r5, r4
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	f040 8116 	bne.w	8006fe0 <_dtoa_r+0x6e0>
 8006db4:	f7f9 f9e4 	bl	8000180 <__adddf3>
 8006db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	460d      	mov	r5, r1
 8006dc0:	f7f9 fe24 	bl	8000a0c <__aeabi_dcmpgt>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	f040 80f8 	bne.w	8006fba <_dtoa_r+0x6ba>
 8006dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	f7f9 fdf3 	bl	80009bc <__aeabi_dcmpeq>
 8006dd6:	b118      	cbz	r0, 8006de0 <_dtoa_r+0x4e0>
 8006dd8:	f018 0f01 	tst.w	r8, #1
 8006ddc:	f040 80ed 	bne.w	8006fba <_dtoa_r+0x6ba>
 8006de0:	4649      	mov	r1, r9
 8006de2:	4658      	mov	r0, fp
 8006de4:	f000 fc92 	bl	800770c <_Bfree>
 8006de8:	2300      	movs	r3, #0
 8006dea:	7033      	strb	r3, [r6, #0]
 8006dec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dee:	3701      	adds	r7, #1
 8006df0:	601f      	str	r7, [r3, #0]
 8006df2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8320 	beq.w	800743a <_dtoa_r+0xb3a>
 8006dfa:	601e      	str	r6, [r3, #0]
 8006dfc:	e31d      	b.n	800743a <_dtoa_r+0xb3a>
 8006dfe:	07e2      	lsls	r2, r4, #31
 8006e00:	d505      	bpl.n	8006e0e <_dtoa_r+0x50e>
 8006e02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e06:	f7f9 fb71 	bl	80004ec <__aeabi_dmul>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	3601      	adds	r6, #1
 8006e0e:	1064      	asrs	r4, r4, #1
 8006e10:	3508      	adds	r5, #8
 8006e12:	e73f      	b.n	8006c94 <_dtoa_r+0x394>
 8006e14:	2602      	movs	r6, #2
 8006e16:	e742      	b.n	8006c9e <_dtoa_r+0x39e>
 8006e18:	9c07      	ldr	r4, [sp, #28]
 8006e1a:	9704      	str	r7, [sp, #16]
 8006e1c:	e761      	b.n	8006ce2 <_dtoa_r+0x3e2>
 8006e1e:	bf00      	nop
 8006e20:	08009598 	.word	0x08009598
 8006e24:	08009570 	.word	0x08009570
 8006e28:	3ff00000 	.word	0x3ff00000
 8006e2c:	40240000 	.word	0x40240000
 8006e30:	401c0000 	.word	0x401c0000
 8006e34:	40140000 	.word	0x40140000
 8006e38:	4b70      	ldr	r3, [pc, #448]	@ (8006ffc <_dtoa_r+0x6fc>)
 8006e3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e44:	4454      	add	r4, sl
 8006e46:	2900      	cmp	r1, #0
 8006e48:	d045      	beq.n	8006ed6 <_dtoa_r+0x5d6>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	496c      	ldr	r1, [pc, #432]	@ (8007000 <_dtoa_r+0x700>)
 8006e4e:	f7f9 fc77 	bl	8000740 <__aeabi_ddiv>
 8006e52:	4633      	mov	r3, r6
 8006e54:	462a      	mov	r2, r5
 8006e56:	f7f9 f991 	bl	800017c <__aeabi_dsub>
 8006e5a:	4656      	mov	r6, sl
 8006e5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e64:	f7f9 fdf2 	bl	8000a4c <__aeabi_d2iz>
 8006e68:	4605      	mov	r5, r0
 8006e6a:	f7f9 fad5 	bl	8000418 <__aeabi_i2d>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e76:	f7f9 f981 	bl	800017c <__aeabi_dsub>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	3530      	adds	r5, #48	@ 0x30
 8006e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e88:	f806 5b01 	strb.w	r5, [r6], #1
 8006e8c:	f7f9 fda0 	bl	80009d0 <__aeabi_dcmplt>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d163      	bne.n	8006f5c <_dtoa_r+0x65c>
 8006e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e98:	2000      	movs	r0, #0
 8006e9a:	495a      	ldr	r1, [pc, #360]	@ (8007004 <_dtoa_r+0x704>)
 8006e9c:	f7f9 f96e 	bl	800017c <__aeabi_dsub>
 8006ea0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ea4:	f7f9 fd94 	bl	80009d0 <__aeabi_dcmplt>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f040 8087 	bne.w	8006fbc <_dtoa_r+0x6bc>
 8006eae:	42a6      	cmp	r6, r4
 8006eb0:	f43f af43 	beq.w	8006d3a <_dtoa_r+0x43a>
 8006eb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4b53      	ldr	r3, [pc, #332]	@ (8007008 <_dtoa_r+0x708>)
 8006ebc:	f7f9 fb16 	bl	80004ec <__aeabi_dmul>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eca:	4b4f      	ldr	r3, [pc, #316]	@ (8007008 <_dtoa_r+0x708>)
 8006ecc:	f7f9 fb0e 	bl	80004ec <__aeabi_dmul>
 8006ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed4:	e7c4      	b.n	8006e60 <_dtoa_r+0x560>
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f7f9 fb07 	bl	80004ec <__aeabi_dmul>
 8006ede:	4656      	mov	r6, sl
 8006ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ee4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eea:	f7f9 fdaf 	bl	8000a4c <__aeabi_d2iz>
 8006eee:	4605      	mov	r5, r0
 8006ef0:	f7f9 fa92 	bl	8000418 <__aeabi_i2d>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006efc:	f7f9 f93e 	bl	800017c <__aeabi_dsub>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	3530      	adds	r5, #48	@ 0x30
 8006f06:	f806 5b01 	strb.w	r5, [r6], #1
 8006f0a:	42a6      	cmp	r6, r4
 8006f0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	d124      	bne.n	8006f60 <_dtoa_r+0x660>
 8006f16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f1a:	4b39      	ldr	r3, [pc, #228]	@ (8007000 <_dtoa_r+0x700>)
 8006f1c:	f7f9 f930 	bl	8000180 <__adddf3>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f28:	f7f9 fd70 	bl	8000a0c <__aeabi_dcmpgt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d145      	bne.n	8006fbc <_dtoa_r+0x6bc>
 8006f30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f34:	2000      	movs	r0, #0
 8006f36:	4932      	ldr	r1, [pc, #200]	@ (8007000 <_dtoa_r+0x700>)
 8006f38:	f7f9 f920 	bl	800017c <__aeabi_dsub>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f44:	f7f9 fd44 	bl	80009d0 <__aeabi_dcmplt>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	f43f aef6 	beq.w	8006d3a <_dtoa_r+0x43a>
 8006f4e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f50:	1e73      	subs	r3, r6, #1
 8006f52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f58:	2b30      	cmp	r3, #48	@ 0x30
 8006f5a:	d0f8      	beq.n	8006f4e <_dtoa_r+0x64e>
 8006f5c:	9f04      	ldr	r7, [sp, #16]
 8006f5e:	e73f      	b.n	8006de0 <_dtoa_r+0x4e0>
 8006f60:	4b29      	ldr	r3, [pc, #164]	@ (8007008 <_dtoa_r+0x708>)
 8006f62:	f7f9 fac3 	bl	80004ec <__aeabi_dmul>
 8006f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f6a:	e7bc      	b.n	8006ee6 <_dtoa_r+0x5e6>
 8006f6c:	d10c      	bne.n	8006f88 <_dtoa_r+0x688>
 8006f6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f72:	2200      	movs	r2, #0
 8006f74:	4b25      	ldr	r3, [pc, #148]	@ (800700c <_dtoa_r+0x70c>)
 8006f76:	f7f9 fab9 	bl	80004ec <__aeabi_dmul>
 8006f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f7e:	f7f9 fd3b 	bl	80009f8 <__aeabi_dcmpge>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f000 815b 	beq.w	800723e <_dtoa_r+0x93e>
 8006f88:	2400      	movs	r4, #0
 8006f8a:	4625      	mov	r5, r4
 8006f8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f8e:	4656      	mov	r6, sl
 8006f90:	43db      	mvns	r3, r3
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	2700      	movs	r7, #0
 8006f96:	4621      	mov	r1, r4
 8006f98:	4658      	mov	r0, fp
 8006f9a:	f000 fbb7 	bl	800770c <_Bfree>
 8006f9e:	2d00      	cmp	r5, #0
 8006fa0:	d0dc      	beq.n	8006f5c <_dtoa_r+0x65c>
 8006fa2:	b12f      	cbz	r7, 8006fb0 <_dtoa_r+0x6b0>
 8006fa4:	42af      	cmp	r7, r5
 8006fa6:	d003      	beq.n	8006fb0 <_dtoa_r+0x6b0>
 8006fa8:	4639      	mov	r1, r7
 8006faa:	4658      	mov	r0, fp
 8006fac:	f000 fbae 	bl	800770c <_Bfree>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4658      	mov	r0, fp
 8006fb4:	f000 fbaa 	bl	800770c <_Bfree>
 8006fb8:	e7d0      	b.n	8006f5c <_dtoa_r+0x65c>
 8006fba:	9704      	str	r7, [sp, #16]
 8006fbc:	4633      	mov	r3, r6
 8006fbe:	461e      	mov	r6, r3
 8006fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fc4:	2a39      	cmp	r2, #57	@ 0x39
 8006fc6:	d107      	bne.n	8006fd8 <_dtoa_r+0x6d8>
 8006fc8:	459a      	cmp	sl, r3
 8006fca:	d1f8      	bne.n	8006fbe <_dtoa_r+0x6be>
 8006fcc:	9a04      	ldr	r2, [sp, #16]
 8006fce:	3201      	adds	r2, #1
 8006fd0:	9204      	str	r2, [sp, #16]
 8006fd2:	2230      	movs	r2, #48	@ 0x30
 8006fd4:	f88a 2000 	strb.w	r2, [sl]
 8006fd8:	781a      	ldrb	r2, [r3, #0]
 8006fda:	3201      	adds	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e7bd      	b.n	8006f5c <_dtoa_r+0x65c>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4b09      	ldr	r3, [pc, #36]	@ (8007008 <_dtoa_r+0x708>)
 8006fe4:	f7f9 fa82 	bl	80004ec <__aeabi_dmul>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	4604      	mov	r4, r0
 8006fee:	460d      	mov	r5, r1
 8006ff0:	f7f9 fce4 	bl	80009bc <__aeabi_dcmpeq>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	f43f aebc 	beq.w	8006d72 <_dtoa_r+0x472>
 8006ffa:	e6f1      	b.n	8006de0 <_dtoa_r+0x4e0>
 8006ffc:	08009598 	.word	0x08009598
 8007000:	3fe00000 	.word	0x3fe00000
 8007004:	3ff00000 	.word	0x3ff00000
 8007008:	40240000 	.word	0x40240000
 800700c:	40140000 	.word	0x40140000
 8007010:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007012:	2a00      	cmp	r2, #0
 8007014:	f000 80db 	beq.w	80071ce <_dtoa_r+0x8ce>
 8007018:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800701a:	2a01      	cmp	r2, #1
 800701c:	f300 80bf 	bgt.w	800719e <_dtoa_r+0x89e>
 8007020:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007022:	2a00      	cmp	r2, #0
 8007024:	f000 80b7 	beq.w	8007196 <_dtoa_r+0x896>
 8007028:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800702c:	4646      	mov	r6, r8
 800702e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007030:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007032:	2101      	movs	r1, #1
 8007034:	441a      	add	r2, r3
 8007036:	4658      	mov	r0, fp
 8007038:	4498      	add	r8, r3
 800703a:	9209      	str	r2, [sp, #36]	@ 0x24
 800703c:	f000 fc1a 	bl	8007874 <__i2b>
 8007040:	4605      	mov	r5, r0
 8007042:	b15e      	cbz	r6, 800705c <_dtoa_r+0x75c>
 8007044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	dd08      	ble.n	800705c <_dtoa_r+0x75c>
 800704a:	42b3      	cmp	r3, r6
 800704c:	bfa8      	it	ge
 800704e:	4633      	movge	r3, r6
 8007050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007052:	eba8 0803 	sub.w	r8, r8, r3
 8007056:	1af6      	subs	r6, r6, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	9309      	str	r3, [sp, #36]	@ 0x24
 800705c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800705e:	b1f3      	cbz	r3, 800709e <_dtoa_r+0x79e>
 8007060:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80b7 	beq.w	80071d6 <_dtoa_r+0x8d6>
 8007068:	b18c      	cbz	r4, 800708e <_dtoa_r+0x78e>
 800706a:	4629      	mov	r1, r5
 800706c:	4622      	mov	r2, r4
 800706e:	4658      	mov	r0, fp
 8007070:	f000 fcbe 	bl	80079f0 <__pow5mult>
 8007074:	464a      	mov	r2, r9
 8007076:	4601      	mov	r1, r0
 8007078:	4605      	mov	r5, r0
 800707a:	4658      	mov	r0, fp
 800707c:	f000 fc10 	bl	80078a0 <__multiply>
 8007080:	4649      	mov	r1, r9
 8007082:	9004      	str	r0, [sp, #16]
 8007084:	4658      	mov	r0, fp
 8007086:	f000 fb41 	bl	800770c <_Bfree>
 800708a:	9b04      	ldr	r3, [sp, #16]
 800708c:	4699      	mov	r9, r3
 800708e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007090:	1b1a      	subs	r2, r3, r4
 8007092:	d004      	beq.n	800709e <_dtoa_r+0x79e>
 8007094:	4649      	mov	r1, r9
 8007096:	4658      	mov	r0, fp
 8007098:	f000 fcaa 	bl	80079f0 <__pow5mult>
 800709c:	4681      	mov	r9, r0
 800709e:	2101      	movs	r1, #1
 80070a0:	4658      	mov	r0, fp
 80070a2:	f000 fbe7 	bl	8007874 <__i2b>
 80070a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a8:	4604      	mov	r4, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 81c9 	beq.w	8007442 <_dtoa_r+0xb42>
 80070b0:	461a      	mov	r2, r3
 80070b2:	4601      	mov	r1, r0
 80070b4:	4658      	mov	r0, fp
 80070b6:	f000 fc9b 	bl	80079f0 <__pow5mult>
 80070ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070bc:	4604      	mov	r4, r0
 80070be:	2b01      	cmp	r3, #1
 80070c0:	f300 808f 	bgt.w	80071e2 <_dtoa_r+0x8e2>
 80070c4:	9b02      	ldr	r3, [sp, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f040 8087 	bne.w	80071da <_dtoa_r+0x8da>
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f040 8083 	bne.w	80071de <_dtoa_r+0x8de>
 80070d8:	9b03      	ldr	r3, [sp, #12]
 80070da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070de:	0d1b      	lsrs	r3, r3, #20
 80070e0:	051b      	lsls	r3, r3, #20
 80070e2:	b12b      	cbz	r3, 80070f0 <_dtoa_r+0x7f0>
 80070e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e6:	f108 0801 	add.w	r8, r8, #1
 80070ea:	3301      	adds	r3, #1
 80070ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80070ee:	2301      	movs	r3, #1
 80070f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80070f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 81aa 	beq.w	800744e <_dtoa_r+0xb4e>
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007100:	6918      	ldr	r0, [r3, #16]
 8007102:	f000 fb6b 	bl	80077dc <__hi0bits>
 8007106:	f1c0 0020 	rsb	r0, r0, #32
 800710a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800710c:	4418      	add	r0, r3
 800710e:	f010 001f 	ands.w	r0, r0, #31
 8007112:	d071      	beq.n	80071f8 <_dtoa_r+0x8f8>
 8007114:	f1c0 0320 	rsb	r3, r0, #32
 8007118:	2b04      	cmp	r3, #4
 800711a:	dd65      	ble.n	80071e8 <_dtoa_r+0x8e8>
 800711c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800711e:	f1c0 001c 	rsb	r0, r0, #28
 8007122:	4403      	add	r3, r0
 8007124:	4480      	add	r8, r0
 8007126:	4406      	add	r6, r0
 8007128:	9309      	str	r3, [sp, #36]	@ 0x24
 800712a:	f1b8 0f00 	cmp.w	r8, #0
 800712e:	dd05      	ble.n	800713c <_dtoa_r+0x83c>
 8007130:	4649      	mov	r1, r9
 8007132:	4642      	mov	r2, r8
 8007134:	4658      	mov	r0, fp
 8007136:	f000 fcb5 	bl	8007aa4 <__lshift>
 800713a:	4681      	mov	r9, r0
 800713c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	dd05      	ble.n	800714e <_dtoa_r+0x84e>
 8007142:	4621      	mov	r1, r4
 8007144:	461a      	mov	r2, r3
 8007146:	4658      	mov	r0, fp
 8007148:	f000 fcac 	bl	8007aa4 <__lshift>
 800714c:	4604      	mov	r4, r0
 800714e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d053      	beq.n	80071fc <_dtoa_r+0x8fc>
 8007154:	4621      	mov	r1, r4
 8007156:	4648      	mov	r0, r9
 8007158:	f000 fd10 	bl	8007b7c <__mcmp>
 800715c:	2800      	cmp	r0, #0
 800715e:	da4d      	bge.n	80071fc <_dtoa_r+0x8fc>
 8007160:	1e7b      	subs	r3, r7, #1
 8007162:	4649      	mov	r1, r9
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	220a      	movs	r2, #10
 8007168:	2300      	movs	r3, #0
 800716a:	4658      	mov	r0, fp
 800716c:	f000 faf0 	bl	8007750 <__multadd>
 8007170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007172:	4681      	mov	r9, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 816c 	beq.w	8007452 <_dtoa_r+0xb52>
 800717a:	2300      	movs	r3, #0
 800717c:	4629      	mov	r1, r5
 800717e:	220a      	movs	r2, #10
 8007180:	4658      	mov	r0, fp
 8007182:	f000 fae5 	bl	8007750 <__multadd>
 8007186:	9b08      	ldr	r3, [sp, #32]
 8007188:	4605      	mov	r5, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	dc61      	bgt.n	8007252 <_dtoa_r+0x952>
 800718e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007190:	2b02      	cmp	r3, #2
 8007192:	dc3b      	bgt.n	800720c <_dtoa_r+0x90c>
 8007194:	e05d      	b.n	8007252 <_dtoa_r+0x952>
 8007196:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007198:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800719c:	e746      	b.n	800702c <_dtoa_r+0x72c>
 800719e:	9b07      	ldr	r3, [sp, #28]
 80071a0:	1e5c      	subs	r4, r3, #1
 80071a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	bfbf      	itttt	lt
 80071a8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80071aa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80071ac:	1ae3      	sublt	r3, r4, r3
 80071ae:	18d2      	addlt	r2, r2, r3
 80071b0:	bfa8      	it	ge
 80071b2:	1b1c      	subge	r4, r3, r4
 80071b4:	9b07      	ldr	r3, [sp, #28]
 80071b6:	bfbe      	ittt	lt
 80071b8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80071ba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80071bc:	2400      	movlt	r4, #0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bfb5      	itete	lt
 80071c2:	eba8 0603 	sublt.w	r6, r8, r3
 80071c6:	4646      	movge	r6, r8
 80071c8:	2300      	movlt	r3, #0
 80071ca:	9b07      	ldrge	r3, [sp, #28]
 80071cc:	e730      	b.n	8007030 <_dtoa_r+0x730>
 80071ce:	4646      	mov	r6, r8
 80071d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071d4:	e735      	b.n	8007042 <_dtoa_r+0x742>
 80071d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071d8:	e75c      	b.n	8007094 <_dtoa_r+0x794>
 80071da:	2300      	movs	r3, #0
 80071dc:	e788      	b.n	80070f0 <_dtoa_r+0x7f0>
 80071de:	9b02      	ldr	r3, [sp, #8]
 80071e0:	e786      	b.n	80070f0 <_dtoa_r+0x7f0>
 80071e2:	2300      	movs	r3, #0
 80071e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80071e6:	e788      	b.n	80070fa <_dtoa_r+0x7fa>
 80071e8:	d09f      	beq.n	800712a <_dtoa_r+0x82a>
 80071ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071ec:	331c      	adds	r3, #28
 80071ee:	441a      	add	r2, r3
 80071f0:	4498      	add	r8, r3
 80071f2:	441e      	add	r6, r3
 80071f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80071f6:	e798      	b.n	800712a <_dtoa_r+0x82a>
 80071f8:	4603      	mov	r3, r0
 80071fa:	e7f6      	b.n	80071ea <_dtoa_r+0x8ea>
 80071fc:	9b07      	ldr	r3, [sp, #28]
 80071fe:	9704      	str	r7, [sp, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	dc20      	bgt.n	8007246 <_dtoa_r+0x946>
 8007204:	9308      	str	r3, [sp, #32]
 8007206:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007208:	2b02      	cmp	r3, #2
 800720a:	dd1e      	ble.n	800724a <_dtoa_r+0x94a>
 800720c:	9b08      	ldr	r3, [sp, #32]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f47f aebc 	bne.w	8006f8c <_dtoa_r+0x68c>
 8007214:	4621      	mov	r1, r4
 8007216:	2205      	movs	r2, #5
 8007218:	4658      	mov	r0, fp
 800721a:	f000 fa99 	bl	8007750 <__multadd>
 800721e:	4601      	mov	r1, r0
 8007220:	4604      	mov	r4, r0
 8007222:	4648      	mov	r0, r9
 8007224:	f000 fcaa 	bl	8007b7c <__mcmp>
 8007228:	2800      	cmp	r0, #0
 800722a:	f77f aeaf 	ble.w	8006f8c <_dtoa_r+0x68c>
 800722e:	2331      	movs	r3, #49	@ 0x31
 8007230:	4656      	mov	r6, sl
 8007232:	f806 3b01 	strb.w	r3, [r6], #1
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	3301      	adds	r3, #1
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	e6aa      	b.n	8006f94 <_dtoa_r+0x694>
 800723e:	9c07      	ldr	r4, [sp, #28]
 8007240:	9704      	str	r7, [sp, #16]
 8007242:	4625      	mov	r5, r4
 8007244:	e7f3      	b.n	800722e <_dtoa_r+0x92e>
 8007246:	9b07      	ldr	r3, [sp, #28]
 8007248:	9308      	str	r3, [sp, #32]
 800724a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8104 	beq.w	800745a <_dtoa_r+0xb5a>
 8007252:	2e00      	cmp	r6, #0
 8007254:	dd05      	ble.n	8007262 <_dtoa_r+0x962>
 8007256:	4629      	mov	r1, r5
 8007258:	4632      	mov	r2, r6
 800725a:	4658      	mov	r0, fp
 800725c:	f000 fc22 	bl	8007aa4 <__lshift>
 8007260:	4605      	mov	r5, r0
 8007262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007264:	2b00      	cmp	r3, #0
 8007266:	d05a      	beq.n	800731e <_dtoa_r+0xa1e>
 8007268:	4658      	mov	r0, fp
 800726a:	6869      	ldr	r1, [r5, #4]
 800726c:	f000 fa0e 	bl	800768c <_Balloc>
 8007270:	4606      	mov	r6, r0
 8007272:	b928      	cbnz	r0, 8007280 <_dtoa_r+0x980>
 8007274:	4602      	mov	r2, r0
 8007276:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800727a:	4b83      	ldr	r3, [pc, #524]	@ (8007488 <_dtoa_r+0xb88>)
 800727c:	f7ff bb54 	b.w	8006928 <_dtoa_r+0x28>
 8007280:	692a      	ldr	r2, [r5, #16]
 8007282:	f105 010c 	add.w	r1, r5, #12
 8007286:	3202      	adds	r2, #2
 8007288:	0092      	lsls	r2, r2, #2
 800728a:	300c      	adds	r0, #12
 800728c:	f7ff faa1 	bl	80067d2 <memcpy>
 8007290:	2201      	movs	r2, #1
 8007292:	4631      	mov	r1, r6
 8007294:	4658      	mov	r0, fp
 8007296:	f000 fc05 	bl	8007aa4 <__lshift>
 800729a:	462f      	mov	r7, r5
 800729c:	4605      	mov	r5, r0
 800729e:	f10a 0301 	add.w	r3, sl, #1
 80072a2:	9307      	str	r3, [sp, #28]
 80072a4:	9b08      	ldr	r3, [sp, #32]
 80072a6:	4453      	add	r3, sl
 80072a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072aa:	9b02      	ldr	r3, [sp, #8]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b2:	9b07      	ldr	r3, [sp, #28]
 80072b4:	4621      	mov	r1, r4
 80072b6:	3b01      	subs	r3, #1
 80072b8:	4648      	mov	r0, r9
 80072ba:	9302      	str	r3, [sp, #8]
 80072bc:	f7ff fa97 	bl	80067ee <quorem>
 80072c0:	4639      	mov	r1, r7
 80072c2:	9008      	str	r0, [sp, #32]
 80072c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072c8:	4648      	mov	r0, r9
 80072ca:	f000 fc57 	bl	8007b7c <__mcmp>
 80072ce:	462a      	mov	r2, r5
 80072d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80072d2:	4621      	mov	r1, r4
 80072d4:	4658      	mov	r0, fp
 80072d6:	f000 fc6d 	bl	8007bb4 <__mdiff>
 80072da:	68c2      	ldr	r2, [r0, #12]
 80072dc:	4606      	mov	r6, r0
 80072de:	bb02      	cbnz	r2, 8007322 <_dtoa_r+0xa22>
 80072e0:	4601      	mov	r1, r0
 80072e2:	4648      	mov	r0, r9
 80072e4:	f000 fc4a 	bl	8007b7c <__mcmp>
 80072e8:	4602      	mov	r2, r0
 80072ea:	4631      	mov	r1, r6
 80072ec:	4658      	mov	r0, fp
 80072ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80072f0:	f000 fa0c 	bl	800770c <_Bfree>
 80072f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072f8:	9e07      	ldr	r6, [sp, #28]
 80072fa:	ea43 0102 	orr.w	r1, r3, r2
 80072fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007300:	4319      	orrs	r1, r3
 8007302:	d110      	bne.n	8007326 <_dtoa_r+0xa26>
 8007304:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007308:	d029      	beq.n	800735e <_dtoa_r+0xa5e>
 800730a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	dd02      	ble.n	8007316 <_dtoa_r+0xa16>
 8007310:	9b08      	ldr	r3, [sp, #32]
 8007312:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007316:	9b02      	ldr	r3, [sp, #8]
 8007318:	f883 8000 	strb.w	r8, [r3]
 800731c:	e63b      	b.n	8006f96 <_dtoa_r+0x696>
 800731e:	4628      	mov	r0, r5
 8007320:	e7bb      	b.n	800729a <_dtoa_r+0x99a>
 8007322:	2201      	movs	r2, #1
 8007324:	e7e1      	b.n	80072ea <_dtoa_r+0x9ea>
 8007326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	db04      	blt.n	8007336 <_dtoa_r+0xa36>
 800732c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800732e:	430b      	orrs	r3, r1
 8007330:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007332:	430b      	orrs	r3, r1
 8007334:	d120      	bne.n	8007378 <_dtoa_r+0xa78>
 8007336:	2a00      	cmp	r2, #0
 8007338:	dded      	ble.n	8007316 <_dtoa_r+0xa16>
 800733a:	4649      	mov	r1, r9
 800733c:	2201      	movs	r2, #1
 800733e:	4658      	mov	r0, fp
 8007340:	f000 fbb0 	bl	8007aa4 <__lshift>
 8007344:	4621      	mov	r1, r4
 8007346:	4681      	mov	r9, r0
 8007348:	f000 fc18 	bl	8007b7c <__mcmp>
 800734c:	2800      	cmp	r0, #0
 800734e:	dc03      	bgt.n	8007358 <_dtoa_r+0xa58>
 8007350:	d1e1      	bne.n	8007316 <_dtoa_r+0xa16>
 8007352:	f018 0f01 	tst.w	r8, #1
 8007356:	d0de      	beq.n	8007316 <_dtoa_r+0xa16>
 8007358:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800735c:	d1d8      	bne.n	8007310 <_dtoa_r+0xa10>
 800735e:	2339      	movs	r3, #57	@ 0x39
 8007360:	9a02      	ldr	r2, [sp, #8]
 8007362:	7013      	strb	r3, [r2, #0]
 8007364:	4633      	mov	r3, r6
 8007366:	461e      	mov	r6, r3
 8007368:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800736c:	3b01      	subs	r3, #1
 800736e:	2a39      	cmp	r2, #57	@ 0x39
 8007370:	d052      	beq.n	8007418 <_dtoa_r+0xb18>
 8007372:	3201      	adds	r2, #1
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	e60e      	b.n	8006f96 <_dtoa_r+0x696>
 8007378:	2a00      	cmp	r2, #0
 800737a:	dd07      	ble.n	800738c <_dtoa_r+0xa8c>
 800737c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007380:	d0ed      	beq.n	800735e <_dtoa_r+0xa5e>
 8007382:	9a02      	ldr	r2, [sp, #8]
 8007384:	f108 0301 	add.w	r3, r8, #1
 8007388:	7013      	strb	r3, [r2, #0]
 800738a:	e604      	b.n	8006f96 <_dtoa_r+0x696>
 800738c:	9b07      	ldr	r3, [sp, #28]
 800738e:	9a07      	ldr	r2, [sp, #28]
 8007390:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007396:	4293      	cmp	r3, r2
 8007398:	d028      	beq.n	80073ec <_dtoa_r+0xaec>
 800739a:	4649      	mov	r1, r9
 800739c:	2300      	movs	r3, #0
 800739e:	220a      	movs	r2, #10
 80073a0:	4658      	mov	r0, fp
 80073a2:	f000 f9d5 	bl	8007750 <__multadd>
 80073a6:	42af      	cmp	r7, r5
 80073a8:	4681      	mov	r9, r0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	f04f 020a 	mov.w	r2, #10
 80073b2:	4639      	mov	r1, r7
 80073b4:	4658      	mov	r0, fp
 80073b6:	d107      	bne.n	80073c8 <_dtoa_r+0xac8>
 80073b8:	f000 f9ca 	bl	8007750 <__multadd>
 80073bc:	4607      	mov	r7, r0
 80073be:	4605      	mov	r5, r0
 80073c0:	9b07      	ldr	r3, [sp, #28]
 80073c2:	3301      	adds	r3, #1
 80073c4:	9307      	str	r3, [sp, #28]
 80073c6:	e774      	b.n	80072b2 <_dtoa_r+0x9b2>
 80073c8:	f000 f9c2 	bl	8007750 <__multadd>
 80073cc:	4629      	mov	r1, r5
 80073ce:	4607      	mov	r7, r0
 80073d0:	2300      	movs	r3, #0
 80073d2:	220a      	movs	r2, #10
 80073d4:	4658      	mov	r0, fp
 80073d6:	f000 f9bb 	bl	8007750 <__multadd>
 80073da:	4605      	mov	r5, r0
 80073dc:	e7f0      	b.n	80073c0 <_dtoa_r+0xac0>
 80073de:	9b08      	ldr	r3, [sp, #32]
 80073e0:	2700      	movs	r7, #0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bfcc      	ite	gt
 80073e6:	461e      	movgt	r6, r3
 80073e8:	2601      	movle	r6, #1
 80073ea:	4456      	add	r6, sl
 80073ec:	4649      	mov	r1, r9
 80073ee:	2201      	movs	r2, #1
 80073f0:	4658      	mov	r0, fp
 80073f2:	f000 fb57 	bl	8007aa4 <__lshift>
 80073f6:	4621      	mov	r1, r4
 80073f8:	4681      	mov	r9, r0
 80073fa:	f000 fbbf 	bl	8007b7c <__mcmp>
 80073fe:	2800      	cmp	r0, #0
 8007400:	dcb0      	bgt.n	8007364 <_dtoa_r+0xa64>
 8007402:	d102      	bne.n	800740a <_dtoa_r+0xb0a>
 8007404:	f018 0f01 	tst.w	r8, #1
 8007408:	d1ac      	bne.n	8007364 <_dtoa_r+0xa64>
 800740a:	4633      	mov	r3, r6
 800740c:	461e      	mov	r6, r3
 800740e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007412:	2a30      	cmp	r2, #48	@ 0x30
 8007414:	d0fa      	beq.n	800740c <_dtoa_r+0xb0c>
 8007416:	e5be      	b.n	8006f96 <_dtoa_r+0x696>
 8007418:	459a      	cmp	sl, r3
 800741a:	d1a4      	bne.n	8007366 <_dtoa_r+0xa66>
 800741c:	9b04      	ldr	r3, [sp, #16]
 800741e:	3301      	adds	r3, #1
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	2331      	movs	r3, #49	@ 0x31
 8007424:	f88a 3000 	strb.w	r3, [sl]
 8007428:	e5b5      	b.n	8006f96 <_dtoa_r+0x696>
 800742a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800742c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800748c <_dtoa_r+0xb8c>
 8007430:	b11b      	cbz	r3, 800743a <_dtoa_r+0xb3a>
 8007432:	f10a 0308 	add.w	r3, sl, #8
 8007436:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	4650      	mov	r0, sl
 800743c:	b017      	add	sp, #92	@ 0x5c
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007444:	2b01      	cmp	r3, #1
 8007446:	f77f ae3d 	ble.w	80070c4 <_dtoa_r+0x7c4>
 800744a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800744c:	930a      	str	r3, [sp, #40]	@ 0x28
 800744e:	2001      	movs	r0, #1
 8007450:	e65b      	b.n	800710a <_dtoa_r+0x80a>
 8007452:	9b08      	ldr	r3, [sp, #32]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f77f aed6 	ble.w	8007206 <_dtoa_r+0x906>
 800745a:	4656      	mov	r6, sl
 800745c:	4621      	mov	r1, r4
 800745e:	4648      	mov	r0, r9
 8007460:	f7ff f9c5 	bl	80067ee <quorem>
 8007464:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007468:	9b08      	ldr	r3, [sp, #32]
 800746a:	f806 8b01 	strb.w	r8, [r6], #1
 800746e:	eba6 020a 	sub.w	r2, r6, sl
 8007472:	4293      	cmp	r3, r2
 8007474:	ddb3      	ble.n	80073de <_dtoa_r+0xade>
 8007476:	4649      	mov	r1, r9
 8007478:	2300      	movs	r3, #0
 800747a:	220a      	movs	r2, #10
 800747c:	4658      	mov	r0, fp
 800747e:	f000 f967 	bl	8007750 <__multadd>
 8007482:	4681      	mov	r9, r0
 8007484:	e7ea      	b.n	800745c <_dtoa_r+0xb5c>
 8007486:	bf00      	nop
 8007488:	080094f6 	.word	0x080094f6
 800748c:	0800947a 	.word	0x0800947a

08007490 <_free_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4605      	mov	r5, r0
 8007494:	2900      	cmp	r1, #0
 8007496:	d040      	beq.n	800751a <_free_r+0x8a>
 8007498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800749c:	1f0c      	subs	r4, r1, #4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bfb8      	it	lt
 80074a2:	18e4      	addlt	r4, r4, r3
 80074a4:	f000 f8e6 	bl	8007674 <__malloc_lock>
 80074a8:	4a1c      	ldr	r2, [pc, #112]	@ (800751c <_free_r+0x8c>)
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	b933      	cbnz	r3, 80074bc <_free_r+0x2c>
 80074ae:	6063      	str	r3, [r4, #4]
 80074b0:	6014      	str	r4, [r2, #0]
 80074b2:	4628      	mov	r0, r5
 80074b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b8:	f000 b8e2 	b.w	8007680 <__malloc_unlock>
 80074bc:	42a3      	cmp	r3, r4
 80074be:	d908      	bls.n	80074d2 <_free_r+0x42>
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	1821      	adds	r1, r4, r0
 80074c4:	428b      	cmp	r3, r1
 80074c6:	bf01      	itttt	eq
 80074c8:	6819      	ldreq	r1, [r3, #0]
 80074ca:	685b      	ldreq	r3, [r3, #4]
 80074cc:	1809      	addeq	r1, r1, r0
 80074ce:	6021      	streq	r1, [r4, #0]
 80074d0:	e7ed      	b.n	80074ae <_free_r+0x1e>
 80074d2:	461a      	mov	r2, r3
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	b10b      	cbz	r3, 80074dc <_free_r+0x4c>
 80074d8:	42a3      	cmp	r3, r4
 80074da:	d9fa      	bls.n	80074d2 <_free_r+0x42>
 80074dc:	6811      	ldr	r1, [r2, #0]
 80074de:	1850      	adds	r0, r2, r1
 80074e0:	42a0      	cmp	r0, r4
 80074e2:	d10b      	bne.n	80074fc <_free_r+0x6c>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	4401      	add	r1, r0
 80074e8:	1850      	adds	r0, r2, r1
 80074ea:	4283      	cmp	r3, r0
 80074ec:	6011      	str	r1, [r2, #0]
 80074ee:	d1e0      	bne.n	80074b2 <_free_r+0x22>
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4408      	add	r0, r1
 80074f6:	6010      	str	r0, [r2, #0]
 80074f8:	6053      	str	r3, [r2, #4]
 80074fa:	e7da      	b.n	80074b2 <_free_r+0x22>
 80074fc:	d902      	bls.n	8007504 <_free_r+0x74>
 80074fe:	230c      	movs	r3, #12
 8007500:	602b      	str	r3, [r5, #0]
 8007502:	e7d6      	b.n	80074b2 <_free_r+0x22>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	1821      	adds	r1, r4, r0
 8007508:	428b      	cmp	r3, r1
 800750a:	bf01      	itttt	eq
 800750c:	6819      	ldreq	r1, [r3, #0]
 800750e:	685b      	ldreq	r3, [r3, #4]
 8007510:	1809      	addeq	r1, r1, r0
 8007512:	6021      	streq	r1, [r4, #0]
 8007514:	6063      	str	r3, [r4, #4]
 8007516:	6054      	str	r4, [r2, #4]
 8007518:	e7cb      	b.n	80074b2 <_free_r+0x22>
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	20001110 	.word	0x20001110

08007520 <malloc>:
 8007520:	4b02      	ldr	r3, [pc, #8]	@ (800752c <malloc+0xc>)
 8007522:	4601      	mov	r1, r0
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	f000 b825 	b.w	8007574 <_malloc_r>
 800752a:	bf00      	nop
 800752c:	200001e0 	.word	0x200001e0

08007530 <sbrk_aligned>:
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	4e0f      	ldr	r6, [pc, #60]	@ (8007570 <sbrk_aligned+0x40>)
 8007534:	460c      	mov	r4, r1
 8007536:	6831      	ldr	r1, [r6, #0]
 8007538:	4605      	mov	r5, r0
 800753a:	b911      	cbnz	r1, 8007542 <sbrk_aligned+0x12>
 800753c:	f001 f804 	bl	8008548 <_sbrk_r>
 8007540:	6030      	str	r0, [r6, #0]
 8007542:	4621      	mov	r1, r4
 8007544:	4628      	mov	r0, r5
 8007546:	f000 ffff 	bl	8008548 <_sbrk_r>
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d103      	bne.n	8007556 <sbrk_aligned+0x26>
 800754e:	f04f 34ff 	mov.w	r4, #4294967295
 8007552:	4620      	mov	r0, r4
 8007554:	bd70      	pop	{r4, r5, r6, pc}
 8007556:	1cc4      	adds	r4, r0, #3
 8007558:	f024 0403 	bic.w	r4, r4, #3
 800755c:	42a0      	cmp	r0, r4
 800755e:	d0f8      	beq.n	8007552 <sbrk_aligned+0x22>
 8007560:	1a21      	subs	r1, r4, r0
 8007562:	4628      	mov	r0, r5
 8007564:	f000 fff0 	bl	8008548 <_sbrk_r>
 8007568:	3001      	adds	r0, #1
 800756a:	d1f2      	bne.n	8007552 <sbrk_aligned+0x22>
 800756c:	e7ef      	b.n	800754e <sbrk_aligned+0x1e>
 800756e:	bf00      	nop
 8007570:	2000110c 	.word	0x2000110c

08007574 <_malloc_r>:
 8007574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007578:	1ccd      	adds	r5, r1, #3
 800757a:	f025 0503 	bic.w	r5, r5, #3
 800757e:	3508      	adds	r5, #8
 8007580:	2d0c      	cmp	r5, #12
 8007582:	bf38      	it	cc
 8007584:	250c      	movcc	r5, #12
 8007586:	2d00      	cmp	r5, #0
 8007588:	4606      	mov	r6, r0
 800758a:	db01      	blt.n	8007590 <_malloc_r+0x1c>
 800758c:	42a9      	cmp	r1, r5
 800758e:	d904      	bls.n	800759a <_malloc_r+0x26>
 8007590:	230c      	movs	r3, #12
 8007592:	6033      	str	r3, [r6, #0]
 8007594:	2000      	movs	r0, #0
 8007596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800759a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007670 <_malloc_r+0xfc>
 800759e:	f000 f869 	bl	8007674 <__malloc_lock>
 80075a2:	f8d8 3000 	ldr.w	r3, [r8]
 80075a6:	461c      	mov	r4, r3
 80075a8:	bb44      	cbnz	r4, 80075fc <_malloc_r+0x88>
 80075aa:	4629      	mov	r1, r5
 80075ac:	4630      	mov	r0, r6
 80075ae:	f7ff ffbf 	bl	8007530 <sbrk_aligned>
 80075b2:	1c43      	adds	r3, r0, #1
 80075b4:	4604      	mov	r4, r0
 80075b6:	d158      	bne.n	800766a <_malloc_r+0xf6>
 80075b8:	f8d8 4000 	ldr.w	r4, [r8]
 80075bc:	4627      	mov	r7, r4
 80075be:	2f00      	cmp	r7, #0
 80075c0:	d143      	bne.n	800764a <_malloc_r+0xd6>
 80075c2:	2c00      	cmp	r4, #0
 80075c4:	d04b      	beq.n	800765e <_malloc_r+0xea>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	4639      	mov	r1, r7
 80075ca:	4630      	mov	r0, r6
 80075cc:	eb04 0903 	add.w	r9, r4, r3
 80075d0:	f000 ffba 	bl	8008548 <_sbrk_r>
 80075d4:	4581      	cmp	r9, r0
 80075d6:	d142      	bne.n	800765e <_malloc_r+0xea>
 80075d8:	6821      	ldr	r1, [r4, #0]
 80075da:	4630      	mov	r0, r6
 80075dc:	1a6d      	subs	r5, r5, r1
 80075de:	4629      	mov	r1, r5
 80075e0:	f7ff ffa6 	bl	8007530 <sbrk_aligned>
 80075e4:	3001      	adds	r0, #1
 80075e6:	d03a      	beq.n	800765e <_malloc_r+0xea>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	442b      	add	r3, r5
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	f8d8 3000 	ldr.w	r3, [r8]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	bb62      	cbnz	r2, 8007650 <_malloc_r+0xdc>
 80075f6:	f8c8 7000 	str.w	r7, [r8]
 80075fa:	e00f      	b.n	800761c <_malloc_r+0xa8>
 80075fc:	6822      	ldr	r2, [r4, #0]
 80075fe:	1b52      	subs	r2, r2, r5
 8007600:	d420      	bmi.n	8007644 <_malloc_r+0xd0>
 8007602:	2a0b      	cmp	r2, #11
 8007604:	d917      	bls.n	8007636 <_malloc_r+0xc2>
 8007606:	1961      	adds	r1, r4, r5
 8007608:	42a3      	cmp	r3, r4
 800760a:	6025      	str	r5, [r4, #0]
 800760c:	bf18      	it	ne
 800760e:	6059      	strne	r1, [r3, #4]
 8007610:	6863      	ldr	r3, [r4, #4]
 8007612:	bf08      	it	eq
 8007614:	f8c8 1000 	streq.w	r1, [r8]
 8007618:	5162      	str	r2, [r4, r5]
 800761a:	604b      	str	r3, [r1, #4]
 800761c:	4630      	mov	r0, r6
 800761e:	f000 f82f 	bl	8007680 <__malloc_unlock>
 8007622:	f104 000b 	add.w	r0, r4, #11
 8007626:	1d23      	adds	r3, r4, #4
 8007628:	f020 0007 	bic.w	r0, r0, #7
 800762c:	1ac2      	subs	r2, r0, r3
 800762e:	bf1c      	itt	ne
 8007630:	1a1b      	subne	r3, r3, r0
 8007632:	50a3      	strne	r3, [r4, r2]
 8007634:	e7af      	b.n	8007596 <_malloc_r+0x22>
 8007636:	6862      	ldr	r2, [r4, #4]
 8007638:	42a3      	cmp	r3, r4
 800763a:	bf0c      	ite	eq
 800763c:	f8c8 2000 	streq.w	r2, [r8]
 8007640:	605a      	strne	r2, [r3, #4]
 8007642:	e7eb      	b.n	800761c <_malloc_r+0xa8>
 8007644:	4623      	mov	r3, r4
 8007646:	6864      	ldr	r4, [r4, #4]
 8007648:	e7ae      	b.n	80075a8 <_malloc_r+0x34>
 800764a:	463c      	mov	r4, r7
 800764c:	687f      	ldr	r7, [r7, #4]
 800764e:	e7b6      	b.n	80075be <_malloc_r+0x4a>
 8007650:	461a      	mov	r2, r3
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	42a3      	cmp	r3, r4
 8007656:	d1fb      	bne.n	8007650 <_malloc_r+0xdc>
 8007658:	2300      	movs	r3, #0
 800765a:	6053      	str	r3, [r2, #4]
 800765c:	e7de      	b.n	800761c <_malloc_r+0xa8>
 800765e:	230c      	movs	r3, #12
 8007660:	4630      	mov	r0, r6
 8007662:	6033      	str	r3, [r6, #0]
 8007664:	f000 f80c 	bl	8007680 <__malloc_unlock>
 8007668:	e794      	b.n	8007594 <_malloc_r+0x20>
 800766a:	6005      	str	r5, [r0, #0]
 800766c:	e7d6      	b.n	800761c <_malloc_r+0xa8>
 800766e:	bf00      	nop
 8007670:	20001110 	.word	0x20001110

08007674 <__malloc_lock>:
 8007674:	4801      	ldr	r0, [pc, #4]	@ (800767c <__malloc_lock+0x8>)
 8007676:	f7ff b89c 	b.w	80067b2 <__retarget_lock_acquire_recursive>
 800767a:	bf00      	nop
 800767c:	20001108 	.word	0x20001108

08007680 <__malloc_unlock>:
 8007680:	4801      	ldr	r0, [pc, #4]	@ (8007688 <__malloc_unlock+0x8>)
 8007682:	f7ff b897 	b.w	80067b4 <__retarget_lock_release_recursive>
 8007686:	bf00      	nop
 8007688:	20001108 	.word	0x20001108

0800768c <_Balloc>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	69c6      	ldr	r6, [r0, #28]
 8007690:	4604      	mov	r4, r0
 8007692:	460d      	mov	r5, r1
 8007694:	b976      	cbnz	r6, 80076b4 <_Balloc+0x28>
 8007696:	2010      	movs	r0, #16
 8007698:	f7ff ff42 	bl	8007520 <malloc>
 800769c:	4602      	mov	r2, r0
 800769e:	61e0      	str	r0, [r4, #28]
 80076a0:	b920      	cbnz	r0, 80076ac <_Balloc+0x20>
 80076a2:	216b      	movs	r1, #107	@ 0x6b
 80076a4:	4b17      	ldr	r3, [pc, #92]	@ (8007704 <_Balloc+0x78>)
 80076a6:	4818      	ldr	r0, [pc, #96]	@ (8007708 <_Balloc+0x7c>)
 80076a8:	f000 ff5e 	bl	8008568 <__assert_func>
 80076ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076b0:	6006      	str	r6, [r0, #0]
 80076b2:	60c6      	str	r6, [r0, #12]
 80076b4:	69e6      	ldr	r6, [r4, #28]
 80076b6:	68f3      	ldr	r3, [r6, #12]
 80076b8:	b183      	cbz	r3, 80076dc <_Balloc+0x50>
 80076ba:	69e3      	ldr	r3, [r4, #28]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076c2:	b9b8      	cbnz	r0, 80076f4 <_Balloc+0x68>
 80076c4:	2101      	movs	r1, #1
 80076c6:	fa01 f605 	lsl.w	r6, r1, r5
 80076ca:	1d72      	adds	r2, r6, #5
 80076cc:	4620      	mov	r0, r4
 80076ce:	0092      	lsls	r2, r2, #2
 80076d0:	f000 ff68 	bl	80085a4 <_calloc_r>
 80076d4:	b160      	cbz	r0, 80076f0 <_Balloc+0x64>
 80076d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076da:	e00e      	b.n	80076fa <_Balloc+0x6e>
 80076dc:	2221      	movs	r2, #33	@ 0x21
 80076de:	2104      	movs	r1, #4
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 ff5f 	bl	80085a4 <_calloc_r>
 80076e6:	69e3      	ldr	r3, [r4, #28]
 80076e8:	60f0      	str	r0, [r6, #12]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e4      	bne.n	80076ba <_Balloc+0x2e>
 80076f0:	2000      	movs	r0, #0
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	6802      	ldr	r2, [r0, #0]
 80076f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076fa:	2300      	movs	r3, #0
 80076fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007700:	e7f7      	b.n	80076f2 <_Balloc+0x66>
 8007702:	bf00      	nop
 8007704:	08009487 	.word	0x08009487
 8007708:	08009507 	.word	0x08009507

0800770c <_Bfree>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	69c6      	ldr	r6, [r0, #28]
 8007710:	4605      	mov	r5, r0
 8007712:	460c      	mov	r4, r1
 8007714:	b976      	cbnz	r6, 8007734 <_Bfree+0x28>
 8007716:	2010      	movs	r0, #16
 8007718:	f7ff ff02 	bl	8007520 <malloc>
 800771c:	4602      	mov	r2, r0
 800771e:	61e8      	str	r0, [r5, #28]
 8007720:	b920      	cbnz	r0, 800772c <_Bfree+0x20>
 8007722:	218f      	movs	r1, #143	@ 0x8f
 8007724:	4b08      	ldr	r3, [pc, #32]	@ (8007748 <_Bfree+0x3c>)
 8007726:	4809      	ldr	r0, [pc, #36]	@ (800774c <_Bfree+0x40>)
 8007728:	f000 ff1e 	bl	8008568 <__assert_func>
 800772c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007730:	6006      	str	r6, [r0, #0]
 8007732:	60c6      	str	r6, [r0, #12]
 8007734:	b13c      	cbz	r4, 8007746 <_Bfree+0x3a>
 8007736:	69eb      	ldr	r3, [r5, #28]
 8007738:	6862      	ldr	r2, [r4, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007740:	6021      	str	r1, [r4, #0]
 8007742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	08009487 	.word	0x08009487
 800774c:	08009507 	.word	0x08009507

08007750 <__multadd>:
 8007750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007754:	4607      	mov	r7, r0
 8007756:	460c      	mov	r4, r1
 8007758:	461e      	mov	r6, r3
 800775a:	2000      	movs	r0, #0
 800775c:	690d      	ldr	r5, [r1, #16]
 800775e:	f101 0c14 	add.w	ip, r1, #20
 8007762:	f8dc 3000 	ldr.w	r3, [ip]
 8007766:	3001      	adds	r0, #1
 8007768:	b299      	uxth	r1, r3
 800776a:	fb02 6101 	mla	r1, r2, r1, r6
 800776e:	0c1e      	lsrs	r6, r3, #16
 8007770:	0c0b      	lsrs	r3, r1, #16
 8007772:	fb02 3306 	mla	r3, r2, r6, r3
 8007776:	b289      	uxth	r1, r1
 8007778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800777c:	4285      	cmp	r5, r0
 800777e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007782:	f84c 1b04 	str.w	r1, [ip], #4
 8007786:	dcec      	bgt.n	8007762 <__multadd+0x12>
 8007788:	b30e      	cbz	r6, 80077ce <__multadd+0x7e>
 800778a:	68a3      	ldr	r3, [r4, #8]
 800778c:	42ab      	cmp	r3, r5
 800778e:	dc19      	bgt.n	80077c4 <__multadd+0x74>
 8007790:	6861      	ldr	r1, [r4, #4]
 8007792:	4638      	mov	r0, r7
 8007794:	3101      	adds	r1, #1
 8007796:	f7ff ff79 	bl	800768c <_Balloc>
 800779a:	4680      	mov	r8, r0
 800779c:	b928      	cbnz	r0, 80077aa <__multadd+0x5a>
 800779e:	4602      	mov	r2, r0
 80077a0:	21ba      	movs	r1, #186	@ 0xba
 80077a2:	4b0c      	ldr	r3, [pc, #48]	@ (80077d4 <__multadd+0x84>)
 80077a4:	480c      	ldr	r0, [pc, #48]	@ (80077d8 <__multadd+0x88>)
 80077a6:	f000 fedf 	bl	8008568 <__assert_func>
 80077aa:	6922      	ldr	r2, [r4, #16]
 80077ac:	f104 010c 	add.w	r1, r4, #12
 80077b0:	3202      	adds	r2, #2
 80077b2:	0092      	lsls	r2, r2, #2
 80077b4:	300c      	adds	r0, #12
 80077b6:	f7ff f80c 	bl	80067d2 <memcpy>
 80077ba:	4621      	mov	r1, r4
 80077bc:	4638      	mov	r0, r7
 80077be:	f7ff ffa5 	bl	800770c <_Bfree>
 80077c2:	4644      	mov	r4, r8
 80077c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077c8:	3501      	adds	r5, #1
 80077ca:	615e      	str	r6, [r3, #20]
 80077cc:	6125      	str	r5, [r4, #16]
 80077ce:	4620      	mov	r0, r4
 80077d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d4:	080094f6 	.word	0x080094f6
 80077d8:	08009507 	.word	0x08009507

080077dc <__hi0bits>:
 80077dc:	4603      	mov	r3, r0
 80077de:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077e2:	bf3a      	itte	cc
 80077e4:	0403      	lslcc	r3, r0, #16
 80077e6:	2010      	movcc	r0, #16
 80077e8:	2000      	movcs	r0, #0
 80077ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077ee:	bf3c      	itt	cc
 80077f0:	021b      	lslcc	r3, r3, #8
 80077f2:	3008      	addcc	r0, #8
 80077f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077f8:	bf3c      	itt	cc
 80077fa:	011b      	lslcc	r3, r3, #4
 80077fc:	3004      	addcc	r0, #4
 80077fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007802:	bf3c      	itt	cc
 8007804:	009b      	lslcc	r3, r3, #2
 8007806:	3002      	addcc	r0, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	db05      	blt.n	8007818 <__hi0bits+0x3c>
 800780c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007810:	f100 0001 	add.w	r0, r0, #1
 8007814:	bf08      	it	eq
 8007816:	2020      	moveq	r0, #32
 8007818:	4770      	bx	lr

0800781a <__lo0bits>:
 800781a:	6803      	ldr	r3, [r0, #0]
 800781c:	4602      	mov	r2, r0
 800781e:	f013 0007 	ands.w	r0, r3, #7
 8007822:	d00b      	beq.n	800783c <__lo0bits+0x22>
 8007824:	07d9      	lsls	r1, r3, #31
 8007826:	d421      	bmi.n	800786c <__lo0bits+0x52>
 8007828:	0798      	lsls	r0, r3, #30
 800782a:	bf49      	itett	mi
 800782c:	085b      	lsrmi	r3, r3, #1
 800782e:	089b      	lsrpl	r3, r3, #2
 8007830:	2001      	movmi	r0, #1
 8007832:	6013      	strmi	r3, [r2, #0]
 8007834:	bf5c      	itt	pl
 8007836:	2002      	movpl	r0, #2
 8007838:	6013      	strpl	r3, [r2, #0]
 800783a:	4770      	bx	lr
 800783c:	b299      	uxth	r1, r3
 800783e:	b909      	cbnz	r1, 8007844 <__lo0bits+0x2a>
 8007840:	2010      	movs	r0, #16
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	b2d9      	uxtb	r1, r3
 8007846:	b909      	cbnz	r1, 800784c <__lo0bits+0x32>
 8007848:	3008      	adds	r0, #8
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	0719      	lsls	r1, r3, #28
 800784e:	bf04      	itt	eq
 8007850:	091b      	lsreq	r3, r3, #4
 8007852:	3004      	addeq	r0, #4
 8007854:	0799      	lsls	r1, r3, #30
 8007856:	bf04      	itt	eq
 8007858:	089b      	lsreq	r3, r3, #2
 800785a:	3002      	addeq	r0, #2
 800785c:	07d9      	lsls	r1, r3, #31
 800785e:	d403      	bmi.n	8007868 <__lo0bits+0x4e>
 8007860:	085b      	lsrs	r3, r3, #1
 8007862:	f100 0001 	add.w	r0, r0, #1
 8007866:	d003      	beq.n	8007870 <__lo0bits+0x56>
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	4770      	bx	lr
 800786c:	2000      	movs	r0, #0
 800786e:	4770      	bx	lr
 8007870:	2020      	movs	r0, #32
 8007872:	4770      	bx	lr

08007874 <__i2b>:
 8007874:	b510      	push	{r4, lr}
 8007876:	460c      	mov	r4, r1
 8007878:	2101      	movs	r1, #1
 800787a:	f7ff ff07 	bl	800768c <_Balloc>
 800787e:	4602      	mov	r2, r0
 8007880:	b928      	cbnz	r0, 800788e <__i2b+0x1a>
 8007882:	f240 1145 	movw	r1, #325	@ 0x145
 8007886:	4b04      	ldr	r3, [pc, #16]	@ (8007898 <__i2b+0x24>)
 8007888:	4804      	ldr	r0, [pc, #16]	@ (800789c <__i2b+0x28>)
 800788a:	f000 fe6d 	bl	8008568 <__assert_func>
 800788e:	2301      	movs	r3, #1
 8007890:	6144      	str	r4, [r0, #20]
 8007892:	6103      	str	r3, [r0, #16]
 8007894:	bd10      	pop	{r4, pc}
 8007896:	bf00      	nop
 8007898:	080094f6 	.word	0x080094f6
 800789c:	08009507 	.word	0x08009507

080078a0 <__multiply>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	4614      	mov	r4, r2
 80078a6:	690a      	ldr	r2, [r1, #16]
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	460f      	mov	r7, r1
 80078ac:	429a      	cmp	r2, r3
 80078ae:	bfa2      	ittt	ge
 80078b0:	4623      	movge	r3, r4
 80078b2:	460c      	movge	r4, r1
 80078b4:	461f      	movge	r7, r3
 80078b6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80078ba:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	6861      	ldr	r1, [r4, #4]
 80078c2:	eb0a 0609 	add.w	r6, sl, r9
 80078c6:	42b3      	cmp	r3, r6
 80078c8:	b085      	sub	sp, #20
 80078ca:	bfb8      	it	lt
 80078cc:	3101      	addlt	r1, #1
 80078ce:	f7ff fedd 	bl	800768c <_Balloc>
 80078d2:	b930      	cbnz	r0, 80078e2 <__multiply+0x42>
 80078d4:	4602      	mov	r2, r0
 80078d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078da:	4b43      	ldr	r3, [pc, #268]	@ (80079e8 <__multiply+0x148>)
 80078dc:	4843      	ldr	r0, [pc, #268]	@ (80079ec <__multiply+0x14c>)
 80078de:	f000 fe43 	bl	8008568 <__assert_func>
 80078e2:	f100 0514 	add.w	r5, r0, #20
 80078e6:	462b      	mov	r3, r5
 80078e8:	2200      	movs	r2, #0
 80078ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078ee:	4543      	cmp	r3, r8
 80078f0:	d321      	bcc.n	8007936 <__multiply+0x96>
 80078f2:	f107 0114 	add.w	r1, r7, #20
 80078f6:	f104 0214 	add.w	r2, r4, #20
 80078fa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80078fe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007902:	9302      	str	r3, [sp, #8]
 8007904:	1b13      	subs	r3, r2, r4
 8007906:	3b15      	subs	r3, #21
 8007908:	f023 0303 	bic.w	r3, r3, #3
 800790c:	3304      	adds	r3, #4
 800790e:	f104 0715 	add.w	r7, r4, #21
 8007912:	42ba      	cmp	r2, r7
 8007914:	bf38      	it	cc
 8007916:	2304      	movcc	r3, #4
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	9b02      	ldr	r3, [sp, #8]
 800791c:	9103      	str	r1, [sp, #12]
 800791e:	428b      	cmp	r3, r1
 8007920:	d80c      	bhi.n	800793c <__multiply+0x9c>
 8007922:	2e00      	cmp	r6, #0
 8007924:	dd03      	ble.n	800792e <__multiply+0x8e>
 8007926:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800792a:	2b00      	cmp	r3, #0
 800792c:	d05a      	beq.n	80079e4 <__multiply+0x144>
 800792e:	6106      	str	r6, [r0, #16]
 8007930:	b005      	add	sp, #20
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007936:	f843 2b04 	str.w	r2, [r3], #4
 800793a:	e7d8      	b.n	80078ee <__multiply+0x4e>
 800793c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007940:	f1ba 0f00 	cmp.w	sl, #0
 8007944:	d023      	beq.n	800798e <__multiply+0xee>
 8007946:	46a9      	mov	r9, r5
 8007948:	f04f 0c00 	mov.w	ip, #0
 800794c:	f104 0e14 	add.w	lr, r4, #20
 8007950:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007954:	f8d9 3000 	ldr.w	r3, [r9]
 8007958:	fa1f fb87 	uxth.w	fp, r7
 800795c:	b29b      	uxth	r3, r3
 800795e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007962:	4463      	add	r3, ip
 8007964:	f8d9 c000 	ldr.w	ip, [r9]
 8007968:	0c3f      	lsrs	r7, r7, #16
 800796a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800796e:	fb0a c707 	mla	r7, sl, r7, ip
 8007972:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007976:	b29b      	uxth	r3, r3
 8007978:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800797c:	4572      	cmp	r2, lr
 800797e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007982:	f849 3b04 	str.w	r3, [r9], #4
 8007986:	d8e3      	bhi.n	8007950 <__multiply+0xb0>
 8007988:	9b01      	ldr	r3, [sp, #4]
 800798a:	f845 c003 	str.w	ip, [r5, r3]
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	3104      	adds	r1, #4
 8007992:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007996:	f1b9 0f00 	cmp.w	r9, #0
 800799a:	d021      	beq.n	80079e0 <__multiply+0x140>
 800799c:	46ae      	mov	lr, r5
 800799e:	f04f 0a00 	mov.w	sl, #0
 80079a2:	682b      	ldr	r3, [r5, #0]
 80079a4:	f104 0c14 	add.w	ip, r4, #20
 80079a8:	f8bc b000 	ldrh.w	fp, [ip]
 80079ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	fb09 770b 	mla	r7, r9, fp, r7
 80079b6:	4457      	add	r7, sl
 80079b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079bc:	f84e 3b04 	str.w	r3, [lr], #4
 80079c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079c8:	f8be 3000 	ldrh.w	r3, [lr]
 80079cc:	4562      	cmp	r2, ip
 80079ce:	fb09 330a 	mla	r3, r9, sl, r3
 80079d2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079da:	d8e5      	bhi.n	80079a8 <__multiply+0x108>
 80079dc:	9f01      	ldr	r7, [sp, #4]
 80079de:	51eb      	str	r3, [r5, r7]
 80079e0:	3504      	adds	r5, #4
 80079e2:	e79a      	b.n	800791a <__multiply+0x7a>
 80079e4:	3e01      	subs	r6, #1
 80079e6:	e79c      	b.n	8007922 <__multiply+0x82>
 80079e8:	080094f6 	.word	0x080094f6
 80079ec:	08009507 	.word	0x08009507

080079f0 <__pow5mult>:
 80079f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f4:	4615      	mov	r5, r2
 80079f6:	f012 0203 	ands.w	r2, r2, #3
 80079fa:	4607      	mov	r7, r0
 80079fc:	460e      	mov	r6, r1
 80079fe:	d007      	beq.n	8007a10 <__pow5mult+0x20>
 8007a00:	4c25      	ldr	r4, [pc, #148]	@ (8007a98 <__pow5mult+0xa8>)
 8007a02:	3a01      	subs	r2, #1
 8007a04:	2300      	movs	r3, #0
 8007a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a0a:	f7ff fea1 	bl	8007750 <__multadd>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	10ad      	asrs	r5, r5, #2
 8007a12:	d03d      	beq.n	8007a90 <__pow5mult+0xa0>
 8007a14:	69fc      	ldr	r4, [r7, #28]
 8007a16:	b97c      	cbnz	r4, 8007a38 <__pow5mult+0x48>
 8007a18:	2010      	movs	r0, #16
 8007a1a:	f7ff fd81 	bl	8007520 <malloc>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	61f8      	str	r0, [r7, #28]
 8007a22:	b928      	cbnz	r0, 8007a30 <__pow5mult+0x40>
 8007a24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a28:	4b1c      	ldr	r3, [pc, #112]	@ (8007a9c <__pow5mult+0xac>)
 8007a2a:	481d      	ldr	r0, [pc, #116]	@ (8007aa0 <__pow5mult+0xb0>)
 8007a2c:	f000 fd9c 	bl	8008568 <__assert_func>
 8007a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a34:	6004      	str	r4, [r0, #0]
 8007a36:	60c4      	str	r4, [r0, #12]
 8007a38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a40:	b94c      	cbnz	r4, 8007a56 <__pow5mult+0x66>
 8007a42:	f240 2171 	movw	r1, #625	@ 0x271
 8007a46:	4638      	mov	r0, r7
 8007a48:	f7ff ff14 	bl	8007874 <__i2b>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a54:	6003      	str	r3, [r0, #0]
 8007a56:	f04f 0900 	mov.w	r9, #0
 8007a5a:	07eb      	lsls	r3, r5, #31
 8007a5c:	d50a      	bpl.n	8007a74 <__pow5mult+0x84>
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4622      	mov	r2, r4
 8007a62:	4638      	mov	r0, r7
 8007a64:	f7ff ff1c 	bl	80078a0 <__multiply>
 8007a68:	4680      	mov	r8, r0
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7ff fe4d 	bl	800770c <_Bfree>
 8007a72:	4646      	mov	r6, r8
 8007a74:	106d      	asrs	r5, r5, #1
 8007a76:	d00b      	beq.n	8007a90 <__pow5mult+0xa0>
 8007a78:	6820      	ldr	r0, [r4, #0]
 8007a7a:	b938      	cbnz	r0, 8007a8c <__pow5mult+0x9c>
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4638      	mov	r0, r7
 8007a82:	f7ff ff0d 	bl	80078a0 <__multiply>
 8007a86:	6020      	str	r0, [r4, #0]
 8007a88:	f8c0 9000 	str.w	r9, [r0]
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	e7e4      	b.n	8007a5a <__pow5mult+0x6a>
 8007a90:	4630      	mov	r0, r6
 8007a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a96:	bf00      	nop
 8007a98:	08009560 	.word	0x08009560
 8007a9c:	08009487 	.word	0x08009487
 8007aa0:	08009507 	.word	0x08009507

08007aa4 <__lshift>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	4607      	mov	r7, r0
 8007aac:	4691      	mov	r9, r2
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	6849      	ldr	r1, [r1, #4]
 8007ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ab6:	68a3      	ldr	r3, [r4, #8]
 8007ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007abc:	f108 0601 	add.w	r6, r8, #1
 8007ac0:	42b3      	cmp	r3, r6
 8007ac2:	db0b      	blt.n	8007adc <__lshift+0x38>
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	f7ff fde1 	bl	800768c <_Balloc>
 8007aca:	4605      	mov	r5, r0
 8007acc:	b948      	cbnz	r0, 8007ae2 <__lshift+0x3e>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ad4:	4b27      	ldr	r3, [pc, #156]	@ (8007b74 <__lshift+0xd0>)
 8007ad6:	4828      	ldr	r0, [pc, #160]	@ (8007b78 <__lshift+0xd4>)
 8007ad8:	f000 fd46 	bl	8008568 <__assert_func>
 8007adc:	3101      	adds	r1, #1
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	e7ee      	b.n	8007ac0 <__lshift+0x1c>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f100 0114 	add.w	r1, r0, #20
 8007ae8:	f100 0210 	add.w	r2, r0, #16
 8007aec:	4618      	mov	r0, r3
 8007aee:	4553      	cmp	r3, sl
 8007af0:	db33      	blt.n	8007b5a <__lshift+0xb6>
 8007af2:	6920      	ldr	r0, [r4, #16]
 8007af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007af8:	f104 0314 	add.w	r3, r4, #20
 8007afc:	f019 091f 	ands.w	r9, r9, #31
 8007b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b08:	d02b      	beq.n	8007b62 <__lshift+0xbe>
 8007b0a:	468a      	mov	sl, r1
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f1c9 0e20 	rsb	lr, r9, #32
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	fa00 f009 	lsl.w	r0, r0, r9
 8007b18:	4310      	orrs	r0, r2
 8007b1a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b22:	459c      	cmp	ip, r3
 8007b24:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b28:	d8f3      	bhi.n	8007b12 <__lshift+0x6e>
 8007b2a:	ebac 0304 	sub.w	r3, ip, r4
 8007b2e:	3b15      	subs	r3, #21
 8007b30:	f023 0303 	bic.w	r3, r3, #3
 8007b34:	3304      	adds	r3, #4
 8007b36:	f104 0015 	add.w	r0, r4, #21
 8007b3a:	4584      	cmp	ip, r0
 8007b3c:	bf38      	it	cc
 8007b3e:	2304      	movcc	r3, #4
 8007b40:	50ca      	str	r2, [r1, r3]
 8007b42:	b10a      	cbz	r2, 8007b48 <__lshift+0xa4>
 8007b44:	f108 0602 	add.w	r6, r8, #2
 8007b48:	3e01      	subs	r6, #1
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	612e      	str	r6, [r5, #16]
 8007b50:	f7ff fddc 	bl	800770c <_Bfree>
 8007b54:	4628      	mov	r0, r5
 8007b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b5e:	3301      	adds	r3, #1
 8007b60:	e7c5      	b.n	8007aee <__lshift+0x4a>
 8007b62:	3904      	subs	r1, #4
 8007b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b68:	459c      	cmp	ip, r3
 8007b6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b6e:	d8f9      	bhi.n	8007b64 <__lshift+0xc0>
 8007b70:	e7ea      	b.n	8007b48 <__lshift+0xa4>
 8007b72:	bf00      	nop
 8007b74:	080094f6 	.word	0x080094f6
 8007b78:	08009507 	.word	0x08009507

08007b7c <__mcmp>:
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	690a      	ldr	r2, [r1, #16]
 8007b80:	6900      	ldr	r0, [r0, #16]
 8007b82:	b530      	push	{r4, r5, lr}
 8007b84:	1a80      	subs	r0, r0, r2
 8007b86:	d10e      	bne.n	8007ba6 <__mcmp+0x2a>
 8007b88:	3314      	adds	r3, #20
 8007b8a:	3114      	adds	r1, #20
 8007b8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b9c:	4295      	cmp	r5, r2
 8007b9e:	d003      	beq.n	8007ba8 <__mcmp+0x2c>
 8007ba0:	d205      	bcs.n	8007bae <__mcmp+0x32>
 8007ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba6:	bd30      	pop	{r4, r5, pc}
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d3f3      	bcc.n	8007b94 <__mcmp+0x18>
 8007bac:	e7fb      	b.n	8007ba6 <__mcmp+0x2a>
 8007bae:	2001      	movs	r0, #1
 8007bb0:	e7f9      	b.n	8007ba6 <__mcmp+0x2a>
	...

08007bb4 <__mdiff>:
 8007bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb8:	4689      	mov	r9, r1
 8007bba:	4606      	mov	r6, r0
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4648      	mov	r0, r9
 8007bc0:	4614      	mov	r4, r2
 8007bc2:	f7ff ffdb 	bl	8007b7c <__mcmp>
 8007bc6:	1e05      	subs	r5, r0, #0
 8007bc8:	d112      	bne.n	8007bf0 <__mdiff+0x3c>
 8007bca:	4629      	mov	r1, r5
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7ff fd5d 	bl	800768c <_Balloc>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	b928      	cbnz	r0, 8007be2 <__mdiff+0x2e>
 8007bd6:	f240 2137 	movw	r1, #567	@ 0x237
 8007bda:	4b3e      	ldr	r3, [pc, #248]	@ (8007cd4 <__mdiff+0x120>)
 8007bdc:	483e      	ldr	r0, [pc, #248]	@ (8007cd8 <__mdiff+0x124>)
 8007bde:	f000 fcc3 	bl	8008568 <__assert_func>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007be8:	4610      	mov	r0, r2
 8007bea:	b003      	add	sp, #12
 8007bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf0:	bfbc      	itt	lt
 8007bf2:	464b      	movlt	r3, r9
 8007bf4:	46a1      	movlt	r9, r4
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bfc:	bfba      	itte	lt
 8007bfe:	461c      	movlt	r4, r3
 8007c00:	2501      	movlt	r5, #1
 8007c02:	2500      	movge	r5, #0
 8007c04:	f7ff fd42 	bl	800768c <_Balloc>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	b918      	cbnz	r0, 8007c14 <__mdiff+0x60>
 8007c0c:	f240 2145 	movw	r1, #581	@ 0x245
 8007c10:	4b30      	ldr	r3, [pc, #192]	@ (8007cd4 <__mdiff+0x120>)
 8007c12:	e7e3      	b.n	8007bdc <__mdiff+0x28>
 8007c14:	f100 0b14 	add.w	fp, r0, #20
 8007c18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c1c:	f109 0310 	add.w	r3, r9, #16
 8007c20:	60c5      	str	r5, [r0, #12]
 8007c22:	f04f 0c00 	mov.w	ip, #0
 8007c26:	f109 0514 	add.w	r5, r9, #20
 8007c2a:	46d9      	mov	r9, fp
 8007c2c:	6926      	ldr	r6, [r4, #16]
 8007c2e:	f104 0e14 	add.w	lr, r4, #20
 8007c32:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c36:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	9b01      	ldr	r3, [sp, #4]
 8007c3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c46:	b281      	uxth	r1, r0
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	fa1f f38a 	uxth.w	r3, sl
 8007c4e:	1a5b      	subs	r3, r3, r1
 8007c50:	0c00      	lsrs	r0, r0, #16
 8007c52:	4463      	add	r3, ip
 8007c54:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c58:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c62:	4576      	cmp	r6, lr
 8007c64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c68:	f849 3b04 	str.w	r3, [r9], #4
 8007c6c:	d8e6      	bhi.n	8007c3c <__mdiff+0x88>
 8007c6e:	1b33      	subs	r3, r6, r4
 8007c70:	3b15      	subs	r3, #21
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	3415      	adds	r4, #21
 8007c78:	3304      	adds	r3, #4
 8007c7a:	42a6      	cmp	r6, r4
 8007c7c:	bf38      	it	cc
 8007c7e:	2304      	movcc	r3, #4
 8007c80:	441d      	add	r5, r3
 8007c82:	445b      	add	r3, fp
 8007c84:	461e      	mov	r6, r3
 8007c86:	462c      	mov	r4, r5
 8007c88:	4544      	cmp	r4, r8
 8007c8a:	d30e      	bcc.n	8007caa <__mdiff+0xf6>
 8007c8c:	f108 0103 	add.w	r1, r8, #3
 8007c90:	1b49      	subs	r1, r1, r5
 8007c92:	f021 0103 	bic.w	r1, r1, #3
 8007c96:	3d03      	subs	r5, #3
 8007c98:	45a8      	cmp	r8, r5
 8007c9a:	bf38      	it	cc
 8007c9c:	2100      	movcc	r1, #0
 8007c9e:	440b      	add	r3, r1
 8007ca0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ca4:	b199      	cbz	r1, 8007cce <__mdiff+0x11a>
 8007ca6:	6117      	str	r7, [r2, #16]
 8007ca8:	e79e      	b.n	8007be8 <__mdiff+0x34>
 8007caa:	46e6      	mov	lr, ip
 8007cac:	f854 1b04 	ldr.w	r1, [r4], #4
 8007cb0:	fa1f fc81 	uxth.w	ip, r1
 8007cb4:	44f4      	add	ip, lr
 8007cb6:	0c08      	lsrs	r0, r1, #16
 8007cb8:	4471      	add	r1, lr
 8007cba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cbe:	b289      	uxth	r1, r1
 8007cc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cc8:	f846 1b04 	str.w	r1, [r6], #4
 8007ccc:	e7dc      	b.n	8007c88 <__mdiff+0xd4>
 8007cce:	3f01      	subs	r7, #1
 8007cd0:	e7e6      	b.n	8007ca0 <__mdiff+0xec>
 8007cd2:	bf00      	nop
 8007cd4:	080094f6 	.word	0x080094f6
 8007cd8:	08009507 	.word	0x08009507

08007cdc <__d2b>:
 8007cdc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4690      	mov	r8, r2
 8007ce4:	4699      	mov	r9, r3
 8007ce6:	9e08      	ldr	r6, [sp, #32]
 8007ce8:	f7ff fcd0 	bl	800768c <_Balloc>
 8007cec:	4604      	mov	r4, r0
 8007cee:	b930      	cbnz	r0, 8007cfe <__d2b+0x22>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	f240 310f 	movw	r1, #783	@ 0x30f
 8007cf6:	4b23      	ldr	r3, [pc, #140]	@ (8007d84 <__d2b+0xa8>)
 8007cf8:	4823      	ldr	r0, [pc, #140]	@ (8007d88 <__d2b+0xac>)
 8007cfa:	f000 fc35 	bl	8008568 <__assert_func>
 8007cfe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d06:	b10d      	cbz	r5, 8007d0c <__d2b+0x30>
 8007d08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	f1b8 0300 	subs.w	r3, r8, #0
 8007d12:	d024      	beq.n	8007d5e <__d2b+0x82>
 8007d14:	4668      	mov	r0, sp
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	f7ff fd7f 	bl	800781a <__lo0bits>
 8007d1c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d20:	b1d8      	cbz	r0, 8007d5a <__d2b+0x7e>
 8007d22:	f1c0 0320 	rsb	r3, r0, #32
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	430b      	orrs	r3, r1
 8007d2c:	40c2      	lsrs	r2, r0
 8007d2e:	6163      	str	r3, [r4, #20]
 8007d30:	9201      	str	r2, [sp, #4]
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bf0c      	ite	eq
 8007d38:	2201      	moveq	r2, #1
 8007d3a:	2202      	movne	r2, #2
 8007d3c:	61a3      	str	r3, [r4, #24]
 8007d3e:	6122      	str	r2, [r4, #16]
 8007d40:	b1ad      	cbz	r5, 8007d6e <__d2b+0x92>
 8007d42:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d46:	4405      	add	r5, r0
 8007d48:	6035      	str	r5, [r6, #0]
 8007d4a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d50:	6018      	str	r0, [r3, #0]
 8007d52:	4620      	mov	r0, r4
 8007d54:	b002      	add	sp, #8
 8007d56:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007d5a:	6161      	str	r1, [r4, #20]
 8007d5c:	e7e9      	b.n	8007d32 <__d2b+0x56>
 8007d5e:	a801      	add	r0, sp, #4
 8007d60:	f7ff fd5b 	bl	800781a <__lo0bits>
 8007d64:	9b01      	ldr	r3, [sp, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	6163      	str	r3, [r4, #20]
 8007d6a:	3020      	adds	r0, #32
 8007d6c:	e7e7      	b.n	8007d3e <__d2b+0x62>
 8007d6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d76:	6030      	str	r0, [r6, #0]
 8007d78:	6918      	ldr	r0, [r3, #16]
 8007d7a:	f7ff fd2f 	bl	80077dc <__hi0bits>
 8007d7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d82:	e7e4      	b.n	8007d4e <__d2b+0x72>
 8007d84:	080094f6 	.word	0x080094f6
 8007d88:	08009507 	.word	0x08009507

08007d8c <__ssputs_r>:
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	461f      	mov	r7, r3
 8007d92:	688e      	ldr	r6, [r1, #8]
 8007d94:	4682      	mov	sl, r0
 8007d96:	42be      	cmp	r6, r7
 8007d98:	460c      	mov	r4, r1
 8007d9a:	4690      	mov	r8, r2
 8007d9c:	680b      	ldr	r3, [r1, #0]
 8007d9e:	d82d      	bhi.n	8007dfc <__ssputs_r+0x70>
 8007da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007da4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007da8:	d026      	beq.n	8007df8 <__ssputs_r+0x6c>
 8007daa:	6965      	ldr	r5, [r4, #20]
 8007dac:	6909      	ldr	r1, [r1, #16]
 8007dae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007db2:	eba3 0901 	sub.w	r9, r3, r1
 8007db6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dba:	1c7b      	adds	r3, r7, #1
 8007dbc:	444b      	add	r3, r9
 8007dbe:	106d      	asrs	r5, r5, #1
 8007dc0:	429d      	cmp	r5, r3
 8007dc2:	bf38      	it	cc
 8007dc4:	461d      	movcc	r5, r3
 8007dc6:	0553      	lsls	r3, r2, #21
 8007dc8:	d527      	bpl.n	8007e1a <__ssputs_r+0x8e>
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7ff fbd2 	bl	8007574 <_malloc_r>
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	b360      	cbz	r0, 8007e2e <__ssputs_r+0xa2>
 8007dd4:	464a      	mov	r2, r9
 8007dd6:	6921      	ldr	r1, [r4, #16]
 8007dd8:	f7fe fcfb 	bl	80067d2 <memcpy>
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007de6:	81a3      	strh	r3, [r4, #12]
 8007de8:	6126      	str	r6, [r4, #16]
 8007dea:	444e      	add	r6, r9
 8007dec:	6026      	str	r6, [r4, #0]
 8007dee:	463e      	mov	r6, r7
 8007df0:	6165      	str	r5, [r4, #20]
 8007df2:	eba5 0509 	sub.w	r5, r5, r9
 8007df6:	60a5      	str	r5, [r4, #8]
 8007df8:	42be      	cmp	r6, r7
 8007dfa:	d900      	bls.n	8007dfe <__ssputs_r+0x72>
 8007dfc:	463e      	mov	r6, r7
 8007dfe:	4632      	mov	r2, r6
 8007e00:	4641      	mov	r1, r8
 8007e02:	6820      	ldr	r0, [r4, #0]
 8007e04:	f000 fb63 	bl	80084ce <memmove>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	68a3      	ldr	r3, [r4, #8]
 8007e0c:	1b9b      	subs	r3, r3, r6
 8007e0e:	60a3      	str	r3, [r4, #8]
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	4433      	add	r3, r6
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	f000 fbe8 	bl	80085f0 <_realloc_r>
 8007e20:	4606      	mov	r6, r0
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d1e0      	bne.n	8007de8 <__ssputs_r+0x5c>
 8007e26:	4650      	mov	r0, sl
 8007e28:	6921      	ldr	r1, [r4, #16]
 8007e2a:	f7ff fb31 	bl	8007490 <_free_r>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	f8ca 3000 	str.w	r3, [sl]
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e3e:	81a3      	strh	r3, [r4, #12]
 8007e40:	e7e9      	b.n	8007e16 <__ssputs_r+0x8a>
	...

08007e44 <_svfiprintf_r>:
 8007e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e48:	4698      	mov	r8, r3
 8007e4a:	898b      	ldrh	r3, [r1, #12]
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	061b      	lsls	r3, r3, #24
 8007e50:	460d      	mov	r5, r1
 8007e52:	4614      	mov	r4, r2
 8007e54:	b09d      	sub	sp, #116	@ 0x74
 8007e56:	d510      	bpl.n	8007e7a <_svfiprintf_r+0x36>
 8007e58:	690b      	ldr	r3, [r1, #16]
 8007e5a:	b973      	cbnz	r3, 8007e7a <_svfiprintf_r+0x36>
 8007e5c:	2140      	movs	r1, #64	@ 0x40
 8007e5e:	f7ff fb89 	bl	8007574 <_malloc_r>
 8007e62:	6028      	str	r0, [r5, #0]
 8007e64:	6128      	str	r0, [r5, #16]
 8007e66:	b930      	cbnz	r0, 8007e76 <_svfiprintf_r+0x32>
 8007e68:	230c      	movs	r3, #12
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	b01d      	add	sp, #116	@ 0x74
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	2340      	movs	r3, #64	@ 0x40
 8007e78:	616b      	str	r3, [r5, #20]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e7e:	2320      	movs	r3, #32
 8007e80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e84:	2330      	movs	r3, #48	@ 0x30
 8007e86:	f04f 0901 	mov.w	r9, #1
 8007e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e8e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008028 <_svfiprintf_r+0x1e4>
 8007e92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e96:	4623      	mov	r3, r4
 8007e98:	469a      	mov	sl, r3
 8007e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e9e:	b10a      	cbz	r2, 8007ea4 <_svfiprintf_r+0x60>
 8007ea0:	2a25      	cmp	r2, #37	@ 0x25
 8007ea2:	d1f9      	bne.n	8007e98 <_svfiprintf_r+0x54>
 8007ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ea8:	d00b      	beq.n	8007ec2 <_svfiprintf_r+0x7e>
 8007eaa:	465b      	mov	r3, fp
 8007eac:	4622      	mov	r2, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f7ff ff6b 	bl	8007d8c <__ssputs_r>
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	f000 80a7 	beq.w	800800a <_svfiprintf_r+0x1c6>
 8007ebc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ebe:	445a      	add	r2, fp
 8007ec0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 809f 	beq.w	800800a <_svfiprintf_r+0x1c6>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ed6:	f10a 0a01 	add.w	sl, sl, #1
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	9307      	str	r3, [sp, #28]
 8007ede:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ee2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ee4:	4654      	mov	r4, sl
 8007ee6:	2205      	movs	r2, #5
 8007ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eec:	484e      	ldr	r0, [pc, #312]	@ (8008028 <_svfiprintf_r+0x1e4>)
 8007eee:	f7fe fc62 	bl	80067b6 <memchr>
 8007ef2:	9a04      	ldr	r2, [sp, #16]
 8007ef4:	b9d8      	cbnz	r0, 8007f2e <_svfiprintf_r+0xea>
 8007ef6:	06d0      	lsls	r0, r2, #27
 8007ef8:	bf44      	itt	mi
 8007efa:	2320      	movmi	r3, #32
 8007efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f00:	0711      	lsls	r1, r2, #28
 8007f02:	bf44      	itt	mi
 8007f04:	232b      	movmi	r3, #43	@ 0x2b
 8007f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f10:	d015      	beq.n	8007f3e <_svfiprintf_r+0xfa>
 8007f12:	4654      	mov	r4, sl
 8007f14:	2000      	movs	r0, #0
 8007f16:	f04f 0c0a 	mov.w	ip, #10
 8007f1a:	9a07      	ldr	r2, [sp, #28]
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f22:	3b30      	subs	r3, #48	@ 0x30
 8007f24:	2b09      	cmp	r3, #9
 8007f26:	d94b      	bls.n	8007fc0 <_svfiprintf_r+0x17c>
 8007f28:	b1b0      	cbz	r0, 8007f58 <_svfiprintf_r+0x114>
 8007f2a:	9207      	str	r2, [sp, #28]
 8007f2c:	e014      	b.n	8007f58 <_svfiprintf_r+0x114>
 8007f2e:	eba0 0308 	sub.w	r3, r0, r8
 8007f32:	fa09 f303 	lsl.w	r3, r9, r3
 8007f36:	4313      	orrs	r3, r2
 8007f38:	46a2      	mov	sl, r4
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	e7d2      	b.n	8007ee4 <_svfiprintf_r+0xa0>
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	1d19      	adds	r1, r3, #4
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	9103      	str	r1, [sp, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfbb      	ittet	lt
 8007f4a:	425b      	neglt	r3, r3
 8007f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f50:	9307      	strge	r3, [sp, #28]
 8007f52:	9307      	strlt	r3, [sp, #28]
 8007f54:	bfb8      	it	lt
 8007f56:	9204      	strlt	r2, [sp, #16]
 8007f58:	7823      	ldrb	r3, [r4, #0]
 8007f5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f5c:	d10a      	bne.n	8007f74 <_svfiprintf_r+0x130>
 8007f5e:	7863      	ldrb	r3, [r4, #1]
 8007f60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f62:	d132      	bne.n	8007fca <_svfiprintf_r+0x186>
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	3402      	adds	r4, #2
 8007f68:	1d1a      	adds	r2, r3, #4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	9203      	str	r2, [sp, #12]
 8007f6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f72:	9305      	str	r3, [sp, #20]
 8007f74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800802c <_svfiprintf_r+0x1e8>
 8007f78:	2203      	movs	r2, #3
 8007f7a:	4650      	mov	r0, sl
 8007f7c:	7821      	ldrb	r1, [r4, #0]
 8007f7e:	f7fe fc1a 	bl	80067b6 <memchr>
 8007f82:	b138      	cbz	r0, 8007f94 <_svfiprintf_r+0x150>
 8007f84:	2240      	movs	r2, #64	@ 0x40
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	eba0 000a 	sub.w	r0, r0, sl
 8007f8c:	4082      	lsls	r2, r0
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	3401      	adds	r4, #1
 8007f92:	9304      	str	r3, [sp, #16]
 8007f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f98:	2206      	movs	r2, #6
 8007f9a:	4825      	ldr	r0, [pc, #148]	@ (8008030 <_svfiprintf_r+0x1ec>)
 8007f9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fa0:	f7fe fc09 	bl	80067b6 <memchr>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d036      	beq.n	8008016 <_svfiprintf_r+0x1d2>
 8007fa8:	4b22      	ldr	r3, [pc, #136]	@ (8008034 <_svfiprintf_r+0x1f0>)
 8007faa:	bb1b      	cbnz	r3, 8007ff4 <_svfiprintf_r+0x1b0>
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	3307      	adds	r3, #7
 8007fb0:	f023 0307 	bic.w	r3, r3, #7
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	9303      	str	r3, [sp, #12]
 8007fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fba:	4433      	add	r3, r6
 8007fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fbe:	e76a      	b.n	8007e96 <_svfiprintf_r+0x52>
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc8:	e7a8      	b.n	8007f1c <_svfiprintf_r+0xd8>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f04f 0c0a 	mov.w	ip, #10
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	3401      	adds	r4, #1
 8007fd4:	9305      	str	r3, [sp, #20]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fdc:	3a30      	subs	r2, #48	@ 0x30
 8007fde:	2a09      	cmp	r2, #9
 8007fe0:	d903      	bls.n	8007fea <_svfiprintf_r+0x1a6>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0c6      	beq.n	8007f74 <_svfiprintf_r+0x130>
 8007fe6:	9105      	str	r1, [sp, #20]
 8007fe8:	e7c4      	b.n	8007f74 <_svfiprintf_r+0x130>
 8007fea:	4604      	mov	r4, r0
 8007fec:	2301      	movs	r3, #1
 8007fee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ff2:	e7f0      	b.n	8007fd6 <_svfiprintf_r+0x192>
 8007ff4:	ab03      	add	r3, sp, #12
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8008038 <_svfiprintf_r+0x1f4>)
 8007ffe:	a904      	add	r1, sp, #16
 8008000:	f7fd fd4a 	bl	8005a98 <_printf_float>
 8008004:	1c42      	adds	r2, r0, #1
 8008006:	4606      	mov	r6, r0
 8008008:	d1d6      	bne.n	8007fb8 <_svfiprintf_r+0x174>
 800800a:	89ab      	ldrh	r3, [r5, #12]
 800800c:	065b      	lsls	r3, r3, #25
 800800e:	f53f af2d 	bmi.w	8007e6c <_svfiprintf_r+0x28>
 8008012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008014:	e72c      	b.n	8007e70 <_svfiprintf_r+0x2c>
 8008016:	ab03      	add	r3, sp, #12
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	462a      	mov	r2, r5
 800801c:	4638      	mov	r0, r7
 800801e:	4b06      	ldr	r3, [pc, #24]	@ (8008038 <_svfiprintf_r+0x1f4>)
 8008020:	a904      	add	r1, sp, #16
 8008022:	f7fd ffd7 	bl	8005fd4 <_printf_i>
 8008026:	e7ed      	b.n	8008004 <_svfiprintf_r+0x1c0>
 8008028:	08009660 	.word	0x08009660
 800802c:	08009666 	.word	0x08009666
 8008030:	0800966a 	.word	0x0800966a
 8008034:	08005a99 	.word	0x08005a99
 8008038:	08007d8d 	.word	0x08007d8d

0800803c <__sfputc_r>:
 800803c:	6893      	ldr	r3, [r2, #8]
 800803e:	b410      	push	{r4}
 8008040:	3b01      	subs	r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	6093      	str	r3, [r2, #8]
 8008046:	da07      	bge.n	8008058 <__sfputc_r+0x1c>
 8008048:	6994      	ldr	r4, [r2, #24]
 800804a:	42a3      	cmp	r3, r4
 800804c:	db01      	blt.n	8008052 <__sfputc_r+0x16>
 800804e:	290a      	cmp	r1, #10
 8008050:	d102      	bne.n	8008058 <__sfputc_r+0x1c>
 8008052:	bc10      	pop	{r4}
 8008054:	f7fe ba87 	b.w	8006566 <__swbuf_r>
 8008058:	6813      	ldr	r3, [r2, #0]
 800805a:	1c58      	adds	r0, r3, #1
 800805c:	6010      	str	r0, [r2, #0]
 800805e:	7019      	strb	r1, [r3, #0]
 8008060:	4608      	mov	r0, r1
 8008062:	bc10      	pop	{r4}
 8008064:	4770      	bx	lr

08008066 <__sfputs_r>:
 8008066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008068:	4606      	mov	r6, r0
 800806a:	460f      	mov	r7, r1
 800806c:	4614      	mov	r4, r2
 800806e:	18d5      	adds	r5, r2, r3
 8008070:	42ac      	cmp	r4, r5
 8008072:	d101      	bne.n	8008078 <__sfputs_r+0x12>
 8008074:	2000      	movs	r0, #0
 8008076:	e007      	b.n	8008088 <__sfputs_r+0x22>
 8008078:	463a      	mov	r2, r7
 800807a:	4630      	mov	r0, r6
 800807c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008080:	f7ff ffdc 	bl	800803c <__sfputc_r>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d1f3      	bne.n	8008070 <__sfputs_r+0xa>
 8008088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800808c <_vfiprintf_r>:
 800808c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	460d      	mov	r5, r1
 8008092:	4614      	mov	r4, r2
 8008094:	4698      	mov	r8, r3
 8008096:	4606      	mov	r6, r0
 8008098:	b09d      	sub	sp, #116	@ 0x74
 800809a:	b118      	cbz	r0, 80080a4 <_vfiprintf_r+0x18>
 800809c:	6a03      	ldr	r3, [r0, #32]
 800809e:	b90b      	cbnz	r3, 80080a4 <_vfiprintf_r+0x18>
 80080a0:	f7fe f944 	bl	800632c <__sinit>
 80080a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080a6:	07d9      	lsls	r1, r3, #31
 80080a8:	d405      	bmi.n	80080b6 <_vfiprintf_r+0x2a>
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	059a      	lsls	r2, r3, #22
 80080ae:	d402      	bmi.n	80080b6 <_vfiprintf_r+0x2a>
 80080b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080b2:	f7fe fb7e 	bl	80067b2 <__retarget_lock_acquire_recursive>
 80080b6:	89ab      	ldrh	r3, [r5, #12]
 80080b8:	071b      	lsls	r3, r3, #28
 80080ba:	d501      	bpl.n	80080c0 <_vfiprintf_r+0x34>
 80080bc:	692b      	ldr	r3, [r5, #16]
 80080be:	b99b      	cbnz	r3, 80080e8 <_vfiprintf_r+0x5c>
 80080c0:	4629      	mov	r1, r5
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7fe fa8e 	bl	80065e4 <__swsetup_r>
 80080c8:	b170      	cbz	r0, 80080e8 <_vfiprintf_r+0x5c>
 80080ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080cc:	07dc      	lsls	r4, r3, #31
 80080ce:	d504      	bpl.n	80080da <_vfiprintf_r+0x4e>
 80080d0:	f04f 30ff 	mov.w	r0, #4294967295
 80080d4:	b01d      	add	sp, #116	@ 0x74
 80080d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080da:	89ab      	ldrh	r3, [r5, #12]
 80080dc:	0598      	lsls	r0, r3, #22
 80080de:	d4f7      	bmi.n	80080d0 <_vfiprintf_r+0x44>
 80080e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080e2:	f7fe fb67 	bl	80067b4 <__retarget_lock_release_recursive>
 80080e6:	e7f3      	b.n	80080d0 <_vfiprintf_r+0x44>
 80080e8:	2300      	movs	r3, #0
 80080ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ec:	2320      	movs	r3, #32
 80080ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080f2:	2330      	movs	r3, #48	@ 0x30
 80080f4:	f04f 0901 	mov.w	r9, #1
 80080f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80082a8 <_vfiprintf_r+0x21c>
 8008100:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008104:	4623      	mov	r3, r4
 8008106:	469a      	mov	sl, r3
 8008108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800810c:	b10a      	cbz	r2, 8008112 <_vfiprintf_r+0x86>
 800810e:	2a25      	cmp	r2, #37	@ 0x25
 8008110:	d1f9      	bne.n	8008106 <_vfiprintf_r+0x7a>
 8008112:	ebba 0b04 	subs.w	fp, sl, r4
 8008116:	d00b      	beq.n	8008130 <_vfiprintf_r+0xa4>
 8008118:	465b      	mov	r3, fp
 800811a:	4622      	mov	r2, r4
 800811c:	4629      	mov	r1, r5
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff ffa1 	bl	8008066 <__sfputs_r>
 8008124:	3001      	adds	r0, #1
 8008126:	f000 80a7 	beq.w	8008278 <_vfiprintf_r+0x1ec>
 800812a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800812c:	445a      	add	r2, fp
 800812e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008130:	f89a 3000 	ldrb.w	r3, [sl]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 809f 	beq.w	8008278 <_vfiprintf_r+0x1ec>
 800813a:	2300      	movs	r3, #0
 800813c:	f04f 32ff 	mov.w	r2, #4294967295
 8008140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008144:	f10a 0a01 	add.w	sl, sl, #1
 8008148:	9304      	str	r3, [sp, #16]
 800814a:	9307      	str	r3, [sp, #28]
 800814c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008150:	931a      	str	r3, [sp, #104]	@ 0x68
 8008152:	4654      	mov	r4, sl
 8008154:	2205      	movs	r2, #5
 8008156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815a:	4853      	ldr	r0, [pc, #332]	@ (80082a8 <_vfiprintf_r+0x21c>)
 800815c:	f7fe fb2b 	bl	80067b6 <memchr>
 8008160:	9a04      	ldr	r2, [sp, #16]
 8008162:	b9d8      	cbnz	r0, 800819c <_vfiprintf_r+0x110>
 8008164:	06d1      	lsls	r1, r2, #27
 8008166:	bf44      	itt	mi
 8008168:	2320      	movmi	r3, #32
 800816a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800816e:	0713      	lsls	r3, r2, #28
 8008170:	bf44      	itt	mi
 8008172:	232b      	movmi	r3, #43	@ 0x2b
 8008174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008178:	f89a 3000 	ldrb.w	r3, [sl]
 800817c:	2b2a      	cmp	r3, #42	@ 0x2a
 800817e:	d015      	beq.n	80081ac <_vfiprintf_r+0x120>
 8008180:	4654      	mov	r4, sl
 8008182:	2000      	movs	r0, #0
 8008184:	f04f 0c0a 	mov.w	ip, #10
 8008188:	9a07      	ldr	r2, [sp, #28]
 800818a:	4621      	mov	r1, r4
 800818c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008190:	3b30      	subs	r3, #48	@ 0x30
 8008192:	2b09      	cmp	r3, #9
 8008194:	d94b      	bls.n	800822e <_vfiprintf_r+0x1a2>
 8008196:	b1b0      	cbz	r0, 80081c6 <_vfiprintf_r+0x13a>
 8008198:	9207      	str	r2, [sp, #28]
 800819a:	e014      	b.n	80081c6 <_vfiprintf_r+0x13a>
 800819c:	eba0 0308 	sub.w	r3, r0, r8
 80081a0:	fa09 f303 	lsl.w	r3, r9, r3
 80081a4:	4313      	orrs	r3, r2
 80081a6:	46a2      	mov	sl, r4
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	e7d2      	b.n	8008152 <_vfiprintf_r+0xc6>
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	1d19      	adds	r1, r3, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	9103      	str	r1, [sp, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	bfbb      	ittet	lt
 80081b8:	425b      	neglt	r3, r3
 80081ba:	f042 0202 	orrlt.w	r2, r2, #2
 80081be:	9307      	strge	r3, [sp, #28]
 80081c0:	9307      	strlt	r3, [sp, #28]
 80081c2:	bfb8      	it	lt
 80081c4:	9204      	strlt	r2, [sp, #16]
 80081c6:	7823      	ldrb	r3, [r4, #0]
 80081c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80081ca:	d10a      	bne.n	80081e2 <_vfiprintf_r+0x156>
 80081cc:	7863      	ldrb	r3, [r4, #1]
 80081ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80081d0:	d132      	bne.n	8008238 <_vfiprintf_r+0x1ac>
 80081d2:	9b03      	ldr	r3, [sp, #12]
 80081d4:	3402      	adds	r4, #2
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	9203      	str	r2, [sp, #12]
 80081dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081e0:	9305      	str	r3, [sp, #20]
 80081e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80082ac <_vfiprintf_r+0x220>
 80081e6:	2203      	movs	r2, #3
 80081e8:	4650      	mov	r0, sl
 80081ea:	7821      	ldrb	r1, [r4, #0]
 80081ec:	f7fe fae3 	bl	80067b6 <memchr>
 80081f0:	b138      	cbz	r0, 8008202 <_vfiprintf_r+0x176>
 80081f2:	2240      	movs	r2, #64	@ 0x40
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	eba0 000a 	sub.w	r0, r0, sl
 80081fa:	4082      	lsls	r2, r0
 80081fc:	4313      	orrs	r3, r2
 80081fe:	3401      	adds	r4, #1
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008206:	2206      	movs	r2, #6
 8008208:	4829      	ldr	r0, [pc, #164]	@ (80082b0 <_vfiprintf_r+0x224>)
 800820a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800820e:	f7fe fad2 	bl	80067b6 <memchr>
 8008212:	2800      	cmp	r0, #0
 8008214:	d03f      	beq.n	8008296 <_vfiprintf_r+0x20a>
 8008216:	4b27      	ldr	r3, [pc, #156]	@ (80082b4 <_vfiprintf_r+0x228>)
 8008218:	bb1b      	cbnz	r3, 8008262 <_vfiprintf_r+0x1d6>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	3307      	adds	r3, #7
 800821e:	f023 0307 	bic.w	r3, r3, #7
 8008222:	3308      	adds	r3, #8
 8008224:	9303      	str	r3, [sp, #12]
 8008226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008228:	443b      	add	r3, r7
 800822a:	9309      	str	r3, [sp, #36]	@ 0x24
 800822c:	e76a      	b.n	8008104 <_vfiprintf_r+0x78>
 800822e:	460c      	mov	r4, r1
 8008230:	2001      	movs	r0, #1
 8008232:	fb0c 3202 	mla	r2, ip, r2, r3
 8008236:	e7a8      	b.n	800818a <_vfiprintf_r+0xfe>
 8008238:	2300      	movs	r3, #0
 800823a:	f04f 0c0a 	mov.w	ip, #10
 800823e:	4619      	mov	r1, r3
 8008240:	3401      	adds	r4, #1
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	4620      	mov	r0, r4
 8008246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800824a:	3a30      	subs	r2, #48	@ 0x30
 800824c:	2a09      	cmp	r2, #9
 800824e:	d903      	bls.n	8008258 <_vfiprintf_r+0x1cc>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0c6      	beq.n	80081e2 <_vfiprintf_r+0x156>
 8008254:	9105      	str	r1, [sp, #20]
 8008256:	e7c4      	b.n	80081e2 <_vfiprintf_r+0x156>
 8008258:	4604      	mov	r4, r0
 800825a:	2301      	movs	r3, #1
 800825c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008260:	e7f0      	b.n	8008244 <_vfiprintf_r+0x1b8>
 8008262:	ab03      	add	r3, sp, #12
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	462a      	mov	r2, r5
 8008268:	4630      	mov	r0, r6
 800826a:	4b13      	ldr	r3, [pc, #76]	@ (80082b8 <_vfiprintf_r+0x22c>)
 800826c:	a904      	add	r1, sp, #16
 800826e:	f7fd fc13 	bl	8005a98 <_printf_float>
 8008272:	4607      	mov	r7, r0
 8008274:	1c78      	adds	r0, r7, #1
 8008276:	d1d6      	bne.n	8008226 <_vfiprintf_r+0x19a>
 8008278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800827a:	07d9      	lsls	r1, r3, #31
 800827c:	d405      	bmi.n	800828a <_vfiprintf_r+0x1fe>
 800827e:	89ab      	ldrh	r3, [r5, #12]
 8008280:	059a      	lsls	r2, r3, #22
 8008282:	d402      	bmi.n	800828a <_vfiprintf_r+0x1fe>
 8008284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008286:	f7fe fa95 	bl	80067b4 <__retarget_lock_release_recursive>
 800828a:	89ab      	ldrh	r3, [r5, #12]
 800828c:	065b      	lsls	r3, r3, #25
 800828e:	f53f af1f 	bmi.w	80080d0 <_vfiprintf_r+0x44>
 8008292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008294:	e71e      	b.n	80080d4 <_vfiprintf_r+0x48>
 8008296:	ab03      	add	r3, sp, #12
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	462a      	mov	r2, r5
 800829c:	4630      	mov	r0, r6
 800829e:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <_vfiprintf_r+0x22c>)
 80082a0:	a904      	add	r1, sp, #16
 80082a2:	f7fd fe97 	bl	8005fd4 <_printf_i>
 80082a6:	e7e4      	b.n	8008272 <_vfiprintf_r+0x1e6>
 80082a8:	08009660 	.word	0x08009660
 80082ac:	08009666 	.word	0x08009666
 80082b0:	0800966a 	.word	0x0800966a
 80082b4:	08005a99 	.word	0x08005a99
 80082b8:	08008067 	.word	0x08008067

080082bc <__sflush_r>:
 80082bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	0716      	lsls	r6, r2, #28
 80082c4:	4605      	mov	r5, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	d454      	bmi.n	8008374 <__sflush_r+0xb8>
 80082ca:	684b      	ldr	r3, [r1, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	dc02      	bgt.n	80082d6 <__sflush_r+0x1a>
 80082d0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dd48      	ble.n	8008368 <__sflush_r+0xac>
 80082d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082d8:	2e00      	cmp	r6, #0
 80082da:	d045      	beq.n	8008368 <__sflush_r+0xac>
 80082dc:	2300      	movs	r3, #0
 80082de:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082e2:	682f      	ldr	r7, [r5, #0]
 80082e4:	6a21      	ldr	r1, [r4, #32]
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	d030      	beq.n	800834c <__sflush_r+0x90>
 80082ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	0759      	lsls	r1, r3, #29
 80082f0:	d505      	bpl.n	80082fe <__sflush_r+0x42>
 80082f2:	6863      	ldr	r3, [r4, #4]
 80082f4:	1ad2      	subs	r2, r2, r3
 80082f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082f8:	b10b      	cbz	r3, 80082fe <__sflush_r+0x42>
 80082fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082fc:	1ad2      	subs	r2, r2, r3
 80082fe:	2300      	movs	r3, #0
 8008300:	4628      	mov	r0, r5
 8008302:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008304:	6a21      	ldr	r1, [r4, #32]
 8008306:	47b0      	blx	r6
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	d106      	bne.n	800831c <__sflush_r+0x60>
 800830e:	6829      	ldr	r1, [r5, #0]
 8008310:	291d      	cmp	r1, #29
 8008312:	d82b      	bhi.n	800836c <__sflush_r+0xb0>
 8008314:	4a28      	ldr	r2, [pc, #160]	@ (80083b8 <__sflush_r+0xfc>)
 8008316:	410a      	asrs	r2, r1
 8008318:	07d6      	lsls	r6, r2, #31
 800831a:	d427      	bmi.n	800836c <__sflush_r+0xb0>
 800831c:	2200      	movs	r2, #0
 800831e:	6062      	str	r2, [r4, #4]
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	04d9      	lsls	r1, r3, #19
 8008324:	6022      	str	r2, [r4, #0]
 8008326:	d504      	bpl.n	8008332 <__sflush_r+0x76>
 8008328:	1c42      	adds	r2, r0, #1
 800832a:	d101      	bne.n	8008330 <__sflush_r+0x74>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b903      	cbnz	r3, 8008332 <__sflush_r+0x76>
 8008330:	6560      	str	r0, [r4, #84]	@ 0x54
 8008332:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008334:	602f      	str	r7, [r5, #0]
 8008336:	b1b9      	cbz	r1, 8008368 <__sflush_r+0xac>
 8008338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800833c:	4299      	cmp	r1, r3
 800833e:	d002      	beq.n	8008346 <__sflush_r+0x8a>
 8008340:	4628      	mov	r0, r5
 8008342:	f7ff f8a5 	bl	8007490 <_free_r>
 8008346:	2300      	movs	r3, #0
 8008348:	6363      	str	r3, [r4, #52]	@ 0x34
 800834a:	e00d      	b.n	8008368 <__sflush_r+0xac>
 800834c:	2301      	movs	r3, #1
 800834e:	4628      	mov	r0, r5
 8008350:	47b0      	blx	r6
 8008352:	4602      	mov	r2, r0
 8008354:	1c50      	adds	r0, r2, #1
 8008356:	d1c9      	bne.n	80082ec <__sflush_r+0x30>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c6      	beq.n	80082ec <__sflush_r+0x30>
 800835e:	2b1d      	cmp	r3, #29
 8008360:	d001      	beq.n	8008366 <__sflush_r+0xaa>
 8008362:	2b16      	cmp	r3, #22
 8008364:	d11d      	bne.n	80083a2 <__sflush_r+0xe6>
 8008366:	602f      	str	r7, [r5, #0]
 8008368:	2000      	movs	r0, #0
 800836a:	e021      	b.n	80083b0 <__sflush_r+0xf4>
 800836c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008370:	b21b      	sxth	r3, r3
 8008372:	e01a      	b.n	80083aa <__sflush_r+0xee>
 8008374:	690f      	ldr	r7, [r1, #16]
 8008376:	2f00      	cmp	r7, #0
 8008378:	d0f6      	beq.n	8008368 <__sflush_r+0xac>
 800837a:	0793      	lsls	r3, r2, #30
 800837c:	bf18      	it	ne
 800837e:	2300      	movne	r3, #0
 8008380:	680e      	ldr	r6, [r1, #0]
 8008382:	bf08      	it	eq
 8008384:	694b      	ldreq	r3, [r1, #20]
 8008386:	1bf6      	subs	r6, r6, r7
 8008388:	600f      	str	r7, [r1, #0]
 800838a:	608b      	str	r3, [r1, #8]
 800838c:	2e00      	cmp	r6, #0
 800838e:	ddeb      	ble.n	8008368 <__sflush_r+0xac>
 8008390:	4633      	mov	r3, r6
 8008392:	463a      	mov	r2, r7
 8008394:	4628      	mov	r0, r5
 8008396:	6a21      	ldr	r1, [r4, #32]
 8008398:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800839c:	47e0      	blx	ip
 800839e:	2800      	cmp	r0, #0
 80083a0:	dc07      	bgt.n	80083b2 <__sflush_r+0xf6>
 80083a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b2:	4407      	add	r7, r0
 80083b4:	1a36      	subs	r6, r6, r0
 80083b6:	e7e9      	b.n	800838c <__sflush_r+0xd0>
 80083b8:	dfbffffe 	.word	0xdfbffffe

080083bc <_fflush_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	690b      	ldr	r3, [r1, #16]
 80083c0:	4605      	mov	r5, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	b913      	cbnz	r3, 80083cc <_fflush_r+0x10>
 80083c6:	2500      	movs	r5, #0
 80083c8:	4628      	mov	r0, r5
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	b118      	cbz	r0, 80083d6 <_fflush_r+0x1a>
 80083ce:	6a03      	ldr	r3, [r0, #32]
 80083d0:	b90b      	cbnz	r3, 80083d6 <_fflush_r+0x1a>
 80083d2:	f7fd ffab 	bl	800632c <__sinit>
 80083d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0f3      	beq.n	80083c6 <_fflush_r+0xa>
 80083de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083e0:	07d0      	lsls	r0, r2, #31
 80083e2:	d404      	bmi.n	80083ee <_fflush_r+0x32>
 80083e4:	0599      	lsls	r1, r3, #22
 80083e6:	d402      	bmi.n	80083ee <_fflush_r+0x32>
 80083e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083ea:	f7fe f9e2 	bl	80067b2 <__retarget_lock_acquire_recursive>
 80083ee:	4628      	mov	r0, r5
 80083f0:	4621      	mov	r1, r4
 80083f2:	f7ff ff63 	bl	80082bc <__sflush_r>
 80083f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083f8:	4605      	mov	r5, r0
 80083fa:	07da      	lsls	r2, r3, #31
 80083fc:	d4e4      	bmi.n	80083c8 <_fflush_r+0xc>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	059b      	lsls	r3, r3, #22
 8008402:	d4e1      	bmi.n	80083c8 <_fflush_r+0xc>
 8008404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008406:	f7fe f9d5 	bl	80067b4 <__retarget_lock_release_recursive>
 800840a:	e7dd      	b.n	80083c8 <_fflush_r+0xc>

0800840c <__swhatbuf_r>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	460c      	mov	r4, r1
 8008410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008414:	4615      	mov	r5, r2
 8008416:	2900      	cmp	r1, #0
 8008418:	461e      	mov	r6, r3
 800841a:	b096      	sub	sp, #88	@ 0x58
 800841c:	da0c      	bge.n	8008438 <__swhatbuf_r+0x2c>
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	2100      	movs	r1, #0
 8008422:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008426:	bf14      	ite	ne
 8008428:	2340      	movne	r3, #64	@ 0x40
 800842a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800842e:	2000      	movs	r0, #0
 8008430:	6031      	str	r1, [r6, #0]
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	b016      	add	sp, #88	@ 0x58
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	466a      	mov	r2, sp
 800843a:	f000 f863 	bl	8008504 <_fstat_r>
 800843e:	2800      	cmp	r0, #0
 8008440:	dbed      	blt.n	800841e <__swhatbuf_r+0x12>
 8008442:	9901      	ldr	r1, [sp, #4]
 8008444:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008448:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800844c:	4259      	negs	r1, r3
 800844e:	4159      	adcs	r1, r3
 8008450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008454:	e7eb      	b.n	800842e <__swhatbuf_r+0x22>

08008456 <__smakebuf_r>:
 8008456:	898b      	ldrh	r3, [r1, #12]
 8008458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800845a:	079d      	lsls	r5, r3, #30
 800845c:	4606      	mov	r6, r0
 800845e:	460c      	mov	r4, r1
 8008460:	d507      	bpl.n	8008472 <__smakebuf_r+0x1c>
 8008462:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008466:	6023      	str	r3, [r4, #0]
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	2301      	movs	r3, #1
 800846c:	6163      	str	r3, [r4, #20]
 800846e:	b003      	add	sp, #12
 8008470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008472:	466a      	mov	r2, sp
 8008474:	ab01      	add	r3, sp, #4
 8008476:	f7ff ffc9 	bl	800840c <__swhatbuf_r>
 800847a:	9f00      	ldr	r7, [sp, #0]
 800847c:	4605      	mov	r5, r0
 800847e:	4639      	mov	r1, r7
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff f877 	bl	8007574 <_malloc_r>
 8008486:	b948      	cbnz	r0, 800849c <__smakebuf_r+0x46>
 8008488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848c:	059a      	lsls	r2, r3, #22
 800848e:	d4ee      	bmi.n	800846e <__smakebuf_r+0x18>
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	f043 0302 	orr.w	r3, r3, #2
 8008498:	81a3      	strh	r3, [r4, #12]
 800849a:	e7e2      	b.n	8008462 <__smakebuf_r+0xc>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	6020      	str	r0, [r4, #0]
 80084ac:	b15b      	cbz	r3, 80084c6 <__smakebuf_r+0x70>
 80084ae:	4630      	mov	r0, r6
 80084b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b4:	f000 f838 	bl	8008528 <_isatty_r>
 80084b8:	b128      	cbz	r0, 80084c6 <__smakebuf_r+0x70>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f023 0303 	bic.w	r3, r3, #3
 80084c0:	f043 0301 	orr.w	r3, r3, #1
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	431d      	orrs	r5, r3
 80084ca:	81a5      	strh	r5, [r4, #12]
 80084cc:	e7cf      	b.n	800846e <__smakebuf_r+0x18>

080084ce <memmove>:
 80084ce:	4288      	cmp	r0, r1
 80084d0:	b510      	push	{r4, lr}
 80084d2:	eb01 0402 	add.w	r4, r1, r2
 80084d6:	d902      	bls.n	80084de <memmove+0x10>
 80084d8:	4284      	cmp	r4, r0
 80084da:	4623      	mov	r3, r4
 80084dc:	d807      	bhi.n	80084ee <memmove+0x20>
 80084de:	1e43      	subs	r3, r0, #1
 80084e0:	42a1      	cmp	r1, r4
 80084e2:	d008      	beq.n	80084f6 <memmove+0x28>
 80084e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ec:	e7f8      	b.n	80084e0 <memmove+0x12>
 80084ee:	4601      	mov	r1, r0
 80084f0:	4402      	add	r2, r0
 80084f2:	428a      	cmp	r2, r1
 80084f4:	d100      	bne.n	80084f8 <memmove+0x2a>
 80084f6:	bd10      	pop	{r4, pc}
 80084f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008500:	e7f7      	b.n	80084f2 <memmove+0x24>
	...

08008504 <_fstat_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	2300      	movs	r3, #0
 8008508:	4d06      	ldr	r5, [pc, #24]	@ (8008524 <_fstat_r+0x20>)
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	4611      	mov	r1, r2
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	f7fa fa85 	bl	8002a20 <_fstat>
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	d102      	bne.n	8008520 <_fstat_r+0x1c>
 800851a:	682b      	ldr	r3, [r5, #0]
 800851c:	b103      	cbz	r3, 8008520 <_fstat_r+0x1c>
 800851e:	6023      	str	r3, [r4, #0]
 8008520:	bd38      	pop	{r3, r4, r5, pc}
 8008522:	bf00      	nop
 8008524:	20001104 	.word	0x20001104

08008528 <_isatty_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	2300      	movs	r3, #0
 800852c:	4d05      	ldr	r5, [pc, #20]	@ (8008544 <_isatty_r+0x1c>)
 800852e:	4604      	mov	r4, r0
 8008530:	4608      	mov	r0, r1
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	f7fa fa83 	bl	8002a3e <_isatty>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_isatty_r+0x1a>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_isatty_r+0x1a>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	20001104 	.word	0x20001104

08008548 <_sbrk_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	2300      	movs	r3, #0
 800854c:	4d05      	ldr	r5, [pc, #20]	@ (8008564 <_sbrk_r+0x1c>)
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	602b      	str	r3, [r5, #0]
 8008554:	f7fa fa8a 	bl	8002a6c <_sbrk>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_sbrk_r+0x1a>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_sbrk_r+0x1a>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	20001104 	.word	0x20001104

08008568 <__assert_func>:
 8008568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800856a:	4614      	mov	r4, r2
 800856c:	461a      	mov	r2, r3
 800856e:	4b09      	ldr	r3, [pc, #36]	@ (8008594 <__assert_func+0x2c>)
 8008570:	4605      	mov	r5, r0
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68d8      	ldr	r0, [r3, #12]
 8008576:	b954      	cbnz	r4, 800858e <__assert_func+0x26>
 8008578:	4b07      	ldr	r3, [pc, #28]	@ (8008598 <__assert_func+0x30>)
 800857a:	461c      	mov	r4, r3
 800857c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008580:	9100      	str	r1, [sp, #0]
 8008582:	462b      	mov	r3, r5
 8008584:	4905      	ldr	r1, [pc, #20]	@ (800859c <__assert_func+0x34>)
 8008586:	f000 f86f 	bl	8008668 <fiprintf>
 800858a:	f000 f87f 	bl	800868c <abort>
 800858e:	4b04      	ldr	r3, [pc, #16]	@ (80085a0 <__assert_func+0x38>)
 8008590:	e7f4      	b.n	800857c <__assert_func+0x14>
 8008592:	bf00      	nop
 8008594:	200001e0 	.word	0x200001e0
 8008598:	080096b6 	.word	0x080096b6
 800859c:	08009688 	.word	0x08009688
 80085a0:	0800967b 	.word	0x0800967b

080085a4 <_calloc_r>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	fba1 5402 	umull	r5, r4, r1, r2
 80085aa:	b93c      	cbnz	r4, 80085bc <_calloc_r+0x18>
 80085ac:	4629      	mov	r1, r5
 80085ae:	f7fe ffe1 	bl	8007574 <_malloc_r>
 80085b2:	4606      	mov	r6, r0
 80085b4:	b928      	cbnz	r0, 80085c2 <_calloc_r+0x1e>
 80085b6:	2600      	movs	r6, #0
 80085b8:	4630      	mov	r0, r6
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	220c      	movs	r2, #12
 80085be:	6002      	str	r2, [r0, #0]
 80085c0:	e7f9      	b.n	80085b6 <_calloc_r+0x12>
 80085c2:	462a      	mov	r2, r5
 80085c4:	4621      	mov	r1, r4
 80085c6:	f7fe f863 	bl	8006690 <memset>
 80085ca:	e7f5      	b.n	80085b8 <_calloc_r+0x14>

080085cc <__ascii_mbtowc>:
 80085cc:	b082      	sub	sp, #8
 80085ce:	b901      	cbnz	r1, 80085d2 <__ascii_mbtowc+0x6>
 80085d0:	a901      	add	r1, sp, #4
 80085d2:	b142      	cbz	r2, 80085e6 <__ascii_mbtowc+0x1a>
 80085d4:	b14b      	cbz	r3, 80085ea <__ascii_mbtowc+0x1e>
 80085d6:	7813      	ldrb	r3, [r2, #0]
 80085d8:	600b      	str	r3, [r1, #0]
 80085da:	7812      	ldrb	r2, [r2, #0]
 80085dc:	1e10      	subs	r0, r2, #0
 80085de:	bf18      	it	ne
 80085e0:	2001      	movne	r0, #1
 80085e2:	b002      	add	sp, #8
 80085e4:	4770      	bx	lr
 80085e6:	4610      	mov	r0, r2
 80085e8:	e7fb      	b.n	80085e2 <__ascii_mbtowc+0x16>
 80085ea:	f06f 0001 	mvn.w	r0, #1
 80085ee:	e7f8      	b.n	80085e2 <__ascii_mbtowc+0x16>

080085f0 <_realloc_r>:
 80085f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f4:	4680      	mov	r8, r0
 80085f6:	4615      	mov	r5, r2
 80085f8:	460c      	mov	r4, r1
 80085fa:	b921      	cbnz	r1, 8008606 <_realloc_r+0x16>
 80085fc:	4611      	mov	r1, r2
 80085fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008602:	f7fe bfb7 	b.w	8007574 <_malloc_r>
 8008606:	b92a      	cbnz	r2, 8008614 <_realloc_r+0x24>
 8008608:	f7fe ff42 	bl	8007490 <_free_r>
 800860c:	2400      	movs	r4, #0
 800860e:	4620      	mov	r0, r4
 8008610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008614:	f000 f841 	bl	800869a <_malloc_usable_size_r>
 8008618:	4285      	cmp	r5, r0
 800861a:	4606      	mov	r6, r0
 800861c:	d802      	bhi.n	8008624 <_realloc_r+0x34>
 800861e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008622:	d8f4      	bhi.n	800860e <_realloc_r+0x1e>
 8008624:	4629      	mov	r1, r5
 8008626:	4640      	mov	r0, r8
 8008628:	f7fe ffa4 	bl	8007574 <_malloc_r>
 800862c:	4607      	mov	r7, r0
 800862e:	2800      	cmp	r0, #0
 8008630:	d0ec      	beq.n	800860c <_realloc_r+0x1c>
 8008632:	42b5      	cmp	r5, r6
 8008634:	462a      	mov	r2, r5
 8008636:	4621      	mov	r1, r4
 8008638:	bf28      	it	cs
 800863a:	4632      	movcs	r2, r6
 800863c:	f7fe f8c9 	bl	80067d2 <memcpy>
 8008640:	4621      	mov	r1, r4
 8008642:	4640      	mov	r0, r8
 8008644:	f7fe ff24 	bl	8007490 <_free_r>
 8008648:	463c      	mov	r4, r7
 800864a:	e7e0      	b.n	800860e <_realloc_r+0x1e>

0800864c <__ascii_wctomb>:
 800864c:	4603      	mov	r3, r0
 800864e:	4608      	mov	r0, r1
 8008650:	b141      	cbz	r1, 8008664 <__ascii_wctomb+0x18>
 8008652:	2aff      	cmp	r2, #255	@ 0xff
 8008654:	d904      	bls.n	8008660 <__ascii_wctomb+0x14>
 8008656:	228a      	movs	r2, #138	@ 0x8a
 8008658:	f04f 30ff 	mov.w	r0, #4294967295
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	4770      	bx	lr
 8008660:	2001      	movs	r0, #1
 8008662:	700a      	strb	r2, [r1, #0]
 8008664:	4770      	bx	lr
	...

08008668 <fiprintf>:
 8008668:	b40e      	push	{r1, r2, r3}
 800866a:	b503      	push	{r0, r1, lr}
 800866c:	4601      	mov	r1, r0
 800866e:	ab03      	add	r3, sp, #12
 8008670:	4805      	ldr	r0, [pc, #20]	@ (8008688 <fiprintf+0x20>)
 8008672:	f853 2b04 	ldr.w	r2, [r3], #4
 8008676:	6800      	ldr	r0, [r0, #0]
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	f7ff fd07 	bl	800808c <_vfiprintf_r>
 800867e:	b002      	add	sp, #8
 8008680:	f85d eb04 	ldr.w	lr, [sp], #4
 8008684:	b003      	add	sp, #12
 8008686:	4770      	bx	lr
 8008688:	200001e0 	.word	0x200001e0

0800868c <abort>:
 800868c:	2006      	movs	r0, #6
 800868e:	b508      	push	{r3, lr}
 8008690:	f000 f834 	bl	80086fc <raise>
 8008694:	2001      	movs	r0, #1
 8008696:	f7fa f990 	bl	80029ba <_exit>

0800869a <_malloc_usable_size_r>:
 800869a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800869e:	1f18      	subs	r0, r3, #4
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	bfbc      	itt	lt
 80086a4:	580b      	ldrlt	r3, [r1, r0]
 80086a6:	18c0      	addlt	r0, r0, r3
 80086a8:	4770      	bx	lr

080086aa <_raise_r>:
 80086aa:	291f      	cmp	r1, #31
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4605      	mov	r5, r0
 80086b0:	460c      	mov	r4, r1
 80086b2:	d904      	bls.n	80086be <_raise_r+0x14>
 80086b4:	2316      	movs	r3, #22
 80086b6:	6003      	str	r3, [r0, #0]
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	bd38      	pop	{r3, r4, r5, pc}
 80086be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086c0:	b112      	cbz	r2, 80086c8 <_raise_r+0x1e>
 80086c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086c6:	b94b      	cbnz	r3, 80086dc <_raise_r+0x32>
 80086c8:	4628      	mov	r0, r5
 80086ca:	f000 f831 	bl	8008730 <_getpid_r>
 80086ce:	4622      	mov	r2, r4
 80086d0:	4601      	mov	r1, r0
 80086d2:	4628      	mov	r0, r5
 80086d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086d8:	f000 b818 	b.w	800870c <_kill_r>
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d00a      	beq.n	80086f6 <_raise_r+0x4c>
 80086e0:	1c59      	adds	r1, r3, #1
 80086e2:	d103      	bne.n	80086ec <_raise_r+0x42>
 80086e4:	2316      	movs	r3, #22
 80086e6:	6003      	str	r3, [r0, #0]
 80086e8:	2001      	movs	r0, #1
 80086ea:	e7e7      	b.n	80086bc <_raise_r+0x12>
 80086ec:	2100      	movs	r1, #0
 80086ee:	4620      	mov	r0, r4
 80086f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086f4:	4798      	blx	r3
 80086f6:	2000      	movs	r0, #0
 80086f8:	e7e0      	b.n	80086bc <_raise_r+0x12>
	...

080086fc <raise>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	@ (8008708 <raise+0xc>)
 80086fe:	4601      	mov	r1, r0
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	f7ff bfd2 	b.w	80086aa <_raise_r>
 8008706:	bf00      	nop
 8008708:	200001e0 	.word	0x200001e0

0800870c <_kill_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	2300      	movs	r3, #0
 8008710:	4d06      	ldr	r5, [pc, #24]	@ (800872c <_kill_r+0x20>)
 8008712:	4604      	mov	r4, r0
 8008714:	4608      	mov	r0, r1
 8008716:	4611      	mov	r1, r2
 8008718:	602b      	str	r3, [r5, #0]
 800871a:	f7fa f93e 	bl	800299a <_kill>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	d102      	bne.n	8008728 <_kill_r+0x1c>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	b103      	cbz	r3, 8008728 <_kill_r+0x1c>
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	bf00      	nop
 800872c:	20001104 	.word	0x20001104

08008730 <_getpid_r>:
 8008730:	f7fa b92c 	b.w	800298c <_getpid>

08008734 <atan2f>:
 8008734:	f000 b88a 	b.w	800884c <__ieee754_atan2f>

08008738 <sqrtf>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4605      	mov	r5, r0
 800873c:	f000 f816 	bl	800876c <__ieee754_sqrtf>
 8008740:	4629      	mov	r1, r5
 8008742:	4604      	mov	r4, r0
 8008744:	4628      	mov	r0, r5
 8008746:	f7f8 fccd 	bl	80010e4 <__aeabi_fcmpun>
 800874a:	b968      	cbnz	r0, 8008768 <sqrtf+0x30>
 800874c:	2100      	movs	r1, #0
 800874e:	4628      	mov	r0, r5
 8008750:	f7f8 fca0 	bl	8001094 <__aeabi_fcmplt>
 8008754:	b140      	cbz	r0, 8008768 <sqrtf+0x30>
 8008756:	f7fe f801 	bl	800675c <__errno>
 800875a:	2321      	movs	r3, #33	@ 0x21
 800875c:	2100      	movs	r1, #0
 800875e:	6003      	str	r3, [r0, #0]
 8008760:	4608      	mov	r0, r1
 8008762:	f7f8 fbad 	bl	8000ec0 <__aeabi_fdiv>
 8008766:	4604      	mov	r4, r0
 8008768:	4620      	mov	r0, r4
 800876a:	bd38      	pop	{r3, r4, r5, pc}

0800876c <__ieee754_sqrtf>:
 800876c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008770:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008778:	4603      	mov	r3, r0
 800877a:	4604      	mov	r4, r0
 800877c:	d30a      	bcc.n	8008794 <__ieee754_sqrtf+0x28>
 800877e:	4601      	mov	r1, r0
 8008780:	f7f8 faea 	bl	8000d58 <__aeabi_fmul>
 8008784:	4601      	mov	r1, r0
 8008786:	4620      	mov	r0, r4
 8008788:	f7f8 f9de 	bl	8000b48 <__addsf3>
 800878c:	4604      	mov	r4, r0
 800878e:	4620      	mov	r0, r4
 8008790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008794:	2a00      	cmp	r2, #0
 8008796:	d0fa      	beq.n	800878e <__ieee754_sqrtf+0x22>
 8008798:	2800      	cmp	r0, #0
 800879a:	da06      	bge.n	80087aa <__ieee754_sqrtf+0x3e>
 800879c:	4601      	mov	r1, r0
 800879e:	f7f8 f9d1 	bl	8000b44 <__aeabi_fsub>
 80087a2:	4601      	mov	r1, r0
 80087a4:	f7f8 fb8c 	bl	8000ec0 <__aeabi_fdiv>
 80087a8:	e7f0      	b.n	800878c <__ieee754_sqrtf+0x20>
 80087aa:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 80087ae:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80087b2:	d03e      	beq.n	8008832 <__ieee754_sqrtf+0xc6>
 80087b4:	2400      	movs	r4, #0
 80087b6:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80087ba:	07ca      	lsls	r2, r1, #31
 80087bc:	f04f 0019 	mov.w	r0, #25
 80087c0:	4626      	mov	r6, r4
 80087c2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80087c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80087ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80087ce:	bf58      	it	pl
 80087d0:	005b      	lslpl	r3, r3, #1
 80087d2:	106d      	asrs	r5, r5, #1
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	1872      	adds	r2, r6, r1
 80087d8:	429a      	cmp	r2, r3
 80087da:	bfcf      	iteee	gt
 80087dc:	461a      	movgt	r2, r3
 80087de:	1856      	addle	r6, r2, r1
 80087e0:	1864      	addle	r4, r4, r1
 80087e2:	1a9a      	suble	r2, r3, r2
 80087e4:	3801      	subs	r0, #1
 80087e6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80087ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80087ee:	d1f2      	bne.n	80087d6 <__ieee754_sqrtf+0x6a>
 80087f0:	b1ba      	cbz	r2, 8008822 <__ieee754_sqrtf+0xb6>
 80087f2:	4e14      	ldr	r6, [pc, #80]	@ (8008844 <__ieee754_sqrtf+0xd8>)
 80087f4:	4f14      	ldr	r7, [pc, #80]	@ (8008848 <__ieee754_sqrtf+0xdc>)
 80087f6:	6830      	ldr	r0, [r6, #0]
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	f7f8 f9a3 	bl	8000b44 <__aeabi_fsub>
 80087fe:	f8d6 8000 	ldr.w	r8, [r6]
 8008802:	4601      	mov	r1, r0
 8008804:	4640      	mov	r0, r8
 8008806:	f7f8 fc4f 	bl	80010a8 <__aeabi_fcmple>
 800880a:	b150      	cbz	r0, 8008822 <__ieee754_sqrtf+0xb6>
 800880c:	6830      	ldr	r0, [r6, #0]
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	f7f8 f99a 	bl	8000b48 <__addsf3>
 8008814:	6836      	ldr	r6, [r6, #0]
 8008816:	4601      	mov	r1, r0
 8008818:	4630      	mov	r0, r6
 800881a:	f7f8 fc3b 	bl	8001094 <__aeabi_fcmplt>
 800881e:	b168      	cbz	r0, 800883c <__ieee754_sqrtf+0xd0>
 8008820:	3402      	adds	r4, #2
 8008822:	1064      	asrs	r4, r4, #1
 8008824:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8008828:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800882c:	e7af      	b.n	800878e <__ieee754_sqrtf+0x22>
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	3201      	adds	r2, #1
 8008832:	0218      	lsls	r0, r3, #8
 8008834:	d5fb      	bpl.n	800882e <__ieee754_sqrtf+0xc2>
 8008836:	3a01      	subs	r2, #1
 8008838:	1a89      	subs	r1, r1, r2
 800883a:	e7bb      	b.n	80087b4 <__ieee754_sqrtf+0x48>
 800883c:	3401      	adds	r4, #1
 800883e:	f024 0401 	bic.w	r4, r4, #1
 8008842:	e7ee      	b.n	8008822 <__ieee754_sqrtf+0xb6>
 8008844:	200003a0 	.word	0x200003a0
 8008848:	2000039c 	.word	0x2000039c

0800884c <__ieee754_atan2f>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8008852:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8008856:	4603      	mov	r3, r0
 8008858:	d805      	bhi.n	8008866 <__ieee754_atan2f+0x1a>
 800885a:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800885e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008862:	4607      	mov	r7, r0
 8008864:	d904      	bls.n	8008870 <__ieee754_atan2f+0x24>
 8008866:	4618      	mov	r0, r3
 8008868:	f7f8 f96e 	bl	8000b48 <__addsf3>
 800886c:	4603      	mov	r3, r0
 800886e:	e010      	b.n	8008892 <__ieee754_atan2f+0x46>
 8008870:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8008874:	d103      	bne.n	800887e <__ieee754_atan2f+0x32>
 8008876:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800887a:	f000 b86f 	b.w	800895c <atanf>
 800887e:	178c      	asrs	r4, r1, #30
 8008880:	f004 0402 	and.w	r4, r4, #2
 8008884:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008888:	b92a      	cbnz	r2, 8008896 <__ieee754_atan2f+0x4a>
 800888a:	2c02      	cmp	r4, #2
 800888c:	d04b      	beq.n	8008926 <__ieee754_atan2f+0xda>
 800888e:	2c03      	cmp	r4, #3
 8008890:	d04b      	beq.n	800892a <__ieee754_atan2f+0xde>
 8008892:	4618      	mov	r0, r3
 8008894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008896:	b91e      	cbnz	r6, 80088a0 <__ieee754_atan2f+0x54>
 8008898:	2f00      	cmp	r7, #0
 800889a:	da4c      	bge.n	8008936 <__ieee754_atan2f+0xea>
 800889c:	4b27      	ldr	r3, [pc, #156]	@ (800893c <__ieee754_atan2f+0xf0>)
 800889e:	e7f8      	b.n	8008892 <__ieee754_atan2f+0x46>
 80088a0:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80088a4:	d10e      	bne.n	80088c4 <__ieee754_atan2f+0x78>
 80088a6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80088aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80088ae:	d105      	bne.n	80088bc <__ieee754_atan2f+0x70>
 80088b0:	2c02      	cmp	r4, #2
 80088b2:	d83c      	bhi.n	800892e <__ieee754_atan2f+0xe2>
 80088b4:	4b22      	ldr	r3, [pc, #136]	@ (8008940 <__ieee754_atan2f+0xf4>)
 80088b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80088ba:	e7ea      	b.n	8008892 <__ieee754_atan2f+0x46>
 80088bc:	2c02      	cmp	r4, #2
 80088be:	d838      	bhi.n	8008932 <__ieee754_atan2f+0xe6>
 80088c0:	4b20      	ldr	r3, [pc, #128]	@ (8008944 <__ieee754_atan2f+0xf8>)
 80088c2:	e7f8      	b.n	80088b6 <__ieee754_atan2f+0x6a>
 80088c4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80088c8:	d0e6      	beq.n	8008898 <__ieee754_atan2f+0x4c>
 80088ca:	1b92      	subs	r2, r2, r6
 80088cc:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 80088d0:	ea4f 50e2 	mov.w	r0, r2, asr #23
 80088d4:	da17      	bge.n	8008906 <__ieee754_atan2f+0xba>
 80088d6:	2900      	cmp	r1, #0
 80088d8:	da01      	bge.n	80088de <__ieee754_atan2f+0x92>
 80088da:	303c      	adds	r0, #60	@ 0x3c
 80088dc:	db15      	blt.n	800890a <__ieee754_atan2f+0xbe>
 80088de:	4618      	mov	r0, r3
 80088e0:	f7f8 faee 	bl	8000ec0 <__aeabi_fdiv>
 80088e4:	f000 f946 	bl	8008b74 <fabsf>
 80088e8:	f000 f838 	bl	800895c <atanf>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2c01      	cmp	r4, #1
 80088f0:	d00d      	beq.n	800890e <__ieee754_atan2f+0xc2>
 80088f2:	2c02      	cmp	r4, #2
 80088f4:	d00e      	beq.n	8008914 <__ieee754_atan2f+0xc8>
 80088f6:	2c00      	cmp	r4, #0
 80088f8:	d0cb      	beq.n	8008892 <__ieee754_atan2f+0x46>
 80088fa:	4913      	ldr	r1, [pc, #76]	@ (8008948 <__ieee754_atan2f+0xfc>)
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7f8 f923 	bl	8000b48 <__addsf3>
 8008902:	4912      	ldr	r1, [pc, #72]	@ (800894c <__ieee754_atan2f+0x100>)
 8008904:	e00c      	b.n	8008920 <__ieee754_atan2f+0xd4>
 8008906:	4b12      	ldr	r3, [pc, #72]	@ (8008950 <__ieee754_atan2f+0x104>)
 8008908:	e7f1      	b.n	80088ee <__ieee754_atan2f+0xa2>
 800890a:	2300      	movs	r3, #0
 800890c:	e7ef      	b.n	80088ee <__ieee754_atan2f+0xa2>
 800890e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008912:	e7be      	b.n	8008892 <__ieee754_atan2f+0x46>
 8008914:	490c      	ldr	r1, [pc, #48]	@ (8008948 <__ieee754_atan2f+0xfc>)
 8008916:	4618      	mov	r0, r3
 8008918:	f7f8 f916 	bl	8000b48 <__addsf3>
 800891c:	4601      	mov	r1, r0
 800891e:	480b      	ldr	r0, [pc, #44]	@ (800894c <__ieee754_atan2f+0x100>)
 8008920:	f7f8 f910 	bl	8000b44 <__aeabi_fsub>
 8008924:	e7a2      	b.n	800886c <__ieee754_atan2f+0x20>
 8008926:	4b09      	ldr	r3, [pc, #36]	@ (800894c <__ieee754_atan2f+0x100>)
 8008928:	e7b3      	b.n	8008892 <__ieee754_atan2f+0x46>
 800892a:	4b0a      	ldr	r3, [pc, #40]	@ (8008954 <__ieee754_atan2f+0x108>)
 800892c:	e7b1      	b.n	8008892 <__ieee754_atan2f+0x46>
 800892e:	4b0a      	ldr	r3, [pc, #40]	@ (8008958 <__ieee754_atan2f+0x10c>)
 8008930:	e7af      	b.n	8008892 <__ieee754_atan2f+0x46>
 8008932:	2300      	movs	r3, #0
 8008934:	e7ad      	b.n	8008892 <__ieee754_atan2f+0x46>
 8008936:	4b06      	ldr	r3, [pc, #24]	@ (8008950 <__ieee754_atan2f+0x104>)
 8008938:	e7ab      	b.n	8008892 <__ieee754_atan2f+0x46>
 800893a:	bf00      	nop
 800893c:	bfc90fdb 	.word	0xbfc90fdb
 8008940:	080097c4 	.word	0x080097c4
 8008944:	080097b8 	.word	0x080097b8
 8008948:	33bbbd2e 	.word	0x33bbbd2e
 800894c:	40490fdb 	.word	0x40490fdb
 8008950:	3fc90fdb 	.word	0x3fc90fdb
 8008954:	c0490fdb 	.word	0xc0490fdb
 8008958:	3f490fdb 	.word	0x3f490fdb

0800895c <atanf>:
 800895c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008960:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8008964:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8008968:	4604      	mov	r4, r0
 800896a:	4680      	mov	r8, r0
 800896c:	d30e      	bcc.n	800898c <atanf+0x30>
 800896e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8008972:	d904      	bls.n	800897e <atanf+0x22>
 8008974:	4601      	mov	r1, r0
 8008976:	f7f8 f8e7 	bl	8000b48 <__addsf3>
 800897a:	4604      	mov	r4, r0
 800897c:	e003      	b.n	8008986 <atanf+0x2a>
 800897e:	2800      	cmp	r0, #0
 8008980:	f340 80ce 	ble.w	8008b20 <atanf+0x1c4>
 8008984:	4c67      	ldr	r4, [pc, #412]	@ (8008b24 <atanf+0x1c8>)
 8008986:	4620      	mov	r0, r4
 8008988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800898c:	4b66      	ldr	r3, [pc, #408]	@ (8008b28 <atanf+0x1cc>)
 800898e:	429d      	cmp	r5, r3
 8008990:	d80e      	bhi.n	80089b0 <atanf+0x54>
 8008992:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 8008996:	d208      	bcs.n	80089aa <atanf+0x4e>
 8008998:	4964      	ldr	r1, [pc, #400]	@ (8008b2c <atanf+0x1d0>)
 800899a:	f7f8 f8d5 	bl	8000b48 <__addsf3>
 800899e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80089a2:	f7f8 fb95 	bl	80010d0 <__aeabi_fcmpgt>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d1ed      	bne.n	8008986 <atanf+0x2a>
 80089aa:	f04f 36ff 	mov.w	r6, #4294967295
 80089ae:	e01c      	b.n	80089ea <atanf+0x8e>
 80089b0:	f000 f8e0 	bl	8008b74 <fabsf>
 80089b4:	4b5e      	ldr	r3, [pc, #376]	@ (8008b30 <atanf+0x1d4>)
 80089b6:	4604      	mov	r4, r0
 80089b8:	429d      	cmp	r5, r3
 80089ba:	d87c      	bhi.n	8008ab6 <atanf+0x15a>
 80089bc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80089c0:	429d      	cmp	r5, r3
 80089c2:	d867      	bhi.n	8008a94 <atanf+0x138>
 80089c4:	4601      	mov	r1, r0
 80089c6:	f7f8 f8bf 	bl	8000b48 <__addsf3>
 80089ca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80089ce:	f7f8 f8b9 	bl	8000b44 <__aeabi_fsub>
 80089d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80089d6:	4605      	mov	r5, r0
 80089d8:	4620      	mov	r0, r4
 80089da:	f7f8 f8b5 	bl	8000b48 <__addsf3>
 80089de:	4601      	mov	r1, r0
 80089e0:	4628      	mov	r0, r5
 80089e2:	f7f8 fa6d 	bl	8000ec0 <__aeabi_fdiv>
 80089e6:	2600      	movs	r6, #0
 80089e8:	4604      	mov	r4, r0
 80089ea:	4621      	mov	r1, r4
 80089ec:	4620      	mov	r0, r4
 80089ee:	f7f8 f9b3 	bl	8000d58 <__aeabi_fmul>
 80089f2:	4601      	mov	r1, r0
 80089f4:	4607      	mov	r7, r0
 80089f6:	f7f8 f9af 	bl	8000d58 <__aeabi_fmul>
 80089fa:	4605      	mov	r5, r0
 80089fc:	494d      	ldr	r1, [pc, #308]	@ (8008b34 <atanf+0x1d8>)
 80089fe:	f7f8 f9ab 	bl	8000d58 <__aeabi_fmul>
 8008a02:	494d      	ldr	r1, [pc, #308]	@ (8008b38 <atanf+0x1dc>)
 8008a04:	f7f8 f8a0 	bl	8000b48 <__addsf3>
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f8 f9a5 	bl	8000d58 <__aeabi_fmul>
 8008a0e:	494b      	ldr	r1, [pc, #300]	@ (8008b3c <atanf+0x1e0>)
 8008a10:	f7f8 f89a 	bl	8000b48 <__addsf3>
 8008a14:	4629      	mov	r1, r5
 8008a16:	f7f8 f99f 	bl	8000d58 <__aeabi_fmul>
 8008a1a:	4949      	ldr	r1, [pc, #292]	@ (8008b40 <atanf+0x1e4>)
 8008a1c:	f7f8 f894 	bl	8000b48 <__addsf3>
 8008a20:	4629      	mov	r1, r5
 8008a22:	f7f8 f999 	bl	8000d58 <__aeabi_fmul>
 8008a26:	4947      	ldr	r1, [pc, #284]	@ (8008b44 <atanf+0x1e8>)
 8008a28:	f7f8 f88e 	bl	8000b48 <__addsf3>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7f8 f993 	bl	8000d58 <__aeabi_fmul>
 8008a32:	4945      	ldr	r1, [pc, #276]	@ (8008b48 <atanf+0x1ec>)
 8008a34:	f7f8 f888 	bl	8000b48 <__addsf3>
 8008a38:	4639      	mov	r1, r7
 8008a3a:	f7f8 f98d 	bl	8000d58 <__aeabi_fmul>
 8008a3e:	4943      	ldr	r1, [pc, #268]	@ (8008b4c <atanf+0x1f0>)
 8008a40:	4607      	mov	r7, r0
 8008a42:	4628      	mov	r0, r5
 8008a44:	f7f8 f988 	bl	8000d58 <__aeabi_fmul>
 8008a48:	4941      	ldr	r1, [pc, #260]	@ (8008b50 <atanf+0x1f4>)
 8008a4a:	f7f8 f87b 	bl	8000b44 <__aeabi_fsub>
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f7f8 f982 	bl	8000d58 <__aeabi_fmul>
 8008a54:	493f      	ldr	r1, [pc, #252]	@ (8008b54 <atanf+0x1f8>)
 8008a56:	f7f8 f875 	bl	8000b44 <__aeabi_fsub>
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	f7f8 f97c 	bl	8000d58 <__aeabi_fmul>
 8008a60:	493d      	ldr	r1, [pc, #244]	@ (8008b58 <atanf+0x1fc>)
 8008a62:	f7f8 f86f 	bl	8000b44 <__aeabi_fsub>
 8008a66:	4629      	mov	r1, r5
 8008a68:	f7f8 f976 	bl	8000d58 <__aeabi_fmul>
 8008a6c:	493b      	ldr	r1, [pc, #236]	@ (8008b5c <atanf+0x200>)
 8008a6e:	f7f8 f869 	bl	8000b44 <__aeabi_fsub>
 8008a72:	4629      	mov	r1, r5
 8008a74:	f7f8 f970 	bl	8000d58 <__aeabi_fmul>
 8008a78:	4601      	mov	r1, r0
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	f7f8 f864 	bl	8000b48 <__addsf3>
 8008a80:	4621      	mov	r1, r4
 8008a82:	f7f8 f969 	bl	8000d58 <__aeabi_fmul>
 8008a86:	1c73      	adds	r3, r6, #1
 8008a88:	4601      	mov	r1, r0
 8008a8a:	d133      	bne.n	8008af4 <atanf+0x198>
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f7f8 f859 	bl	8000b44 <__aeabi_fsub>
 8008a92:	e772      	b.n	800897a <atanf+0x1e>
 8008a94:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008a98:	f7f8 f854 	bl	8000b44 <__aeabi_fsub>
 8008a9c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7f8 f850 	bl	8000b48 <__addsf3>
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7f8 fa08 	bl	8000ec0 <__aeabi_fdiv>
 8008ab0:	2601      	movs	r6, #1
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	e799      	b.n	80089ea <atanf+0x8e>
 8008ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8008b60 <atanf+0x204>)
 8008ab8:	429d      	cmp	r5, r3
 8008aba:	d814      	bhi.n	8008ae6 <atanf+0x18a>
 8008abc:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008ac0:	f7f8 f840 	bl	8000b44 <__aeabi_fsub>
 8008ac4:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008ac8:	4605      	mov	r5, r0
 8008aca:	4620      	mov	r0, r4
 8008acc:	f7f8 f944 	bl	8000d58 <__aeabi_fmul>
 8008ad0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008ad4:	f7f8 f838 	bl	8000b48 <__addsf3>
 8008ad8:	4601      	mov	r1, r0
 8008ada:	4628      	mov	r0, r5
 8008adc:	f7f8 f9f0 	bl	8000ec0 <__aeabi_fdiv>
 8008ae0:	2602      	movs	r6, #2
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	e781      	b.n	80089ea <atanf+0x8e>
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	481e      	ldr	r0, [pc, #120]	@ (8008b64 <atanf+0x208>)
 8008aea:	f7f8 f9e9 	bl	8000ec0 <__aeabi_fdiv>
 8008aee:	2603      	movs	r6, #3
 8008af0:	4604      	mov	r4, r0
 8008af2:	e77a      	b.n	80089ea <atanf+0x8e>
 8008af4:	4b1c      	ldr	r3, [pc, #112]	@ (8008b68 <atanf+0x20c>)
 8008af6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008afa:	f7f8 f823 	bl	8000b44 <__aeabi_fsub>
 8008afe:	4621      	mov	r1, r4
 8008b00:	f7f8 f820 	bl	8000b44 <__aeabi_fsub>
 8008b04:	4b19      	ldr	r3, [pc, #100]	@ (8008b6c <atanf+0x210>)
 8008b06:	4601      	mov	r1, r0
 8008b08:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b0c:	f7f8 f81a 	bl	8000b44 <__aeabi_fsub>
 8008b10:	f1b8 0f00 	cmp.w	r8, #0
 8008b14:	4604      	mov	r4, r0
 8008b16:	f6bf af36 	bge.w	8008986 <atanf+0x2a>
 8008b1a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008b1e:	e732      	b.n	8008986 <atanf+0x2a>
 8008b20:	4c13      	ldr	r4, [pc, #76]	@ (8008b70 <atanf+0x214>)
 8008b22:	e730      	b.n	8008986 <atanf+0x2a>
 8008b24:	3fc90fdb 	.word	0x3fc90fdb
 8008b28:	3edfffff 	.word	0x3edfffff
 8008b2c:	7149f2ca 	.word	0x7149f2ca
 8008b30:	3f97ffff 	.word	0x3f97ffff
 8008b34:	3c8569d7 	.word	0x3c8569d7
 8008b38:	3d4bda59 	.word	0x3d4bda59
 8008b3c:	3d886b35 	.word	0x3d886b35
 8008b40:	3dba2e6e 	.word	0x3dba2e6e
 8008b44:	3e124925 	.word	0x3e124925
 8008b48:	3eaaaaab 	.word	0x3eaaaaab
 8008b4c:	bd15a221 	.word	0xbd15a221
 8008b50:	3d6ef16b 	.word	0x3d6ef16b
 8008b54:	3d9d8795 	.word	0x3d9d8795
 8008b58:	3de38e38 	.word	0x3de38e38
 8008b5c:	3e4ccccd 	.word	0x3e4ccccd
 8008b60:	401bffff 	.word	0x401bffff
 8008b64:	bf800000 	.word	0xbf800000
 8008b68:	080097d0 	.word	0x080097d0
 8008b6c:	080097e0 	.word	0x080097e0
 8008b70:	bfc90fdb 	.word	0xbfc90fdb

08008b74 <fabsf>:
 8008b74:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008b78:	4770      	bx	lr
	...

08008b7c <_init>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr

08008b88 <_fini>:
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	bf00      	nop
 8008b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8e:	bc08      	pop	{r3}
 8008b90:	469e      	mov	lr, r3
 8008b92:	4770      	bx	lr
