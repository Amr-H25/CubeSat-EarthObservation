
ADCS_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  08009f00  08009f00  0000af00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a630  0800a630  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a630  0800a630  0000b630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a638  0800a638  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a638  0800a638  0000b638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a63c  0800a63c  0000b63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a640  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  200001d8  0800a814  0000c1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800a814  0000c8c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c75f  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e07  00000000  00000000  0002895c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000aec6  00000000  00000000  0002c763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00037630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e6  00000000  00000000  00038740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a85d  00000000  00000000  00039926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e908  00000000  00000000  00054183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009540b  00000000  00000000  00072a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107e96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004554  00000000  00000000  00107edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0010c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ee4 	.word	0x08009ee4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009ee4 	.word	0x08009ee4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <GPS_Init>:
#include "math.h"

/**
 * @brief Initialize GPS driver
 */
GPS_Status GPS_Init(GPS_Handle* gps, UART_HandleTypeDef* huart) {
 80010dc:	b538      	push	{r3, r4, r5, lr}
 80010de:	460c      	mov	r4, r1
    if (gps == NULL || huart == NULL) {
 80010e0:	4605      	mov	r5, r0
 80010e2:	b180      	cbz	r0, 8001106 <GPS_Init+0x2a>
 80010e4:	b179      	cbz	r1, 8001106 <GPS_Init+0x2a>
        return GPS_ERROR;
    }

    // Initialize GPS handle
    memset(gps, 0, sizeof(GPS_Handle));
 80010e6:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80010ea:	2100      	movs	r1, #0
 80010ec:	f006 f96d 	bl	80073ca <memset>
    gps->buffer_tail = 0;
    gps->nmea_index = 0;
    gps->fix_available = 0;

    // Start UART reception in interrupt mode (single byte)
    if (HAL_UART_Receive_IT(gps->huart, &gps->rx_byte, 1) != HAL_OK) {
 80010f0:	2201      	movs	r2, #1
 80010f2:	4620      	mov	r0, r4
    gps->huart = huart;
 80010f4:	602c      	str	r4, [r5, #0]
    if (HAL_UART_Receive_IT(gps->huart, &gps->rx_byte, 1) != HAL_OK) {
 80010f6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80010fa:	f004 fd10 	bl	8005b1e <HAL_UART_Receive_IT>
 80010fe:	3800      	subs	r0, #0
 8001100:	bf18      	it	ne
 8001102:	2001      	movne	r0, #1
        return GPS_ERROR;
    }

    return GPS_OK;
}
 8001104:	bd38      	pop	{r3, r4, r5, pc}
        return GPS_ERROR;
 8001106:	2001      	movs	r0, #1
 8001108:	e7fc      	b.n	8001104 <GPS_Init+0x28>

0800110a <GPS_UART_RxCpltCallback>:
/**
 * @brief UART RX complete callback - to be called from HAL_UART_RxCpltCallback
 */
void GPS_UART_RxCpltCallback(GPS_Handle* gps) {
    // Add received byte to circular buffer
    gps->buffer[gps->buffer_head] = gps->rx_byte;
 800110a:	f8b0 3204 	ldrh.w	r3, [r0, #516]	@ 0x204
 800110e:	f890 1208 	ldrb.w	r1, [r0, #520]	@ 0x208
 8001112:	18c2      	adds	r2, r0, r3
    gps->buffer_head = (gps->buffer_head + 1) % GPS_BUFFER_SIZE;
 8001114:	3301      	adds	r3, #1
    gps->buffer[gps->buffer_head] = gps->rx_byte;
 8001116:	7111      	strb	r1, [r2, #4]
    gps->buffer_head = (gps->buffer_head + 1) % GPS_BUFFER_SIZE;
 8001118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800111c:	f8a0 3204 	strh.w	r3, [r0, #516]	@ 0x204

    // Restart UART reception
    HAL_UART_Receive_IT(gps->huart, &gps->rx_byte, 1);
 8001120:	f500 7102 	add.w	r1, r0, #520	@ 0x208
 8001124:	2201      	movs	r2, #1
 8001126:	6800      	ldr	r0, [r0, #0]
 8001128:	f004 bcf9 	b.w	8005b1e <HAL_UART_Receive_IT>
 800112c:	0000      	movs	r0, r0
	...

08001130 <GPS_ParseGPGGA>:
/**
 * @brief Parse GPGGA sentence (Global Positioning System Fix Data)
 * Format: $GPGGA,time,lat,N/S,lon,E/W,fix,sats,hdop,alt,M,geoid,M,age,ref*cs
 * Example: $GPGGA,045104.000,3014.1985,N,09749.2873,W,1,09,1.2,211.6,M,-22.5,M,,000062
 */
GPS_Status GPS_ParseGPGGA(GPS_Handle* gps, char* nmea, UART_HandleTypeDef* debug_huart) {
 8001130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char nmea_copy[GPS_NMEA_SIZE]; // Create a copy of the NMEA string to avoid modifying the original
    char debug_buffer[128]; // Local buffer for debug messages

    // Copy the NMEA string to avoid strtok_r modifying the original
    strncpy(nmea_copy, nmea, GPS_NMEA_SIZE - 1);
    nmea_copy[GPS_NMEA_SIZE - 1] = '\0'; // Ensure null termination
 8001134:	f04f 0b00 	mov.w	fp, #0
GPS_Status GPS_ParseGPGGA(GPS_Handle* gps, char* nmea, UART_HandleTypeDef* debug_huart) {
 8001138:	b0cd      	sub	sp, #308	@ 0x134
 800113a:	4605      	mov	r5, r0
 800113c:	4692      	mov	sl, r2
    strncpy(nmea_copy, nmea, GPS_NMEA_SIZE - 1);
 800113e:	a80c      	add	r0, sp, #48	@ 0x30
 8001140:	227f      	movs	r2, #127	@ 0x7f
 8001142:	f006 f95c 	bl	80073fe <strncpy>

    // First token is the message ID ($GPGGA)
    token = strtok_r(nmea_copy, ",", &saveptr);
 8001146:	49be      	ldr	r1, [pc, #760]	@ (8001440 <GPS_ParseGPGGA+0x310>)
 8001148:	aa0b      	add	r2, sp, #44	@ 0x2c
 800114a:	a80c      	add	r0, sp, #48	@ 0x30
    nmea_copy[GPS_NMEA_SIZE - 1] = '\0'; // Ensure null termination
 800114c:	f88d b0af 	strb.w	fp, [sp, #175]	@ 0xaf
    token = strtok_r(nmea_copy, ",", &saveptr);
 8001150:	f006 f990 	bl	8007474 <strtok_r>
    if (token == NULL) return GPS_INVALID_DATA;
 8001154:	2800      	cmp	r0, #0
 8001156:	f000 819d 	beq.w	8001494 <GPS_ParseGPGGA+0x364>

    // Parse remaining tokens
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
 800115a:	2000      	movs	r0, #0
 800115c:	49b9      	ldr	r1, [pc, #740]	@ (8001444 <GPS_ParseGPGGA+0x314>)
 800115e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001160:	f006 f988 	bl	8007474 <strtok_r>
 8001164:	4604      	mov	r4, r0
 8001166:	b910      	cbnz	r0, 800116e <GPS_ParseGPGGA+0x3e>
                break;
        }
    }

    return GPS_OK;
}
 8001168:	b04d      	add	sp, #308	@ 0x134
 800116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        token_index++;
 800116e:	f10b 0b01 	add.w	fp, fp, #1
        switch (token_index) {
 8001172:	f10b 33ff 	add.w	r3, fp, #4294967295
 8001176:	2b08      	cmp	r3, #8
 8001178:	d8ef      	bhi.n	800115a <GPS_ParseGPGGA+0x2a>
 800117a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800117e:	0009      	.short	0x0009
 8001180:	00b60037 	.word	0x00b60037
 8001184:	013e00c7 	.word	0x013e00c7
 8001188:	0179016b 	.word	0x0179016b
 800118c:	0185017f 	.word	0x0185017f
                if (strlen(token) >= 6) {
 8001190:	4620      	mov	r0, r4
 8001192:	f7fe ffdd 	bl	8000150 <strlen>
 8001196:	2805      	cmp	r0, #5
 8001198:	d9df      	bls.n	800115a <GPS_ParseGPGGA+0x2a>
                    gps->time.hour = (token[0] - '0') * 10 + (token[1] - '0');
 800119a:	7823      	ldrb	r3, [r4, #0]
 800119c:	7862      	ldrb	r2, [r4, #1]
 800119e:	3b30      	subs	r3, #48	@ 0x30
 80011a0:	3a30      	subs	r2, #48	@ 0x30
 80011a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011a6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80011aa:	f885 32d0 	strb.w	r3, [r5, #720]	@ 0x2d0
                    gps->time.minute = (token[2] - '0') * 10 + (token[3] - '0');
 80011ae:	78a3      	ldrb	r3, [r4, #2]
 80011b0:	78e2      	ldrb	r2, [r4, #3]
 80011b2:	3b30      	subs	r3, #48	@ 0x30
 80011b4:	3a30      	subs	r2, #48	@ 0x30
 80011b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80011be:	f885 32d1 	strb.w	r3, [r5, #721]	@ 0x2d1
                    gps->time.second = (token[4] - '0') * 10 + (token[5] - '0');
 80011c2:	7923      	ldrb	r3, [r4, #4]
 80011c4:	7962      	ldrb	r2, [r4, #5]
 80011c6:	3b30      	subs	r3, #48	@ 0x30
 80011c8:	3a30      	subs	r2, #48	@ 0x30
 80011ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011ce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                    if (strlen(token) > 7) { // Check if milliseconds present
 80011d2:	4620      	mov	r0, r4
                    gps->time.second = (token[4] - '0') * 10 + (token[5] - '0');
 80011d4:	f885 32d2 	strb.w	r3, [r5, #722]	@ 0x2d2
                    if (strlen(token) > 7) { // Check if milliseconds present
 80011d8:	f7fe ffba 	bl	8000150 <strlen>
 80011dc:	2807      	cmp	r0, #7
 80011de:	d9bc      	bls.n	800115a <GPS_ParseGPGGA+0x2a>
                        gps->time.millisecond = atoi(&token[7]);
 80011e0:	1de0      	adds	r0, r4, #7
 80011e2:	f004 fcb0 	bl	8005b46 <atoi>
 80011e6:	f8a5 02d4 	strh.w	r0, [r5, #724]	@ 0x2d4
 80011ea:	e7b6      	b.n	800115a <GPS_ParseGPGGA+0x2a>
                if (strlen(token) > 0) {
 80011ec:	7823      	ldrb	r3, [r4, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0b3      	beq.n	800115a <GPS_ParseGPGGA+0x2a>
                    int degrees = ((token[0] - '0') * 10) + (token[1] - '0');
 80011f2:	200a      	movs	r0, #10
 80011f4:	f894 8001 	ldrb.w	r8, [r4, #1]
 80011f8:	3b30      	subs	r3, #48	@ 0x30
 80011fa:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 80011fe:	fb00 8803 	mla	r8, r0, r3, r8
                    double minutes = ((token[2] - '0') * 10) + (token[3] - '0');  // whole minutes
 8001202:	78a2      	ldrb	r2, [r4, #2]
 8001204:	78e3      	ldrb	r3, [r4, #3]
 8001206:	3a30      	subs	r2, #48	@ 0x30
 8001208:	3b30      	subs	r3, #48	@ 0x30
 800120a:	fb00 3002 	mla	r0, r0, r2, r3
 800120e:	f7ff f8f9 	bl	8000404 <__aeabi_i2d>
                    if (token[4] == '.') {  // handle decimal part
 8001212:	7923      	ldrb	r3, [r4, #4]
                    double minutes = ((token[2] - '0') * 10) + (token[3] - '0');  // whole minutes
 8001214:	4606      	mov	r6, r0
                    if (token[4] == '.') {  // handle decimal part
 8001216:	2b2e      	cmp	r3, #46	@ 0x2e
                    double minutes = ((token[2] - '0') * 10) + (token[3] - '0');  // whole minutes
 8001218:	460f      	mov	r7, r1
                    if (token[4] == '.') {  // handle decimal part
 800121a:	d13b      	bne.n	8001294 <GPS_ParseGPGGA+0x164>
                        minutes += (token[5] - '0') * 0.1000;
 800121c:	7960      	ldrb	r0, [r4, #5]
 800121e:	3830      	subs	r0, #48	@ 0x30
 8001220:	f7ff f8f0 	bl	8000404 <__aeabi_i2d>
 8001224:	a37e      	add	r3, pc, #504	@ (adr r3, 8001420 <GPS_ParseGPGGA+0x2f0>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f955 	bl	80004d8 <__aeabi_dmul>
 800122e:	4632      	mov	r2, r6
 8001230:	463b      	mov	r3, r7
 8001232:	f7fe ff9b 	bl	800016c <__adddf3>
 8001236:	4606      	mov	r6, r0
 8001238:	460f      	mov	r7, r1
                        minutes += (token[6] - '0') * 0.0100;
 800123a:	79a0      	ldrb	r0, [r4, #6]
 800123c:	3830      	subs	r0, #48	@ 0x30
 800123e:	f7ff f8e1 	bl	8000404 <__aeabi_i2d>
 8001242:	a379      	add	r3, pc, #484	@ (adr r3, 8001428 <GPS_ParseGPGGA+0x2f8>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	f7ff f946 	bl	80004d8 <__aeabi_dmul>
 800124c:	4632      	mov	r2, r6
 800124e:	463b      	mov	r3, r7
 8001250:	f7fe ff8c 	bl	800016c <__adddf3>
 8001254:	4606      	mov	r6, r0
 8001256:	460f      	mov	r7, r1
                        minutes += (token[7] - '0') * 0.0010;
 8001258:	79e0      	ldrb	r0, [r4, #7]
 800125a:	3830      	subs	r0, #48	@ 0x30
 800125c:	f7ff f8d2 	bl	8000404 <__aeabi_i2d>
 8001260:	a373      	add	r3, pc, #460	@ (adr r3, 8001430 <GPS_ParseGPGGA+0x300>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f937 	bl	80004d8 <__aeabi_dmul>
 800126a:	4632      	mov	r2, r6
 800126c:	463b      	mov	r3, r7
 800126e:	f7fe ff7d 	bl	800016c <__adddf3>
 8001272:	4606      	mov	r6, r0
 8001274:	460f      	mov	r7, r1
                        minutes += (token[8] - '0') * 0.0001;
 8001276:	7a20      	ldrb	r0, [r4, #8]
 8001278:	3830      	subs	r0, #48	@ 0x30
 800127a:	f7ff f8c3 	bl	8000404 <__aeabi_i2d>
 800127e:	a36e      	add	r3, pc, #440	@ (adr r3, 8001438 <GPS_ParseGPGGA+0x308>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff f928 	bl	80004d8 <__aeabi_dmul>
 8001288:	4632      	mov	r2, r6
 800128a:	463b      	mov	r3, r7
 800128c:	f7fe ff6e 	bl	800016c <__adddf3>
 8001290:	4606      	mov	r6, r0
 8001292:	460f      	mov	r7, r1
                    gps->position.latitude = degrees + (minutes / 60.0);
 8001294:	4640      	mov	r0, r8
 8001296:	f7ff f8b5 	bl	8000404 <__aeabi_i2d>
 800129a:	2200      	movs	r2, #0
 800129c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80012a0:	4b69      	ldr	r3, [pc, #420]	@ (8001448 <GPS_ParseGPGGA+0x318>)
 80012a2:	4630      	mov	r0, r6
 80012a4:	4639      	mov	r1, r7
 80012a6:	f7ff fa41 	bl	800072c <__aeabi_ddiv>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80012b2:	f7fe ff5b 	bl	800016c <__adddf3>
 80012b6:	e9c5 01a4 	strd	r0, r1, [r5, #656]	@ 0x290
                    if (debug_huart != NULL) {
 80012ba:	f1ba 0f00 	cmp.w	sl, #0
 80012be:	f43f af4c 	beq.w	800115a <GPS_ParseGPGGA+0x2a>
                        sprintf(debug_buffer, "Debug Lat: str=%s, deg=%d, min=%.4f, final=%.6f\r\n",
 80012c2:	4643      	mov	r3, r8
 80012c4:	4622      	mov	r2, r4
 80012c6:	e9cd 6700 	strd	r6, r7, [sp]
 80012ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012ce:	495f      	ldr	r1, [pc, #380]	@ (800144c <GPS_ParseGPGGA+0x31c>)
                        sprintf(debug_buffer, "Debug Lon: str=%s, deg=%d, min=%.4f, final=%.6f\r\n",
 80012d0:	a82c      	add	r0, sp, #176	@ 0xb0
 80012d2:	f006 f817 	bl	8007304 <siprintf>
                        HAL_UART_Transmit(debug_huart, (uint8_t*)debug_buffer, strlen(debug_buffer), 100);
 80012d6:	a82c      	add	r0, sp, #176	@ 0xb0
 80012d8:	f7fe ff3a 	bl	8000150 <strlen>
 80012dc:	2364      	movs	r3, #100	@ 0x64
 80012de:	b282      	uxth	r2, r0
 80012e0:	a92c      	add	r1, sp, #176	@ 0xb0
 80012e2:	4650      	mov	r0, sl
 80012e4:	f004 f9f9 	bl	80056da <HAL_UART_Transmit>
 80012e8:	e737      	b.n	800115a <GPS_ParseGPGGA+0x2a>
                if (token[0] == 'S') {
 80012ea:	7823      	ldrb	r3, [r4, #0]
 80012ec:	2b53      	cmp	r3, #83	@ 0x53
 80012ee:	f47f af34 	bne.w	800115a <GPS_ParseGPGGA+0x2a>
                    gps->position.latitude = -gps->position.latitude;
 80012f2:	f8d5 3290 	ldr.w	r3, [r5, #656]	@ 0x290
 80012f6:	9304      	str	r3, [sp, #16]
 80012f8:	f8d5 3294 	ldr.w	r3, [r5, #660]	@ 0x294
 80012fc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001300:	9305      	str	r3, [sp, #20]
 8001302:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8001306:	e9c5 34a4 	strd	r3, r4, [r5, #656]	@ 0x290
 800130a:	e726      	b.n	800115a <GPS_ParseGPGGA+0x2a>
                if (strlen(token) > 0) {
 800130c:	7826      	ldrb	r6, [r4, #0]
 800130e:	2e00      	cmp	r6, #0
 8001310:	f43f af23 	beq.w	800115a <GPS_ParseGPGGA+0x2a>
                    int degrees = ((token[0] - '0') * 100) +
 8001314:	2364      	movs	r3, #100	@ 0x64
                                 ((token[1] - '0') * 10) +
 8001316:	220a      	movs	r2, #10
                    int degrees = ((token[0] - '0') * 100) +
 8001318:	3e30      	subs	r6, #48	@ 0x30
 800131a:	435e      	muls	r6, r3
                                 ((token[1] - '0') * 10) +
 800131c:	7861      	ldrb	r1, [r4, #1]
                                 (token[2] - '0');
 800131e:	78a3      	ldrb	r3, [r4, #2]
                                 ((token[1] - '0') * 10) +
 8001320:	3930      	subs	r1, #48	@ 0x30
                    int degrees = ((token[0] - '0') * 100) +
 8001322:	fb02 6601 	mla	r6, r2, r1, r6
                                 (token[2] - '0');
 8001326:	3b30      	subs	r3, #48	@ 0x30
                    double minutes = ((token[3] - '0') * 10) + (token[4] - '0');  // whole minutes
 8001328:	78e0      	ldrb	r0, [r4, #3]
                    int degrees = ((token[0] - '0') * 100) +
 800132a:	441e      	add	r6, r3
                    double minutes = ((token[3] - '0') * 10) + (token[4] - '0');  // whole minutes
 800132c:	7923      	ldrb	r3, [r4, #4]
 800132e:	3830      	subs	r0, #48	@ 0x30
 8001330:	3b30      	subs	r3, #48	@ 0x30
 8001332:	fb02 3000 	mla	r0, r2, r0, r3
 8001336:	f7ff f865 	bl	8000404 <__aeabi_i2d>
                    if (token[5] == '.') {  // handle decimal part
 800133a:	7963      	ldrb	r3, [r4, #5]
                    double minutes = ((token[3] - '0') * 10) + (token[4] - '0');  // whole minutes
 800133c:	4680      	mov	r8, r0
                    if (token[5] == '.') {  // handle decimal part
 800133e:	2b2e      	cmp	r3, #46	@ 0x2e
                    double minutes = ((token[3] - '0') * 10) + (token[4] - '0');  // whole minutes
 8001340:	4689      	mov	r9, r1
                    if (token[5] == '.') {  // handle decimal part
 8001342:	d13b      	bne.n	80013bc <GPS_ParseGPGGA+0x28c>
                        minutes += (token[6] - '0') * 0.1000;
 8001344:	79a0      	ldrb	r0, [r4, #6]
 8001346:	3830      	subs	r0, #48	@ 0x30
 8001348:	f7ff f85c 	bl	8000404 <__aeabi_i2d>
 800134c:	a334      	add	r3, pc, #208	@ (adr r3, 8001420 <GPS_ParseGPGGA+0x2f0>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f8c1 	bl	80004d8 <__aeabi_dmul>
 8001356:	4642      	mov	r2, r8
 8001358:	464b      	mov	r3, r9
 800135a:	f7fe ff07 	bl	800016c <__adddf3>
 800135e:	4680      	mov	r8, r0
 8001360:	4689      	mov	r9, r1
                        minutes += (token[7] - '0') * 0.0100;
 8001362:	79e0      	ldrb	r0, [r4, #7]
 8001364:	3830      	subs	r0, #48	@ 0x30
 8001366:	f7ff f84d 	bl	8000404 <__aeabi_i2d>
 800136a:	a32f      	add	r3, pc, #188	@ (adr r3, 8001428 <GPS_ParseGPGGA+0x2f8>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff f8b2 	bl	80004d8 <__aeabi_dmul>
 8001374:	4642      	mov	r2, r8
 8001376:	464b      	mov	r3, r9
 8001378:	f7fe fef8 	bl	800016c <__adddf3>
 800137c:	4680      	mov	r8, r0
 800137e:	4689      	mov	r9, r1
                        minutes += (token[8] - '0') * 0.0010;
 8001380:	7a20      	ldrb	r0, [r4, #8]
 8001382:	3830      	subs	r0, #48	@ 0x30
 8001384:	f7ff f83e 	bl	8000404 <__aeabi_i2d>
 8001388:	a329      	add	r3, pc, #164	@ (adr r3, 8001430 <GPS_ParseGPGGA+0x300>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff f8a3 	bl	80004d8 <__aeabi_dmul>
 8001392:	4642      	mov	r2, r8
 8001394:	464b      	mov	r3, r9
 8001396:	f7fe fee9 	bl	800016c <__adddf3>
 800139a:	4680      	mov	r8, r0
 800139c:	4689      	mov	r9, r1
                        minutes += (token[9] - '0') * 0.0001;
 800139e:	7a60      	ldrb	r0, [r4, #9]
 80013a0:	3830      	subs	r0, #48	@ 0x30
 80013a2:	f7ff f82f 	bl	8000404 <__aeabi_i2d>
 80013a6:	a324      	add	r3, pc, #144	@ (adr r3, 8001438 <GPS_ParseGPGGA+0x308>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff f894 	bl	80004d8 <__aeabi_dmul>
 80013b0:	4642      	mov	r2, r8
 80013b2:	464b      	mov	r3, r9
 80013b4:	f7fe feda 	bl	800016c <__adddf3>
 80013b8:	4680      	mov	r8, r0
 80013ba:	4689      	mov	r9, r1
                    gps->position.longitude = degrees + (minutes / 60.0);
 80013bc:	4630      	mov	r0, r6
 80013be:	f7ff f821 	bl	8000404 <__aeabi_i2d>
 80013c2:	2200      	movs	r2, #0
 80013c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <GPS_ParseGPGGA+0x318>)
 80013ca:	4640      	mov	r0, r8
 80013cc:	4649      	mov	r1, r9
 80013ce:	f7ff f9ad 	bl	800072c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80013da:	f7fe fec7 	bl	800016c <__adddf3>
 80013de:	e9c5 01a6 	strd	r0, r1, [r5, #664]	@ 0x298
                    if (debug_huart != NULL) {
 80013e2:	f1ba 0f00 	cmp.w	sl, #0
 80013e6:	f43f aeb8 	beq.w	800115a <GPS_ParseGPGGA+0x2a>
                        sprintf(debug_buffer, "Debug Lon: str=%s, deg=%d, min=%.4f, final=%.6f\r\n",
 80013ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013ee:	4633      	mov	r3, r6
 80013f0:	4622      	mov	r2, r4
 80013f2:	e9cd 8900 	strd	r8, r9, [sp]
 80013f6:	4916      	ldr	r1, [pc, #88]	@ (8001450 <GPS_ParseGPGGA+0x320>)
 80013f8:	e76a      	b.n	80012d0 <GPS_ParseGPGGA+0x1a0>
                if (token[0] == 'W') {
 80013fa:	7823      	ldrb	r3, [r4, #0]
 80013fc:	2b57      	cmp	r3, #87	@ 0x57
 80013fe:	f47f aeac 	bne.w	800115a <GPS_ParseGPGGA+0x2a>
                    gps->position.longitude = -gps->position.longitude;
 8001402:	f8d5 3298 	ldr.w	r3, [r5, #664]	@ 0x298
 8001406:	9306      	str	r3, [sp, #24]
 8001408:	f8d5 329c 	ldr.w	r3, [r5, #668]	@ 0x29c
 800140c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001410:	9307      	str	r3, [sp, #28]
 8001412:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8001416:	e9c5 34a6 	strd	r3, r4, [r5, #664]	@ 0x298
 800141a:	e69e      	b.n	800115a <GPS_ParseGPGGA+0x2a>
 800141c:	f3af 8000 	nop.w
 8001420:	9999999a 	.word	0x9999999a
 8001424:	3fb99999 	.word	0x3fb99999
 8001428:	47ae147b 	.word	0x47ae147b
 800142c:	3f847ae1 	.word	0x3f847ae1
 8001430:	d2f1a9fc 	.word	0xd2f1a9fc
 8001434:	3f50624d 	.word	0x3f50624d
 8001438:	eb1c432d 	.word	0xeb1c432d
 800143c:	3f1a36e2 	.word	0x3f1a36e2
 8001440:	08009f00 	.word	0x08009f00
 8001444:	08009f66 	.word	0x08009f66
 8001448:	404e0000 	.word	0x404e0000
 800144c:	08009f02 	.word	0x08009f02
 8001450:	08009f34 	.word	0x08009f34
                gps->position.fix = (GPS_FixType)atoi(token);
 8001454:	4620      	mov	r0, r4
 8001456:	f004 fb76 	bl	8005b46 <atoi>
 800145a:	b2c0      	uxtb	r0, r0
 800145c:	f885 02c8 	strb.w	r0, [r5, #712]	@ 0x2c8
                gps->fix_available = (gps->position.fix > GPS_FIX_NONE) ? 1 : 0;
 8001460:	3800      	subs	r0, #0
 8001462:	bf18      	it	ne
 8001464:	2001      	movne	r0, #1
 8001466:	f885 02da 	strb.w	r0, [r5, #730]	@ 0x2da
                gps->position.valid = gps->fix_available;
 800146a:	f885 02c9 	strb.w	r0, [r5, #713]	@ 0x2c9
                break;
 800146e:	e674      	b.n	800115a <GPS_ParseGPGGA+0x2a>
                gps->position.satellites = atoi(token);
 8001470:	4620      	mov	r0, r4
 8001472:	f004 fb68 	bl	8005b46 <atoi>
 8001476:	f885 02b8 	strb.w	r0, [r5, #696]	@ 0x2b8
                break;
 800147a:	e66e      	b.n	800115a <GPS_ParseGPGGA+0x2a>
                gps->position.hdop = atof(token);
 800147c:	4620      	mov	r0, r4
 800147e:	f004 fb5f 	bl	8005b40 <atof>
 8001482:	e9c5 01b0 	strd	r0, r1, [r5, #704]	@ 0x2c0
                break;
 8001486:	e668      	b.n	800115a <GPS_ParseGPGGA+0x2a>
                gps->position.altitude = atof(token);
 8001488:	4620      	mov	r0, r4
 800148a:	f004 fb59 	bl	8005b40 <atof>
 800148e:	e9c5 01a8 	strd	r0, r1, [r5, #672]	@ 0x2a0
                break;
 8001492:	e662      	b.n	800115a <GPS_ParseGPGGA+0x2a>
    if (token == NULL) return GPS_INVALID_DATA;
 8001494:	2004      	movs	r0, #4
 8001496:	e667      	b.n	8001168 <GPS_ParseGPGGA+0x38>

08001498 <GPS_ParseGPRMC>:
/**
 * @brief Parse GPRMC sentence (Recommended Minimum Navigation Information)
 * Format: $GPRMC,time,status,lat,N/S,lon,E/W,spd,cog,date,mv,mvE/W,mode*cs
 * Example: $GPRMC,045103.000,A,3014.1984,N,09749.2872,W,0.67,161.46,030913,,,A*7C
 */
GPS_Status GPS_ParseGPRMC(GPS_Handle* gps, char* nmea) {
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int token_index = 0;
    char nmea_copy[GPS_NMEA_SIZE]; // Create a copy of the NMEA string to avoid modifying the original

    // Copy the NMEA string to avoid strtok_r modifying the original
    strncpy(nmea_copy, nmea, GPS_NMEA_SIZE - 1);
    nmea_copy[GPS_NMEA_SIZE - 1] = '\0'; // Ensure null termination
 800149c:	2500      	movs	r5, #0
GPS_Status GPS_ParseGPRMC(GPS_Handle* gps, char* nmea) {
 800149e:	b0a5      	sub	sp, #148	@ 0x94
    strncpy(nmea_copy, nmea, GPS_NMEA_SIZE - 1);
 80014a0:	227f      	movs	r2, #127	@ 0x7f
GPS_Status GPS_ParseGPRMC(GPS_Handle* gps, char* nmea) {
 80014a2:	4604      	mov	r4, r0
    strncpy(nmea_copy, nmea, GPS_NMEA_SIZE - 1);
 80014a4:	a804      	add	r0, sp, #16
 80014a6:	f005 ffaa 	bl	80073fe <strncpy>

    // First token is the message ID ($GPRMC)
    token = strtok_r(nmea_copy, ",", &saveptr);
 80014aa:	497f      	ldr	r1, [pc, #508]	@ (80016a8 <GPS_ParseGPRMC+0x210>)
 80014ac:	aa02      	add	r2, sp, #8
 80014ae:	a804      	add	r0, sp, #16
    nmea_copy[GPS_NMEA_SIZE - 1] = '\0'; // Ensure null termination
 80014b0:	f88d 508f 	strb.w	r5, [sp, #143]	@ 0x8f
    token = strtok_r(nmea_copy, ",", &saveptr);
 80014b4:	f005 ffde 	bl	8007474 <strtok_r>
    if (token == NULL) return GPS_INVALID_DATA;
 80014b8:	2800      	cmp	r0, #0
 80014ba:	f000 80f2 	beq.w	80016a2 <GPS_ParseGPRMC+0x20a>

    // Parse remaining tokens
    while ((token = strtok_r(NULL, ",*", &saveptr)) != NULL) {
 80014be:	2000      	movs	r0, #0
 80014c0:	497a      	ldr	r1, [pc, #488]	@ (80016ac <GPS_ParseGPRMC+0x214>)
 80014c2:	aa02      	add	r2, sp, #8
 80014c4:	f005 ffd6 	bl	8007474 <strtok_r>
 80014c8:	4607      	mov	r7, r0
 80014ca:	b940      	cbnz	r0, 80014de <GPS_ParseGPRMC+0x46>
                break;
        }
    }

    // If position is valid, set fix available
    if (gps->position.valid) {
 80014cc:	f894 32c9 	ldrb.w	r3, [r4, #713]	@ 0x2c9
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f040 80e2 	bne.w	800169a <GPS_ParseGPRMC+0x202>
        gps->fix_available = 1;
    }

    return GPS_OK;
 80014d6:	2000      	movs	r0, #0
}
 80014d8:	b025      	add	sp, #148	@ 0x94
 80014da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        token_index++;
 80014de:	3501      	adds	r5, #1
        switch (token_index) {
 80014e0:	1e6b      	subs	r3, r5, #1
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d8eb      	bhi.n	80014be <GPS_ParseGPRMC+0x26>
 80014e6:	e8df f003 	tbb	[pc, r3]
 80014ea:	3305      	.short	0x3305
 80014ec:	966d633b 	.word	0x966d633b
 80014f0:	ada7      	.short	0xada7
 80014f2:	b3          	.byte	0xb3
 80014f3:	00          	.byte	0x00
                if (strlen(token) >= 6) {
 80014f4:	4638      	mov	r0, r7
 80014f6:	f7fe fe2b 	bl	8000150 <strlen>
 80014fa:	2805      	cmp	r0, #5
 80014fc:	d9df      	bls.n	80014be <GPS_ParseGPRMC+0x26>
                    gps->time.hour = (token[0] - '0') * 10 + (token[1] - '0');
 80014fe:	783b      	ldrb	r3, [r7, #0]
 8001500:	787a      	ldrb	r2, [r7, #1]
 8001502:	3b30      	subs	r3, #48	@ 0x30
 8001504:	3a30      	subs	r2, #48	@ 0x30
 8001506:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800150a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800150e:	f884 32d0 	strb.w	r3, [r4, #720]	@ 0x2d0
                    gps->time.minute = (token[2] - '0') * 10 + (token[3] - '0');
 8001512:	78bb      	ldrb	r3, [r7, #2]
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	3b30      	subs	r3, #48	@ 0x30
 8001518:	3a30      	subs	r2, #48	@ 0x30
 800151a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800151e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001522:	f884 32d1 	strb.w	r3, [r4, #721]	@ 0x2d1
                    gps->time.second = (token[4] - '0') * 10 + (token[5] - '0');
 8001526:	793b      	ldrb	r3, [r7, #4]
 8001528:	797a      	ldrb	r2, [r7, #5]
 800152a:	3b30      	subs	r3, #48	@ 0x30
 800152c:	3a30      	subs	r2, #48	@ 0x30
 800152e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001532:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                    if (strlen(token) > 7) { // Check if milliseconds present
 8001536:	4638      	mov	r0, r7
                    gps->time.second = (token[4] - '0') * 10 + (token[5] - '0');
 8001538:	f884 32d2 	strb.w	r3, [r4, #722]	@ 0x2d2
                    if (strlen(token) > 7) { // Check if milliseconds present
 800153c:	f7fe fe08 	bl	8000150 <strlen>
 8001540:	2807      	cmp	r0, #7
 8001542:	d9bc      	bls.n	80014be <GPS_ParseGPRMC+0x26>
                        gps->time.millisecond = atoi(&token[7]);
 8001544:	1df8      	adds	r0, r7, #7
 8001546:	f004 fafe 	bl	8005b46 <atoi>
 800154a:	f8a4 02d4 	strh.w	r0, [r4, #724]	@ 0x2d4
 800154e:	e7b6      	b.n	80014be <GPS_ParseGPRMC+0x26>
                gps->position.valid = (token[0] == 'A') ? 1 : 0;
 8001550:	783b      	ldrb	r3, [r7, #0]
 8001552:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8001556:	4253      	negs	r3, r2
 8001558:	4153      	adcs	r3, r2
 800155a:	f884 32c9 	strb.w	r3, [r4, #713]	@ 0x2c9
                break;
 800155e:	e7ae      	b.n	80014be <GPS_ParseGPRMC+0x26>
                if (strlen(token) > 0) {
 8001560:	783b      	ldrb	r3, [r7, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0ab      	beq.n	80014be <GPS_ParseGPRMC+0x26>
                    strncpy(deg_str, token, 2);
 8001566:	2202      	movs	r2, #2
 8001568:	4639      	mov	r1, r7
 800156a:	a803      	add	r0, sp, #12
 800156c:	f005 ff47 	bl	80073fe <strncpy>
                    deg_str[2] = '\0';
 8001570:	2300      	movs	r3, #0
                    int degrees = atoi(deg_str);
 8001572:	a803      	add	r0, sp, #12
                    deg_str[2] = '\0';
 8001574:	f88d 300e 	strb.w	r3, [sp, #14]
                    int degrees = atoi(deg_str);
 8001578:	f004 fae5 	bl	8005b46 <atoi>
 800157c:	4606      	mov	r6, r0
                    double minutes = atof(token + 2);  // Get the minutes part
 800157e:	1cb8      	adds	r0, r7, #2
 8001580:	f004 fade 	bl	8005b40 <atof>
 8001584:	4680      	mov	r8, r0
                    gps->position.latitude = degrees + (minutes / 60.0);
 8001586:	4630      	mov	r0, r6
                    double minutes = atof(token + 2);  // Get the minutes part
 8001588:	4689      	mov	r9, r1
                    gps->position.latitude = degrees + (minutes / 60.0);
 800158a:	f7fe ff3b 	bl	8000404 <__aeabi_i2d>
 800158e:	2200      	movs	r2, #0
 8001590:	4606      	mov	r6, r0
 8001592:	460f      	mov	r7, r1
 8001594:	4b46      	ldr	r3, [pc, #280]	@ (80016b0 <GPS_ParseGPRMC+0x218>)
 8001596:	4640      	mov	r0, r8
 8001598:	4649      	mov	r1, r9
 800159a:	f7ff f8c7 	bl	800072c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4630      	mov	r0, r6
 80015a4:	4639      	mov	r1, r7
 80015a6:	f7fe fde1 	bl	800016c <__adddf3>
 80015aa:	e9c4 01a4 	strd	r0, r1, [r4, #656]	@ 0x290
 80015ae:	e786      	b.n	80014be <GPS_ParseGPRMC+0x26>
                if (token[0] == 'S') {
 80015b0:	783b      	ldrb	r3, [r7, #0]
 80015b2:	2b53      	cmp	r3, #83	@ 0x53
 80015b4:	d183      	bne.n	80014be <GPS_ParseGPRMC+0x26>
                    gps->position.latitude = -gps->position.latitude;
 80015b6:	e9d4 a3a4 	ldrd	sl, r3, [r4, #656]	@ 0x290
 80015ba:	f103 4b00 	add.w	fp, r3, #2147483648	@ 0x80000000
 80015be:	e9c4 aba4 	strd	sl, fp, [r4, #656]	@ 0x290
 80015c2:	e77c      	b.n	80014be <GPS_ParseGPRMC+0x26>
                if (strlen(token) > 0) {
 80015c4:	783b      	ldrb	r3, [r7, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f43f af79 	beq.w	80014be <GPS_ParseGPRMC+0x26>
                    strncpy(deg_str, token, 3);
 80015cc:	2203      	movs	r2, #3
 80015ce:	4639      	mov	r1, r7
 80015d0:	a803      	add	r0, sp, #12
 80015d2:	f005 ff14 	bl	80073fe <strncpy>
                    deg_str[3] = '\0';
 80015d6:	2300      	movs	r3, #0
                    int degrees = atoi(deg_str);
 80015d8:	a803      	add	r0, sp, #12
                    deg_str[3] = '\0';
 80015da:	f88d 300f 	strb.w	r3, [sp, #15]
                    int degrees = atoi(deg_str);
 80015de:	f004 fab2 	bl	8005b46 <atoi>
 80015e2:	4680      	mov	r8, r0
                    double minutes = atof(token + 3);  // Get the minutes part
 80015e4:	1cf8      	adds	r0, r7, #3
 80015e6:	f004 faab 	bl	8005b40 <atof>
 80015ea:	4606      	mov	r6, r0
                    gps->position.longitude = degrees + (minutes / 60.0);
 80015ec:	4640      	mov	r0, r8
                    double minutes = atof(token + 3);  // Get the minutes part
 80015ee:	460f      	mov	r7, r1
                    gps->position.longitude = degrees + (minutes / 60.0);
 80015f0:	f7fe ff08 	bl	8000404 <__aeabi_i2d>
 80015f4:	2200      	movs	r2, #0
 80015f6:	4680      	mov	r8, r0
 80015f8:	4689      	mov	r9, r1
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <GPS_ParseGPRMC+0x218>)
 80015fc:	4630      	mov	r0, r6
 80015fe:	4639      	mov	r1, r7
 8001600:	f7ff f894 	bl	800072c <__aeabi_ddiv>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4640      	mov	r0, r8
 800160a:	4649      	mov	r1, r9
 800160c:	f7fe fdae 	bl	800016c <__adddf3>
 8001610:	e9c4 01a6 	strd	r0, r1, [r4, #664]	@ 0x298
 8001614:	e753      	b.n	80014be <GPS_ParseGPRMC+0x26>
                if (token[0] == 'W') {
 8001616:	783b      	ldrb	r3, [r7, #0]
 8001618:	2b57      	cmp	r3, #87	@ 0x57
 800161a:	f47f af50 	bne.w	80014be <GPS_ParseGPRMC+0x26>
                    gps->position.longitude = -gps->position.longitude;
 800161e:	f8d4 3298 	ldr.w	r3, [r4, #664]	@ 0x298
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	f8d4 329c 	ldr.w	r3, [r4, #668]	@ 0x29c
 8001628:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001632:	e9c4 23a6 	strd	r2, r3, [r4, #664]	@ 0x298
 8001636:	e742      	b.n	80014be <GPS_ParseGPRMC+0x26>
                gps->position.speed = atof(token);
 8001638:	4638      	mov	r0, r7
 800163a:	f004 fa81 	bl	8005b40 <atof>
 800163e:	e9c4 01aa 	strd	r0, r1, [r4, #680]	@ 0x2a8
                break;
 8001642:	e73c      	b.n	80014be <GPS_ParseGPRMC+0x26>
                gps->position.course = atof(token);
 8001644:	4638      	mov	r0, r7
 8001646:	f004 fa7b 	bl	8005b40 <atof>
 800164a:	e9c4 01ac 	strd	r0, r1, [r4, #688]	@ 0x2b0
                break;
 800164e:	e736      	b.n	80014be <GPS_ParseGPRMC+0x26>
                if (strlen(token) == 6) {
 8001650:	4638      	mov	r0, r7
 8001652:	f7fe fd7d 	bl	8000150 <strlen>
 8001656:	2806      	cmp	r0, #6
 8001658:	f47f af31 	bne.w	80014be <GPS_ParseGPRMC+0x26>
                    int year = (token[4] - '0') * 10 + (token[5] - '0');
 800165c:	210a      	movs	r1, #10
                    gps->time.day = (token[0] - '0') * 10 + (token[1] - '0');
 800165e:	783b      	ldrb	r3, [r7, #0]
 8001660:	787a      	ldrb	r2, [r7, #1]
 8001662:	3b30      	subs	r3, #48	@ 0x30
 8001664:	3a30      	subs	r2, #48	@ 0x30
 8001666:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800166a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800166e:	f884 32d6 	strb.w	r3, [r4, #726]	@ 0x2d6
                    gps->time.month = (token[2] - '0') * 10 + (token[3] - '0');
 8001672:	78bb      	ldrb	r3, [r7, #2]
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	3b30      	subs	r3, #48	@ 0x30
 8001678:	3a30      	subs	r2, #48	@ 0x30
 800167a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800167e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001682:	f884 32d7 	strb.w	r3, [r4, #727]	@ 0x2d7
                    int year = (token[4] - '0') * 10 + (token[5] - '0');
 8001686:	793a      	ldrb	r2, [r7, #4]
 8001688:	797b      	ldrb	r3, [r7, #5]
 800168a:	3a30      	subs	r2, #48	@ 0x30
 800168c:	fb01 3302 	mla	r3, r1, r2, r3
                    gps->time.year = 2000 + year; // Assuming years after 2000
 8001690:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 8001694:	f8a4 32d8 	strh.w	r3, [r4, #728]	@ 0x2d8
 8001698:	e711      	b.n	80014be <GPS_ParseGPRMC+0x26>
        gps->fix_available = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	f884 32da 	strb.w	r3, [r4, #730]	@ 0x2da
 80016a0:	e719      	b.n	80014d6 <GPS_ParseGPRMC+0x3e>
    if (token == NULL) return GPS_INVALID_DATA;
 80016a2:	2004      	movs	r0, #4
 80016a4:	e718      	b.n	80014d8 <GPS_ParseGPRMC+0x40>
 80016a6:	bf00      	nop
 80016a8:	08009f00 	.word	0x08009f00
 80016ac:	08009f66 	.word	0x08009f66
 80016b0:	404e0000 	.word	0x404e0000

080016b4 <GPS_ParseNMEASentence>:
NMEA_Type GPS_ParseNMEASentence(GPS_Handle* gps, char* nmea, UART_HandleTypeDef* debug_huart) {
 80016b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b8:	460d      	mov	r5, r1
 80016ba:	4606      	mov	r6, r0
 80016bc:	4617      	mov	r7, r2
    if (strncmp(nmea, "$GP", 3) != 0) {
 80016be:	4628      	mov	r0, r5
 80016c0:	2203      	movs	r2, #3
 80016c2:	4912      	ldr	r1, [pc, #72]	@ (800170c <GPS_ParseNMEASentence+0x58>)
 80016c4:	f005 fe89 	bl	80073da <strncmp>
 80016c8:	4604      	mov	r4, r0
 80016ca:	b9d8      	cbnz	r0, 8001704 <GPS_ParseNMEASentence+0x50>
    if (strncmp(nmea + 3, "GGA", 3) == 0) {
 80016cc:	f105 0803 	add.w	r8, r5, #3
 80016d0:	2203      	movs	r2, #3
 80016d2:	4640      	mov	r0, r8
 80016d4:	490e      	ldr	r1, [pc, #56]	@ (8001710 <GPS_ParseNMEASentence+0x5c>)
 80016d6:	f005 fe80 	bl	80073da <strncmp>
 80016da:	b938      	cbnz	r0, 80016ec <GPS_ParseNMEASentence+0x38>
        GPS_ParseGPGGA(gps, nmea, debug_huart);
 80016dc:	463a      	mov	r2, r7
 80016de:	4629      	mov	r1, r5
 80016e0:	4630      	mov	r0, r6
 80016e2:	f7ff fd25 	bl	8001130 <GPS_ParseGPGGA>
        return NMEA_GPGGA;
 80016e6:	2001      	movs	r0, #1
}
 80016e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (strncmp(nmea + 3, "RMC", 3) == 0) {
 80016ec:	2203      	movs	r2, #3
 80016ee:	4640      	mov	r0, r8
 80016f0:	4908      	ldr	r1, [pc, #32]	@ (8001714 <GPS_ParseNMEASentence+0x60>)
 80016f2:	f005 fe72 	bl	80073da <strncmp>
 80016f6:	b938      	cbnz	r0, 8001708 <GPS_ParseNMEASentence+0x54>
        GPS_ParseGPRMC(gps, nmea);
 80016f8:	4629      	mov	r1, r5
 80016fa:	4630      	mov	r0, r6
 80016fc:	f7ff fecc 	bl	8001498 <GPS_ParseGPRMC>
        return NMEA_GPRMC;
 8001700:	2002      	movs	r0, #2
 8001702:	e7f1      	b.n	80016e8 <GPS_ParseNMEASentence+0x34>
        return NMEA_UNKNOWN;
 8001704:	2000      	movs	r0, #0
 8001706:	e7ef      	b.n	80016e8 <GPS_ParseNMEASentence+0x34>
 8001708:	4620      	mov	r0, r4
 800170a:	e7ed      	b.n	80016e8 <GPS_ParseNMEASentence+0x34>
 800170c:	08009f69 	.word	0x08009f69
 8001710:	08009f6d 	.word	0x08009f6d
 8001714:	08009f71 	.word	0x08009f71

08001718 <GPS_Process>:
GPS_Status GPS_Process(GPS_Handle* gps) {
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	4604      	mov	r4, r0
                gps->nmea_index = 0; // Reset and wait for next sentence
 800171c:	2500      	movs	r5, #0
            gps->nmea_buffer[gps->nmea_index++] = byte;
 800171e:	2601      	movs	r6, #1
    while (gps->buffer_head != gps->buffer_tail) {
 8001720:	f8b4 3206 	ldrh.w	r3, [r4, #518]	@ 0x206
 8001724:	f8b4 2204 	ldrh.w	r2, [r4, #516]	@ 0x204
 8001728:	429a      	cmp	r2, r3
 800172a:	d101      	bne.n	8001730 <GPS_Process+0x18>
}
 800172c:	2000      	movs	r0, #0
 800172e:	bd70      	pop	{r4, r5, r6, pc}
        uint8_t byte = gps->buffer[gps->buffer_tail];
 8001730:	18e2      	adds	r2, r4, r3
 8001732:	7911      	ldrb	r1, [r2, #4]
        gps->buffer_tail = (gps->buffer_tail + 1) % GPS_BUFFER_SIZE;
 8001734:	3301      	adds	r3, #1
 8001736:	f3c3 0308 	ubfx	r3, r3, #0, #9
        if (byte == GPS_NMEA_START) {
 800173a:	2924      	cmp	r1, #36	@ 0x24
        gps->buffer_tail = (gps->buffer_tail + 1) % GPS_BUFFER_SIZE;
 800173c:	f8a4 3206 	strh.w	r3, [r4, #518]	@ 0x206
        if (byte == GPS_NMEA_START) {
 8001740:	d104      	bne.n	800174c <GPS_Process+0x34>
            gps->nmea_buffer[gps->nmea_index++] = byte;
 8001742:	f8a4 628a 	strh.w	r6, [r4, #650]	@ 0x28a
 8001746:	f884 1209 	strb.w	r1, [r4, #521]	@ 0x209
 800174a:	e7e9      	b.n	8001720 <GPS_Process+0x8>
        else if (gps->nmea_index > 0) {
 800174c:	f8b4 228a 	ldrh.w	r2, [r4, #650]	@ 0x28a
 8001750:	2a00      	cmp	r2, #0
 8001752:	d0e5      	beq.n	8001720 <GPS_Process+0x8>
            if (gps->nmea_index >= GPS_NMEA_SIZE - 1) {
 8001754:	2a7e      	cmp	r2, #126	@ 0x7e
 8001756:	d902      	bls.n	800175e <GPS_Process+0x46>
                gps->nmea_index = 0; // Reset and wait for next sentence
 8001758:	f8a4 528a 	strh.w	r5, [r4, #650]	@ 0x28a
                continue;
 800175c:	e7e0      	b.n	8001720 <GPS_Process+0x8>
            gps->nmea_buffer[gps->nmea_index++] = byte;
 800175e:	1c53      	adds	r3, r2, #1
 8001760:	b29b      	uxth	r3, r3
 8001762:	4422      	add	r2, r4
            if (byte == GPS_NMEA_END || byte == '\r') {
 8001764:	290a      	cmp	r1, #10
            gps->nmea_buffer[gps->nmea_index++] = byte;
 8001766:	f8a4 328a 	strh.w	r3, [r4, #650]	@ 0x28a
 800176a:	f882 1209 	strb.w	r1, [r2, #521]	@ 0x209
            if (byte == GPS_NMEA_END || byte == '\r') {
 800176e:	d001      	beq.n	8001774 <GPS_Process+0x5c>
 8001770:	290d      	cmp	r1, #13
 8001772:	d1d5      	bne.n	8001720 <GPS_Process+0x8>
                gps->nmea_buffer[gps->nmea_index] = '\0'; // Null terminate
 8001774:	2200      	movs	r2, #0
 8001776:	4423      	add	r3, r4
                NMEA_Type type = GPS_ParseNMEASentence(gps, gps->nmea_buffer, NULL);
 8001778:	4620      	mov	r0, r4
                gps->nmea_buffer[gps->nmea_index] = '\0'; // Null terminate
 800177a:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
                NMEA_Type type = GPS_ParseNMEASentence(gps, gps->nmea_buffer, NULL);
 800177e:	f204 2109 	addw	r1, r4, #521	@ 0x209
 8001782:	f7ff ff97 	bl	80016b4 <GPS_ParseNMEASentence>
                if (type != NMEA_UNKNOWN) {
 8001786:	2800      	cmp	r0, #0
 8001788:	d0e6      	beq.n	8001758 <GPS_Process+0x40>
                    gps->last_update = HAL_GetTick();
 800178a:	f001 f8ed 	bl	8002968 <HAL_GetTick>
 800178e:	f8c4 02dc 	str.w	r0, [r4, #732]	@ 0x2dc
 8001792:	e7e1      	b.n	8001758 <GPS_Process+0x40>

08001794 <GPS_DebugPrint>:
}

/**
 * @brief Debug function to print parsed GPS data via UART
 */
void GPS_DebugPrint(GPS_Handle* gps, UART_HandleTypeDef* debug_huart) {
 8001794:	b530      	push	{r4, r5, lr}
 8001796:	4604      	mov	r4, r0
    char buffer[256];

    if (debug_huart == NULL) {
 8001798:	460d      	mov	r5, r1
void GPS_DebugPrint(GPS_Handle* gps, UART_HandleTypeDef* debug_huart) {
 800179a:	b0c7      	sub	sp, #284	@ 0x11c
    if (debug_huart == NULL) {
 800179c:	2900      	cmp	r1, #0
 800179e:	f000 808a 	beq.w	80018b6 <GPS_DebugPrint+0x122>
        return;
    }

    // Position info
    sprintf(buffer, "GPS Position:\r\n");
 80017a2:	4946      	ldr	r1, [pc, #280]	@ (80018bc <GPS_DebugPrint+0x128>)
 80017a4:	a806      	add	r0, sp, #24
 80017a6:	f005 fee0 	bl	800756a <strcpy>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 80017aa:	a806      	add	r0, sp, #24
 80017ac:	f7fe fcd0 	bl	8000150 <strlen>
 80017b0:	2364      	movs	r3, #100	@ 0x64
 80017b2:	b282      	uxth	r2, r0
 80017b4:	a906      	add	r1, sp, #24
 80017b6:	4628      	mov	r0, r5
 80017b8:	f003 ff8f 	bl	80056da <HAL_UART_Transmit>

    sprintf(buffer, "  Fix: %s\r\n", gps->fix_available ? "Valid" : "Invalid");
 80017bc:	4b40      	ldr	r3, [pc, #256]	@ (80018c0 <GPS_DebugPrint+0x12c>)
 80017be:	f894 12da 	ldrb.w	r1, [r4, #730]	@ 0x2da
 80017c2:	4a40      	ldr	r2, [pc, #256]	@ (80018c4 <GPS_DebugPrint+0x130>)
 80017c4:	a806      	add	r0, sp, #24
 80017c6:	2900      	cmp	r1, #0
 80017c8:	bf18      	it	ne
 80017ca:	461a      	movne	r2, r3
 80017cc:	493e      	ldr	r1, [pc, #248]	@ (80018c8 <GPS_DebugPrint+0x134>)
 80017ce:	f005 fd99 	bl	8007304 <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 80017d2:	a806      	add	r0, sp, #24
 80017d4:	f7fe fcbc 	bl	8000150 <strlen>
 80017d8:	2364      	movs	r3, #100	@ 0x64
 80017da:	b282      	uxth	r2, r0
 80017dc:	a906      	add	r1, sp, #24
 80017de:	4628      	mov	r0, r5
 80017e0:	f003 ff7b 	bl	80056da <HAL_UART_Transmit>

    sprintf(buffer, "  Latitude: %.6f\r\n", gps->position.latitude);
 80017e4:	e9d4 23a4 	ldrd	r2, r3, [r4, #656]	@ 0x290
 80017e8:	4938      	ldr	r1, [pc, #224]	@ (80018cc <GPS_DebugPrint+0x138>)
 80017ea:	a806      	add	r0, sp, #24
 80017ec:	f005 fd8a 	bl	8007304 <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 80017f0:	a806      	add	r0, sp, #24
 80017f2:	f7fe fcad 	bl	8000150 <strlen>
 80017f6:	2364      	movs	r3, #100	@ 0x64
 80017f8:	b282      	uxth	r2, r0
 80017fa:	a906      	add	r1, sp, #24
 80017fc:	4628      	mov	r0, r5
 80017fe:	f003 ff6c 	bl	80056da <HAL_UART_Transmit>

    sprintf(buffer, "  Longitude: %.6f\r\n", gps->position.longitude);
 8001802:	e9d4 23a6 	ldrd	r2, r3, [r4, #664]	@ 0x298
 8001806:	4932      	ldr	r1, [pc, #200]	@ (80018d0 <GPS_DebugPrint+0x13c>)
 8001808:	a806      	add	r0, sp, #24
 800180a:	f005 fd7b 	bl	8007304 <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 800180e:	a806      	add	r0, sp, #24
 8001810:	f7fe fc9e 	bl	8000150 <strlen>
 8001814:	2364      	movs	r3, #100	@ 0x64
 8001816:	b282      	uxth	r2, r0
 8001818:	a906      	add	r1, sp, #24
 800181a:	4628      	mov	r0, r5
 800181c:	f003 ff5d 	bl	80056da <HAL_UART_Transmit>

    sprintf(buffer, "  Altitude: %.2f m\r\n", gps->position.altitude);
 8001820:	e9d4 23a8 	ldrd	r2, r3, [r4, #672]	@ 0x2a0
 8001824:	492b      	ldr	r1, [pc, #172]	@ (80018d4 <GPS_DebugPrint+0x140>)
 8001826:	a806      	add	r0, sp, #24
 8001828:	f005 fd6c 	bl	8007304 <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 800182c:	a806      	add	r0, sp, #24
 800182e:	f7fe fc8f 	bl	8000150 <strlen>
 8001832:	2364      	movs	r3, #100	@ 0x64
 8001834:	b282      	uxth	r2, r0
 8001836:	a906      	add	r1, sp, #24
 8001838:	4628      	mov	r0, r5
 800183a:	f003 ff4e 	bl	80056da <HAL_UART_Transmit>

    sprintf(buffer, "  Satellites: %d\r\n", gps->position.satellites);
 800183e:	f894 22b8 	ldrb.w	r2, [r4, #696]	@ 0x2b8
 8001842:	4925      	ldr	r1, [pc, #148]	@ (80018d8 <GPS_DebugPrint+0x144>)
 8001844:	a806      	add	r0, sp, #24
 8001846:	f005 fd5d 	bl	8007304 <siprintf>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 800184a:	a806      	add	r0, sp, #24
 800184c:	f7fe fc80 	bl	8000150 <strlen>
 8001850:	2364      	movs	r3, #100	@ 0x64
 8001852:	b282      	uxth	r2, r0
 8001854:	a906      	add	r1, sp, #24
 8001856:	4628      	mov	r0, r5
 8001858:	f003 ff3f 	bl	80056da <HAL_UART_Transmit>

    // Time info
    sprintf(buffer, "GPS Time:\r\n");
 800185c:	491f      	ldr	r1, [pc, #124]	@ (80018dc <GPS_DebugPrint+0x148>)
 800185e:	a806      	add	r0, sp, #24
 8001860:	f005 fe83 	bl	800756a <strcpy>
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001864:	a806      	add	r0, sp, #24
 8001866:	f7fe fc73 	bl	8000150 <strlen>
 800186a:	2364      	movs	r3, #100	@ 0x64
 800186c:	b282      	uxth	r2, r0
 800186e:	a906      	add	r1, sp, #24
 8001870:	4628      	mov	r0, r5
 8001872:	f003 ff32 	bl	80056da <HAL_UART_Transmit>

    sprintf(buffer, "  %02d/%02d/%04d %02d:%02d:%02d.%03d\r\n",
 8001876:	f8b4 32d4 	ldrh.w	r3, [r4, #724]	@ 0x2d4
 800187a:	4919      	ldr	r1, [pc, #100]	@ (80018e0 <GPS_DebugPrint+0x14c>)
 800187c:	9304      	str	r3, [sp, #16]
 800187e:	f894 32d2 	ldrb.w	r3, [r4, #722]	@ 0x2d2
 8001882:	a806      	add	r0, sp, #24
 8001884:	9303      	str	r3, [sp, #12]
 8001886:	f894 32d1 	ldrb.w	r3, [r4, #721]	@ 0x2d1
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	f894 32d0 	ldrb.w	r3, [r4, #720]	@ 0x2d0
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	f8b4 32d8 	ldrh.w	r3, [r4, #728]	@ 0x2d8
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f894 32d7 	ldrb.w	r3, [r4, #727]	@ 0x2d7
 800189c:	f894 22d6 	ldrb.w	r2, [r4, #726]	@ 0x2d6
 80018a0:	f005 fd30 	bl	8007304 <siprintf>
            gps->time.day, gps->time.month, gps->time.year,
            gps->time.hour, gps->time.minute, gps->time.second, gps->time.millisecond);
    HAL_UART_Transmit(debug_huart, (uint8_t*)buffer, strlen(buffer), 100);
 80018a4:	a806      	add	r0, sp, #24
 80018a6:	f7fe fc53 	bl	8000150 <strlen>
 80018aa:	2364      	movs	r3, #100	@ 0x64
 80018ac:	b282      	uxth	r2, r0
 80018ae:	a906      	add	r1, sp, #24
 80018b0:	4628      	mov	r0, r5
 80018b2:	f003 ff12 	bl	80056da <HAL_UART_Transmit>
}
 80018b6:	b047      	add	sp, #284	@ 0x11c
 80018b8:	bd30      	pop	{r4, r5, pc}
 80018ba:	bf00      	nop
 80018bc:	08009f83 	.word	0x08009f83
 80018c0:	08009f75 	.word	0x08009f75
 80018c4:	08009f7b 	.word	0x08009f7b
 80018c8:	08009f93 	.word	0x08009f93
 80018cc:	08009f9f 	.word	0x08009f9f
 80018d0:	08009fb2 	.word	0x08009fb2
 80018d4:	08009fc6 	.word	0x08009fc6
 80018d8:	08009fdb 	.word	0x08009fdb
 80018dc:	08009fee 	.word	0x08009fee
 80018e0:	08009ffa 	.word	0x08009ffa

080018e4 <L298N_SetSpeed>:
}


void L298N_SetSpeed(L298N_HandleTypeDef* hl298n, Motor_Channel channel, uint8_t speed)
{
    uint32_t pwm_value = (speed * 999) / 100;  // Convert percentage to PWM value
 80018e4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80018e8:	435a      	muls	r2, r3
 80018ea:	2364      	movs	r3, #100	@ 0x64
 80018ec:	fbb2 f2f3 	udiv	r2, r2, r3

    if(channel == MOTOR_A) {
 80018f0:	b929      	cbnz	r1, 80018fe <L298N_SetSpeed+0x1a>
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_a, pwm_value);
 80018f2:	6841      	ldr	r1, [r0, #4]
 80018f4:	6803      	ldr	r3, [r0, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
    }
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_b, pwm_value);
 80018f8:	b949      	cbnz	r1, 800190e <L298N_SetSpeed+0x2a>
 80018fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80018fc:	4770      	bx	lr
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
 80018fe:	2901      	cmp	r1, #1
 8001900:	d10e      	bne.n	8001920 <L298N_SetSpeed+0x3c>
 8001902:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 8001906:	2b01      	cmp	r3, #1
 8001908:	d10a      	bne.n	8001920 <L298N_SetSpeed+0x3c>
        __HAL_TIM_SET_COMPARE(hl298n->htim, hl298n->channel_b, pwm_value);
 800190a:	6881      	ldr	r1, [r0, #8]
 800190c:	e7f2      	b.n	80018f4 <L298N_SetSpeed+0x10>
 800190e:	2904      	cmp	r1, #4
 8001910:	d101      	bne.n	8001916 <L298N_SetSpeed+0x32>
 8001912:	639a      	str	r2, [r3, #56]	@ 0x38
 8001914:	4770      	bx	lr
 8001916:	2908      	cmp	r1, #8
 8001918:	d101      	bne.n	800191e <L298N_SetSpeed+0x3a>
 800191a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800191c:	4770      	bx	lr
 800191e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
}
 8001920:	4770      	bx	lr

08001922 <L298N_StopMotor.part.0>:
                break;
        }
    }
}

void L298N_StopMotor(L298N_HandleTypeDef* hl298n, Motor_Channel channel)
 8001922:	b510      	push	{r4, lr}
    if(channel == MOTOR_A) {
        L298N_SetSpeed(hl298n, MOTOR_A, 0);
        HAL_GPIO_WritePin(hl298n->in1_port, hl298n->in1_pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(hl298n->in2_port, hl298n->in2_pin, GPIO_PIN_RESET);
    }
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
 8001924:	f890 102a 	ldrb.w	r1, [r0, #42]	@ 0x2a
void L298N_StopMotor(L298N_HandleTypeDef* hl298n, Motor_Channel channel)
 8001928:	4604      	mov	r4, r0
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
 800192a:	2901      	cmp	r1, #1
 800192c:	d10e      	bne.n	800194c <L298N_StopMotor.part.0+0x2a>
        L298N_SetSpeed(hl298n, MOTOR_B, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	f7ff ffd8 	bl	80018e4 <L298N_SetSpeed>
        HAL_GPIO_WritePin(hl298n->in3_port, hl298n->in3_pin, GPIO_PIN_RESET);
 8001934:	8c01      	ldrh	r1, [r0, #32]
 8001936:	2200      	movs	r2, #0
 8001938:	69c0      	ldr	r0, [r0, #28]
 800193a:	f001 fc77 	bl	800322c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(hl298n->in4_port, hl298n->in4_pin, GPIO_PIN_RESET);
 800193e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8001940:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001942:	2200      	movs	r2, #0
    }
}
 8001944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(hl298n->in4_port, hl298n->in4_pin, GPIO_PIN_RESET);
 8001948:	f001 bc70 	b.w	800322c <HAL_GPIO_WritePin>
}
 800194c:	bd10      	pop	{r4, pc}

0800194e <L298N_StopMotor>:
{
 800194e:	b538      	push	{r3, r4, r5, lr}
 8001950:	4605      	mov	r5, r0
    if(channel == MOTOR_A) {
 8001952:	460c      	mov	r4, r1
 8001954:	b971      	cbnz	r1, 8001974 <L298N_StopMotor+0x26>
        L298N_SetSpeed(hl298n, MOTOR_A, 0);
 8001956:	460a      	mov	r2, r1
 8001958:	f7ff ffc4 	bl	80018e4 <L298N_SetSpeed>
        HAL_GPIO_WritePin(hl298n->in1_port, hl298n->in1_pin, GPIO_PIN_RESET);
 800195c:	4622      	mov	r2, r4
 800195e:	8a01      	ldrh	r1, [r0, #16]
 8001960:	68c0      	ldr	r0, [r0, #12]
 8001962:	f001 fc63 	bl	800322c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(hl298n->in2_port, hl298n->in2_pin, GPIO_PIN_RESET);
 8001966:	4622      	mov	r2, r4
 8001968:	8b29      	ldrh	r1, [r5, #24]
 800196a:	6968      	ldr	r0, [r5, #20]
}
 800196c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_GPIO_WritePin(hl298n->in2_port, hl298n->in2_pin, GPIO_PIN_RESET);
 8001970:	f001 bc5c 	b.w	800322c <HAL_GPIO_WritePin>
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
 8001974:	2901      	cmp	r1, #1
 8001976:	d103      	bne.n	8001980 <L298N_StopMotor+0x32>
}
 8001978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800197c:	f7ff bfd1 	b.w	8001922 <L298N_StopMotor.part.0>
 8001980:	bd38      	pop	{r3, r4, r5, pc}
	...

08001984 <L298N_Init>:
    hl298n->in1_pin = MOTOR_IN1_PIN;
 8001984:	2202      	movs	r2, #2
{
 8001986:	b510      	push	{r4, lr}
    hl298n->htim = init->htim;
 8001988:	680b      	ldr	r3, [r1, #0]
{
 800198a:	b086      	sub	sp, #24
    hl298n->htim = init->htim;
 800198c:	6003      	str	r3, [r0, #0]
    hl298n->channel_a = init->channel_a;
 800198e:	684b      	ldr	r3, [r1, #4]
{
 8001990:	4604      	mov	r4, r0
    hl298n->channel_a = init->channel_a;
 8001992:	6043      	str	r3, [r0, #4]
    hl298n->channel_b = init->channel_b;
 8001994:	688b      	ldr	r3, [r1, #8]
 8001996:	6083      	str	r3, [r0, #8]
    hl298n->mode = init->mode;
 8001998:	7b0b      	ldrb	r3, [r1, #12]
    hl298n->in1_pin = MOTOR_IN1_PIN;
 800199a:	8202      	strh	r2, [r0, #16]
    hl298n->mode = init->mode;
 800199c:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    hl298n->in1_port = MOTOR_IN1_PORT;
 80019a0:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <L298N_Init+0xb0>)
    hl298n->in2_pin = MOTOR_IN2_PIN;
 80019a2:	2208      	movs	r2, #8
    hl298n->in1_port = MOTOR_IN1_PORT;
 80019a4:	60c3      	str	r3, [r0, #12]
    hl298n->in2_port = MOTOR_IN2_PORT;
 80019a6:	6143      	str	r3, [r0, #20]
    hl298n->in3_port = MOTOR_IN3_PORT;
 80019a8:	61c3      	str	r3, [r0, #28]
    hl298n->in4_port = MOTOR_IN4_PORT;
 80019aa:	6243      	str	r3, [r0, #36]	@ 0x24
    hl298n->in4_pin = MOTOR_IN4_PIN;
 80019ac:	2320      	movs	r3, #32
 80019ae:	8503      	strh	r3, [r0, #40]	@ 0x28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	2300      	movs	r3, #0
    hl298n->in2_pin = MOTOR_IN2_PIN;
 80019b2:	8302      	strh	r2, [r0, #24]
    hl298n->in3_pin = MOTOR_IN3_PIN;
 80019b4:	2210      	movs	r2, #16
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
    hl298n->in3_pin = MOTOR_IN3_PIN;
 80019bc:	8402      	strh	r2, [r0, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	f042 0208 	orr.w	r2, r2, #8
 80019c8:	619a      	str	r2, [r3, #24]
 80019ca:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = hl298n->in1_pin | hl298n->in2_pin;
 80019cc:	8b02      	ldrh	r2, [r0, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = hl298n->in1_pin | hl298n->in2_pin;
 80019d6:	8a03      	ldrh	r3, [r0, #16]
 80019d8:	4313      	orrs	r3, r2
    if(hl298n->mode == L298N_DUAL_CHANNEL) {
 80019da:	f890 202a 	ldrb.w	r2, [r0, #42]	@ 0x2a
    GPIO_InitStruct.Pin = hl298n->in1_pin | hl298n->in2_pin;
 80019de:	b29b      	uxth	r3, r3
    if(hl298n->mode == L298N_DUAL_CHANNEL) {
 80019e0:	2a01      	cmp	r2, #1
    GPIO_InitStruct.Pin = hl298n->in1_pin | hl298n->in2_pin;
 80019e2:	9302      	str	r3, [sp, #8]
    if(hl298n->mode == L298N_DUAL_CHANNEL) {
 80019e4:	d105      	bne.n	80019f2 <L298N_Init+0x6e>
        GPIO_InitStruct.Pin |= hl298n->in3_pin | hl298n->in4_pin;
 80019e6:	8c02      	ldrh	r2, [r0, #32]
 80019e8:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 80019ea:	430a      	orrs	r2, r1
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2302      	movs	r3, #2
    HAL_GPIO_Init(hl298n->in1_port, &GPIO_InitStruct);
 80019f8:	68e0      	ldr	r0, [r4, #12]
 80019fa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(hl298n->in1_port, &GPIO_InitStruct);
 80019fe:	f001 fb0f 	bl	8003020 <HAL_GPIO_Init>
    HAL_TIM_PWM_Start(hl298n->htim, hl298n->channel_a);
 8001a02:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001a06:	f003 fd65 	bl	80054d4 <HAL_TIM_PWM_Start>
    if(hl298n->mode == L298N_DUAL_CHANNEL) {
 8001a0a:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d103      	bne.n	8001a1a <L298N_Init+0x96>
        HAL_TIM_PWM_Start(hl298n->htim, hl298n->channel_b);
 8001a12:	68a1      	ldr	r1, [r4, #8]
 8001a14:	6820      	ldr	r0, [r4, #0]
 8001a16:	f003 fd5d 	bl	80054d4 <HAL_TIM_PWM_Start>
    L298N_StopMotor(hl298n, MOTOR_A);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff ff96 	bl	800194e <L298N_StopMotor>
    if(hl298n->mode == L298N_DUAL_CHANNEL) {
 8001a22:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d102      	bne.n	8001a30 <L298N_Init+0xac>
    else if(channel == MOTOR_B && hl298n->mode == L298N_DUAL_CHANNEL) {
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7ff ff79 	bl	8001922 <L298N_StopMotor.part.0>
}
 8001a30:	b006      	add	sp, #24
 8001a32:	bd10      	pop	{r4, pc}
 8001a34:	40010c00 	.word	0x40010c00

08001a38 <LightSensor_Init>:
    LDR_BACK_CHANNEL,
    LDR_LEFT_CHANNEL
};

void LightSensor_Init(ADC_HandleTypeDef* hadc)
{
 8001a38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e9cd 3304 	strd	r3, r3, [sp, #16]

    // Enable GPIO Clock
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a44:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001a48:	699a      	ldr	r2, [r3, #24]

    // Configure GPIO pins for analog input using config.h definitions
    GPIO_InitStruct.Pin = LDR_FRONT_PIN | LDR_RIGHT_PIN | LDR_BACK_PIN | LDR_LEFT_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(LDR_GPIO_PORT, &GPIO_InitStruct);
 8001a4a:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <LightSensor_Init+0x38>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	f042 0204 	orr.w	r2, r2, #4
 8001a50:	619a      	str	r2, [r3, #24]
 8001a52:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a54:	22f0      	movs	r2, #240	@ 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5e:	2303      	movs	r3, #3
    HAL_GPIO_Init(LDR_GPIO_PORT, &GPIO_InitStruct);
 8001a60:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a62:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(LDR_GPIO_PORT, &GPIO_InitStruct);
 8001a66:	f001 fadb 	bl	8003020 <HAL_GPIO_Init>
}
 8001a6a:	b007      	add	sp, #28
 8001a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a70:	40010800 	.word	0x40010800

08001a74 <LightSensor_ReadSingle>:

uint16_t LightSensor_ReadSingle(ADC_HandleTypeDef* hadc, LightSensor_Position position)
{
 8001a74:	b530      	push	{r4, r5, lr}
    ADC_ChannelConfTypeDef sConfig = {0};
    uint16_t adcValue = 0;

    // Configure ADC channel
    sConfig.Channel = SENSOR_CHANNELS[position];
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <LightSensor_ReadSingle+0x44>)
{
 8001a78:	b085      	sub	sp, #20
    sConfig.Channel = SENSOR_CHANNELS[position];
 8001a7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    sConfig.Rank = ADC_REGULAR_RANK_1;
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a7e:	2201      	movs	r2, #1
{
 8001a80:	4604      	mov	r4, r0
    sConfig.Channel = SENSOR_CHANNELS[position];
 8001a82:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a84:	2307      	movs	r3, #7
 8001a86:	e9cd 2302 	strd	r2, r3, [sp, #8]

    // Configure channel and make sure to reset any previous configuration
    HAL_ADC_Stop(hadc);
 8001a8a:	f001 f9f3 	bl	8002e74 <HAL_ADC_Stop>
    HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001a8e:	a901      	add	r1, sp, #4
 8001a90:	4620      	mov	r0, r4
 8001a92:	f001 f82b 	bl	8002aec <HAL_ADC_ConfigChannel>

    // Start ADC conversion
    HAL_ADC_Start(hadc);
 8001a96:	4620      	mov	r0, r4
 8001a98:	f001 f8e6 	bl	8002c68 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 100);
 8001a9c:	2164      	movs	r1, #100	@ 0x64
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f000 ff7a 	bl	8002998 <HAL_ADC_PollForConversion>
    adcValue = HAL_ADC_GetValue(hadc);
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f001 f81d 	bl	8002ae4 <HAL_ADC_GetValue>
 8001aaa:	4605      	mov	r5, r0
    HAL_ADC_Stop(hadc);
 8001aac:	4620      	mov	r0, r4
 8001aae:	f001 f9e1 	bl	8002e74 <HAL_ADC_Stop>

    return adcValue;
}
 8001ab2:	b2a8      	uxth	r0, r5
 8001ab4:	b005      	add	sp, #20
 8001ab6:	bd30      	pop	{r4, r5, pc}
 8001ab8:	0800a024 	.word	0x0800a024

08001abc <LightSensor_ReadAll>:

void LightSensor_ReadAll(ADC_HandleTypeDef* hadc, LightSensor_Values* values)
{
 8001abc:	b538      	push	{r3, r4, r5, lr}
 8001abe:	460c      	mov	r4, r1
    values->front = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_FRONT);
 8001ac0:	2100      	movs	r1, #0
{
 8001ac2:	4605      	mov	r5, r0
    values->front = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_FRONT);
 8001ac4:	f7ff ffd6 	bl	8001a74 <LightSensor_ReadSingle>
    values->right = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_RIGHT);
 8001ac8:	2101      	movs	r1, #1
    values->front = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_FRONT);
 8001aca:	8020      	strh	r0, [r4, #0]
    values->right = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_RIGHT);
 8001acc:	4628      	mov	r0, r5
 8001ace:	f7ff ffd1 	bl	8001a74 <LightSensor_ReadSingle>
    values->back = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_BACK);
 8001ad2:	2102      	movs	r1, #2
    values->right = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_RIGHT);
 8001ad4:	8060      	strh	r0, [r4, #2]
    values->back = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_BACK);
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	f7ff ffcc 	bl	8001a74 <LightSensor_ReadSingle>
    values->left = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_LEFT);
 8001adc:	2103      	movs	r1, #3
    values->back = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_BACK);
 8001ade:	80a0      	strh	r0, [r4, #4]
    values->left = LightSensor_ReadSingle(hadc, LIGHT_SENSOR_LEFT);
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	f7ff ffc7 	bl	8001a74 <LightSensor_ReadSingle>
 8001ae6:	80e0      	strh	r0, [r4, #6]
}
 8001ae8:	bd38      	pop	{r3, r4, r5, pc}
	...

08001aec <LM35_Init>:
 *      Author: Amr_H
 */
#include "lm35.h"

void LM35_Init(ADC_HandleTypeDef* hadc)
{
 8001aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	2300      	movs	r3, #0
 8001af0:	e9cd 3304 	strd	r3, r3, [sp, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001af8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001afc:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = LM35_ADC_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(LM35_ADC_PORT, &GPIO_InitStruct);
 8001afe:	4809      	ldr	r0, [pc, #36]	@ (8001b24 <LM35_Init+0x38>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	f042 0208 	orr.w	r2, r2, #8
 8001b04:	619a      	str	r2, [r3, #24]
 8001b06:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b12:	2303      	movs	r3, #3
    HAL_GPIO_Init(LM35_ADC_PORT, &GPIO_InitStruct);
 8001b14:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b16:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(LM35_ADC_PORT, &GPIO_InitStruct);
 8001b1a:	f001 fa81 	bl	8003020 <HAL_GPIO_Init>
}
 8001b1e:	b007      	add	sp, #28
 8001b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b24:	40010c00 	.word	0x40010c00

08001b28 <LM35_ReadTemperature>:

float LM35_ReadTemperature(ADC_HandleTypeDef* hadc)
{
    ADC_ChannelConfTypeDef sConfig = {0};
 8001b28:	2300      	movs	r3, #0
{
 8001b2a:	b530      	push	{r4, r5, lr}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	4604      	mov	r4, r0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001b30:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001b34:	9303      	str	r3, [sp, #12]
    uint32_t adcValue = 0;
    float temperature;

    // First stop any ongoing conversion
    HAL_ADC_Stop(hadc);
 8001b36:	f001 f99d 	bl	8002e74 <HAL_ADC_Stop>

    // Configure for LM35 channel
    sConfig.Channel = LM35_ADC_CHANNEL;
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b42:	2305      	movs	r3, #5
    HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001b44:	a901      	add	r1, sp, #4
 8001b46:	4620      	mov	r0, r4
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b48:	9303      	str	r3, [sp, #12]
    HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001b4a:	f000 ffcf 	bl	8002aec <HAL_ADC_ConfigChannel>

    // Now read the value
    HAL_ADC_Start(hadc);
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f001 f88a 	bl	8002c68 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 100);
 8001b54:	2164      	movs	r1, #100	@ 0x64
 8001b56:	4620      	mov	r0, r4
 8001b58:	f000 ff1e 	bl	8002998 <HAL_ADC_PollForConversion>
    adcValue = HAL_ADC_GetValue(hadc);
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f000 ffc1 	bl	8002ae4 <HAL_ADC_GetValue>
 8001b62:	4605      	mov	r5, r0
    HAL_ADC_Stop(hadc);
 8001b64:	4620      	mov	r0, r4
 8001b66:	f001 f985 	bl	8002e74 <HAL_ADC_Stop>

    temperature = ((float)adcValue * 3.3f * 100.0f) / 4096.0f;
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f7ff f862 	bl	8000c34 <__aeabi_ui2f>
 8001b70:	490a      	ldr	r1, [pc, #40]	@ (8001b9c <LM35_ReadTemperature+0x74>)
 8001b72:	f7ff f8b7 	bl	8000ce4 <__aeabi_fmul>
 8001b76:	490a      	ldr	r1, [pc, #40]	@ (8001ba0 <LM35_ReadTemperature+0x78>)
 8001b78:	f7ff f8b4 	bl	8000ce4 <__aeabi_fmul>
 8001b7c:	f04f 5166 	mov.w	r1, #964689920	@ 0x39800000
 8001b80:	f7ff f8b0 	bl	8000ce4 <__aeabi_fmul>

    // Compensate for offset
    temperature -= 0.22f;  // Subtract the observed offset
 8001b84:	4907      	ldr	r1, [pc, #28]	@ (8001ba4 <LM35_ReadTemperature+0x7c>)
 8001b86:	f7fe ffa3 	bl	8000ad0 <__aeabi_fsub>

    // Ensure temperature doesn't go negative due to offset correction
    if(temperature < 0)
 8001b8a:	2100      	movs	r1, #0
    temperature -= 0.22f;  // Subtract the observed offset
 8001b8c:	4604      	mov	r4, r0
    if(temperature < 0)
 8001b8e:	f7ff fa47 	bl	8001020 <__aeabi_fcmplt>
 8001b92:	b100      	cbz	r0, 8001b96 <LM35_ReadTemperature+0x6e>
        temperature = 0;
 8001b94:	2400      	movs	r4, #0

    return temperature;
}
 8001b96:	4620      	mov	r0, r4
 8001b98:	b005      	add	sp, #20
 8001b9a:	bd30      	pop	{r4, r5, pc}
 8001b9c:	40533333 	.word	0x40533333
 8001ba0:	42c80000 	.word	0x42c80000
 8001ba4:	3e6147ae 	.word	0x3e6147ae

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b530      	push	{r4, r5, lr}
 8001baa:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bac:	2224      	movs	r2, #36	@ 0x24
 8001bae:	2100      	movs	r1, #0
 8001bb0:	a80b      	add	r0, sp, #44	@ 0x2c
 8001bb2:	f005 fc0a 	bl	80073ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb6:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb8:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bba:	2100      	movs	r1, #0
 8001bbc:	eb0d 0002 	add.w	r0, sp, r2
 8001bc0:	f005 fc03 	bl	80073ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	462a      	mov	r2, r5
 8001bc8:	a801      	add	r0, sp, #4
 8001bca:	f005 fbfe 	bl	80073ca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bce:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd0:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd2:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd4:	e9cd 350e 	strd	r3, r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd8:	940a      	str	r4, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bda:	f002 fe45 	bl	8004868 <HAL_RCC_OscConfig>
 8001bde:	4601      	mov	r1, r0
 8001be0:	b108      	cbz	r0, 8001be6 <SystemClock_Config+0x3e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001be4:	e7fe      	b.n	8001be4 <SystemClock_Config+0x3c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be8:	e9cd 0007 	strd	r0, r0, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bec:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf0:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bf2:	a805      	add	r0, sp, #20
 8001bf4:	f002 fff4 	bl	8004be0 <HAL_RCC_ClockConfig>
 8001bf8:	b108      	cbz	r0, 8001bfe <SystemClock_Config+0x56>
 8001bfa:	b672      	cpsid	i
	while (1) {
 8001bfc:	e7fe      	b.n	8001bfc <SystemClock_Config+0x54>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001bfe:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c00:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c02:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c04:	f003 f8ca 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 8001c08:	b108      	cbz	r0, 8001c0e <SystemClock_Config+0x66>
 8001c0a:	b672      	cpsid	i
	while (1) {
 8001c0c:	e7fe      	b.n	8001c0c <SystemClock_Config+0x64>
}
 8001c0e:	b015      	add	sp, #84	@ 0x54
 8001c10:	bd30      	pop	{r4, r5, pc}
	...

08001c14 <UART_Print>:
void UART_Print(float value) {
 8001c14:	b500      	push	{lr}
 8001c16:	b08b      	sub	sp, #44	@ 0x2c
    int length = snprintf(buffer, sizeof(buffer), "Temperature: %.2fC\r\n", value);
 8001c18:	f7fe fc06 	bl	8000428 <__aeabi_f2d>
 8001c1c:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <UART_Print+0x2c>)
 8001c1e:	e9cd 0100 	strd	r0, r1, [sp]
 8001c22:	2120      	movs	r1, #32
 8001c24:	a802      	add	r0, sp, #8
 8001c26:	f005 fb39 	bl	800729c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	b282      	uxth	r2, r0
 8001c30:	a902      	add	r1, sp, #8
 8001c32:	4804      	ldr	r0, [pc, #16]	@ (8001c44 <UART_Print+0x30>)
 8001c34:	f003 fd51 	bl	80056da <HAL_UART_Transmit>
}
 8001c38:	b00b      	add	sp, #44	@ 0x2c
 8001c3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3e:	bf00      	nop
 8001c40:	0800a034 	.word	0x0800a034
 8001c44:	200005bc 	.word	0x200005bc

08001c48 <UART_PrintLDRs>:
void UART_PrintLDRs(LightSensor_Values* values) {
 8001c48:	b500      	push	{lr}
    int length = snprintf(buffer, sizeof(buffer),
 8001c4a:	88c3      	ldrh	r3, [r0, #6]
void UART_PrintLDRs(LightSensor_Values* values) {
 8001c4c:	b095      	sub	sp, #84	@ 0x54
    int length = snprintf(buffer, sizeof(buffer),
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	8883      	ldrh	r3, [r0, #4]
 8001c52:	2140      	movs	r1, #64	@ 0x40
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	8843      	ldrh	r3, [r0, #2]
 8001c58:	4a07      	ldr	r2, [pc, #28]	@ (8001c78 <UART_PrintLDRs+0x30>)
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	8803      	ldrh	r3, [r0, #0]
 8001c5e:	a804      	add	r0, sp, #16
 8001c60:	f005 fb1c 	bl	800729c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	b282      	uxth	r2, r0
 8001c6a:	a904      	add	r1, sp, #16
 8001c6c:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <UART_PrintLDRs+0x34>)
 8001c6e:	f003 fd34 	bl	80056da <HAL_UART_Transmit>
}
 8001c72:	b015      	add	sp, #84	@ 0x54
 8001c74:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c78:	0800a049 	.word	0x0800a049
 8001c7c:	200005bc 	.word	0x200005bc

08001c80 <HAL_UART_RxCpltCallback>:
  if (huart->Instance == USART2) {
 8001c80:	6802      	ldr	r2, [r0, #0]
 8001c82:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_UART_RxCpltCallback+0x10>)
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d102      	bne.n	8001c8e <HAL_UART_RxCpltCallback+0xe>
    GPS_UART_RxCpltCallback(&hgps);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <HAL_UART_RxCpltCallback+0x14>)
 8001c8a:	f7ff ba3e 	b.w	800110a <GPS_UART_RxCpltCallback>
}
 8001c8e:	4770      	bx	lr
 8001c90:	40004400 	.word	0x40004400
 8001c94:	20000260 	.word	0x20000260

08001c98 <ReadAndDisplaySensors>:
{
 8001c98:	b570      	push	{r4, r5, r6, lr}
    temperature = LM35_ReadTemperature(&hadc1);
 8001c9a:	481c      	ldr	r0, [pc, #112]	@ (8001d0c <ReadAndDisplaySensors+0x74>)
{
 8001c9c:	b088      	sub	sp, #32
    temperature = LM35_ReadTemperature(&hadc1);
 8001c9e:	f7ff ff43 	bl	8001b28 <LM35_ReadTemperature>
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <ReadAndDisplaySensors+0x78>)
 8001ca4:	6018      	str	r0, [r3, #0]
    UART_Print(temperature);
 8001ca6:	f7ff ffb5 	bl	8001c14 <UART_Print>
    LightSensor_ReadAll(&hadc1, &ldr_values);
 8001caa:	491a      	ldr	r1, [pc, #104]	@ (8001d14 <ReadAndDisplaySensors+0x7c>)
 8001cac:	4817      	ldr	r0, [pc, #92]	@ (8001d0c <ReadAndDisplaySensors+0x74>)
 8001cae:	f7ff ff05 	bl	8001abc <LightSensor_ReadAll>
    UART_PrintLDRs(&ldr_values);
 8001cb2:	4818      	ldr	r0, [pc, #96]	@ (8001d14 <ReadAndDisplaySensors+0x7c>)
 8001cb4:	f7ff ffc8 	bl	8001c48 <UART_PrintLDRs>
    if (MPU6050_ReadAllData(&hmpu) == MPU6050_OK) {
 8001cb8:	4817      	ldr	r0, [pc, #92]	@ (8001d18 <ReadAndDisplaySensors+0x80>)
 8001cba:	f000 faa5 	bl	8002208 <MPU6050_ReadAllData>
 8001cbe:	b930      	cbnz	r0, 8001cce <ReadAndDisplaySensors+0x36>
        MPU6050_Print(&hmpu, &huart1);
 8001cc0:	4916      	ldr	r1, [pc, #88]	@ (8001d1c <ReadAndDisplaySensors+0x84>)
 8001cc2:	4815      	ldr	r0, [pc, #84]	@ (8001d18 <ReadAndDisplaySensors+0x80>)
}
 8001cc4:	b008      	add	sp, #32
 8001cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MPU6050_Print(&hmpu, &huart1);
 8001cca:	f000 bb71 	b.w	80023b0 <MPU6050_Print>
        char msg[] = "Failed to read MPU6050 data!\r\n";
 8001cce:	466a      	mov	r2, sp
 8001cd0:	4615      	mov	r5, r2
 8001cd2:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <ReadAndDisplaySensors+0x88>)
 8001cd4:	f103 0618 	add.w	r6, r3, #24
 8001cd8:	4614      	mov	r4, r2
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	3308      	adds	r3, #8
 8001ce0:	c403      	stmia	r4!, {r0, r1}
 8001ce2:	42b3      	cmp	r3, r6
 8001ce4:	4622      	mov	r2, r4
 8001ce6:	d1f7      	bne.n	8001cd8 <ReadAndDisplaySensors+0x40>
 8001ce8:	8899      	ldrh	r1, [r3, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	799b      	ldrb	r3, [r3, #6]
 8001cee:	6020      	str	r0, [r4, #0]
 8001cf0:	80a1      	strh	r1, [r4, #4]
 8001cf2:	71a3      	strb	r3, [r4, #6]
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f7fe fa2b 	bl	8000150 <strlen>
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	b282      	uxth	r2, r0
 8001d00:	4629      	mov	r1, r5
 8001d02:	4806      	ldr	r0, [pc, #24]	@ (8001d1c <ReadAndDisplaySensors+0x84>)
 8001d04:	f003 fce9 	bl	80056da <HAL_UART_Transmit>
}
 8001d08:	b008      	add	sp, #32
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
 8001d0c:	200006f4 	.word	0x200006f4
 8001d10:	200001f8 	.word	0x200001f8
 8001d14:	2000056c 	.word	0x2000056c
 8001d18:	200001fc 	.word	0x200001fc
 8001d1c:	200005bc 	.word	0x200005bc
 8001d20:	0800a07c 	.word	0x0800a07c

08001d24 <main>:
{
 8001d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d28:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 8001d2a:	f000 fdff 	bl	800292c <HAL_Init>
  SystemClock_Config();
 8001d2e:	f7ff ff3b 	bl	8001ba8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	2210      	movs	r2, #16
 8001d34:	2100      	movs	r1, #0
 8001d36:	a811      	add	r0, sp, #68	@ 0x44
 8001d38:	f005 fb47 	bl	80073ca <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001eb8 <main+0x194>)
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|GPIO_PIN_15|IN2_Pin|IN3_Pin
 8001d3e:	f248 013c 	movw	r1, #32828	@ 0x803c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|GPIO_PIN_15|IN2_Pin|IN3_Pin
 8001d44:	485d      	ldr	r0, [pc, #372]	@ (8001ebc <main+0x198>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	f042 0204 	orr.w	r2, r2, #4
 8001d4a:	619a      	str	r2, [r3, #24]
 8001d4c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	f002 0204 	and.w	r2, r2, #4
 8001d54:	9201      	str	r2, [sp, #4]
 8001d56:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	f042 0208 	orr.w	r2, r2, #8
 8001d60:	619a      	str	r2, [r3, #24]
 8001d62:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|GPIO_PIN_15|IN2_Pin|IN3_Pin
 8001d64:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|GPIO_PIN_15|IN2_Pin|IN3_Pin
 8001d6e:	f001 fa5d 	bl	800322c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	f248 033c 	movw	r3, #32828	@ 0x803c
 8001d76:	e9cd 3511 	strd	r3, r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	484f      	ldr	r0, [pc, #316]	@ (8001ebc <main+0x198>)
 8001d7e:	a911      	add	r1, sp, #68	@ 0x44
  hadc1.Instance = ADC1;
 8001d80:	4e4f      	ldr	r6, [pc, #316]	@ (8001ec0 <main+0x19c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	e9cd 4313 	strd	r4, r3, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f001 f94b 	bl	8003020 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec4 <main+0x1a0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d8c:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 8001d8e:	6033      	str	r3, [r6, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d90:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d94:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d96:	61f3      	str	r3, [r6, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d98:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d9a:	7534      	strb	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d9c:	6074      	str	r4, [r6, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001d9e:	6135      	str	r5, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da0:	f000 ffea 	bl	8002d78 <HAL_ADC_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b108      	cbz	r0, 8001dac <main+0x88>
 8001da8:	b672      	cpsid	i
	while (1) {
 8001daa:	e7fe      	b.n	8001daa <main+0x86>
  huart1.Init.BaudRate = 9600;
 8001dac:	f44f 5816 	mov.w	r8, #9600	@ 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db0:	270c      	movs	r7, #12
  huart1.Instance = USART1;
 8001db2:	4845      	ldr	r0, [pc, #276]	@ (8001ec8 <main+0x1a4>)
  huart1.Init.BaudRate = 9600;
 8001db4:	4a45      	ldr	r2, [pc, #276]	@ (8001ecc <main+0x1a8>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001db6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8001dba:	e9c0 2800 	strd	r2, r8, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dc2:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dc6:	f003 fc57 	bl	8005678 <HAL_UART_Init>
 8001dca:	4605      	mov	r5, r0
 8001dcc:	b108      	cbz	r0, 8001dd2 <main+0xae>
 8001dce:	b672      	cpsid	i
	while (1) {
 8001dd0:	e7fe      	b.n	8001dd0 <main+0xac>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd2:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd8:	221c      	movs	r2, #28
 8001dda:	a811      	add	r0, sp, #68	@ 0x44
 8001ddc:	f005 faf5 	bl	80073ca <memset>
  htim4.Init.Prescaler = 7;
 8001de0:	2307      	movs	r3, #7
  htim4.Instance = TIM4;
 8001de2:	4c3b      	ldr	r4, [pc, #236]	@ (8001ed0 <main+0x1ac>)
  htim4.Init.Prescaler = 7;
 8001de4:	493b      	ldr	r1, [pc, #236]	@ (8001ed4 <main+0x1b0>)
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001de6:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 7;
 8001de8:	e9c4 1300 	strd	r1, r3, [r4]
  htim4.Init.Period = 999;
 8001dec:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df0:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001df4:	2380      	movs	r3, #128	@ 0x80
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df6:	60a5      	str	r5, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001df8:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dfa:	f003 fa4f 	bl	800529c <HAL_TIM_PWM_Init>
 8001dfe:	b108      	cbz	r0, 8001e04 <main+0xe0>
 8001e00:	b672      	cpsid	i
	while (1) {
 8001e02:	e7fe      	b.n	8001e02 <main+0xde>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e04:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e08:	a907      	add	r1, sp, #28
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f003 fb64 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e10:	4602      	mov	r2, r0
 8001e12:	b108      	cbz	r0, 8001e18 <main+0xf4>
 8001e14:	b672      	cpsid	i
	while (1) {
 8001e16:	e7fe      	b.n	8001e16 <main+0xf2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e18:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1a:	9013      	str	r0, [sp, #76]	@ 0x4c
  sConfigOC.Pulse = 0;
 8001e1c:	e9cd 3011 	strd	r3, r0, [sp, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e20:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e22:	a911      	add	r1, sp, #68	@ 0x44
 8001e24:	4620      	mov	r0, r4
 8001e26:	f003 fa91 	bl	800534c <HAL_TIM_PWM_ConfigChannel>
 8001e2a:	b108      	cbz	r0, 8001e30 <main+0x10c>
 8001e2c:	b672      	cpsid	i
	while (1) {
 8001e2e:	e7fe      	b.n	8001e2e <main+0x10a>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e30:	2204      	movs	r2, #4
 8001e32:	4620      	mov	r0, r4
 8001e34:	a911      	add	r1, sp, #68	@ 0x44
 8001e36:	f003 fa89 	bl	800534c <HAL_TIM_PWM_ConfigChannel>
 8001e3a:	4681      	mov	r9, r0
 8001e3c:	b108      	cbz	r0, 8001e42 <main+0x11e>
 8001e3e:	b672      	cpsid	i
	while (1) {
 8001e40:	e7fe      	b.n	8001e40 <main+0x11c>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e42:	f44f 4a80 	mov.w	sl, #16384	@ 0x4000
  hi2c1.Instance = I2C1;
 8001e46:	4d24      	ldr	r5, [pc, #144]	@ (8001ed8 <main+0x1b4>)
  HAL_TIM_MspPostInit(&htim4);
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f000 fbed 	bl	8002628 <HAL_TIM_MspPostInit>
  hi2c1.Init.ClockSpeed = 100000;
 8001e4e:	f8df b08c 	ldr.w	fp, [pc, #140]	@ 8001edc <main+0x1b8>
 8001e52:	4b23      	ldr	r3, [pc, #140]	@ (8001ee0 <main+0x1bc>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e54:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 8001e56:	e9c5 3b00 	strd	r3, fp, [r5]
  hi2c1.Init.OwnAddress1 = 0;
 8001e5a:	e9c5 9902 	strd	r9, r9, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e5e:	e9c5 a904 	strd	sl, r9, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e62:	e9c5 9906 	strd	r9, r9, [r5, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e66:	f8c5 9020 	str.w	r9, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e6a:	f001 fbed 	bl	8003648 <HAL_I2C_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b108      	cbz	r0, 8001e76 <main+0x152>
 8001e72:	b672      	cpsid	i
	while (1) {
 8001e74:	e7fe      	b.n	8001e74 <main+0x150>
  hi2c2.Instance = I2C2;
 8001e76:	481b      	ldr	r0, [pc, #108]	@ (8001ee4 <main+0x1c0>)
 8001e78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee8 <main+0x1c4>)
  hi2c2.Init.OwnAddress1 = 0;
 8001e7a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e7e:	e9c0 a304 	strd	sl, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e82:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e86:	6203      	str	r3, [r0, #32]
  hi2c2.Init.ClockSpeed = 100000;
 8001e88:	e9c0 2b00 	strd	r2, fp, [r0]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e8c:	f001 fbdc 	bl	8003648 <HAL_I2C_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b108      	cbz	r0, 8001e98 <main+0x174>
 8001e94:	b672      	cpsid	i
	while (1) {
 8001e96:	e7fe      	b.n	8001e96 <main+0x172>
  huart2.Instance = USART2;
 8001e98:	4814      	ldr	r0, [pc, #80]	@ (8001eec <main+0x1c8>)
 8001e9a:	4a15      	ldr	r2, [pc, #84]	@ (8001ef0 <main+0x1cc>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 9600;
 8001ea0:	e9c0 2800 	strd	r2, r8, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eac:	f003 fbe4 	bl	8005678 <HAL_UART_Init>
 8001eb0:	b300      	cbz	r0, 8001ef4 <main+0x1d0>
 8001eb2:	b672      	cpsid	i
	while (1) {
 8001eb4:	e7fe      	b.n	8001eb4 <main+0x190>
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40010c00 	.word	0x40010c00
 8001ec0:	200006f4 	.word	0x200006f4
 8001ec4:	40012400 	.word	0x40012400
 8001ec8:	200005bc 	.word	0x200005bc
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	20000604 	.word	0x20000604
 8001ed4:	40000800 	.word	0x40000800
 8001ed8:	200006a0 	.word	0x200006a0
 8001edc:	000186a0 	.word	0x000186a0
 8001ee0:	40005400 	.word	0x40005400
 8001ee4:	2000064c 	.word	0x2000064c
 8001ee8:	40005800 	.word	0x40005800
 8001eec:	20000574 	.word	0x20000574
 8001ef0:	40004400 	.word	0x40004400
  LM35_Init(&hadc1);
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	f7ff fdf9 	bl	8001aec <LM35_Init>
  LightSensor_Init(&hadc1);
 8001efa:	4630      	mov	r0, r6
 8001efc:	f7ff fd9c 	bl	8001a38 <LightSensor_Init>
  if (MPU6050_Init(&hmpu, &hi2c1) != MPU6050_OK) {
 8001f00:	4629      	mov	r1, r5
 8001f02:	485a      	ldr	r0, [pc, #360]	@ (800206c <main+0x348>)
 8001f04:	f000 f939 	bl	800217a <MPU6050_Init>
 8001f08:	b1b8      	cbz	r0, 8001f3a <main+0x216>
      char msg[] = "MPU6050 initialization failed!\r\n";
 8001f0a:	4b59      	ldr	r3, [pc, #356]	@ (8002070 <main+0x34c>)
 8001f0c:	aa11      	add	r2, sp, #68	@ 0x44
 8001f0e:	f103 0620 	add.w	r6, r3, #32
 8001f12:	4615      	mov	r5, r2
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	3308      	adds	r3, #8
 8001f1a:	c503      	stmia	r5!, {r0, r1}
 8001f1c:	42b3      	cmp	r3, r6
 8001f1e:	462a      	mov	r2, r5
 8001f20:	d1f7      	bne.n	8001f12 <main+0x1ee>
 8001f22:	781b      	ldrb	r3, [r3, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f24:	a811      	add	r0, sp, #68	@ 0x44
      char msg[] = "MPU6050 initialization failed!\r\n";
 8001f26:	702b      	strb	r3, [r5, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f28:	f7fe f912 	bl	8000150 <strlen>
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	b282      	uxth	r2, r0
 8001f32:	a911      	add	r1, sp, #68	@ 0x44
 8001f34:	484f      	ldr	r0, [pc, #316]	@ (8002074 <main+0x350>)
 8001f36:	f003 fbd0 	bl	80056da <HAL_UART_Transmit>
  if (MPU6050_Calibrate(&hmpu, 100) != MPU6050_OK) {
 8001f3a:	2164      	movs	r1, #100	@ 0x64
 8001f3c:	484b      	ldr	r0, [pc, #300]	@ (800206c <main+0x348>)
 8001f3e:	f000 fa06 	bl	800234e <MPU6050_Calibrate>
 8001f42:	b1c8      	cbz	r0, 8001f78 <main+0x254>
      char msg[] = "MPU6050 calibration failed!\r\n";
 8001f44:	4b4c      	ldr	r3, [pc, #304]	@ (8002078 <main+0x354>)
 8001f46:	aa11      	add	r2, sp, #68	@ 0x44
 8001f48:	f103 0618 	add.w	r6, r3, #24
 8001f4c:	4615      	mov	r5, r2
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	6859      	ldr	r1, [r3, #4]
 8001f52:	3308      	adds	r3, #8
 8001f54:	c503      	stmia	r5!, {r0, r1}
 8001f56:	42b3      	cmp	r3, r6
 8001f58:	462a      	mov	r2, r5
 8001f5a:	d1f7      	bne.n	8001f4c <main+0x228>
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	889b      	ldrh	r3, [r3, #4]
 8001f60:	6028      	str	r0, [r5, #0]
 8001f62:	80ab      	strh	r3, [r5, #4]
      HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f64:	a811      	add	r0, sp, #68	@ 0x44
 8001f66:	f7fe f8f3 	bl	8000150 <strlen>
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	b282      	uxth	r2, r0
 8001f70:	a911      	add	r1, sp, #68	@ 0x44
 8001f72:	4840      	ldr	r0, [pc, #256]	@ (8002074 <main+0x350>)
 8001f74:	f003 fbb1 	bl	80056da <HAL_UART_Transmit>
  motor_init.channel_b = TIM_CHANNEL_2;
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  motor_init.mode = L298N_DUAL_CHANNEL;
 8001f80:	2301      	movs	r3, #1
  L298N_Init(&hmotor, &motor_init);
 8001f82:	483e      	ldr	r0, [pc, #248]	@ (800207c <main+0x358>)
 8001f84:	a903      	add	r1, sp, #12
  motor_init.htim = &htim4;
 8001f86:	9403      	str	r4, [sp, #12]
  motor_init.mode = L298N_DUAL_CHANNEL;
 8001f88:	f88d 3018 	strb.w	r3, [sp, #24]
  L298N_Init(&hmotor, &motor_init);
 8001f8c:	f7ff fcfa 	bl	8001984 <L298N_Init>
  if (GPS_Init(&hgps, &huart2) != GPS_OK) {
 8001f90:	493b      	ldr	r1, [pc, #236]	@ (8002080 <main+0x35c>)
 8001f92:	483c      	ldr	r0, [pc, #240]	@ (8002084 <main+0x360>)
 8001f94:	f7ff f8a2 	bl	80010dc <GPS_Init>
 8001f98:	b1c8      	cbz	r0, 8001fce <main+0x2aa>
    char msg[] = "GPS initialization failed!\r\n";
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002088 <main+0x364>)
 8001f9c:	aa11      	add	r2, sp, #68	@ 0x44
 8001f9e:	f103 0518 	add.w	r5, r3, #24
 8001fa2:	4614      	mov	r4, r2
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	3308      	adds	r3, #8
 8001faa:	c403      	stmia	r4!, {r0, r1}
 8001fac:	42ab      	cmp	r3, r5
 8001fae:	4622      	mov	r2, r4
 8001fb0:	d1f7      	bne.n	8001fa2 <main+0x27e>
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	791b      	ldrb	r3, [r3, #4]
 8001fb6:	6020      	str	r0, [r4, #0]
 8001fb8:	7123      	strb	r3, [r4, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001fba:	a811      	add	r0, sp, #68	@ 0x44
 8001fbc:	f7fe f8c8 	bl	8000150 <strlen>
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc4:	b282      	uxth	r2, r0
 8001fc6:	a911      	add	r1, sp, #68	@ 0x44
 8001fc8:	482a      	ldr	r0, [pc, #168]	@ (8002074 <main+0x350>)
 8001fca:	f003 fb86 	bl	80056da <HAL_UART_Transmit>
  char msg[] = "System initialized. Starting main loop...\r\n";
 8001fce:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <main+0x368>)
 8001fd0:	aa11      	add	r2, sp, #68	@ 0x44
 8001fd2:	f103 0528 	add.w	r5, r3, #40	@ 0x28
 8001fd6:	4614      	mov	r4, r2
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	3308      	adds	r3, #8
 8001fde:	c403      	stmia	r4!, {r0, r1}
 8001fe0:	42ab      	cmp	r3, r5
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	d1f7      	bne.n	8001fd6 <main+0x2b2>
 8001fe6:	6818      	ldr	r0, [r3, #0]
		    GPS_Process(&hgps);
 8001fe8:	4e26      	ldr	r6, [pc, #152]	@ (8002084 <main+0x360>)
  char msg[] = "System initialized. Starting main loop...\r\n";
 8001fea:	6020      	str	r0, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001fec:	a811      	add	r0, sp, #68	@ 0x44
 8001fee:	f7fe f8af 	bl	8000150 <strlen>
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	b282      	uxth	r2, r0
 8001ff8:	a911      	add	r1, sp, #68	@ 0x44
 8001ffa:	481e      	ldr	r0, [pc, #120]	@ (8002074 <main+0x350>)
 8001ffc:	f003 fb6d 	bl	80056da <HAL_UART_Transmit>
		    if (current_time - last_sensor_read >= SENSOR_READ_INTERVAL) {
 8002000:	4d23      	ldr	r5, [pc, #140]	@ (8002090 <main+0x36c>)
		        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002002:	4f24      	ldr	r7, [pc, #144]	@ (8002094 <main+0x370>)
		   uint32_t current_time = HAL_GetTick();
 8002004:	f000 fcb0 	bl	8002968 <HAL_GetTick>
 8002008:	4604      	mov	r4, r0
		    GPS_Process(&hgps);
 800200a:	4630      	mov	r0, r6
 800200c:	f7ff fb84 	bl	8001718 <GPS_Process>
		    if (current_time - last_sensor_read >= SENSOR_READ_INTERVAL) {
 8002010:	682b      	ldr	r3, [r5, #0]
 8002012:	1ae3      	subs	r3, r4, r3
 8002014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002018:	d324      	bcc.n	8002064 <main+0x340>
		        GPS_DebugPrint(&hgps, &huart1);
 800201a:	4630      	mov	r0, r6
 800201c:	4915      	ldr	r1, [pc, #84]	@ (8002074 <main+0x350>)
		        last_sensor_read = current_time;
 800201e:	602c      	str	r4, [r5, #0]
		        GPS_DebugPrint(&hgps, &huart1);
 8002020:	f7ff fbb8 	bl	8001794 <GPS_DebugPrint>
		        ReadAndDisplaySensors();
 8002024:	f7ff fe38 	bl	8001c98 <ReadAndDisplaySensors>
		        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002028:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800202c:	4638      	mov	r0, r7
 800202e:	f001 f902 	bl	8003236 <HAL_GPIO_TogglePin>
		        char separator[] = "----------------------------------\r\n";
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <main+0x374>)
 8002034:	aa07      	add	r2, sp, #28
 8002036:	f103 0c20 	add.w	ip, r3, #32
 800203a:	4614      	mov	r4, r2
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	3308      	adds	r3, #8
 8002042:	c403      	stmia	r4!, {r0, r1}
 8002044:	4563      	cmp	r3, ip
 8002046:	4622      	mov	r2, r4
 8002048:	d1f7      	bne.n	800203a <main+0x316>
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	791b      	ldrb	r3, [r3, #4]
 800204e:	6020      	str	r0, [r4, #0]
 8002050:	7123      	strb	r3, [r4, #4]
		        HAL_UART_Transmit(&huart1, (uint8_t*)separator, strlen(separator), 100);
 8002052:	a807      	add	r0, sp, #28
 8002054:	f7fe f87c 	bl	8000150 <strlen>
 8002058:	2364      	movs	r3, #100	@ 0x64
 800205a:	b282      	uxth	r2, r0
 800205c:	a907      	add	r1, sp, #28
 800205e:	4805      	ldr	r0, [pc, #20]	@ (8002074 <main+0x350>)
 8002060:	f003 fb3b 	bl	80056da <HAL_UART_Transmit>
		    HAL_Delay(10);
 8002064:	200a      	movs	r0, #10
 8002066:	f000 fc85 	bl	8002974 <HAL_Delay>
	while (1) {
 800206a:	e7cb      	b.n	8002004 <main+0x2e0>
 800206c:	200001fc 	.word	0x200001fc
 8002070:	0800a09b 	.word	0x0800a09b
 8002074:	200005bc 	.word	0x200005bc
 8002078:	0800a0bc 	.word	0x0800a0bc
 800207c:	20000540 	.word	0x20000540
 8002080:	20000574 	.word	0x20000574
 8002084:	20000260 	.word	0x20000260
 8002088:	0800a0da 	.word	0x0800a0da
 800208c:	0800a0f7 	.word	0x0800a0f7
 8002090:	200001f4 	.word	0x200001f4
 8002094:	40011000 	.word	0x40011000
 8002098:	0800a123 	.word	0x0800a123

0800209c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 800209c:	6802      	ldr	r2, [r0, #0]
 800209e:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x10>)
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d101      	bne.n	80020a8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80020a4:	f000 bc54 	b.w	8002950 <HAL_IncTick>
}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40012c00 	.word	0x40012c00

080020b0 <MPU6050_ReadRegisters>:
 * @param reg Starting register address
 * @param data Pointer to data buffer
 * @param length Number of bytes to read
 * @return Status
 */
static MPU6050_Status MPU6050_ReadRegisters(MPU6050_Handle *hdev, uint8_t reg, uint8_t *data, uint8_t length) {
 80020b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, data, length, 100);
 80020b2:	2464      	movs	r4, #100	@ 0x64
 80020b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80020b8:	9200      	str	r2, [sp, #0]
 80020ba:	2301      	movs	r3, #1
 80020bc:	460a      	mov	r2, r1
 80020be:	7901      	ldrb	r1, [r0, #4]
 80020c0:	6800      	ldr	r0, [r0, #0]
 80020c2:	f001 fc01 	bl	80038c8 <HAL_I2C_Mem_Read>

    return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
}
 80020c6:	3800      	subs	r0, #0
 80020c8:	bf18      	it	ne
 80020ca:	2001      	movne	r0, #1
 80020cc:	b004      	add	sp, #16
 80020ce:	bd10      	pop	{r4, pc}

080020d0 <MPU6050_WriteRegister>:
 * @param hdev MPU6050 handle
 * @param reg Register address
 * @param data Data to write
 * @return Status
 */
static MPU6050_Status MPU6050_WriteRegister(MPU6050_Handle *hdev, uint8_t reg, uint8_t data) {
 80020d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Write(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80020d2:	2301      	movs	r3, #1
static MPU6050_Status MPU6050_WriteRegister(MPU6050_Handle *hdev, uint8_t reg, uint8_t data) {
 80020d4:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80020d8:	2264      	movs	r2, #100	@ 0x64
 80020da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80020de:	f10d 0217 	add.w	r2, sp, #23
 80020e2:	9200      	str	r2, [sp, #0]
 80020e4:	460a      	mov	r2, r1
 80020e6:	7901      	ldrb	r1, [r0, #4]
 80020e8:	6800      	ldr	r0, [r0, #0]
 80020ea:	f001 fb59 	bl	80037a0 <HAL_I2C_Mem_Write>

    return (status == HAL_OK) ? MPU6050_OK : MPU6050_ERROR;
}
 80020ee:	3800      	subs	r0, #0
 80020f0:	bf18      	it	ne
 80020f2:	2001      	movne	r0, #1
 80020f4:	b007      	add	sp, #28
 80020f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080020fc <MPU6050_SetGyroScale>:
MPU6050_Status MPU6050_SetGyroScale(MPU6050_Handle *hdev, uint8_t scale) {
 80020fc:	b538      	push	{r3, r4, r5, lr}
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_GYRO_CONFIG, scale);
 80020fe:	460a      	mov	r2, r1
MPU6050_Status MPU6050_SetGyroScale(MPU6050_Handle *hdev, uint8_t scale) {
 8002100:	460c      	mov	r4, r1
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_GYRO_CONFIG, scale);
 8002102:	211b      	movs	r1, #27
MPU6050_Status MPU6050_SetGyroScale(MPU6050_Handle *hdev, uint8_t scale) {
 8002104:	4605      	mov	r5, r0
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_GYRO_CONFIG, scale);
 8002106:	f7ff ffe3 	bl	80020d0 <MPU6050_WriteRegister>
    if (status != MPU6050_OK) {
 800210a:	b938      	cbnz	r0, 800211c <MPU6050_SetGyroScale+0x20>
    switch (scale) {
 800210c:	2c10      	cmp	r4, #16
 800210e:	d006      	beq.n	800211e <MPU6050_SetGyroScale+0x22>
 8002110:	2c18      	cmp	r4, #24
 8002112:	d006      	beq.n	8002122 <MPU6050_SetGyroScale+0x26>
 8002114:	b93c      	cbnz	r4, 8002126 <MPU6050_SetGyroScale+0x2a>
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <MPU6050_SetGyroScale+0x30>)
    hdev->gyroScale = scale;
 8002118:	716c      	strb	r4, [r5, #5]
            hdev->gyroScaleFactor = 65.5f;  // 65.5 LSB/(°/s)
 800211a:	632b      	str	r3, [r5, #48]	@ 0x30
}
 800211c:	bd38      	pop	{r3, r4, r5, pc}
    switch (scale) {
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <MPU6050_SetGyroScale+0x34>)
 8002120:	e7fa      	b.n	8002118 <MPU6050_SetGyroScale+0x1c>
 8002122:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <MPU6050_SetGyroScale+0x38>)
 8002124:	e7f8      	b.n	8002118 <MPU6050_SetGyroScale+0x1c>
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <MPU6050_SetGyroScale+0x3c>)
 8002128:	e7f6      	b.n	8002118 <MPU6050_SetGyroScale+0x1c>
 800212a:	bf00      	nop
 800212c:	43030000 	.word	0x43030000
 8002130:	42033333 	.word	0x42033333
 8002134:	41833333 	.word	0x41833333
 8002138:	42830000 	.word	0x42830000

0800213c <MPU6050_SetAccelScale>:
MPU6050_Status MPU6050_SetAccelScale(MPU6050_Handle *hdev, uint8_t scale) {
 800213c:	b538      	push	{r3, r4, r5, lr}
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_ACCEL_CONFIG, scale);
 800213e:	460a      	mov	r2, r1
MPU6050_Status MPU6050_SetAccelScale(MPU6050_Handle *hdev, uint8_t scale) {
 8002140:	460c      	mov	r4, r1
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_ACCEL_CONFIG, scale);
 8002142:	211c      	movs	r1, #28
MPU6050_Status MPU6050_SetAccelScale(MPU6050_Handle *hdev, uint8_t scale) {
 8002144:	4605      	mov	r5, r0
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_ACCEL_CONFIG, scale);
 8002146:	f7ff ffc3 	bl	80020d0 <MPU6050_WriteRegister>
    if (status != MPU6050_OK) {
 800214a:	b940      	cbnz	r0, 800215e <MPU6050_SetAccelScale+0x22>
    switch (scale) {
 800214c:	2c10      	cmp	r4, #16
 800214e:	d007      	beq.n	8002160 <MPU6050_SetAccelScale+0x24>
 8002150:	2c18      	cmp	r4, #24
 8002152:	d008      	beq.n	8002166 <MPU6050_SetAccelScale+0x2a>
 8002154:	b954      	cbnz	r4, 800216c <MPU6050_SetAccelScale+0x30>
 8002156:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
    hdev->accelScale = scale;
 800215a:	71ac      	strb	r4, [r5, #6]
            hdev->accelScaleFactor = 8192.0f;  // 8192 LSB/g
 800215c:	636b      	str	r3, [r5, #52]	@ 0x34
}
 800215e:	bd38      	pop	{r3, r4, r5, pc}
    switch (scale) {
 8002160:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 8002164:	e7f9      	b.n	800215a <MPU6050_SetAccelScale+0x1e>
 8002166:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 800216a:	e7f6      	b.n	800215a <MPU6050_SetAccelScale+0x1e>
 800216c:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8002170:	e7f3      	b.n	800215a <MPU6050_SetAccelScale+0x1e>

08002172 <MPU6050_SetDLPF>:
MPU6050_Status MPU6050_SetDLPF(MPU6050_Handle *hdev, uint8_t bandwidth) {
 8002172:	460a      	mov	r2, r1
    return MPU6050_WriteRegister(hdev, MPU6050_REG_CONFIG, bandwidth);
 8002174:	211a      	movs	r1, #26
 8002176:	f7ff bfab 	b.w	80020d0 <MPU6050_WriteRegister>

0800217a <MPU6050_Init>:
MPU6050_Status MPU6050_Init(MPU6050_Handle *hdev, I2C_HandleTypeDef *hi2c) {
 800217a:	b510      	push	{r4, lr}
    hdev->currently_away = false;
 800217c:	2300      	movs	r3, #0
MPU6050_Status MPU6050_Init(MPU6050_Handle *hdev, I2C_HandleTypeDef *hi2c) {
 800217e:	4604      	mov	r4, r0
    hdev->calibDelay = 50; // Default calibration delay 50ms
 8002180:	2232      	movs	r2, #50	@ 0x32
    hdev->currently_away = false;
 8002182:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
    memset(&hdev->rawAccel, 0, sizeof(hdev->rawAccel));
 8002186:	60a3      	str	r3, [r4, #8]
 8002188:	81a3      	strh	r3, [r4, #12]
    memset(&hdev->rawGyro, 0, sizeof(hdev->rawGyro));
 800218a:	f8c4 300e 	str.w	r3, [r4, #14]
 800218e:	8263      	strh	r3, [r4, #18]
    memset(&hdev->scaledAccel, 0, sizeof(hdev->scaledAccel));
 8002190:	6163      	str	r3, [r4, #20]
 8002192:	61a3      	str	r3, [r4, #24]
 8002194:	61e3      	str	r3, [r4, #28]
    memset(&hdev->scaledGyro, 0, sizeof(hdev->scaledGyro));
 8002196:	6223      	str	r3, [r4, #32]
 8002198:	6263      	str	r3, [r4, #36]	@ 0x24
 800219a:	62a3      	str	r3, [r4, #40]	@ 0x28
    hdev->temperature = 0.0f;
 800219c:	2300      	movs	r3, #0
    hdev->hi2c = hi2c;
 800219e:	6021      	str	r1, [r4, #0]
    hdev->calibDelay = 50; // Default calibration delay 50ms
 80021a0:	8722      	strh	r2, [r4, #56]	@ 0x38
    hdev->temperature = 0.0f;
 80021a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
MPU6050_Status MPU6050_Init(MPU6050_Handle *hdev, I2C_HandleTypeDef *hi2c) {
 80021a4:	4608      	mov	r0, r1
    status = HAL_I2C_Mem_Read(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80021a6:	2301      	movs	r3, #1
    hdev->address = MPU6050_ADDR;
 80021a8:	21d0      	movs	r1, #208	@ 0xd0
    status = HAL_I2C_Mem_Read(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80021aa:	2264      	movs	r2, #100	@ 0x64
MPU6050_Status MPU6050_Init(MPU6050_Handle *hdev, I2C_HandleTypeDef *hi2c) {
 80021ac:	b086      	sub	sp, #24
    hdev->address = MPU6050_ADDR;
 80021ae:	7121      	strb	r1, [r4, #4]
    status = HAL_I2C_Mem_Read(hdev->hi2c, hdev->address, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80021b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80021b4:	f10d 0217 	add.w	r2, sp, #23
 80021b8:	9200      	str	r2, [sp, #0]
 80021ba:	2275      	movs	r2, #117	@ 0x75
 80021bc:	f001 fb84 	bl	80038c8 <HAL_I2C_Mem_Read>
    if (status != MPU6050_OK || check != MPU6050_DEVICE_ID) {
 80021c0:	4602      	mov	r2, r0
 80021c2:	b9f0      	cbnz	r0, 8002202 <MPU6050_Init+0x88>
 80021c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80021c8:	2b68      	cmp	r3, #104	@ 0x68
 80021ca:	d11a      	bne.n	8002202 <MPU6050_Init+0x88>
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_PWR_MGMT_1, 0x00);
 80021cc:	216b      	movs	r1, #107	@ 0x6b
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff ff7e 	bl	80020d0 <MPU6050_WriteRegister>
    if (status != MPU6050_OK) {
 80021d4:	b998      	cbnz	r0, 80021fe <MPU6050_Init+0x84>
    status = MPU6050_WriteRegister(hdev, MPU6050_REG_SMPLRT_DIV, 0x07); // 1kHz / (1 + 7) = 125Hz
 80021d6:	2207      	movs	r2, #7
 80021d8:	2119      	movs	r1, #25
 80021da:	4620      	mov	r0, r4
 80021dc:	f7ff ff78 	bl	80020d0 <MPU6050_WriteRegister>
    if (status != MPU6050_OK) {
 80021e0:	b968      	cbnz	r0, 80021fe <MPU6050_Init+0x84>
    status = MPU6050_SetDLPF(hdev, MPU6050_DLPF_BW_42);
 80021e2:	2103      	movs	r1, #3
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff ffc4 	bl	8002172 <MPU6050_SetDLPF>
    if (status != MPU6050_OK) {
 80021ea:	b940      	cbnz	r0, 80021fe <MPU6050_Init+0x84>
    status = MPU6050_SetGyroScale(hdev, MPU6050_GYRO_FS_500);
 80021ec:	2108      	movs	r1, #8
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7ff ff84 	bl	80020fc <MPU6050_SetGyroScale>
    if (status != MPU6050_OK) {
 80021f4:	b918      	cbnz	r0, 80021fe <MPU6050_Init+0x84>
    status = MPU6050_SetAccelScale(hdev, MPU6050_ACCEL_FS_4G);
 80021f6:	2108      	movs	r1, #8
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff ff9f 	bl	800213c <MPU6050_SetAccelScale>
}
 80021fe:	b006      	add	sp, #24
 8002200:	bd10      	pop	{r4, pc}
        return MPU6050_NO_DEVICE;
 8002202:	2004      	movs	r0, #4
 8002204:	e7fb      	b.n	80021fe <MPU6050_Init+0x84>
	...

08002208 <MPU6050_ReadAllData>:
MPU6050_Status MPU6050_ReadAllData(MPU6050_Handle *hdev) {
 8002208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800220c:	b087      	sub	sp, #28
    status = MPU6050_ReadRegisters(hdev, MPU6050_REG_ACCEL_XOUT_H, data, 14);
 800220e:	230e      	movs	r3, #14
 8002210:	213b      	movs	r1, #59	@ 0x3b
 8002212:	aa02      	add	r2, sp, #8
MPU6050_Status MPU6050_ReadAllData(MPU6050_Handle *hdev) {
 8002214:	4604      	mov	r4, r0
    status = MPU6050_ReadRegisters(hdev, MPU6050_REG_ACCEL_XOUT_H, data, 14);
 8002216:	f7ff ff4b 	bl	80020b0 <MPU6050_ReadRegisters>
    if (status != MPU6050_OK) {
 800221a:	4606      	mov	r6, r0
 800221c:	2800      	cmp	r0, #0
 800221e:	d15a      	bne.n	80022d6 <MPU6050_ReadAllData+0xce>
    hdev->rawAccel.x = (int16_t)((data[0] << 8) | data[1]);
 8002220:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    hdev->temperature = (float)rawTemp / 340.0f + 36.53f; // MPU6050 formula from datasheet
 8002224:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8002228:	ba52      	rev16	r2, r2
 800222a:	fa0f fb82 	sxth.w	fp, r2
    hdev->rawAccel.x = (int16_t)((data[0] << 8) | data[1]);
 800222e:	8122      	strh	r2, [r4, #8]
    hdev->rawAccel.y = (int16_t)((data[2] << 8) | data[3]);
 8002230:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    hdev->temperature = (float)rawTemp / 340.0f + 36.53f; // MPU6050 formula from datasheet
 8002234:	bac0      	revsh	r0, r0
 8002236:	ba52      	rev16	r2, r2
 8002238:	fa0f fa82 	sxth.w	sl, r2
    hdev->rawAccel.y = (int16_t)((data[2] << 8) | data[3]);
 800223c:	8162      	strh	r2, [r4, #10]
    hdev->rawAccel.z = (int16_t)((data[4] << 8) | data[5]);
 800223e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8002242:	ba52      	rev16	r2, r2
 8002244:	81a2      	strh	r2, [r4, #12]
    hdev->temperature = (float)rawTemp / 340.0f + 36.53f; // MPU6050 formula from datasheet
 8002246:	fa0f f982 	sxth.w	r9, r2
 800224a:	f7fe fcf7 	bl	8000c3c <__aeabi_i2f>
 800224e:	4924      	ldr	r1, [pc, #144]	@ (80022e0 <MPU6050_ReadAllData+0xd8>)
 8002250:	f7fe fdfc 	bl	8000e4c <__aeabi_fdiv>
 8002254:	4923      	ldr	r1, [pc, #140]	@ (80022e4 <MPU6050_ReadAllData+0xdc>)
 8002256:	f7fe fc3d 	bl	8000ad4 <__addsf3>
 800225a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    hdev->scaledAccel.x = (float)hdev->rawAccel.x / hdev->accelScaleFactor;
 800225e:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8002260:	ba52      	rev16	r2, r2
 8002262:	fa0f f882 	sxth.w	r8, r2
    hdev->rawGyro.x = (int16_t)((data[8] << 8) | data[9]);
 8002266:	81e2      	strh	r2, [r4, #14]
 8002268:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    hdev->temperature = (float)rawTemp / 340.0f + 36.53f; // MPU6050 formula from datasheet
 800226c:	62e0      	str	r0, [r4, #44]	@ 0x2c
    hdev->rawGyro.y = (int16_t)((data[10] << 8) | data[11]);
 800226e:	ba52      	rev16	r2, r2
 8002270:	b217      	sxth	r7, r2
 8002272:	8222      	strh	r2, [r4, #16]
    hdev->rawGyro.z = (int16_t)((data[12] << 8) | data[13]);
 8002274:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    hdev->scaledAccel.x = (float)hdev->rawAccel.x / hdev->accelScaleFactor;
 8002278:	4658      	mov	r0, fp
 800227a:	ba52      	rev16	r2, r2
 800227c:	b213      	sxth	r3, r2
    hdev->rawGyro.z = (int16_t)((data[12] << 8) | data[13]);
 800227e:	8262      	strh	r2, [r4, #18]
    hdev->scaledAccel.x = (float)hdev->rawAccel.x / hdev->accelScaleFactor;
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	f7fe fcdb 	bl	8000c3c <__aeabi_i2f>
 8002286:	4629      	mov	r1, r5
 8002288:	f7fe fde0 	bl	8000e4c <__aeabi_fdiv>
 800228c:	6160      	str	r0, [r4, #20]
    hdev->scaledAccel.y = (float)hdev->rawAccel.y / hdev->accelScaleFactor;
 800228e:	4650      	mov	r0, sl
 8002290:	f7fe fcd4 	bl	8000c3c <__aeabi_i2f>
 8002294:	4629      	mov	r1, r5
 8002296:	f7fe fdd9 	bl	8000e4c <__aeabi_fdiv>
 800229a:	61a0      	str	r0, [r4, #24]
    hdev->scaledAccel.z = (float)hdev->rawAccel.z / hdev->accelScaleFactor;
 800229c:	4648      	mov	r0, r9
 800229e:	f7fe fccd 	bl	8000c3c <__aeabi_i2f>
 80022a2:	4629      	mov	r1, r5
 80022a4:	f7fe fdd2 	bl	8000e4c <__aeabi_fdiv>
    hdev->scaledGyro.x = (float)hdev->rawGyro.x / hdev->gyroScaleFactor;
 80022a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
    hdev->scaledAccel.z = (float)hdev->rawAccel.z / hdev->accelScaleFactor;
 80022aa:	61e0      	str	r0, [r4, #28]
    hdev->scaledGyro.x = (float)hdev->rawGyro.x / hdev->gyroScaleFactor;
 80022ac:	4640      	mov	r0, r8
 80022ae:	f7fe fcc5 	bl	8000c3c <__aeabi_i2f>
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fe fdca 	bl	8000e4c <__aeabi_fdiv>
 80022b8:	6220      	str	r0, [r4, #32]
    hdev->scaledGyro.y = (float)hdev->rawGyro.y / hdev->gyroScaleFactor;
 80022ba:	4638      	mov	r0, r7
 80022bc:	f7fe fcbe 	bl	8000c3c <__aeabi_i2f>
 80022c0:	4629      	mov	r1, r5
 80022c2:	f7fe fdc3 	bl	8000e4c <__aeabi_fdiv>
 80022c6:	6260      	str	r0, [r4, #36]	@ 0x24
    hdev->scaledGyro.z = (float)hdev->rawGyro.z / hdev->gyroScaleFactor;
 80022c8:	9801      	ldr	r0, [sp, #4]
 80022ca:	f7fe fcb7 	bl	8000c3c <__aeabi_i2f>
 80022ce:	4629      	mov	r1, r5
 80022d0:	f7fe fdbc 	bl	8000e4c <__aeabi_fdiv>
 80022d4:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 80022d6:	4630      	mov	r0, r6
 80022d8:	b007      	add	sp, #28
 80022da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022de:	bf00      	nop
 80022e0:	43aa0000 	.word	0x43aa0000
 80022e4:	42121eb8 	.word	0x42121eb8

080022e8 <MPU6050_ReadGyroscopeData>:
MPU6050_Status MPU6050_ReadGyroscopeData(MPU6050_Handle *hdev) {
 80022e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    status = MPU6050_ReadRegisters(hdev, MPU6050_REG_GYRO_XOUT_H, data, 6);
 80022ec:	2306      	movs	r3, #6
 80022ee:	466a      	mov	r2, sp
 80022f0:	2143      	movs	r1, #67	@ 0x43
MPU6050_Status MPU6050_ReadGyroscopeData(MPU6050_Handle *hdev) {
 80022f2:	4604      	mov	r4, r0
    status = MPU6050_ReadRegisters(hdev, MPU6050_REG_GYRO_XOUT_H, data, 6);
 80022f4:	f7ff fedc 	bl	80020b0 <MPU6050_ReadRegisters>
    if (status != MPU6050_OK) {
 80022f8:	4605      	mov	r5, r0
 80022fa:	bb20      	cbnz	r0, 8002346 <MPU6050_ReadGyroscopeData+0x5e>
    hdev->rawGyro.x = (int16_t)((data[0] << 8) | data[1]);
 80022fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002300:	f8bd 0000 	ldrh.w	r0, [sp]
 8002304:	ba5b      	rev16	r3, r3
 8002306:	b21f      	sxth	r7, r3
    hdev->rawGyro.y = (int16_t)((data[2] << 8) | data[3]);
 8002308:	8223      	strh	r3, [r4, #16]
 800230a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    hdev->scaledGyro.x = (float)hdev->rawGyro.x / hdev->gyroScaleFactor;
 800230e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8002310:	ba5b      	rev16	r3, r3
 8002312:	ba40      	rev16	r0, r0
    hdev->rawGyro.z = (int16_t)((data[4] << 8) | data[5]);
 8002314:	8263      	strh	r3, [r4, #18]
    hdev->rawGyro.x = (int16_t)((data[0] << 8) | data[1]);
 8002316:	81e0      	strh	r0, [r4, #14]
    hdev->scaledGyro.x = (float)hdev->rawGyro.x / hdev->gyroScaleFactor;
 8002318:	b200      	sxth	r0, r0
 800231a:	fa0f f883 	sxth.w	r8, r3
 800231e:	f7fe fc8d 	bl	8000c3c <__aeabi_i2f>
 8002322:	4631      	mov	r1, r6
 8002324:	f7fe fd92 	bl	8000e4c <__aeabi_fdiv>
 8002328:	6220      	str	r0, [r4, #32]
    hdev->scaledGyro.y = (float)hdev->rawGyro.y / hdev->gyroScaleFactor;
 800232a:	4638      	mov	r0, r7
 800232c:	f7fe fc86 	bl	8000c3c <__aeabi_i2f>
 8002330:	4631      	mov	r1, r6
 8002332:	f7fe fd8b 	bl	8000e4c <__aeabi_fdiv>
 8002336:	6260      	str	r0, [r4, #36]	@ 0x24
    hdev->scaledGyro.z = (float)hdev->rawGyro.z / hdev->gyroScaleFactor;
 8002338:	4640      	mov	r0, r8
 800233a:	f7fe fc7f 	bl	8000c3c <__aeabi_i2f>
 800233e:	4631      	mov	r1, r6
 8002340:	f7fe fd84 	bl	8000e4c <__aeabi_fdiv>
 8002344:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 8002346:	4628      	mov	r0, r5
 8002348:	b002      	add	sp, #8
 800234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800234e <MPU6050_Calibrate>:
MPU6050_Status MPU6050_Calibrate(MPU6050_Handle *hdev, uint16_t numSamples) {
 800234e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (uint16_t i = 0; i < numSamples; i++) {
 8002352:	2500      	movs	r5, #0
MPU6050_Status MPU6050_Calibrate(MPU6050_Handle *hdev, uint16_t numSamples) {
 8002354:	4604      	mov	r4, r0
 8002356:	4689      	mov	r9, r1
    int32_t gyroXSum = 0, gyroYSum = 0, gyroZSum = 0;
 8002358:	462e      	mov	r6, r5
 800235a:	462f      	mov	r7, r5
 800235c:	46a8      	mov	r8, r5
    for (uint16_t i = 0; i < numSamples; i++) {
 800235e:	454d      	cmp	r5, r9
 8002360:	d112      	bne.n	8002388 <MPU6050_Calibrate+0x3a>
    int16_t gyroXOffset = gyroXSum / numSamples;
 8002362:	fb98 f8f5 	sdiv	r8, r8, r5
    int16_t gyroYOffset = gyroYSum / numSamples;
 8002366:	fb97 f7f5 	sdiv	r7, r7, r5
    int16_t gyroZOffset = gyroZSum / numSamples;
 800236a:	fb96 f6f5 	sdiv	r6, r6, r5
    return MPU6050_OK;
 800236e:	2000      	movs	r0, #0
    hdev->rawGyro.x -= gyroXOffset;
 8002370:	89e3      	ldrh	r3, [r4, #14]
 8002372:	eba3 0308 	sub.w	r3, r3, r8
 8002376:	81e3      	strh	r3, [r4, #14]
    hdev->rawGyro.y -= gyroYOffset;
 8002378:	8a23      	ldrh	r3, [r4, #16]
 800237a:	1bdb      	subs	r3, r3, r7
 800237c:	8223      	strh	r3, [r4, #16]
    hdev->rawGyro.z -= gyroZOffset;
 800237e:	8a63      	ldrh	r3, [r4, #18]
 8002380:	1b9b      	subs	r3, r3, r6
 8002382:	8263      	strh	r3, [r4, #18]
}
 8002384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        status = MPU6050_ReadGyroscopeData(hdev);
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff ffad 	bl	80022e8 <MPU6050_ReadGyroscopeData>
        if (status != MPU6050_OK) {
 800238e:	3501      	adds	r5, #1
 8002390:	2800      	cmp	r0, #0
 8002392:	d1f7      	bne.n	8002384 <MPU6050_Calibrate+0x36>
        gyroXSum += hdev->rawGyro.x;
 8002394:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
        HAL_Delay(hdev->calibDelay);
 8002398:	8f20      	ldrh	r0, [r4, #56]	@ 0x38
        gyroXSum += hdev->rawGyro.x;
 800239a:	4498      	add	r8, r3
        gyroYSum += hdev->rawGyro.y;
 800239c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80023a0:	441f      	add	r7, r3
        gyroZSum += hdev->rawGyro.z;
 80023a2:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80023a6:	441e      	add	r6, r3
        HAL_Delay(hdev->calibDelay);
 80023a8:	f000 fae4 	bl	8002974 <HAL_Delay>
    for (uint16_t i = 0; i < numSamples; i++) {
 80023ac:	e7d7      	b.n	800235e <MPU6050_Calibrate+0x10>
	...

080023b0 <MPU6050_Print>:
void MPU6050_Print(MPU6050_Handle *hdev, UART_HandleTypeDef *huart) {
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	b0c5      	sub	sp, #276	@ 0x114
 80023b4:	4604      	mov	r4, r0
 80023b6:	460d      	mov	r5, r1
    sprintf(buffer, "\r\n--------- MPU6050 DATA ---------\r\n");
 80023b8:	a804      	add	r0, sp, #16
 80023ba:	4934      	ldr	r1, [pc, #208]	@ (800248c <MPU6050_Print+0xdc>)
 80023bc:	f005 f8d5 	bl	800756a <strcpy>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 80023c0:	a804      	add	r0, sp, #16
 80023c2:	f7fd fec5 	bl	8000150 <strlen>
 80023c6:	2364      	movs	r3, #100	@ 0x64
 80023c8:	b282      	uxth	r2, r0
 80023ca:	a904      	add	r1, sp, #16
 80023cc:	4628      	mov	r0, r5
 80023ce:	f003 f984 	bl	80056da <HAL_UART_Transmit>
    sprintf(buffer, "Accel (g): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 80023d2:	6960      	ldr	r0, [r4, #20]
 80023d4:	f7fe f828 	bl	8000428 <__aeabi_f2d>
 80023d8:	4606      	mov	r6, r0
 80023da:	69e0      	ldr	r0, [r4, #28]
 80023dc:	460f      	mov	r7, r1
 80023de:	f7fe f823 	bl	8000428 <__aeabi_f2d>
 80023e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80023e6:	69a0      	ldr	r0, [r4, #24]
 80023e8:	f7fe f81e 	bl	8000428 <__aeabi_f2d>
 80023ec:	4632      	mov	r2, r6
 80023ee:	463b      	mov	r3, r7
 80023f0:	e9cd 0100 	strd	r0, r1, [sp]
 80023f4:	4926      	ldr	r1, [pc, #152]	@ (8002490 <MPU6050_Print+0xe0>)
 80023f6:	a804      	add	r0, sp, #16
 80023f8:	f004 ff84 	bl	8007304 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 80023fc:	a804      	add	r0, sp, #16
 80023fe:	f7fd fea7 	bl	8000150 <strlen>
 8002402:	2364      	movs	r3, #100	@ 0x64
 8002404:	b282      	uxth	r2, r0
 8002406:	a904      	add	r1, sp, #16
 8002408:	4628      	mov	r0, r5
 800240a:	f003 f966 	bl	80056da <HAL_UART_Transmit>
    sprintf(buffer, "Gyro (deg/s): X=%.3f, Y=%.3f, Z=%.3f\r\n",
 800240e:	6a20      	ldr	r0, [r4, #32]
 8002410:	f7fe f80a 	bl	8000428 <__aeabi_f2d>
 8002414:	4606      	mov	r6, r0
 8002416:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002418:	460f      	mov	r7, r1
 800241a:	f7fe f805 	bl	8000428 <__aeabi_f2d>
 800241e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002422:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002424:	f7fe f800 	bl	8000428 <__aeabi_f2d>
 8002428:	4632      	mov	r2, r6
 800242a:	463b      	mov	r3, r7
 800242c:	e9cd 0100 	strd	r0, r1, [sp]
 8002430:	4918      	ldr	r1, [pc, #96]	@ (8002494 <MPU6050_Print+0xe4>)
 8002432:	a804      	add	r0, sp, #16
 8002434:	f004 ff66 	bl	8007304 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 8002438:	a804      	add	r0, sp, #16
 800243a:	f7fd fe89 	bl	8000150 <strlen>
 800243e:	2364      	movs	r3, #100	@ 0x64
 8002440:	b282      	uxth	r2, r0
 8002442:	a904      	add	r1, sp, #16
 8002444:	4628      	mov	r0, r5
 8002446:	f003 f948 	bl	80056da <HAL_UART_Transmit>
    sprintf(buffer, "Temperature: %.2f C\r\n", hdev->temperature);
 800244a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800244c:	f7fd ffec 	bl	8000428 <__aeabi_f2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	a804      	add	r0, sp, #16
 8002456:	4910      	ldr	r1, [pc, #64]	@ (8002498 <MPU6050_Print+0xe8>)
 8002458:	f004 ff54 	bl	8007304 <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 800245c:	a804      	add	r0, sp, #16
 800245e:	f7fd fe77 	bl	8000150 <strlen>
 8002462:	2364      	movs	r3, #100	@ 0x64
 8002464:	b282      	uxth	r2, r0
 8002466:	a904      	add	r1, sp, #16
 8002468:	4628      	mov	r0, r5
 800246a:	f003 f936 	bl	80056da <HAL_UART_Transmit>
    sprintf(buffer, "--------------------------------\r\n");
 800246e:	490b      	ldr	r1, [pc, #44]	@ (800249c <MPU6050_Print+0xec>)
 8002470:	a804      	add	r0, sp, #16
 8002472:	f005 f87a 	bl	800756a <strcpy>
    HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), 100);
 8002476:	a804      	add	r0, sp, #16
 8002478:	f7fd fe6a 	bl	8000150 <strlen>
 800247c:	2364      	movs	r3, #100	@ 0x64
 800247e:	b282      	uxth	r2, r0
 8002480:	a904      	add	r1, sp, #16
 8002482:	4628      	mov	r0, r5
 8002484:	f003 f929 	bl	80056da <HAL_UART_Transmit>
}
 8002488:	b045      	add	sp, #276	@ 0x114
 800248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248c:	0800a148 	.word	0x0800a148
 8002490:	0800a16d 	.word	0x0800a16d
 8002494:	0800a191 	.word	0x0800a191
 8002498:	0800a1b8 	.word	0x0800a1b8
 800249c:	0800a125 	.word	0x0800a125

080024a0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <HAL_MspInit+0x3c>)
{
 80024a2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	619a      	str	r2, [r3, #24]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	f002 0201 	and.w	r2, r2, #1
 80024b2:	9200      	str	r2, [sp, #0]
 80024b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80024bc:	61da      	str	r2, [r3, #28]
 80024be:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024c0:	4a07      	ldr	r2, [pc, #28]	@ (80024e0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024ca:	6853      	ldr	r3, [r2, #4]
 80024cc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	b002      	add	sp, #8
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000

080024e4 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	2210      	movs	r2, #16
{
 80024e6:	b510      	push	{r4, lr}
 80024e8:	4604      	mov	r4, r0
 80024ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	eb0d 0002 	add.w	r0, sp, r2
 80024f0:	2100      	movs	r1, #0
 80024f2:	f004 ff6a 	bl	80073ca <memset>
  if(hadc->Instance==ADC1)
 80024f6:	6822      	ldr	r2, [r4, #0]
 80024f8:	4b18      	ldr	r3, [pc, #96]	@ (800255c <HAL_ADC_MspInit+0x78>)
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d12b      	bne.n	8002556 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024fe:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8002502:	699a      	ldr	r2, [r3, #24]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = LDR_F_Pin|LDR_R_Pin|LDR_B_Pin|LDR_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002504:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800250a:	619a      	str	r2, [r3, #24]
 800250c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250e:	4814      	ldr	r0, [pc, #80]	@ (8002560 <HAL_ADC_MspInit+0x7c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002510:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002514:	9201      	str	r2, [sp, #4]
 8002516:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	f042 0204 	orr.w	r2, r2, #4
 8002520:	619a      	str	r2, [r3, #24]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	f002 0204 	and.w	r2, r2, #4
 8002528:	9202      	str	r2, [sp, #8]
 800252a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	f042 0208 	orr.w	r2, r2, #8
 8002532:	619a      	str	r2, [r3, #24]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	9303      	str	r3, [sp, #12]
 800253c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800253e:	23f0      	movs	r3, #240	@ 0xf0
 8002540:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f000 fd6c 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LM35_Pin;
 8002548:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 800254a:	4806      	ldr	r0, [pc, #24]	@ (8002564 <HAL_ADC_MspInit+0x80>)
 800254c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800254e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8002552:	f000 fd65 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002556:	b008      	add	sp, #32
 8002558:	bd10      	pop	{r4, pc}
 800255a:	bf00      	nop
 800255c:	40012400 	.word	0x40012400
 8002560:	40010800 	.word	0x40010800
 8002564:	40010c00 	.word	0x40010c00

08002568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002568:	b510      	push	{r4, lr}
 800256a:	4604      	mov	r4, r0
 800256c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256e:	2210      	movs	r2, #16
 8002570:	2100      	movs	r1, #0
 8002572:	a802      	add	r0, sp, #8
 8002574:	f004 ff29 	bl	80073ca <memset>
  if(hi2c->Instance==I2C1)
 8002578:	6822      	ldr	r2, [r4, #0]
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <HAL_I2C_MspInit+0x88>)
 800257c:	429a      	cmp	r2, r3
 800257e:	d134      	bne.n	80025ea <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4c1c      	ldr	r4, [pc, #112]	@ (80025f4 <HAL_I2C_MspInit+0x8c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002582:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002588:	481b      	ldr	r0, [pc, #108]	@ (80025f8 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258a:	f043 0308 	orr.w	r3, r3, #8
 800258e:	61a3      	str	r3, [r4, #24]
 8002590:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259c:	2312      	movs	r3, #18
 800259e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f000 fd3b 	bl	8003020 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80025aa:	4a14      	ldr	r2, [pc, #80]	@ (80025fc <HAL_I2C_MspInit+0x94>)

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025ac:	201f      	movs	r0, #31
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80025ae:	6853      	ldr	r3, [r2, #4]
 80025b0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025bc:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025be:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025c4:	61e3      	str	r3, [r4, #28]
 80025c6:	69e3      	ldr	r3, [r4, #28]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025d0:	f000 fc7c 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80025d4:	201f      	movs	r0, #31
 80025d6:	f000 fca9 	bl	8002f2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2020      	movs	r0, #32
 80025de:	4611      	mov	r1, r2
 80025e0:	f000 fc74 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80025e4:	2020      	movs	r0, #32
 80025e6:	f000 fca1 	bl	8002f2c <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80025ea:	b006      	add	sp, #24
 80025ec:	bd10      	pop	{r4, pc}
 80025ee:	bf00      	nop
 80025f0:	40005400 	.word	0x40005400
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010c00 	.word	0x40010c00
 80025fc:	40010000 	.word	0x40010000

08002600 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8002600:	6802      	ldr	r2, [r0, #0]
 8002602:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <HAL_TIM_PWM_MspInit+0x24>)
{
 8002604:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM4)
 8002606:	429a      	cmp	r2, r3
 8002608:	d10a      	bne.n	8002620 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800260a:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	f042 0204 	orr.w	r2, r2, #4
 8002614:	61da      	str	r2, [r3, #28]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002620:	b002      	add	sp, #8
 8002622:	4770      	bx	lr
 8002624:	40000800 	.word	0x40000800

08002628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002628:	b510      	push	{r4, lr}
 800262a:	4604      	mov	r4, r0
 800262c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262e:	2210      	movs	r2, #16
 8002630:	2100      	movs	r1, #0
 8002632:	a802      	add	r0, sp, #8
 8002634:	f004 fec9 	bl	80073ca <memset>
  if(htim->Instance==TIM4)
 8002638:	6822      	ldr	r2, [r4, #0]
 800263a:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_TIM_MspPostInit+0x44>)
 800263c:	429a      	cmp	r2, r3
 800263e:	d113      	bne.n	8002668 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002640:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002644:	699a      	ldr	r2, [r3, #24]
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002646:	480a      	ldr	r0, [pc, #40]	@ (8002670 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002648:	f042 0208 	orr.w	r2, r2, #8
 800264c:	619a      	str	r2, [r3, #24]
 800264e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002664:	f000 fcdc 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002668:	b006      	add	sp, #24
 800266a:	bd10      	pop	{r4, pc}
 800266c:	40000800 	.word	0x40000800
 8002670:	40010c00 	.word	0x40010c00

08002674 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	2210      	movs	r2, #16
{
 8002676:	b510      	push	{r4, lr}
 8002678:	4604      	mov	r4, r0
 800267a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	eb0d 0002 	add.w	r0, sp, r2
 8002680:	2100      	movs	r1, #0
 8002682:	f004 fea2 	bl	80073ca <memset>
  if(huart->Instance==USART1)
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	4a2f      	ldr	r2, [pc, #188]	@ (8002748 <HAL_UART_MspInit+0xd4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d129      	bne.n	80026e2 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800268e:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <HAL_UART_MspInit+0xd8>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	f44f 7100 	mov.w	r1, #512	@ 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8002694:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	482e      	ldr	r0, [pc, #184]	@ (8002750 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002698:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800269c:	619a      	str	r2, [r3, #24]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80026a4:	9200      	str	r2, [sp, #0]
 80026a6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	f042 0204 	orr.w	r2, r2, #4
 80026ae:	619a      	str	r2, [r3, #24]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f000 fcab 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ca:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80026ce:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d2:	e9cd 0304 	strd	r0, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	481e      	ldr	r0, [pc, #120]	@ (8002750 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f000 fca1 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026de:	b008      	add	sp, #32
 80026e0:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 80026e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002754 <HAL_UART_MspInit+0xe0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d1fa      	bne.n	80026de <HAL_UART_MspInit+0x6a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026e8:	4b18      	ldr	r3, [pc, #96]	@ (800274c <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ec:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	4818      	ldr	r0, [pc, #96]	@ (8002750 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80026f0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80026f4:	61da      	str	r2, [r3, #28]
 80026f6:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f8:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80026fa:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80026fe:	9202      	str	r2, [sp, #8]
 8002700:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	f042 0204 	orr.w	r2, r2, #4
 8002708:	619a      	str	r2, [r3, #24]
 800270a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	9303      	str	r3, [sp, #12]
 8002714:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271c:	2303      	movs	r3, #3
 800271e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f000 fc7e 	bl	8003020 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002724:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	a904      	add	r1, sp, #16
 8002728:	4809      	ldr	r0, [pc, #36]	@ (8002750 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272a:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f000 fc76 	bl	8003020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002734:	4622      	mov	r2, r4
 8002736:	4621      	mov	r1, r4
 8002738:	2026      	movs	r0, #38	@ 0x26
 800273a:	f000 fbc7 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800273e:	2026      	movs	r0, #38	@ 0x26
 8002740:	f000 fbf4 	bl	8002f2c <HAL_NVIC_EnableIRQ>
}
 8002744:	e7cb      	b.n	80026de <HAL_UART_MspInit+0x6a>
 8002746:	bf00      	nop
 8002748:	40013800 	.word	0x40013800
 800274c:	40021000 	.word	0x40021000
 8002750:	40010800 	.word	0x40010800
 8002754:	40004400 	.word	0x40004400

08002758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b570      	push	{r4, r5, r6, lr}
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800275a:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_InitTick+0x7c>)
{
 800275c:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 800275e:	699a      	ldr	r2, [r3, #24]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002760:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002766:	619a      	str	r2, [r3, #24]
 8002768:	699b      	ldr	r3, [r3, #24]
{
 800276a:	4606      	mov	r6, r0
  __HAL_RCC_TIM1_CLK_ENABLE();
 800276c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002770:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002772:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002774:	4d18      	ldr	r5, [pc, #96]	@ (80027d8 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002776:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002778:	f002 faf2 	bl	8004d60 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800277c:	f002 fae0 	bl	8004d40 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002780:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <HAL_InitTick+0x84>)
 8002782:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002784:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002788:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_InitTick+0x88>)
 800278c:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002790:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002792:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002794:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8002796:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8002798:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279c:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 800279e:	f002 fd51 	bl	8005244 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80027a2:	4604      	mov	r4, r0
 80027a4:	b980      	cbnz	r0, 80027c8 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80027a6:	4628      	mov	r0, r5
 80027a8:	f002 fc46 	bl	8005038 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80027ac:	4604      	mov	r4, r0
 80027ae:	b958      	cbnz	r0, 80027c8 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80027b0:	2019      	movs	r0, #25
 80027b2:	f000 fbbb 	bl	8002f2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b6:	2e0f      	cmp	r6, #15
 80027b8:	d809      	bhi.n	80027ce <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80027ba:	4622      	mov	r2, r4
 80027bc:	4631      	mov	r1, r6
 80027be:	2019      	movs	r0, #25
 80027c0:	f000 fb84 	bl	8002ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027c4:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <HAL_InitTick+0x8c>)
 80027c6:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80027c8:	4620      	mov	r0, r4
 80027ca:	b008      	add	sp, #32
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 80027ce:	2401      	movs	r4, #1
 80027d0:	e7fa      	b.n	80027c8 <HAL_InitTick+0x70>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	20000724 	.word	0x20000724
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	000f4240 	.word	0x000f4240
 80027e4:	20000008 	.word	0x20000008

080027e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027e8:	e7fe      	b.n	80027e8 <NMI_Handler>

080027ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler>

080027ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <MemManage_Handler>

080027ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <BusFault_Handler>

080027f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <UsageFault_Handler>

080027f2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f2:	4770      	bx	lr

080027f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80027f4:	4770      	bx	lr

080027f6 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80027f6:	4770      	bx	lr

080027f8 <SysTick_Handler>:
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
 80027f8:	4770      	bx	lr
	...

080027fc <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027fc:	4801      	ldr	r0, [pc, #4]	@ (8002804 <TIM1_UP_IRQHandler+0x8>)
 80027fe:	f002 bc49 	b.w	8005094 <HAL_TIM_IRQHandler>
 8002802:	bf00      	nop
 8002804:	20000724 	.word	0x20000724

08002808 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002808:	4801      	ldr	r0, [pc, #4]	@ (8002810 <I2C1_EV_IRQHandler+0x8>)
 800280a:	f001 bb17 	b.w	8003e3c <HAL_I2C_EV_IRQHandler>
 800280e:	bf00      	nop
 8002810:	200006a0 	.word	0x200006a0

08002814 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002814:	4801      	ldr	r0, [pc, #4]	@ (800281c <I2C1_ER_IRQHandler+0x8>)
 8002816:	f001 bf7f 	b.w	8004718 <HAL_I2C_ER_IRQHandler>
 800281a:	bf00      	nop
 800281c:	200006a0 	.word	0x200006a0

08002820 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002820:	4801      	ldr	r0, [pc, #4]	@ (8002828 <USART2_IRQHandler+0x8>)
 8002822:	f003 b811 	b.w	8005848 <HAL_UART_IRQHandler>
 8002826:	bf00      	nop
 8002828:	20000574 	.word	0x20000574

0800282c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800282c:	2001      	movs	r0, #1
 800282e:	4770      	bx	lr

08002830 <_kill>:

int _kill(int pid, int sig)
{
 8002830:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002832:	f004 fe6d 	bl	8007510 <__errno>
 8002836:	2316      	movs	r3, #22
 8002838:	6003      	str	r3, [r0, #0]
  return -1;
}
 800283a:	f04f 30ff 	mov.w	r0, #4294967295
 800283e:	bd08      	pop	{r3, pc}

08002840 <_exit>:

void _exit (int status)
{
 8002840:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002842:	f004 fe65 	bl	8007510 <__errno>
 8002846:	2316      	movs	r3, #22
 8002848:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800284a:	e7fe      	b.n	800284a <_exit+0xa>

0800284c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	460d      	mov	r5, r1
 8002850:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002852:	460e      	mov	r6, r1
 8002854:	1b73      	subs	r3, r6, r5
 8002856:	429c      	cmp	r4, r3
 8002858:	dc01      	bgt.n	800285e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800285a:	4620      	mov	r0, r4
 800285c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800285e:	f3af 8000 	nop.w
 8002862:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	e7f5      	b.n	8002854 <_read+0x8>

08002868 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	460d      	mov	r5, r1
 800286c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286e:	460e      	mov	r6, r1
 8002870:	1b73      	subs	r3, r6, r5
 8002872:	429c      	cmp	r4, r3
 8002874:	dc01      	bgt.n	800287a <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002876:	4620      	mov	r0, r4
 8002878:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800287a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800287e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002882:	e7f5      	b.n	8002870 <_write+0x8>

08002884 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	4770      	bx	lr

0800288a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800288a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 800288e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002890:	604b      	str	r3, [r1, #4]
}
 8002892:	4770      	bx	lr

08002894 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002894:	2001      	movs	r0, #1
 8002896:	4770      	bx	lr

08002898 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002898:	2000      	movs	r0, #0
 800289a:	4770      	bx	lr

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800289e:	4a0b      	ldr	r2, [pc, #44]	@ (80028cc <_sbrk+0x30>)
{
 80028a0:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80028a2:	6811      	ldr	r1, [r2, #0]
 80028a4:	b909      	cbnz	r1, 80028aa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80028a6:	490a      	ldr	r1, [pc, #40]	@ (80028d0 <_sbrk+0x34>)
 80028a8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028aa:	6810      	ldr	r0, [r2, #0]
 80028ac:	4909      	ldr	r1, [pc, #36]	@ (80028d4 <_sbrk+0x38>)
 80028ae:	4c0a      	ldr	r4, [pc, #40]	@ (80028d8 <_sbrk+0x3c>)
 80028b0:	4403      	add	r3, r0
 80028b2:	1b09      	subs	r1, r1, r4
 80028b4:	428b      	cmp	r3, r1
 80028b6:	d906      	bls.n	80028c6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80028b8:	f004 fe2a 	bl	8007510 <__errno>
 80028bc:	230c      	movs	r3, #12
 80028be:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80028c4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80028c6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80028c8:	e7fc      	b.n	80028c4 <_sbrk+0x28>
 80028ca:	bf00      	nop
 80028cc:	2000076c 	.word	0x2000076c
 80028d0:	200008c0 	.word	0x200008c0
 80028d4:	20005000 	.word	0x20005000
 80028d8:	00000400 	.word	0x00000400

080028dc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028dc:	4770      	bx	lr
	...

080028e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028e0:	f7ff fffc 	bl	80028dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e4:	480b      	ldr	r0, [pc, #44]	@ (8002914 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028e6:	490c      	ldr	r1, [pc, #48]	@ (8002918 <LoopFillZerobss+0x12>)
	  ldr r2, =_sidata
 80028e8:	4a0c      	ldr	r2, [pc, #48]	@ (800291c <LoopFillZerobss+0x16>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a09      	ldr	r2, [pc, #36]	@ (8002920 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028fc:	4c09      	ldr	r4, [pc, #36]	@ (8002924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800290a:	f004 fe07 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290e:	f7ff fa09 	bl	8001d24 <main>
  bx lr
 8002912:	4770      	bx	lr
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	200001d4 	.word	0x200001d4
	  ldr r2, =_sidata
 800291c:	0800a640 	.word	0x0800a640
  ldr r2, =_sbss
 8002920:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002924:	200008c0 	.word	0x200008c0

08002928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_2_IRQHandler>
	...

0800292c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800292e:	4a07      	ldr	r2, [pc, #28]	@ (800294c <HAL_Init+0x20>)
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002930:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002932:	6813      	ldr	r3, [r2, #0]
 8002934:	f043 0310 	orr.w	r3, r3, #16
 8002938:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293a:	f000 fab5 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800293e:	200f      	movs	r0, #15
 8002940:	f7ff ff0a 	bl	8002758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002944:	f7ff fdac 	bl	80024a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002948:	2000      	movs	r0, #0
 800294a:	bd08      	pop	{r3, pc}
 800294c:	40022000 	.word	0x40022000

08002950 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002950:	4a03      	ldr	r2, [pc, #12]	@ (8002960 <HAL_IncTick+0x10>)
 8002952:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <HAL_IncTick+0x14>)
 8002954:	6811      	ldr	r1, [r2, #0]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	440b      	add	r3, r1
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000770 	.word	0x20000770
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002968:	4b01      	ldr	r3, [pc, #4]	@ (8002970 <HAL_GetTick+0x8>)
 800296a:	6818      	ldr	r0, [r3, #0]
}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20000770 	.word	0x20000770

08002974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff fff6 	bl	8002968 <HAL_GetTick>
 800297c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800297e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002980:	bf1e      	ittt	ne
 8002982:	4b04      	ldrne	r3, [pc, #16]	@ (8002994 <HAL_Delay+0x20>)
 8002984:	781b      	ldrbne	r3, [r3, #0]
 8002986:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002988:	f7ff ffee 	bl	8002968 <HAL_GetTick>
 800298c:	1b43      	subs	r3, r0, r5
 800298e:	42a3      	cmp	r3, r4
 8002990:	d3fa      	bcc.n	8002988 <HAL_Delay+0x14>
  {
  }
}
 8002992:	bd38      	pop	{r3, r4, r5, pc}
 8002994:	20000004 	.word	0x20000004

08002998 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800299a:	2600      	movs	r6, #0
{
 800299c:	4604      	mov	r4, r0
 800299e:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80029a0:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80029a2:	f7ff ffe1 	bl	8002968 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80029a6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80029a8:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	05d1      	lsls	r1, r2, #23
 80029ae:	d508      	bpl.n	80029c2 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80029b0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    __HAL_UNLOCK(hadc);
 80029b4:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b8:	f043 0320 	orr.w	r3, r3, #32
 80029bc:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80029be:	b003      	add	sp, #12
 80029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	05d2      	lsls	r2, r2, #23
 80029c6:	d403      	bmi.n	80029d0 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029ca:	f413 0f70 	tst.w	r3, #15728640	@ 0xf00000
 80029ce:	d03d      	beq.n	8002a4c <HAL_ADC_PollForConversion+0xb4>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029d0:	4b3e      	ldr	r3, [pc, #248]	@ (8002acc <HAL_ADC_PollForConversion+0x134>)
 80029d2:	2002      	movs	r0, #2
 80029d4:	681e      	ldr	r6, [r3, #0]
 80029d6:	f002 fa5b 	bl	8004e90 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	4a3c      	ldr	r2, [pc, #240]	@ (8002ad0 <HAL_ADC_PollForConversion+0x138>)
 80029de:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029e0:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029e4:	4211      	tst	r1, r2
 80029e6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad4 <HAL_ADC_PollForConversion+0x13c>)
 80029e8:	d152      	bne.n	8002a90 <HAL_ADC_PollForConversion+0xf8>
 80029ea:	68d8      	ldr	r0, [r3, #12]
 80029ec:	493a      	ldr	r1, [pc, #232]	@ (8002ad8 <HAL_ADC_PollForConversion+0x140>)
 80029ee:	4208      	tst	r0, r1
 80029f0:	d14e      	bne.n	8002a90 <HAL_ADC_PollForConversion+0xf8>
 80029f2:	6919      	ldr	r1, [r3, #16]
 80029f4:	4211      	tst	r1, r2
 80029f6:	d15c      	bne.n	8002ab2 <HAL_ADC_PollForConversion+0x11a>
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	4b38      	ldr	r3, [pc, #224]	@ (8002adc <HAL_ADC_PollForConversion+0x144>)
 80029fc:	421a      	tst	r2, r3
 80029fe:	bf14      	ite	ne
 8002a00:	2329      	movne	r3, #41	@ 0x29
 8002a02:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002a04:	435e      	muls	r6, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a06:	9b01      	ldr	r3, [sp, #4]
 8002a08:	42b3      	cmp	r3, r6
 8002a0a:	d223      	bcs.n	8002a54 <HAL_ADC_PollForConversion+0xbc>
      if(Timeout != HAL_MAX_DELAY)
 8002a0c:	1c6a      	adds	r2, r5, #1
 8002a0e:	d004      	beq.n	8002a1a <HAL_ADC_PollForConversion+0x82>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a10:	2d00      	cmp	r5, #0
 8002a12:	d154      	bne.n	8002abe <HAL_ADC_PollForConversion+0x126>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a14:	9b01      	ldr	r3, [sp, #4]
 8002a16:	42b3      	cmp	r3, r6
 8002a18:	d30a      	bcc.n	8002a30 <HAL_ADC_PollForConversion+0x98>
      Conversion_Timeout_CPU_cycles ++;
 8002a1a:	9b01      	ldr	r3, [sp, #4]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	e7f1      	b.n	8002a06 <HAL_ADC_PollForConversion+0x6e>
      if(Timeout != HAL_MAX_DELAY)
 8002a22:	1c6e      	adds	r6, r5, #1
 8002a24:	d013      	beq.n	8002a4e <HAL_ADC_PollForConversion+0xb6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a26:	b965      	cbnz	r5, 8002a42 <HAL_ADC_PollForConversion+0xaa>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0798      	lsls	r0, r3, #30
 8002a2e:	d40d      	bmi.n	8002a4c <HAL_ADC_PollForConversion+0xb4>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a30:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            return HAL_TIMEOUT;
 8002a32:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	62a3      	str	r3, [r4, #40]	@ 0x28
            __HAL_UNLOCK(hadc);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8002a40:	e7bd      	b.n	80029be <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a42:	f7ff ff91 	bl	8002968 <HAL_GetTick>
 8002a46:	1bc0      	subs	r0, r0, r7
 8002a48:	42a8      	cmp	r0, r5
 8002a4a:	d8ed      	bhi.n	8002a28 <HAL_ADC_PollForConversion+0x90>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a4c:	6822      	ldr	r2, [r4, #0]
 8002a4e:	6813      	ldr	r3, [r2, #0]
 8002a50:	0799      	lsls	r1, r3, #30
 8002a52:	d5e6      	bpl.n	8002a22 <HAL_ADC_PollForConversion+0x8a>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a54:	f06f 0212 	mvn.w	r2, #18
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a62:	62a3      	str	r3, [r4, #40]	@ 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002a6c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002a70:	d10c      	bne.n	8002a8c <HAL_ADC_PollForConversion+0xf4>
 8002a72:	7b23      	ldrb	r3, [r4, #12]
 8002a74:	b953      	cbnz	r3, 8002a8c <HAL_ADC_PollForConversion+0xf4>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a7c:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a7e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a80:	04db      	lsls	r3, r3, #19
 8002a82:	d403      	bmi.n	8002a8c <HAL_ADC_PollForConversion+0xf4>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a84:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	62a3      	str	r3, [r4, #40]	@ 0x28
  return HAL_OK;
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	e796      	b.n	80029be <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a90:	6919      	ldr	r1, [r3, #16]
 8002a92:	4211      	tst	r1, r2
 8002a94:	d103      	bne.n	8002a9e <HAL_ADC_PollForConversion+0x106>
 8002a96:	68d9      	ldr	r1, [r3, #12]
 8002a98:	4a10      	ldr	r2, [pc, #64]	@ (8002adc <HAL_ADC_PollForConversion+0x144>)
 8002a9a:	4211      	tst	r1, r2
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0x11e>
 8002a9e:	6919      	ldr	r1, [r3, #16]
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae0 <HAL_ADC_PollForConversion+0x148>)
 8002aa2:	4211      	tst	r1, r2
 8002aa4:	d109      	bne.n	8002aba <HAL_ADC_PollForConversion+0x122>
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4213      	tst	r3, r2
 8002aaa:	bf14      	ite	ne
 8002aac:	23fc      	movne	r3, #252	@ 0xfc
 8002aae:	2354      	moveq	r3, #84	@ 0x54
 8002ab0:	e7a8      	b.n	8002a04 <HAL_ADC_PollForConversion+0x6c>
 8002ab2:	2329      	movs	r3, #41	@ 0x29
 8002ab4:	e7a6      	b.n	8002a04 <HAL_ADC_PollForConversion+0x6c>
 8002ab6:	2354      	movs	r3, #84	@ 0x54
 8002ab8:	e7a4      	b.n	8002a04 <HAL_ADC_PollForConversion+0x6c>
 8002aba:	23fc      	movs	r3, #252	@ 0xfc
 8002abc:	e7a2      	b.n	8002a04 <HAL_ADC_PollForConversion+0x6c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002abe:	f7ff ff53 	bl	8002968 <HAL_GetTick>
 8002ac2:	1bc0      	subs	r0, r0, r7
 8002ac4:	42a8      	cmp	r0, r5
 8002ac6:	d8a5      	bhi.n	8002a14 <HAL_ADC_PollForConversion+0x7c>
 8002ac8:	e7a7      	b.n	8002a1a <HAL_ADC_PollForConversion+0x82>
 8002aca:	bf00      	nop
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	24924924 	.word	0x24924924
 8002ad4:	12492492 	.word	0x12492492
 8002ad8:	00924924 	.word	0x00924924
 8002adc:	00492492 	.word	0x00492492
 8002ae0:	00249249 	.word	0x00249249

08002ae4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ae4:	6803      	ldr	r3, [r0, #0]
 8002ae6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002aec:	2300      	movs	r3, #0
{ 
 8002aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002af0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 8002af6:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d071      	beq.n	8002be0 <HAL_ADC_ConfigChannel+0xf4>
 8002afc:	2301      	movs	r3, #1
 8002afe:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b02:	684c      	ldr	r4, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b04:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7U)
 8002b06:	2c06      	cmp	r4, #6
 8002b08:	680d      	ldr	r5, [r1, #0]
 8002b0a:	ea4f 0384 	mov.w	r3, r4, lsl #2
 8002b0e:	d825      	bhi.n	8002b5c <HAL_ADC_ConfigChannel+0x70>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b10:	4423      	add	r3, r4
 8002b12:	241f      	movs	r4, #31
 8002b14:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8002b16:	3b05      	subs	r3, #5
 8002b18:	409c      	lsls	r4, r3
 8002b1a:	ea26 0404 	bic.w	r4, r6, r4
 8002b1e:	fa05 f303 	lsl.w	r3, r5, r3
 8002b22:	4323      	orrs	r3, r4
 8002b24:	6343      	str	r3, [r0, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b26:	680c      	ldr	r4, [r1, #0]
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b28:	6816      	ldr	r6, [r2, #0]
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b2a:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b2c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8002b30:	688b      	ldr	r3, [r1, #8]
 8002b32:	f04f 0407 	mov.w	r4, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b36:	d929      	bls.n	8002b8c <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b38:	68f5      	ldr	r5, [r6, #12]
 8002b3a:	381e      	subs	r0, #30
 8002b3c:	4084      	lsls	r4, r0
 8002b3e:	ea25 0404 	bic.w	r4, r5, r4
 8002b42:	4083      	lsls	r3, r0
 8002b44:	4323      	orrs	r3, r4
 8002b46:	60f3      	str	r3, [r6, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b48:	680b      	ldr	r3, [r1, #0]
 8002b4a:	3b10      	subs	r3, #16
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d925      	bls.n	8002b9c <HAL_ADC_ConfigChannel+0xb0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b50:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b52:	2300      	movs	r3, #0
 8002b54:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002b5c:	2c0c      	cmp	r4, #12
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b5e:	4423      	add	r3, r4
 8002b60:	f04f 041f 	mov.w	r4, #31
  else if (sConfig->Rank < 13U)
 8002b64:	d809      	bhi.n	8002b7a <HAL_ADC_ConfigChannel+0x8e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b66:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8002b68:	3b23      	subs	r3, #35	@ 0x23
 8002b6a:	409c      	lsls	r4, r3
 8002b6c:	ea26 0404 	bic.w	r4, r6, r4
 8002b70:	fa05 f303 	lsl.w	r3, r5, r3
 8002b74:	4323      	orrs	r3, r4
 8002b76:	6303      	str	r3, [r0, #48]	@ 0x30
 8002b78:	e7d5      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b7a:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 8002b7c:	3b41      	subs	r3, #65	@ 0x41
 8002b7e:	409c      	lsls	r4, r3
 8002b80:	ea26 0404 	bic.w	r4, r6, r4
 8002b84:	409d      	lsls	r5, r3
 8002b86:	432c      	orrs	r4, r5
 8002b88:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8002b8a:	e7cc      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b8c:	6935      	ldr	r5, [r6, #16]
 8002b8e:	4084      	lsls	r4, r0
 8002b90:	ea25 0404 	bic.w	r4, r5, r4
 8002b94:	4083      	lsls	r3, r0
 8002b96:	4323      	orrs	r3, r4
 8002b98:	6133      	str	r3, [r6, #16]
 8002b9a:	e7d5      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x5c>
    if (hadc->Instance == ADC1)
 8002b9c:	6813      	ldr	r3, [r2, #0]
 8002b9e:	4811      	ldr	r0, [pc, #68]	@ (8002be4 <HAL_ADC_ConfigChannel+0xf8>)
 8002ba0:	4283      	cmp	r3, r0
 8002ba2:	d117      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0xe8>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ba4:	6898      	ldr	r0, [r3, #8]
 8002ba6:	0200      	lsls	r0, r0, #8
 8002ba8:	d4d2      	bmi.n	8002b50 <HAL_ADC_ConfigChannel+0x64>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002baa:	6898      	ldr	r0, [r3, #8]
 8002bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002bb0:	6098      	str	r0, [r3, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb2:	680b      	ldr	r3, [r1, #0]
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d1cb      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x64>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_ADC_ConfigChannel+0xfc>)
 8002bba:	490c      	ldr	r1, [pc, #48]	@ (8002bec <HAL_ADC_ConfigChannel+0x100>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	210a      	movs	r1, #10
 8002bc4:	434b      	muls	r3, r1
            wait_loop_index--;
 8002bc6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002bc8:	9b01      	ldr	r3, [sp, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0c0      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 8002bce:	9b01      	ldr	r3, [sp, #4]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	e7f8      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0xda>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002bd6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd8:	f043 0320 	orr.w	r3, r3, #32
 8002bdc:	6293      	str	r3, [r2, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002bde:	e7b8      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x66>
  __HAL_LOCK(hadc);
 8002be0:	2002      	movs	r0, #2
 8002be2:	e7b9      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x6c>
 8002be4:	40012400 	.word	0x40012400
 8002be8:	20000000 	.word	0x20000000
 8002bec:	000f4240 	.word	0x000f4240

08002bf0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002bf0:	2300      	movs	r3, #0
{
 8002bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002bf4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bf6:	6803      	ldr	r3, [r0, #0]
{
 8002bf8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	07d2      	lsls	r2, r2, #31
 8002bfe:	d502      	bpl.n	8002c06 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c00:	2000      	movs	r0, #0
}
 8002c02:	b003      	add	sp, #12
 8002c04:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c0e:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <ADC_Enable+0x70>)
 8002c10:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <ADC_Enable+0x74>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002c18:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002c1a:	9b01      	ldr	r3, [sp, #4]
 8002c1c:	b9e3      	cbnz	r3, 8002c58 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8002c1e:	f7ff fea3 	bl	8002968 <HAL_GetTick>
 8002c22:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	07db      	lsls	r3, r3, #31
 8002c2a:	d4e9      	bmi.n	8002c00 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c2c:	f7ff fe9c 	bl	8002968 <HAL_GetTick>
 8002c30:	1b40      	subs	r0, r0, r5
 8002c32:	2802      	cmp	r0, #2
 8002c34:	d9f6      	bls.n	8002c24 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f013 0301 	ands.w	r3, r3, #1
 8002c3e:	d1f1      	bne.n	8002c24 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c40:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8002c42:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c44:	f042 0210 	orr.w	r2, r2, #16
 8002c48:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8002c4c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8002c56:	e7d4      	b.n	8002c02 <ADC_Enable+0x12>
      wait_loop_index--;
 8002c58:	9b01      	ldr	r3, [sp, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	e7dc      	b.n	8002c18 <ADC_Enable+0x28>
 8002c5e:	bf00      	nop
 8002c60:	20000000 	.word	0x20000000
 8002c64:	000f4240 	.word	0x000f4240

08002c68 <HAL_ADC_Start>:
{
 8002c68:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002c6a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8002c6e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d055      	beq.n	8002d20 <HAL_ADC_Start+0xb8>
 8002c74:	2301      	movs	r3, #1
 8002c76:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002c7a:	f7ff ffb9 	bl	8002bf0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d14a      	bne.n	8002d18 <HAL_ADC_Start+0xb0>
    ADC_STATE_CLR_SET(hadc->State,
 8002c82:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c84:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c92:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c94:	4b23      	ldr	r3, [pc, #140]	@ (8002d24 <HAL_ADC_Start+0xbc>)
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d104      	bne.n	8002ca4 <HAL_ADC_Start+0x3c>
 8002c9a:	4923      	ldr	r1, [pc, #140]	@ (8002d28 <HAL_ADC_Start+0xc0>)
 8002c9c:	684b      	ldr	r3, [r1, #4]
 8002c9e:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002ca2:	d12f      	bne.n	8002d04 <HAL_ADC_Start+0x9c>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ca4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002ca6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002caa:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cac:	6853      	ldr	r3, [r2, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cae:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cb0:	bf41      	itttt	mi
 8002cb2:	6aa3      	ldrmi	r3, [r4, #40]	@ 0x28
 8002cb4:	f423 5340 	bicmi.w	r3, r3, #12288	@ 0x3000
 8002cb8:	f443 5380 	orrmi.w	r3, r3, #4096	@ 0x1000
 8002cbc:	62a3      	strmi	r3, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002cc0:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cc4:	bf1c      	itt	ne
 8002cc6:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
 8002cc8:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002ccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cd4:	f06f 0302 	mvn.w	r3, #2
 8002cd8:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002ce2:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002ce6:	d113      	bne.n	8002d10 <HAL_ADC_Start+0xa8>
 8002ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d24 <HAL_ADC_Start+0xbc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d105      	bne.n	8002cfa <HAL_ADC_Start+0x92>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002cee:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8002cf2:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cf4:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8002cf8:	d10a      	bne.n	8002d10 <HAL_ADC_Start+0xa8>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d00:	609a      	str	r2, [r3, #8]
}
 8002d02:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d04:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d0a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d0c:	684b      	ldr	r3, [r1, #4]
 8002d0e:	e7ce      	b.n	8002cae <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d16:	e7f3      	b.n	8002d00 <HAL_ADC_Start+0x98>
    __HAL_UNLOCK(hadc);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8002d1e:	e7f0      	b.n	8002d02 <HAL_ADC_Start+0x9a>
  __HAL_LOCK(hadc);
 8002d20:	2002      	movs	r0, #2
 8002d22:	e7ee      	b.n	8002d02 <HAL_ADC_Start+0x9a>
 8002d24:	40012800 	.word	0x40012800
 8002d28:	40012400 	.word	0x40012400

08002d2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d2c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d2e:	6803      	ldr	r3, [r0, #0]
{
 8002d30:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	07d1      	lsls	r1, r2, #31
 8002d36:	d401      	bmi.n	8002d3c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d38:	2000      	movs	r0, #0
}
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002d44:	f7ff fe10 	bl	8002968 <HAL_GetTick>
 8002d48:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	07db      	lsls	r3, r3, #31
 8002d50:	d5f2      	bpl.n	8002d38 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d52:	f7ff fe09 	bl	8002968 <HAL_GetTick>
 8002d56:	1b40      	subs	r0, r0, r5
 8002d58:	2802      	cmp	r0, #2
 8002d5a:	d9f6      	bls.n	8002d4a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	07da      	lsls	r2, r3, #31
 8002d62:	d5f2      	bpl.n	8002d4a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8002d66:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d68:	f043 0310 	orr.w	r3, r3, #16
 8002d6c:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8002d76:	e7e0      	b.n	8002d3a <ADC_ConversionStop_Disable+0xe>

08002d78 <HAL_ADC_Init>:
{
 8002d78:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d06d      	beq.n	8002e5c <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d80:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d82:	b923      	cbnz	r3, 8002d8e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002d84:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002d86:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8002d8a:	f7ff fbab 	bl	80024e4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f7ff ffcc 	bl	8002d2c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d94:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d96:	f013 0310 	ands.w	r3, r3, #16
 8002d9a:	d161      	bne.n	8002e60 <HAL_ADC_Init+0xe8>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d15f      	bne.n	8002e60 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8002da0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002da2:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002da4:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8002da8:	f022 0202 	bic.w	r2, r2, #2
 8002dac:	f042 0202 	orr.w	r2, r2, #2
 8002db0:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002db2:	69e2      	ldr	r2, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002db4:	7b25      	ldrb	r5, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002db6:	4311      	orrs	r1, r2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002db8:	68a2      	ldr	r2, [r4, #8]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dba:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002dbe:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002dc2:	d003      	beq.n	8002dcc <HAL_ADC_Init+0x54>
 8002dc4:	1e56      	subs	r6, r2, #1
 8002dc6:	4272      	negs	r2, r6
 8002dc8:	4172      	adcs	r2, r6
 8002dca:	0212      	lsls	r2, r2, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dcc:	7d26      	ldrb	r6, [r4, #20]
 8002dce:	2e01      	cmp	r6, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dd2:	2d00      	cmp	r5, #0
 8002dd4:	d12f      	bne.n	8002e36 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002dd6:	69a5      	ldr	r5, [r4, #24]
 8002dd8:	3d01      	subs	r5, #1
 8002dda:	ea42 3545 	orr.w	r5, r2, r5, lsl #13
 8002dde:	f445 6200 	orr.w	r2, r5, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002de2:	6826      	ldr	r6, [r4, #0]
 8002de4:	6875      	ldr	r5, [r6, #4]
 8002de6:	f425 4569 	bic.w	r5, r5, #59648	@ 0xe900
 8002dea:	432a      	orrs	r2, r5
 8002dec:	6072      	str	r2, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002dee:	6825      	ldr	r5, [r4, #0]
 8002df0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e6c <HAL_ADC_Init+0xf4>)
 8002df2:	68ae      	ldr	r6, [r5, #8]
 8002df4:	4032      	ands	r2, r6
 8002df6:	430a      	orrs	r2, r1
 8002df8:	60aa      	str	r2, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002dfa:	68a2      	ldr	r2, [r4, #8]
 8002dfc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002e00:	d001      	beq.n	8002e06 <HAL_ADC_Init+0x8e>
 8002e02:	2a01      	cmp	r2, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e06:	6923      	ldr	r3, [r4, #16]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002e0c:	6825      	ldr	r5, [r4, #0]
 8002e0e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8002e10:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e14:	4313      	orrs	r3, r2
 8002e16:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	4b14      	ldr	r3, [pc, #80]	@ (8002e70 <HAL_ADC_Init+0xf8>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	4299      	cmp	r1, r3
 8002e22:	d111      	bne.n	8002e48 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8002e24:	2300      	movs	r3, #0
 8002e26:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002e28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e36:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002e38:	f045 0520 	orr.w	r5, r5, #32
 8002e3c:	62a5      	str	r5, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8002e40:	f045 0501 	orr.w	r5, r5, #1
 8002e44:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8002e46:	e7cc      	b.n	8002de2 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8002e48:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e4a:	f023 0312 	bic.w	r3, r3, #18
 8002e4e:	f043 0310 	orr.w	r3, r3, #16
 8002e52:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	e7e9      	b.n	8002e34 <HAL_ADC_Init+0xbc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e60:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e62:	f043 0310 	orr.w	r3, r3, #16
 8002e66:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8002e68:	e7f8      	b.n	8002e5c <HAL_ADC_Init+0xe4>
 8002e6a:	bf00      	nop
 8002e6c:	ffe1f7fd 	.word	0xffe1f7fd
 8002e70:	ff1f0efe 	.word	0xff1f0efe

08002e74 <HAL_ADC_Stop>:
{
 8002e74:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002e76:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8002e7a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d011      	beq.n	8002ea4 <HAL_ADC_Stop+0x30>
 8002e80:	2301      	movs	r3, #1
 8002e82:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e86:	f7ff ff51 	bl	8002d2c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002e8a:	b938      	cbnz	r0, 8002e9c <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	62a3      	str	r3, [r4, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002ea2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002ea4:	2002      	movs	r0, #2
 8002ea6:	e7fc      	b.n	8002ea2 <HAL_ADC_Stop+0x2e>

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea8:	4907      	ldr	r1, [pc, #28]	@ (8002ec8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002eaa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002eae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002eb6:	0412      	lsls	r2, r2, #16
 8002eb8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002ec4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ecc:	b530      	push	{r4, r5, lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ece:	4b15      	ldr	r3, [pc, #84]	@ (8002f24 <HAL_NVIC_SetPriority+0x58>)
 8002ed0:	68dc      	ldr	r4, [r3, #12]
 8002ed2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eda:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	bf28      	it	cs
 8002ee0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee8:	bf94      	ite	ls
 8002eea:	2400      	movls	r4, #0
 8002eec:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eee:	fa05 f303 	lsl.w	r3, r5, r3
 8002ef2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef6:	40a5      	lsls	r5, r4
 8002ef8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002efe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	bfac      	ite	ge
 8002f06:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0a:	4a07      	ldrlt	r2, [pc, #28]	@ (8002f28 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	bfab      	itete	ge
 8002f14:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f22:	bd30      	pop	{r4, r5, pc}
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	e000ed14 	.word	0xe000ed14

08002f2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	db07      	blt.n	8002f40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f30:	2301      	movs	r3, #1
 8002f32:	0941      	lsrs	r1, r0, #5
 8002f34:	4a03      	ldr	r2, [pc, #12]	@ (8002f44 <HAL_NVIC_EnableIRQ+0x18>)
 8002f36:	f000 001f 	and.w	r0, r0, #31
 8002f3a:	4083      	lsls	r3, r0
 8002f3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f48:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8002f4c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4e:	2a02      	cmp	r2, #2
 8002f50:	d006      	beq.n	8002f60 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f52:	2204      	movs	r2, #4
 8002f54:	6382      	str	r2, [r0, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8002f56:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 8002f5e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f60:	6801      	ldr	r1, [r0, #0]
 8002f62:	680a      	ldr	r2, [r1, #0]
 8002f64:	f022 020e 	bic.w	r2, r2, #14
 8002f68:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f6a:	6801      	ldr	r1, [r0, #0]
 8002f6c:	680a      	ldr	r2, [r1, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f74:	2101      	movs	r1, #1
 8002f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f78:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	6042      	str	r2, [r0, #4]
  return status; 
 8002f80:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002f82:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8002f86:	e7e7      	b.n	8002f58 <HAL_DMA_Abort+0x10>

08002f88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f88:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f8a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d003      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f92:	2304      	movs	r3, #4
 8002f94:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002f96:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002f98:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9a:	6802      	ldr	r2, [r0, #0]
 8002f9c:	6813      	ldr	r3, [r2, #0]
 8002f9e:	f023 030e 	bic.w	r3, r3, #14
 8002fa2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002fa4:	6802      	ldr	r2, [r0, #0]
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fae:	6803      	ldr	r3, [r0, #0]
 8002fb0:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <HAL_DMA_Abort_IT+0x88>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01f      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x6e>
 8002fb6:	3214      	adds	r2, #20
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d01e      	beq.n	8002ffa <HAL_DMA_Abort_IT+0x72>
 8002fbc:	3214      	adds	r2, #20
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01d      	beq.n	8002ffe <HAL_DMA_Abort_IT+0x76>
 8002fc2:	3214      	adds	r2, #20
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d01d      	beq.n	8003004 <HAL_DMA_Abort_IT+0x7c>
 8002fc8:	3214      	adds	r2, #20
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01d      	beq.n	800300a <HAL_DMA_Abort_IT+0x82>
 8002fce:	3214      	adds	r2, #20
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf14      	ite	ne
 8002fd4:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8002fd8:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8002fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003014 <HAL_DMA_Abort_IT+0x8c>)
 8002fde:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002fec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002fee:	b103      	cbz	r3, 8002ff2 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8002ff0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	e7d0      	b.n	8002f98 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e7f0      	b.n	8002fdc <HAL_DMA_Abort_IT+0x54>
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	e7ee      	b.n	8002fdc <HAL_DMA_Abort_IT+0x54>
 8002ffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003002:	e7eb      	b.n	8002fdc <HAL_DMA_Abort_IT+0x54>
 8003004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003008:	e7e8      	b.n	8002fdc <HAL_DMA_Abort_IT+0x54>
 800300a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800300e:	e7e5      	b.n	8002fdc <HAL_DMA_Abort_IT+0x54>
 8003010:	40020008 	.word	0x40020008
 8003014:	40020000 	.word	0x40020000

08003018 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8003018:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 800301c:	4770      	bx	lr
	...

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003024:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003026:	4615      	mov	r5, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003028:	4e79      	ldr	r6, [pc, #484]	@ (8003210 <HAL_GPIO_Init+0x1f0>)
 800302a:	4b7a      	ldr	r3, [pc, #488]	@ (8003214 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 800302c:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 8003218 <HAL_GPIO_Init+0x1f8>
 8003030:	4f7a      	ldr	r7, [pc, #488]	@ (800321c <HAL_GPIO_Init+0x1fc>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003032:	f8d1 e000 	ldr.w	lr, [r1]
 8003036:	fa3e f405 	lsrs.w	r4, lr, r5
 800303a:	d102      	bne.n	8003042 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800303c:	b003      	add	sp, #12
 800303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003042:	f04f 0801 	mov.w	r8, #1
 8003046:	fa08 f805 	lsl.w	r8, r8, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304a:	ea0e 0408 	and.w	r4, lr, r8
    if (iocurrent == ioposition)
 800304e:	ea38 0e0e 	bics.w	lr, r8, lr
 8003052:	f040 80a1 	bne.w	8003198 <HAL_GPIO_Init+0x178>
      switch (GPIO_Init->Mode)
 8003056:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800305a:	f1be 0f03 	cmp.w	lr, #3
 800305e:	d809      	bhi.n	8003074 <HAL_GPIO_Init+0x54>
 8003060:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003064:	f1be 0f02 	cmp.w	lr, #2
 8003068:	f200 80a6 	bhi.w	80031b8 <HAL_GPIO_Init+0x198>
 800306c:	e8df f00e 	tbb	[pc, lr]
 8003070:	bdb8      	.short	0xbdb8
 8003072:	c3          	.byte	0xc3
 8003073:	00          	.byte	0x00
 8003074:	f1be 0f12 	cmp.w	lr, #18
 8003078:	f000 80ba 	beq.w	80031f0 <HAL_GPIO_Init+0x1d0>
 800307c:	f200 808e 	bhi.w	800319c <HAL_GPIO_Init+0x17c>
 8003080:	f1be 0f11 	cmp.w	lr, #17
 8003084:	f000 80ae 	beq.w	80031e4 <HAL_GPIO_Init+0x1c4>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003088:	2cff      	cmp	r4, #255	@ 0xff
 800308a:	bf98      	it	ls
 800308c:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800308e:	f04f 090f 	mov.w	r9, #15
 8003092:	ea4f 0e85 	mov.w	lr, r5, lsl #2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003096:	bf84      	itt	hi
 8003098:	f100 0a04 	addhi.w	sl, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800309c:	f1ae 0e20 	subhi.w	lr, lr, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030a0:	f8da 8000 	ldr.w	r8, [sl]
 80030a4:	fa09 fb0e 	lsl.w	fp, r9, lr
 80030a8:	ea28 080b 	bic.w	r8, r8, fp
 80030ac:	fa02 fe0e 	lsl.w	lr, r2, lr
 80030b0:	ea48 080e 	orr.w	r8, r8, lr
 80030b4:	f8ca 8000 	str.w	r8, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b8:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80030bc:	f01e 5f80 	tst.w	lr, #268435456	@ 0x10000000
 80030c0:	d06a      	beq.n	8003198 <HAL_GPIO_Init+0x178>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030c2:	f8d6 e018 	ldr.w	lr, [r6, #24]
 80030c6:	f025 0803 	bic.w	r8, r5, #3
 80030ca:	f04e 0e01 	orr.w	lr, lr, #1
 80030ce:	f8c6 e018 	str.w	lr, [r6, #24]
 80030d2:	f8d6 e018 	ldr.w	lr, [r6, #24]
 80030d6:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 80030da:	f00e 0e01 	and.w	lr, lr, #1
 80030de:	f8cd e004 	str.w	lr, [sp, #4]
 80030e2:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030e6:	f005 0a03 	and.w	sl, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030ea:	f8dd e004 	ldr.w	lr, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030ee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80030f2:	f8d8 e008 	ldr.w	lr, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030f6:	fa09 f90a 	lsl.w	r9, r9, sl
 80030fa:	ea2e 0909 	bic.w	r9, lr, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030fe:	f8df e120 	ldr.w	lr, [pc, #288]	@ 8003220 <HAL_GPIO_Init+0x200>
 8003102:	4570      	cmp	r0, lr
 8003104:	d07b      	beq.n	80031fe <HAL_GPIO_Init+0x1de>
 8003106:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 800310a:	4570      	cmp	r0, lr
 800310c:	d07a      	beq.n	8003204 <HAL_GPIO_Init+0x1e4>
 800310e:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 8003112:	4570      	cmp	r0, lr
 8003114:	d079      	beq.n	800320a <HAL_GPIO_Init+0x1ea>
 8003116:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
 800311a:	4570      	cmp	r0, lr
 800311c:	bf14      	ite	ne
 800311e:	f04f 0e04 	movne.w	lr, #4
 8003122:	f04f 0e03 	moveq.w	lr, #3
 8003126:	fa0e fe0a 	lsl.w	lr, lr, sl
 800312a:	ea4e 0e09 	orr.w	lr, lr, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800312e:	f8c8 e008 	str.w	lr, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003132:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8003136:	f41e 1f80 	tst.w	lr, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800313a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800313e:	bf14      	ite	ne
 8003140:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003144:	ea2e 0e04 	biceq.w	lr, lr, r4
 8003148:	f8c3 e008 	str.w	lr, [r3, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800314c:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8003150:	f41e 1f00 	tst.w	lr, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003154:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8003158:	bf14      	ite	ne
 800315a:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800315e:	ea2e 0e04 	biceq.w	lr, lr, r4
 8003162:	f8c3 e00c 	str.w	lr, [r3, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003166:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800316a:	f41e 3f00 	tst.w	lr, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800316e:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8003172:	bf14      	ite	ne
 8003174:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003178:	ea2e 0e04 	biceq.w	lr, lr, r4
 800317c:	f8c3 e004 	str.w	lr, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003180:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8003184:	f41e 3f80 	tst.w	lr, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003188:	f8d3 e000 	ldr.w	lr, [r3]
 800318c:	bf14      	ite	ne
 800318e:	ea4e 0404 	orrne.w	r4, lr, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003192:	ea2e 0404 	biceq.w	r4, lr, r4
 8003196:	601c      	str	r4, [r3, #0]
	position++;
 8003198:	3501      	adds	r5, #1
 800319a:	e74a      	b.n	8003032 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800319c:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 8003224 <HAL_GPIO_Init+0x204>
 80031a0:	45ce      	cmp	lr, r9
 80031a2:	d009      	beq.n	80031b8 <HAL_GPIO_Init+0x198>
 80031a4:	d814      	bhi.n	80031d0 <HAL_GPIO_Init+0x1b0>
 80031a6:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80031aa:	45ce      	cmp	lr, r9
 80031ac:	d004      	beq.n	80031b8 <HAL_GPIO_Init+0x198>
 80031ae:	45e6      	cmp	lr, ip
 80031b0:	d002      	beq.n	80031b8 <HAL_GPIO_Init+0x198>
 80031b2:	45be      	cmp	lr, r7
 80031b4:	f47f af68 	bne.w	8003088 <HAL_GPIO_Init+0x68>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031b8:	688a      	ldr	r2, [r1, #8]
 80031ba:	b1f2      	cbz	r2, 80031fa <HAL_GPIO_Init+0x1da>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031bc:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80031be:	bf08      	it	eq
 80031c0:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c4:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80031c8:	bf18      	it	ne
 80031ca:	f8c0 8014 	strne.w	r8, [r0, #20]
 80031ce:	e75b      	b.n	8003088 <HAL_GPIO_Init+0x68>
      switch (GPIO_Init->Mode)
 80031d0:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8003228 <HAL_GPIO_Init+0x208>
 80031d4:	45ce      	cmp	lr, r9
 80031d6:	d0ef      	beq.n	80031b8 <HAL_GPIO_Init+0x198>
 80031d8:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80031dc:	45ce      	cmp	lr, r9
 80031de:	e7e9      	b.n	80031b4 <HAL_GPIO_Init+0x194>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031e0:	68ca      	ldr	r2, [r1, #12]
          break;
 80031e2:	e751      	b.n	8003088 <HAL_GPIO_Init+0x68>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031e4:	68ca      	ldr	r2, [r1, #12]
 80031e6:	3204      	adds	r2, #4
          break;
 80031e8:	e74e      	b.n	8003088 <HAL_GPIO_Init+0x68>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ea:	68ca      	ldr	r2, [r1, #12]
 80031ec:	3208      	adds	r2, #8
          break;
 80031ee:	e74b      	b.n	8003088 <HAL_GPIO_Init+0x68>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031f0:	68ca      	ldr	r2, [r1, #12]
 80031f2:	320c      	adds	r2, #12
          break;
 80031f4:	e748      	b.n	8003088 <HAL_GPIO_Init+0x68>
      switch (GPIO_Init->Mode)
 80031f6:	2200      	movs	r2, #0
 80031f8:	e746      	b.n	8003088 <HAL_GPIO_Init+0x68>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031fa:	2204      	movs	r2, #4
 80031fc:	e744      	b.n	8003088 <HAL_GPIO_Init+0x68>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031fe:	f04f 0e00 	mov.w	lr, #0
 8003202:	e790      	b.n	8003126 <HAL_GPIO_Init+0x106>
 8003204:	f04f 0e01 	mov.w	lr, #1
 8003208:	e78d      	b.n	8003126 <HAL_GPIO_Init+0x106>
 800320a:	f04f 0e02 	mov.w	lr, #2
 800320e:	e78a      	b.n	8003126 <HAL_GPIO_Init+0x106>
 8003210:	40021000 	.word	0x40021000
 8003214:	40010400 	.word	0x40010400
 8003218:	10210000 	.word	0x10210000
 800321c:	10110000 	.word	0x10110000
 8003220:	40010800 	.word	0x40010800
 8003224:	10220000 	.word	0x10220000
 8003228:	10310000 	.word	0x10310000

0800322c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800322c:	b10a      	cbz	r2, 8003232 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800322e:	6101      	str	r1, [r0, #16]
  }
}
 8003230:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003232:	0409      	lsls	r1, r1, #16
 8003234:	e7fb      	b.n	800322e <HAL_GPIO_WritePin+0x2>

08003236 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003236:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003238:	ea01 0203 	and.w	r2, r1, r3
 800323c:	ea21 0103 	bic.w	r1, r1, r3
 8003240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003244:	6101      	str	r1, [r0, #16]
}
 8003246:	4770      	bx	lr

08003248 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003248:	6801      	ldr	r1, [r0, #0]
 800324a:	2200      	movs	r2, #0
 800324c:	694b      	ldr	r3, [r1, #20]
 800324e:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8003252:	d010      	beq.n	8003276 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003254:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003258:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800325c:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800325e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003266:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003268:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8003272:	2001      	movs	r0, #1
 8003274:	4770      	bx	lr
  }
  return HAL_OK;
 8003276:	4618      	mov	r0, r3
}
 8003278:	4770      	bx	lr

0800327a <I2C_WaitOnFlagUntilTimeout>:
{
 800327a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800327e:	4606      	mov	r6, r0
 8003280:	460f      	mov	r7, r1
 8003282:	4691      	mov	r9, r2
 8003284:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003286:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800328a:	6833      	ldr	r3, [r6, #0]
 800328c:	f1ba 0f01 	cmp.w	sl, #1
 8003290:	bf0c      	ite	eq
 8003292:	695c      	ldreq	r4, [r3, #20]
 8003294:	699c      	ldrne	r4, [r3, #24]
 8003296:	ea27 0404 	bic.w	r4, r7, r4
 800329a:	b2a4      	uxth	r4, r4
 800329c:	fab4 f484 	clz	r4, r4
 80032a0:	0964      	lsrs	r4, r4, #5
 80032a2:	45a1      	cmp	r9, r4
 80032a4:	d001      	beq.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80032a6:	2000      	movs	r0, #0
 80032a8:	e025      	b.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	1c6a      	adds	r2, r5, #1
 80032ac:	d0ee      	beq.n	800328c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7ff fb5b 	bl	8002968 <HAL_GetTick>
 80032b2:	9b08      	ldr	r3, [sp, #32]
 80032b4:	1ac0      	subs	r0, r0, r3
 80032b6:	42a8      	cmp	r0, r5
 80032b8:	d801      	bhi.n	80032be <I2C_WaitOnFlagUntilTimeout+0x44>
 80032ba:	2d00      	cmp	r5, #0
 80032bc:	d1e5      	bne.n	800328a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032be:	6833      	ldr	r3, [r6, #0]
 80032c0:	f1ba 0f01 	cmp.w	sl, #1
 80032c4:	bf0c      	ite	eq
 80032c6:	695b      	ldreq	r3, [r3, #20]
 80032c8:	699b      	ldrne	r3, [r3, #24]
 80032ca:	ea27 0303 	bic.w	r3, r7, r3
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	fab3 f383 	clz	r3, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	4599      	cmp	r9, r3
 80032d8:	d1d7      	bne.n	800328a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032da:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80032dc:	2220      	movs	r2, #32
          return HAL_ERROR;
 80032de:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032e0:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032e2:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032e6:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ea:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80032ec:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f0:	f042 0220 	orr.w	r2, r2, #32
 80032f4:	6432      	str	r2, [r6, #64]	@ 0x40
}
 80032f6:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080032fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80032fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fc:	4604      	mov	r4, r0
 80032fe:	460e      	mov	r6, r1
 8003300:	4615      	mov	r5, r2
 8003302:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003304:	6822      	ldr	r2, [r4, #0]
 8003306:	6950      	ldr	r0, [r2, #20]
 8003308:	ea26 0000 	bic.w	r0, r6, r0
 800330c:	b280      	uxth	r0, r0
 800330e:	b1c8      	cbz	r0, 8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003310:	6953      	ldr	r3, [r2, #20]
 8003312:	0559      	lsls	r1, r3, #21
 8003314:	d517      	bpl.n	8003346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800331c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800332a:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003330:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003334:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003336:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333a:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800333c:	2300      	movs	r3, #0
      return HAL_ERROR;
 800333e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8003340:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003346:	1c6b      	adds	r3, r5, #1
 8003348:	d0dd      	beq.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334a:	f7ff fb0d 	bl	8002968 <HAL_GetTick>
 800334e:	1bc0      	subs	r0, r0, r7
 8003350:	42a8      	cmp	r0, r5
 8003352:	d801      	bhi.n	8003358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8003354:	2d00      	cmp	r5, #0
 8003356:	d1d5      	bne.n	8003304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	ea26 0202 	bic.w	r2, r6, r2
 8003360:	b292      	uxth	r2, r2
 8003362:	2a00      	cmp	r2, #0
 8003364:	d0ce      	beq.n	8003304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003366:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8003368:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800336c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003370:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003374:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003376:	4313      	orrs	r3, r2
 8003378:	e7df      	b.n	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800337a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800337a:	b570      	push	{r4, r5, r6, lr}
 800337c:	4604      	mov	r4, r0
 800337e:	460d      	mov	r5, r1
 8003380:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	061b      	lsls	r3, r3, #24
 8003388:	d501      	bpl.n	800338e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800338a:	2000      	movs	r0, #0
 800338c:	e01e      	b.n	80033cc <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800338e:	4620      	mov	r0, r4
 8003390:	f7ff ff5a 	bl	8003248 <I2C_IsAcknowledgeFailed>
 8003394:	b9c8      	cbnz	r0, 80033ca <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003396:	1c6a      	adds	r2, r5, #1
 8003398:	d0f3      	beq.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7ff fae5 	bl	8002968 <HAL_GetTick>
 800339e:	1b80      	subs	r0, r0, r6
 80033a0:	42a8      	cmp	r0, r5
 80033a2:	d801      	bhi.n	80033a8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80033a4:	2d00      	cmp	r5, #0
 80033a6:	d1ec      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80033b0:	d1e7      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b2:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033b4:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033be:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80033c0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80033ca:	2001      	movs	r0, #1
}
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080033d0 <I2C_RequestMemoryWrite>:
{
 80033d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033d4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d6:	6802      	ldr	r2, [r0, #0]
{
 80033d8:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	6813      	ldr	r3, [r2, #0]
{
 80033dc:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e2:	6013      	str	r3, [r2, #0]
{
 80033e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 80033e8:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ea:	463b      	mov	r3, r7
 80033ec:	2200      	movs	r2, #0
 80033ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033f2:	f8cd 8000 	str.w	r8, [sp]
{
 80033f6:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f8:	f7ff ff3f 	bl	800327a <I2C_WaitOnFlagUntilTimeout>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	b138      	cbz	r0, 8003410 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	05db      	lsls	r3, r3, #23
 8003404:	d502      	bpl.n	800340c <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800340a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800340c:	2603      	movs	r6, #3
 800340e:	e020      	b.n	8003452 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003410:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8003414:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003416:	463a      	mov	r2, r7
 8003418:	4643      	mov	r3, r8
 800341a:	4620      	mov	r0, r4
 800341c:	4918      	ldr	r1, [pc, #96]	@ (8003480 <I2C_RequestMemoryWrite+0xb0>)
 800341e:	f7ff ff6c 	bl	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003422:	b9a8      	cbnz	r0, 8003450 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	9003      	str	r0, [sp, #12]
 8003428:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800342a:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342c:	9203      	str	r2, [sp, #12]
 800342e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003430:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003432:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003434:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003436:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003438:	f7ff ff9f 	bl	800337a <I2C_WaitOnTXEFlagUntilTimeout>
 800343c:	4606      	mov	r6, r0
 800343e:	b160      	cbz	r0, 800345a <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003440:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003442:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	bf01      	itttt	eq
 8003446:	6822      	ldreq	r2, [r4, #0]
 8003448:	6813      	ldreq	r3, [r2, #0]
 800344a:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800344e:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8003450:	2601      	movs	r6, #1
}
 8003452:	4630      	mov	r0, r6
 8003454:	b005      	add	sp, #20
 8003456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800345a:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003460:	d102      	bne.n	8003468 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003462:	b2ed      	uxtb	r5, r5
 8003464:	611d      	str	r5, [r3, #16]
 8003466:	e7f4      	b.n	8003452 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003468:	0a2a      	lsrs	r2, r5, #8
 800346a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800346c:	4639      	mov	r1, r7
 800346e:	4642      	mov	r2, r8
 8003470:	4620      	mov	r0, r4
 8003472:	f7ff ff82 	bl	800337a <I2C_WaitOnTXEFlagUntilTimeout>
 8003476:	2800      	cmp	r0, #0
 8003478:	d1e2      	bne.n	8003440 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	e7f1      	b.n	8003462 <I2C_RequestMemoryWrite+0x92>
 800347e:	bf00      	nop
 8003480:	00010002 	.word	0x00010002

08003484 <I2C_RequestMemoryRead>:
{
 8003484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003488:	4615      	mov	r5, r2
 800348a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348e:	6802      	ldr	r2, [r0, #0]
{
 8003490:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003492:	6813      	ldr	r3, [r2, #0]
{
 8003494:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800349a:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349c:	6802      	ldr	r2, [r0, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800349e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a2:	6813      	ldr	r3, [r2, #0]
{
 80034a4:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034aa:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ac:	463b      	mov	r3, r7
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8cd 8000 	str.w	r8, [sp]
 80034b4:	f7ff fee1 	bl	800327a <I2C_WaitOnFlagUntilTimeout>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	b148      	cbz	r0, 80034d0 <I2C_RequestMemoryRead+0x4c>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034bc:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034be:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c0:	bf48      	it	mi
 80034c2:	f44f 7300 	movmi.w	r3, #512	@ 0x200
    return HAL_TIMEOUT;
 80034c6:	f04f 0003 	mov.w	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ca:	bf48      	it	mi
 80034cc:	6423      	strmi	r3, [r4, #64]	@ 0x40
 80034ce:	e021      	b.n	8003514 <I2C_RequestMemoryRead+0x90>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034d0:	fa5f f986 	uxtb.w	r9, r6
 80034d4:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80034d8:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034da:	463a      	mov	r2, r7
 80034dc:	4643      	mov	r3, r8
 80034de:	4620      	mov	r0, r4
 80034e0:	4929      	ldr	r1, [pc, #164]	@ (8003588 <I2C_RequestMemoryRead+0x104>)
 80034e2:	f7ff ff0a 	bl	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e6:	b9a0      	cbnz	r0, 8003512 <I2C_RequestMemoryRead+0x8e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	9003      	str	r0, [sp, #12]
 80034ec:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f0:	9203      	str	r2, [sp, #12]
 80034f2:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f4:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fa:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fc:	f7ff ff3d 	bl	800337a <I2C_WaitOnTXEFlagUntilTimeout>
 8003500:	b158      	cbz	r0, 800351a <I2C_RequestMemoryRead+0x96>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003502:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003504:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	bf01      	itttt	eq
 8003508:	6822      	ldreq	r2, [r4, #0]
 800350a:	6813      	ldreq	r3, [r2, #0]
 800350c:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8003510:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8003512:	2001      	movs	r0, #1
}
 8003514:	b004      	add	sp, #16
 8003516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800351a:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003520:	d11a      	bne.n	8003558 <I2C_RequestMemoryRead+0xd4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003522:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003524:	4642      	mov	r2, r8
 8003526:	4639      	mov	r1, r7
 8003528:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800352a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352c:	f7ff ff25 	bl	800337a <I2C_WaitOnTXEFlagUntilTimeout>
 8003530:	4602      	mov	r2, r0
 8003532:	2800      	cmp	r0, #0
 8003534:	d1e5      	bne.n	8003502 <I2C_RequestMemoryRead+0x7e>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003536:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353a:	680b      	ldr	r3, [r1, #0]
 800353c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003540:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003542:	463b      	mov	r3, r7
 8003544:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003548:	f8cd 8000 	str.w	r8, [sp]
 800354c:	f7ff fe95 	bl	800327a <I2C_WaitOnFlagUntilTimeout>
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	b160      	cbz	r0, 800356e <I2C_RequestMemoryRead+0xea>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003554:	6813      	ldr	r3, [r2, #0]
 8003556:	e7b2      	b.n	80034be <I2C_RequestMemoryRead+0x3a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003558:	0a2a      	lsrs	r2, r5, #8
 800355a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800355c:	4639      	mov	r1, r7
 800355e:	4642      	mov	r2, r8
 8003560:	4620      	mov	r0, r4
 8003562:	f7ff ff0a 	bl	800337a <I2C_WaitOnTXEFlagUntilTimeout>
 8003566:	2800      	cmp	r0, #0
 8003568:	d1cb      	bne.n	8003502 <I2C_RequestMemoryRead+0x7e>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	e7d9      	b.n	8003522 <I2C_RequestMemoryRead+0x9e>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800356e:	f049 0301 	orr.w	r3, r9, #1
 8003572:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003574:	4620      	mov	r0, r4
 8003576:	4643      	mov	r3, r8
 8003578:	463a      	mov	r2, r7
 800357a:	4903      	ldr	r1, [pc, #12]	@ (8003588 <I2C_RequestMemoryRead+0x104>)
 800357c:	f7ff febd 	bl	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003580:	3800      	subs	r0, #0
 8003582:	bf18      	it	ne
 8003584:	2001      	movne	r0, #1
 8003586:	e7c5      	b.n	8003514 <I2C_RequestMemoryRead+0x90>
 8003588:	00010002 	.word	0x00010002

0800358c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	4604      	mov	r4, r0
 8003590:	460d      	mov	r5, r1
 8003592:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	075b      	lsls	r3, r3, #29
 800359a:	d501      	bpl.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800359c:	2000      	movs	r0, #0
 800359e:	e01e      	b.n	80035de <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a0:	4620      	mov	r0, r4
 80035a2:	f7ff fe51 	bl	8003248 <I2C_IsAcknowledgeFailed>
 80035a6:	b9c8      	cbnz	r0, 80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80035a8:	1c6a      	adds	r2, r5, #1
 80035aa:	d0f3      	beq.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ac:	f7ff f9dc 	bl	8002968 <HAL_GetTick>
 80035b0:	1b80      	subs	r0, r0, r6
 80035b2:	42a8      	cmp	r0, r5
 80035b4:	d801      	bhi.n	80035ba <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80035b6:	2d00      	cmp	r5, #0
 80035b8:	d1ec      	bne.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f013 0304 	ands.w	r3, r3, #4
 80035c2:	d1e7      	bne.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035c6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80035d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d6:	f042 0220 	orr.w	r2, r2, #32
 80035da:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80035dc:	2001      	movs	r0, #1
}
 80035de:	bd70      	pop	{r4, r5, r6, pc}

080035e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	4604      	mov	r4, r0
 80035e4:	460d      	mov	r5, r1
 80035e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035e8:	6821      	ldr	r1, [r4, #0]
 80035ea:	694b      	ldr	r3, [r1, #20]
 80035ec:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 80035f0:	d001      	beq.n	80035f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80035f2:	2000      	movs	r0, #0
 80035f4:	e011      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035f6:	694a      	ldr	r2, [r1, #20]
 80035f8:	06d2      	lsls	r2, r2, #27
 80035fa:	d50f      	bpl.n	800361c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003602:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003604:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003606:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800360e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003610:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003612:	2300      	movs	r3, #0
      return HAL_ERROR;
 8003614:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8003616:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800361a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361c:	f7ff f9a4 	bl	8002968 <HAL_GetTick>
 8003620:	1b80      	subs	r0, r0, r6
 8003622:	42a8      	cmp	r0, r5
 8003624:	d801      	bhi.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003626:	2d00      	cmp	r5, #0
 8003628:	d1de      	bne.n	80035e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8003632:	d1d9      	bne.n	80035e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8003634:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003636:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003640:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003642:	4313      	orrs	r3, r2
 8003644:	e7e4      	b.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08003648 <HAL_I2C_Init>:
{
 8003648:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800364a:	4604      	mov	r4, r0
 800364c:	b908      	cbnz	r0, 8003652 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800364e:	2001      	movs	r0, #1
}
 8003650:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003652:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003656:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800365a:	b91b      	cbnz	r3, 8003664 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800365c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8003660:	f7fe ff82 	bl	8002568 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003664:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003666:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003668:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800366c:	6813      	ldr	r3, [r2, #0]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800367c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003686:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003688:	f001 fb4a 	bl	8004d20 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800368c:	4b40      	ldr	r3, [pc, #256]	@ (8003790 <HAL_I2C_Init+0x148>)
 800368e:	6862      	ldr	r2, [r4, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	bf94      	ite	ls
 8003694:	4b3f      	ldrls	r3, [pc, #252]	@ (8003794 <HAL_I2C_Init+0x14c>)
 8003696:	4b40      	ldrhi	r3, [pc, #256]	@ (8003798 <HAL_I2C_Init+0x150>)
 8003698:	4298      	cmp	r0, r3
 800369a:	d9d8      	bls.n	800364e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800369c:	4b3f      	ldr	r3, [pc, #252]	@ (800379c <HAL_I2C_Init+0x154>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800369e:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80036a0:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036a4:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036a6:	4d3a      	ldr	r5, [pc, #232]	@ (8003790 <HAL_I2C_Init+0x148>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036a8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80036ac:	431a      	orrs	r2, r3
 80036ae:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036b0:	6866      	ldr	r6, [r4, #4]
 80036b2:	6821      	ldr	r1, [r4, #0]
 80036b4:	42ae      	cmp	r6, r5
 80036b6:	bf81      	itttt	hi
 80036b8:	f44f 7596 	movhi.w	r5, #300	@ 0x12c
 80036bc:	436b      	mulhi	r3, r5
 80036be:	f44f 757a 	movhi.w	r5, #1000	@ 0x3e8
 80036c2:	fbb3 f3f5 	udivhi	r3, r3, r5
 80036c6:	6a0a      	ldr	r2, [r1, #32]
 80036c8:	3301      	adds	r3, #1
 80036ca:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80036ce:	4313      	orrs	r3, r2
 80036d0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036d2:	6821      	ldr	r1, [r4, #0]
 80036d4:	6865      	ldr	r5, [r4, #4]
 80036d6:	69ca      	ldr	r2, [r1, #28]
 80036d8:	1e43      	subs	r3, r0, #1
 80036da:	482d      	ldr	r0, [pc, #180]	@ (8003790 <HAL_I2C_Init+0x148>)
 80036dc:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80036e0:	4285      	cmp	r5, r0
 80036e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036e6:	d836      	bhi.n	8003756 <HAL_I2C_Init+0x10e>
 80036e8:	006d      	lsls	r5, r5, #1
 80036ea:	fbb3 f3f5 	udiv	r3, r3, r5
 80036ee:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80036f2:	3301      	adds	r3, #1
 80036f4:	4203      	tst	r3, r0
 80036f6:	d046      	beq.n	8003786 <HAL_I2C_Init+0x13e>
 80036f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fc:	431a      	orrs	r2, r3
 80036fe:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003700:	6821      	ldr	r1, [r4, #0]
 8003702:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003706:	680a      	ldr	r2, [r1, #0]
 8003708:	4303      	orrs	r3, r0
 800370a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003712:	6821      	ldr	r1, [r4, #0]
 8003714:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003718:	688a      	ldr	r2, [r1, #8]
 800371a:	4303      	orrs	r3, r0
 800371c:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8003720:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003728:	6821      	ldr	r1, [r4, #0]
 800372a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800372e:	68ca      	ldr	r2, [r1, #12]
 8003730:	4303      	orrs	r3, r0
 8003732:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003736:	4313      	orrs	r3, r2
 8003738:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800373a:	6822      	ldr	r2, [r4, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003746:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003748:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800374a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800374e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8003754:	e77c      	b.n	8003650 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003756:	68a0      	ldr	r0, [r4, #8]
 8003758:	b950      	cbnz	r0, 8003770 <HAL_I2C_Init+0x128>
 800375a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800375e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003762:	3301      	adds	r3, #1
 8003764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003768:	b17b      	cbz	r3, 800378a <HAL_I2C_Init+0x142>
 800376a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800376e:	e7c5      	b.n	80036fc <HAL_I2C_Init+0xb4>
 8003770:	2019      	movs	r0, #25
 8003772:	4345      	muls	r5, r0
 8003774:	fbb3 f3f5 	udiv	r3, r3, r5
 8003778:	3301      	adds	r3, #1
 800377a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377e:	b123      	cbz	r3, 800378a <HAL_I2C_Init+0x142>
 8003780:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003784:	e7ba      	b.n	80036fc <HAL_I2C_Init+0xb4>
 8003786:	2304      	movs	r3, #4
 8003788:	e7b8      	b.n	80036fc <HAL_I2C_Init+0xb4>
 800378a:	2301      	movs	r3, #1
 800378c:	e7b6      	b.n	80036fc <HAL_I2C_Init+0xb4>
 800378e:	bf00      	nop
 8003790:	000186a0 	.word	0x000186a0
 8003794:	001e847f 	.word	0x001e847f
 8003798:	003d08ff 	.word	0x003d08ff
 800379c:	000f4240 	.word	0x000f4240

080037a0 <HAL_I2C_Mem_Write>:
{
 80037a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037a4:	4604      	mov	r4, r0
 80037a6:	4699      	mov	r9, r3
 80037a8:	460f      	mov	r7, r1
 80037aa:	4690      	mov	r8, r2
 80037ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80037ae:	f7ff f8db 	bl	8002968 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80037b6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d003      	beq.n	80037c4 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80037bc:	2002      	movs	r0, #2
}
 80037be:	b003      	add	sp, #12
 80037c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037c4:	9000      	str	r0, [sp, #0]
 80037c6:	2319      	movs	r3, #25
 80037c8:	2201      	movs	r2, #1
 80037ca:	4620      	mov	r0, r4
 80037cc:	493c      	ldr	r1, [pc, #240]	@ (80038c0 <HAL_I2C_Mem_Write+0x120>)
 80037ce:	f7ff fd54 	bl	800327a <I2C_WaitOnFlagUntilTimeout>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d1f2      	bne.n	80037bc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80037d6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d0ee      	beq.n	80037bc <HAL_I2C_Mem_Write+0x1c>
 80037de:	2301      	movs	r3, #1
 80037e0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e4:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037e6:	4639      	mov	r1, r7
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e8:	681a      	ldr	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ea:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ec:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80037ee:	bf5e      	ittt	pl
 80037f0:	681a      	ldrpl	r2, [r3, #0]
 80037f2:	f042 0201 	orrpl.w	r2, r2, #1
 80037f6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037f8:	6822      	ldr	r2, [r4, #0]
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003800:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003802:	2321      	movs	r3, #33	@ 0x21
 8003804:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003808:	2340      	movs	r3, #64	@ 0x40
 800380a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380e:	2300      	movs	r3, #0
 8003810:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8003812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003814:	4642      	mov	r2, r8
    hi2c->pBuffPtr    = pData;
 8003816:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003818:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800381c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800381e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003820:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003822:	4b28      	ldr	r3, [pc, #160]	@ (80038c4 <HAL_I2C_Mem_Write+0x124>)
 8003824:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003826:	464b      	mov	r3, r9
 8003828:	e9cd 6500 	strd	r6, r5, [sp]
 800382c:	f7ff fdd0 	bl	80033d0 <I2C_RequestMemoryWrite>
 8003830:	2800      	cmp	r0, #0
 8003832:	d02d      	beq.n	8003890 <HAL_I2C_Mem_Write+0xf0>
      return HAL_ERROR;
 8003834:	2001      	movs	r0, #1
 8003836:	e7c2      	b.n	80037be <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003838:	f7ff fd9f 	bl	800337a <I2C_WaitOnTXEFlagUntilTimeout>
 800383c:	b140      	cbz	r0, 8003850 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003840:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	bf01      	itttt	eq
 8003844:	6822      	ldreq	r2, [r4, #0]
 8003846:	6813      	ldreq	r3, [r2, #0]
 8003848:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800384c:	6013      	streq	r3, [r2, #0]
 800384e:	e7f1      	b.n	8003834 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003850:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	7812      	ldrb	r2, [r2, #0]
 8003856:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003858:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800385a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 800385c:	1c4b      	adds	r3, r1, #1
 800385e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003860:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003862:	3a01      	subs	r2, #1
 8003864:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8003866:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8003868:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800386a:	b29b      	uxth	r3, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800386c:	6822      	ldr	r2, [r4, #0]
      hi2c->XferSize--;
 800386e:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003870:	6950      	ldr	r0, [r2, #20]
 8003872:	0740      	lsls	r0, r0, #29
 8003874:	d50c      	bpl.n	8003890 <HAL_I2C_Mem_Write+0xf0>
 8003876:	b15b      	cbz	r3, 8003890 <HAL_I2C_Mem_Write+0xf0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003878:	784b      	ldrb	r3, [r1, #1]
 800387a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800387c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800387e:	3301      	adds	r3, #1
 8003880:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8003882:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003888:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800388a:	3b01      	subs	r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003890:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	462a      	mov	r2, r5
 8003894:	4631      	mov	r1, r6
 8003896:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1cd      	bne.n	8003838 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389c:	f7ff fe76 	bl	800358c <I2C_WaitOnBTFFlagUntilTimeout>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1cc      	bne.n	800383e <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038ac:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80038b0:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80038bc:	e77f      	b.n	80037be <HAL_I2C_Mem_Write+0x1e>
 80038be:	bf00      	nop
 80038c0:	00100002 	.word	0x00100002
 80038c4:	ffff0000 	.word	0xffff0000

080038c8 <HAL_I2C_Mem_Read>:
{
 80038c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038cc:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 80038ce:	2300      	movs	r3, #0
{
 80038d0:	4604      	mov	r4, r0
 80038d2:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t count = 0U;
 80038d4:	9303      	str	r3, [sp, #12]
{
 80038d6:	460d      	mov	r5, r1
 80038d8:	4690      	mov	r8, r2
 80038da:	9f12      	ldr	r7, [sp, #72]	@ 0x48
  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7ff f844 	bl	8002968 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80038e4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d004      	beq.n	80038f4 <HAL_I2C_Mem_Read+0x2c>
      return HAL_BUSY;
 80038ea:	2502      	movs	r5, #2
}
 80038ec:	4628      	mov	r0, r5
 80038ee:	b009      	add	sp, #36	@ 0x24
 80038f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f4:	9000      	str	r0, [sp, #0]
 80038f6:	2319      	movs	r3, #25
 80038f8:	2201      	movs	r2, #1
 80038fa:	4620      	mov	r0, r4
 80038fc:	498f      	ldr	r1, [pc, #572]	@ (8003b3c <HAL_I2C_Mem_Read+0x274>)
 80038fe:	f7ff fcbc 	bl	800327a <I2C_WaitOnFlagUntilTimeout>
 8003902:	2800      	cmp	r0, #0
 8003904:	d1f1      	bne.n	80038ea <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8003906:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d0ed      	beq.n	80038ea <HAL_I2C_Mem_Read+0x22>
 800390e:	2301      	movs	r3, #1
 8003910:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003914:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003916:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003918:	681a      	ldr	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800391a:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800391c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800391e:	bf5e      	ittt	pl
 8003920:	681a      	ldrpl	r2, [r3, #0]
 8003922:	f042 0201 	orrpl.w	r2, r2, #1
 8003926:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	6813      	ldr	r3, [r2, #0]
 800392c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003930:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003932:	2322      	movs	r3, #34	@ 0x22
 8003934:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003938:	2340      	movs	r3, #64	@ 0x40
 800393a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800393e:	2300      	movs	r3, #0
 8003940:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8003942:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003944:	4642      	mov	r2, r8
    hi2c->pBuffPtr    = pData;
 8003946:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003948:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800394c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800394e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003950:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003952:	4b7b      	ldr	r3, [pc, #492]	@ (8003b40 <HAL_I2C_Mem_Read+0x278>)
 8003954:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003956:	464b      	mov	r3, r9
 8003958:	e9cd 7600 	strd	r7, r6, [sp]
 800395c:	f7ff fd92 	bl	8003484 <I2C_RequestMemoryRead>
 8003960:	4605      	mov	r5, r0
 8003962:	2800      	cmp	r0, #0
 8003964:	f040 80bc 	bne.w	8003ae0 <HAL_I2C_Mem_Read+0x218>
    if (hi2c->XferSize == 0U)
 8003968:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396a:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800396c:	b9c2      	cbnz	r2, 80039a0 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396e:	9004      	str	r0, [sp, #16]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	9204      	str	r2, [sp, #16]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	9204      	str	r2, [sp, #16]
 8003978:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003980:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003982:	f8df 81c0 	ldr.w	r8, [pc, #448]	@ 8003b44 <HAL_I2C_Mem_Read+0x27c>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003986:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 8003b48 <HAL_I2C_Mem_Read+0x280>
    while (hi2c->XferSize > 0U)
 800398a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d138      	bne.n	8003a02 <HAL_I2C_Mem_Read+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003992:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 800399e:	e7a5      	b.n	80038ec <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 80039a0:	2a01      	cmp	r2, #1
 80039a2:	d111      	bne.n	80039c8 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	9005      	str	r0, [sp, #20]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	9205      	str	r2, [sp, #20]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	9205      	str	r2, [sp, #20]
 80039ba:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039c4:	b662      	cpsie	i
}
 80039c6:	e7dc      	b.n	8003982 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 80039c8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ca:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80039cc:	d10e      	bne.n	80039ec <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039d4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	9006      	str	r0, [sp, #24]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	9206      	str	r2, [sp, #24]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	9206      	str	r2, [sp, #24]
 80039e2:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ea:	e7ea      	b.n	80039c2 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039f0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	9007      	str	r0, [sp, #28]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	9207      	str	r2, [sp, #28]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	9307      	str	r3, [sp, #28]
 80039fe:	9b07      	ldr	r3, [sp, #28]
 8003a00:	e7bf      	b.n	8003982 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d877      	bhi.n	8003af6 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d115      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x16e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0a:	4632      	mov	r2, r6
 8003a0c:	4639      	mov	r1, r7
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff fde6 	bl	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d163      	bne.n	8003ae0 <HAL_I2C_Mem_Read+0x218>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a1e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003a20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a22:	3301      	adds	r3, #1
 8003a24:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003a26:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003a2c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003a34:	e7a9      	b.n	800398a <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8003a36:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	4641      	mov	r1, r8
 8003a40:	4620      	mov	r0, r4
 8003a42:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8003a44:	d119      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x1b2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a46:	f7ff fc18 	bl	800327a <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d148      	bne.n	8003ae0 <HAL_I2C_Mem_Read+0x218>
 8003a4e:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	6822      	ldr	r2, [r4, #0]
 8003a52:	6813      	ldr	r3, [r2, #0]
 8003a54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a58:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a60:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003a62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a64:	3301      	adds	r3, #1
 8003a66:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003a68:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003a6e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a76:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	e7ce      	b.n	8003a18 <HAL_I2C_Mem_Read+0x150>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a7a:	f7ff fbfe 	bl	800327a <I2C_WaitOnFlagUntilTimeout>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d12e      	bne.n	8003ae0 <HAL_I2C_Mem_Read+0x218>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	6813      	ldr	r3, [r2, #0]
 8003a86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a8a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a8c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a94:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a96:	f246 12a8 	movw	r2, #25000	@ 0x61a8
          hi2c->pBuffPtr++;
 8003a9a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003aa0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003aae:	f8d9 3000 	ldr.w	r3, [r9]
 8003ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab6:	2223      	movs	r2, #35	@ 0x23
 8003ab8:	4353      	muls	r3, r2
 8003aba:	9303      	str	r3, [sp, #12]
            count--;
 8003abc:	9b03      	ldr	r3, [sp, #12]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8003ac2:	9b03      	ldr	r3, [sp, #12]
 8003ac4:	b973      	cbnz	r3, 8003ae4 <HAL_I2C_Mem_Read+0x21c>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ac6:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac8:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003aca:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ace:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003ad4:	f042 0220 	orr.w	r2, r2, #32
 8003ad8:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ada:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003adc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8003ae0:	2501      	movs	r5, #1
 8003ae2:	e703      	b.n	80038ec <HAL_I2C_Mem_Read+0x24>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	0750      	lsls	r0, r2, #29
 8003aea:	d5e7      	bpl.n	8003abc <HAL_I2C_Mem_Read+0x1f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e7b1      	b.n	8003a5a <HAL_I2C_Mem_Read+0x192>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af6:	4632      	mov	r2, r6
 8003af8:	4639      	mov	r1, r7
 8003afa:	4620      	mov	r0, r4
 8003afc:	f7ff fd70 	bl	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d1ed      	bne.n	8003ae0 <HAL_I2C_Mem_Read+0x218>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003b0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003b0e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 8003b10:	3301      	adds	r3, #1
 8003b12:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8003b14:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003b16:	3a01      	subs	r2, #1
 8003b18:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8003b1a:	3b01      	subs	r3, #1
        hi2c->XferCount--;
 8003b1c:	8562      	strh	r2, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b1e:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b20:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8003b22:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b24:	6951      	ldr	r1, [r2, #20]
 8003b26:	0749      	lsls	r1, r1, #29
 8003b28:	f57f af2f 	bpl.w	800398a <HAL_I2C_Mem_Read+0xc2>
          if (hi2c->XferSize == 3U)
 8003b2c:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	bf02      	ittt	eq
 8003b30:	6813      	ldreq	r3, [r2, #0]
 8003b32:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 8003b36:	6013      	streq	r3, [r2, #0]
 8003b38:	e76e      	b.n	8003a18 <HAL_I2C_Mem_Read+0x150>
 8003b3a:	bf00      	nop
 8003b3c:	00100002 	.word	0x00100002
 8003b40:	ffff0000 	.word	0xffff0000
 8003b44:	00010004 	.word	0x00010004
 8003b48:	20000000 	.word	0x20000000

08003b4c <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003b4c:	4770      	bx	lr

08003b4e <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003b4e:	4770      	bx	lr

08003b50 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003b50:	4770      	bx	lr

08003b52 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003b52:	4770      	bx	lr

08003b54 <HAL_I2C_AddrCallback>:
}
 8003b54:	4770      	bx	lr

08003b56 <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 8003b56:	4770      	bx	lr

08003b58 <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003b58:	4770      	bx	lr

08003b5a <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b5a:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
{
 8003b5e:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8003b60:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b62:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 8003b64:	b983      	cbnz	r3, 8003b88 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b66:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b68:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b6a:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b6c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b6e:	d105      	bne.n	8003b7c <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8003b74:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003b76:	3302      	adds	r3, #2
      hi2c->EventCount++;
 8003b78:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8003b7a:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003b80:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8003b82:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003b84:	3301      	adds	r3, #1
 8003b86:	e7f7      	b.n	8003b78 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8003b88:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d103      	bne.n	8003b96 <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b8e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003b90:	6802      	ldr	r2, [r0, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	e7f4      	b.n	8003b80 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 8003b96:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d131      	bne.n	8003c00 <I2C_MemoryTransmit_TXE_BTF+0xa6>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b9c:	2a22      	cmp	r2, #34	@ 0x22
 8003b9e:	d105      	bne.n	8003bac <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ba0:	6802      	ldr	r2, [r0, #0]
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba8:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8003baa:	e7ea      	b.n	8003b82 <I2C_MemoryTransmit_TXE_BTF+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bac:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	b16b      	cbz	r3, 8003bce <I2C_MemoryTransmit_TXE_BTF+0x74>
 8003bb2:	2a21      	cmp	r2, #33	@ 0x21
 8003bb4:	d10b      	bne.n	8003bce <I2C_MemoryTransmit_TXE_BTF+0x74>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8003bb8:	6803      	ldr	r3, [r0, #0]
 8003bba:	7812      	ldrb	r2, [r2, #0]
 8003bbc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bbe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8003bc4:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8003bcc:	e7d5      	b.n	8003b7a <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bce:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1d1      	bne.n	8003b7a <I2C_MemoryTransmit_TXE_BTF+0x20>
 8003bd6:	2a21      	cmp	r2, #33	@ 0x21
 8003bd8:	d1cf      	bne.n	8003b7a <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bda:	6801      	ldr	r1, [r0, #0]
 8003bdc:	684a      	ldr	r2, [r1, #4]
 8003bde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003be2:	604a      	str	r2, [r1, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be4:	6801      	ldr	r1, [r0, #0]
 8003be6:	680a      	ldr	r2, [r1, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bec:	600a      	str	r2, [r1, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8003bee:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bf0:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bfa:	f7ff ffad 	bl	8003b58 <HAL_I2C_MemTxCpltCallback>
 8003bfe:	e7bc      	b.n	8003b7a <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003c00:	6803      	ldr	r3, [r0, #0]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 8003c06:	bf44      	itt	mi
 8003c08:	2200      	movmi	r2, #0
 8003c0a:	611a      	strmi	r2, [r3, #16]
}
 8003c0c:	e7b5      	b.n	8003b7a <I2C_MemoryTransmit_TXE_BTF+0x20>

08003c0e <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8003c10:	4770      	bx	lr

08003c12 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8003c12:	4770      	bx	lr

08003c14 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8003c14:	2300      	movs	r3, #0
{
 8003c16:	b507      	push	{r0, r1, r2, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c18:	f246 11a8 	movw	r1, #25000	@ 0x61a8
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c1c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003c1e:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c20:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003c24:	b2da      	uxtb	r2, r3
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c26:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce0 <I2C_DMAAbort+0xcc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c2e:	2123      	movs	r1, #35	@ 0x23
 8003c30:	434b      	muls	r3, r1
 8003c32:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8003c34:	9b01      	ldr	r3, [sp, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d12e      	bne.n	8003c98 <I2C_DMAAbort+0x84>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c3a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003c3c:	f043 0320 	orr.w	r3, r3, #32
 8003c40:	6403      	str	r3, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 8003c42:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003c44:	b10b      	cbz	r3, 8003c4a <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c46:	2100      	movs	r1, #0
 8003c48:	6299      	str	r1, [r3, #40]	@ 0x28
  if (hi2c->hdmarx != NULL)
 8003c4a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003c4c:	b10b      	cbz	r3, 8003c52 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c4e:	2100      	movs	r1, #0
 8003c50:	6299      	str	r1, [r3, #40]	@ 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	6801      	ldr	r1, [r0, #0]
 8003c54:	680b      	ldr	r3, [r1, #0]
 8003c56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c5a:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8003c5c:	2100      	movs	r1, #0
  if (hi2c->hdmatx != NULL)
 8003c5e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  hi2c->XferCount = 0U;
 8003c60:	8541      	strh	r1, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8003c62:	b103      	cbz	r3, 8003c66 <I2C_DMAAbort+0x52>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c64:	6359      	str	r1, [r3, #52]	@ 0x34
  if (hi2c->hdmarx != NULL)
 8003c66:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003c68:	b10b      	cbz	r3, 8003c6e <I2C_DMAAbort+0x5a>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	6359      	str	r1, [r3, #52]	@ 0x34
  __HAL_I2C_DISABLE(hi2c);
 8003c6e:	6801      	ldr	r1, [r0, #0]
 8003c70:	680b      	ldr	r3, [r1, #0]
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c78:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003c7c:	2b60      	cmp	r3, #96	@ 0x60
 8003c7e:	d113      	bne.n	8003ca8 <I2C_DMAAbort+0x94>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c80:	2320      	movs	r3, #32
 8003c82:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c8c:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c8e:	f7ff ffc0 	bl	8003c12 <HAL_I2C_AbortCpltCallback>
}
 8003c92:	b003      	add	sp, #12
 8003c94:	f85d fb04 	ldr.w	pc, [sp], #4
    count--;
 8003c98:	9b01      	ldr	r3, [sp, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c9e:	6803      	ldr	r3, [r0, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	059b      	lsls	r3, r3, #22
 8003ca4:	d4c6      	bmi.n	8003c34 <I2C_DMAAbort+0x20>
 8003ca6:	e7cc      	b.n	8003c42 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ca8:	f002 0328 	and.w	r3, r2, #40	@ 0x28
 8003cac:	2b28      	cmp	r3, #40	@ 0x28
 8003cae:	d110      	bne.n	8003cd2 <I2C_DMAAbort+0xbe>
      __HAL_I2C_ENABLE(hi2c);
 8003cb0:	6801      	ldr	r1, [r0, #0]
 8003cb2:	680a      	ldr	r2, [r1, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	600a      	str	r2, [r1, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cba:	6801      	ldr	r1, [r0, #0]
 8003cbc:	680a      	ldr	r2, [r1, #0]
 8003cbe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cc2:	600a      	str	r2, [r1, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	6302      	str	r2, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cc8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8003ccc:	f7ff ffa0 	bl	8003c10 <HAL_I2C_ErrorCallback>
}
 8003cd0:	e7df      	b.n	8003c92 <I2C_DMAAbort+0x7e>
      hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	2320      	movs	r3, #32
 8003cd4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8003cde:	e7f5      	b.n	8003ccc <I2C_DMAAbort+0xb8>
 8003ce0:	20000000 	.word	0x20000000

08003ce4 <I2C_ITError>:
{
 8003ce4:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003cea:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
{
 8003cee:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cf0:	2a10      	cmp	r2, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf2:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003cf4:	b2d1      	uxtb	r1, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cf6:	d001      	beq.n	8003cfc <I2C_ITError+0x18>
 8003cf8:	2940      	cmp	r1, #64	@ 0x40
 8003cfa:	d115      	bne.n	8003d28 <I2C_ITError+0x44>
 8003cfc:	2b22      	cmp	r3, #34	@ 0x22
 8003cfe:	d113      	bne.n	8003d28 <I2C_ITError+0x44>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d00:	6821      	ldr	r1, [r4, #0]
 8003d02:	680a      	ldr	r2, [r1, #0]
 8003d04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d08:	600a      	str	r2, [r1, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	6852      	ldr	r2, [r2, #4]
 8003d0e:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8003d12:	d106      	bne.n	8003d22 <I2C_ITError+0x3e>
 8003d14:	2b60      	cmp	r3, #96	@ 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8003d16:	bf1e      	ittt	ne
 8003d18:	2320      	movne	r3, #32
 8003d1a:	f884 303d 	strbne.w	r3, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1e:	f884 203e 	strbne.w	r2, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d26:	e007      	b.n	8003d38 <I2C_ITError+0x54>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d28:	f003 0228 	and.w	r2, r3, #40	@ 0x28
 8003d2c:	2a28      	cmp	r2, #40	@ 0x28
 8003d2e:	d1ec      	bne.n	8003d0a <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d34:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8003d40:	d051      	beq.n	8003de6 <I2C_ITError+0x102>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d48:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d4a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003d4c:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	4b38      	ldr	r3, [pc, #224]	@ (8003e34 <I2C_ITError+0x150>)
 8003d54:	d02c      	beq.n	8003db0 <I2C_ITError+0xcc>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d56:	6353      	str	r3, [r2, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d58:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003d5a:	f7ff f915 	bl	8002f88 <HAL_DMA_Abort_IT>
 8003d5e:	b150      	cbz	r0, 8003d76 <I2C_ITError+0x92>
        __HAL_I2C_DISABLE(hi2c);
 8003d60:	6822      	ldr	r2, [r4, #0]
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003d6a:	2320      	movs	r3, #32
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d6c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d72:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003d74:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8003d76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d78:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d7a:	bf1f      	itttt	ne
 8003d7c:	6822      	ldrne	r2, [r4, #0]
 8003d7e:	6853      	ldrne	r3, [r2, #4]
 8003d80:	f423 63e0 	bicne.w	r3, r3, #1792	@ 0x700
 8003d84:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003d86:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d8a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
  CurrentState = hi2c->State;
 8003d8c:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d8e:	0752      	lsls	r2, r2, #29
 8003d90:	d50d      	bpl.n	8003dae <I2C_ITError+0xca>
 8003d92:	2b28      	cmp	r3, #40	@ 0x28
 8003d94:	d10b      	bne.n	8003dae <I2C_ITError+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d96:	4b28      	ldr	r3, [pc, #160]	@ (8003e38 <I2C_ITError+0x154>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d98:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d9c:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d9e:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8003da0:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003da2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003da6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003daa:	f7ff fed4 	bl	8003b56 <HAL_I2C_ListenCpltCallback>
}
 8003dae:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003db0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003db2:	6353      	str	r3, [r2, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003db4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003db6:	f7ff f8e7 	bl	8002f88 <HAL_DMA_Abort_IT>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d0db      	beq.n	8003d76 <I2C_ITError+0x92>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	0651      	lsls	r1, r2, #25
 8003dc4:	d505      	bpl.n	8003dd2 <I2C_ITError+0xee>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003dca:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003dcc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	6813      	ldr	r3, [r2, #0]
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	2320      	movs	r3, #32
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dde:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003de4:	e7c5      	b.n	8003d72 <I2C_ITError+0x8e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003de6:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8003dea:	2960      	cmp	r1, #96	@ 0x60
 8003dec:	d115      	bne.n	8003e1a <I2C_ITError+0x136>
    hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	2120      	movs	r1, #32
 8003df0:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df4:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	0652      	lsls	r2, r2, #25
 8003dfa:	d505      	bpl.n	8003e08 <I2C_ITError+0x124>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e00:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003e02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e04:	3301      	adds	r3, #1
 8003e06:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003e08:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e0a:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003e0c:	6813      	ldr	r3, [r2, #0]
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e14:	f7ff fefd 	bl	8003c12 <HAL_I2C_AbortCpltCallback>
 8003e18:	e7ad      	b.n	8003d76 <I2C_ITError+0x92>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	0650      	lsls	r0, r2, #25
 8003e1e:	d505      	bpl.n	8003e2c <I2C_ITError+0x148>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e24:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003e26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e28:	3301      	adds	r3, #1
 8003e2a:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7ff feef 	bl	8003c10 <HAL_I2C_ErrorCallback>
 8003e32:	e7a0      	b.n	8003d76 <I2C_ITError+0x92>
 8003e34:	08003c15 	.word	0x08003c15
 8003e38:	ffff0000 	.word	0xffff0000

08003e3c <HAL_I2C_EV_IRQHandler>:
{
 8003e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3e:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e40:	6803      	ldr	r3, [r0, #0]
{
 8003e42:	b08f      	sub	sp, #60	@ 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e44:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e46:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e48:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e4c:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e50:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e52:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e54:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e56:	d002      	beq.n	8003e5e <HAL_I2C_EV_IRQHandler+0x22>
 8003e58:	2d40      	cmp	r5, #64	@ 0x40
 8003e5a:	f040 82f4 	bne.w	8004446 <HAL_I2C_EV_IRQHandler+0x60a>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e5e:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e60:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e62:	f010 0f01 	tst.w	r0, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_I2C_EV_IRQHandler+0x3c>
 8003e68:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8003e6c:	d002      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 8003e6e:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 8003e72:	d152      	bne.n	8003f1a <HAL_I2C_EV_IRQHandler+0xde>
}
 8003e74:	b00f      	add	sp, #60	@ 0x3c
 8003e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e78:	0596      	lsls	r6, r2, #22
 8003e7a:	d54e      	bpl.n	8003f1a <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003e7e:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 8003e82:	d10c      	bne.n	8003e9e <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e84:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003e86:	62e2      	str	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e88:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8003e8c:	2a40      	cmp	r2, #64	@ 0x40
 8003e8e:	d111      	bne.n	8003eb4 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8003e90:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003e92:	b952      	cbnz	r2, 8003eaa <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e94:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e96:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e9a:	611a      	str	r2, [r3, #16]
 8003e9c:	e7ea      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003ea0:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	e7ed      	b.n	8003e86 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003eaa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	e7f2      	b.n	8003e9a <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eb4:	6922      	ldr	r2, [r4, #16]
 8003eb6:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003eba:	d11b      	bne.n	8003ef4 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ebc:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003ec0:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ec2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ec4:	d112      	bne.n	8003eec <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ec6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003eca:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ecc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ece:	b10b      	cbz	r3, 8003ed4 <HAL_I2C_EV_IRQHandler+0x98>
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	b92b      	cbnz	r3, 8003ee0 <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ed4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0cc      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0c9      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ee0:	6822      	ldr	r2, [r4, #0]
 8003ee2:	6853      	ldr	r3, [r2, #4]
 8003ee4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ee8:	6053      	str	r3, [r2, #4]
 8003eea:	e7c3      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	e7ea      	b.n	8003eca <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8003ef4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003ef6:	b932      	cbnz	r2, 8003f06 <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ef8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003efa:	11d2      	asrs	r2, r2, #7
 8003efc:	f002 0206 	and.w	r2, r2, #6
 8003f00:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 8003f04:	e7c9      	b.n	8003e9a <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8003f06:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003f08:	2a01      	cmp	r2, #1
 8003f0a:	d1b3      	bne.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f0c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003f0e:	11d2      	asrs	r2, r2, #7
 8003f10:	f002 0206 	and.w	r2, r2, #6
 8003f14:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 8003f18:	e7bf      	b.n	8003e9a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f1a:	0706      	lsls	r6, r0, #28
 8003f1c:	d503      	bpl.n	8003f26 <HAL_I2C_EV_IRQHandler+0xea>
 8003f1e:	0596      	lsls	r6, r2, #22
 8003f20:	d501      	bpl.n	8003f26 <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f22:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003f24:	e7e4      	b.n	8003ef0 <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f26:	0786      	lsls	r6, r0, #30
 8003f28:	f140 80f9 	bpl.w	800411e <HAL_I2C_EV_IRQHandler+0x2e2>
 8003f2c:	0596      	lsls	r6, r2, #22
 8003f2e:	f140 80f6 	bpl.w	800411e <HAL_I2C_EV_IRQHandler+0x2e2>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f32:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f38:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f3a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f3e:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f40:	2822      	cmp	r0, #34	@ 0x22
 8003f42:	f040 80e4 	bne.w	800410e <HAL_I2C_EV_IRQHandler+0x2d2>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f46:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003f48:	b940      	cbnz	r0, 8003f5c <HAL_I2C_EV_IRQHandler+0x120>
 8003f4a:	2940      	cmp	r1, #64	@ 0x40
 8003f4c:	d106      	bne.n	8003f5c <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4e:	9000      	str	r0, [sp, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	9200      	str	r2, [sp, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	9b00      	ldr	r3, [sp, #0]
 8003f5a:	e78b      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f5c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003f5e:	b989      	cbnz	r1, 8003f84 <HAL_I2C_EV_IRQHandler+0x148>
 8003f60:	6920      	ldr	r0, [r4, #16]
 8003f62:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 8003f66:	d10d      	bne.n	8003f84 <HAL_I2C_EV_IRQHandler+0x148>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f68:	9101      	str	r1, [sp, #4]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	9201      	str	r2, [sp, #4]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	9201      	str	r2, [sp, #4]
 8003f72:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f7a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f7c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003f7e:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8003f80:	6523      	str	r3, [r4, #80]	@ 0x50
 8003f82:	e777      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8003f84:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003f86:	b289      	uxth	r1, r1
 8003f88:	b951      	cbnz	r1, 8003fa0 <HAL_I2C_EV_IRQHandler+0x164>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	9102      	str	r1, [sp, #8]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	9202      	str	r2, [sp, #8]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	9202      	str	r2, [sp, #8]
 8003f94:	9a02      	ldr	r2, [sp, #8]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e01b      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x19c>
      else if (hi2c->XferCount == 1U)
 8003fa0:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003fa2:	b289      	uxth	r1, r1
 8003fa4:	2901      	cmp	r1, #1
 8003fa6:	d14d      	bne.n	8004044 <HAL_I2C_EV_IRQHandler+0x208>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fa8:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8003fac:	d11d      	bne.n	8003fea <HAL_I2C_EV_IRQHandler+0x1ae>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb4:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8003fbe:	d00d      	beq.n	8003fdc <HAL_I2C_EV_IRQHandler+0x1a0>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc6:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9303      	str	r3, [sp, #12]
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	9203      	str	r2, [sp, #12]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	9303      	str	r3, [sp, #12]
 8003fd6:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e7d1      	b.n	8003f80 <HAL_I2C_EV_IRQHandler+0x144>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fdc:	9204      	str	r2, [sp, #16]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	9204      	str	r2, [sp, #16]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	9204      	str	r2, [sp, #16]
 8003fe6:	9a04      	ldr	r2, [sp, #16]
 8003fe8:	e7d5      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x15a>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003fea:	2a08      	cmp	r2, #8
 8003fec:	d01d      	beq.n	800402a <HAL_I2C_EV_IRQHandler+0x1ee>
 8003fee:	2a20      	cmp	r2, #32
 8003ff0:	d01b      	beq.n	800402a <HAL_I2C_EV_IRQHandler+0x1ee>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ff2:	2d12      	cmp	r5, #18
 8003ff4:	d10e      	bne.n	8004014 <HAL_I2C_EV_IRQHandler+0x1d8>
 8003ff6:	2a01      	cmp	r2, #1
 8003ff8:	d117      	bne.n	800402a <HAL_I2C_EV_IRQHandler+0x1ee>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004000:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	9305      	str	r3, [sp, #20]
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	9205      	str	r2, [sp, #20]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	9b05      	ldr	r3, [sp, #20]
 8004012:	e7e1      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x19c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004014:	2a10      	cmp	r2, #16
 8004016:	d8f0      	bhi.n	8003ffa <HAL_I2C_EV_IRQHandler+0x1be>
 8004018:	498a      	ldr	r1, [pc, #552]	@ (8004244 <HAL_I2C_EV_IRQHandler+0x408>)
 800401a:	fa41 f202 	asr.w	r2, r1, r2
 800401e:	07d7      	lsls	r7, r2, #31
 8004020:	d4eb      	bmi.n	8003ffa <HAL_I2C_EV_IRQHandler+0x1be>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004028:	e7ea      	b.n	8004000 <HAL_I2C_EV_IRQHandler+0x1c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004030:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004032:	2300      	movs	r3, #0
 8004034:	9306      	str	r3, [sp, #24]
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	9206      	str	r2, [sp, #24]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	9206      	str	r2, [sp, #24]
 8004040:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	e7a8      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x15a>
      else if (hi2c->XferCount == 2U)
 8004044:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8004046:	b289      	uxth	r1, r1
 8004048:	2902      	cmp	r1, #2
 800404a:	d13b      	bne.n	80040c4 <HAL_I2C_EV_IRQHandler+0x288>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800404c:	2a10      	cmp	r2, #16
 800404e:	d803      	bhi.n	8004058 <HAL_I2C_EV_IRQHandler+0x21c>
 8004050:	497d      	ldr	r1, [pc, #500]	@ (8004248 <HAL_I2C_EV_IRQHandler+0x40c>)
 8004052:	40d1      	lsrs	r1, r2
 8004054:	07ce      	lsls	r6, r1, #31
 8004056:	d41a      	bmi.n	800408e <HAL_I2C_EV_IRQHandler+0x252>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 800405e:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004060:	2300      	movs	r3, #0
 8004062:	9307      	str	r3, [sp, #28]
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	6959      	ldr	r1, [r3, #20]
 8004068:	9107      	str	r1, [sp, #28]
 800406a:	6999      	ldr	r1, [r3, #24]
 800406c:	9107      	str	r1, [sp, #28]
 800406e:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004070:	6819      	ldr	r1, [r3, #0]
 8004072:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8004076:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	050d      	lsls	r5, r1, #20
 800407e:	d5ab      	bpl.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x19c>
 8004080:	2a20      	cmp	r2, #32
 8004082:	d81c      	bhi.n	80040be <HAL_I2C_EV_IRQHandler+0x282>
 8004084:	2a07      	cmp	r2, #7
 8004086:	d80f      	bhi.n	80040a8 <HAL_I2C_EV_IRQHandler+0x26c>
 8004088:	2a01      	cmp	r2, #1
 800408a:	d1a5      	bne.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x19c>
 800408c:	e012      	b.n	80040b4 <HAL_I2C_EV_IRQHandler+0x278>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8004094:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004096:	2300      	movs	r3, #0
 8004098:	9308      	str	r3, [sp, #32]
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	6959      	ldr	r1, [r3, #20]
 800409e:	9108      	str	r1, [sp, #32]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	9308      	str	r3, [sp, #32]
 80040a4:	9b08      	ldr	r3, [sp, #32]
 80040a6:	e7e7      	b.n	8004078 <HAL_I2C_EV_IRQHandler+0x23c>
 80040a8:	f1a2 0108 	sub.w	r1, r2, #8
 80040ac:	4a67      	ldr	r2, [pc, #412]	@ (800424c <HAL_I2C_EV_IRQHandler+0x410>)
 80040ae:	40ca      	lsrs	r2, r1
 80040b0:	07d0      	lsls	r0, r2, #31
 80040b2:	d591      	bpl.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x19c>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040ba:	605a      	str	r2, [r3, #4]
 80040bc:	e78c      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x19c>
 80040be:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80040c2:	e7e2      	b.n	800408a <HAL_I2C_EV_IRQHandler+0x24e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c4:	6819      	ldr	r1, [r3, #0]
 80040c6:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80040ca:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	0509      	lsls	r1, r1, #20
 80040d2:	d505      	bpl.n	80040e0 <HAL_I2C_EV_IRQHandler+0x2a4>
 80040d4:	2a20      	cmp	r2, #32
 80040d6:	d817      	bhi.n	8004108 <HAL_I2C_EV_IRQHandler+0x2cc>
 80040d8:	2a07      	cmp	r2, #7
 80040da:	d80a      	bhi.n	80040f2 <HAL_I2C_EV_IRQHandler+0x2b6>
 80040dc:	2a01      	cmp	r2, #1
 80040de:	d00e      	beq.n	80040fe <HAL_I2C_EV_IRQHandler+0x2c2>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e0:	2300      	movs	r3, #0
 80040e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040f0:	e772      	b.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x19c>
 80040f2:	f1a2 0108 	sub.w	r1, r2, #8
 80040f6:	4a55      	ldr	r2, [pc, #340]	@ (800424c <HAL_I2C_EV_IRQHandler+0x410>)
 80040f8:	40ca      	lsrs	r2, r1
 80040fa:	07d2      	lsls	r2, r2, #31
 80040fc:	d5f0      	bpl.n	80040e0 <HAL_I2C_EV_IRQHandler+0x2a4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	e7eb      	b.n	80040e0 <HAL_I2C_EV_IRQHandler+0x2a4>
 8004108:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 800410c:	e7e7      	b.n	80040de <HAL_I2C_EV_IRQHandler+0x2a2>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2200      	movs	r2, #0
 8004110:	920a      	str	r2, [sp, #40]	@ 0x28
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	920a      	str	r2, [sp, #40]	@ 0x28
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	930a      	str	r3, [sp, #40]	@ 0x28
 800411a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800411c:	e6aa      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800411e:	077f      	lsls	r7, r7, #29
 8004120:	f140 8096 	bpl.w	8004250 <HAL_I2C_EV_IRQHandler+0x414>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004124:	685e      	ldr	r6, [r3, #4]
 8004126:	0536      	lsls	r6, r6, #20
 8004128:	f53f aea4 	bmi.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800412c:	0607      	lsls	r7, r0, #24
 800412e:	f000 0604 	and.w	r6, r0, #4
 8004132:	d53f      	bpl.n	80041b4 <HAL_I2C_EV_IRQHandler+0x378>
 8004134:	0550      	lsls	r0, r2, #21
 8004136:	d53d      	bpl.n	80041b4 <HAL_I2C_EV_IRQHandler+0x378>
 8004138:	2e00      	cmp	r6, #0
 800413a:	d13e      	bne.n	80041ba <HAL_I2C_EV_IRQHandler+0x37e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800413c:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004140:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004142:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004146:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004148:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800414a:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800414c:	b9c5      	cbnz	r5, 8004180 <HAL_I2C_EV_IRQHandler+0x344>
 800414e:	2a21      	cmp	r2, #33	@ 0x21
 8004150:	d118      	bne.n	8004184 <HAL_I2C_EV_IRQHandler+0x348>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004152:	2808      	cmp	r0, #8
 8004154:	d05a      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x3d0>
 8004156:	2820      	cmp	r0, #32
 8004158:	d058      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x3d0>
 800415a:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 800415e:	d055      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x3d0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004166:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004168:	2311      	movs	r3, #17
 800416a:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800416c:	2300      	movs	r3, #0
 800416e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004172:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004174:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8004176:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800417a:	f7ff fce7 	bl	8003b4c <HAL_I2C_MasterTxCpltCallback>
 800417e:	e679      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004180:	2a21      	cmp	r2, #33	@ 0x21
 8004182:	d005      	beq.n	8004190 <HAL_I2C_EV_IRQHandler+0x354>
 8004184:	2940      	cmp	r1, #64	@ 0x40
 8004186:	f47f ae75 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800418a:	2a22      	cmp	r2, #34	@ 0x22
 800418c:	f47f ae72 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8004190:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004192:	b292      	uxth	r2, r2
 8004194:	b922      	cbnz	r2, 80041a0 <HAL_I2C_EV_IRQHandler+0x364>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e669      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041a0:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 80041a4:	2a40      	cmp	r2, #64	@ 0x40
 80041a6:	d116      	bne.n	80041d6 <HAL_I2C_EV_IRQHandler+0x39a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041a8:	4620      	mov	r0, r4
}
 80041aa:	b00f      	add	sp, #60	@ 0x3c
 80041ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041b0:	f7ff bcd3 	b.w	8003b5a <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b4:	2e00      	cmp	r6, #0
 80041b6:	f43f ae5d 	beq.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 80041ba:	0597      	lsls	r7, r2, #22
 80041bc:	f57f ae5a 	bpl.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80041c0:	2921      	cmp	r1, #33	@ 0x21
 80041c2:	d13b      	bne.n	800423c <HAL_I2C_EV_IRQHandler+0x400>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041c4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041c6:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80041ca:	2a21      	cmp	r2, #33	@ 0x21
 80041cc:	f47f ae52 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80041d0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80041d2:	b292      	uxth	r2, r2
 80041d4:	b152      	cbz	r2, 80041ec <HAL_I2C_EV_IRQHandler+0x3b0>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 80041dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041de:	3301      	adds	r3, #1
 80041e0:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80041e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 80041ea:	e643      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041ec:	2908      	cmp	r1, #8
 80041ee:	d00d      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x3d0>
 80041f0:	2920      	cmp	r1, #32
 80041f2:	d00b      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x3d0>
 80041f4:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 80041f8:	d008      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x3d0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004200:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004202:	2311      	movs	r3, #17
 8004204:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 800420a:	e7b2      	b.n	8004172 <HAL_I2C_EV_IRQHandler+0x336>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800420c:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 800420e:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004210:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004214:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	6813      	ldr	r3, [r2, #0]
 800421a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800421e:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004220:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004222:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004224:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004226:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800422a:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800422e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004232:	2a40      	cmp	r2, #64	@ 0x40
 8004234:	d1a1      	bne.n	800417a <HAL_I2C_EV_IRQHandler+0x33e>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004236:	f7ff fc8f 	bl	8003b58 <HAL_I2C_MemTxCpltCallback>
 800423a:	e61b      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800423c:	2d40      	cmp	r5, #64	@ 0x40
 800423e:	f47f ae19 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 8004242:	e7b1      	b.n	80041a8 <HAL_I2C_EV_IRQHandler+0x36c>
 8004244:	fffeffeb 	.word	0xfffeffeb
 8004248:	00010014 	.word	0x00010014
 800424c:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004250:	6859      	ldr	r1, [r3, #4]
 8004252:	050e      	lsls	r6, r1, #20
 8004254:	f53f ae0e 	bmi.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004258:	0645      	lsls	r5, r0, #25
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425a:	f000 0104 	and.w	r1, r0, #4
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425e:	f140 8088 	bpl.w	8004372 <HAL_I2C_EV_IRQHandler+0x536>
 8004262:	0550      	lsls	r0, r2, #21
 8004264:	f140 8085 	bpl.w	8004372 <HAL_I2C_EV_IRQHandler+0x536>
 8004268:	2900      	cmp	r1, #0
 800426a:	f040 8085 	bne.w	8004378 <HAL_I2C_EV_IRQHandler+0x53c>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800426e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8004272:	2a22      	cmp	r2, #34	@ 0x22
 8004274:	f47f adfe 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
    CurrentXferOptions = hi2c->XferOptions;
 8004278:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 800427a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800427c:	b292      	uxth	r2, r2
    if (tmp > 3U)
 800427e:	2a03      	cmp	r2, #3
 8004280:	d913      	bls.n	80042aa <HAL_I2C_EV_IRQHandler+0x46e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004286:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004288:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800428a:	3301      	adds	r3, #1
 800428c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800428e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004290:	3b01      	subs	r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8004296:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b03      	cmp	r3, #3
 800429c:	f47f adea 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042a0:	6822      	ldr	r2, [r4, #0]
 80042a2:	6853      	ldr	r3, [r2, #4]
 80042a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042a8:	e61e      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0xac>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80042aa:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80042ac:	2d02      	cmp	r5, #2
 80042ae:	f43f af72 	beq.w	8004196 <HAL_I2C_EV_IRQHandler+0x35a>
 80042b2:	2a01      	cmp	r2, #1
 80042b4:	f63f af6f 	bhi.w	8004196 <HAL_I2C_EV_IRQHandler+0x35a>
  __IO uint32_t count = 0U;
 80042b8:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80042ba:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80042be:	4a7b      	ldr	r2, [pc, #492]	@ (80044ac <HAL_I2C_EV_IRQHandler+0x670>)
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	fbb2 f2f1 	udiv	r2, r2, r1
 80042c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042ca:	920b      	str	r2, [sp, #44]	@ 0x2c
    count--;
 80042cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80042ce:	3a01      	subs	r2, #1
 80042d0:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 80042d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80042d4:	b9d9      	cbnz	r1, 800430e <HAL_I2C_EV_IRQHandler+0x4d2>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        HAL_I2C_ErrorCallback(hi2c);
 80042d8:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	f042 0220 	orr.w	r2, r2, #32
 80042de:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042e6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042f2:	3301      	adds	r3, #1
 80042f4:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80042f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	2320      	movs	r3, #32
 8004300:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004304:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004308:	f7ff fc82 	bl	8003c10 <HAL_I2C_ErrorCallback>
 800430c:	e5b2      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 8004314:	d1da      	bne.n	80042cc <HAL_I2C_EV_IRQHandler+0x490>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 800431c:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800431e:	6821      	ldr	r1, [r4, #0]
 8004320:	684b      	ldr	r3, [r1, #4]
 8004322:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004326:	604b      	str	r3, [r1, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	6919      	ldr	r1, [r3, #16]
 800432c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800432e:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8004330:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004332:	3301      	adds	r3, #1
 8004334:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8004336:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004338:	3b01      	subs	r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800433e:	2320      	movs	r3, #32
 8004340:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004344:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	d104      	bne.n	800435a <HAL_I2C_EV_IRQHandler+0x51e>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004350:	6322      	str	r2, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004352:	4620      	mov	r0, r4
 8004354:	f7ff fc5b 	bl	8003c0e <HAL_I2C_MemRxCpltCallback>
 8004358:	e58c      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800435a:	2808      	cmp	r0, #8
 800435c:	d001      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0x526>
 800435e:	2820      	cmp	r0, #32
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004360:	d101      	bne.n	8004366 <HAL_I2C_EV_IRQHandler+0x52a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_I2C_EV_IRQHandler+0x52c>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004366:	2312      	movs	r3, #18
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004368:	4620      	mov	r0, r4
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800436a:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800436c:	f7ff fbef 	bl	8003b4e <HAL_I2C_MasterRxCpltCallback>
 8004370:	e580      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004372:	2900      	cmp	r1, #0
 8004374:	f43f ad7e 	beq.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 8004378:	0592      	lsls	r2, r2, #22
 800437a:	f57f ad7b 	bpl.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800437e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 8004380:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8004382:	b289      	uxth	r1, r1
 8004384:	2904      	cmp	r1, #4
 8004386:	d108      	bne.n	800439a <HAL_I2C_EV_IRQHandler+0x55e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438e:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	6823      	ldr	r3, [r4, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	e720      	b.n	80041dc <HAL_I2C_EV_IRQHandler+0x3a0>
  else if (hi2c->XferCount == 3U)
 800439a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 800439c:	b289      	uxth	r1, r1
 800439e:	2903      	cmp	r1, #3
 80043a0:	d10d      	bne.n	80043be <HAL_I2C_EV_IRQHandler+0x582>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043a2:	6859      	ldr	r1, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043a4:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043a6:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80043aa:	6059      	str	r1, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043ac:	d0f0      	beq.n	8004390 <HAL_I2C_EV_IRQHandler+0x554>
 80043ae:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b0:	bf1f      	itttt	ne
 80043b2:	6822      	ldrne	r2, [r4, #0]
 80043b4:	6813      	ldrne	r3, [r2, #0]
 80043b6:	f423 6380 	bicne.w	r3, r3, #1024	@ 0x400
 80043ba:	6013      	strne	r3, [r2, #0]
 80043bc:	e7e8      	b.n	8004390 <HAL_I2C_EV_IRQHandler+0x554>
  else if (hi2c->XferCount == 2U)
 80043be:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80043c0:	b289      	uxth	r1, r1
 80043c2:	2902      	cmp	r1, #2
 80043c4:	d1e5      	bne.n	8004392 <HAL_I2C_EV_IRQHandler+0x556>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043c6:	2a04      	cmp	r2, #4
 80043c8:	d035      	beq.n	8004436 <HAL_I2C_EV_IRQHandler+0x5fa>
 80043ca:	d807      	bhi.n	80043dc <HAL_I2C_EV_IRQHandler+0x5a0>
 80043cc:	2a01      	cmp	r2, #1
 80043ce:	d007      	beq.n	80043e0 <HAL_I2C_EV_IRQHandler+0x5a4>
 80043d0:	2a02      	cmp	r2, #2
 80043d2:	d030      	beq.n	8004436 <HAL_I2C_EV_IRQHandler+0x5fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80043da:	e004      	b.n	80043e6 <HAL_I2C_EV_IRQHandler+0x5aa>
 80043dc:	2a10      	cmp	r2, #16
 80043de:	d1f9      	bne.n	80043d4 <HAL_I2C_EV_IRQHandler+0x598>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e0:	6819      	ldr	r1, [r3, #0]
 80043e2:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	6019      	str	r1, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	6919      	ldr	r1, [r3, #16]
 80043ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80043ee:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80043f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80043f2:	1c4b      	adds	r3, r1, #1
 80043f4:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80043f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 8004404:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004406:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8004408:	3301      	adds	r3, #1
 800440a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 800440c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800440e:	3b01      	subs	r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004414:	684b      	ldr	r3, [r1, #4]
 8004416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800441c:	2320      	movs	r3, #32
 800441e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004422:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004426:	2b40      	cmp	r3, #64	@ 0x40
 8004428:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800442c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004430:	d105      	bne.n	800443e <HAL_I2C_EV_IRQHandler+0x602>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004432:	6323      	str	r3, [r4, #48]	@ 0x30
 8004434:	e78d      	b.n	8004352 <HAL_I2C_EV_IRQHandler+0x516>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004436:	6819      	ldr	r1, [r3, #0]
 8004438:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 800443c:	e7d3      	b.n	80043e6 <HAL_I2C_EV_IRQHandler+0x5aa>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800443e:	2a08      	cmp	r2, #8
 8004440:	d08f      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0x526>
 8004442:	2a20      	cmp	r2, #32
 8004444:	e78c      	b.n	8004360 <HAL_I2C_EV_IRQHandler+0x524>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004446:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004448:	b310      	cbz	r0, 8004490 <HAL_I2C_EV_IRQHandler+0x654>
  uint32_t sr2itflags               = 0U;
 800444a:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800444c:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800444e:	0787      	lsls	r7, r0, #30
 8004450:	d52e      	bpl.n	80044b0 <HAL_I2C_EV_IRQHandler+0x674>
 8004452:	0596      	lsls	r6, r2, #22
 8004454:	d52c      	bpl.n	80044b0 <HAL_I2C_EV_IRQHandler+0x674>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004456:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004458:	b102      	cbz	r2, 800445c <HAL_I2C_EV_IRQHandler+0x620>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800445a:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800445c:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8004460:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8004464:	2a28      	cmp	r2, #40	@ 0x28
 8004466:	d116      	bne.n	8004496 <HAL_I2C_EV_IRQHandler+0x65a>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004468:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800446a:	062f      	lsls	r7, r5, #24
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800446c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004470:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 8004472:	f04f 0300 	mov.w	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004476:	f085 0104 	eor.w	r1, r5, #4
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800447a:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800447c:	bf54      	ite	pl
 800447e:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004480:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004482:	f3c1 0180 	ubfx	r1, r1, #2, #1
    __HAL_UNLOCK(hi2c);
 8004486:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800448a:	f7ff fb63 	bl	8003b54 <HAL_I2C_AddrCallback>
 800448e:	e4f1      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004490:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004492:	6958      	ldr	r0, [r3, #20]
 8004494:	e7db      	b.n	800444e <HAL_I2C_EV_IRQHandler+0x612>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004496:	2200      	movs	r2, #0
 8004498:	920c      	str	r2, [sp, #48]	@ 0x30
 800449a:	6959      	ldr	r1, [r3, #20]
 800449c:	910c      	str	r1, [sp, #48]	@ 0x30
 800449e:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 80044a0:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80044a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044a8:	e4e4      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 80044aa:	bf00      	nop
 80044ac:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b0:	06c6      	lsls	r6, r0, #27
 80044b2:	f140 80b8 	bpl.w	8004626 <HAL_I2C_EV_IRQHandler+0x7ea>
 80044b6:	0595      	lsls	r5, r2, #22
 80044b8:	f140 80b5 	bpl.w	8004626 <HAL_I2C_EV_IRQHandler+0x7ea>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044bc:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c0:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044c2:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044c8:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	920d      	str	r2, [sp, #52]	@ 0x34
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044dc:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e0:	6813      	ldr	r3, [r2, #0]
 80044e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044e6:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	0510      	lsls	r0, r2, #20
 80044ee:	d522      	bpl.n	8004536 <HAL_I2C_EV_IRQHandler+0x6fa>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044f0:	f005 02f7 	and.w	r2, r5, #247	@ 0xf7
 80044f4:	2a22      	cmp	r2, #34	@ 0x22
 80044f6:	d14c      	bne.n	8004592 <HAL_I2C_EV_IRQHandler+0x756>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80044f8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	6852      	ldr	r2, [r2, #4]
 80044fe:	b292      	uxth	r2, r2
 8004500:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8004502:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004504:	b292      	uxth	r2, r2
 8004506:	b11a      	cbz	r2, 8004510 <HAL_I2C_EV_IRQHandler+0x6d4>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004508:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800450a:	f042 0204 	orr.w	r2, r2, #4
 800450e:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004516:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004518:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800451a:	f7fe fd7d 	bl	8003018 <HAL_DMA_GetState>
 800451e:	2801      	cmp	r0, #1
 8004520:	d009      	beq.n	8004536 <HAL_I2C_EV_IRQHandler+0x6fa>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004522:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004524:	4a7a      	ldr	r2, [pc, #488]	@ (8004710 <HAL_I2C_EV_IRQHandler+0x8d4>)
 8004526:	635a      	str	r2, [r3, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004528:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800452a:	f7fe fd2d 	bl	8002f88 <HAL_DMA_Abort_IT>
 800452e:	b110      	cbz	r0, 8004536 <HAL_I2C_EV_IRQHandler+0x6fa>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004530:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004532:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004534:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8004536:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	b313      	cbz	r3, 8004582 <HAL_I2C_EV_IRQHandler+0x746>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	0751      	lsls	r1, r2, #29
 8004542:	d509      	bpl.n	8004558 <HAL_I2C_EV_IRQHandler+0x71c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004548:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800454a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800454c:	3301      	adds	r3, #1
 800454e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004550:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004552:	3b01      	subs	r3, #1
 8004554:	b29b      	uxth	r3, r3
 8004556:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	0652      	lsls	r2, r2, #25
 800455e:	d509      	bpl.n	8004574 <HAL_I2C_EV_IRQHandler+0x738>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004564:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004566:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004568:	3301      	adds	r3, #1
 800456a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800456c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800456e:	3b01      	subs	r3, #1
 8004570:	b29b      	uxth	r3, r3
 8004572:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004574:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	b11b      	cbz	r3, 8004582 <HAL_I2C_EV_IRQHandler+0x746>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800457a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800457c:	f043 0304 	orr.w	r3, r3, #4
 8004580:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004582:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004584:	b323      	cbz	r3, 80045d0 <HAL_I2C_EV_IRQHandler+0x794>
    I2C_ITError(hi2c);
 8004586:	4620      	mov	r0, r4
}
 8004588:	b00f      	add	sp, #60	@ 0x3c
 800458a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 800458e:	f7ff bba9 	b.w	8003ce4 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004592:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	6852      	ldr	r2, [r2, #4]
 8004598:	b292      	uxth	r2, r2
 800459a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 800459c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800459e:	b292      	uxth	r2, r2
 80045a0:	b11a      	cbz	r2, 80045aa <HAL_I2C_EV_IRQHandler+0x76e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80045a4:	f042 0204 	orr.w	r2, r2, #4
 80045a8:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045b0:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045b2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80045b4:	f7fe fd30 	bl	8003018 <HAL_DMA_GetState>
 80045b8:	2801      	cmp	r0, #1
 80045ba:	d0bc      	beq.n	8004536 <HAL_I2C_EV_IRQHandler+0x6fa>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045be:	4a54      	ldr	r2, [pc, #336]	@ (8004710 <HAL_I2C_EV_IRQHandler+0x8d4>)
 80045c0:	635a      	str	r2, [r3, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045c2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80045c4:	f7fe fce0 	bl	8002f88 <HAL_DMA_Abort_IT>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d0b4      	beq.n	8004536 <HAL_I2C_EV_IRQHandler+0x6fa>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045cc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80045ce:	e7b0      	b.n	8004532 <HAL_I2C_EV_IRQHandler+0x6f6>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045d0:	2d2a      	cmp	r5, #42	@ 0x2a
 80045d2:	d106      	bne.n	80045e2 <HAL_I2C_EV_IRQHandler+0x7a6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045d4:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045d6:	2328      	movs	r3, #40	@ 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045d8:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045da:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045de:	f7ff fab8 	bl	8003b52 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045e2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80045e6:	2b28      	cmp	r3, #40	@ 0x28
 80045e8:	d10c      	bne.n	8004604 <HAL_I2C_EV_IRQHandler+0x7c8>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004714 <HAL_I2C_EV_IRQHandler+0x8d8>)
      hi2c->State = HAL_I2C_STATE_READY;
 80045ec:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80045f0:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 80045f2:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 80045f4:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045f6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80045fe:	f7ff faaa 	bl	8003b56 <HAL_I2C_ListenCpltCallback>
 8004602:	e437      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004604:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004606:	2b22      	cmp	r3, #34	@ 0x22
 8004608:	d002      	beq.n	8004610 <HAL_I2C_EV_IRQHandler+0x7d4>
 800460a:	2d22      	cmp	r5, #34	@ 0x22
 800460c:	f47f ac32 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004610:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004612:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004616:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800461a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800461e:	4620      	mov	r0, r4
 8004620:	f7ff fa97 	bl	8003b52 <HAL_I2C_SlaveRxCpltCallback>
 8004624:	e426      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004626:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 800462a:	2921      	cmp	r1, #33	@ 0x21
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800462c:	f000 0504 	and.w	r5, r0, #4
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004630:	d138      	bne.n	80046a4 <HAL_I2C_EV_IRQHandler+0x868>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004632:	0607      	lsls	r7, r0, #24
 8004634:	d52a      	bpl.n	800468c <HAL_I2C_EV_IRQHandler+0x850>
 8004636:	0556      	lsls	r6, r2, #21
 8004638:	d528      	bpl.n	800468c <HAL_I2C_EV_IRQHandler+0x850>
 800463a:	bb55      	cbnz	r5, 8004692 <HAL_I2C_EV_IRQHandler+0x856>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800463c:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 8004640:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004642:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8004644:	b292      	uxth	r2, r2
 8004646:	2a00      	cmp	r2, #0
 8004648:	f43f ac14 	beq.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	611a      	str	r2, [r3, #16]
    hi2c->pBuffPtr++;
 8004652:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004654:	3301      	adds	r3, #1
 8004656:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004658:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800465a:	3b01      	subs	r3, #1
 800465c:	b29b      	uxth	r3, r3
 800465e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004660:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	f47f ac05 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 800466a:	2829      	cmp	r0, #41	@ 0x29
 800466c:	f47f ac02 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004670:	6822      	ldr	r2, [r4, #0]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004672:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004674:	6853      	ldr	r3, [r2, #4]
 8004676:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800467a:	6053      	str	r3, [r2, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800467c:	2328      	movs	r3, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800467e:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004680:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004684:	f7ff fa64 	bl	8003b50 <HAL_I2C_SlaveTxCpltCallback>
 8004688:	f7ff bbf4 	b.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800468c:	2d00      	cmp	r5, #0
 800468e:	f43f abf1 	beq.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 8004692:	0595      	lsls	r5, r2, #22
 8004694:	f57f abee 	bpl.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8004698:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800469a:	b292      	uxth	r2, r2
 800469c:	2a00      	cmp	r2, #0
 800469e:	f43f abe9 	beq.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 80046a2:	e598      	b.n	80041d6 <HAL_I2C_EV_IRQHandler+0x39a>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046a4:	0640      	lsls	r0, r0, #25
 80046a6:	d527      	bpl.n	80046f8 <HAL_I2C_EV_IRQHandler+0x8bc>
 80046a8:	0551      	lsls	r1, r2, #21
 80046aa:	d525      	bpl.n	80046f8 <HAL_I2C_EV_IRQHandler+0x8bc>
 80046ac:	bb3d      	cbnz	r5, 80046fe <HAL_I2C_EV_IRQHandler+0x8c2>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ae:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 80046b2:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046b4:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 80046b6:	b289      	uxth	r1, r1
 80046b8:	2900      	cmp	r1, #0
 80046ba:	f43f abdb 	beq.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046be:	6919      	ldr	r1, [r3, #16]
 80046c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80046c2:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80046c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80046c6:	3301      	adds	r3, #1
 80046c8:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80046ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f47f abcc 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 80046dc:	2a2a      	cmp	r2, #42	@ 0x2a
 80046de:	f47f abc9 	bne.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	6853      	ldr	r3, [r2, #4]
 80046e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046ea:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046ec:	2322      	movs	r3, #34	@ 0x22
 80046ee:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046f0:	2328      	movs	r3, #40	@ 0x28
 80046f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 80046f6:	e792      	b.n	800461e <HAL_I2C_EV_IRQHandler+0x7e2>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f8:	2d00      	cmp	r5, #0
 80046fa:	f43f abbb 	beq.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 80046fe:	0592      	lsls	r2, r2, #22
 8004700:	f57f abb8 	bpl.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8004704:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004706:	b292      	uxth	r2, r2
 8004708:	2a00      	cmp	r2, #0
 800470a:	f43f abb3 	beq.w	8003e74 <HAL_I2C_EV_IRQHandler+0x38>
 800470e:	e640      	b.n	8004392 <HAL_I2C_EV_IRQHandler+0x556>
 8004710:	08003c15 	.word	0x08003c15
 8004714:	ffff0000 	.word	0xffff0000

08004718 <HAL_I2C_ER_IRQHandler>:
{
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800471a:	6803      	ldr	r3, [r0, #0]
{
 800471c:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800471e:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004720:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004722:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004726:	f417 7580 	ands.w	r5, r7, #256	@ 0x100
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800472a:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800472c:	d00b      	beq.n	8004746 <HAL_I2C_ER_IRQHandler+0x2e>
 800472e:	f416 7580 	ands.w	r5, r6, #256	@ 0x100
 8004732:	d008      	beq.n	8004746 <HAL_I2C_ER_IRQHandler+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004734:	f46f 7180 	mvn.w	r1, #256	@ 0x100
    error |= HAL_I2C_ERROR_BERR;
 8004738:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800473a:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800473c:	6801      	ldr	r1, [r0, #0]
 800473e:	680b      	ldr	r3, [r1, #0]
 8004740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004744:	600b      	str	r3, [r1, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004746:	05bb      	lsls	r3, r7, #22
 8004748:	d507      	bpl.n	800475a <HAL_I2C_ER_IRQHandler+0x42>
 800474a:	05f0      	lsls	r0, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800474c:	bf41      	itttt	mi
 800474e:	f46f 7100 	mvnmi.w	r1, #512	@ 0x200
 8004752:	6823      	ldrmi	r3, [r4, #0]
    error |= HAL_I2C_ERROR_ARLO;
 8004754:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004758:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800475a:	0579      	lsls	r1, r7, #21
 800475c:	d539      	bpl.n	80047d2 <HAL_I2C_ER_IRQHandler+0xba>
 800475e:	05f3      	lsls	r3, r6, #23
 8004760:	d537      	bpl.n	80047d2 <HAL_I2C_ER_IRQHandler+0xba>
    tmp2 = hi2c->XferCount;
 8004762:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    tmp3 = hi2c->State;
 8004764:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004768:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 800476a:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 800476e:	6823      	ldr	r3, [r4, #0]
    tmp2 = hi2c->XferCount;
 8004770:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 8004772:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004774:	d164      	bne.n	8004840 <HAL_I2C_ER_IRQHandler+0x128>
 8004776:	2800      	cmp	r0, #0
 8004778:	d162      	bne.n	8004840 <HAL_I2C_ER_IRQHandler+0x128>
 800477a:	f001 00f7 	and.w	r0, r1, #247	@ 0xf7
 800477e:	2821      	cmp	r0, #33	@ 0x21
 8004780:	d004      	beq.n	800478c <HAL_I2C_ER_IRQHandler+0x74>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004782:	2928      	cmp	r1, #40	@ 0x28
 8004784:	d15c      	bne.n	8004840 <HAL_I2C_ER_IRQHandler+0x128>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004786:	f1bc 0f21 	cmp.w	ip, #33	@ 0x21
 800478a:	d159      	bne.n	8004840 <HAL_I2C_ER_IRQHandler+0x128>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800478c:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004790:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004792:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004794:	2908      	cmp	r1, #8
 8004796:	d001      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0x84>
 8004798:	2920      	cmp	r1, #32
 800479a:	d12c      	bne.n	80047f6 <HAL_I2C_ER_IRQHandler+0xde>
 800479c:	2a28      	cmp	r2, #40	@ 0x28
 800479e:	d12a      	bne.n	80047f6 <HAL_I2C_ER_IRQHandler+0xde>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a0:	4a30      	ldr	r2, [pc, #192]	@ (8004864 <HAL_I2C_ER_IRQHandler+0x14c>)
    HAL_I2C_ListenCpltCallback(hi2c);
 80047a2:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a4:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047ac:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	6813      	ldr	r3, [r2, #0]
 80047ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047be:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80047c0:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80047c2:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80047c4:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047c6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047ca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80047ce:	f7ff f9c2 	bl	8003b56 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047d2:	053a      	lsls	r2, r7, #20
 80047d4:	d543      	bpl.n	800485e <HAL_I2C_ER_IRQHandler+0x146>
 80047d6:	05f3      	lsls	r3, r6, #23
 80047d8:	d541      	bpl.n	800485e <HAL_I2C_ER_IRQHandler+0x146>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047da:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80047de:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 80047e0:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047e4:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 80047e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 80047e8:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 80047ea:	432b      	orrs	r3, r5
 80047ec:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80047ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80047f2:	f7ff ba77 	b.w	8003ce4 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047f6:	2a21      	cmp	r2, #33	@ 0x21
 80047f8:	d11e      	bne.n	8004838 <HAL_I2C_ER_IRQHandler+0x120>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047fa:	491a      	ldr	r1, [pc, #104]	@ (8004864 <HAL_I2C_ER_IRQHandler+0x14c>)
 80047fc:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047fe:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004800:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004802:	2220      	movs	r2, #32
 8004804:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004808:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004812:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004814:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	6813      	ldr	r3, [r2, #0]
 8004820:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004824:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	0610      	lsls	r0, r2, #24
    hi2c->Instance->DR = 0x00U;
 800482c:	bf48      	it	mi
 800482e:	6119      	strmi	r1, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004830:	4620      	mov	r0, r4
 8004832:	f7ff f98d 	bl	8003b50 <HAL_I2C_SlaveTxCpltCallback>
 8004836:	e7cc      	b.n	80047d2 <HAL_I2C_ER_IRQHandler+0xba>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004838:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800483c:	615a      	str	r2, [r3, #20]
 800483e:	e7c8      	b.n	80047d2 <HAL_I2C_ER_IRQHandler+0xba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004844:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004846:	6159      	str	r1, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004848:	d001      	beq.n	800484e <HAL_I2C_ER_IRQHandler+0x136>
 800484a:	2a40      	cmp	r2, #64	@ 0x40
 800484c:	d104      	bne.n	8004858 <HAL_I2C_ER_IRQHandler+0x140>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	6813      	ldr	r3, [r2, #0]
 8004852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004856:	6013      	str	r3, [r2, #0]
      error |= HAL_I2C_ERROR_AF;
 8004858:	f045 0504 	orr.w	r5, r5, #4
 800485c:	e7b9      	b.n	80047d2 <HAL_I2C_ER_IRQHandler+0xba>
  if (error != HAL_I2C_ERROR_NONE)
 800485e:	2d00      	cmp	r5, #0
 8004860:	d1c1      	bne.n	80047e6 <HAL_I2C_ER_IRQHandler+0xce>
}
 8004862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004864:	ffff0000 	.word	0xffff0000

08004868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800486c:	4604      	mov	r4, r0
 800486e:	b338      	cbz	r0, 80048c0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004870:	6803      	ldr	r3, [r0, #0]
 8004872:	07db      	lsls	r3, r3, #31
 8004874:	d410      	bmi.n	8004898 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	079f      	lsls	r7, r3, #30
 800487a:	d459      	bmi.n	8004930 <HAL_RCC_OscConfig+0xc8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	0719      	lsls	r1, r3, #28
 8004880:	f100 8090 	bmi.w	80049a4 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	075a      	lsls	r2, r3, #29
 8004888:	f100 80bc 	bmi.w	8004a04 <HAL_RCC_OscConfig+0x19c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488c:	69e3      	ldr	r3, [r4, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 8124 	bne.w	8004adc <HAL_RCC_OscConfig+0x274>
        }
      }
    }
  }

  return HAL_OK;
 8004894:	2000      	movs	r0, #0
 8004896:	e02b      	b.n	80048f0 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004898:	4d8c      	ldr	r5, [pc, #560]	@ (8004acc <HAL_RCC_OscConfig+0x264>)
 800489a:	686b      	ldr	r3, [r5, #4]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d007      	beq.n	80048b4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048a4:	686b      	ldr	r3, [r5, #4]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d10a      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5c>
 80048ae:	686b      	ldr	r3, [r5, #4]
 80048b0:	03de      	lsls	r6, r3, #15
 80048b2:	d507      	bpl.n	80048c4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	039d      	lsls	r5, r3, #14
 80048b8:	d5dd      	bpl.n	8004876 <HAL_RCC_OscConfig+0xe>
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1da      	bne.n	8004876 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80048c0:	2001      	movs	r0, #1
 80048c2:	e015      	b.n	80048f0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c4:	6863      	ldr	r3, [r4, #4]
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ca:	d114      	bne.n	80048f6 <HAL_RCC_OscConfig+0x8e>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d2:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	b1fb      	cbz	r3, 8004918 <HAL_RCC_OscConfig+0xb0>
        tickstart = HAL_GetTick();
 80048d8:	f7fe f846 	bl	8002968 <HAL_GetTick>
 80048dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	0398      	lsls	r0, r3, #14
 80048e2:	d4c8      	bmi.n	8004876 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fe f840 	bl	8002968 <HAL_GetTick>
 80048e8:	1b80      	subs	r0, r0, r6
 80048ea:	2864      	cmp	r0, #100	@ 0x64
 80048ec:	d9f7      	bls.n	80048de <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80048ee:	2003      	movs	r0, #3
}
 80048f0:	b002      	add	sp, #8
 80048f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	b93b      	cbnz	r3, 8004908 <HAL_RCC_OscConfig+0xa0>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004906:	e7e4      	b.n	80048d2 <HAL_RCC_OscConfig+0x6a>
 8004908:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	d1f4      	bne.n	80048fa <HAL_RCC_OscConfig+0x92>
 8004910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004914:	602b      	str	r3, [r5, #0]
 8004916:	e7d9      	b.n	80048cc <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
 8004918:	f7fe f826 	bl	8002968 <HAL_GetTick>
 800491c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491e:	682b      	ldr	r3, [r5, #0]
 8004920:	0399      	lsls	r1, r3, #14
 8004922:	d5a8      	bpl.n	8004876 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004924:	f7fe f820 	bl	8002968 <HAL_GetTick>
 8004928:	1b80      	subs	r0, r0, r6
 800492a:	2864      	cmp	r0, #100	@ 0x64
 800492c:	d9f7      	bls.n	800491e <HAL_RCC_OscConfig+0xb6>
 800492e:	e7de      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004930:	4d66      	ldr	r5, [pc, #408]	@ (8004acc <HAL_RCC_OscConfig+0x264>)
 8004932:	686b      	ldr	r3, [r5, #4]
 8004934:	f013 0f0c 	tst.w	r3, #12
 8004938:	d007      	beq.n	800494a <HAL_RCC_OscConfig+0xe2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800493a:	686b      	ldr	r3, [r5, #4]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d110      	bne.n	8004966 <HAL_RCC_OscConfig+0xfe>
 8004944:	686b      	ldr	r3, [r5, #4]
 8004946:	03da      	lsls	r2, r3, #15
 8004948:	d40d      	bmi.n	8004966 <HAL_RCC_OscConfig+0xfe>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494a:	682b      	ldr	r3, [r5, #0]
 800494c:	079b      	lsls	r3, r3, #30
 800494e:	d502      	bpl.n	8004956 <HAL_RCC_OscConfig+0xee>
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d1b4      	bne.n	80048c0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	6962      	ldr	r2, [r4, #20]
 800495a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800495e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	e78a      	b.n	800487c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004966:	6922      	ldr	r2, [r4, #16]
 8004968:	4b59      	ldr	r3, [pc, #356]	@ (8004ad0 <HAL_RCC_OscConfig+0x268>)
 800496a:	b16a      	cbz	r2, 8004988 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_ENABLE();
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004970:	f7fd fffa 	bl	8002968 <HAL_GetTick>
 8004974:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004976:	682b      	ldr	r3, [r5, #0]
 8004978:	079f      	lsls	r7, r3, #30
 800497a:	d4ec      	bmi.n	8004956 <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7fd fff4 	bl	8002968 <HAL_GetTick>
 8004980:	1b80      	subs	r0, r0, r6
 8004982:	2802      	cmp	r0, #2
 8004984:	d9f7      	bls.n	8004976 <HAL_RCC_OscConfig+0x10e>
 8004986:	e7b2      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8004988:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800498a:	f7fd ffed 	bl	8002968 <HAL_GetTick>
 800498e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	0798      	lsls	r0, r3, #30
 8004994:	f57f af72 	bpl.w	800487c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004998:	f7fd ffe6 	bl	8002968 <HAL_GetTick>
 800499c:	1b80      	subs	r0, r0, r6
 800499e:	2802      	cmp	r0, #2
 80049a0:	d9f6      	bls.n	8004990 <HAL_RCC_OscConfig+0x128>
 80049a2:	e7a4      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a4:	69a2      	ldr	r2, [r4, #24]
 80049a6:	4e49      	ldr	r6, [pc, #292]	@ (8004acc <HAL_RCC_OscConfig+0x264>)
 80049a8:	4b49      	ldr	r3, [pc, #292]	@ (8004ad0 <HAL_RCC_OscConfig+0x268>)
 80049aa:	b1e2      	cbz	r2, 80049e6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80049ac:	2201      	movs	r2, #1
 80049ae:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80049b2:	f7fd ffd9 	bl	8002968 <HAL_GetTick>
 80049b6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b8:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80049ba:	079b      	lsls	r3, r3, #30
 80049bc:	d50d      	bpl.n	80049da <HAL_RCC_OscConfig+0x172>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049be:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80049c2:	4b44      	ldr	r3, [pc, #272]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ca:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80049cc:	bf00      	nop
  }
  while (Delay --);
 80049ce:	9b01      	ldr	r3, [sp, #4]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	9201      	str	r2, [sp, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f9      	bne.n	80049cc <HAL_RCC_OscConfig+0x164>
 80049d8:	e754      	b.n	8004884 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049da:	f7fd ffc5 	bl	8002968 <HAL_GetTick>
 80049de:	1b40      	subs	r0, r0, r5
 80049e0:	2802      	cmp	r0, #2
 80049e2:	d9e9      	bls.n	80049b8 <HAL_RCC_OscConfig+0x150>
 80049e4:	e783      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80049e6:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80049ea:	f7fd ffbd 	bl	8002968 <HAL_GetTick>
 80049ee:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80049f2:	079f      	lsls	r7, r3, #30
 80049f4:	f57f af46 	bpl.w	8004884 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f8:	f7fd ffb6 	bl	8002968 <HAL_GetTick>
 80049fc:	1b40      	subs	r0, r0, r5
 80049fe:	2802      	cmp	r0, #2
 8004a00:	d9f6      	bls.n	80049f0 <HAL_RCC_OscConfig+0x188>
 8004a02:	e774      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a04:	4d31      	ldr	r5, [pc, #196]	@ (8004acc <HAL_RCC_OscConfig+0x264>)
 8004a06:	69eb      	ldr	r3, [r5, #28]
 8004a08:	00d8      	lsls	r0, r3, #3
 8004a0a:	d427      	bmi.n	8004a5c <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8004a0c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0e:	69eb      	ldr	r3, [r5, #28]
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a14:	61eb      	str	r3, [r5, #28]
 8004a16:	69eb      	ldr	r3, [r5, #28]
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	4e2d      	ldr	r6, [pc, #180]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a22:	6833      	ldr	r3, [r6, #0]
 8004a24:	05d9      	lsls	r1, r3, #23
 8004a26:	d51b      	bpl.n	8004a60 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	68e3      	ldr	r3, [r4, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d129      	bne.n	8004a82 <HAL_RCC_OscConfig+0x21a>
 8004a2e:	6a2b      	ldr	r3, [r5, #32]
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	622b      	str	r3, [r5, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a36:	68e3      	ldr	r3, [r4, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d038      	beq.n	8004aae <HAL_RCC_OscConfig+0x246>
      tickstart = HAL_GetTick();
 8004a3c:	f7fd ff94 	bl	8002968 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004a44:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a46:	6a2b      	ldr	r3, [r5, #32]
 8004a48:	079b      	lsls	r3, r3, #30
 8004a4a:	d52a      	bpl.n	8004aa2 <HAL_RCC_OscConfig+0x23a>
    if (pwrclkchanged == SET)
 8004a4c:	2f00      	cmp	r7, #0
 8004a4e:	f43f af1d 	beq.w	800488c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a52:	69eb      	ldr	r3, [r5, #28]
 8004a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a58:	61eb      	str	r3, [r5, #28]
 8004a5a:	e717      	b.n	800488c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004a5c:	2700      	movs	r7, #0
 8004a5e:	e7df      	b.n	8004a20 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a60:	6833      	ldr	r3, [r6, #0]
 8004a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a66:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004a68:	f7fd ff7e 	bl	8002968 <HAL_GetTick>
 8004a6c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6e:	6833      	ldr	r3, [r6, #0]
 8004a70:	05da      	lsls	r2, r3, #23
 8004a72:	d4d9      	bmi.n	8004a28 <HAL_RCC_OscConfig+0x1c0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a74:	f7fd ff78 	bl	8002968 <HAL_GetTick>
 8004a78:	eba0 0008 	sub.w	r0, r0, r8
 8004a7c:	2864      	cmp	r0, #100	@ 0x64
 8004a7e:	d9f6      	bls.n	8004a6e <HAL_RCC_OscConfig+0x206>
 8004a80:	e735      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a82:	b93b      	cbnz	r3, 8004a94 <HAL_RCC_OscConfig+0x22c>
 8004a84:	6a2b      	ldr	r3, [r5, #32]
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	622b      	str	r3, [r5, #32]
 8004a8c:	6a2b      	ldr	r3, [r5, #32]
 8004a8e:	f023 0304 	bic.w	r3, r3, #4
 8004a92:	e7cf      	b.n	8004a34 <HAL_RCC_OscConfig+0x1cc>
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	6a2b      	ldr	r3, [r5, #32]
 8004a98:	d1f5      	bne.n	8004a86 <HAL_RCC_OscConfig+0x21e>
 8004a9a:	f043 0304 	orr.w	r3, r3, #4
 8004a9e:	622b      	str	r3, [r5, #32]
 8004aa0:	e7c5      	b.n	8004a2e <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fd ff61 	bl	8002968 <HAL_GetTick>
 8004aa6:	1b80      	subs	r0, r0, r6
 8004aa8:	4540      	cmp	r0, r8
 8004aaa:	d9cc      	bls.n	8004a46 <HAL_RCC_OscConfig+0x1de>
 8004aac:	e71f      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
      tickstart = HAL_GetTick();
 8004aae:	f7fd ff5b 	bl	8002968 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004ab6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab8:	6a2b      	ldr	r3, [r5, #32]
 8004aba:	0798      	lsls	r0, r3, #30
 8004abc:	d5c6      	bpl.n	8004a4c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004abe:	f7fd ff53 	bl	8002968 <HAL_GetTick>
 8004ac2:	1b80      	subs	r0, r0, r6
 8004ac4:	4540      	cmp	r0, r8
 8004ac6:	d9f7      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x250>
 8004ac8:	e711      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	42420000 	.word	0x42420000
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004adc:	4d2b      	ldr	r5, [pc, #172]	@ (8004b8c <HAL_RCC_OscConfig+0x324>)
 8004ade:	686a      	ldr	r2, [r5, #4]
 8004ae0:	f002 020c 	and.w	r2, r2, #12
 8004ae4:	2a08      	cmp	r2, #8
 8004ae6:	d03f      	beq.n	8004b68 <HAL_RCC_OscConfig+0x300>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	4b28      	ldr	r3, [pc, #160]	@ (8004b90 <HAL_RCC_OscConfig+0x328>)
        __HAL_RCC_PLL_DISABLE();
 8004aee:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af0:	d12d      	bne.n	8004b4e <HAL_RCC_OscConfig+0x2e6>
        tickstart = HAL_GetTick();
 8004af2:	f7fd ff39 	bl	8002968 <HAL_GetTick>
 8004af6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	0199      	lsls	r1, r3, #6
 8004afc:	d421      	bmi.n	8004b42 <HAL_RCC_OscConfig+0x2da>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004afe:	6a23      	ldr	r3, [r4, #32]
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b04:	d105      	bne.n	8004b12 <HAL_RCC_OscConfig+0x2aa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b06:	686b      	ldr	r3, [r5, #4]
 8004b08:	68a2      	ldr	r2, [r4, #8]
 8004b0a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b12:	686a      	ldr	r2, [r5, #4]
 8004b14:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8004b18:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8004b20:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b22:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004b24:	4b1a      	ldr	r3, [pc, #104]	@ (8004b90 <HAL_RCC_OscConfig+0x328>)
 8004b26:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004b28:	f7fd ff1e 	bl	8002968 <HAL_GetTick>
 8004b2c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b2e:	682b      	ldr	r3, [r5, #0]
 8004b30:	019a      	lsls	r2, r3, #6
 8004b32:	f53f aeaf 	bmi.w	8004894 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fd ff17 	bl	8002968 <HAL_GetTick>
 8004b3a:	1b00      	subs	r0, r0, r4
 8004b3c:	2802      	cmp	r0, #2
 8004b3e:	d9f6      	bls.n	8004b2e <HAL_RCC_OscConfig+0x2c6>
 8004b40:	e6d5      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b42:	f7fd ff11 	bl	8002968 <HAL_GetTick>
 8004b46:	1b80      	subs	r0, r0, r6
 8004b48:	2802      	cmp	r0, #2
 8004b4a:	d9d5      	bls.n	8004af8 <HAL_RCC_OscConfig+0x290>
 8004b4c:	e6cf      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8004b4e:	f7fd ff0b 	bl	8002968 <HAL_GetTick>
 8004b52:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	019b      	lsls	r3, r3, #6
 8004b58:	f57f ae9c 	bpl.w	8004894 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fd ff04 	bl	8002968 <HAL_GetTick>
 8004b60:	1b00      	subs	r0, r0, r4
 8004b62:	2802      	cmp	r0, #2
 8004b64:	d9f6      	bls.n	8004b54 <HAL_RCC_OscConfig+0x2ec>
 8004b66:	e6c2      	b.n	80048ee <HAL_RCC_OscConfig+0x86>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	f43f aea9 	beq.w	80048c0 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8004b6e:	6868      	ldr	r0, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b70:	6a23      	ldr	r3, [r4, #32]
 8004b72:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8004b76:	429a      	cmp	r2, r3
 8004b78:	f47f aea2 	bne.w	80048c0 <HAL_RCC_OscConfig+0x58>
 8004b7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b7e:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b82:	1ac0      	subs	r0, r0, r3
 8004b84:	bf18      	it	ne
 8004b86:	2001      	movne	r0, #1
 8004b88:	e6b2      	b.n	80048f0 <HAL_RCC_OscConfig+0x88>
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	42420000 	.word	0x42420000

08004b94 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004b94:	4a0d      	ldr	r2, [pc, #52]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x38>)
 8004b96:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004b98:	f003 010c 	and.w	r1, r3, #12
 8004b9c:	2908      	cmp	r1, #8
 8004b9e:	d112      	bne.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ba0:	480b      	ldr	r0, [pc, #44]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ba2:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ba6:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ba8:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004baa:	d509      	bpl.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bac:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bae:	4a09      	ldr	r2, [pc, #36]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bb0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bb4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bb6:	4a08      	ldr	r2, [pc, #32]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x44>)
 8004bb8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bba:	fbb0 f0f3 	udiv	r0, r0, r3
 8004bbe:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x48>)
 8004bc2:	4358      	muls	r0, r3
 8004bc4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8004bc6:	4803      	ldr	r0, [pc, #12]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	0800a1e8 	.word	0x0800a1e8
 8004bd4:	007a1200 	.word	0x007a1200
 8004bd8:	0800a1e6 	.word	0x0800a1e6
 8004bdc:	003d0900 	.word	0x003d0900

08004be0 <HAL_RCC_ClockConfig>:
{
 8004be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004be6:	4604      	mov	r4, r0
 8004be8:	b910      	cbnz	r0, 8004bf0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004bea:	2001      	movs	r0, #1
}
 8004bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf0:	4a46      	ldr	r2, [pc, #280]	@ (8004d0c <HAL_RCC_ClockConfig+0x12c>)
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	d32a      	bcc.n	8004c52 <HAL_RCC_ClockConfig+0x72>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	0798      	lsls	r0, r3, #30
 8004c00:	d432      	bmi.n	8004c68 <HAL_RCC_ClockConfig+0x88>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	07da      	lsls	r2, r3, #31
 8004c06:	d445      	bmi.n	8004c94 <HAL_RCC_ClockConfig+0xb4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c08:	4a40      	ldr	r2, [pc, #256]	@ (8004d0c <HAL_RCC_ClockConfig+0x12c>)
 8004c0a:	6813      	ldr	r3, [r2, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	42ab      	cmp	r3, r5
 8004c12:	d867      	bhi.n	8004ce4 <HAL_RCC_ClockConfig+0x104>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	4d3e      	ldr	r5, [pc, #248]	@ (8004d10 <HAL_RCC_ClockConfig+0x130>)
 8004c18:	f013 0f04 	tst.w	r3, #4
 8004c1c:	d16e      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	071b      	lsls	r3, r3, #28
 8004c22:	d506      	bpl.n	8004c32 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c24:	686b      	ldr	r3, [r5, #4]
 8004c26:	6922      	ldr	r2, [r4, #16]
 8004c28:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004c2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004c30:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c32:	f7ff ffaf 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004c36:	686b      	ldr	r3, [r5, #4]
 8004c38:	4a36      	ldr	r2, [pc, #216]	@ (8004d14 <HAL_RCC_ClockConfig+0x134>)
 8004c3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c3e:	5cd3      	ldrb	r3, [r2, r3]
 8004c40:	40d8      	lsrs	r0, r3
 8004c42:	4b35      	ldr	r3, [pc, #212]	@ (8004d18 <HAL_RCC_ClockConfig+0x138>)
 8004c44:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004c46:	4b35      	ldr	r3, [pc, #212]	@ (8004d1c <HAL_RCC_ClockConfig+0x13c>)
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	f7fd fd85 	bl	8002758 <HAL_InitTick>
  return HAL_OK;
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e7cc      	b.n	8004bec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	f023 0307 	bic.w	r3, r3, #7
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5c:	6813      	ldr	r3, [r2, #0]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	428b      	cmp	r3, r1
 8004c64:	d1c1      	bne.n	8004bea <HAL_RCC_ClockConfig+0xa>
 8004c66:	e7c9      	b.n	8004bfc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c68:	f013 0f04 	tst.w	r3, #4
 8004c6c:	4b28      	ldr	r3, [pc, #160]	@ (8004d10 <HAL_RCC_ClockConfig+0x130>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c6e:	bf1e      	ittt	ne
 8004c70:	685a      	ldrne	r2, [r3, #4]
 8004c72:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8004c76:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c78:	6822      	ldr	r2, [r4, #0]
 8004c7a:	0711      	lsls	r1, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c7c:	bf42      	ittt	mi
 8004c7e:	685a      	ldrmi	r2, [r3, #4]
 8004c80:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8004c84:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68a1      	ldr	r1, [r4, #8]
 8004c8a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	e7b6      	b.n	8004c02 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c94:	6862      	ldr	r2, [r4, #4]
 8004c96:	4e1e      	ldr	r6, [pc, #120]	@ (8004d10 <HAL_RCC_ClockConfig+0x130>)
 8004c98:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9c:	d11a      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca2:	d0a2      	beq.n	8004bea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ca4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca6:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004cb2:	f7fd fe59 	bl	8002968 <HAL_GetTick>
 8004cb6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb8:	6873      	ldr	r3, [r6, #4]
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004cc4:	d0a0      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc6:	f7fd fe4f 	bl	8002968 <HAL_GetTick>
 8004cca:	1bc0      	subs	r0, r0, r7
 8004ccc:	4540      	cmp	r0, r8
 8004cce:	d9f3      	bls.n	8004cb8 <HAL_RCC_ClockConfig+0xd8>
        return HAL_TIMEOUT;
 8004cd0:	2003      	movs	r0, #3
 8004cd2:	e78b      	b.n	8004bec <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd4:	2a02      	cmp	r2, #2
 8004cd6:	d102      	bne.n	8004cde <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004cdc:	e7e1      	b.n	8004ca2 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cde:	f013 0f02 	tst.w	r3, #2
 8004ce2:	e7de      	b.n	8004ca2 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce4:	6813      	ldr	r3, [r2, #0]
 8004ce6:	f023 0307 	bic.w	r3, r3, #7
 8004cea:	432b      	orrs	r3, r5
 8004cec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	6813      	ldr	r3, [r2, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	42ab      	cmp	r3, r5
 8004cf6:	f47f af78 	bne.w	8004bea <HAL_RCC_ClockConfig+0xa>
 8004cfa:	e78b      	b.n	8004c14 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	686b      	ldr	r3, [r5, #4]
 8004cfe:	68e2      	ldr	r2, [r4, #12]
 8004d00:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d04:	4313      	orrs	r3, r2
 8004d06:	606b      	str	r3, [r5, #4]
 8004d08:	e789      	b.n	8004c1e <HAL_RCC_ClockConfig+0x3e>
 8004d0a:	bf00      	nop
 8004d0c:	40022000 	.word	0x40022000
 8004d10:	40021000 	.word	0x40021000
 8004d14:	0800a1d6 	.word	0x0800a1d6
 8004d18:	20000000 	.word	0x20000000
 8004d1c:	20000008 	.word	0x20000008

08004d20 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d20:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004d22:	4a05      	ldr	r2, [pc, #20]	@ (8004d38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	4a03      	ldr	r2, [pc, #12]	@ (8004d3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004d2e:	6810      	ldr	r0, [r2, #0]
}
 8004d30:	40d8      	lsrs	r0, r3
 8004d32:	4770      	bx	lr
 8004d34:	40021000 	.word	0x40021000
 8004d38:	0800a1ce 	.word	0x0800a1ce
 8004d3c:	20000000 	.word	0x20000000

08004d40 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d40:	4b04      	ldr	r3, [pc, #16]	@ (8004d54 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004d42:	4a05      	ldr	r2, [pc, #20]	@ (8004d58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004d4a:	5cd3      	ldrb	r3, [r2, r3]
 8004d4c:	4a03      	ldr	r2, [pc, #12]	@ (8004d5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004d4e:	6810      	ldr	r0, [r2, #0]
}
 8004d50:	40d8      	lsrs	r0, r3
 8004d52:	4770      	bx	lr
 8004d54:	40021000 	.word	0x40021000
 8004d58:	0800a1ce 	.word	0x0800a1ce
 8004d5c:	20000000 	.word	0x20000000

08004d60 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d60:	230f      	movs	r3, #15
 8004d62:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d64:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <HAL_RCC_GetClockConfig+0x34>)
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	f002 0203 	and.w	r2, r2, #3
 8004d6c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8004d74:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004d7c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d86:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d88:	4b03      	ldr	r3, [pc, #12]	@ (8004d98 <HAL_RCC_GetClockConfig+0x38>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	600b      	str	r3, [r1, #0]
}
 8004d92:	4770      	bx	lr
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40022000 	.word	0x40022000

08004d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004da0:	6803      	ldr	r3, [r0, #0]
{
 8004da2:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004da4:	07d8      	lsls	r0, r3, #31
 8004da6:	d521      	bpl.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da8:	4c36      	ldr	r4, [pc, #216]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004daa:	69e3      	ldr	r3, [r4, #28]
 8004dac:	00d9      	lsls	r1, r3, #3
 8004dae:	d42c      	bmi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004db0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	69e3      	ldr	r3, [r4, #28]
 8004db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db8:	61e3      	str	r3, [r4, #28]
 8004dba:	69e3      	ldr	r3, [r4, #28]
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc4:	4f30      	ldr	r7, [pc, #192]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	05da      	lsls	r2, r3, #23
 8004dca:	d520      	bpl.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dcc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dce:	686a      	ldr	r2, [r5, #4]
 8004dd0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004dd4:	d12f      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dd6:	6a23      	ldr	r3, [r4, #32]
 8004dd8:	686a      	ldr	r2, [r5, #4]
 8004dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dde:	4313      	orrs	r3, r2
 8004de0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004de2:	b11e      	cbz	r6, 8004dec <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de4:	69e3      	ldr	r3, [r4, #28]
 8004de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dea:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	079a      	lsls	r2, r3, #30
 8004df0:	d506      	bpl.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004df2:	4a24      	ldr	r2, [pc, #144]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004df4:	68a9      	ldr	r1, [r5, #8]
 8004df6:	6853      	ldr	r3, [r2, #4]
 8004df8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	06db      	lsls	r3, r3, #27
 8004e04:	d436      	bmi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e06:	2000      	movs	r0, #0
 8004e08:	e012      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    FlagStatus pwrclkchanged = RESET;
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	e7da      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e14:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004e16:	f7fd fda7 	bl	8002968 <HAL_GetTick>
 8004e1a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	05db      	lsls	r3, r3, #23
 8004e20:	d4d4      	bmi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e22:	f7fd fda1 	bl	8002968 <HAL_GetTick>
 8004e26:	eba0 0008 	sub.w	r0, r0, r8
 8004e2a:	2864      	cmp	r0, #100	@ 0x64
 8004e2c:	d9f6      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
          return HAL_TIMEOUT;
 8004e2e:	2003      	movs	r0, #3
}
 8004e30:	b002      	add	sp, #8
 8004e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e36:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d0cb      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e3e:	2001      	movs	r0, #1
 8004e40:	4a12      	ldr	r2, [pc, #72]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e42:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e44:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e48:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e52:	07d8      	lsls	r0, r3, #31
      RCC->BDCR = temp_reg;
 8004e54:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e56:	d5be      	bpl.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8004e58:	f7fd fd86 	bl	8002968 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5c:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004e60:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e62:	6a23      	ldr	r3, [r4, #32]
 8004e64:	0799      	lsls	r1, r3, #30
 8004e66:	d4b6      	bmi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e68:	f7fd fd7e 	bl	8002968 <HAL_GetTick>
 8004e6c:	1bc0      	subs	r0, r0, r7
 8004e6e:	4540      	cmp	r0, r8
 8004e70:	d9f7      	bls.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8004e72:	e7dc      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x92>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e74:	4a03      	ldr	r2, [pc, #12]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e76:	68e9      	ldr	r1, [r5, #12]
 8004e78:	6853      	ldr	r3, [r2, #4]
 8004e7a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6053      	str	r3, [r2, #4]
 8004e82:	e7c0      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	42420000 	.word	0x42420000

08004e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004e90:	2802      	cmp	r0, #2
{
 8004e92:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8004e94:	d044      	beq.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8004e96:	2810      	cmp	r0, #16
 8004e98:	d003      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8004e9a:	2801      	cmp	r0, #1
 8004e9c:	d022      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e9e:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8004ea0:	e034      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8004ea2:	4b25      	ldr	r3, [pc, #148]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ea4:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8004eac:	d02e      	beq.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eae:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8004eb2:	4822      	ldr	r0, [pc, #136]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004eb4:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004eb6:	bf48      	it	mi
 8004eb8:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eba:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ebc:	bf41      	itttt	mi
 8004ebe:	4920      	ldrmi	r1, [pc, #128]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ec0:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8004ec4:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ec6:	4a1f      	ldrmi	r2, [pc, #124]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ec8:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004eca:	bf4c      	ite	mi
 8004ecc:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ed0:	4a1d      	ldrpl	r2, [pc, #116]	@ (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ed2:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ed4:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ed8:	d418      	bmi.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8004eda:	2303      	movs	r3, #3
 8004edc:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004ede:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004ee2:	e013      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004ee4:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8004ee8:	4a13      	ldr	r2, [pc, #76]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004eea:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004eec:	4019      	ands	r1, r3
 8004eee:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8004ef2:	d01e      	beq.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004efc:	d107      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8004efe:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004f02:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 8004f04:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8004f08:	bf18      	it	ne
 8004f0a:	4618      	movne	r0, r3
}
 8004f0c:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f12:	d1c4      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8004f14:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8004f16:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004f1a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004f1e:	e7f3      	b.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004f20:	f7ff ff0e 	bl	8004d40 <HAL_RCC_GetPCLK2Freq>
 8004f24:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	e7d5      	b.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8004f32:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004f36:	e7e9      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	0800a1fa 	.word	0x0800a1fa
 8004f40:	0800a1f8 	.word	0x0800a1f8
 8004f44:	007a1200 	.word	0x007a1200
 8004f48:	003d0900 	.word	0x003d0900

08004f4c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4e:	6a02      	ldr	r2, [r0, #32]
{
 8004f50:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f5e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004f62:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f64:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004f66:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004f6a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f6c:	4d0a      	ldr	r5, [pc, #40]	@ (8004f98 <TIM_OC1_SetConfig+0x4c>)
 8004f6e:	42a8      	cmp	r0, r5
 8004f70:	d10b      	bne.n	8004f8a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f72:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f74:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004f78:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f7a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f7e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004f82:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f84:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f88:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f8e:	684a      	ldr	r2, [r1, #4]
 8004f90:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f92:	6203      	str	r3, [r0, #32]
}
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
 8004f96:	bf00      	nop
 8004f98:	40012c00 	.word	0x40012c00

08004f9c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f9e:	6a02      	ldr	r2, [r0, #32]
{
 8004fa0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fa6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004faa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fae:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004fb2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004fb6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fbe:	4d0b      	ldr	r5, [pc, #44]	@ (8004fec <TIM_OC3_SetConfig+0x50>)
 8004fc0:	42a8      	cmp	r0, r5
 8004fc2:	d10d      	bne.n	8004fe0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fc4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fce:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fd2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004fd6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fdc:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fe4:	684a      	ldr	r2, [r1, #4]
 8004fe6:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe8:	6203      	str	r3, [r0, #32]
}
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	40012c00 	.word	0x40012c00

08004ff0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ff2:	6a02      	ldr	r2, [r0, #32]
{
 8004ff4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ff6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ffa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005000:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005002:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005006:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800500a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800500c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005010:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	4d06      	ldr	r5, [pc, #24]	@ (8005030 <TIM_OC4_SetConfig+0x40>)
 8005016:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005018:	bf02      	ittt	eq
 800501a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800501c:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005020:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005026:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005028:	684a      	ldr	r2, [r1, #4]
 800502a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502c:	6203      	str	r3, [r0, #32]
}
 800502e:	bd30      	pop	{r4, r5, pc}
 8005030:	40012c00 	.word	0x40012c00

08005034 <HAL_TIM_Base_MspInit>:
}
 8005034:	4770      	bx	lr
	...

08005038 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005038:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800503c:	2b01      	cmp	r3, #1
 800503e:	d121      	bne.n	8005084 <HAL_TIM_Base_Start_IT+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005042:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005048:	68d3      	ldr	r3, [r2, #12]
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005050:	6803      	ldr	r3, [r0, #0]
 8005052:	4a0d      	ldr	r2, [pc, #52]	@ (8005088 <HAL_TIM_Base_Start_IT+0x50>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00a      	beq.n	800506e <HAL_TIM_Base_Start_IT+0x36>
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505c:	d007      	beq.n	800506e <HAL_TIM_Base_Start_IT+0x36>
 800505e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <HAL_TIM_Base_Start_IT+0x36>
 8005066:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800506a:	4293      	cmp	r3, r2
 800506c:	d104      	bne.n	8005078 <HAL_TIM_Base_Start_IT+0x40>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	2a06      	cmp	r2, #6
 8005076:	d003      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x48>
      __HAL_TIM_ENABLE(htim);
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005080:	2000      	movs	r0, #0
 8005082:	4770      	bx	lr
    return HAL_ERROR;
 8005084:	2001      	movs	r0, #1
}
 8005086:	4770      	bx	lr
 8005088:	40012c00 	.word	0x40012c00

0800508c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800508c:	4770      	bx	lr

0800508e <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005090:	4770      	bx	lr

08005092 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_IRQHandler>:
{
 8005094:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005096:	6803      	ldr	r3, [r0, #0]
{
 8005098:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800509a:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800509c:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800509e:	07b1      	lsls	r1, r6, #30
 80050a0:	d50e      	bpl.n	80050c0 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050a2:	07aa      	lsls	r2, r5, #30
 80050a4:	d50c      	bpl.n	80050c0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050a6:	f06f 0202 	mvn.w	r2, #2
 80050aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ac:	2301      	movs	r3, #1
 80050ae:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b0:	6803      	ldr	r3, [r0, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	079b      	lsls	r3, r3, #30
 80050b6:	d06c      	beq.n	8005192 <HAL_TIM_IRQHandler+0xfe>
          HAL_TIM_IC_CaptureCallback(htim);
 80050b8:	f7ff ffe9 	bl	800508e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050bc:	2300      	movs	r3, #0
 80050be:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050c0:	0771      	lsls	r1, r6, #29
 80050c2:	d511      	bpl.n	80050e8 <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050c4:	076a      	lsls	r2, r5, #29
 80050c6:	d50f      	bpl.n	80050e8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050c8:	f06f 0204 	mvn.w	r2, #4
 80050cc:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d2:	2302      	movs	r3, #2
 80050d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80050de:	d05e      	beq.n	800519e <HAL_TIM_IRQHandler+0x10a>
        HAL_TIM_IC_CaptureCallback(htim);
 80050e0:	f7ff ffd5 	bl	800508e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e4:	2300      	movs	r3, #0
 80050e6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050e8:	0733      	lsls	r3, r6, #28
 80050ea:	d510      	bpl.n	800510e <HAL_TIM_IRQHandler+0x7a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ec:	0728      	lsls	r0, r5, #28
 80050ee:	d50e      	bpl.n	800510e <HAL_TIM_IRQHandler+0x7a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050f0:	f06f 0208 	mvn.w	r2, #8
 80050f4:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80050f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fa:	2304      	movs	r3, #4
 80050fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	0799      	lsls	r1, r3, #30
 8005104:	d051      	beq.n	80051aa <HAL_TIM_IRQHandler+0x116>
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	f7ff ffc2 	bl	800508e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	2300      	movs	r3, #0
 800510c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800510e:	06f2      	lsls	r2, r6, #27
 8005110:	d511      	bpl.n	8005136 <HAL_TIM_IRQHandler+0xa2>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005112:	06eb      	lsls	r3, r5, #27
 8005114:	d50f      	bpl.n	8005136 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005116:	f06f 0210 	mvn.w	r2, #16
 800511a:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800511c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800511e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005120:	2308      	movs	r3, #8
 8005122:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800512c:	d043      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	f7ff ffae 	bl	800508e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	2300      	movs	r3, #0
 8005134:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005136:	07f0      	lsls	r0, r6, #31
 8005138:	d508      	bpl.n	800514c <HAL_TIM_IRQHandler+0xb8>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800513a:	07e9      	lsls	r1, r5, #31
 800513c:	d506      	bpl.n	800514c <HAL_TIM_IRQHandler+0xb8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800513e:	f06f 0201 	mvn.w	r2, #1
 8005142:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005144:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005146:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005148:	f7fc ffa8 	bl	800209c <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800514c:	0632      	lsls	r2, r6, #24
 800514e:	d508      	bpl.n	8005162 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005150:	062b      	lsls	r3, r5, #24
 8005152:	d506      	bpl.n	8005162 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005154:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005158:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 800515a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800515c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800515e:	f000 f9ee 	bl	800553e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005162:	0670      	lsls	r0, r6, #25
 8005164:	d508      	bpl.n	8005178 <HAL_TIM_IRQHandler+0xe4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005166:	0669      	lsls	r1, r5, #25
 8005168:	d506      	bpl.n	8005178 <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800516a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800516e:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8005170:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005172:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005174:	f7ff ff8d 	bl	8005092 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005178:	06b2      	lsls	r2, r6, #26
 800517a:	d522      	bpl.n	80051c2 <HAL_TIM_IRQHandler+0x12e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800517c:	06ab      	lsls	r3, r5, #26
 800517e:	d520      	bpl.n	80051c2 <HAL_TIM_IRQHandler+0x12e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005180:	f06f 0220 	mvn.w	r2, #32
 8005184:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 8005186:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005188:	611a      	str	r2, [r3, #16]
}
 800518a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800518e:	f000 b9d5 	b.w	800553c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	f7ff ff7b 	bl	800508c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005196:	4620      	mov	r0, r4
 8005198:	f7ff ff7a 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
 800519c:	e78e      	b.n	80050bc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	f7ff ff75 	bl	800508c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff ff74 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
 80051a8:	e79c      	b.n	80050e4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	f7ff ff6f 	bl	800508c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff ff6e 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
 80051b4:	e7a9      	b.n	800510a <HAL_TIM_IRQHandler+0x76>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	f7ff ff69 	bl	800508c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7ff ff68 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
 80051c0:	e7b7      	b.n	8005132 <HAL_TIM_IRQHandler+0x9e>
}
 80051c2:	bd70      	pop	{r4, r5, r6, pc}

080051c4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 80051c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c8:	4290      	cmp	r0, r2
 80051ca:	d00a      	beq.n	80051e2 <TIM_Base_SetConfig+0x1e>
 80051cc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80051d0:	d007      	beq.n	80051e2 <TIM_Base_SetConfig+0x1e>
 80051d2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80051d6:	4290      	cmp	r0, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_Base_SetConfig+0x1e>
 80051da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80051de:	4290      	cmp	r0, r2
 80051e0:	d115      	bne.n	800520e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80051e2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80051e8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ea:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <TIM_Base_SetConfig+0x7c>)
 80051ec:	4290      	cmp	r0, r2
 80051ee:	d00a      	beq.n	8005206 <TIM_Base_SetConfig+0x42>
 80051f0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80051f4:	d007      	beq.n	8005206 <TIM_Base_SetConfig+0x42>
 80051f6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80051fa:	4290      	cmp	r0, r2
 80051fc:	d003      	beq.n	8005206 <TIM_Base_SetConfig+0x42>
 80051fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005202:	4290      	cmp	r0, r2
 8005204:	d103      	bne.n	800520e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005206:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800520c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800520e:	694a      	ldr	r2, [r1, #20]
 8005210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005214:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005216:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005218:	688b      	ldr	r3, [r1, #8]
 800521a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800521c:	680b      	ldr	r3, [r1, #0]
 800521e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005220:	4b07      	ldr	r3, [pc, #28]	@ (8005240 <TIM_Base_SetConfig+0x7c>)
 8005222:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8005224:	bf04      	itt	eq
 8005226:	690b      	ldreq	r3, [r1, #16]
 8005228:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800522a:	2301      	movs	r3, #1
 800522c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800522e:	6903      	ldr	r3, [r0, #16]
 8005230:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005232:	bf42      	ittt	mi
 8005234:	6903      	ldrmi	r3, [r0, #16]
 8005236:	f023 0301 	bicmi.w	r3, r3, #1
 800523a:	6103      	strmi	r3, [r0, #16]
}
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40012c00 	.word	0x40012c00

08005244 <HAL_TIM_Base_Init>:
{
 8005244:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005246:	4604      	mov	r4, r0
 8005248:	b330      	cbz	r0, 8005298 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800524a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800524e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005252:	b91b      	cbnz	r3, 800525c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005254:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005258:	f7ff feec 	bl	8005034 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800525e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005264:	1d21      	adds	r1, r4, #4
 8005266:	f7ff ffad 	bl	80051c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800526a:	2301      	movs	r3, #1
  return HAL_OK;
 800526c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800526e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005276:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800527a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800527e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005282:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800528a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800528e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005292:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005296:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005298:	2001      	movs	r0, #1
 800529a:	e7fc      	b.n	8005296 <HAL_TIM_Base_Init+0x52>

0800529c <HAL_TIM_PWM_Init>:
{
 800529c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800529e:	4604      	mov	r4, r0
 80052a0:	b330      	cbz	r0, 80052f0 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80052a2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80052a6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80052aa:	b91b      	cbnz	r3, 80052b4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80052ac:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80052b0:	f7fd f9a6 	bl	8002600 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	1d21      	adds	r1, r4, #4
 80052be:	f7ff ff81 	bl	80051c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c2:	2301      	movs	r3, #1
  return HAL_OK;
 80052c4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80052ce:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80052d2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80052d6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80052e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80052ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80052ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80052f0:	2001      	movs	r0, #1
 80052f2:	e7fc      	b.n	80052ee <HAL_TIM_PWM_Init+0x52>

080052f4 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80052f4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f6:	6a02      	ldr	r2, [r0, #32]
{
 80052f8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fa:	f022 0210 	bic.w	r2, r2, #16
 80052fe:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005300:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005302:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005304:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005306:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800530e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005310:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005314:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005318:	4d0b      	ldr	r5, [pc, #44]	@ (8005348 <TIM_OC2_SetConfig+0x54>)
 800531a:	42a8      	cmp	r0, r5
 800531c:	d10d      	bne.n	800533a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800531e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005324:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005328:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800532c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005330:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005336:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800533a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800533c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800533e:	684a      	ldr	r2, [r1, #4]
 8005340:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005342:	6203      	str	r3, [r0, #32]
}
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00

0800534c <HAL_TIM_PWM_ConfigChannel>:
{
 800534c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800534e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8005352:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005354:	2b01      	cmp	r3, #1
 8005356:	d05b      	beq.n	8005410 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8005358:	2001      	movs	r0, #1
  switch (Channel)
 800535a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800535c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8005360:	d043      	beq.n	80053ea <HAL_TIM_PWM_ConfigChannel+0x9e>
 8005362:	d806      	bhi.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x26>
 8005364:	b1d2      	cbz	r2, 800539c <HAL_TIM_PWM_ConfigChannel+0x50>
 8005366:	2a04      	cmp	r2, #4
 8005368:	d02c      	beq.n	80053c4 <HAL_TIM_PWM_ConfigChannel+0x78>
  __HAL_UNLOCK(htim);
 800536a:	2300      	movs	r3, #0
 800536c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005370:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005372:	2a0c      	cmp	r2, #12
 8005374:	d1f9      	bne.n	800536a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	f7ff fe3a 	bl	8004ff0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800537c:	6822      	ldr	r2, [r4, #0]
 800537e:	69d3      	ldr	r3, [r2, #28]
 8005380:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005384:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	69d3      	ldr	r3, [r2, #28]
 800538a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800538e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005390:	6822      	ldr	r2, [r4, #0]
 8005392:	6909      	ldr	r1, [r1, #16]
 8005394:	69d3      	ldr	r3, [r2, #28]
 8005396:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800539a:	e037      	b.n	800540c <HAL_TIM_PWM_ConfigChannel+0xc0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800539c:	6820      	ldr	r0, [r4, #0]
 800539e:	f7ff fdd5 	bl	8004f4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a2:	6822      	ldr	r2, [r4, #0]
 80053a4:	6993      	ldr	r3, [r2, #24]
 80053a6:	f043 0308 	orr.w	r3, r3, #8
 80053aa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ac:	6822      	ldr	r2, [r4, #0]
 80053ae:	6993      	ldr	r3, [r2, #24]
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	6909      	ldr	r1, [r1, #16]
 80053ba:	6993      	ldr	r3, [r2, #24]
 80053bc:	430b      	orrs	r3, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053be:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80053c0:	2000      	movs	r0, #0
 80053c2:	e7d2      	b.n	800536a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053c4:	6820      	ldr	r0, [r4, #0]
 80053c6:	f7ff ff95 	bl	80052f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053ca:	6822      	ldr	r2, [r4, #0]
 80053cc:	6993      	ldr	r3, [r2, #24]
 80053ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	6993      	ldr	r3, [r2, #24]
 80053d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053de:	6822      	ldr	r2, [r4, #0]
 80053e0:	6909      	ldr	r1, [r1, #16]
 80053e2:	6993      	ldr	r3, [r2, #24]
 80053e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80053e8:	e7e9      	b.n	80053be <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ea:	6820      	ldr	r0, [r4, #0]
 80053ec:	f7ff fdd6 	bl	8004f9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	69d3      	ldr	r3, [r2, #28]
 80053f4:	f043 0308 	orr.w	r3, r3, #8
 80053f8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	69d3      	ldr	r3, [r2, #28]
 80053fe:	f023 0304 	bic.w	r3, r3, #4
 8005402:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	6909      	ldr	r1, [r1, #16]
 8005408:	69d3      	ldr	r3, [r2, #28]
 800540a:	430b      	orrs	r3, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800540c:	61d3      	str	r3, [r2, #28]
      break;
 800540e:	e7d7      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 8005410:	2002      	movs	r0, #2
 8005412:	e7ad      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x24>

08005414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005414:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005416:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005418:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800541a:	f001 011f 	and.w	r1, r1, #31
 800541e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005420:	ea23 0304 	bic.w	r3, r3, r4
 8005424:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005426:	6a03      	ldr	r3, [r0, #32]
 8005428:	408a      	lsls	r2, r1
 800542a:	431a      	orrs	r2, r3
 800542c:	6202      	str	r2, [r0, #32]
}
 800542e:	bd10      	pop	{r4, pc}

08005430 <HAL_TIM_OC_Start>:
{
 8005430:	b510      	push	{r4, lr}
 8005432:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005434:	b929      	cbnz	r1, 8005442 <HAL_TIM_OC_Start+0x12>
 8005436:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800543a:	2b01      	cmp	r3, #1
 800543c:	d01e      	beq.n	800547c <HAL_TIM_OC_Start+0x4c>
    return HAL_ERROR;
 800543e:	2001      	movs	r0, #1
 8005440:	e042      	b.n	80054c8 <HAL_TIM_OC_Start+0x98>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005442:	2904      	cmp	r1, #4
 8005444:	d107      	bne.n	8005456 <HAL_TIM_OC_Start+0x26>
 8005446:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800544a:	2b01      	cmp	r3, #1
 800544c:	d1f7      	bne.n	800543e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800544e:	2302      	movs	r3, #2
 8005450:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8005454:	e015      	b.n	8005482 <HAL_TIM_OC_Start+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005456:	2908      	cmp	r1, #8
 8005458:	bf0c      	ite	eq
 800545a:	f890 3040 	ldrbeq.w	r3, [r0, #64]	@ 0x40
 800545e:	f890 3041 	ldrbne.w	r3, [r0, #65]	@ 0x41
 8005462:	3b01      	subs	r3, #1
 8005464:	bf18      	it	ne
 8005466:	2301      	movne	r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e8      	bne.n	800543e <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800546c:	2302      	movs	r3, #2
 800546e:	2908      	cmp	r1, #8
 8005470:	bf0c      	ite	eq
 8005472:	f884 3040 	strbeq.w	r3, [r4, #64]	@ 0x40
 8005476:	f884 3041 	strbne.w	r3, [r4, #65]	@ 0x41
 800547a:	e002      	b.n	8005482 <HAL_TIM_OC_Start+0x52>
 800547c:	2302      	movs	r3, #2
 800547e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005482:	2201      	movs	r2, #1
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	f7ff ffc5 	bl	8005414 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	4a0f      	ldr	r2, [pc, #60]	@ (80054cc <HAL_TIM_OC_Start+0x9c>)
 800548e:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8005490:	bf02      	ittt	eq
 8005492:	6c53      	ldreq	r3, [r2, #68]	@ 0x44
 8005494:	f443 4300 	orreq.w	r3, r3, #32768	@ 0x8000
 8005498:	6453      	streq	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_TIM_OC_Start+0x84>
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a4:	d006      	beq.n	80054b4 <HAL_TIM_OC_Start+0x84>
 80054a6:	4a0a      	ldr	r2, [pc, #40]	@ (80054d0 <HAL_TIM_OC_Start+0xa0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <HAL_TIM_OC_Start+0x84>
 80054ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d104      	bne.n	80054be <HAL_TIM_OC_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ba:	2a06      	cmp	r2, #6
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_OC_Start+0x96>
      __HAL_TIM_ENABLE(htim);
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80054c6:	2000      	movs	r0, #0
}
 80054c8:	bd10      	pop	{r4, pc}
 80054ca:	bf00      	nop
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40000400 	.word	0x40000400

080054d4 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80054d4:	f7ff bfac 	b.w	8005430 <HAL_TIM_OC_Start>

080054d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054da:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
{
 80054de:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80054e0:	2a01      	cmp	r2, #1
 80054e2:	f04f 0002 	mov.w	r0, #2
 80054e6:	d026      	beq.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80054e8:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054ea:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(htim);
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80054f4:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054fc:	432a      	orrs	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80054fe:	68a0      	ldr	r0, [r4, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005500:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4c0c      	ldr	r4, [pc, #48]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005506:	42a2      	cmp	r2, r4
 8005508:	d00a      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800550a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800550e:	d007      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005510:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8005514:	42a2      	cmp	r2, r4
 8005516:	d003      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005518:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800551c:	42a2      	cmp	r2, r4
 800551e:	d104      	bne.n	800552a <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005520:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005522:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005526:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005528:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552a:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 800552c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005532:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005536:	bd30      	pop	{r4, r5, pc}
 8005538:	40012c00 	.word	0x40012c00

0800553c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800553c:	4770      	bx	lr

0800553e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800553e:	4770      	bx	lr

08005540 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005540:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	f102 030c 	add.w	r3, r2, #12
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	320c      	adds	r2, #12
 8005550:	e842 3100 	strex	r1, r3, [r2]
 8005554:	2900      	cmp	r1, #0
 8005556:	d1f3      	bne.n	8005540 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	f102 0314 	add.w	r3, r2, #20
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	3214      	adds	r2, #20
 8005568:	e842 3100 	strex	r1, r3, [r2]
 800556c:	2900      	cmp	r1, #0
 800556e:	d1f3      	bne.n	8005558 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005570:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005572:	2b01      	cmp	r3, #1
 8005574:	d10b      	bne.n	800558e <UART_EndRxTransfer+0x4e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005576:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	f102 030c 	add.w	r3, r2, #12
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	320c      	adds	r2, #12
 8005586:	e842 3100 	strex	r1, r3, [r2]
 800558a:	2900      	cmp	r1, #0
 800558c:	d1f3      	bne.n	8005576 <UART_EndRxTransfer+0x36>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800558e:	2320      	movs	r3, #32
 8005590:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005594:	2300      	movs	r3, #0
 8005596:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8005598:	4770      	bx	lr
	...

0800559c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800559c:	b510      	push	{r4, lr}
 800559e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a0:	6802      	ldr	r2, [r0, #0]
 80055a2:	68c1      	ldr	r1, [r0, #12]
 80055a4:	6913      	ldr	r3, [r2, #16]
 80055a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80055aa:	430b      	orrs	r3, r1
 80055ac:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 80055ae:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055b0:	6883      	ldr	r3, [r0, #8]
 80055b2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80055b4:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055b6:	4303      	orrs	r3, r0
 80055b8:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80055ba:	f422 52b0 	bic.w	r2, r2, #5632	@ 0x1600
 80055be:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055c2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055c8:	6822      	ldr	r2, [r4, #0]
 80055ca:	69a1      	ldr	r1, [r4, #24]
 80055cc:	6953      	ldr	r3, [r2, #20]
 80055ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d2:	430b      	orrs	r3, r1
 80055d4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80055d6:	6822      	ldr	r2, [r4, #0]
 80055d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005610 <UART_SetConfig+0x74>)
 80055da:	429a      	cmp	r2, r3
 80055dc:	d115      	bne.n	800560a <UART_SetConfig+0x6e>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055de:	f7ff fbaf 	bl	8004d40 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e2:	2319      	movs	r3, #25
 80055e4:	4343      	muls	r3, r0
 80055e6:	6862      	ldr	r2, [r4, #4]
 80055e8:	6820      	ldr	r0, [r4, #0]
 80055ea:	0092      	lsls	r2, r2, #2
 80055ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80055f0:	2264      	movs	r2, #100	@ 0x64
 80055f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80055f6:	fb02 3311 	mls	r3, r2, r1, r3
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	3332      	adds	r3, #50	@ 0x32
 80055fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005602:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005606:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8005608:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800560a:	f7ff fb89 	bl	8004d20 <HAL_RCC_GetPCLK1Freq>
 800560e:	e7e8      	b.n	80055e2 <UART_SetConfig+0x46>
 8005610:	40013800 	.word	0x40013800

08005614 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8005614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005616:	4605      	mov	r5, r0
 8005618:	460c      	mov	r4, r1
 800561a:	4617      	mov	r7, r2
 800561c:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561e:	682a      	ldr	r2, [r5, #0]
 8005620:	6813      	ldr	r3, [r2, #0]
 8005622:	ea34 0303 	bics.w	r3, r4, r3
 8005626:	d101      	bne.n	800562c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8005628:	2000      	movs	r0, #0
 800562a:	e021      	b.n	8005670 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800562c:	1c70      	adds	r0, r6, #1
 800562e:	d0f7      	beq.n	8005620 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005630:	f7fd f99a 	bl	8002968 <HAL_GetTick>
 8005634:	1bc0      	subs	r0, r0, r7
 8005636:	4286      	cmp	r6, r0
 8005638:	d31c      	bcc.n	8005674 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 800563a:	b1de      	cbz	r6, 8005674 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	0751      	lsls	r1, r2, #29
 8005642:	d5ec      	bpl.n	800561e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8005644:	2c80      	cmp	r4, #128	@ 0x80
 8005646:	d0ea      	beq.n	800561e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8005648:	2c40      	cmp	r4, #64	@ 0x40
 800564a:	d0e8      	beq.n	800561e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	0712      	lsls	r2, r2, #28
 8005650:	d5e5      	bpl.n	800561e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005652:	2400      	movs	r4, #0
 8005654:	9401      	str	r4, [sp, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 8005658:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 800565a:	9201      	str	r2, [sp, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8005662:	f7ff ff6d 	bl	8005540 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005666:	2308      	movs	r3, #8
          return HAL_ERROR;
 8005668:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800566a:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800566c:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 8005670:	b003      	add	sp, #12
 8005672:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005674:	2003      	movs	r0, #3
 8005676:	e7fb      	b.n	8005670 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08005678 <HAL_UART_Init>:
{
 8005678:	b510      	push	{r4, lr}
  if (huart == NULL)
 800567a:	4604      	mov	r4, r0
 800567c:	b358      	cbz	r0, 80056d6 <HAL_UART_Init+0x5e>
  if (huart->gState == HAL_UART_STATE_RESET)
 800567e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005682:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005686:	b91b      	cbnz	r3, 8005690 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005688:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800568c:	f7fc fff2 	bl	8002674 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005690:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8005692:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005694:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8005698:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800569a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800569c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056a0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80056a2:	f7ff ff7b 	bl	800559c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a6:	6822      	ldr	r2, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056aa:	6913      	ldr	r3, [r2, #16]
 80056ac:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80056b0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	6953      	ldr	r3, [r2, #20]
 80056b6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80056ba:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80056bc:	6822      	ldr	r2, [r4, #0]
 80056be:	68d3      	ldr	r3, [r2, #12]
 80056c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80056c4:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80056c6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056ce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d2:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80056d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80056d6:	2001      	movs	r0, #1
 80056d8:	e7fc      	b.n	80056d4 <HAL_UART_Init+0x5c>

080056da <HAL_UART_Transmit>:
{
 80056da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056de:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80056e0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80056e4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80056e6:	2b20      	cmp	r3, #32
{
 80056e8:	460e      	mov	r6, r1
 80056ea:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80056ec:	d13f      	bne.n	800576e <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 80056ee:	2900      	cmp	r1, #0
 80056f0:	d03f      	beq.n	8005772 <HAL_UART_Transmit+0x98>
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	d03d      	beq.n	8005772 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f6:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	2500      	movs	r5, #0
 80056fa:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056fc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8005700:	f7fd f932 	bl	8002968 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005704:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8005706:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 800570c:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800570e:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005710:	d103      	bne.n	800571a <HAL_UART_Transmit+0x40>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	b90b      	cbnz	r3, 800571a <HAL_UART_Transmit+0x40>
 8005716:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005718:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800571a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800571c:	b29b      	uxth	r3, r3
 800571e:	b953      	cbnz	r3, 8005736 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005720:	4643      	mov	r3, r8
 8005722:	464a      	mov	r2, r9
 8005724:	2140      	movs	r1, #64	@ 0x40
 8005726:	4620      	mov	r0, r4
 8005728:	f7ff ff74 	bl	8005614 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800572c:	2320      	movs	r3, #32
 800572e:	b950      	cbnz	r0, 8005746 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8005730:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8005734:	e00a      	b.n	800574c <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005736:	4643      	mov	r3, r8
 8005738:	464a      	mov	r2, r9
 800573a:	2180      	movs	r1, #128	@ 0x80
 800573c:	4620      	mov	r0, r4
 800573e:	f7ff ff69 	bl	8005614 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8005742:	b128      	cbz	r0, 8005750 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8005744:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8005746:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8005748:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800574c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005750:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005752:	b94e      	cbnz	r6, 8005768 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005754:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005758:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800575c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800575e:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8005760:	3901      	subs	r1, #1
 8005762:	b289      	uxth	r1, r1
 8005764:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8005766:	e7d8      	b.n	800571a <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005768:	f816 3b01 	ldrb.w	r3, [r6], #1
 800576c:	e7f6      	b.n	800575c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800576e:	2002      	movs	r0, #2
 8005770:	e7ec      	b.n	800574c <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8005772:	2001      	movs	r0, #1
 8005774:	e7ea      	b.n	800574c <HAL_UART_Transmit+0x72>

08005776 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8005776:	4770      	bx	lr

08005778 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005778:	4770      	bx	lr

0800577a <UART_DMAAbortOnError>:
{
 800577a:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800577c:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8005780:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005782:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8005784:	f7ff fff8 	bl	8005778 <HAL_UART_ErrorCallback>
}
 8005788:	bd08      	pop	{r3, pc}

0800578a <HAL_UARTEx_RxEventCallback>:
}
 800578a:	4770      	bx	lr

0800578c <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800578c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005790:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005792:	2b22      	cmp	r3, #34	@ 0x22
 8005794:	d145      	bne.n	8005822 <UART_Receive_IT.isra.0+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005796:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005798:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800579e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a0:	d142      	bne.n	8005828 <UART_Receive_IT.isra.0+0x9c>
 80057a2:	6901      	ldr	r1, [r0, #16]
 80057a4:	2900      	cmp	r1, #0
 80057a6:	d142      	bne.n	800582e <UART_Receive_IT.isra.0+0xa2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ae:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80057b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80057b2:	3302      	adds	r3, #2
 80057b4:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80057b6:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d12f      	bne.n	8005822 <UART_Receive_IT.isra.0+0x96>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057c2:	6801      	ldr	r1, [r0, #0]
 80057c4:	68ca      	ldr	r2, [r1, #12]
 80057c6:	f022 0220 	bic.w	r2, r2, #32
 80057ca:	60ca      	str	r2, [r1, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057cc:	6801      	ldr	r1, [r0, #0]
 80057ce:	68ca      	ldr	r2, [r1, #12]
 80057d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057d4:	60ca      	str	r2, [r1, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057d6:	6801      	ldr	r1, [r0, #0]
 80057d8:	694a      	ldr	r2, [r1, #20]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	614a      	str	r2, [r1, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80057e0:	2220      	movs	r2, #32
 80057e2:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057e6:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80057ea:	2a01      	cmp	r2, #1
 80057ec:	d129      	bne.n	8005842 <UART_Receive_IT.isra.0+0xb6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	f101 030c 	add.w	r3, r1, #12
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	310c      	adds	r1, #12
 8005800:	e841 3200 	strex	r2, r3, [r1]
 8005804:	2a00      	cmp	r2, #0
 8005806:	d1f3      	bne.n	80057f0 <UART_Receive_IT.isra.0+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005808:	6803      	ldr	r3, [r0, #0]
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	06c9      	lsls	r1, r1, #27
 800580e:	d505      	bpl.n	800581c <UART_Receive_IT.isra.0+0x90>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005810:	9201      	str	r2, [sp, #4]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	9201      	str	r2, [sp, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800581c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800581e:	f7ff ffb4 	bl	800578a <HAL_UARTEx_RxEventCallback>
}
 8005822:	b003      	add	sp, #12
 8005824:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005828:	b939      	cbnz	r1, 800583a <UART_Receive_IT.isra.0+0xae>
 800582a:	6901      	ldr	r1, [r0, #16]
 800582c:	b929      	cbnz	r1, 800583a <UART_Receive_IT.isra.0+0xae>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005834:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005836:	3301      	adds	r3, #1
 8005838:	e7bc      	b.n	80057b4 <UART_Receive_IT.isra.0+0x28>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005840:	e7f7      	b.n	8005832 <UART_Receive_IT.isra.0+0xa6>
        HAL_UART_RxCpltCallback(huart);
 8005842:	f7fc fa1d 	bl	8001c80 <HAL_UART_RxCpltCallback>
 8005846:	e7ec      	b.n	8005822 <UART_Receive_IT.isra.0+0x96>

08005848 <HAL_UART_IRQHandler>:
{
 8005848:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800584a:	6803      	ldr	r3, [r0, #0]
{
 800584c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800584e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005850:	68d9      	ldr	r1, [r3, #12]
  if (errorflags == RESET)
 8005852:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005856:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8005858:	d108      	bne.n	800586c <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800585a:	0695      	lsls	r5, r2, #26
 800585c:	d56a      	bpl.n	8005934 <HAL_UART_IRQHandler+0xec>
 800585e:	068d      	lsls	r5, r1, #26
 8005860:	d568      	bpl.n	8005934 <HAL_UART_IRQHandler+0xec>
}
 8005862:	b003      	add	sp, #12
 8005864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 8005868:	f7ff bf90 	b.w	800578c <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800586c:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005870:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 8005874:	4305      	orrs	r5, r0
 8005876:	d05d      	beq.n	8005934 <HAL_UART_IRQHandler+0xec>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005878:	07d5      	lsls	r5, r2, #31
 800587a:	d505      	bpl.n	8005888 <HAL_UART_IRQHandler+0x40>
 800587c:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800587e:	bf42      	ittt	mi
 8005880:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8005882:	f043 0301 	orrmi.w	r3, r3, #1
 8005886:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005888:	0755      	lsls	r5, r2, #29
 800588a:	d504      	bpl.n	8005896 <HAL_UART_IRQHandler+0x4e>
 800588c:	b118      	cbz	r0, 8005896 <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800588e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005890:	f043 0302 	orr.w	r3, r3, #2
 8005894:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005896:	0793      	lsls	r3, r2, #30
 8005898:	d504      	bpl.n	80058a4 <HAL_UART_IRQHandler+0x5c>
 800589a:	b118      	cbz	r0, 80058a4 <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800589c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800589e:	f043 0304 	orr.w	r3, r3, #4
 80058a2:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058a4:	0715      	lsls	r5, r2, #28
 80058a6:	d507      	bpl.n	80058b8 <HAL_UART_IRQHandler+0x70>
 80058a8:	f001 0320 	and.w	r3, r1, #32
 80058ac:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058ae:	bf1e      	ittt	ne
 80058b0:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 80058b2:	f043 0308 	orrne.w	r3, r3, #8
 80058b6:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058b8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d034      	beq.n	8005928 <HAL_UART_IRQHandler+0xe0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058be:	0690      	lsls	r0, r2, #26
 80058c0:	d504      	bpl.n	80058cc <HAL_UART_IRQHandler+0x84>
 80058c2:	068a      	lsls	r2, r1, #26
 80058c4:	d502      	bpl.n	80058cc <HAL_UART_IRQHandler+0x84>
        UART_Receive_IT(huart);
 80058c6:	4620      	mov	r0, r4
 80058c8:	f7ff ff60 	bl	800578c <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058cc:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80058ce:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058d0:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058d2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058d8:	f002 0208 	and.w	r2, r2, #8
 80058dc:	ea53 0502 	orrs.w	r5, r3, r2
 80058e0:	d024      	beq.n	800592c <HAL_UART_IRQHandler+0xe4>
        UART_EndRxTransfer(huart);
 80058e2:	f7ff fe2d 	bl	8005540 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	065b      	lsls	r3, r3, #25
 80058ec:	d519      	bpl.n	8005922 <HAL_UART_IRQHandler+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	f102 0314 	add.w	r3, r2, #20
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	3214      	adds	r2, #20
 80058fe:	e842 3100 	strex	r1, r3, [r2]
 8005902:	2900      	cmp	r1, #0
 8005904:	d1f3      	bne.n	80058ee <HAL_UART_IRQHandler+0xa6>
          if (huart->hdmarx != NULL)
 8005906:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005908:	b15b      	cbz	r3, 8005922 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800590a:	4a76      	ldr	r2, [pc, #472]	@ (8005ae4 <HAL_UART_IRQHandler+0x29c>)
 800590c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800590e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005910:	f7fd fb3a 	bl	8002f88 <HAL_DMA_Abort_IT>
 8005914:	b140      	cbz	r0, 8005928 <HAL_UART_IRQHandler+0xe0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005916:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005918:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 800591a:	b003      	add	sp, #12
 800591c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005920:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8005922:	4620      	mov	r0, r4
 8005924:	f7ff ff28 	bl	8005778 <HAL_UART_ErrorCallback>
}
 8005928:	b003      	add	sp, #12
 800592a:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800592c:	f7ff ff24 	bl	8005778 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005930:	6465      	str	r5, [r4, #68]	@ 0x44
 8005932:	e7f9      	b.n	8005928 <HAL_UART_IRQHandler+0xe0>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005934:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005936:	2801      	cmp	r0, #1
 8005938:	f040 8094 	bne.w	8005a64 <HAL_UART_IRQHandler+0x21c>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800593c:	06d5      	lsls	r5, r2, #27
 800593e:	f140 8091 	bpl.w	8005a64 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005942:	06c8      	lsls	r0, r1, #27
 8005944:	f140 808e 	bpl.w	8005a64 <HAL_UART_IRQHandler+0x21c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005948:	2200      	movs	r2, #0
 800594a:	9201      	str	r2, [sp, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	9201      	str	r2, [sp, #4]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	9201      	str	r2, [sp, #4]
 8005954:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	065d      	lsls	r5, r3, #25
 800595a:	d54d      	bpl.n	80059f8 <HAL_UART_IRQHandler+0x1b0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800595c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800595e:	6813      	ldr	r3, [r2, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0df      	beq.n	8005928 <HAL_UART_IRQHandler+0xe0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005968:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800596a:	4299      	cmp	r1, r3
 800596c:	d9dc      	bls.n	8005928 <HAL_UART_IRQHandler+0xe0>
        huart->RxXferCount = nb_remaining_rx_data;
 800596e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005970:	6993      	ldr	r3, [r2, #24]
 8005972:	2b20      	cmp	r3, #32
 8005974:	d036      	beq.n	80059e4 <HAL_UART_IRQHandler+0x19c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005976:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	f102 030c 	add.w	r3, r2, #12
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	320c      	adds	r2, #12
 8005986:	e842 3100 	strex	r1, r3, [r2]
 800598a:	2900      	cmp	r1, #0
 800598c:	d1f3      	bne.n	8005976 <HAL_UART_IRQHandler+0x12e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	f102 0314 	add.w	r3, r2, #20
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	3214      	adds	r2, #20
 800599e:	e842 3100 	strex	r1, r3, [r2]
 80059a2:	2900      	cmp	r1, #0
 80059a4:	d1f3      	bne.n	800598e <HAL_UART_IRQHandler+0x146>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	f101 0314 	add.w	r3, r1, #20
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	3114      	adds	r1, #20
 80059b6:	e841 3200 	strex	r2, r3, [r1]
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	d1f3      	bne.n	80059a6 <HAL_UART_IRQHandler+0x15e>
          huart->RxState = HAL_UART_STATE_READY;
 80059be:	2320      	movs	r3, #32
 80059c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c4:	6322      	str	r2, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f102 030c 	add.w	r3, r2, #12
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	320c      	adds	r2, #12
 80059d6:	e842 3100 	strex	r1, r3, [r2]
 80059da:	2900      	cmp	r1, #0
 80059dc:	d1f3      	bne.n	80059c6 <HAL_UART_IRQHandler+0x17e>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059de:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80059e0:	f7fd fab2 	bl	8002f48 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059e4:	2302      	movs	r3, #2
 80059e6:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059e8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80059ea:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80059ec:	1ac9      	subs	r1, r1, r3
 80059ee:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059f0:	4620      	mov	r0, r4
 80059f2:	f7ff feca 	bl	800578a <HAL_UARTEx_RxEventCallback>
 80059f6:	e797      	b.n	8005928 <HAL_UART_IRQHandler+0xe0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059f8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 80059fa:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059fc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 80059fe:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a00:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	d090      	beq.n	8005928 <HAL_UART_IRQHandler+0xe0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a06:	1ac9      	subs	r1, r1, r3
 8005a08:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	d08c      	beq.n	8005928 <HAL_UART_IRQHandler+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	f102 030c 	add.w	r3, r2, #12
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	320c      	adds	r2, #12
 8005a1e:	e842 3000 	strex	r0, r3, [r2]
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d1f3      	bne.n	8005a0e <HAL_UART_IRQHandler+0x1c6>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	6820      	ldr	r0, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	f100 0314 	add.w	r3, r0, #20
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	3014      	adds	r0, #20
 8005a36:	e840 3200 	strex	r2, r3, [r0]
 8005a3a:	2a00      	cmp	r2, #0
 8005a3c:	d1f3      	bne.n	8005a26 <HAL_UART_IRQHandler+0x1de>
        huart->RxState = HAL_UART_STATE_READY;
 8005a3e:	2320      	movs	r3, #32
 8005a40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a44:	6322      	str	r2, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a46:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	f102 030c 	add.w	r3, r2, #12
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	320c      	adds	r2, #12
 8005a56:	e842 3000 	strex	r0, r3, [r2]
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d1f3      	bne.n	8005a46 <HAL_UART_IRQHandler+0x1fe>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a62:	e7c5      	b.n	80059f0 <HAL_UART_IRQHandler+0x1a8>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a64:	0610      	lsls	r0, r2, #24
 8005a66:	d52b      	bpl.n	8005ac0 <HAL_UART_IRQHandler+0x278>
 8005a68:	060d      	lsls	r5, r1, #24
 8005a6a:	d529      	bpl.n	8005ac0 <HAL_UART_IRQHandler+0x278>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a6c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8005a70:	2a21      	cmp	r2, #33	@ 0x21
 8005a72:	f47f af59 	bne.w	8005928 <HAL_UART_IRQHandler+0xe0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a76:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a78:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a7a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8005a7e:	d11a      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x26e>
 8005a80:	6921      	ldr	r1, [r4, #16]
 8005a82:	b9c1      	cbnz	r1, 8005ab6 <HAL_UART_IRQHandler+0x26e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a8c:	6a23      	ldr	r3, [r4, #32]
 8005a8e:	3302      	adds	r3, #2
 8005a90:	6223      	str	r3, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8005a92:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f47f af44 	bne.w	8005928 <HAL_UART_IRQHandler+0xe0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005aa0:	6822      	ldr	r2, [r4, #0]
 8005aa2:	68d3      	ldr	r3, [r2, #12]
 8005aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	68d3      	ldr	r3, [r2, #12]
 8005aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ab2:	60d3      	str	r3, [r2, #12]
 8005ab4:	e738      	b.n	8005928 <HAL_UART_IRQHandler+0xe0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ab6:	1c51      	adds	r1, r2, #1
 8005ab8:	6221      	str	r1, [r4, #32]
 8005aba:	7812      	ldrb	r2, [r2, #0]
 8005abc:	605a      	str	r2, [r3, #4]
 8005abe:	e7e8      	b.n	8005a92 <HAL_UART_IRQHandler+0x24a>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ac0:	0650      	lsls	r0, r2, #25
 8005ac2:	f57f af31 	bpl.w	8005928 <HAL_UART_IRQHandler+0xe0>
 8005ac6:	064a      	lsls	r2, r1, #25
 8005ac8:	f57f af2e 	bpl.w	8005928 <HAL_UART_IRQHandler+0xe0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005acc:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8005ace:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ad0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ad4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005ad6:	2320      	movs	r3, #32
 8005ad8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8005adc:	f7ff fe4b 	bl	8005776 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8005ae0:	e722      	b.n	8005928 <HAL_UART_IRQHandler+0xe0>
 8005ae2:	bf00      	nop
 8005ae4:	0800577b 	.word	0x0800577b

08005ae8 <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae8:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 8005aea:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aee:	2322      	movs	r3, #34	@ 0x22
 8005af0:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005af4:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 8005af6:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005af8:	8582      	strh	r2, [r0, #44]	@ 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005afa:	b123      	cbz	r3, 8005b06 <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005afc:	6802      	ldr	r2, [r0, #0]
 8005afe:	68d3      	ldr	r3, [r2, #12]
 8005b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b04:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b06:	6802      	ldr	r2, [r0, #0]
 8005b08:	6953      	ldr	r3, [r2, #20]
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b10:	6802      	ldr	r2, [r0, #0]
}
 8005b12:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b14:	68d3      	ldr	r3, [r2, #12]
 8005b16:	f043 0320 	orr.w	r3, r3, #32
 8005b1a:	60d3      	str	r3, [r2, #12]
}
 8005b1c:	4770      	bx	lr

08005b1e <HAL_UART_Receive_IT>:
{
 8005b1e:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b20:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 8005b24:	2e20      	cmp	r6, #32
 8005b26:	d106      	bne.n	8005b36 <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 8005b28:	b141      	cbz	r1, 8005b3c <HAL_UART_Receive_IT+0x1e>
 8005b2a:	b13a      	cbz	r2, 8005b3c <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	2400      	movs	r4, #0
 8005b2e:	6304      	str	r4, [r0, #48]	@ 0x30
}
 8005b30:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b32:	f7ff bfd9 	b.w	8005ae8 <UART_Start_Receive_IT>
    return HAL_BUSY;
 8005b36:	2002      	movs	r0, #2
}
 8005b38:	bc70      	pop	{r4, r5, r6}
 8005b3a:	4770      	bx	lr
      return HAL_ERROR;
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	e7fb      	b.n	8005b38 <HAL_UART_Receive_IT+0x1a>

08005b40 <atof>:
 8005b40:	2100      	movs	r1, #0
 8005b42:	f000 bdfd 	b.w	8006740 <strtod>

08005b46 <atoi>:
 8005b46:	220a      	movs	r2, #10
 8005b48:	2100      	movs	r1, #0
 8005b4a:	f000 be7f 	b.w	800684c <strtol>

08005b4e <sulp>:
 8005b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b52:	460f      	mov	r7, r1
 8005b54:	4690      	mov	r8, r2
 8005b56:	f003 fb3f 	bl	80091d8 <__ulp>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	460d      	mov	r5, r1
 8005b5e:	f1b8 0f00 	cmp.w	r8, #0
 8005b62:	d011      	beq.n	8005b88 <sulp+0x3a>
 8005b64:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005b68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	dd0b      	ble.n	8005b88 <sulp+0x3a>
 8005b70:	2400      	movs	r4, #0
 8005b72:	051b      	lsls	r3, r3, #20
 8005b74:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005b78:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	462b      	mov	r3, r5
 8005b80:	f7fa fcaa 	bl	80004d8 <__aeabi_dmul>
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	4620      	mov	r0, r4
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b90 <_strtod_l>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	b09f      	sub	sp, #124	@ 0x7c
 8005b96:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005b98:	2200      	movs	r2, #0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005b9e:	f04f 0a00 	mov.w	sl, #0
 8005ba2:	f04f 0b00 	mov.w	fp, #0
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	9005      	str	r0, [sp, #20]
 8005baa:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bac:	7811      	ldrb	r1, [r2, #0]
 8005bae:	292b      	cmp	r1, #43	@ 0x2b
 8005bb0:	d048      	beq.n	8005c44 <_strtod_l+0xb4>
 8005bb2:	d836      	bhi.n	8005c22 <_strtod_l+0x92>
 8005bb4:	290d      	cmp	r1, #13
 8005bb6:	d830      	bhi.n	8005c1a <_strtod_l+0x8a>
 8005bb8:	2908      	cmp	r1, #8
 8005bba:	d830      	bhi.n	8005c1e <_strtod_l+0x8e>
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	d039      	beq.n	8005c34 <_strtod_l+0xa4>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005bc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005bc6:	782a      	ldrb	r2, [r5, #0]
 8005bc8:	2a30      	cmp	r2, #48	@ 0x30
 8005bca:	f040 80b1 	bne.w	8005d30 <_strtod_l+0x1a0>
 8005bce:	786a      	ldrb	r2, [r5, #1]
 8005bd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005bd4:	2a58      	cmp	r2, #88	@ 0x58
 8005bd6:	d16c      	bne.n	8005cb2 <_strtod_l+0x122>
 8005bd8:	9302      	str	r3, [sp, #8]
 8005bda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bdc:	4a8e      	ldr	r2, [pc, #568]	@ (8005e18 <_strtod_l+0x288>)
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	ab1a      	add	r3, sp, #104	@ 0x68
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	9805      	ldr	r0, [sp, #20]
 8005be6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005be8:	a919      	add	r1, sp, #100	@ 0x64
 8005bea:	f002 fbe9 	bl	80083c0 <__gethex>
 8005bee:	f010 060f 	ands.w	r6, r0, #15
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	d005      	beq.n	8005c02 <_strtod_l+0x72>
 8005bf6:	2e06      	cmp	r6, #6
 8005bf8:	d126      	bne.n	8005c48 <_strtod_l+0xb8>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	9519      	str	r5, [sp, #100]	@ 0x64
 8005c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f040 8584 	bne.w	8006712 <_strtod_l+0xb82>
 8005c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c0c:	b1bb      	cbz	r3, 8005c3e <_strtod_l+0xae>
 8005c0e:	4650      	mov	r0, sl
 8005c10:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005c14:	b01f      	add	sp, #124	@ 0x7c
 8005c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1a:	2920      	cmp	r1, #32
 8005c1c:	d1d0      	bne.n	8005bc0 <_strtod_l+0x30>
 8005c1e:	3201      	adds	r2, #1
 8005c20:	e7c3      	b.n	8005baa <_strtod_l+0x1a>
 8005c22:	292d      	cmp	r1, #45	@ 0x2d
 8005c24:	d1cc      	bne.n	8005bc0 <_strtod_l+0x30>
 8005c26:	2101      	movs	r1, #1
 8005c28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005c2a:	1c51      	adds	r1, r2, #1
 8005c2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c2e:	7852      	ldrb	r2, [r2, #1]
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	d1c7      	bne.n	8005bc4 <_strtod_l+0x34>
 8005c34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c36:	9419      	str	r4, [sp, #100]	@ 0x64
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f040 8568 	bne.w	800670e <_strtod_l+0xb7e>
 8005c3e:	4650      	mov	r0, sl
 8005c40:	4659      	mov	r1, fp
 8005c42:	e7e7      	b.n	8005c14 <_strtod_l+0x84>
 8005c44:	2100      	movs	r1, #0
 8005c46:	e7ef      	b.n	8005c28 <_strtod_l+0x98>
 8005c48:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005c4a:	b13a      	cbz	r2, 8005c5c <_strtod_l+0xcc>
 8005c4c:	2135      	movs	r1, #53	@ 0x35
 8005c4e:	a81c      	add	r0, sp, #112	@ 0x70
 8005c50:	f003 fbb2 	bl	80093b8 <__copybits>
 8005c54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c56:	9805      	ldr	r0, [sp, #20]
 8005c58:	f002 ff8c 	bl	8008b74 <_Bfree>
 8005c5c:	3e01      	subs	r6, #1
 8005c5e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005c60:	2e04      	cmp	r6, #4
 8005c62:	d806      	bhi.n	8005c72 <_strtod_l+0xe2>
 8005c64:	e8df f006 	tbb	[pc, r6]
 8005c68:	201d0314 	.word	0x201d0314
 8005c6c:	14          	.byte	0x14
 8005c6d:	00          	.byte	0x00
 8005c6e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005c72:	05e1      	lsls	r1, r4, #23
 8005c74:	bf48      	it	mi
 8005c76:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005c7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005c7e:	0d1b      	lsrs	r3, r3, #20
 8005c80:	051b      	lsls	r3, r3, #20
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1bd      	bne.n	8005c02 <_strtod_l+0x72>
 8005c86:	f001 fc43 	bl	8007510 <__errno>
 8005c8a:	2322      	movs	r3, #34	@ 0x22
 8005c8c:	6003      	str	r3, [r0, #0]
 8005c8e:	e7b8      	b.n	8005c02 <_strtod_l+0x72>
 8005c90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005c94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005c98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c9c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ca0:	e7e7      	b.n	8005c72 <_strtod_l+0xe2>
 8005ca2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005e1c <_strtod_l+0x28c>
 8005ca6:	e7e4      	b.n	8005c72 <_strtod_l+0xe2>
 8005ca8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005cac:	f04f 3aff 	mov.w	sl, #4294967295
 8005cb0:	e7df      	b.n	8005c72 <_strtod_l+0xe2>
 8005cb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b30      	cmp	r3, #48	@ 0x30
 8005cbc:	d0f9      	beq.n	8005cb2 <_strtod_l+0x122>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d09f      	beq.n	8005c02 <_strtod_l+0x72>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cc8:	220a      	movs	r2, #10
 8005cca:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ccc:	2300      	movs	r3, #0
 8005cce:	461f      	mov	r7, r3
 8005cd0:	9308      	str	r3, [sp, #32]
 8005cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cd4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005cd6:	7805      	ldrb	r5, [r0, #0]
 8005cd8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005cdc:	b2d9      	uxtb	r1, r3
 8005cde:	2909      	cmp	r1, #9
 8005ce0:	d928      	bls.n	8005d34 <_strtod_l+0x1a4>
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	494e      	ldr	r1, [pc, #312]	@ (8005e20 <_strtod_l+0x290>)
 8005ce6:	f001 fb78 	bl	80073da <strncmp>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d032      	beq.n	8005d54 <_strtod_l+0x1c4>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	4681      	mov	r9, r0
 8005cf4:	463d      	mov	r5, r7
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2a65      	cmp	r2, #101	@ 0x65
 8005cfa:	d001      	beq.n	8005d00 <_strtod_l+0x170>
 8005cfc:	2a45      	cmp	r2, #69	@ 0x45
 8005cfe:	d114      	bne.n	8005d2a <_strtod_l+0x19a>
 8005d00:	b91d      	cbnz	r5, 8005d0a <_strtod_l+0x17a>
 8005d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d04:	4302      	orrs	r2, r0
 8005d06:	d095      	beq.n	8005c34 <_strtod_l+0xa4>
 8005d08:	2500      	movs	r5, #0
 8005d0a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005d0c:	1c62      	adds	r2, r4, #1
 8005d0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d10:	7862      	ldrb	r2, [r4, #1]
 8005d12:	2a2b      	cmp	r2, #43	@ 0x2b
 8005d14:	d077      	beq.n	8005e06 <_strtod_l+0x276>
 8005d16:	2a2d      	cmp	r2, #45	@ 0x2d
 8005d18:	d07b      	beq.n	8005e12 <_strtod_l+0x282>
 8005d1a:	f04f 0c00 	mov.w	ip, #0
 8005d1e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005d22:	2909      	cmp	r1, #9
 8005d24:	f240 8082 	bls.w	8005e2c <_strtod_l+0x29c>
 8005d28:	9419      	str	r4, [sp, #100]	@ 0x64
 8005d2a:	f04f 0800 	mov.w	r8, #0
 8005d2e:	e0a2      	b.n	8005e76 <_strtod_l+0x2e6>
 8005d30:	2300      	movs	r3, #0
 8005d32:	e7c7      	b.n	8005cc4 <_strtod_l+0x134>
 8005d34:	2f08      	cmp	r7, #8
 8005d36:	bfd5      	itete	le
 8005d38:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005d3a:	9908      	ldrgt	r1, [sp, #32]
 8005d3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d40:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005d44:	f100 0001 	add.w	r0, r0, #1
 8005d48:	bfd4      	ite	le
 8005d4a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005d4c:	9308      	strgt	r3, [sp, #32]
 8005d4e:	3701      	adds	r7, #1
 8005d50:	9019      	str	r0, [sp, #100]	@ 0x64
 8005d52:	e7bf      	b.n	8005cd4 <_strtod_l+0x144>
 8005d54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d5a:	785a      	ldrb	r2, [r3, #1]
 8005d5c:	b37f      	cbz	r7, 8005dbe <_strtod_l+0x22e>
 8005d5e:	4681      	mov	r9, r0
 8005d60:	463d      	mov	r5, r7
 8005d62:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005d66:	2b09      	cmp	r3, #9
 8005d68:	d912      	bls.n	8005d90 <_strtod_l+0x200>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7c4      	b.n	8005cf8 <_strtod_l+0x168>
 8005d6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d70:	3001      	adds	r0, #1
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d76:	785a      	ldrb	r2, [r3, #1]
 8005d78:	2a30      	cmp	r2, #48	@ 0x30
 8005d7a:	d0f8      	beq.n	8005d6e <_strtod_l+0x1de>
 8005d7c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	f200 84cb 	bhi.w	800671c <_strtod_l+0xb8c>
 8005d86:	4681      	mov	r9, r0
 8005d88:	2000      	movs	r0, #0
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d90:	3a30      	subs	r2, #48	@ 0x30
 8005d92:	f100 0301 	add.w	r3, r0, #1
 8005d96:	d02a      	beq.n	8005dee <_strtod_l+0x25e>
 8005d98:	4499      	add	r9, r3
 8005d9a:	210a      	movs	r1, #10
 8005d9c:	462b      	mov	r3, r5
 8005d9e:	eb00 0c05 	add.w	ip, r0, r5
 8005da2:	4563      	cmp	r3, ip
 8005da4:	d10d      	bne.n	8005dc2 <_strtod_l+0x232>
 8005da6:	1c69      	adds	r1, r5, #1
 8005da8:	4401      	add	r1, r0
 8005daa:	4428      	add	r0, r5
 8005dac:	2808      	cmp	r0, #8
 8005dae:	dc16      	bgt.n	8005dde <_strtod_l+0x24e>
 8005db0:	230a      	movs	r3, #10
 8005db2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005db4:	fb03 2300 	mla	r3, r3, r0, r2
 8005db8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e018      	b.n	8005df0 <_strtod_l+0x260>
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	e7da      	b.n	8005d78 <_strtod_l+0x1e8>
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	f103 0301 	add.w	r3, r3, #1
 8005dc8:	dc03      	bgt.n	8005dd2 <_strtod_l+0x242>
 8005dca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005dcc:	434e      	muls	r6, r1
 8005dce:	960a      	str	r6, [sp, #40]	@ 0x28
 8005dd0:	e7e7      	b.n	8005da2 <_strtod_l+0x212>
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	bfde      	ittt	le
 8005dd6:	9e08      	ldrle	r6, [sp, #32]
 8005dd8:	434e      	mulle	r6, r1
 8005dda:	9608      	strle	r6, [sp, #32]
 8005ddc:	e7e1      	b.n	8005da2 <_strtod_l+0x212>
 8005dde:	280f      	cmp	r0, #15
 8005de0:	dceb      	bgt.n	8005dba <_strtod_l+0x22a>
 8005de2:	230a      	movs	r3, #10
 8005de4:	9808      	ldr	r0, [sp, #32]
 8005de6:	fb03 2300 	mla	r3, r3, r0, r2
 8005dea:	9308      	str	r3, [sp, #32]
 8005dec:	e7e5      	b.n	8005dba <_strtod_l+0x22a>
 8005dee:	4629      	mov	r1, r5
 8005df0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005df2:	460d      	mov	r5, r1
 8005df4:	1c50      	adds	r0, r2, #1
 8005df6:	9019      	str	r0, [sp, #100]	@ 0x64
 8005df8:	7852      	ldrb	r2, [r2, #1]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	e7b1      	b.n	8005d62 <_strtod_l+0x1d2>
 8005dfe:	f04f 0900 	mov.w	r9, #0
 8005e02:	2301      	movs	r3, #1
 8005e04:	e77d      	b.n	8005d02 <_strtod_l+0x172>
 8005e06:	f04f 0c00 	mov.w	ip, #0
 8005e0a:	1ca2      	adds	r2, r4, #2
 8005e0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e0e:	78a2      	ldrb	r2, [r4, #2]
 8005e10:	e785      	b.n	8005d1e <_strtod_l+0x18e>
 8005e12:	f04f 0c01 	mov.w	ip, #1
 8005e16:	e7f8      	b.n	8005e0a <_strtod_l+0x27a>
 8005e18:	0800a220 	.word	0x0800a220
 8005e1c:	7ff00000 	.word	0x7ff00000
 8005e20:	0800a20a 	.word	0x0800a20a
 8005e24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e26:	1c51      	adds	r1, r2, #1
 8005e28:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e2a:	7852      	ldrb	r2, [r2, #1]
 8005e2c:	2a30      	cmp	r2, #48	@ 0x30
 8005e2e:	d0f9      	beq.n	8005e24 <_strtod_l+0x294>
 8005e30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005e34:	2908      	cmp	r1, #8
 8005e36:	f63f af78 	bhi.w	8005d2a <_strtod_l+0x19a>
 8005e3a:	f04f 080a 	mov.w	r8, #10
 8005e3e:	3a30      	subs	r2, #48	@ 0x30
 8005e40:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e44:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005e46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e48:	1c56      	adds	r6, r2, #1
 8005e4a:	9619      	str	r6, [sp, #100]	@ 0x64
 8005e4c:	7852      	ldrb	r2, [r2, #1]
 8005e4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005e52:	f1be 0f09 	cmp.w	lr, #9
 8005e56:	d939      	bls.n	8005ecc <_strtod_l+0x33c>
 8005e58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005e5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005e5e:	1a76      	subs	r6, r6, r1
 8005e60:	2e08      	cmp	r6, #8
 8005e62:	dc03      	bgt.n	8005e6c <_strtod_l+0x2dc>
 8005e64:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005e66:	4588      	cmp	r8, r1
 8005e68:	bfa8      	it	ge
 8005e6a:	4688      	movge	r8, r1
 8005e6c:	f1bc 0f00 	cmp.w	ip, #0
 8005e70:	d001      	beq.n	8005e76 <_strtod_l+0x2e6>
 8005e72:	f1c8 0800 	rsb	r8, r8, #0
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	d14e      	bne.n	8005f18 <_strtod_l+0x388>
 8005e7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e7c:	4308      	orrs	r0, r1
 8005e7e:	f47f aec0 	bne.w	8005c02 <_strtod_l+0x72>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f47f aed6 	bne.w	8005c34 <_strtod_l+0xa4>
 8005e88:	2a69      	cmp	r2, #105	@ 0x69
 8005e8a:	d028      	beq.n	8005ede <_strtod_l+0x34e>
 8005e8c:	dc25      	bgt.n	8005eda <_strtod_l+0x34a>
 8005e8e:	2a49      	cmp	r2, #73	@ 0x49
 8005e90:	d025      	beq.n	8005ede <_strtod_l+0x34e>
 8005e92:	2a4e      	cmp	r2, #78	@ 0x4e
 8005e94:	f47f aece 	bne.w	8005c34 <_strtod_l+0xa4>
 8005e98:	499a      	ldr	r1, [pc, #616]	@ (8006104 <_strtod_l+0x574>)
 8005e9a:	a819      	add	r0, sp, #100	@ 0x64
 8005e9c:	f002 fcb2 	bl	8008804 <__match>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	f43f aec7 	beq.w	8005c34 <_strtod_l+0xa4>
 8005ea6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b28      	cmp	r3, #40	@ 0x28
 8005eac:	d12e      	bne.n	8005f0c <_strtod_l+0x37c>
 8005eae:	4996      	ldr	r1, [pc, #600]	@ (8006108 <_strtod_l+0x578>)
 8005eb0:	aa1c      	add	r2, sp, #112	@ 0x70
 8005eb2:	a819      	add	r0, sp, #100	@ 0x64
 8005eb4:	f002 fcba 	bl	800882c <__hexnan>
 8005eb8:	2805      	cmp	r0, #5
 8005eba:	d127      	bne.n	8005f0c <_strtod_l+0x37c>
 8005ebc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005ebe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005ec2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005ec6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005eca:	e69a      	b.n	8005c02 <_strtod_l+0x72>
 8005ecc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005ece:	fb08 2101 	mla	r1, r8, r1, r2
 8005ed2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005ed6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ed8:	e7b5      	b.n	8005e46 <_strtod_l+0x2b6>
 8005eda:	2a6e      	cmp	r2, #110	@ 0x6e
 8005edc:	e7da      	b.n	8005e94 <_strtod_l+0x304>
 8005ede:	498b      	ldr	r1, [pc, #556]	@ (800610c <_strtod_l+0x57c>)
 8005ee0:	a819      	add	r0, sp, #100	@ 0x64
 8005ee2:	f002 fc8f 	bl	8008804 <__match>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f43f aea4 	beq.w	8005c34 <_strtod_l+0xa4>
 8005eec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005eee:	4988      	ldr	r1, [pc, #544]	@ (8006110 <_strtod_l+0x580>)
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	a819      	add	r0, sp, #100	@ 0x64
 8005ef4:	9319      	str	r3, [sp, #100]	@ 0x64
 8005ef6:	f002 fc85 	bl	8008804 <__match>
 8005efa:	b910      	cbnz	r0, 8005f02 <_strtod_l+0x372>
 8005efc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005efe:	3301      	adds	r3, #1
 8005f00:	9319      	str	r3, [sp, #100]	@ 0x64
 8005f02:	f04f 0a00 	mov.w	sl, #0
 8005f06:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006114 <_strtod_l+0x584>
 8005f0a:	e67a      	b.n	8005c02 <_strtod_l+0x72>
 8005f0c:	4882      	ldr	r0, [pc, #520]	@ (8006118 <_strtod_l+0x588>)
 8005f0e:	f001 fb51 	bl	80075b4 <nan>
 8005f12:	4682      	mov	sl, r0
 8005f14:	468b      	mov	fp, r1
 8005f16:	e674      	b.n	8005c02 <_strtod_l+0x72>
 8005f18:	eba8 0309 	sub.w	r3, r8, r9
 8005f1c:	2f00      	cmp	r7, #0
 8005f1e:	bf08      	it	eq
 8005f20:	462f      	moveq	r7, r5
 8005f22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005f24:	2d10      	cmp	r5, #16
 8005f26:	462c      	mov	r4, r5
 8005f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f2a:	bfa8      	it	ge
 8005f2c:	2410      	movge	r4, #16
 8005f2e:	f7fa fa59 	bl	80003e4 <__aeabi_ui2d>
 8005f32:	2d09      	cmp	r5, #9
 8005f34:	4682      	mov	sl, r0
 8005f36:	468b      	mov	fp, r1
 8005f38:	dc11      	bgt.n	8005f5e <_strtod_l+0x3ce>
 8005f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f43f ae60 	beq.w	8005c02 <_strtod_l+0x72>
 8005f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f44:	dd76      	ble.n	8006034 <_strtod_l+0x4a4>
 8005f46:	2b16      	cmp	r3, #22
 8005f48:	dc5d      	bgt.n	8006006 <_strtod_l+0x476>
 8005f4a:	4974      	ldr	r1, [pc, #464]	@ (800611c <_strtod_l+0x58c>)
 8005f4c:	4652      	mov	r2, sl
 8005f4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f52:	465b      	mov	r3, fp
 8005f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f58:	f7fa fabe 	bl	80004d8 <__aeabi_dmul>
 8005f5c:	e7d9      	b.n	8005f12 <_strtod_l+0x382>
 8005f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800611c <_strtod_l+0x58c>)
 8005f60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005f68:	f7fa fab6 	bl	80004d8 <__aeabi_dmul>
 8005f6c:	4682      	mov	sl, r0
 8005f6e:	9808      	ldr	r0, [sp, #32]
 8005f70:	468b      	mov	fp, r1
 8005f72:	f7fa fa37 	bl	80003e4 <__aeabi_ui2d>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4650      	mov	r0, sl
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	f7fa f8f5 	bl	800016c <__adddf3>
 8005f82:	2d0f      	cmp	r5, #15
 8005f84:	4682      	mov	sl, r0
 8005f86:	468b      	mov	fp, r1
 8005f88:	ddd7      	ble.n	8005f3a <_strtod_l+0x3aa>
 8005f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f8c:	1b2c      	subs	r4, r5, r4
 8005f8e:	441c      	add	r4, r3
 8005f90:	2c00      	cmp	r4, #0
 8005f92:	f340 8096 	ble.w	80060c2 <_strtod_l+0x532>
 8005f96:	f014 030f 	ands.w	r3, r4, #15
 8005f9a:	d00a      	beq.n	8005fb2 <_strtod_l+0x422>
 8005f9c:	495f      	ldr	r1, [pc, #380]	@ (800611c <_strtod_l+0x58c>)
 8005f9e:	4652      	mov	r2, sl
 8005fa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa8:	465b      	mov	r3, fp
 8005faa:	f7fa fa95 	bl	80004d8 <__aeabi_dmul>
 8005fae:	4682      	mov	sl, r0
 8005fb0:	468b      	mov	fp, r1
 8005fb2:	f034 040f 	bics.w	r4, r4, #15
 8005fb6:	d073      	beq.n	80060a0 <_strtod_l+0x510>
 8005fb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005fbc:	dd48      	ble.n	8006050 <_strtod_l+0x4c0>
 8005fbe:	2400      	movs	r4, #0
 8005fc0:	46a0      	mov	r8, r4
 8005fc2:	46a1      	mov	r9, r4
 8005fc4:	940a      	str	r4, [sp, #40]	@ 0x28
 8005fc6:	2322      	movs	r3, #34	@ 0x22
 8005fc8:	f04f 0a00 	mov.w	sl, #0
 8005fcc:	9a05      	ldr	r2, [sp, #20]
 8005fce:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006114 <_strtod_l+0x584>
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f43f ae13 	beq.w	8005c02 <_strtod_l+0x72>
 8005fdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fde:	9805      	ldr	r0, [sp, #20]
 8005fe0:	f002 fdc8 	bl	8008b74 <_Bfree>
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	9805      	ldr	r0, [sp, #20]
 8005fe8:	f002 fdc4 	bl	8008b74 <_Bfree>
 8005fec:	4641      	mov	r1, r8
 8005fee:	9805      	ldr	r0, [sp, #20]
 8005ff0:	f002 fdc0 	bl	8008b74 <_Bfree>
 8005ff4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ff6:	9805      	ldr	r0, [sp, #20]
 8005ff8:	f002 fdbc 	bl	8008b74 <_Bfree>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	9805      	ldr	r0, [sp, #20]
 8006000:	f002 fdb8 	bl	8008b74 <_Bfree>
 8006004:	e5fd      	b.n	8005c02 <_strtod_l+0x72>
 8006006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006008:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800600c:	4293      	cmp	r3, r2
 800600e:	dbbc      	blt.n	8005f8a <_strtod_l+0x3fa>
 8006010:	4c42      	ldr	r4, [pc, #264]	@ (800611c <_strtod_l+0x58c>)
 8006012:	f1c5 050f 	rsb	r5, r5, #15
 8006016:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800601a:	4652      	mov	r2, sl
 800601c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006020:	465b      	mov	r3, fp
 8006022:	f7fa fa59 	bl	80004d8 <__aeabi_dmul>
 8006026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006028:	1b5d      	subs	r5, r3, r5
 800602a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800602e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006032:	e791      	b.n	8005f58 <_strtod_l+0x3c8>
 8006034:	3316      	adds	r3, #22
 8006036:	dba8      	blt.n	8005f8a <_strtod_l+0x3fa>
 8006038:	4b38      	ldr	r3, [pc, #224]	@ (800611c <_strtod_l+0x58c>)
 800603a:	eba9 0808 	sub.w	r8, r9, r8
 800603e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006042:	4650      	mov	r0, sl
 8006044:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006048:	4659      	mov	r1, fp
 800604a:	f7fa fb6f 	bl	800072c <__aeabi_ddiv>
 800604e:	e760      	b.n	8005f12 <_strtod_l+0x382>
 8006050:	4b33      	ldr	r3, [pc, #204]	@ (8006120 <_strtod_l+0x590>)
 8006052:	4650      	mov	r0, sl
 8006054:	9308      	str	r3, [sp, #32]
 8006056:	2300      	movs	r3, #0
 8006058:	4659      	mov	r1, fp
 800605a:	461e      	mov	r6, r3
 800605c:	1124      	asrs	r4, r4, #4
 800605e:	2c01      	cmp	r4, #1
 8006060:	dc21      	bgt.n	80060a6 <_strtod_l+0x516>
 8006062:	b10b      	cbz	r3, 8006068 <_strtod_l+0x4d8>
 8006064:	4682      	mov	sl, r0
 8006066:	468b      	mov	fp, r1
 8006068:	492d      	ldr	r1, [pc, #180]	@ (8006120 <_strtod_l+0x590>)
 800606a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800606e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006072:	4652      	mov	r2, sl
 8006074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006078:	465b      	mov	r3, fp
 800607a:	f7fa fa2d 	bl	80004d8 <__aeabi_dmul>
 800607e:	4b25      	ldr	r3, [pc, #148]	@ (8006114 <_strtod_l+0x584>)
 8006080:	460a      	mov	r2, r1
 8006082:	400b      	ands	r3, r1
 8006084:	4927      	ldr	r1, [pc, #156]	@ (8006124 <_strtod_l+0x594>)
 8006086:	4682      	mov	sl, r0
 8006088:	428b      	cmp	r3, r1
 800608a:	d898      	bhi.n	8005fbe <_strtod_l+0x42e>
 800608c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006090:	428b      	cmp	r3, r1
 8006092:	bf86      	itte	hi
 8006094:	f04f 3aff 	movhi.w	sl, #4294967295
 8006098:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006128 <_strtod_l+0x598>
 800609c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80060a0:	2300      	movs	r3, #0
 80060a2:	9308      	str	r3, [sp, #32]
 80060a4:	e07a      	b.n	800619c <_strtod_l+0x60c>
 80060a6:	07e2      	lsls	r2, r4, #31
 80060a8:	d505      	bpl.n	80060b6 <_strtod_l+0x526>
 80060aa:	9b08      	ldr	r3, [sp, #32]
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f7fa fa12 	bl	80004d8 <__aeabi_dmul>
 80060b4:	2301      	movs	r3, #1
 80060b6:	9a08      	ldr	r2, [sp, #32]
 80060b8:	3601      	adds	r6, #1
 80060ba:	3208      	adds	r2, #8
 80060bc:	1064      	asrs	r4, r4, #1
 80060be:	9208      	str	r2, [sp, #32]
 80060c0:	e7cd      	b.n	800605e <_strtod_l+0x4ce>
 80060c2:	d0ed      	beq.n	80060a0 <_strtod_l+0x510>
 80060c4:	4264      	negs	r4, r4
 80060c6:	f014 020f 	ands.w	r2, r4, #15
 80060ca:	d00a      	beq.n	80060e2 <_strtod_l+0x552>
 80060cc:	4b13      	ldr	r3, [pc, #76]	@ (800611c <_strtod_l+0x58c>)
 80060ce:	4650      	mov	r0, sl
 80060d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060d4:	4659      	mov	r1, fp
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f7fa fb27 	bl	800072c <__aeabi_ddiv>
 80060de:	4682      	mov	sl, r0
 80060e0:	468b      	mov	fp, r1
 80060e2:	1124      	asrs	r4, r4, #4
 80060e4:	d0dc      	beq.n	80060a0 <_strtod_l+0x510>
 80060e6:	2c1f      	cmp	r4, #31
 80060e8:	dd20      	ble.n	800612c <_strtod_l+0x59c>
 80060ea:	2400      	movs	r4, #0
 80060ec:	46a0      	mov	r8, r4
 80060ee:	46a1      	mov	r9, r4
 80060f0:	940a      	str	r4, [sp, #40]	@ 0x28
 80060f2:	2322      	movs	r3, #34	@ 0x22
 80060f4:	9a05      	ldr	r2, [sp, #20]
 80060f6:	f04f 0a00 	mov.w	sl, #0
 80060fa:	f04f 0b00 	mov.w	fp, #0
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	e768      	b.n	8005fd4 <_strtod_l+0x444>
 8006102:	bf00      	nop
 8006104:	0800a36e 	.word	0x0800a36e
 8006108:	0800a20c 	.word	0x0800a20c
 800610c:	0800a366 	.word	0x0800a366
 8006110:	0800a39e 	.word	0x0800a39e
 8006114:	7ff00000 	.word	0x7ff00000
 8006118:	0800a09a 	.word	0x0800a09a
 800611c:	0800a518 	.word	0x0800a518
 8006120:	0800a4f0 	.word	0x0800a4f0
 8006124:	7ca00000 	.word	0x7ca00000
 8006128:	7fefffff 	.word	0x7fefffff
 800612c:	f014 0310 	ands.w	r3, r4, #16
 8006130:	bf18      	it	ne
 8006132:	236a      	movne	r3, #106	@ 0x6a
 8006134:	4650      	mov	r0, sl
 8006136:	9308      	str	r3, [sp, #32]
 8006138:	4659      	mov	r1, fp
 800613a:	2300      	movs	r3, #0
 800613c:	4ea9      	ldr	r6, [pc, #676]	@ (80063e4 <_strtod_l+0x854>)
 800613e:	07e2      	lsls	r2, r4, #31
 8006140:	d504      	bpl.n	800614c <_strtod_l+0x5bc>
 8006142:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006146:	f7fa f9c7 	bl	80004d8 <__aeabi_dmul>
 800614a:	2301      	movs	r3, #1
 800614c:	1064      	asrs	r4, r4, #1
 800614e:	f106 0608 	add.w	r6, r6, #8
 8006152:	d1f4      	bne.n	800613e <_strtod_l+0x5ae>
 8006154:	b10b      	cbz	r3, 800615a <_strtod_l+0x5ca>
 8006156:	4682      	mov	sl, r0
 8006158:	468b      	mov	fp, r1
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	b1b3      	cbz	r3, 800618c <_strtod_l+0x5fc>
 800615e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006162:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006166:	2b00      	cmp	r3, #0
 8006168:	4659      	mov	r1, fp
 800616a:	dd0f      	ble.n	800618c <_strtod_l+0x5fc>
 800616c:	2b1f      	cmp	r3, #31
 800616e:	dd57      	ble.n	8006220 <_strtod_l+0x690>
 8006170:	2b34      	cmp	r3, #52	@ 0x34
 8006172:	bfd8      	it	le
 8006174:	f04f 33ff 	movle.w	r3, #4294967295
 8006178:	f04f 0a00 	mov.w	sl, #0
 800617c:	bfcf      	iteee	gt
 800617e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006182:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006186:	4093      	lslle	r3, r2
 8006188:	ea03 0b01 	andle.w	fp, r3, r1
 800618c:	2200      	movs	r2, #0
 800618e:	2300      	movs	r3, #0
 8006190:	4650      	mov	r0, sl
 8006192:	4659      	mov	r1, fp
 8006194:	f7fa fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8006198:	2800      	cmp	r0, #0
 800619a:	d1a6      	bne.n	80060ea <_strtod_l+0x55a>
 800619c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800619e:	463a      	mov	r2, r7
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80061a4:	462b      	mov	r3, r5
 80061a6:	9805      	ldr	r0, [sp, #20]
 80061a8:	f002 fd4c 	bl	8008c44 <__s2b>
 80061ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f43f af05 	beq.w	8005fbe <_strtod_l+0x42e>
 80061b4:	2400      	movs	r4, #0
 80061b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061b8:	eba9 0308 	sub.w	r3, r9, r8
 80061bc:	2a00      	cmp	r2, #0
 80061be:	bfa8      	it	ge
 80061c0:	2300      	movge	r3, #0
 80061c2:	46a0      	mov	r8, r4
 80061c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80061c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80061ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80061cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ce:	9805      	ldr	r0, [sp, #20]
 80061d0:	6859      	ldr	r1, [r3, #4]
 80061d2:	f002 fc8f 	bl	8008af4 <_Balloc>
 80061d6:	4681      	mov	r9, r0
 80061d8:	2800      	cmp	r0, #0
 80061da:	f43f aef4 	beq.w	8005fc6 <_strtod_l+0x436>
 80061de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061e0:	300c      	adds	r0, #12
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	f103 010c 	add.w	r1, r3, #12
 80061e8:	3202      	adds	r2, #2
 80061ea:	0092      	lsls	r2, r2, #2
 80061ec:	f001 f9d3 	bl	8007596 <memcpy>
 80061f0:	ab1c      	add	r3, sp, #112	@ 0x70
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	4652      	mov	r2, sl
 80061fa:	465b      	mov	r3, fp
 80061fc:	9805      	ldr	r0, [sp, #20]
 80061fe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006202:	f003 f851 	bl	80092a8 <__d2b>
 8006206:	901a      	str	r0, [sp, #104]	@ 0x68
 8006208:	2800      	cmp	r0, #0
 800620a:	f43f aedc 	beq.w	8005fc6 <_strtod_l+0x436>
 800620e:	2101      	movs	r1, #1
 8006210:	9805      	ldr	r0, [sp, #20]
 8006212:	f002 fdad 	bl	8008d70 <__i2b>
 8006216:	4680      	mov	r8, r0
 8006218:	b948      	cbnz	r0, 800622e <_strtod_l+0x69e>
 800621a:	f04f 0800 	mov.w	r8, #0
 800621e:	e6d2      	b.n	8005fc6 <_strtod_l+0x436>
 8006220:	f04f 32ff 	mov.w	r2, #4294967295
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	ea03 0a0a 	and.w	sl, r3, sl
 800622c:	e7ae      	b.n	800618c <_strtod_l+0x5fc>
 800622e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006230:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006232:	2d00      	cmp	r5, #0
 8006234:	bfab      	itete	ge
 8006236:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006238:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800623a:	18ef      	addge	r7, r5, r3
 800623c:	1b5e      	sublt	r6, r3, r5
 800623e:	9b08      	ldr	r3, [sp, #32]
 8006240:	bfa8      	it	ge
 8006242:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006244:	eba5 0503 	sub.w	r5, r5, r3
 8006248:	4415      	add	r5, r2
 800624a:	4b67      	ldr	r3, [pc, #412]	@ (80063e8 <_strtod_l+0x858>)
 800624c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006250:	bfb8      	it	lt
 8006252:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006254:	429d      	cmp	r5, r3
 8006256:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800625a:	da50      	bge.n	80062fe <_strtod_l+0x76e>
 800625c:	1b5b      	subs	r3, r3, r5
 800625e:	2b1f      	cmp	r3, #31
 8006260:	f04f 0101 	mov.w	r1, #1
 8006264:	eba2 0203 	sub.w	r2, r2, r3
 8006268:	dc3d      	bgt.n	80062e6 <_strtod_l+0x756>
 800626a:	fa01 f303 	lsl.w	r3, r1, r3
 800626e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006270:	2300      	movs	r3, #0
 8006272:	9310      	str	r3, [sp, #64]	@ 0x40
 8006274:	18bd      	adds	r5, r7, r2
 8006276:	9b08      	ldr	r3, [sp, #32]
 8006278:	42af      	cmp	r7, r5
 800627a:	4416      	add	r6, r2
 800627c:	441e      	add	r6, r3
 800627e:	463b      	mov	r3, r7
 8006280:	bfa8      	it	ge
 8006282:	462b      	movge	r3, r5
 8006284:	42b3      	cmp	r3, r6
 8006286:	bfa8      	it	ge
 8006288:	4633      	movge	r3, r6
 800628a:	2b00      	cmp	r3, #0
 800628c:	bfc2      	ittt	gt
 800628e:	1aed      	subgt	r5, r5, r3
 8006290:	1af6      	subgt	r6, r6, r3
 8006292:	1aff      	subgt	r7, r7, r3
 8006294:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006296:	2b00      	cmp	r3, #0
 8006298:	dd16      	ble.n	80062c8 <_strtod_l+0x738>
 800629a:	4641      	mov	r1, r8
 800629c:	461a      	mov	r2, r3
 800629e:	9805      	ldr	r0, [sp, #20]
 80062a0:	f002 fe24 	bl	8008eec <__pow5mult>
 80062a4:	4680      	mov	r8, r0
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d0b7      	beq.n	800621a <_strtod_l+0x68a>
 80062aa:	4601      	mov	r1, r0
 80062ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80062ae:	9805      	ldr	r0, [sp, #20]
 80062b0:	f002 fd74 	bl	8008d9c <__multiply>
 80062b4:	900e      	str	r0, [sp, #56]	@ 0x38
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f43f ae85 	beq.w	8005fc6 <_strtod_l+0x436>
 80062bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80062be:	9805      	ldr	r0, [sp, #20]
 80062c0:	f002 fc58 	bl	8008b74 <_Bfree>
 80062c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	dc1d      	bgt.n	8006308 <_strtod_l+0x778>
 80062cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dd23      	ble.n	800631a <_strtod_l+0x78a>
 80062d2:	4649      	mov	r1, r9
 80062d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80062d6:	9805      	ldr	r0, [sp, #20]
 80062d8:	f002 fe08 	bl	8008eec <__pow5mult>
 80062dc:	4681      	mov	r9, r0
 80062de:	b9e0      	cbnz	r0, 800631a <_strtod_l+0x78a>
 80062e0:	f04f 0900 	mov.w	r9, #0
 80062e4:	e66f      	b.n	8005fc6 <_strtod_l+0x436>
 80062e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80062ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80062ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80062f2:	35e2      	adds	r5, #226	@ 0xe2
 80062f4:	fa01 f305 	lsl.w	r3, r1, r5
 80062f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80062fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80062fc:	e7ba      	b.n	8006274 <_strtod_l+0x6e4>
 80062fe:	2300      	movs	r3, #0
 8006300:	9310      	str	r3, [sp, #64]	@ 0x40
 8006302:	2301      	movs	r3, #1
 8006304:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006306:	e7b5      	b.n	8006274 <_strtod_l+0x6e4>
 8006308:	462a      	mov	r2, r5
 800630a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800630c:	9805      	ldr	r0, [sp, #20]
 800630e:	f002 fe47 	bl	8008fa0 <__lshift>
 8006312:	901a      	str	r0, [sp, #104]	@ 0x68
 8006314:	2800      	cmp	r0, #0
 8006316:	d1d9      	bne.n	80062cc <_strtod_l+0x73c>
 8006318:	e655      	b.n	8005fc6 <_strtod_l+0x436>
 800631a:	2e00      	cmp	r6, #0
 800631c:	dd07      	ble.n	800632e <_strtod_l+0x79e>
 800631e:	4649      	mov	r1, r9
 8006320:	4632      	mov	r2, r6
 8006322:	9805      	ldr	r0, [sp, #20]
 8006324:	f002 fe3c 	bl	8008fa0 <__lshift>
 8006328:	4681      	mov	r9, r0
 800632a:	2800      	cmp	r0, #0
 800632c:	d0d8      	beq.n	80062e0 <_strtod_l+0x750>
 800632e:	2f00      	cmp	r7, #0
 8006330:	dd08      	ble.n	8006344 <_strtod_l+0x7b4>
 8006332:	4641      	mov	r1, r8
 8006334:	463a      	mov	r2, r7
 8006336:	9805      	ldr	r0, [sp, #20]
 8006338:	f002 fe32 	bl	8008fa0 <__lshift>
 800633c:	4680      	mov	r8, r0
 800633e:	2800      	cmp	r0, #0
 8006340:	f43f ae41 	beq.w	8005fc6 <_strtod_l+0x436>
 8006344:	464a      	mov	r2, r9
 8006346:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006348:	9805      	ldr	r0, [sp, #20]
 800634a:	f002 feb1 	bl	80090b0 <__mdiff>
 800634e:	4604      	mov	r4, r0
 8006350:	2800      	cmp	r0, #0
 8006352:	f43f ae38 	beq.w	8005fc6 <_strtod_l+0x436>
 8006356:	68c3      	ldr	r3, [r0, #12]
 8006358:	4641      	mov	r1, r8
 800635a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800635c:	2300      	movs	r3, #0
 800635e:	60c3      	str	r3, [r0, #12]
 8006360:	f002 fe8a 	bl	8009078 <__mcmp>
 8006364:	2800      	cmp	r0, #0
 8006366:	da45      	bge.n	80063f4 <_strtod_l+0x864>
 8006368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800636a:	ea53 030a 	orrs.w	r3, r3, sl
 800636e:	d16b      	bne.n	8006448 <_strtod_l+0x8b8>
 8006370:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006374:	2b00      	cmp	r3, #0
 8006376:	d167      	bne.n	8006448 <_strtod_l+0x8b8>
 8006378:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800637c:	0d1b      	lsrs	r3, r3, #20
 800637e:	051b      	lsls	r3, r3, #20
 8006380:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006384:	d960      	bls.n	8006448 <_strtod_l+0x8b8>
 8006386:	6963      	ldr	r3, [r4, #20]
 8006388:	b913      	cbnz	r3, 8006390 <_strtod_l+0x800>
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	2b01      	cmp	r3, #1
 800638e:	dd5b      	ble.n	8006448 <_strtod_l+0x8b8>
 8006390:	4621      	mov	r1, r4
 8006392:	2201      	movs	r2, #1
 8006394:	9805      	ldr	r0, [sp, #20]
 8006396:	f002 fe03 	bl	8008fa0 <__lshift>
 800639a:	4641      	mov	r1, r8
 800639c:	4604      	mov	r4, r0
 800639e:	f002 fe6b 	bl	8009078 <__mcmp>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	dd50      	ble.n	8006448 <_strtod_l+0x8b8>
 80063a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063aa:	9a08      	ldr	r2, [sp, #32]
 80063ac:	0d1b      	lsrs	r3, r3, #20
 80063ae:	051b      	lsls	r3, r3, #20
 80063b0:	2a00      	cmp	r2, #0
 80063b2:	d06a      	beq.n	800648a <_strtod_l+0x8fa>
 80063b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80063b8:	d867      	bhi.n	800648a <_strtod_l+0x8fa>
 80063ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80063be:	f67f ae98 	bls.w	80060f2 <_strtod_l+0x562>
 80063c2:	4650      	mov	r0, sl
 80063c4:	4659      	mov	r1, fp
 80063c6:	4b09      	ldr	r3, [pc, #36]	@ (80063ec <_strtod_l+0x85c>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	f7fa f885 	bl	80004d8 <__aeabi_dmul>
 80063ce:	4b08      	ldr	r3, [pc, #32]	@ (80063f0 <_strtod_l+0x860>)
 80063d0:	4682      	mov	sl, r0
 80063d2:	400b      	ands	r3, r1
 80063d4:	468b      	mov	fp, r1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f47f ae00 	bne.w	8005fdc <_strtod_l+0x44c>
 80063dc:	2322      	movs	r3, #34	@ 0x22
 80063de:	9a05      	ldr	r2, [sp, #20]
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e5fb      	b.n	8005fdc <_strtod_l+0x44c>
 80063e4:	0800a238 	.word	0x0800a238
 80063e8:	fffffc02 	.word	0xfffffc02
 80063ec:	39500000 	.word	0x39500000
 80063f0:	7ff00000 	.word	0x7ff00000
 80063f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80063f8:	d165      	bne.n	80064c6 <_strtod_l+0x936>
 80063fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80063fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006400:	b35a      	cbz	r2, 800645a <_strtod_l+0x8ca>
 8006402:	4a99      	ldr	r2, [pc, #612]	@ (8006668 <_strtod_l+0xad8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d12b      	bne.n	8006460 <_strtod_l+0x8d0>
 8006408:	9b08      	ldr	r3, [sp, #32]
 800640a:	4651      	mov	r1, sl
 800640c:	b303      	cbz	r3, 8006450 <_strtod_l+0x8c0>
 800640e:	465a      	mov	r2, fp
 8006410:	4b96      	ldr	r3, [pc, #600]	@ (800666c <_strtod_l+0xadc>)
 8006412:	4013      	ands	r3, r2
 8006414:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006418:	f04f 32ff 	mov.w	r2, #4294967295
 800641c:	d81b      	bhi.n	8006456 <_strtod_l+0x8c6>
 800641e:	0d1b      	lsrs	r3, r3, #20
 8006420:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	4299      	cmp	r1, r3
 800642a:	d119      	bne.n	8006460 <_strtod_l+0x8d0>
 800642c:	4b90      	ldr	r3, [pc, #576]	@ (8006670 <_strtod_l+0xae0>)
 800642e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006430:	429a      	cmp	r2, r3
 8006432:	d102      	bne.n	800643a <_strtod_l+0x8aa>
 8006434:	3101      	adds	r1, #1
 8006436:	f43f adc6 	beq.w	8005fc6 <_strtod_l+0x436>
 800643a:	f04f 0a00 	mov.w	sl, #0
 800643e:	4b8b      	ldr	r3, [pc, #556]	@ (800666c <_strtod_l+0xadc>)
 8006440:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006442:	401a      	ands	r2, r3
 8006444:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006448:	9b08      	ldr	r3, [sp, #32]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1b9      	bne.n	80063c2 <_strtod_l+0x832>
 800644e:	e5c5      	b.n	8005fdc <_strtod_l+0x44c>
 8006450:	f04f 33ff 	mov.w	r3, #4294967295
 8006454:	e7e8      	b.n	8006428 <_strtod_l+0x898>
 8006456:	4613      	mov	r3, r2
 8006458:	e7e6      	b.n	8006428 <_strtod_l+0x898>
 800645a:	ea53 030a 	orrs.w	r3, r3, sl
 800645e:	d0a2      	beq.n	80063a6 <_strtod_l+0x816>
 8006460:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006462:	b1db      	cbz	r3, 800649c <_strtod_l+0x90c>
 8006464:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006466:	4213      	tst	r3, r2
 8006468:	d0ee      	beq.n	8006448 <_strtod_l+0x8b8>
 800646a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800646c:	4650      	mov	r0, sl
 800646e:	4659      	mov	r1, fp
 8006470:	9a08      	ldr	r2, [sp, #32]
 8006472:	b1bb      	cbz	r3, 80064a4 <_strtod_l+0x914>
 8006474:	f7ff fb6b 	bl	8005b4e <sulp>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006480:	f7f9 fe74 	bl	800016c <__adddf3>
 8006484:	4682      	mov	sl, r0
 8006486:	468b      	mov	fp, r1
 8006488:	e7de      	b.n	8006448 <_strtod_l+0x8b8>
 800648a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800648e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006492:	f04f 3aff 	mov.w	sl, #4294967295
 8006496:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800649a:	e7d5      	b.n	8006448 <_strtod_l+0x8b8>
 800649c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800649e:	ea13 0f0a 	tst.w	r3, sl
 80064a2:	e7e1      	b.n	8006468 <_strtod_l+0x8d8>
 80064a4:	f7ff fb53 	bl	8005b4e <sulp>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064b0:	f7f9 fe5a 	bl	8000168 <__aeabi_dsub>
 80064b4:	2200      	movs	r2, #0
 80064b6:	2300      	movs	r3, #0
 80064b8:	4682      	mov	sl, r0
 80064ba:	468b      	mov	fp, r1
 80064bc:	f7fa fa74 	bl	80009a8 <__aeabi_dcmpeq>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d0c1      	beq.n	8006448 <_strtod_l+0x8b8>
 80064c4:	e615      	b.n	80060f2 <_strtod_l+0x562>
 80064c6:	4641      	mov	r1, r8
 80064c8:	4620      	mov	r0, r4
 80064ca:	f002 ff45 	bl	8009358 <__ratio>
 80064ce:	2200      	movs	r2, #0
 80064d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80064d4:	4606      	mov	r6, r0
 80064d6:	460f      	mov	r7, r1
 80064d8:	f7fa fa7a 	bl	80009d0 <__aeabi_dcmple>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d06d      	beq.n	80065bc <_strtod_l+0xa2c>
 80064e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d178      	bne.n	80065d8 <_strtod_l+0xa48>
 80064e6:	f1ba 0f00 	cmp.w	sl, #0
 80064ea:	d156      	bne.n	800659a <_strtod_l+0xa0a>
 80064ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d158      	bne.n	80065a8 <_strtod_l+0xa18>
 80064f6:	2200      	movs	r2, #0
 80064f8:	4630      	mov	r0, r6
 80064fa:	4639      	mov	r1, r7
 80064fc:	4b5d      	ldr	r3, [pc, #372]	@ (8006674 <_strtod_l+0xae4>)
 80064fe:	f7fa fa5d 	bl	80009bc <__aeabi_dcmplt>
 8006502:	2800      	cmp	r0, #0
 8006504:	d157      	bne.n	80065b6 <_strtod_l+0xa26>
 8006506:	4630      	mov	r0, r6
 8006508:	4639      	mov	r1, r7
 800650a:	2200      	movs	r2, #0
 800650c:	4b5a      	ldr	r3, [pc, #360]	@ (8006678 <_strtod_l+0xae8>)
 800650e:	f7f9 ffe3 	bl	80004d8 <__aeabi_dmul>
 8006512:	4606      	mov	r6, r0
 8006514:	460f      	mov	r7, r1
 8006516:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800651a:	9606      	str	r6, [sp, #24]
 800651c:	9307      	str	r3, [sp, #28]
 800651e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006522:	4d52      	ldr	r5, [pc, #328]	@ (800666c <_strtod_l+0xadc>)
 8006524:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800652a:	401d      	ands	r5, r3
 800652c:	4b53      	ldr	r3, [pc, #332]	@ (800667c <_strtod_l+0xaec>)
 800652e:	429d      	cmp	r5, r3
 8006530:	f040 80aa 	bne.w	8006688 <_strtod_l+0xaf8>
 8006534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006536:	4650      	mov	r0, sl
 8006538:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800653c:	4659      	mov	r1, fp
 800653e:	f002 fe4b 	bl	80091d8 <__ulp>
 8006542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006546:	f7f9 ffc7 	bl	80004d8 <__aeabi_dmul>
 800654a:	4652      	mov	r2, sl
 800654c:	465b      	mov	r3, fp
 800654e:	f7f9 fe0d 	bl	800016c <__adddf3>
 8006552:	460b      	mov	r3, r1
 8006554:	4945      	ldr	r1, [pc, #276]	@ (800666c <_strtod_l+0xadc>)
 8006556:	4a4a      	ldr	r2, [pc, #296]	@ (8006680 <_strtod_l+0xaf0>)
 8006558:	4019      	ands	r1, r3
 800655a:	4291      	cmp	r1, r2
 800655c:	4682      	mov	sl, r0
 800655e:	d942      	bls.n	80065e6 <_strtod_l+0xa56>
 8006560:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006562:	4b43      	ldr	r3, [pc, #268]	@ (8006670 <_strtod_l+0xae0>)
 8006564:	429a      	cmp	r2, r3
 8006566:	d103      	bne.n	8006570 <_strtod_l+0x9e0>
 8006568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800656a:	3301      	adds	r3, #1
 800656c:	f43f ad2b 	beq.w	8005fc6 <_strtod_l+0x436>
 8006570:	f04f 3aff 	mov.w	sl, #4294967295
 8006574:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006670 <_strtod_l+0xae0>
 8006578:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800657a:	9805      	ldr	r0, [sp, #20]
 800657c:	f002 fafa 	bl	8008b74 <_Bfree>
 8006580:	4649      	mov	r1, r9
 8006582:	9805      	ldr	r0, [sp, #20]
 8006584:	f002 faf6 	bl	8008b74 <_Bfree>
 8006588:	4641      	mov	r1, r8
 800658a:	9805      	ldr	r0, [sp, #20]
 800658c:	f002 faf2 	bl	8008b74 <_Bfree>
 8006590:	4621      	mov	r1, r4
 8006592:	9805      	ldr	r0, [sp, #20]
 8006594:	f002 faee 	bl	8008b74 <_Bfree>
 8006598:	e618      	b.n	80061cc <_strtod_l+0x63c>
 800659a:	f1ba 0f01 	cmp.w	sl, #1
 800659e:	d103      	bne.n	80065a8 <_strtod_l+0xa18>
 80065a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f43f ada5 	beq.w	80060f2 <_strtod_l+0x562>
 80065a8:	2200      	movs	r2, #0
 80065aa:	4b36      	ldr	r3, [pc, #216]	@ (8006684 <_strtod_l+0xaf4>)
 80065ac:	2600      	movs	r6, #0
 80065ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065b2:	4f30      	ldr	r7, [pc, #192]	@ (8006674 <_strtod_l+0xae4>)
 80065b4:	e7b3      	b.n	800651e <_strtod_l+0x98e>
 80065b6:	2600      	movs	r6, #0
 80065b8:	4f2f      	ldr	r7, [pc, #188]	@ (8006678 <_strtod_l+0xae8>)
 80065ba:	e7ac      	b.n	8006516 <_strtod_l+0x986>
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006678 <_strtod_l+0xae8>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	f7f9 ff88 	bl	80004d8 <__aeabi_dmul>
 80065c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065ca:	4606      	mov	r6, r0
 80065cc:	460f      	mov	r7, r1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0a1      	beq.n	8006516 <_strtod_l+0x986>
 80065d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80065d6:	e7a2      	b.n	800651e <_strtod_l+0x98e>
 80065d8:	2200      	movs	r2, #0
 80065da:	4b26      	ldr	r3, [pc, #152]	@ (8006674 <_strtod_l+0xae4>)
 80065dc:	4616      	mov	r6, r2
 80065de:	461f      	mov	r7, r3
 80065e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065e4:	e79b      	b.n	800651e <_strtod_l+0x98e>
 80065e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80065ea:	9b08      	ldr	r3, [sp, #32]
 80065ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1c1      	bne.n	8006578 <_strtod_l+0x9e8>
 80065f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80065f8:	0d1b      	lsrs	r3, r3, #20
 80065fa:	051b      	lsls	r3, r3, #20
 80065fc:	429d      	cmp	r5, r3
 80065fe:	d1bb      	bne.n	8006578 <_strtod_l+0x9e8>
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7fa fd34 	bl	8001070 <__aeabi_d2lz>
 8006608:	f7f9 ff38 	bl	800047c <__aeabi_l2d>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4630      	mov	r0, r6
 8006612:	4639      	mov	r1, r7
 8006614:	f7f9 fda8 	bl	8000168 <__aeabi_dsub>
 8006618:	460b      	mov	r3, r1
 800661a:	4602      	mov	r2, r0
 800661c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006620:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006626:	ea46 060a 	orr.w	r6, r6, sl
 800662a:	431e      	orrs	r6, r3
 800662c:	d069      	beq.n	8006702 <_strtod_l+0xb72>
 800662e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006658 <_strtod_l+0xac8>)
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f7fa f9c2 	bl	80009bc <__aeabi_dcmplt>
 8006638:	2800      	cmp	r0, #0
 800663a:	f47f accf 	bne.w	8005fdc <_strtod_l+0x44c>
 800663e:	a308      	add	r3, pc, #32	@ (adr r3, 8006660 <_strtod_l+0xad0>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006648:	f7fa f9d6 	bl	80009f8 <__aeabi_dcmpgt>
 800664c:	2800      	cmp	r0, #0
 800664e:	d093      	beq.n	8006578 <_strtod_l+0x9e8>
 8006650:	e4c4      	b.n	8005fdc <_strtod_l+0x44c>
 8006652:	bf00      	nop
 8006654:	f3af 8000 	nop.w
 8006658:	94a03595 	.word	0x94a03595
 800665c:	3fdfffff 	.word	0x3fdfffff
 8006660:	35afe535 	.word	0x35afe535
 8006664:	3fe00000 	.word	0x3fe00000
 8006668:	000fffff 	.word	0x000fffff
 800666c:	7ff00000 	.word	0x7ff00000
 8006670:	7fefffff 	.word	0x7fefffff
 8006674:	3ff00000 	.word	0x3ff00000
 8006678:	3fe00000 	.word	0x3fe00000
 800667c:	7fe00000 	.word	0x7fe00000
 8006680:	7c9fffff 	.word	0x7c9fffff
 8006684:	bff00000 	.word	0xbff00000
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	b323      	cbz	r3, 80066d6 <_strtod_l+0xb46>
 800668c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006690:	d821      	bhi.n	80066d6 <_strtod_l+0xb46>
 8006692:	a327      	add	r3, pc, #156	@ (adr r3, 8006730 <_strtod_l+0xba0>)
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	4630      	mov	r0, r6
 800669a:	4639      	mov	r1, r7
 800669c:	f7fa f998 	bl	80009d0 <__aeabi_dcmple>
 80066a0:	b1a0      	cbz	r0, 80066cc <_strtod_l+0xb3c>
 80066a2:	4639      	mov	r1, r7
 80066a4:	4630      	mov	r0, r6
 80066a6:	f7fa f9ef 	bl	8000a88 <__aeabi_d2uiz>
 80066aa:	2801      	cmp	r0, #1
 80066ac:	bf38      	it	cc
 80066ae:	2001      	movcc	r0, #1
 80066b0:	f7f9 fe98 	bl	80003e4 <__aeabi_ui2d>
 80066b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	b9fb      	cbnz	r3, 80066fc <_strtod_l+0xb6c>
 80066bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80066c0:	9014      	str	r0, [sp, #80]	@ 0x50
 80066c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80066c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80066c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80066cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80066ce:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80066d2:	1b5b      	subs	r3, r3, r5
 80066d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80066d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80066de:	f002 fd7b 	bl	80091d8 <__ulp>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4650      	mov	r0, sl
 80066e8:	4659      	mov	r1, fp
 80066ea:	f7f9 fef5 	bl	80004d8 <__aeabi_dmul>
 80066ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80066f2:	f7f9 fd3b 	bl	800016c <__adddf3>
 80066f6:	4682      	mov	sl, r0
 80066f8:	468b      	mov	fp, r1
 80066fa:	e776      	b.n	80065ea <_strtod_l+0xa5a>
 80066fc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006700:	e7e0      	b.n	80066c4 <_strtod_l+0xb34>
 8006702:	a30d      	add	r3, pc, #52	@ (adr r3, 8006738 <_strtod_l+0xba8>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7fa f958 	bl	80009bc <__aeabi_dcmplt>
 800670c:	e79e      	b.n	800664c <_strtod_l+0xabc>
 800670e:	2300      	movs	r3, #0
 8006710:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006714:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	f7ff ba77 	b.w	8005c0a <_strtod_l+0x7a>
 800671c:	2a65      	cmp	r2, #101	@ 0x65
 800671e:	f43f ab6e 	beq.w	8005dfe <_strtod_l+0x26e>
 8006722:	2a45      	cmp	r2, #69	@ 0x45
 8006724:	f43f ab6b 	beq.w	8005dfe <_strtod_l+0x26e>
 8006728:	2301      	movs	r3, #1
 800672a:	f7ff bba6 	b.w	8005e7a <_strtod_l+0x2ea>
 800672e:	bf00      	nop
 8006730:	ffc00000 	.word	0xffc00000
 8006734:	41dfffff 	.word	0x41dfffff
 8006738:	94a03595 	.word	0x94a03595
 800673c:	3fcfffff 	.word	0x3fcfffff

08006740 <strtod>:
 8006740:	460a      	mov	r2, r1
 8006742:	4601      	mov	r1, r0
 8006744:	4802      	ldr	r0, [pc, #8]	@ (8006750 <strtod+0x10>)
 8006746:	4b03      	ldr	r3, [pc, #12]	@ (8006754 <strtod+0x14>)
 8006748:	6800      	ldr	r0, [r0, #0]
 800674a:	f7ff ba21 	b.w	8005b90 <_strtod_l>
 800674e:	bf00      	nop
 8006750:	20000184 	.word	0x20000184
 8006754:	20000018 	.word	0x20000018

08006758 <_strtol_l.constprop.0>:
 8006758:	2b24      	cmp	r3, #36	@ 0x24
 800675a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800675e:	4686      	mov	lr, r0
 8006760:	4690      	mov	r8, r2
 8006762:	d801      	bhi.n	8006768 <_strtol_l.constprop.0+0x10>
 8006764:	2b01      	cmp	r3, #1
 8006766:	d106      	bne.n	8006776 <_strtol_l.constprop.0+0x1e>
 8006768:	f000 fed2 	bl	8007510 <__errno>
 800676c:	2316      	movs	r3, #22
 800676e:	6003      	str	r3, [r0, #0]
 8006770:	2000      	movs	r0, #0
 8006772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006776:	460d      	mov	r5, r1
 8006778:	4833      	ldr	r0, [pc, #204]	@ (8006848 <_strtol_l.constprop.0+0xf0>)
 800677a:	462a      	mov	r2, r5
 800677c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006780:	5d06      	ldrb	r6, [r0, r4]
 8006782:	f016 0608 	ands.w	r6, r6, #8
 8006786:	d1f8      	bne.n	800677a <_strtol_l.constprop.0+0x22>
 8006788:	2c2d      	cmp	r4, #45	@ 0x2d
 800678a:	d12d      	bne.n	80067e8 <_strtol_l.constprop.0+0x90>
 800678c:	2601      	movs	r6, #1
 800678e:	782c      	ldrb	r4, [r5, #0]
 8006790:	1c95      	adds	r5, r2, #2
 8006792:	f033 0210 	bics.w	r2, r3, #16
 8006796:	d109      	bne.n	80067ac <_strtol_l.constprop.0+0x54>
 8006798:	2c30      	cmp	r4, #48	@ 0x30
 800679a:	d12a      	bne.n	80067f2 <_strtol_l.constprop.0+0x9a>
 800679c:	782a      	ldrb	r2, [r5, #0]
 800679e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067a2:	2a58      	cmp	r2, #88	@ 0x58
 80067a4:	d125      	bne.n	80067f2 <_strtol_l.constprop.0+0x9a>
 80067a6:	2310      	movs	r3, #16
 80067a8:	786c      	ldrb	r4, [r5, #1]
 80067aa:	3502      	adds	r5, #2
 80067ac:	2200      	movs	r2, #0
 80067ae:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80067b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80067b6:	fbbc f9f3 	udiv	r9, ip, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80067c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80067c4:	2f09      	cmp	r7, #9
 80067c6:	d81b      	bhi.n	8006800 <_strtol_l.constprop.0+0xa8>
 80067c8:	463c      	mov	r4, r7
 80067ca:	42a3      	cmp	r3, r4
 80067cc:	dd27      	ble.n	800681e <_strtol_l.constprop.0+0xc6>
 80067ce:	1c57      	adds	r7, r2, #1
 80067d0:	d007      	beq.n	80067e2 <_strtol_l.constprop.0+0x8a>
 80067d2:	4581      	cmp	r9, r0
 80067d4:	d320      	bcc.n	8006818 <_strtol_l.constprop.0+0xc0>
 80067d6:	d101      	bne.n	80067dc <_strtol_l.constprop.0+0x84>
 80067d8:	45a2      	cmp	sl, r4
 80067da:	db1d      	blt.n	8006818 <_strtol_l.constprop.0+0xc0>
 80067dc:	2201      	movs	r2, #1
 80067de:	fb00 4003 	mla	r0, r0, r3, r4
 80067e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067e6:	e7eb      	b.n	80067c0 <_strtol_l.constprop.0+0x68>
 80067e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80067ea:	bf04      	itt	eq
 80067ec:	782c      	ldrbeq	r4, [r5, #0]
 80067ee:	1c95      	addeq	r5, r2, #2
 80067f0:	e7cf      	b.n	8006792 <_strtol_l.constprop.0+0x3a>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1da      	bne.n	80067ac <_strtol_l.constprop.0+0x54>
 80067f6:	2c30      	cmp	r4, #48	@ 0x30
 80067f8:	bf0c      	ite	eq
 80067fa:	2308      	moveq	r3, #8
 80067fc:	230a      	movne	r3, #10
 80067fe:	e7d5      	b.n	80067ac <_strtol_l.constprop.0+0x54>
 8006800:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006804:	2f19      	cmp	r7, #25
 8006806:	d801      	bhi.n	800680c <_strtol_l.constprop.0+0xb4>
 8006808:	3c37      	subs	r4, #55	@ 0x37
 800680a:	e7de      	b.n	80067ca <_strtol_l.constprop.0+0x72>
 800680c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006810:	2f19      	cmp	r7, #25
 8006812:	d804      	bhi.n	800681e <_strtol_l.constprop.0+0xc6>
 8006814:	3c57      	subs	r4, #87	@ 0x57
 8006816:	e7d8      	b.n	80067ca <_strtol_l.constprop.0+0x72>
 8006818:	f04f 32ff 	mov.w	r2, #4294967295
 800681c:	e7e1      	b.n	80067e2 <_strtol_l.constprop.0+0x8a>
 800681e:	1c53      	adds	r3, r2, #1
 8006820:	d108      	bne.n	8006834 <_strtol_l.constprop.0+0xdc>
 8006822:	2322      	movs	r3, #34	@ 0x22
 8006824:	4660      	mov	r0, ip
 8006826:	f8ce 3000 	str.w	r3, [lr]
 800682a:	f1b8 0f00 	cmp.w	r8, #0
 800682e:	d0a0      	beq.n	8006772 <_strtol_l.constprop.0+0x1a>
 8006830:	1e69      	subs	r1, r5, #1
 8006832:	e006      	b.n	8006842 <_strtol_l.constprop.0+0xea>
 8006834:	b106      	cbz	r6, 8006838 <_strtol_l.constprop.0+0xe0>
 8006836:	4240      	negs	r0, r0
 8006838:	f1b8 0f00 	cmp.w	r8, #0
 800683c:	d099      	beq.n	8006772 <_strtol_l.constprop.0+0x1a>
 800683e:	2a00      	cmp	r2, #0
 8006840:	d1f6      	bne.n	8006830 <_strtol_l.constprop.0+0xd8>
 8006842:	f8c8 1000 	str.w	r1, [r8]
 8006846:	e794      	b.n	8006772 <_strtol_l.constprop.0+0x1a>
 8006848:	0800a261 	.word	0x0800a261

0800684c <strtol>:
 800684c:	4613      	mov	r3, r2
 800684e:	460a      	mov	r2, r1
 8006850:	4601      	mov	r1, r0
 8006852:	4802      	ldr	r0, [pc, #8]	@ (800685c <strtol+0x10>)
 8006854:	6800      	ldr	r0, [r0, #0]
 8006856:	f7ff bf7f 	b.w	8006758 <_strtol_l.constprop.0>
 800685a:	bf00      	nop
 800685c:	20000184 	.word	0x20000184

08006860 <__cvt>:
 8006860:	2b00      	cmp	r3, #0
 8006862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006866:	461d      	mov	r5, r3
 8006868:	bfbb      	ittet	lt
 800686a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800686e:	461d      	movlt	r5, r3
 8006870:	2300      	movge	r3, #0
 8006872:	232d      	movlt	r3, #45	@ 0x2d
 8006874:	b088      	sub	sp, #32
 8006876:	4614      	mov	r4, r2
 8006878:	bfb8      	it	lt
 800687a:	4614      	movlt	r4, r2
 800687c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800687e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006880:	7013      	strb	r3, [r2, #0]
 8006882:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006884:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006888:	f023 0820 	bic.w	r8, r3, #32
 800688c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006890:	d005      	beq.n	800689e <__cvt+0x3e>
 8006892:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006896:	d100      	bne.n	800689a <__cvt+0x3a>
 8006898:	3601      	adds	r6, #1
 800689a:	2302      	movs	r3, #2
 800689c:	e000      	b.n	80068a0 <__cvt+0x40>
 800689e:	2303      	movs	r3, #3
 80068a0:	aa07      	add	r2, sp, #28
 80068a2:	9204      	str	r2, [sp, #16]
 80068a4:	aa06      	add	r2, sp, #24
 80068a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068aa:	e9cd 3600 	strd	r3, r6, [sp]
 80068ae:	4622      	mov	r2, r4
 80068b0:	462b      	mov	r3, r5
 80068b2:	f000 ff0d 	bl	80076d0 <_dtoa_r>
 80068b6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068ba:	4607      	mov	r7, r0
 80068bc:	d119      	bne.n	80068f2 <__cvt+0x92>
 80068be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80068c0:	07db      	lsls	r3, r3, #31
 80068c2:	d50e      	bpl.n	80068e2 <__cvt+0x82>
 80068c4:	eb00 0906 	add.w	r9, r0, r6
 80068c8:	2200      	movs	r2, #0
 80068ca:	2300      	movs	r3, #0
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f7fa f86a 	bl	80009a8 <__aeabi_dcmpeq>
 80068d4:	b108      	cbz	r0, 80068da <__cvt+0x7a>
 80068d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80068da:	2230      	movs	r2, #48	@ 0x30
 80068dc:	9b07      	ldr	r3, [sp, #28]
 80068de:	454b      	cmp	r3, r9
 80068e0:	d31e      	bcc.n	8006920 <__cvt+0xc0>
 80068e2:	4638      	mov	r0, r7
 80068e4:	9b07      	ldr	r3, [sp, #28]
 80068e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80068e8:	1bdb      	subs	r3, r3, r7
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	b008      	add	sp, #32
 80068ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068f6:	eb00 0906 	add.w	r9, r0, r6
 80068fa:	d1e5      	bne.n	80068c8 <__cvt+0x68>
 80068fc:	7803      	ldrb	r3, [r0, #0]
 80068fe:	2b30      	cmp	r3, #48	@ 0x30
 8006900:	d10a      	bne.n	8006918 <__cvt+0xb8>
 8006902:	2200      	movs	r2, #0
 8006904:	2300      	movs	r3, #0
 8006906:	4620      	mov	r0, r4
 8006908:	4629      	mov	r1, r5
 800690a:	f7fa f84d 	bl	80009a8 <__aeabi_dcmpeq>
 800690e:	b918      	cbnz	r0, 8006918 <__cvt+0xb8>
 8006910:	f1c6 0601 	rsb	r6, r6, #1
 8006914:	f8ca 6000 	str.w	r6, [sl]
 8006918:	f8da 3000 	ldr.w	r3, [sl]
 800691c:	4499      	add	r9, r3
 800691e:	e7d3      	b.n	80068c8 <__cvt+0x68>
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	9107      	str	r1, [sp, #28]
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	e7d9      	b.n	80068dc <__cvt+0x7c>

08006928 <__exponent>:
 8006928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800692a:	2900      	cmp	r1, #0
 800692c:	bfb6      	itet	lt
 800692e:	232d      	movlt	r3, #45	@ 0x2d
 8006930:	232b      	movge	r3, #43	@ 0x2b
 8006932:	4249      	neglt	r1, r1
 8006934:	2909      	cmp	r1, #9
 8006936:	7002      	strb	r2, [r0, #0]
 8006938:	7043      	strb	r3, [r0, #1]
 800693a:	dd29      	ble.n	8006990 <__exponent+0x68>
 800693c:	f10d 0307 	add.w	r3, sp, #7
 8006940:	461d      	mov	r5, r3
 8006942:	270a      	movs	r7, #10
 8006944:	fbb1 f6f7 	udiv	r6, r1, r7
 8006948:	461a      	mov	r2, r3
 800694a:	fb07 1416 	mls	r4, r7, r6, r1
 800694e:	3430      	adds	r4, #48	@ 0x30
 8006950:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006954:	460c      	mov	r4, r1
 8006956:	2c63      	cmp	r4, #99	@ 0x63
 8006958:	4631      	mov	r1, r6
 800695a:	f103 33ff 	add.w	r3, r3, #4294967295
 800695e:	dcf1      	bgt.n	8006944 <__exponent+0x1c>
 8006960:	3130      	adds	r1, #48	@ 0x30
 8006962:	1e94      	subs	r4, r2, #2
 8006964:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006968:	4623      	mov	r3, r4
 800696a:	1c41      	adds	r1, r0, #1
 800696c:	42ab      	cmp	r3, r5
 800696e:	d30a      	bcc.n	8006986 <__exponent+0x5e>
 8006970:	f10d 0309 	add.w	r3, sp, #9
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	42ac      	cmp	r4, r5
 8006978:	bf88      	it	hi
 800697a:	2300      	movhi	r3, #0
 800697c:	3302      	adds	r3, #2
 800697e:	4403      	add	r3, r0
 8006980:	1a18      	subs	r0, r3, r0
 8006982:	b003      	add	sp, #12
 8006984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006986:	f813 6b01 	ldrb.w	r6, [r3], #1
 800698a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800698e:	e7ed      	b.n	800696c <__exponent+0x44>
 8006990:	2330      	movs	r3, #48	@ 0x30
 8006992:	3130      	adds	r1, #48	@ 0x30
 8006994:	7083      	strb	r3, [r0, #2]
 8006996:	70c1      	strb	r1, [r0, #3]
 8006998:	1d03      	adds	r3, r0, #4
 800699a:	e7f1      	b.n	8006980 <__exponent+0x58>

0800699c <_printf_float>:
 800699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	b091      	sub	sp, #68	@ 0x44
 80069a2:	460c      	mov	r4, r1
 80069a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80069a8:	4616      	mov	r6, r2
 80069aa:	461f      	mov	r7, r3
 80069ac:	4605      	mov	r5, r0
 80069ae:	f000 fd65 	bl	800747c <_localeconv_r>
 80069b2:	6803      	ldr	r3, [r0, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	9308      	str	r3, [sp, #32]
 80069b8:	f7f9 fbca 	bl	8000150 <strlen>
 80069bc:	2300      	movs	r3, #0
 80069be:	930e      	str	r3, [sp, #56]	@ 0x38
 80069c0:	f8d8 3000 	ldr.w	r3, [r8]
 80069c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80069c6:	3307      	adds	r3, #7
 80069c8:	f023 0307 	bic.w	r3, r3, #7
 80069cc:	f103 0208 	add.w	r2, r3, #8
 80069d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069d4:	f8d4 b000 	ldr.w	fp, [r4]
 80069d8:	f8c8 2000 	str.w	r2, [r8]
 80069dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80069e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069e6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295
 80069ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80069f6:	4b9c      	ldr	r3, [pc, #624]	@ (8006c68 <_printf_float+0x2cc>)
 80069f8:	f7fa f808 	bl	8000a0c <__aeabi_dcmpun>
 80069fc:	bb70      	cbnz	r0, 8006a5c <_printf_float+0xc0>
 80069fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a02:	f04f 32ff 	mov.w	r2, #4294967295
 8006a06:	4b98      	ldr	r3, [pc, #608]	@ (8006c68 <_printf_float+0x2cc>)
 8006a08:	f7f9 ffe2 	bl	80009d0 <__aeabi_dcmple>
 8006a0c:	bb30      	cbnz	r0, 8006a5c <_printf_float+0xc0>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2300      	movs	r3, #0
 8006a12:	4640      	mov	r0, r8
 8006a14:	4649      	mov	r1, r9
 8006a16:	f7f9 ffd1 	bl	80009bc <__aeabi_dcmplt>
 8006a1a:	b110      	cbz	r0, 8006a22 <_printf_float+0x86>
 8006a1c:	232d      	movs	r3, #45	@ 0x2d
 8006a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a22:	4a92      	ldr	r2, [pc, #584]	@ (8006c6c <_printf_float+0x2d0>)
 8006a24:	4b92      	ldr	r3, [pc, #584]	@ (8006c70 <_printf_float+0x2d4>)
 8006a26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a2a:	bf94      	ite	ls
 8006a2c:	4690      	movls	r8, r2
 8006a2e:	4698      	movhi	r8, r3
 8006a30:	2303      	movs	r3, #3
 8006a32:	f04f 0900 	mov.w	r9, #0
 8006a36:	6123      	str	r3, [r4, #16]
 8006a38:	f02b 0304 	bic.w	r3, fp, #4
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	4633      	mov	r3, r6
 8006a40:	4621      	mov	r1, r4
 8006a42:	4628      	mov	r0, r5
 8006a44:	9700      	str	r7, [sp, #0]
 8006a46:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006a48:	f000 f9d4 	bl	8006df4 <_printf_common>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	f040 8090 	bne.w	8006b72 <_printf_float+0x1d6>
 8006a52:	f04f 30ff 	mov.w	r0, #4294967295
 8006a56:	b011      	add	sp, #68	@ 0x44
 8006a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	464b      	mov	r3, r9
 8006a60:	4640      	mov	r0, r8
 8006a62:	4649      	mov	r1, r9
 8006a64:	f7f9 ffd2 	bl	8000a0c <__aeabi_dcmpun>
 8006a68:	b148      	cbz	r0, 8006a7e <_printf_float+0xe2>
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bfb8      	it	lt
 8006a70:	232d      	movlt	r3, #45	@ 0x2d
 8006a72:	4a80      	ldr	r2, [pc, #512]	@ (8006c74 <_printf_float+0x2d8>)
 8006a74:	bfb8      	it	lt
 8006a76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c78 <_printf_float+0x2dc>)
 8006a7c:	e7d3      	b.n	8006a26 <_printf_float+0x8a>
 8006a7e:	6863      	ldr	r3, [r4, #4]
 8006a80:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	d13f      	bne.n	8006b08 <_printf_float+0x16c>
 8006a88:	2306      	movs	r3, #6
 8006a8a:	6063      	str	r3, [r4, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	9206      	str	r2, [sp, #24]
 8006a96:	aa0e      	add	r2, sp, #56	@ 0x38
 8006a98:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006a9c:	aa0d      	add	r2, sp, #52	@ 0x34
 8006a9e:	9203      	str	r2, [sp, #12]
 8006aa0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006aa4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006aa8:	6863      	ldr	r3, [r4, #4]
 8006aaa:	4642      	mov	r2, r8
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	4628      	mov	r0, r5
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ab4:	f7ff fed4 	bl	8006860 <__cvt>
 8006ab8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006aba:	4680      	mov	r8, r0
 8006abc:	2947      	cmp	r1, #71	@ 0x47
 8006abe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006ac0:	d128      	bne.n	8006b14 <_printf_float+0x178>
 8006ac2:	1cc8      	adds	r0, r1, #3
 8006ac4:	db02      	blt.n	8006acc <_printf_float+0x130>
 8006ac6:	6863      	ldr	r3, [r4, #4]
 8006ac8:	4299      	cmp	r1, r3
 8006aca:	dd40      	ble.n	8006b4e <_printf_float+0x1b2>
 8006acc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ad0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	3901      	subs	r1, #1
 8006ad8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006adc:	910d      	str	r1, [sp, #52]	@ 0x34
 8006ade:	f7ff ff23 	bl	8006928 <__exponent>
 8006ae2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ae4:	4681      	mov	r9, r0
 8006ae6:	1813      	adds	r3, r2, r0
 8006ae8:	2a01      	cmp	r2, #1
 8006aea:	6123      	str	r3, [r4, #16]
 8006aec:	dc02      	bgt.n	8006af4 <_printf_float+0x158>
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	07d2      	lsls	r2, r2, #31
 8006af2:	d501      	bpl.n	8006af8 <_printf_float+0x15c>
 8006af4:	3301      	adds	r3, #1
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d09e      	beq.n	8006a3e <_printf_float+0xa2>
 8006b00:	232d      	movs	r3, #45	@ 0x2d
 8006b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b06:	e79a      	b.n	8006a3e <_printf_float+0xa2>
 8006b08:	2947      	cmp	r1, #71	@ 0x47
 8006b0a:	d1bf      	bne.n	8006a8c <_printf_float+0xf0>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1bd      	bne.n	8006a8c <_printf_float+0xf0>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e7ba      	b.n	8006a8a <_printf_float+0xee>
 8006b14:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b18:	d9dc      	bls.n	8006ad4 <_printf_float+0x138>
 8006b1a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b1e:	d118      	bne.n	8006b52 <_printf_float+0x1b6>
 8006b20:	2900      	cmp	r1, #0
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	dd0b      	ble.n	8006b3e <_printf_float+0x1a2>
 8006b26:	6121      	str	r1, [r4, #16]
 8006b28:	b913      	cbnz	r3, 8006b30 <_printf_float+0x194>
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	07d0      	lsls	r0, r2, #31
 8006b2e:	d502      	bpl.n	8006b36 <_printf_float+0x19a>
 8006b30:	3301      	adds	r3, #1
 8006b32:	440b      	add	r3, r1
 8006b34:	6123      	str	r3, [r4, #16]
 8006b36:	f04f 0900 	mov.w	r9, #0
 8006b3a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b3c:	e7dc      	b.n	8006af8 <_printf_float+0x15c>
 8006b3e:	b913      	cbnz	r3, 8006b46 <_printf_float+0x1aa>
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	07d2      	lsls	r2, r2, #31
 8006b44:	d501      	bpl.n	8006b4a <_printf_float+0x1ae>
 8006b46:	3302      	adds	r3, #2
 8006b48:	e7f4      	b.n	8006b34 <_printf_float+0x198>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e7f2      	b.n	8006b34 <_printf_float+0x198>
 8006b4e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b54:	4299      	cmp	r1, r3
 8006b56:	db05      	blt.n	8006b64 <_printf_float+0x1c8>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	6121      	str	r1, [r4, #16]
 8006b5c:	07d8      	lsls	r0, r3, #31
 8006b5e:	d5ea      	bpl.n	8006b36 <_printf_float+0x19a>
 8006b60:	1c4b      	adds	r3, r1, #1
 8006b62:	e7e7      	b.n	8006b34 <_printf_float+0x198>
 8006b64:	2900      	cmp	r1, #0
 8006b66:	bfcc      	ite	gt
 8006b68:	2201      	movgt	r2, #1
 8006b6a:	f1c1 0202 	rsble	r2, r1, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	e7e0      	b.n	8006b34 <_printf_float+0x198>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	055a      	lsls	r2, r3, #21
 8006b76:	d407      	bmi.n	8006b88 <_printf_float+0x1ec>
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	4642      	mov	r2, r8
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	d12b      	bne.n	8006bde <_printf_float+0x242>
 8006b86:	e764      	b.n	8006a52 <_printf_float+0xb6>
 8006b88:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b8c:	f240 80dc 	bls.w	8006d48 <_printf_float+0x3ac>
 8006b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b94:	2200      	movs	r2, #0
 8006b96:	2300      	movs	r3, #0
 8006b98:	f7f9 ff06 	bl	80009a8 <__aeabi_dcmpeq>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d033      	beq.n	8006c08 <_printf_float+0x26c>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	4a35      	ldr	r2, [pc, #212]	@ (8006c7c <_printf_float+0x2e0>)
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	f43f af51 	beq.w	8006a52 <_printf_float+0xb6>
 8006bb0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006bb4:	4543      	cmp	r3, r8
 8006bb6:	db02      	blt.n	8006bbe <_printf_float+0x222>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	07d8      	lsls	r0, r3, #31
 8006bbc:	d50f      	bpl.n	8006bde <_printf_float+0x242>
 8006bbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	47b8      	blx	r7
 8006bc8:	3001      	adds	r0, #1
 8006bca:	f43f af42 	beq.w	8006a52 <_printf_float+0xb6>
 8006bce:	f04f 0900 	mov.w	r9, #0
 8006bd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bd6:	f104 0a1a 	add.w	sl, r4, #26
 8006bda:	45c8      	cmp	r8, r9
 8006bdc:	dc09      	bgt.n	8006bf2 <_printf_float+0x256>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	079b      	lsls	r3, r3, #30
 8006be2:	f100 8102 	bmi.w	8006dea <_printf_float+0x44e>
 8006be6:	68e0      	ldr	r0, [r4, #12]
 8006be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bea:	4298      	cmp	r0, r3
 8006bec:	bfb8      	it	lt
 8006bee:	4618      	movlt	r0, r3
 8006bf0:	e731      	b.n	8006a56 <_printf_float+0xba>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4652      	mov	r2, sl
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f43f af28 	beq.w	8006a52 <_printf_float+0xb6>
 8006c02:	f109 0901 	add.w	r9, r9, #1
 8006c06:	e7e8      	b.n	8006bda <_printf_float+0x23e>
 8006c08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dc38      	bgt.n	8006c80 <_printf_float+0x2e4>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	4a19      	ldr	r2, [pc, #100]	@ (8006c7c <_printf_float+0x2e0>)
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f43f af1a 	beq.w	8006a52 <_printf_float+0xb6>
 8006c1e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006c22:	ea59 0303 	orrs.w	r3, r9, r3
 8006c26:	d102      	bne.n	8006c2e <_printf_float+0x292>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	07d9      	lsls	r1, r3, #31
 8006c2c:	d5d7      	bpl.n	8006bde <_printf_float+0x242>
 8006c2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f af0a 	beq.w	8006a52 <_printf_float+0xb6>
 8006c3e:	f04f 0a00 	mov.w	sl, #0
 8006c42:	f104 0b1a 	add.w	fp, r4, #26
 8006c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c48:	425b      	negs	r3, r3
 8006c4a:	4553      	cmp	r3, sl
 8006c4c:	dc01      	bgt.n	8006c52 <_printf_float+0x2b6>
 8006c4e:	464b      	mov	r3, r9
 8006c50:	e793      	b.n	8006b7a <_printf_float+0x1de>
 8006c52:	2301      	movs	r3, #1
 8006c54:	465a      	mov	r2, fp
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f43f aef8 	beq.w	8006a52 <_printf_float+0xb6>
 8006c62:	f10a 0a01 	add.w	sl, sl, #1
 8006c66:	e7ee      	b.n	8006c46 <_printf_float+0x2aa>
 8006c68:	7fefffff 	.word	0x7fefffff
 8006c6c:	0800a361 	.word	0x0800a361
 8006c70:	0800a365 	.word	0x0800a365
 8006c74:	0800a369 	.word	0x0800a369
 8006c78:	0800a36d 	.word	0x0800a36d
 8006c7c:	0800a371 	.word	0x0800a371
 8006c80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c82:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006c86:	4553      	cmp	r3, sl
 8006c88:	bfa8      	it	ge
 8006c8a:	4653      	movge	r3, sl
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	4699      	mov	r9, r3
 8006c90:	dc36      	bgt.n	8006d00 <_printf_float+0x364>
 8006c92:	f04f 0b00 	mov.w	fp, #0
 8006c96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c9a:	f104 021a 	add.w	r2, r4, #26
 8006c9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ca0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ca2:	eba3 0309 	sub.w	r3, r3, r9
 8006ca6:	455b      	cmp	r3, fp
 8006ca8:	dc31      	bgt.n	8006d0e <_printf_float+0x372>
 8006caa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cac:	459a      	cmp	sl, r3
 8006cae:	dc3a      	bgt.n	8006d26 <_printf_float+0x38a>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	07da      	lsls	r2, r3, #31
 8006cb4:	d437      	bmi.n	8006d26 <_printf_float+0x38a>
 8006cb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cb8:	ebaa 0903 	sub.w	r9, sl, r3
 8006cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cbe:	ebaa 0303 	sub.w	r3, sl, r3
 8006cc2:	4599      	cmp	r9, r3
 8006cc4:	bfa8      	it	ge
 8006cc6:	4699      	movge	r9, r3
 8006cc8:	f1b9 0f00 	cmp.w	r9, #0
 8006ccc:	dc33      	bgt.n	8006d36 <_printf_float+0x39a>
 8006cce:	f04f 0800 	mov.w	r8, #0
 8006cd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cd6:	f104 0b1a 	add.w	fp, r4, #26
 8006cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cdc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ce0:	eba3 0309 	sub.w	r3, r3, r9
 8006ce4:	4543      	cmp	r3, r8
 8006ce6:	f77f af7a 	ble.w	8006bde <_printf_float+0x242>
 8006cea:	2301      	movs	r3, #1
 8006cec:	465a      	mov	r2, fp
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b8      	blx	r7
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f43f aeac 	beq.w	8006a52 <_printf_float+0xb6>
 8006cfa:	f108 0801 	add.w	r8, r8, #1
 8006cfe:	e7ec      	b.n	8006cda <_printf_float+0x33e>
 8006d00:	4642      	mov	r2, r8
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	47b8      	blx	r7
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d1c2      	bne.n	8006c92 <_printf_float+0x2f6>
 8006d0c:	e6a1      	b.n	8006a52 <_printf_float+0xb6>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d16:	47b8      	blx	r7
 8006d18:	3001      	adds	r0, #1
 8006d1a:	f43f ae9a 	beq.w	8006a52 <_printf_float+0xb6>
 8006d1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d20:	f10b 0b01 	add.w	fp, fp, #1
 8006d24:	e7bb      	b.n	8006c9e <_printf_float+0x302>
 8006d26:	4631      	mov	r1, r6
 8006d28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b8      	blx	r7
 8006d30:	3001      	adds	r0, #1
 8006d32:	d1c0      	bne.n	8006cb6 <_printf_float+0x31a>
 8006d34:	e68d      	b.n	8006a52 <_printf_float+0xb6>
 8006d36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d38:	464b      	mov	r3, r9
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	4442      	add	r2, r8
 8006d40:	47b8      	blx	r7
 8006d42:	3001      	adds	r0, #1
 8006d44:	d1c3      	bne.n	8006cce <_printf_float+0x332>
 8006d46:	e684      	b.n	8006a52 <_printf_float+0xb6>
 8006d48:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d4c:	f1ba 0f01 	cmp.w	sl, #1
 8006d50:	dc01      	bgt.n	8006d56 <_printf_float+0x3ba>
 8006d52:	07db      	lsls	r3, r3, #31
 8006d54:	d536      	bpl.n	8006dc4 <_printf_float+0x428>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4642      	mov	r2, r8
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b8      	blx	r7
 8006d60:	3001      	adds	r0, #1
 8006d62:	f43f ae76 	beq.w	8006a52 <_printf_float+0xb6>
 8006d66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b8      	blx	r7
 8006d70:	3001      	adds	r0, #1
 8006d72:	f43f ae6e 	beq.w	8006a52 <_printf_float+0xb6>
 8006d76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d82:	f7f9 fe11 	bl	80009a8 <__aeabi_dcmpeq>
 8006d86:	b9c0      	cbnz	r0, 8006dba <_printf_float+0x41e>
 8006d88:	4653      	mov	r3, sl
 8006d8a:	f108 0201 	add.w	r2, r8, #1
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4628      	mov	r0, r5
 8006d92:	47b8      	blx	r7
 8006d94:	3001      	adds	r0, #1
 8006d96:	d10c      	bne.n	8006db2 <_printf_float+0x416>
 8006d98:	e65b      	b.n	8006a52 <_printf_float+0xb6>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	465a      	mov	r2, fp
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f ae54 	beq.w	8006a52 <_printf_float+0xb6>
 8006daa:	f108 0801 	add.w	r8, r8, #1
 8006dae:	45d0      	cmp	r8, sl
 8006db0:	dbf3      	blt.n	8006d9a <_printf_float+0x3fe>
 8006db2:	464b      	mov	r3, r9
 8006db4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006db8:	e6e0      	b.n	8006b7c <_printf_float+0x1e0>
 8006dba:	f04f 0800 	mov.w	r8, #0
 8006dbe:	f104 0b1a 	add.w	fp, r4, #26
 8006dc2:	e7f4      	b.n	8006dae <_printf_float+0x412>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	4642      	mov	r2, r8
 8006dc8:	e7e1      	b.n	8006d8e <_printf_float+0x3f2>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	464a      	mov	r2, r9
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b8      	blx	r7
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	f43f ae3c 	beq.w	8006a52 <_printf_float+0xb6>
 8006dda:	f108 0801 	add.w	r8, r8, #1
 8006dde:	68e3      	ldr	r3, [r4, #12]
 8006de0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006de2:	1a5b      	subs	r3, r3, r1
 8006de4:	4543      	cmp	r3, r8
 8006de6:	dcf0      	bgt.n	8006dca <_printf_float+0x42e>
 8006de8:	e6fd      	b.n	8006be6 <_printf_float+0x24a>
 8006dea:	f04f 0800 	mov.w	r8, #0
 8006dee:	f104 0919 	add.w	r9, r4, #25
 8006df2:	e7f4      	b.n	8006dde <_printf_float+0x442>

08006df4 <_printf_common>:
 8006df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	4616      	mov	r6, r2
 8006dfa:	4698      	mov	r8, r3
 8006dfc:	688a      	ldr	r2, [r1, #8]
 8006dfe:	690b      	ldr	r3, [r1, #16]
 8006e00:	4607      	mov	r7, r0
 8006e02:	4293      	cmp	r3, r2
 8006e04:	bfb8      	it	lt
 8006e06:	4613      	movlt	r3, r2
 8006e08:	6033      	str	r3, [r6, #0]
 8006e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e0e:	460c      	mov	r4, r1
 8006e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e14:	b10a      	cbz	r2, 8006e1a <_printf_common+0x26>
 8006e16:	3301      	adds	r3, #1
 8006e18:	6033      	str	r3, [r6, #0]
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	0699      	lsls	r1, r3, #26
 8006e1e:	bf42      	ittt	mi
 8006e20:	6833      	ldrmi	r3, [r6, #0]
 8006e22:	3302      	addmi	r3, #2
 8006e24:	6033      	strmi	r3, [r6, #0]
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	f015 0506 	ands.w	r5, r5, #6
 8006e2c:	d106      	bne.n	8006e3c <_printf_common+0x48>
 8006e2e:	f104 0a19 	add.w	sl, r4, #25
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	6832      	ldr	r2, [r6, #0]
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	42ab      	cmp	r3, r5
 8006e3a:	dc2b      	bgt.n	8006e94 <_printf_common+0xa0>
 8006e3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e40:	6822      	ldr	r2, [r4, #0]
 8006e42:	3b00      	subs	r3, #0
 8006e44:	bf18      	it	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	0692      	lsls	r2, r2, #26
 8006e4a:	d430      	bmi.n	8006eae <_printf_common+0xba>
 8006e4c:	4641      	mov	r1, r8
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e54:	47c8      	blx	r9
 8006e56:	3001      	adds	r0, #1
 8006e58:	d023      	beq.n	8006ea2 <_printf_common+0xae>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	6922      	ldr	r2, [r4, #16]
 8006e5e:	f003 0306 	and.w	r3, r3, #6
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	bf14      	ite	ne
 8006e66:	2500      	movne	r5, #0
 8006e68:	6833      	ldreq	r3, [r6, #0]
 8006e6a:	f04f 0600 	mov.w	r6, #0
 8006e6e:	bf08      	it	eq
 8006e70:	68e5      	ldreq	r5, [r4, #12]
 8006e72:	f104 041a 	add.w	r4, r4, #26
 8006e76:	bf08      	it	eq
 8006e78:	1aed      	subeq	r5, r5, r3
 8006e7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006e7e:	bf08      	it	eq
 8006e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e84:	4293      	cmp	r3, r2
 8006e86:	bfc4      	itt	gt
 8006e88:	1a9b      	subgt	r3, r3, r2
 8006e8a:	18ed      	addgt	r5, r5, r3
 8006e8c:	42b5      	cmp	r5, r6
 8006e8e:	d11a      	bne.n	8006ec6 <_printf_common+0xd2>
 8006e90:	2000      	movs	r0, #0
 8006e92:	e008      	b.n	8006ea6 <_printf_common+0xb2>
 8006e94:	2301      	movs	r3, #1
 8006e96:	4652      	mov	r2, sl
 8006e98:	4641      	mov	r1, r8
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	47c8      	blx	r9
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d103      	bne.n	8006eaa <_printf_common+0xb6>
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eaa:	3501      	adds	r5, #1
 8006eac:	e7c1      	b.n	8006e32 <_printf_common+0x3e>
 8006eae:	2030      	movs	r0, #48	@ 0x30
 8006eb0:	18e1      	adds	r1, r4, r3
 8006eb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ebc:	4422      	add	r2, r4
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ec4:	e7c2      	b.n	8006e4c <_printf_common+0x58>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4622      	mov	r2, r4
 8006eca:	4641      	mov	r1, r8
 8006ecc:	4638      	mov	r0, r7
 8006ece:	47c8      	blx	r9
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d0e6      	beq.n	8006ea2 <_printf_common+0xae>
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7d9      	b.n	8006e8c <_printf_common+0x98>

08006ed8 <_printf_i>:
 8006ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	7e0f      	ldrb	r7, [r1, #24]
 8006ede:	4691      	mov	r9, r2
 8006ee0:	2f78      	cmp	r7, #120	@ 0x78
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	469a      	mov	sl, r3
 8006ee8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006eea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006eee:	d807      	bhi.n	8006f00 <_printf_i+0x28>
 8006ef0:	2f62      	cmp	r7, #98	@ 0x62
 8006ef2:	d80a      	bhi.n	8006f0a <_printf_i+0x32>
 8006ef4:	2f00      	cmp	r7, #0
 8006ef6:	f000 80d3 	beq.w	80070a0 <_printf_i+0x1c8>
 8006efa:	2f58      	cmp	r7, #88	@ 0x58
 8006efc:	f000 80ba 	beq.w	8007074 <_printf_i+0x19c>
 8006f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f08:	e03a      	b.n	8006f80 <_printf_i+0xa8>
 8006f0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f0e:	2b15      	cmp	r3, #21
 8006f10:	d8f6      	bhi.n	8006f00 <_printf_i+0x28>
 8006f12:	a101      	add	r1, pc, #4	@ (adr r1, 8006f18 <_printf_i+0x40>)
 8006f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f18:	08006f71 	.word	0x08006f71
 8006f1c:	08006f85 	.word	0x08006f85
 8006f20:	08006f01 	.word	0x08006f01
 8006f24:	08006f01 	.word	0x08006f01
 8006f28:	08006f01 	.word	0x08006f01
 8006f2c:	08006f01 	.word	0x08006f01
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006f01 	.word	0x08006f01
 8006f38:	08006f01 	.word	0x08006f01
 8006f3c:	08006f01 	.word	0x08006f01
 8006f40:	08006f01 	.word	0x08006f01
 8006f44:	08007087 	.word	0x08007087
 8006f48:	08006faf 	.word	0x08006faf
 8006f4c:	08007041 	.word	0x08007041
 8006f50:	08006f01 	.word	0x08006f01
 8006f54:	08006f01 	.word	0x08006f01
 8006f58:	080070a9 	.word	0x080070a9
 8006f5c:	08006f01 	.word	0x08006f01
 8006f60:	08006faf 	.word	0x08006faf
 8006f64:	08006f01 	.word	0x08006f01
 8006f68:	08006f01 	.word	0x08006f01
 8006f6c:	08007049 	.word	0x08007049
 8006f70:	6833      	ldr	r3, [r6, #0]
 8006f72:	1d1a      	adds	r2, r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6032      	str	r2, [r6, #0]
 8006f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f80:	2301      	movs	r3, #1
 8006f82:	e09e      	b.n	80070c2 <_printf_i+0x1ea>
 8006f84:	6833      	ldr	r3, [r6, #0]
 8006f86:	6820      	ldr	r0, [r4, #0]
 8006f88:	1d19      	adds	r1, r3, #4
 8006f8a:	6031      	str	r1, [r6, #0]
 8006f8c:	0606      	lsls	r6, r0, #24
 8006f8e:	d501      	bpl.n	8006f94 <_printf_i+0xbc>
 8006f90:	681d      	ldr	r5, [r3, #0]
 8006f92:	e003      	b.n	8006f9c <_printf_i+0xc4>
 8006f94:	0645      	lsls	r5, r0, #25
 8006f96:	d5fb      	bpl.n	8006f90 <_printf_i+0xb8>
 8006f98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f9c:	2d00      	cmp	r5, #0
 8006f9e:	da03      	bge.n	8006fa8 <_printf_i+0xd0>
 8006fa0:	232d      	movs	r3, #45	@ 0x2d
 8006fa2:	426d      	negs	r5, r5
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fa8:	230a      	movs	r3, #10
 8006faa:	4859      	ldr	r0, [pc, #356]	@ (8007110 <_printf_i+0x238>)
 8006fac:	e011      	b.n	8006fd2 <_printf_i+0xfa>
 8006fae:	6821      	ldr	r1, [r4, #0]
 8006fb0:	6833      	ldr	r3, [r6, #0]
 8006fb2:	0608      	lsls	r0, r1, #24
 8006fb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fb8:	d402      	bmi.n	8006fc0 <_printf_i+0xe8>
 8006fba:	0649      	lsls	r1, r1, #25
 8006fbc:	bf48      	it	mi
 8006fbe:	b2ad      	uxthmi	r5, r5
 8006fc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fc2:	6033      	str	r3, [r6, #0]
 8006fc4:	bf14      	ite	ne
 8006fc6:	230a      	movne	r3, #10
 8006fc8:	2308      	moveq	r3, #8
 8006fca:	4851      	ldr	r0, [pc, #324]	@ (8007110 <_printf_i+0x238>)
 8006fcc:	2100      	movs	r1, #0
 8006fce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fd2:	6866      	ldr	r6, [r4, #4]
 8006fd4:	2e00      	cmp	r6, #0
 8006fd6:	bfa8      	it	ge
 8006fd8:	6821      	ldrge	r1, [r4, #0]
 8006fda:	60a6      	str	r6, [r4, #8]
 8006fdc:	bfa4      	itt	ge
 8006fde:	f021 0104 	bicge.w	r1, r1, #4
 8006fe2:	6021      	strge	r1, [r4, #0]
 8006fe4:	b90d      	cbnz	r5, 8006fea <_printf_i+0x112>
 8006fe6:	2e00      	cmp	r6, #0
 8006fe8:	d04b      	beq.n	8007082 <_printf_i+0x1aa>
 8006fea:	4616      	mov	r6, r2
 8006fec:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ff0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ff4:	5dc7      	ldrb	r7, [r0, r7]
 8006ff6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ffa:	462f      	mov	r7, r5
 8006ffc:	42bb      	cmp	r3, r7
 8006ffe:	460d      	mov	r5, r1
 8007000:	d9f4      	bls.n	8006fec <_printf_i+0x114>
 8007002:	2b08      	cmp	r3, #8
 8007004:	d10b      	bne.n	800701e <_printf_i+0x146>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	07df      	lsls	r7, r3, #31
 800700a:	d508      	bpl.n	800701e <_printf_i+0x146>
 800700c:	6923      	ldr	r3, [r4, #16]
 800700e:	6861      	ldr	r1, [r4, #4]
 8007010:	4299      	cmp	r1, r3
 8007012:	bfde      	ittt	le
 8007014:	2330      	movle	r3, #48	@ 0x30
 8007016:	f806 3c01 	strble.w	r3, [r6, #-1]
 800701a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800701e:	1b92      	subs	r2, r2, r6
 8007020:	6122      	str	r2, [r4, #16]
 8007022:	464b      	mov	r3, r9
 8007024:	4621      	mov	r1, r4
 8007026:	4640      	mov	r0, r8
 8007028:	f8cd a000 	str.w	sl, [sp]
 800702c:	aa03      	add	r2, sp, #12
 800702e:	f7ff fee1 	bl	8006df4 <_printf_common>
 8007032:	3001      	adds	r0, #1
 8007034:	d14a      	bne.n	80070cc <_printf_i+0x1f4>
 8007036:	f04f 30ff 	mov.w	r0, #4294967295
 800703a:	b004      	add	sp, #16
 800703c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	f043 0320 	orr.w	r3, r3, #32
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	2778      	movs	r7, #120	@ 0x78
 800704a:	4832      	ldr	r0, [pc, #200]	@ (8007114 <_printf_i+0x23c>)
 800704c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	6831      	ldr	r1, [r6, #0]
 8007054:	061f      	lsls	r7, r3, #24
 8007056:	f851 5b04 	ldr.w	r5, [r1], #4
 800705a:	d402      	bmi.n	8007062 <_printf_i+0x18a>
 800705c:	065f      	lsls	r7, r3, #25
 800705e:	bf48      	it	mi
 8007060:	b2ad      	uxthmi	r5, r5
 8007062:	6031      	str	r1, [r6, #0]
 8007064:	07d9      	lsls	r1, r3, #31
 8007066:	bf44      	itt	mi
 8007068:	f043 0320 	orrmi.w	r3, r3, #32
 800706c:	6023      	strmi	r3, [r4, #0]
 800706e:	b11d      	cbz	r5, 8007078 <_printf_i+0x1a0>
 8007070:	2310      	movs	r3, #16
 8007072:	e7ab      	b.n	8006fcc <_printf_i+0xf4>
 8007074:	4826      	ldr	r0, [pc, #152]	@ (8007110 <_printf_i+0x238>)
 8007076:	e7e9      	b.n	800704c <_printf_i+0x174>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	f023 0320 	bic.w	r3, r3, #32
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	e7f6      	b.n	8007070 <_printf_i+0x198>
 8007082:	4616      	mov	r6, r2
 8007084:	e7bd      	b.n	8007002 <_printf_i+0x12a>
 8007086:	6833      	ldr	r3, [r6, #0]
 8007088:	6825      	ldr	r5, [r4, #0]
 800708a:	1d18      	adds	r0, r3, #4
 800708c:	6961      	ldr	r1, [r4, #20]
 800708e:	6030      	str	r0, [r6, #0]
 8007090:	062e      	lsls	r6, r5, #24
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	d501      	bpl.n	800709a <_printf_i+0x1c2>
 8007096:	6019      	str	r1, [r3, #0]
 8007098:	e002      	b.n	80070a0 <_printf_i+0x1c8>
 800709a:	0668      	lsls	r0, r5, #25
 800709c:	d5fb      	bpl.n	8007096 <_printf_i+0x1be>
 800709e:	8019      	strh	r1, [r3, #0]
 80070a0:	2300      	movs	r3, #0
 80070a2:	4616      	mov	r6, r2
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	e7bc      	b.n	8007022 <_printf_i+0x14a>
 80070a8:	6833      	ldr	r3, [r6, #0]
 80070aa:	2100      	movs	r1, #0
 80070ac:	1d1a      	adds	r2, r3, #4
 80070ae:	6032      	str	r2, [r6, #0]
 80070b0:	681e      	ldr	r6, [r3, #0]
 80070b2:	6862      	ldr	r2, [r4, #4]
 80070b4:	4630      	mov	r0, r6
 80070b6:	f000 fa60 	bl	800757a <memchr>
 80070ba:	b108      	cbz	r0, 80070c0 <_printf_i+0x1e8>
 80070bc:	1b80      	subs	r0, r0, r6
 80070be:	6060      	str	r0, [r4, #4]
 80070c0:	6863      	ldr	r3, [r4, #4]
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	2300      	movs	r3, #0
 80070c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ca:	e7aa      	b.n	8007022 <_printf_i+0x14a>
 80070cc:	4632      	mov	r2, r6
 80070ce:	4649      	mov	r1, r9
 80070d0:	4640      	mov	r0, r8
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	47d0      	blx	sl
 80070d6:	3001      	adds	r0, #1
 80070d8:	d0ad      	beq.n	8007036 <_printf_i+0x15e>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	079b      	lsls	r3, r3, #30
 80070de:	d413      	bmi.n	8007108 <_printf_i+0x230>
 80070e0:	68e0      	ldr	r0, [r4, #12]
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	4298      	cmp	r0, r3
 80070e6:	bfb8      	it	lt
 80070e8:	4618      	movlt	r0, r3
 80070ea:	e7a6      	b.n	800703a <_printf_i+0x162>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4632      	mov	r2, r6
 80070f0:	4649      	mov	r1, r9
 80070f2:	4640      	mov	r0, r8
 80070f4:	47d0      	blx	sl
 80070f6:	3001      	adds	r0, #1
 80070f8:	d09d      	beq.n	8007036 <_printf_i+0x15e>
 80070fa:	3501      	adds	r5, #1
 80070fc:	68e3      	ldr	r3, [r4, #12]
 80070fe:	9903      	ldr	r1, [sp, #12]
 8007100:	1a5b      	subs	r3, r3, r1
 8007102:	42ab      	cmp	r3, r5
 8007104:	dcf2      	bgt.n	80070ec <_printf_i+0x214>
 8007106:	e7eb      	b.n	80070e0 <_printf_i+0x208>
 8007108:	2500      	movs	r5, #0
 800710a:	f104 0619 	add.w	r6, r4, #25
 800710e:	e7f5      	b.n	80070fc <_printf_i+0x224>
 8007110:	0800a373 	.word	0x0800a373
 8007114:	0800a384 	.word	0x0800a384

08007118 <std>:
 8007118:	2300      	movs	r3, #0
 800711a:	b510      	push	{r4, lr}
 800711c:	4604      	mov	r4, r0
 800711e:	e9c0 3300 	strd	r3, r3, [r0]
 8007122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007126:	6083      	str	r3, [r0, #8]
 8007128:	8181      	strh	r1, [r0, #12]
 800712a:	6643      	str	r3, [r0, #100]	@ 0x64
 800712c:	81c2      	strh	r2, [r0, #14]
 800712e:	6183      	str	r3, [r0, #24]
 8007130:	4619      	mov	r1, r3
 8007132:	2208      	movs	r2, #8
 8007134:	305c      	adds	r0, #92	@ 0x5c
 8007136:	f000 f948 	bl	80073ca <memset>
 800713a:	4b0d      	ldr	r3, [pc, #52]	@ (8007170 <std+0x58>)
 800713c:	6224      	str	r4, [r4, #32]
 800713e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007140:	4b0c      	ldr	r3, [pc, #48]	@ (8007174 <std+0x5c>)
 8007142:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007144:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <std+0x60>)
 8007146:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007148:	4b0c      	ldr	r3, [pc, #48]	@ (800717c <std+0x64>)
 800714a:	6323      	str	r3, [r4, #48]	@ 0x30
 800714c:	4b0c      	ldr	r3, [pc, #48]	@ (8007180 <std+0x68>)
 800714e:	429c      	cmp	r4, r3
 8007150:	d006      	beq.n	8007160 <std+0x48>
 8007152:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007156:	4294      	cmp	r4, r2
 8007158:	d002      	beq.n	8007160 <std+0x48>
 800715a:	33d0      	adds	r3, #208	@ 0xd0
 800715c:	429c      	cmp	r4, r3
 800715e:	d105      	bne.n	800716c <std+0x54>
 8007160:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007168:	f000 b9fc 	b.w	8007564 <__retarget_lock_init_recursive>
 800716c:	bd10      	pop	{r4, pc}
 800716e:	bf00      	nop
 8007170:	08007345 	.word	0x08007345
 8007174:	08007367 	.word	0x08007367
 8007178:	0800739f 	.word	0x0800739f
 800717c:	080073c3 	.word	0x080073c3
 8007180:	20000774 	.word	0x20000774

08007184 <stdio_exit_handler>:
 8007184:	4a02      	ldr	r2, [pc, #8]	@ (8007190 <stdio_exit_handler+0xc>)
 8007186:	4903      	ldr	r1, [pc, #12]	@ (8007194 <stdio_exit_handler+0x10>)
 8007188:	4803      	ldr	r0, [pc, #12]	@ (8007198 <stdio_exit_handler+0x14>)
 800718a:	f000 b869 	b.w	8007260 <_fwalk_sglue>
 800718e:	bf00      	nop
 8007190:	2000000c 	.word	0x2000000c
 8007194:	08009809 	.word	0x08009809
 8007198:	20000188 	.word	0x20000188

0800719c <cleanup_stdio>:
 800719c:	6841      	ldr	r1, [r0, #4]
 800719e:	4b0c      	ldr	r3, [pc, #48]	@ (80071d0 <cleanup_stdio+0x34>)
 80071a0:	b510      	push	{r4, lr}
 80071a2:	4299      	cmp	r1, r3
 80071a4:	4604      	mov	r4, r0
 80071a6:	d001      	beq.n	80071ac <cleanup_stdio+0x10>
 80071a8:	f002 fb2e 	bl	8009808 <_fflush_r>
 80071ac:	68a1      	ldr	r1, [r4, #8]
 80071ae:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <cleanup_stdio+0x38>)
 80071b0:	4299      	cmp	r1, r3
 80071b2:	d002      	beq.n	80071ba <cleanup_stdio+0x1e>
 80071b4:	4620      	mov	r0, r4
 80071b6:	f002 fb27 	bl	8009808 <_fflush_r>
 80071ba:	68e1      	ldr	r1, [r4, #12]
 80071bc:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <cleanup_stdio+0x3c>)
 80071be:	4299      	cmp	r1, r3
 80071c0:	d004      	beq.n	80071cc <cleanup_stdio+0x30>
 80071c2:	4620      	mov	r0, r4
 80071c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c8:	f002 bb1e 	b.w	8009808 <_fflush_r>
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	bf00      	nop
 80071d0:	20000774 	.word	0x20000774
 80071d4:	200007dc 	.word	0x200007dc
 80071d8:	20000844 	.word	0x20000844

080071dc <global_stdio_init.part.0>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	4b0b      	ldr	r3, [pc, #44]	@ (800720c <global_stdio_init.part.0+0x30>)
 80071e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007210 <global_stdio_init.part.0+0x34>)
 80071e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007214 <global_stdio_init.part.0+0x38>)
 80071e4:	4620      	mov	r0, r4
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	2104      	movs	r1, #4
 80071ea:	2200      	movs	r2, #0
 80071ec:	f7ff ff94 	bl	8007118 <std>
 80071f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071f4:	2201      	movs	r2, #1
 80071f6:	2109      	movs	r1, #9
 80071f8:	f7ff ff8e 	bl	8007118 <std>
 80071fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007200:	2202      	movs	r2, #2
 8007202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007206:	2112      	movs	r1, #18
 8007208:	f7ff bf86 	b.w	8007118 <std>
 800720c:	200008ac 	.word	0x200008ac
 8007210:	20000774 	.word	0x20000774
 8007214:	08007185 	.word	0x08007185

08007218 <__sfp_lock_acquire>:
 8007218:	4801      	ldr	r0, [pc, #4]	@ (8007220 <__sfp_lock_acquire+0x8>)
 800721a:	f000 b9a4 	b.w	8007566 <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	200008b5 	.word	0x200008b5

08007224 <__sfp_lock_release>:
 8007224:	4801      	ldr	r0, [pc, #4]	@ (800722c <__sfp_lock_release+0x8>)
 8007226:	f000 b99f 	b.w	8007568 <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	200008b5 	.word	0x200008b5

08007230 <__sinit>:
 8007230:	b510      	push	{r4, lr}
 8007232:	4604      	mov	r4, r0
 8007234:	f7ff fff0 	bl	8007218 <__sfp_lock_acquire>
 8007238:	6a23      	ldr	r3, [r4, #32]
 800723a:	b11b      	cbz	r3, 8007244 <__sinit+0x14>
 800723c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007240:	f7ff bff0 	b.w	8007224 <__sfp_lock_release>
 8007244:	4b04      	ldr	r3, [pc, #16]	@ (8007258 <__sinit+0x28>)
 8007246:	6223      	str	r3, [r4, #32]
 8007248:	4b04      	ldr	r3, [pc, #16]	@ (800725c <__sinit+0x2c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f5      	bne.n	800723c <__sinit+0xc>
 8007250:	f7ff ffc4 	bl	80071dc <global_stdio_init.part.0>
 8007254:	e7f2      	b.n	800723c <__sinit+0xc>
 8007256:	bf00      	nop
 8007258:	0800719d 	.word	0x0800719d
 800725c:	200008ac 	.word	0x200008ac

08007260 <_fwalk_sglue>:
 8007260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007264:	4607      	mov	r7, r0
 8007266:	4688      	mov	r8, r1
 8007268:	4614      	mov	r4, r2
 800726a:	2600      	movs	r6, #0
 800726c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007270:	f1b9 0901 	subs.w	r9, r9, #1
 8007274:	d505      	bpl.n	8007282 <_fwalk_sglue+0x22>
 8007276:	6824      	ldr	r4, [r4, #0]
 8007278:	2c00      	cmp	r4, #0
 800727a:	d1f7      	bne.n	800726c <_fwalk_sglue+0xc>
 800727c:	4630      	mov	r0, r6
 800727e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007282:	89ab      	ldrh	r3, [r5, #12]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d907      	bls.n	8007298 <_fwalk_sglue+0x38>
 8007288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800728c:	3301      	adds	r3, #1
 800728e:	d003      	beq.n	8007298 <_fwalk_sglue+0x38>
 8007290:	4629      	mov	r1, r5
 8007292:	4638      	mov	r0, r7
 8007294:	47c0      	blx	r8
 8007296:	4306      	orrs	r6, r0
 8007298:	3568      	adds	r5, #104	@ 0x68
 800729a:	e7e9      	b.n	8007270 <_fwalk_sglue+0x10>

0800729c <sniprintf>:
 800729c:	b40c      	push	{r2, r3}
 800729e:	b530      	push	{r4, r5, lr}
 80072a0:	4b17      	ldr	r3, [pc, #92]	@ (8007300 <sniprintf+0x64>)
 80072a2:	1e0c      	subs	r4, r1, #0
 80072a4:	681d      	ldr	r5, [r3, #0]
 80072a6:	b09d      	sub	sp, #116	@ 0x74
 80072a8:	da08      	bge.n	80072bc <sniprintf+0x20>
 80072aa:	238b      	movs	r3, #139	@ 0x8b
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	602b      	str	r3, [r5, #0]
 80072b2:	b01d      	add	sp, #116	@ 0x74
 80072b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072b8:	b002      	add	sp, #8
 80072ba:	4770      	bx	lr
 80072bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80072c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80072c4:	bf0c      	ite	eq
 80072c6:	4623      	moveq	r3, r4
 80072c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80072cc:	9304      	str	r3, [sp, #16]
 80072ce:	9307      	str	r3, [sp, #28]
 80072d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072d4:	9002      	str	r0, [sp, #8]
 80072d6:	9006      	str	r0, [sp, #24]
 80072d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80072dc:	4628      	mov	r0, r5
 80072de:	ab21      	add	r3, sp, #132	@ 0x84
 80072e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072e2:	a902      	add	r1, sp, #8
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	f002 f913 	bl	8009510 <_svfiprintf_r>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	bfbc      	itt	lt
 80072ee:	238b      	movlt	r3, #139	@ 0x8b
 80072f0:	602b      	strlt	r3, [r5, #0]
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d0dd      	beq.n	80072b2 <sniprintf+0x16>
 80072f6:	2200      	movs	r2, #0
 80072f8:	9b02      	ldr	r3, [sp, #8]
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	e7d9      	b.n	80072b2 <sniprintf+0x16>
 80072fe:	bf00      	nop
 8007300:	20000184 	.word	0x20000184

08007304 <siprintf>:
 8007304:	b40e      	push	{r1, r2, r3}
 8007306:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800730a:	b500      	push	{lr}
 800730c:	b09c      	sub	sp, #112	@ 0x70
 800730e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007310:	9002      	str	r0, [sp, #8]
 8007312:	9006      	str	r0, [sp, #24]
 8007314:	9107      	str	r1, [sp, #28]
 8007316:	9104      	str	r1, [sp, #16]
 8007318:	4808      	ldr	r0, [pc, #32]	@ (800733c <siprintf+0x38>)
 800731a:	4909      	ldr	r1, [pc, #36]	@ (8007340 <siprintf+0x3c>)
 800731c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007320:	9105      	str	r1, [sp, #20]
 8007322:	6800      	ldr	r0, [r0, #0]
 8007324:	a902      	add	r1, sp, #8
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	f002 f8f2 	bl	8009510 <_svfiprintf_r>
 800732c:	2200      	movs	r2, #0
 800732e:	9b02      	ldr	r3, [sp, #8]
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	b01c      	add	sp, #112	@ 0x70
 8007334:	f85d eb04 	ldr.w	lr, [sp], #4
 8007338:	b003      	add	sp, #12
 800733a:	4770      	bx	lr
 800733c:	20000184 	.word	0x20000184
 8007340:	ffff0208 	.word	0xffff0208

08007344 <__sread>:
 8007344:	b510      	push	{r4, lr}
 8007346:	460c      	mov	r4, r1
 8007348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734c:	f000 f8bc 	bl	80074c8 <_read_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	bfab      	itete	ge
 8007354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007356:	89a3      	ldrhlt	r3, [r4, #12]
 8007358:	181b      	addge	r3, r3, r0
 800735a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800735e:	bfac      	ite	ge
 8007360:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007362:	81a3      	strhlt	r3, [r4, #12]
 8007364:	bd10      	pop	{r4, pc}

08007366 <__swrite>:
 8007366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736a:	461f      	mov	r7, r3
 800736c:	898b      	ldrh	r3, [r1, #12]
 800736e:	4605      	mov	r5, r0
 8007370:	05db      	lsls	r3, r3, #23
 8007372:	460c      	mov	r4, r1
 8007374:	4616      	mov	r6, r2
 8007376:	d505      	bpl.n	8007384 <__swrite+0x1e>
 8007378:	2302      	movs	r3, #2
 800737a:	2200      	movs	r2, #0
 800737c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007380:	f000 f890 	bl	80074a4 <_lseek_r>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	4632      	mov	r2, r6
 8007388:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	4628      	mov	r0, r5
 8007390:	463b      	mov	r3, r7
 8007392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800739a:	f000 b8a7 	b.w	80074ec <_write_r>

0800739e <__sseek>:
 800739e:	b510      	push	{r4, lr}
 80073a0:	460c      	mov	r4, r1
 80073a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a6:	f000 f87d 	bl	80074a4 <_lseek_r>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	bf15      	itete	ne
 80073b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073ba:	81a3      	strheq	r3, [r4, #12]
 80073bc:	bf18      	it	ne
 80073be:	81a3      	strhne	r3, [r4, #12]
 80073c0:	bd10      	pop	{r4, pc}

080073c2 <__sclose>:
 80073c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c6:	f000 b85d 	b.w	8007484 <_close_r>

080073ca <memset>:
 80073ca:	4603      	mov	r3, r0
 80073cc:	4402      	add	r2, r0
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d100      	bne.n	80073d4 <memset+0xa>
 80073d2:	4770      	bx	lr
 80073d4:	f803 1b01 	strb.w	r1, [r3], #1
 80073d8:	e7f9      	b.n	80073ce <memset+0x4>

080073da <strncmp>:
 80073da:	b510      	push	{r4, lr}
 80073dc:	b16a      	cbz	r2, 80073fa <strncmp+0x20>
 80073de:	3901      	subs	r1, #1
 80073e0:	1884      	adds	r4, r0, r2
 80073e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d103      	bne.n	80073f6 <strncmp+0x1c>
 80073ee:	42a0      	cmp	r0, r4
 80073f0:	d001      	beq.n	80073f6 <strncmp+0x1c>
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	d1f5      	bne.n	80073e2 <strncmp+0x8>
 80073f6:	1ad0      	subs	r0, r2, r3
 80073f8:	bd10      	pop	{r4, pc}
 80073fa:	4610      	mov	r0, r2
 80073fc:	e7fc      	b.n	80073f8 <strncmp+0x1e>

080073fe <strncpy>:
 80073fe:	4603      	mov	r3, r0
 8007400:	b510      	push	{r4, lr}
 8007402:	3901      	subs	r1, #1
 8007404:	b132      	cbz	r2, 8007414 <strncpy+0x16>
 8007406:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800740a:	3a01      	subs	r2, #1
 800740c:	f803 4b01 	strb.w	r4, [r3], #1
 8007410:	2c00      	cmp	r4, #0
 8007412:	d1f7      	bne.n	8007404 <strncpy+0x6>
 8007414:	2100      	movs	r1, #0
 8007416:	441a      	add	r2, r3
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <strncpy+0x20>
 800741c:	bd10      	pop	{r4, pc}
 800741e:	f803 1b01 	strb.w	r1, [r3], #1
 8007422:	e7f9      	b.n	8007418 <strncpy+0x1a>

08007424 <__strtok_r>:
 8007424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007426:	4604      	mov	r4, r0
 8007428:	b908      	cbnz	r0, 800742e <__strtok_r+0xa>
 800742a:	6814      	ldr	r4, [r2, #0]
 800742c:	b144      	cbz	r4, 8007440 <__strtok_r+0x1c>
 800742e:	460f      	mov	r7, r1
 8007430:	4620      	mov	r0, r4
 8007432:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007436:	f817 6b01 	ldrb.w	r6, [r7], #1
 800743a:	b91e      	cbnz	r6, 8007444 <__strtok_r+0x20>
 800743c:	b965      	cbnz	r5, 8007458 <__strtok_r+0x34>
 800743e:	6015      	str	r5, [r2, #0]
 8007440:	2000      	movs	r0, #0
 8007442:	e005      	b.n	8007450 <__strtok_r+0x2c>
 8007444:	42b5      	cmp	r5, r6
 8007446:	d1f6      	bne.n	8007436 <__strtok_r+0x12>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f0      	bne.n	800742e <__strtok_r+0xa>
 800744c:	6014      	str	r4, [r2, #0]
 800744e:	7003      	strb	r3, [r0, #0]
 8007450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007452:	461c      	mov	r4, r3
 8007454:	e00c      	b.n	8007470 <__strtok_r+0x4c>
 8007456:	b915      	cbnz	r5, 800745e <__strtok_r+0x3a>
 8007458:	460e      	mov	r6, r1
 800745a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800745e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007462:	42ab      	cmp	r3, r5
 8007464:	d1f7      	bne.n	8007456 <__strtok_r+0x32>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d0f3      	beq.n	8007452 <__strtok_r+0x2e>
 800746a:	2300      	movs	r3, #0
 800746c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007470:	6014      	str	r4, [r2, #0]
 8007472:	e7ed      	b.n	8007450 <__strtok_r+0x2c>

08007474 <strtok_r>:
 8007474:	2301      	movs	r3, #1
 8007476:	f7ff bfd5 	b.w	8007424 <__strtok_r>
	...

0800747c <_localeconv_r>:
 800747c:	4800      	ldr	r0, [pc, #0]	@ (8007480 <_localeconv_r+0x4>)
 800747e:	4770      	bx	lr
 8007480:	20000108 	.word	0x20000108

08007484 <_close_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	2300      	movs	r3, #0
 8007488:	4d05      	ldr	r5, [pc, #20]	@ (80074a0 <_close_r+0x1c>)
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	f7fb f9f8 	bl	8002884 <_close>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_close_r+0x1a>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_close_r+0x1a>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	200008b0 	.word	0x200008b0

080074a4 <_lseek_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	4611      	mov	r1, r2
 80074ac:	2200      	movs	r2, #0
 80074ae:	4d05      	ldr	r5, [pc, #20]	@ (80074c4 <_lseek_r+0x20>)
 80074b0:	602a      	str	r2, [r5, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	f7fb f9f0 	bl	8002898 <_lseek>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_lseek_r+0x1e>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_lseek_r+0x1e>
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	200008b0 	.word	0x200008b0

080074c8 <_read_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	4611      	mov	r1, r2
 80074d0:	2200      	movs	r2, #0
 80074d2:	4d05      	ldr	r5, [pc, #20]	@ (80074e8 <_read_r+0x20>)
 80074d4:	602a      	str	r2, [r5, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f7fb f9b8 	bl	800284c <_read>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_read_r+0x1e>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_read_r+0x1e>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	200008b0 	.word	0x200008b0

080074ec <_write_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	2200      	movs	r2, #0
 80074f6:	4d05      	ldr	r5, [pc, #20]	@ (800750c <_write_r+0x20>)
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7fb f9b4 	bl	8002868 <_write>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_write_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_write_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	200008b0 	.word	0x200008b0

08007510 <__errno>:
 8007510:	4b01      	ldr	r3, [pc, #4]	@ (8007518 <__errno+0x8>)
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20000184 	.word	0x20000184

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	2600      	movs	r6, #0
 8007520:	4d0c      	ldr	r5, [pc, #48]	@ (8007554 <__libc_init_array+0x38>)
 8007522:	4c0d      	ldr	r4, [pc, #52]	@ (8007558 <__libc_init_array+0x3c>)
 8007524:	1b64      	subs	r4, r4, r5
 8007526:	10a4      	asrs	r4, r4, #2
 8007528:	42a6      	cmp	r6, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	f002 fcda 	bl	8009ee4 <_init>
 8007530:	2600      	movs	r6, #0
 8007532:	4d0a      	ldr	r5, [pc, #40]	@ (800755c <__libc_init_array+0x40>)
 8007534:	4c0a      	ldr	r4, [pc, #40]	@ (8007560 <__libc_init_array+0x44>)
 8007536:	1b64      	subs	r4, r4, r5
 8007538:	10a4      	asrs	r4, r4, #2
 800753a:	42a6      	cmp	r6, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f855 3b04 	ldr.w	r3, [r5], #4
 8007544:	4798      	blx	r3
 8007546:	3601      	adds	r6, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f855 3b04 	ldr.w	r3, [r5], #4
 800754e:	4798      	blx	r3
 8007550:	3601      	adds	r6, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	0800a638 	.word	0x0800a638
 8007558:	0800a638 	.word	0x0800a638
 800755c:	0800a638 	.word	0x0800a638
 8007560:	0800a63c 	.word	0x0800a63c

08007564 <__retarget_lock_init_recursive>:
 8007564:	4770      	bx	lr

08007566 <__retarget_lock_acquire_recursive>:
 8007566:	4770      	bx	lr

08007568 <__retarget_lock_release_recursive>:
 8007568:	4770      	bx	lr

0800756a <strcpy>:
 800756a:	4603      	mov	r3, r0
 800756c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007570:	f803 2b01 	strb.w	r2, [r3], #1
 8007574:	2a00      	cmp	r2, #0
 8007576:	d1f9      	bne.n	800756c <strcpy+0x2>
 8007578:	4770      	bx	lr

0800757a <memchr>:
 800757a:	4603      	mov	r3, r0
 800757c:	b510      	push	{r4, lr}
 800757e:	b2c9      	uxtb	r1, r1
 8007580:	4402      	add	r2, r0
 8007582:	4293      	cmp	r3, r2
 8007584:	4618      	mov	r0, r3
 8007586:	d101      	bne.n	800758c <memchr+0x12>
 8007588:	2000      	movs	r0, #0
 800758a:	e003      	b.n	8007594 <memchr+0x1a>
 800758c:	7804      	ldrb	r4, [r0, #0]
 800758e:	3301      	adds	r3, #1
 8007590:	428c      	cmp	r4, r1
 8007592:	d1f6      	bne.n	8007582 <memchr+0x8>
 8007594:	bd10      	pop	{r4, pc}

08007596 <memcpy>:
 8007596:	440a      	add	r2, r1
 8007598:	4291      	cmp	r1, r2
 800759a:	f100 33ff 	add.w	r3, r0, #4294967295
 800759e:	d100      	bne.n	80075a2 <memcpy+0xc>
 80075a0:	4770      	bx	lr
 80075a2:	b510      	push	{r4, lr}
 80075a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075a8:	4291      	cmp	r1, r2
 80075aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ae:	d1f9      	bne.n	80075a4 <memcpy+0xe>
 80075b0:	bd10      	pop	{r4, pc}
	...

080075b4 <nan>:
 80075b4:	2000      	movs	r0, #0
 80075b6:	4901      	ldr	r1, [pc, #4]	@ (80075bc <nan+0x8>)
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	7ff80000 	.word	0x7ff80000

080075c0 <quorem>:
 80075c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	6903      	ldr	r3, [r0, #16]
 80075c6:	690c      	ldr	r4, [r1, #16]
 80075c8:	4607      	mov	r7, r0
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	db7e      	blt.n	80076cc <quorem+0x10c>
 80075ce:	3c01      	subs	r4, #1
 80075d0:	00a3      	lsls	r3, r4, #2
 80075d2:	f100 0514 	add.w	r5, r0, #20
 80075d6:	f101 0814 	add.w	r8, r1, #20
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075ea:	3301      	adds	r3, #1
 80075ec:	429a      	cmp	r2, r3
 80075ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80075f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075f6:	d32e      	bcc.n	8007656 <quorem+0x96>
 80075f8:	f04f 0a00 	mov.w	sl, #0
 80075fc:	46c4      	mov	ip, r8
 80075fe:	46ae      	mov	lr, r5
 8007600:	46d3      	mov	fp, sl
 8007602:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007606:	b298      	uxth	r0, r3
 8007608:	fb06 a000 	mla	r0, r6, r0, sl
 800760c:	0c1b      	lsrs	r3, r3, #16
 800760e:	0c02      	lsrs	r2, r0, #16
 8007610:	fb06 2303 	mla	r3, r6, r3, r2
 8007614:	f8de 2000 	ldr.w	r2, [lr]
 8007618:	b280      	uxth	r0, r0
 800761a:	b292      	uxth	r2, r2
 800761c:	1a12      	subs	r2, r2, r0
 800761e:	445a      	add	r2, fp
 8007620:	f8de 0000 	ldr.w	r0, [lr]
 8007624:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007628:	b29b      	uxth	r3, r3
 800762a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800762e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007632:	b292      	uxth	r2, r2
 8007634:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007638:	45e1      	cmp	r9, ip
 800763a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800763e:	f84e 2b04 	str.w	r2, [lr], #4
 8007642:	d2de      	bcs.n	8007602 <quorem+0x42>
 8007644:	9b00      	ldr	r3, [sp, #0]
 8007646:	58eb      	ldr	r3, [r5, r3]
 8007648:	b92b      	cbnz	r3, 8007656 <quorem+0x96>
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	3b04      	subs	r3, #4
 800764e:	429d      	cmp	r5, r3
 8007650:	461a      	mov	r2, r3
 8007652:	d32f      	bcc.n	80076b4 <quorem+0xf4>
 8007654:	613c      	str	r4, [r7, #16]
 8007656:	4638      	mov	r0, r7
 8007658:	f001 fd0e 	bl	8009078 <__mcmp>
 800765c:	2800      	cmp	r0, #0
 800765e:	db25      	blt.n	80076ac <quorem+0xec>
 8007660:	4629      	mov	r1, r5
 8007662:	2000      	movs	r0, #0
 8007664:	f858 2b04 	ldr.w	r2, [r8], #4
 8007668:	f8d1 c000 	ldr.w	ip, [r1]
 800766c:	fa1f fe82 	uxth.w	lr, r2
 8007670:	fa1f f38c 	uxth.w	r3, ip
 8007674:	eba3 030e 	sub.w	r3, r3, lr
 8007678:	4403      	add	r3, r0
 800767a:	0c12      	lsrs	r2, r2, #16
 800767c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007680:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007684:	b29b      	uxth	r3, r3
 8007686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800768a:	45c1      	cmp	r9, r8
 800768c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007690:	f841 3b04 	str.w	r3, [r1], #4
 8007694:	d2e6      	bcs.n	8007664 <quorem+0xa4>
 8007696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800769a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800769e:	b922      	cbnz	r2, 80076aa <quorem+0xea>
 80076a0:	3b04      	subs	r3, #4
 80076a2:	429d      	cmp	r5, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	d30b      	bcc.n	80076c0 <quorem+0x100>
 80076a8:	613c      	str	r4, [r7, #16]
 80076aa:	3601      	adds	r6, #1
 80076ac:	4630      	mov	r0, r6
 80076ae:	b003      	add	sp, #12
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b4:	6812      	ldr	r2, [r2, #0]
 80076b6:	3b04      	subs	r3, #4
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	d1cb      	bne.n	8007654 <quorem+0x94>
 80076bc:	3c01      	subs	r4, #1
 80076be:	e7c6      	b.n	800764e <quorem+0x8e>
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	3b04      	subs	r3, #4
 80076c4:	2a00      	cmp	r2, #0
 80076c6:	d1ef      	bne.n	80076a8 <quorem+0xe8>
 80076c8:	3c01      	subs	r4, #1
 80076ca:	e7ea      	b.n	80076a2 <quorem+0xe2>
 80076cc:	2000      	movs	r0, #0
 80076ce:	e7ee      	b.n	80076ae <quorem+0xee>

080076d0 <_dtoa_r>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	4614      	mov	r4, r2
 80076d6:	461d      	mov	r5, r3
 80076d8:	69c7      	ldr	r7, [r0, #28]
 80076da:	b097      	sub	sp, #92	@ 0x5c
 80076dc:	4683      	mov	fp, r0
 80076de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80076e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80076e4:	b97f      	cbnz	r7, 8007706 <_dtoa_r+0x36>
 80076e6:	2010      	movs	r0, #16
 80076e8:	f001 f93c 	bl	8008964 <malloc>
 80076ec:	4602      	mov	r2, r0
 80076ee:	f8cb 001c 	str.w	r0, [fp, #28]
 80076f2:	b920      	cbnz	r0, 80076fe <_dtoa_r+0x2e>
 80076f4:	21ef      	movs	r1, #239	@ 0xef
 80076f6:	4ba8      	ldr	r3, [pc, #672]	@ (8007998 <_dtoa_r+0x2c8>)
 80076f8:	48a8      	ldr	r0, [pc, #672]	@ (800799c <_dtoa_r+0x2cc>)
 80076fa:	f002 f8d7 	bl	80098ac <__assert_func>
 80076fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007702:	6007      	str	r7, [r0, #0]
 8007704:	60c7      	str	r7, [r0, #12]
 8007706:	f8db 301c 	ldr.w	r3, [fp, #28]
 800770a:	6819      	ldr	r1, [r3, #0]
 800770c:	b159      	cbz	r1, 8007726 <_dtoa_r+0x56>
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	2301      	movs	r3, #1
 8007712:	4093      	lsls	r3, r2
 8007714:	604a      	str	r2, [r1, #4]
 8007716:	608b      	str	r3, [r1, #8]
 8007718:	4658      	mov	r0, fp
 800771a:	f001 fa2b 	bl	8008b74 <_Bfree>
 800771e:	2200      	movs	r2, #0
 8007720:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	1e2b      	subs	r3, r5, #0
 8007728:	bfaf      	iteee	ge
 800772a:	2300      	movge	r3, #0
 800772c:	2201      	movlt	r2, #1
 800772e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007732:	9303      	strlt	r3, [sp, #12]
 8007734:	bfa8      	it	ge
 8007736:	6033      	strge	r3, [r6, #0]
 8007738:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800773c:	4b98      	ldr	r3, [pc, #608]	@ (80079a0 <_dtoa_r+0x2d0>)
 800773e:	bfb8      	it	lt
 8007740:	6032      	strlt	r2, [r6, #0]
 8007742:	ea33 0308 	bics.w	r3, r3, r8
 8007746:	d112      	bne.n	800776e <_dtoa_r+0x9e>
 8007748:	f242 730f 	movw	r3, #9999	@ 0x270f
 800774c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007754:	4323      	orrs	r3, r4
 8007756:	f000 8550 	beq.w	80081fa <_dtoa_r+0xb2a>
 800775a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800775c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80079a4 <_dtoa_r+0x2d4>
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8552 	beq.w	800820a <_dtoa_r+0xb3a>
 8007766:	f10a 0303 	add.w	r3, sl, #3
 800776a:	f000 bd4c 	b.w	8008206 <_dtoa_r+0xb36>
 800776e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007772:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800777a:	2200      	movs	r2, #0
 800777c:	2300      	movs	r3, #0
 800777e:	f7f9 f913 	bl	80009a8 <__aeabi_dcmpeq>
 8007782:	4607      	mov	r7, r0
 8007784:	b158      	cbz	r0, 800779e <_dtoa_r+0xce>
 8007786:	2301      	movs	r3, #1
 8007788:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800778e:	b113      	cbz	r3, 8007796 <_dtoa_r+0xc6>
 8007790:	4b85      	ldr	r3, [pc, #532]	@ (80079a8 <_dtoa_r+0x2d8>)
 8007792:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80079ac <_dtoa_r+0x2dc>
 800779a:	f000 bd36 	b.w	800820a <_dtoa_r+0xb3a>
 800779e:	ab14      	add	r3, sp, #80	@ 0x50
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	ab15      	add	r3, sp, #84	@ 0x54
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	4658      	mov	r0, fp
 80077a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80077ac:	f001 fd7c 	bl	80092a8 <__d2b>
 80077b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80077b4:	4681      	mov	r9, r0
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	d077      	beq.n	80078aa <_dtoa_r+0x1da>
 80077ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80077c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80077cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80077d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80077d2:	4619      	mov	r1, r3
 80077d4:	2200      	movs	r2, #0
 80077d6:	4b76      	ldr	r3, [pc, #472]	@ (80079b0 <_dtoa_r+0x2e0>)
 80077d8:	f7f8 fcc6 	bl	8000168 <__aeabi_dsub>
 80077dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007980 <_dtoa_r+0x2b0>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 fe79 	bl	80004d8 <__aeabi_dmul>
 80077e6:	a368      	add	r3, pc, #416	@ (adr r3, 8007988 <_dtoa_r+0x2b8>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f7f8 fcbe 	bl	800016c <__adddf3>
 80077f0:	4604      	mov	r4, r0
 80077f2:	4630      	mov	r0, r6
 80077f4:	460d      	mov	r5, r1
 80077f6:	f7f8 fe05 	bl	8000404 <__aeabi_i2d>
 80077fa:	a365      	add	r3, pc, #404	@ (adr r3, 8007990 <_dtoa_r+0x2c0>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fe6a 	bl	80004d8 <__aeabi_dmul>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4620      	mov	r0, r4
 800780a:	4629      	mov	r1, r5
 800780c:	f7f8 fcae 	bl	800016c <__adddf3>
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	f7f9 f910 	bl	8000a38 <__aeabi_d2iz>
 8007818:	2200      	movs	r2, #0
 800781a:	4607      	mov	r7, r0
 800781c:	2300      	movs	r3, #0
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f9 f8cb 	bl	80009bc <__aeabi_dcmplt>
 8007826:	b140      	cbz	r0, 800783a <_dtoa_r+0x16a>
 8007828:	4638      	mov	r0, r7
 800782a:	f7f8 fdeb 	bl	8000404 <__aeabi_i2d>
 800782e:	4622      	mov	r2, r4
 8007830:	462b      	mov	r3, r5
 8007832:	f7f9 f8b9 	bl	80009a8 <__aeabi_dcmpeq>
 8007836:	b900      	cbnz	r0, 800783a <_dtoa_r+0x16a>
 8007838:	3f01      	subs	r7, #1
 800783a:	2f16      	cmp	r7, #22
 800783c:	d853      	bhi.n	80078e6 <_dtoa_r+0x216>
 800783e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007842:	4b5c      	ldr	r3, [pc, #368]	@ (80079b4 <_dtoa_r+0x2e4>)
 8007844:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f9 f8b6 	bl	80009bc <__aeabi_dcmplt>
 8007850:	2800      	cmp	r0, #0
 8007852:	d04a      	beq.n	80078ea <_dtoa_r+0x21a>
 8007854:	2300      	movs	r3, #0
 8007856:	3f01      	subs	r7, #1
 8007858:	930f      	str	r3, [sp, #60]	@ 0x3c
 800785a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800785c:	1b9b      	subs	r3, r3, r6
 800785e:	1e5a      	subs	r2, r3, #1
 8007860:	bf46      	itte	mi
 8007862:	f1c3 0801 	rsbmi	r8, r3, #1
 8007866:	2300      	movmi	r3, #0
 8007868:	f04f 0800 	movpl.w	r8, #0
 800786c:	9209      	str	r2, [sp, #36]	@ 0x24
 800786e:	bf48      	it	mi
 8007870:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007872:	2f00      	cmp	r7, #0
 8007874:	db3b      	blt.n	80078ee <_dtoa_r+0x21e>
 8007876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007878:	970e      	str	r7, [sp, #56]	@ 0x38
 800787a:	443b      	add	r3, r7
 800787c:	9309      	str	r3, [sp, #36]	@ 0x24
 800787e:	2300      	movs	r3, #0
 8007880:	930a      	str	r3, [sp, #40]	@ 0x28
 8007882:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007884:	2b09      	cmp	r3, #9
 8007886:	d866      	bhi.n	8007956 <_dtoa_r+0x286>
 8007888:	2b05      	cmp	r3, #5
 800788a:	bfc4      	itt	gt
 800788c:	3b04      	subgt	r3, #4
 800788e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007890:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007892:	bfc8      	it	gt
 8007894:	2400      	movgt	r4, #0
 8007896:	f1a3 0302 	sub.w	r3, r3, #2
 800789a:	bfd8      	it	le
 800789c:	2401      	movle	r4, #1
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d864      	bhi.n	800796c <_dtoa_r+0x29c>
 80078a2:	e8df f003 	tbb	[pc, r3]
 80078a6:	382b      	.short	0x382b
 80078a8:	5636      	.short	0x5636
 80078aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80078ae:	441e      	add	r6, r3
 80078b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	bfc1      	itttt	gt
 80078b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80078c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80078c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80078c8:	bfd6      	itet	le
 80078ca:	f1c3 0320 	rsble	r3, r3, #32
 80078ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80078d2:	fa04 f003 	lslle.w	r0, r4, r3
 80078d6:	f7f8 fd85 	bl	80003e4 <__aeabi_ui2d>
 80078da:	2201      	movs	r2, #1
 80078dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80078e0:	3e01      	subs	r6, #1
 80078e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80078e4:	e775      	b.n	80077d2 <_dtoa_r+0x102>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e7b6      	b.n	8007858 <_dtoa_r+0x188>
 80078ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80078ec:	e7b5      	b.n	800785a <_dtoa_r+0x18a>
 80078ee:	427b      	negs	r3, r7
 80078f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f2:	2300      	movs	r3, #0
 80078f4:	eba8 0807 	sub.w	r8, r8, r7
 80078f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80078fa:	e7c2      	b.n	8007882 <_dtoa_r+0x1b2>
 80078fc:	2300      	movs	r3, #0
 80078fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007900:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007902:	2b00      	cmp	r3, #0
 8007904:	dc35      	bgt.n	8007972 <_dtoa_r+0x2a2>
 8007906:	2301      	movs	r3, #1
 8007908:	461a      	mov	r2, r3
 800790a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800790e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007910:	e00b      	b.n	800792a <_dtoa_r+0x25a>
 8007912:	2301      	movs	r3, #1
 8007914:	e7f3      	b.n	80078fe <_dtoa_r+0x22e>
 8007916:	2300      	movs	r3, #0
 8007918:	930b      	str	r3, [sp, #44]	@ 0x2c
 800791a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800791c:	18fb      	adds	r3, r7, r3
 800791e:	9308      	str	r3, [sp, #32]
 8007920:	3301      	adds	r3, #1
 8007922:	2b01      	cmp	r3, #1
 8007924:	9307      	str	r3, [sp, #28]
 8007926:	bfb8      	it	lt
 8007928:	2301      	movlt	r3, #1
 800792a:	2100      	movs	r1, #0
 800792c:	2204      	movs	r2, #4
 800792e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007932:	f102 0514 	add.w	r5, r2, #20
 8007936:	429d      	cmp	r5, r3
 8007938:	d91f      	bls.n	800797a <_dtoa_r+0x2aa>
 800793a:	6041      	str	r1, [r0, #4]
 800793c:	4658      	mov	r0, fp
 800793e:	f001 f8d9 	bl	8008af4 <_Balloc>
 8007942:	4682      	mov	sl, r0
 8007944:	2800      	cmp	r0, #0
 8007946:	d139      	bne.n	80079bc <_dtoa_r+0x2ec>
 8007948:	4602      	mov	r2, r0
 800794a:	f240 11af 	movw	r1, #431	@ 0x1af
 800794e:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <_dtoa_r+0x2e8>)
 8007950:	e6d2      	b.n	80076f8 <_dtoa_r+0x28>
 8007952:	2301      	movs	r3, #1
 8007954:	e7e0      	b.n	8007918 <_dtoa_r+0x248>
 8007956:	2401      	movs	r4, #1
 8007958:	2300      	movs	r3, #0
 800795a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800795c:	9320      	str	r3, [sp, #128]	@ 0x80
 800795e:	f04f 33ff 	mov.w	r3, #4294967295
 8007962:	2200      	movs	r2, #0
 8007964:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007968:	2312      	movs	r3, #18
 800796a:	e7d0      	b.n	800790e <_dtoa_r+0x23e>
 800796c:	2301      	movs	r3, #1
 800796e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007970:	e7f5      	b.n	800795e <_dtoa_r+0x28e>
 8007972:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007974:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007978:	e7d7      	b.n	800792a <_dtoa_r+0x25a>
 800797a:	3101      	adds	r1, #1
 800797c:	0052      	lsls	r2, r2, #1
 800797e:	e7d8      	b.n	8007932 <_dtoa_r+0x262>
 8007980:	636f4361 	.word	0x636f4361
 8007984:	3fd287a7 	.word	0x3fd287a7
 8007988:	8b60c8b3 	.word	0x8b60c8b3
 800798c:	3fc68a28 	.word	0x3fc68a28
 8007990:	509f79fb 	.word	0x509f79fb
 8007994:	3fd34413 	.word	0x3fd34413
 8007998:	0800a3a8 	.word	0x0800a3a8
 800799c:	0800a3bf 	.word	0x0800a3bf
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	0800a3a4 	.word	0x0800a3a4
 80079a8:	0800a372 	.word	0x0800a372
 80079ac:	0800a371 	.word	0x0800a371
 80079b0:	3ff80000 	.word	0x3ff80000
 80079b4:	0800a518 	.word	0x0800a518
 80079b8:	0800a417 	.word	0x0800a417
 80079bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80079c0:	6018      	str	r0, [r3, #0]
 80079c2:	9b07      	ldr	r3, [sp, #28]
 80079c4:	2b0e      	cmp	r3, #14
 80079c6:	f200 80a4 	bhi.w	8007b12 <_dtoa_r+0x442>
 80079ca:	2c00      	cmp	r4, #0
 80079cc:	f000 80a1 	beq.w	8007b12 <_dtoa_r+0x442>
 80079d0:	2f00      	cmp	r7, #0
 80079d2:	dd33      	ble.n	8007a3c <_dtoa_r+0x36c>
 80079d4:	4b86      	ldr	r3, [pc, #536]	@ (8007bf0 <_dtoa_r+0x520>)
 80079d6:	f007 020f 	and.w	r2, r7, #15
 80079da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079de:	05f8      	lsls	r0, r7, #23
 80079e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80079e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80079ec:	d516      	bpl.n	8007a1c <_dtoa_r+0x34c>
 80079ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079f2:	4b80      	ldr	r3, [pc, #512]	@ (8007bf4 <_dtoa_r+0x524>)
 80079f4:	2603      	movs	r6, #3
 80079f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079fa:	f7f8 fe97 	bl	800072c <__aeabi_ddiv>
 80079fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a02:	f004 040f 	and.w	r4, r4, #15
 8007a06:	4d7b      	ldr	r5, [pc, #492]	@ (8007bf4 <_dtoa_r+0x524>)
 8007a08:	b954      	cbnz	r4, 8007a20 <_dtoa_r+0x350>
 8007a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a12:	f7f8 fe8b 	bl	800072c <__aeabi_ddiv>
 8007a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a1a:	e028      	b.n	8007a6e <_dtoa_r+0x39e>
 8007a1c:	2602      	movs	r6, #2
 8007a1e:	e7f2      	b.n	8007a06 <_dtoa_r+0x336>
 8007a20:	07e1      	lsls	r1, r4, #31
 8007a22:	d508      	bpl.n	8007a36 <_dtoa_r+0x366>
 8007a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a2c:	f7f8 fd54 	bl	80004d8 <__aeabi_dmul>
 8007a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a34:	3601      	adds	r6, #1
 8007a36:	1064      	asrs	r4, r4, #1
 8007a38:	3508      	adds	r5, #8
 8007a3a:	e7e5      	b.n	8007a08 <_dtoa_r+0x338>
 8007a3c:	f000 80d2 	beq.w	8007be4 <_dtoa_r+0x514>
 8007a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a44:	427c      	negs	r4, r7
 8007a46:	4b6a      	ldr	r3, [pc, #424]	@ (8007bf0 <_dtoa_r+0x520>)
 8007a48:	f004 020f 	and.w	r2, r4, #15
 8007a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f7f8 fd40 	bl	80004d8 <__aeabi_dmul>
 8007a58:	2602      	movs	r6, #2
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a60:	4d64      	ldr	r5, [pc, #400]	@ (8007bf4 <_dtoa_r+0x524>)
 8007a62:	1124      	asrs	r4, r4, #4
 8007a64:	2c00      	cmp	r4, #0
 8007a66:	f040 80b2 	bne.w	8007bce <_dtoa_r+0x4fe>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1d3      	bne.n	8007a16 <_dtoa_r+0x346>
 8007a6e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80b7 	beq.w	8007be8 <_dtoa_r+0x518>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	4b5d      	ldr	r3, [pc, #372]	@ (8007bf8 <_dtoa_r+0x528>)
 8007a82:	f7f8 ff9b 	bl	80009bc <__aeabi_dcmplt>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	f000 80ae 	beq.w	8007be8 <_dtoa_r+0x518>
 8007a8c:	9b07      	ldr	r3, [sp, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80aa 	beq.w	8007be8 <_dtoa_r+0x518>
 8007a94:	9b08      	ldr	r3, [sp, #32]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dd37      	ble.n	8007b0a <_dtoa_r+0x43a>
 8007a9a:	1e7b      	subs	r3, r7, #1
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4b55      	ldr	r3, [pc, #340]	@ (8007bfc <_dtoa_r+0x52c>)
 8007aa6:	f7f8 fd17 	bl	80004d8 <__aeabi_dmul>
 8007aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aae:	9c08      	ldr	r4, [sp, #32]
 8007ab0:	3601      	adds	r6, #1
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f7f8 fca6 	bl	8000404 <__aeabi_i2d>
 8007ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007abc:	f7f8 fd0c 	bl	80004d8 <__aeabi_dmul>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8007c00 <_dtoa_r+0x530>)
 8007ac4:	f7f8 fb52 	bl	800016c <__adddf3>
 8007ac8:	4605      	mov	r5, r0
 8007aca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ace:	2c00      	cmp	r4, #0
 8007ad0:	f040 809a 	bne.w	8007c08 <_dtoa_r+0x538>
 8007ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	4b4a      	ldr	r3, [pc, #296]	@ (8007c04 <_dtoa_r+0x534>)
 8007adc:	f7f8 fb44 	bl	8000168 <__aeabi_dsub>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ae8:	462a      	mov	r2, r5
 8007aea:	4633      	mov	r3, r6
 8007aec:	f7f8 ff84 	bl	80009f8 <__aeabi_dcmpgt>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f040 828e 	bne.w	8008012 <_dtoa_r+0x942>
 8007af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007afa:	462a      	mov	r2, r5
 8007afc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b00:	f7f8 ff5c 	bl	80009bc <__aeabi_dcmplt>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	f040 8127 	bne.w	8007d58 <_dtoa_r+0x688>
 8007b0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f2c0 8163 	blt.w	8007de0 <_dtoa_r+0x710>
 8007b1a:	2f0e      	cmp	r7, #14
 8007b1c:	f300 8160 	bgt.w	8007de0 <_dtoa_r+0x710>
 8007b20:	4b33      	ldr	r3, [pc, #204]	@ (8007bf0 <_dtoa_r+0x520>)
 8007b22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	da03      	bge.n	8007b3c <_dtoa_r+0x46c>
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f340 8100 	ble.w	8007d3c <_dtoa_r+0x66c>
 8007b3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b40:	4656      	mov	r6, sl
 8007b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 fdef 	bl	800072c <__aeabi_ddiv>
 8007b4e:	f7f8 ff73 	bl	8000a38 <__aeabi_d2iz>
 8007b52:	4680      	mov	r8, r0
 8007b54:	f7f8 fc56 	bl	8000404 <__aeabi_i2d>
 8007b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b5c:	f7f8 fcbc 	bl	80004d8 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4620      	mov	r0, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	f7f8 fafe 	bl	8000168 <__aeabi_dsub>
 8007b6c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007b70:	9d07      	ldr	r5, [sp, #28]
 8007b72:	f806 4b01 	strb.w	r4, [r6], #1
 8007b76:	eba6 040a 	sub.w	r4, r6, sl
 8007b7a:	42a5      	cmp	r5, r4
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	f040 8116 	bne.w	8007db0 <_dtoa_r+0x6e0>
 8007b84:	f7f8 faf2 	bl	800016c <__adddf3>
 8007b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	f7f8 ff32 	bl	80009f8 <__aeabi_dcmpgt>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f040 80f8 	bne.w	8007d8a <_dtoa_r+0x6ba>
 8007b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 ff01 	bl	80009a8 <__aeabi_dcmpeq>
 8007ba6:	b118      	cbz	r0, 8007bb0 <_dtoa_r+0x4e0>
 8007ba8:	f018 0f01 	tst.w	r8, #1
 8007bac:	f040 80ed 	bne.w	8007d8a <_dtoa_r+0x6ba>
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f000 ffde 	bl	8008b74 <_Bfree>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	7033      	strb	r3, [r6, #0]
 8007bbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007bbe:	3701      	adds	r7, #1
 8007bc0:	601f      	str	r7, [r3, #0]
 8007bc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8320 	beq.w	800820a <_dtoa_r+0xb3a>
 8007bca:	601e      	str	r6, [r3, #0]
 8007bcc:	e31d      	b.n	800820a <_dtoa_r+0xb3a>
 8007bce:	07e2      	lsls	r2, r4, #31
 8007bd0:	d505      	bpl.n	8007bde <_dtoa_r+0x50e>
 8007bd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bd6:	f7f8 fc7f 	bl	80004d8 <__aeabi_dmul>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	3601      	adds	r6, #1
 8007bde:	1064      	asrs	r4, r4, #1
 8007be0:	3508      	adds	r5, #8
 8007be2:	e73f      	b.n	8007a64 <_dtoa_r+0x394>
 8007be4:	2602      	movs	r6, #2
 8007be6:	e742      	b.n	8007a6e <_dtoa_r+0x39e>
 8007be8:	9c07      	ldr	r4, [sp, #28]
 8007bea:	9704      	str	r7, [sp, #16]
 8007bec:	e761      	b.n	8007ab2 <_dtoa_r+0x3e2>
 8007bee:	bf00      	nop
 8007bf0:	0800a518 	.word	0x0800a518
 8007bf4:	0800a4f0 	.word	0x0800a4f0
 8007bf8:	3ff00000 	.word	0x3ff00000
 8007bfc:	40240000 	.word	0x40240000
 8007c00:	401c0000 	.word	0x401c0000
 8007c04:	40140000 	.word	0x40140000
 8007c08:	4b70      	ldr	r3, [pc, #448]	@ (8007dcc <_dtoa_r+0x6fc>)
 8007c0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c14:	4454      	add	r4, sl
 8007c16:	2900      	cmp	r1, #0
 8007c18:	d045      	beq.n	8007ca6 <_dtoa_r+0x5d6>
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	496c      	ldr	r1, [pc, #432]	@ (8007dd0 <_dtoa_r+0x700>)
 8007c1e:	f7f8 fd85 	bl	800072c <__aeabi_ddiv>
 8007c22:	4633      	mov	r3, r6
 8007c24:	462a      	mov	r2, r5
 8007c26:	f7f8 fa9f 	bl	8000168 <__aeabi_dsub>
 8007c2a:	4656      	mov	r6, sl
 8007c2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c34:	f7f8 ff00 	bl	8000a38 <__aeabi_d2iz>
 8007c38:	4605      	mov	r5, r0
 8007c3a:	f7f8 fbe3 	bl	8000404 <__aeabi_i2d>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c46:	f7f8 fa8f 	bl	8000168 <__aeabi_dsub>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	3530      	adds	r5, #48	@ 0x30
 8007c50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c58:	f806 5b01 	strb.w	r5, [r6], #1
 8007c5c:	f7f8 feae 	bl	80009bc <__aeabi_dcmplt>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d163      	bne.n	8007d2c <_dtoa_r+0x65c>
 8007c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c68:	2000      	movs	r0, #0
 8007c6a:	495a      	ldr	r1, [pc, #360]	@ (8007dd4 <_dtoa_r+0x704>)
 8007c6c:	f7f8 fa7c 	bl	8000168 <__aeabi_dsub>
 8007c70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c74:	f7f8 fea2 	bl	80009bc <__aeabi_dcmplt>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	f040 8087 	bne.w	8007d8c <_dtoa_r+0x6bc>
 8007c7e:	42a6      	cmp	r6, r4
 8007c80:	f43f af43 	beq.w	8007b0a <_dtoa_r+0x43a>
 8007c84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4b53      	ldr	r3, [pc, #332]	@ (8007dd8 <_dtoa_r+0x708>)
 8007c8c:	f7f8 fc24 	bl	80004d8 <__aeabi_dmul>
 8007c90:	2200      	movs	r2, #0
 8007c92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd8 <_dtoa_r+0x708>)
 8007c9c:	f7f8 fc1c 	bl	80004d8 <__aeabi_dmul>
 8007ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ca4:	e7c4      	b.n	8007c30 <_dtoa_r+0x560>
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f7f8 fc15 	bl	80004d8 <__aeabi_dmul>
 8007cae:	4656      	mov	r6, sl
 8007cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cb4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cba:	f7f8 febd 	bl	8000a38 <__aeabi_d2iz>
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	f7f8 fba0 	bl	8000404 <__aeabi_i2d>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ccc:	f7f8 fa4c 	bl	8000168 <__aeabi_dsub>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	3530      	adds	r5, #48	@ 0x30
 8007cd6:	f806 5b01 	strb.w	r5, [r6], #1
 8007cda:	42a6      	cmp	r6, r4
 8007cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ce0:	f04f 0200 	mov.w	r2, #0
 8007ce4:	d124      	bne.n	8007d30 <_dtoa_r+0x660>
 8007ce6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cea:	4b39      	ldr	r3, [pc, #228]	@ (8007dd0 <_dtoa_r+0x700>)
 8007cec:	f7f8 fa3e 	bl	800016c <__adddf3>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf8:	f7f8 fe7e 	bl	80009f8 <__aeabi_dcmpgt>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d145      	bne.n	8007d8c <_dtoa_r+0x6bc>
 8007d00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d04:	2000      	movs	r0, #0
 8007d06:	4932      	ldr	r1, [pc, #200]	@ (8007dd0 <_dtoa_r+0x700>)
 8007d08:	f7f8 fa2e 	bl	8000168 <__aeabi_dsub>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d14:	f7f8 fe52 	bl	80009bc <__aeabi_dcmplt>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f43f aef6 	beq.w	8007b0a <_dtoa_r+0x43a>
 8007d1e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d20:	1e73      	subs	r3, r6, #1
 8007d22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d28:	2b30      	cmp	r3, #48	@ 0x30
 8007d2a:	d0f8      	beq.n	8007d1e <_dtoa_r+0x64e>
 8007d2c:	9f04      	ldr	r7, [sp, #16]
 8007d2e:	e73f      	b.n	8007bb0 <_dtoa_r+0x4e0>
 8007d30:	4b29      	ldr	r3, [pc, #164]	@ (8007dd8 <_dtoa_r+0x708>)
 8007d32:	f7f8 fbd1 	bl	80004d8 <__aeabi_dmul>
 8007d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d3a:	e7bc      	b.n	8007cb6 <_dtoa_r+0x5e6>
 8007d3c:	d10c      	bne.n	8007d58 <_dtoa_r+0x688>
 8007d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d42:	2200      	movs	r2, #0
 8007d44:	4b25      	ldr	r3, [pc, #148]	@ (8007ddc <_dtoa_r+0x70c>)
 8007d46:	f7f8 fbc7 	bl	80004d8 <__aeabi_dmul>
 8007d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d4e:	f7f8 fe49 	bl	80009e4 <__aeabi_dcmpge>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f000 815b 	beq.w	800800e <_dtoa_r+0x93e>
 8007d58:	2400      	movs	r4, #0
 8007d5a:	4625      	mov	r5, r4
 8007d5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d5e:	4656      	mov	r6, sl
 8007d60:	43db      	mvns	r3, r3
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	2700      	movs	r7, #0
 8007d66:	4621      	mov	r1, r4
 8007d68:	4658      	mov	r0, fp
 8007d6a:	f000 ff03 	bl	8008b74 <_Bfree>
 8007d6e:	2d00      	cmp	r5, #0
 8007d70:	d0dc      	beq.n	8007d2c <_dtoa_r+0x65c>
 8007d72:	b12f      	cbz	r7, 8007d80 <_dtoa_r+0x6b0>
 8007d74:	42af      	cmp	r7, r5
 8007d76:	d003      	beq.n	8007d80 <_dtoa_r+0x6b0>
 8007d78:	4639      	mov	r1, r7
 8007d7a:	4658      	mov	r0, fp
 8007d7c:	f000 fefa 	bl	8008b74 <_Bfree>
 8007d80:	4629      	mov	r1, r5
 8007d82:	4658      	mov	r0, fp
 8007d84:	f000 fef6 	bl	8008b74 <_Bfree>
 8007d88:	e7d0      	b.n	8007d2c <_dtoa_r+0x65c>
 8007d8a:	9704      	str	r7, [sp, #16]
 8007d8c:	4633      	mov	r3, r6
 8007d8e:	461e      	mov	r6, r3
 8007d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d94:	2a39      	cmp	r2, #57	@ 0x39
 8007d96:	d107      	bne.n	8007da8 <_dtoa_r+0x6d8>
 8007d98:	459a      	cmp	sl, r3
 8007d9a:	d1f8      	bne.n	8007d8e <_dtoa_r+0x6be>
 8007d9c:	9a04      	ldr	r2, [sp, #16]
 8007d9e:	3201      	adds	r2, #1
 8007da0:	9204      	str	r2, [sp, #16]
 8007da2:	2230      	movs	r2, #48	@ 0x30
 8007da4:	f88a 2000 	strb.w	r2, [sl]
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	3201      	adds	r2, #1
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	e7bd      	b.n	8007d2c <_dtoa_r+0x65c>
 8007db0:	2200      	movs	r2, #0
 8007db2:	4b09      	ldr	r3, [pc, #36]	@ (8007dd8 <_dtoa_r+0x708>)
 8007db4:	f7f8 fb90 	bl	80004d8 <__aeabi_dmul>
 8007db8:	2200      	movs	r2, #0
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	460d      	mov	r5, r1
 8007dc0:	f7f8 fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f43f aebc 	beq.w	8007b42 <_dtoa_r+0x472>
 8007dca:	e6f1      	b.n	8007bb0 <_dtoa_r+0x4e0>
 8007dcc:	0800a518 	.word	0x0800a518
 8007dd0:	3fe00000 	.word	0x3fe00000
 8007dd4:	3ff00000 	.word	0x3ff00000
 8007dd8:	40240000 	.word	0x40240000
 8007ddc:	40140000 	.word	0x40140000
 8007de0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007de2:	2a00      	cmp	r2, #0
 8007de4:	f000 80db 	beq.w	8007f9e <_dtoa_r+0x8ce>
 8007de8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007dea:	2a01      	cmp	r2, #1
 8007dec:	f300 80bf 	bgt.w	8007f6e <_dtoa_r+0x89e>
 8007df0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007df2:	2a00      	cmp	r2, #0
 8007df4:	f000 80b7 	beq.w	8007f66 <_dtoa_r+0x896>
 8007df8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007dfc:	4646      	mov	r6, r8
 8007dfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e02:	2101      	movs	r1, #1
 8007e04:	441a      	add	r2, r3
 8007e06:	4658      	mov	r0, fp
 8007e08:	4498      	add	r8, r3
 8007e0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e0c:	f000 ffb0 	bl	8008d70 <__i2b>
 8007e10:	4605      	mov	r5, r0
 8007e12:	b15e      	cbz	r6, 8007e2c <_dtoa_r+0x75c>
 8007e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	dd08      	ble.n	8007e2c <_dtoa_r+0x75c>
 8007e1a:	42b3      	cmp	r3, r6
 8007e1c:	bfa8      	it	ge
 8007e1e:	4633      	movge	r3, r6
 8007e20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e22:	eba8 0803 	sub.w	r8, r8, r3
 8007e26:	1af6      	subs	r6, r6, r3
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e2e:	b1f3      	cbz	r3, 8007e6e <_dtoa_r+0x79e>
 8007e30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 80b7 	beq.w	8007fa6 <_dtoa_r+0x8d6>
 8007e38:	b18c      	cbz	r4, 8007e5e <_dtoa_r+0x78e>
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	4658      	mov	r0, fp
 8007e40:	f001 f854 	bl	8008eec <__pow5mult>
 8007e44:	464a      	mov	r2, r9
 8007e46:	4601      	mov	r1, r0
 8007e48:	4605      	mov	r5, r0
 8007e4a:	4658      	mov	r0, fp
 8007e4c:	f000 ffa6 	bl	8008d9c <__multiply>
 8007e50:	4649      	mov	r1, r9
 8007e52:	9004      	str	r0, [sp, #16]
 8007e54:	4658      	mov	r0, fp
 8007e56:	f000 fe8d 	bl	8008b74 <_Bfree>
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	4699      	mov	r9, r3
 8007e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e60:	1b1a      	subs	r2, r3, r4
 8007e62:	d004      	beq.n	8007e6e <_dtoa_r+0x79e>
 8007e64:	4649      	mov	r1, r9
 8007e66:	4658      	mov	r0, fp
 8007e68:	f001 f840 	bl	8008eec <__pow5mult>
 8007e6c:	4681      	mov	r9, r0
 8007e6e:	2101      	movs	r1, #1
 8007e70:	4658      	mov	r0, fp
 8007e72:	f000 ff7d 	bl	8008d70 <__i2b>
 8007e76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e78:	4604      	mov	r4, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 81c9 	beq.w	8008212 <_dtoa_r+0xb42>
 8007e80:	461a      	mov	r2, r3
 8007e82:	4601      	mov	r1, r0
 8007e84:	4658      	mov	r0, fp
 8007e86:	f001 f831 	bl	8008eec <__pow5mult>
 8007e8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	f300 808f 	bgt.w	8007fb2 <_dtoa_r+0x8e2>
 8007e94:	9b02      	ldr	r3, [sp, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f040 8087 	bne.w	8007faa <_dtoa_r+0x8da>
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f040 8083 	bne.w	8007fae <_dtoa_r+0x8de>
 8007ea8:	9b03      	ldr	r3, [sp, #12]
 8007eaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007eae:	0d1b      	lsrs	r3, r3, #20
 8007eb0:	051b      	lsls	r3, r3, #20
 8007eb2:	b12b      	cbz	r3, 8007ec0 <_dtoa_r+0x7f0>
 8007eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb6:	f108 0801 	add.w	r8, r8, #1
 8007eba:	3301      	adds	r3, #1
 8007ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 81aa 	beq.w	800821e <_dtoa_r+0xb4e>
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ed0:	6918      	ldr	r0, [r3, #16]
 8007ed2:	f000 ff01 	bl	8008cd8 <__hi0bits>
 8007ed6:	f1c0 0020 	rsb	r0, r0, #32
 8007eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007edc:	4418      	add	r0, r3
 8007ede:	f010 001f 	ands.w	r0, r0, #31
 8007ee2:	d071      	beq.n	8007fc8 <_dtoa_r+0x8f8>
 8007ee4:	f1c0 0320 	rsb	r3, r0, #32
 8007ee8:	2b04      	cmp	r3, #4
 8007eea:	dd65      	ble.n	8007fb8 <_dtoa_r+0x8e8>
 8007eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eee:	f1c0 001c 	rsb	r0, r0, #28
 8007ef2:	4403      	add	r3, r0
 8007ef4:	4480      	add	r8, r0
 8007ef6:	4406      	add	r6, r0
 8007ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007efa:	f1b8 0f00 	cmp.w	r8, #0
 8007efe:	dd05      	ble.n	8007f0c <_dtoa_r+0x83c>
 8007f00:	4649      	mov	r1, r9
 8007f02:	4642      	mov	r2, r8
 8007f04:	4658      	mov	r0, fp
 8007f06:	f001 f84b 	bl	8008fa0 <__lshift>
 8007f0a:	4681      	mov	r9, r0
 8007f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	dd05      	ble.n	8007f1e <_dtoa_r+0x84e>
 8007f12:	4621      	mov	r1, r4
 8007f14:	461a      	mov	r2, r3
 8007f16:	4658      	mov	r0, fp
 8007f18:	f001 f842 	bl	8008fa0 <__lshift>
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d053      	beq.n	8007fcc <_dtoa_r+0x8fc>
 8007f24:	4621      	mov	r1, r4
 8007f26:	4648      	mov	r0, r9
 8007f28:	f001 f8a6 	bl	8009078 <__mcmp>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	da4d      	bge.n	8007fcc <_dtoa_r+0x8fc>
 8007f30:	1e7b      	subs	r3, r7, #1
 8007f32:	4649      	mov	r1, r9
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	220a      	movs	r2, #10
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4658      	mov	r0, fp
 8007f3c:	f000 fe3c 	bl	8008bb8 <__multadd>
 8007f40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f42:	4681      	mov	r9, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 816c 	beq.w	8008222 <_dtoa_r+0xb52>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	220a      	movs	r2, #10
 8007f50:	4658      	mov	r0, fp
 8007f52:	f000 fe31 	bl	8008bb8 <__multadd>
 8007f56:	9b08      	ldr	r3, [sp, #32]
 8007f58:	4605      	mov	r5, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dc61      	bgt.n	8008022 <_dtoa_r+0x952>
 8007f5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	dc3b      	bgt.n	8007fdc <_dtoa_r+0x90c>
 8007f64:	e05d      	b.n	8008022 <_dtoa_r+0x952>
 8007f66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f68:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f6c:	e746      	b.n	8007dfc <_dtoa_r+0x72c>
 8007f6e:	9b07      	ldr	r3, [sp, #28]
 8007f70:	1e5c      	subs	r4, r3, #1
 8007f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	bfbf      	itttt	lt
 8007f78:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007f7a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007f7c:	1ae3      	sublt	r3, r4, r3
 8007f7e:	18d2      	addlt	r2, r2, r3
 8007f80:	bfa8      	it	ge
 8007f82:	1b1c      	subge	r4, r3, r4
 8007f84:	9b07      	ldr	r3, [sp, #28]
 8007f86:	bfbe      	ittt	lt
 8007f88:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007f8a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007f8c:	2400      	movlt	r4, #0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bfb5      	itete	lt
 8007f92:	eba8 0603 	sublt.w	r6, r8, r3
 8007f96:	4646      	movge	r6, r8
 8007f98:	2300      	movlt	r3, #0
 8007f9a:	9b07      	ldrge	r3, [sp, #28]
 8007f9c:	e730      	b.n	8007e00 <_dtoa_r+0x730>
 8007f9e:	4646      	mov	r6, r8
 8007fa0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fa2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007fa4:	e735      	b.n	8007e12 <_dtoa_r+0x742>
 8007fa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fa8:	e75c      	b.n	8007e64 <_dtoa_r+0x794>
 8007faa:	2300      	movs	r3, #0
 8007fac:	e788      	b.n	8007ec0 <_dtoa_r+0x7f0>
 8007fae:	9b02      	ldr	r3, [sp, #8]
 8007fb0:	e786      	b.n	8007ec0 <_dtoa_r+0x7f0>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fb6:	e788      	b.n	8007eca <_dtoa_r+0x7fa>
 8007fb8:	d09f      	beq.n	8007efa <_dtoa_r+0x82a>
 8007fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fbc:	331c      	adds	r3, #28
 8007fbe:	441a      	add	r2, r3
 8007fc0:	4498      	add	r8, r3
 8007fc2:	441e      	add	r6, r3
 8007fc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fc6:	e798      	b.n	8007efa <_dtoa_r+0x82a>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	e7f6      	b.n	8007fba <_dtoa_r+0x8ea>
 8007fcc:	9b07      	ldr	r3, [sp, #28]
 8007fce:	9704      	str	r7, [sp, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dc20      	bgt.n	8008016 <_dtoa_r+0x946>
 8007fd4:	9308      	str	r3, [sp, #32]
 8007fd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	dd1e      	ble.n	800801a <_dtoa_r+0x94a>
 8007fdc:	9b08      	ldr	r3, [sp, #32]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f47f aebc 	bne.w	8007d5c <_dtoa_r+0x68c>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	2205      	movs	r2, #5
 8007fe8:	4658      	mov	r0, fp
 8007fea:	f000 fde5 	bl	8008bb8 <__multadd>
 8007fee:	4601      	mov	r1, r0
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	4648      	mov	r0, r9
 8007ff4:	f001 f840 	bl	8009078 <__mcmp>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	f77f aeaf 	ble.w	8007d5c <_dtoa_r+0x68c>
 8007ffe:	2331      	movs	r3, #49	@ 0x31
 8008000:	4656      	mov	r6, sl
 8008002:	f806 3b01 	strb.w	r3, [r6], #1
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	3301      	adds	r3, #1
 800800a:	9304      	str	r3, [sp, #16]
 800800c:	e6aa      	b.n	8007d64 <_dtoa_r+0x694>
 800800e:	9c07      	ldr	r4, [sp, #28]
 8008010:	9704      	str	r7, [sp, #16]
 8008012:	4625      	mov	r5, r4
 8008014:	e7f3      	b.n	8007ffe <_dtoa_r+0x92e>
 8008016:	9b07      	ldr	r3, [sp, #28]
 8008018:	9308      	str	r3, [sp, #32]
 800801a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8104 	beq.w	800822a <_dtoa_r+0xb5a>
 8008022:	2e00      	cmp	r6, #0
 8008024:	dd05      	ble.n	8008032 <_dtoa_r+0x962>
 8008026:	4629      	mov	r1, r5
 8008028:	4632      	mov	r2, r6
 800802a:	4658      	mov	r0, fp
 800802c:	f000 ffb8 	bl	8008fa0 <__lshift>
 8008030:	4605      	mov	r5, r0
 8008032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008034:	2b00      	cmp	r3, #0
 8008036:	d05a      	beq.n	80080ee <_dtoa_r+0xa1e>
 8008038:	4658      	mov	r0, fp
 800803a:	6869      	ldr	r1, [r5, #4]
 800803c:	f000 fd5a 	bl	8008af4 <_Balloc>
 8008040:	4606      	mov	r6, r0
 8008042:	b928      	cbnz	r0, 8008050 <_dtoa_r+0x980>
 8008044:	4602      	mov	r2, r0
 8008046:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800804a:	4b83      	ldr	r3, [pc, #524]	@ (8008258 <_dtoa_r+0xb88>)
 800804c:	f7ff bb54 	b.w	80076f8 <_dtoa_r+0x28>
 8008050:	692a      	ldr	r2, [r5, #16]
 8008052:	f105 010c 	add.w	r1, r5, #12
 8008056:	3202      	adds	r2, #2
 8008058:	0092      	lsls	r2, r2, #2
 800805a:	300c      	adds	r0, #12
 800805c:	f7ff fa9b 	bl	8007596 <memcpy>
 8008060:	2201      	movs	r2, #1
 8008062:	4631      	mov	r1, r6
 8008064:	4658      	mov	r0, fp
 8008066:	f000 ff9b 	bl	8008fa0 <__lshift>
 800806a:	462f      	mov	r7, r5
 800806c:	4605      	mov	r5, r0
 800806e:	f10a 0301 	add.w	r3, sl, #1
 8008072:	9307      	str	r3, [sp, #28]
 8008074:	9b08      	ldr	r3, [sp, #32]
 8008076:	4453      	add	r3, sl
 8008078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800807a:	9b02      	ldr	r3, [sp, #8]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	930a      	str	r3, [sp, #40]	@ 0x28
 8008082:	9b07      	ldr	r3, [sp, #28]
 8008084:	4621      	mov	r1, r4
 8008086:	3b01      	subs	r3, #1
 8008088:	4648      	mov	r0, r9
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	f7ff fa98 	bl	80075c0 <quorem>
 8008090:	4639      	mov	r1, r7
 8008092:	9008      	str	r0, [sp, #32]
 8008094:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008098:	4648      	mov	r0, r9
 800809a:	f000 ffed 	bl	8009078 <__mcmp>
 800809e:	462a      	mov	r2, r5
 80080a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80080a2:	4621      	mov	r1, r4
 80080a4:	4658      	mov	r0, fp
 80080a6:	f001 f803 	bl	80090b0 <__mdiff>
 80080aa:	68c2      	ldr	r2, [r0, #12]
 80080ac:	4606      	mov	r6, r0
 80080ae:	bb02      	cbnz	r2, 80080f2 <_dtoa_r+0xa22>
 80080b0:	4601      	mov	r1, r0
 80080b2:	4648      	mov	r0, r9
 80080b4:	f000 ffe0 	bl	8009078 <__mcmp>
 80080b8:	4602      	mov	r2, r0
 80080ba:	4631      	mov	r1, r6
 80080bc:	4658      	mov	r0, fp
 80080be:	920c      	str	r2, [sp, #48]	@ 0x30
 80080c0:	f000 fd58 	bl	8008b74 <_Bfree>
 80080c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80080c8:	9e07      	ldr	r6, [sp, #28]
 80080ca:	ea43 0102 	orr.w	r1, r3, r2
 80080ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080d0:	4319      	orrs	r1, r3
 80080d2:	d110      	bne.n	80080f6 <_dtoa_r+0xa26>
 80080d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080d8:	d029      	beq.n	800812e <_dtoa_r+0xa5e>
 80080da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd02      	ble.n	80080e6 <_dtoa_r+0xa16>
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80080e6:	9b02      	ldr	r3, [sp, #8]
 80080e8:	f883 8000 	strb.w	r8, [r3]
 80080ec:	e63b      	b.n	8007d66 <_dtoa_r+0x696>
 80080ee:	4628      	mov	r0, r5
 80080f0:	e7bb      	b.n	800806a <_dtoa_r+0x99a>
 80080f2:	2201      	movs	r2, #1
 80080f4:	e7e1      	b.n	80080ba <_dtoa_r+0x9ea>
 80080f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	db04      	blt.n	8008106 <_dtoa_r+0xa36>
 80080fc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80080fe:	430b      	orrs	r3, r1
 8008100:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008102:	430b      	orrs	r3, r1
 8008104:	d120      	bne.n	8008148 <_dtoa_r+0xa78>
 8008106:	2a00      	cmp	r2, #0
 8008108:	dded      	ble.n	80080e6 <_dtoa_r+0xa16>
 800810a:	4649      	mov	r1, r9
 800810c:	2201      	movs	r2, #1
 800810e:	4658      	mov	r0, fp
 8008110:	f000 ff46 	bl	8008fa0 <__lshift>
 8008114:	4621      	mov	r1, r4
 8008116:	4681      	mov	r9, r0
 8008118:	f000 ffae 	bl	8009078 <__mcmp>
 800811c:	2800      	cmp	r0, #0
 800811e:	dc03      	bgt.n	8008128 <_dtoa_r+0xa58>
 8008120:	d1e1      	bne.n	80080e6 <_dtoa_r+0xa16>
 8008122:	f018 0f01 	tst.w	r8, #1
 8008126:	d0de      	beq.n	80080e6 <_dtoa_r+0xa16>
 8008128:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800812c:	d1d8      	bne.n	80080e0 <_dtoa_r+0xa10>
 800812e:	2339      	movs	r3, #57	@ 0x39
 8008130:	9a02      	ldr	r2, [sp, #8]
 8008132:	7013      	strb	r3, [r2, #0]
 8008134:	4633      	mov	r3, r6
 8008136:	461e      	mov	r6, r3
 8008138:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800813c:	3b01      	subs	r3, #1
 800813e:	2a39      	cmp	r2, #57	@ 0x39
 8008140:	d052      	beq.n	80081e8 <_dtoa_r+0xb18>
 8008142:	3201      	adds	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	e60e      	b.n	8007d66 <_dtoa_r+0x696>
 8008148:	2a00      	cmp	r2, #0
 800814a:	dd07      	ble.n	800815c <_dtoa_r+0xa8c>
 800814c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008150:	d0ed      	beq.n	800812e <_dtoa_r+0xa5e>
 8008152:	9a02      	ldr	r2, [sp, #8]
 8008154:	f108 0301 	add.w	r3, r8, #1
 8008158:	7013      	strb	r3, [r2, #0]
 800815a:	e604      	b.n	8007d66 <_dtoa_r+0x696>
 800815c:	9b07      	ldr	r3, [sp, #28]
 800815e:	9a07      	ldr	r2, [sp, #28]
 8008160:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008166:	4293      	cmp	r3, r2
 8008168:	d028      	beq.n	80081bc <_dtoa_r+0xaec>
 800816a:	4649      	mov	r1, r9
 800816c:	2300      	movs	r3, #0
 800816e:	220a      	movs	r2, #10
 8008170:	4658      	mov	r0, fp
 8008172:	f000 fd21 	bl	8008bb8 <__multadd>
 8008176:	42af      	cmp	r7, r5
 8008178:	4681      	mov	r9, r0
 800817a:	f04f 0300 	mov.w	r3, #0
 800817e:	f04f 020a 	mov.w	r2, #10
 8008182:	4639      	mov	r1, r7
 8008184:	4658      	mov	r0, fp
 8008186:	d107      	bne.n	8008198 <_dtoa_r+0xac8>
 8008188:	f000 fd16 	bl	8008bb8 <__multadd>
 800818c:	4607      	mov	r7, r0
 800818e:	4605      	mov	r5, r0
 8008190:	9b07      	ldr	r3, [sp, #28]
 8008192:	3301      	adds	r3, #1
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	e774      	b.n	8008082 <_dtoa_r+0x9b2>
 8008198:	f000 fd0e 	bl	8008bb8 <__multadd>
 800819c:	4629      	mov	r1, r5
 800819e:	4607      	mov	r7, r0
 80081a0:	2300      	movs	r3, #0
 80081a2:	220a      	movs	r2, #10
 80081a4:	4658      	mov	r0, fp
 80081a6:	f000 fd07 	bl	8008bb8 <__multadd>
 80081aa:	4605      	mov	r5, r0
 80081ac:	e7f0      	b.n	8008190 <_dtoa_r+0xac0>
 80081ae:	9b08      	ldr	r3, [sp, #32]
 80081b0:	2700      	movs	r7, #0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bfcc      	ite	gt
 80081b6:	461e      	movgt	r6, r3
 80081b8:	2601      	movle	r6, #1
 80081ba:	4456      	add	r6, sl
 80081bc:	4649      	mov	r1, r9
 80081be:	2201      	movs	r2, #1
 80081c0:	4658      	mov	r0, fp
 80081c2:	f000 feed 	bl	8008fa0 <__lshift>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4681      	mov	r9, r0
 80081ca:	f000 ff55 	bl	8009078 <__mcmp>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	dcb0      	bgt.n	8008134 <_dtoa_r+0xa64>
 80081d2:	d102      	bne.n	80081da <_dtoa_r+0xb0a>
 80081d4:	f018 0f01 	tst.w	r8, #1
 80081d8:	d1ac      	bne.n	8008134 <_dtoa_r+0xa64>
 80081da:	4633      	mov	r3, r6
 80081dc:	461e      	mov	r6, r3
 80081de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081e2:	2a30      	cmp	r2, #48	@ 0x30
 80081e4:	d0fa      	beq.n	80081dc <_dtoa_r+0xb0c>
 80081e6:	e5be      	b.n	8007d66 <_dtoa_r+0x696>
 80081e8:	459a      	cmp	sl, r3
 80081ea:	d1a4      	bne.n	8008136 <_dtoa_r+0xa66>
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	3301      	adds	r3, #1
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	2331      	movs	r3, #49	@ 0x31
 80081f4:	f88a 3000 	strb.w	r3, [sl]
 80081f8:	e5b5      	b.n	8007d66 <_dtoa_r+0x696>
 80081fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800825c <_dtoa_r+0xb8c>
 8008200:	b11b      	cbz	r3, 800820a <_dtoa_r+0xb3a>
 8008202:	f10a 0308 	add.w	r3, sl, #8
 8008206:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	4650      	mov	r0, sl
 800820c:	b017      	add	sp, #92	@ 0x5c
 800820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008212:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008214:	2b01      	cmp	r3, #1
 8008216:	f77f ae3d 	ble.w	8007e94 <_dtoa_r+0x7c4>
 800821a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800821c:	930a      	str	r3, [sp, #40]	@ 0x28
 800821e:	2001      	movs	r0, #1
 8008220:	e65b      	b.n	8007eda <_dtoa_r+0x80a>
 8008222:	9b08      	ldr	r3, [sp, #32]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f77f aed6 	ble.w	8007fd6 <_dtoa_r+0x906>
 800822a:	4656      	mov	r6, sl
 800822c:	4621      	mov	r1, r4
 800822e:	4648      	mov	r0, r9
 8008230:	f7ff f9c6 	bl	80075c0 <quorem>
 8008234:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008238:	9b08      	ldr	r3, [sp, #32]
 800823a:	f806 8b01 	strb.w	r8, [r6], #1
 800823e:	eba6 020a 	sub.w	r2, r6, sl
 8008242:	4293      	cmp	r3, r2
 8008244:	ddb3      	ble.n	80081ae <_dtoa_r+0xade>
 8008246:	4649      	mov	r1, r9
 8008248:	2300      	movs	r3, #0
 800824a:	220a      	movs	r2, #10
 800824c:	4658      	mov	r0, fp
 800824e:	f000 fcb3 	bl	8008bb8 <__multadd>
 8008252:	4681      	mov	r9, r0
 8008254:	e7ea      	b.n	800822c <_dtoa_r+0xb5c>
 8008256:	bf00      	nop
 8008258:	0800a417 	.word	0x0800a417
 800825c:	0800a39b 	.word	0x0800a39b

08008260 <_free_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4605      	mov	r5, r0
 8008264:	2900      	cmp	r1, #0
 8008266:	d040      	beq.n	80082ea <_free_r+0x8a>
 8008268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826c:	1f0c      	subs	r4, r1, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfb8      	it	lt
 8008272:	18e4      	addlt	r4, r4, r3
 8008274:	f000 fc32 	bl	8008adc <__malloc_lock>
 8008278:	4a1c      	ldr	r2, [pc, #112]	@ (80082ec <_free_r+0x8c>)
 800827a:	6813      	ldr	r3, [r2, #0]
 800827c:	b933      	cbnz	r3, 800828c <_free_r+0x2c>
 800827e:	6063      	str	r3, [r4, #4]
 8008280:	6014      	str	r4, [r2, #0]
 8008282:	4628      	mov	r0, r5
 8008284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008288:	f000 bc2e 	b.w	8008ae8 <__malloc_unlock>
 800828c:	42a3      	cmp	r3, r4
 800828e:	d908      	bls.n	80082a2 <_free_r+0x42>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	1821      	adds	r1, r4, r0
 8008294:	428b      	cmp	r3, r1
 8008296:	bf01      	itttt	eq
 8008298:	6819      	ldreq	r1, [r3, #0]
 800829a:	685b      	ldreq	r3, [r3, #4]
 800829c:	1809      	addeq	r1, r1, r0
 800829e:	6021      	streq	r1, [r4, #0]
 80082a0:	e7ed      	b.n	800827e <_free_r+0x1e>
 80082a2:	461a      	mov	r2, r3
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	b10b      	cbz	r3, 80082ac <_free_r+0x4c>
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	d9fa      	bls.n	80082a2 <_free_r+0x42>
 80082ac:	6811      	ldr	r1, [r2, #0]
 80082ae:	1850      	adds	r0, r2, r1
 80082b0:	42a0      	cmp	r0, r4
 80082b2:	d10b      	bne.n	80082cc <_free_r+0x6c>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	4401      	add	r1, r0
 80082b8:	1850      	adds	r0, r2, r1
 80082ba:	4283      	cmp	r3, r0
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	d1e0      	bne.n	8008282 <_free_r+0x22>
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	4408      	add	r0, r1
 80082c6:	6010      	str	r0, [r2, #0]
 80082c8:	6053      	str	r3, [r2, #4]
 80082ca:	e7da      	b.n	8008282 <_free_r+0x22>
 80082cc:	d902      	bls.n	80082d4 <_free_r+0x74>
 80082ce:	230c      	movs	r3, #12
 80082d0:	602b      	str	r3, [r5, #0]
 80082d2:	e7d6      	b.n	8008282 <_free_r+0x22>
 80082d4:	6820      	ldr	r0, [r4, #0]
 80082d6:	1821      	adds	r1, r4, r0
 80082d8:	428b      	cmp	r3, r1
 80082da:	bf01      	itttt	eq
 80082dc:	6819      	ldreq	r1, [r3, #0]
 80082de:	685b      	ldreq	r3, [r3, #4]
 80082e0:	1809      	addeq	r1, r1, r0
 80082e2:	6021      	streq	r1, [r4, #0]
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	6054      	str	r4, [r2, #4]
 80082e8:	e7cb      	b.n	8008282 <_free_r+0x22>
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	200008bc 	.word	0x200008bc

080082f0 <rshift>:
 80082f0:	6903      	ldr	r3, [r0, #16]
 80082f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80082fa:	f100 0414 	add.w	r4, r0, #20
 80082fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008302:	dd46      	ble.n	8008392 <rshift+0xa2>
 8008304:	f011 011f 	ands.w	r1, r1, #31
 8008308:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800830c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008310:	d10c      	bne.n	800832c <rshift+0x3c>
 8008312:	4629      	mov	r1, r5
 8008314:	f100 0710 	add.w	r7, r0, #16
 8008318:	42b1      	cmp	r1, r6
 800831a:	d335      	bcc.n	8008388 <rshift+0x98>
 800831c:	1a9b      	subs	r3, r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	1eea      	subs	r2, r5, #3
 8008322:	4296      	cmp	r6, r2
 8008324:	bf38      	it	cc
 8008326:	2300      	movcc	r3, #0
 8008328:	4423      	add	r3, r4
 800832a:	e015      	b.n	8008358 <rshift+0x68>
 800832c:	46a1      	mov	r9, r4
 800832e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008332:	f1c1 0820 	rsb	r8, r1, #32
 8008336:	40cf      	lsrs	r7, r1
 8008338:	f105 0e04 	add.w	lr, r5, #4
 800833c:	4576      	cmp	r6, lr
 800833e:	46f4      	mov	ip, lr
 8008340:	d816      	bhi.n	8008370 <rshift+0x80>
 8008342:	1a9a      	subs	r2, r3, r2
 8008344:	0092      	lsls	r2, r2, #2
 8008346:	3a04      	subs	r2, #4
 8008348:	3501      	adds	r5, #1
 800834a:	42ae      	cmp	r6, r5
 800834c:	bf38      	it	cc
 800834e:	2200      	movcc	r2, #0
 8008350:	18a3      	adds	r3, r4, r2
 8008352:	50a7      	str	r7, [r4, r2]
 8008354:	b107      	cbz	r7, 8008358 <rshift+0x68>
 8008356:	3304      	adds	r3, #4
 8008358:	42a3      	cmp	r3, r4
 800835a:	eba3 0204 	sub.w	r2, r3, r4
 800835e:	bf08      	it	eq
 8008360:	2300      	moveq	r3, #0
 8008362:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008366:	6102      	str	r2, [r0, #16]
 8008368:	bf08      	it	eq
 800836a:	6143      	streq	r3, [r0, #20]
 800836c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008370:	f8dc c000 	ldr.w	ip, [ip]
 8008374:	fa0c fc08 	lsl.w	ip, ip, r8
 8008378:	ea4c 0707 	orr.w	r7, ip, r7
 800837c:	f849 7b04 	str.w	r7, [r9], #4
 8008380:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008384:	40cf      	lsrs	r7, r1
 8008386:	e7d9      	b.n	800833c <rshift+0x4c>
 8008388:	f851 cb04 	ldr.w	ip, [r1], #4
 800838c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008390:	e7c2      	b.n	8008318 <rshift+0x28>
 8008392:	4623      	mov	r3, r4
 8008394:	e7e0      	b.n	8008358 <rshift+0x68>

08008396 <__hexdig_fun>:
 8008396:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800839a:	2b09      	cmp	r3, #9
 800839c:	d802      	bhi.n	80083a4 <__hexdig_fun+0xe>
 800839e:	3820      	subs	r0, #32
 80083a0:	b2c0      	uxtb	r0, r0
 80083a2:	4770      	bx	lr
 80083a4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80083a8:	2b05      	cmp	r3, #5
 80083aa:	d801      	bhi.n	80083b0 <__hexdig_fun+0x1a>
 80083ac:	3847      	subs	r0, #71	@ 0x47
 80083ae:	e7f7      	b.n	80083a0 <__hexdig_fun+0xa>
 80083b0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80083b4:	2b05      	cmp	r3, #5
 80083b6:	d801      	bhi.n	80083bc <__hexdig_fun+0x26>
 80083b8:	3827      	subs	r0, #39	@ 0x27
 80083ba:	e7f1      	b.n	80083a0 <__hexdig_fun+0xa>
 80083bc:	2000      	movs	r0, #0
 80083be:	4770      	bx	lr

080083c0 <__gethex>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	468a      	mov	sl, r1
 80083c6:	4690      	mov	r8, r2
 80083c8:	b085      	sub	sp, #20
 80083ca:	9302      	str	r3, [sp, #8]
 80083cc:	680b      	ldr	r3, [r1, #0]
 80083ce:	9001      	str	r0, [sp, #4]
 80083d0:	1c9c      	adds	r4, r3, #2
 80083d2:	46a1      	mov	r9, r4
 80083d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80083d8:	2830      	cmp	r0, #48	@ 0x30
 80083da:	d0fa      	beq.n	80083d2 <__gethex+0x12>
 80083dc:	eba9 0303 	sub.w	r3, r9, r3
 80083e0:	f1a3 0b02 	sub.w	fp, r3, #2
 80083e4:	f7ff ffd7 	bl	8008396 <__hexdig_fun>
 80083e8:	4605      	mov	r5, r0
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d168      	bne.n	80084c0 <__gethex+0x100>
 80083ee:	2201      	movs	r2, #1
 80083f0:	4648      	mov	r0, r9
 80083f2:	499f      	ldr	r1, [pc, #636]	@ (8008670 <__gethex+0x2b0>)
 80083f4:	f7fe fff1 	bl	80073da <strncmp>
 80083f8:	4607      	mov	r7, r0
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d167      	bne.n	80084ce <__gethex+0x10e>
 80083fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008402:	4626      	mov	r6, r4
 8008404:	f7ff ffc7 	bl	8008396 <__hexdig_fun>
 8008408:	2800      	cmp	r0, #0
 800840a:	d062      	beq.n	80084d2 <__gethex+0x112>
 800840c:	4623      	mov	r3, r4
 800840e:	7818      	ldrb	r0, [r3, #0]
 8008410:	4699      	mov	r9, r3
 8008412:	2830      	cmp	r0, #48	@ 0x30
 8008414:	f103 0301 	add.w	r3, r3, #1
 8008418:	d0f9      	beq.n	800840e <__gethex+0x4e>
 800841a:	f7ff ffbc 	bl	8008396 <__hexdig_fun>
 800841e:	fab0 f580 	clz	r5, r0
 8008422:	f04f 0b01 	mov.w	fp, #1
 8008426:	096d      	lsrs	r5, r5, #5
 8008428:	464a      	mov	r2, r9
 800842a:	4616      	mov	r6, r2
 800842c:	7830      	ldrb	r0, [r6, #0]
 800842e:	3201      	adds	r2, #1
 8008430:	f7ff ffb1 	bl	8008396 <__hexdig_fun>
 8008434:	2800      	cmp	r0, #0
 8008436:	d1f8      	bne.n	800842a <__gethex+0x6a>
 8008438:	2201      	movs	r2, #1
 800843a:	4630      	mov	r0, r6
 800843c:	498c      	ldr	r1, [pc, #560]	@ (8008670 <__gethex+0x2b0>)
 800843e:	f7fe ffcc 	bl	80073da <strncmp>
 8008442:	2800      	cmp	r0, #0
 8008444:	d13f      	bne.n	80084c6 <__gethex+0x106>
 8008446:	b944      	cbnz	r4, 800845a <__gethex+0x9a>
 8008448:	1c74      	adds	r4, r6, #1
 800844a:	4622      	mov	r2, r4
 800844c:	4616      	mov	r6, r2
 800844e:	7830      	ldrb	r0, [r6, #0]
 8008450:	3201      	adds	r2, #1
 8008452:	f7ff ffa0 	bl	8008396 <__hexdig_fun>
 8008456:	2800      	cmp	r0, #0
 8008458:	d1f8      	bne.n	800844c <__gethex+0x8c>
 800845a:	1ba4      	subs	r4, r4, r6
 800845c:	00a7      	lsls	r7, r4, #2
 800845e:	7833      	ldrb	r3, [r6, #0]
 8008460:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008464:	2b50      	cmp	r3, #80	@ 0x50
 8008466:	d13e      	bne.n	80084e6 <__gethex+0x126>
 8008468:	7873      	ldrb	r3, [r6, #1]
 800846a:	2b2b      	cmp	r3, #43	@ 0x2b
 800846c:	d033      	beq.n	80084d6 <__gethex+0x116>
 800846e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008470:	d034      	beq.n	80084dc <__gethex+0x11c>
 8008472:	2400      	movs	r4, #0
 8008474:	1c71      	adds	r1, r6, #1
 8008476:	7808      	ldrb	r0, [r1, #0]
 8008478:	f7ff ff8d 	bl	8008396 <__hexdig_fun>
 800847c:	1e43      	subs	r3, r0, #1
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b18      	cmp	r3, #24
 8008482:	d830      	bhi.n	80084e6 <__gethex+0x126>
 8008484:	f1a0 0210 	sub.w	r2, r0, #16
 8008488:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800848c:	f7ff ff83 	bl	8008396 <__hexdig_fun>
 8008490:	f100 3cff 	add.w	ip, r0, #4294967295
 8008494:	fa5f fc8c 	uxtb.w	ip, ip
 8008498:	f1bc 0f18 	cmp.w	ip, #24
 800849c:	f04f 030a 	mov.w	r3, #10
 80084a0:	d91e      	bls.n	80084e0 <__gethex+0x120>
 80084a2:	b104      	cbz	r4, 80084a6 <__gethex+0xe6>
 80084a4:	4252      	negs	r2, r2
 80084a6:	4417      	add	r7, r2
 80084a8:	f8ca 1000 	str.w	r1, [sl]
 80084ac:	b1ed      	cbz	r5, 80084ea <__gethex+0x12a>
 80084ae:	f1bb 0f00 	cmp.w	fp, #0
 80084b2:	bf0c      	ite	eq
 80084b4:	2506      	moveq	r5, #6
 80084b6:	2500      	movne	r5, #0
 80084b8:	4628      	mov	r0, r5
 80084ba:	b005      	add	sp, #20
 80084bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c0:	2500      	movs	r5, #0
 80084c2:	462c      	mov	r4, r5
 80084c4:	e7b0      	b.n	8008428 <__gethex+0x68>
 80084c6:	2c00      	cmp	r4, #0
 80084c8:	d1c7      	bne.n	800845a <__gethex+0x9a>
 80084ca:	4627      	mov	r7, r4
 80084cc:	e7c7      	b.n	800845e <__gethex+0x9e>
 80084ce:	464e      	mov	r6, r9
 80084d0:	462f      	mov	r7, r5
 80084d2:	2501      	movs	r5, #1
 80084d4:	e7c3      	b.n	800845e <__gethex+0x9e>
 80084d6:	2400      	movs	r4, #0
 80084d8:	1cb1      	adds	r1, r6, #2
 80084da:	e7cc      	b.n	8008476 <__gethex+0xb6>
 80084dc:	2401      	movs	r4, #1
 80084de:	e7fb      	b.n	80084d8 <__gethex+0x118>
 80084e0:	fb03 0002 	mla	r0, r3, r2, r0
 80084e4:	e7ce      	b.n	8008484 <__gethex+0xc4>
 80084e6:	4631      	mov	r1, r6
 80084e8:	e7de      	b.n	80084a8 <__gethex+0xe8>
 80084ea:	4629      	mov	r1, r5
 80084ec:	eba6 0309 	sub.w	r3, r6, r9
 80084f0:	3b01      	subs	r3, #1
 80084f2:	2b07      	cmp	r3, #7
 80084f4:	dc0a      	bgt.n	800850c <__gethex+0x14c>
 80084f6:	9801      	ldr	r0, [sp, #4]
 80084f8:	f000 fafc 	bl	8008af4 <_Balloc>
 80084fc:	4604      	mov	r4, r0
 80084fe:	b940      	cbnz	r0, 8008512 <__gethex+0x152>
 8008500:	4602      	mov	r2, r0
 8008502:	21e4      	movs	r1, #228	@ 0xe4
 8008504:	4b5b      	ldr	r3, [pc, #364]	@ (8008674 <__gethex+0x2b4>)
 8008506:	485c      	ldr	r0, [pc, #368]	@ (8008678 <__gethex+0x2b8>)
 8008508:	f001 f9d0 	bl	80098ac <__assert_func>
 800850c:	3101      	adds	r1, #1
 800850e:	105b      	asrs	r3, r3, #1
 8008510:	e7ef      	b.n	80084f2 <__gethex+0x132>
 8008512:	2300      	movs	r3, #0
 8008514:	f100 0a14 	add.w	sl, r0, #20
 8008518:	4655      	mov	r5, sl
 800851a:	469b      	mov	fp, r3
 800851c:	45b1      	cmp	r9, r6
 800851e:	d337      	bcc.n	8008590 <__gethex+0x1d0>
 8008520:	f845 bb04 	str.w	fp, [r5], #4
 8008524:	eba5 050a 	sub.w	r5, r5, sl
 8008528:	10ad      	asrs	r5, r5, #2
 800852a:	6125      	str	r5, [r4, #16]
 800852c:	4658      	mov	r0, fp
 800852e:	f000 fbd3 	bl	8008cd8 <__hi0bits>
 8008532:	016d      	lsls	r5, r5, #5
 8008534:	f8d8 6000 	ldr.w	r6, [r8]
 8008538:	1a2d      	subs	r5, r5, r0
 800853a:	42b5      	cmp	r5, r6
 800853c:	dd54      	ble.n	80085e8 <__gethex+0x228>
 800853e:	1bad      	subs	r5, r5, r6
 8008540:	4629      	mov	r1, r5
 8008542:	4620      	mov	r0, r4
 8008544:	f000 ff5b 	bl	80093fe <__any_on>
 8008548:	4681      	mov	r9, r0
 800854a:	b178      	cbz	r0, 800856c <__gethex+0x1ac>
 800854c:	f04f 0901 	mov.w	r9, #1
 8008550:	1e6b      	subs	r3, r5, #1
 8008552:	1159      	asrs	r1, r3, #5
 8008554:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008558:	f003 021f 	and.w	r2, r3, #31
 800855c:	fa09 f202 	lsl.w	r2, r9, r2
 8008560:	420a      	tst	r2, r1
 8008562:	d003      	beq.n	800856c <__gethex+0x1ac>
 8008564:	454b      	cmp	r3, r9
 8008566:	dc36      	bgt.n	80085d6 <__gethex+0x216>
 8008568:	f04f 0902 	mov.w	r9, #2
 800856c:	4629      	mov	r1, r5
 800856e:	4620      	mov	r0, r4
 8008570:	f7ff febe 	bl	80082f0 <rshift>
 8008574:	442f      	add	r7, r5
 8008576:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800857a:	42bb      	cmp	r3, r7
 800857c:	da42      	bge.n	8008604 <__gethex+0x244>
 800857e:	4621      	mov	r1, r4
 8008580:	9801      	ldr	r0, [sp, #4]
 8008582:	f000 faf7 	bl	8008b74 <_Bfree>
 8008586:	2300      	movs	r3, #0
 8008588:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800858a:	25a3      	movs	r5, #163	@ 0xa3
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e793      	b.n	80084b8 <__gethex+0xf8>
 8008590:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008594:	2a2e      	cmp	r2, #46	@ 0x2e
 8008596:	d012      	beq.n	80085be <__gethex+0x1fe>
 8008598:	2b20      	cmp	r3, #32
 800859a:	d104      	bne.n	80085a6 <__gethex+0x1e6>
 800859c:	f845 bb04 	str.w	fp, [r5], #4
 80085a0:	f04f 0b00 	mov.w	fp, #0
 80085a4:	465b      	mov	r3, fp
 80085a6:	7830      	ldrb	r0, [r6, #0]
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	f7ff fef4 	bl	8008396 <__hexdig_fun>
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	f000 000f 	and.w	r0, r0, #15
 80085b4:	4098      	lsls	r0, r3
 80085b6:	ea4b 0b00 	orr.w	fp, fp, r0
 80085ba:	3304      	adds	r3, #4
 80085bc:	e7ae      	b.n	800851c <__gethex+0x15c>
 80085be:	45b1      	cmp	r9, r6
 80085c0:	d8ea      	bhi.n	8008598 <__gethex+0x1d8>
 80085c2:	2201      	movs	r2, #1
 80085c4:	4630      	mov	r0, r6
 80085c6:	492a      	ldr	r1, [pc, #168]	@ (8008670 <__gethex+0x2b0>)
 80085c8:	9303      	str	r3, [sp, #12]
 80085ca:	f7fe ff06 	bl	80073da <strncmp>
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d1e1      	bne.n	8008598 <__gethex+0x1d8>
 80085d4:	e7a2      	b.n	800851c <__gethex+0x15c>
 80085d6:	4620      	mov	r0, r4
 80085d8:	1ea9      	subs	r1, r5, #2
 80085da:	f000 ff10 	bl	80093fe <__any_on>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d0c2      	beq.n	8008568 <__gethex+0x1a8>
 80085e2:	f04f 0903 	mov.w	r9, #3
 80085e6:	e7c1      	b.n	800856c <__gethex+0x1ac>
 80085e8:	da09      	bge.n	80085fe <__gethex+0x23e>
 80085ea:	1b75      	subs	r5, r6, r5
 80085ec:	4621      	mov	r1, r4
 80085ee:	462a      	mov	r2, r5
 80085f0:	9801      	ldr	r0, [sp, #4]
 80085f2:	f000 fcd5 	bl	8008fa0 <__lshift>
 80085f6:	4604      	mov	r4, r0
 80085f8:	1b7f      	subs	r7, r7, r5
 80085fa:	f100 0a14 	add.w	sl, r0, #20
 80085fe:	f04f 0900 	mov.w	r9, #0
 8008602:	e7b8      	b.n	8008576 <__gethex+0x1b6>
 8008604:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008608:	42bd      	cmp	r5, r7
 800860a:	dd6f      	ble.n	80086ec <__gethex+0x32c>
 800860c:	1bed      	subs	r5, r5, r7
 800860e:	42ae      	cmp	r6, r5
 8008610:	dc34      	bgt.n	800867c <__gethex+0x2bc>
 8008612:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008616:	2b02      	cmp	r3, #2
 8008618:	d022      	beq.n	8008660 <__gethex+0x2a0>
 800861a:	2b03      	cmp	r3, #3
 800861c:	d024      	beq.n	8008668 <__gethex+0x2a8>
 800861e:	2b01      	cmp	r3, #1
 8008620:	d115      	bne.n	800864e <__gethex+0x28e>
 8008622:	42ae      	cmp	r6, r5
 8008624:	d113      	bne.n	800864e <__gethex+0x28e>
 8008626:	2e01      	cmp	r6, #1
 8008628:	d10b      	bne.n	8008642 <__gethex+0x282>
 800862a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800862e:	9a02      	ldr	r2, [sp, #8]
 8008630:	2562      	movs	r5, #98	@ 0x62
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	2301      	movs	r3, #1
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	f8ca 3000 	str.w	r3, [sl]
 800863c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800863e:	601c      	str	r4, [r3, #0]
 8008640:	e73a      	b.n	80084b8 <__gethex+0xf8>
 8008642:	4620      	mov	r0, r4
 8008644:	1e71      	subs	r1, r6, #1
 8008646:	f000 feda 	bl	80093fe <__any_on>
 800864a:	2800      	cmp	r0, #0
 800864c:	d1ed      	bne.n	800862a <__gethex+0x26a>
 800864e:	4621      	mov	r1, r4
 8008650:	9801      	ldr	r0, [sp, #4]
 8008652:	f000 fa8f 	bl	8008b74 <_Bfree>
 8008656:	2300      	movs	r3, #0
 8008658:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800865a:	2550      	movs	r5, #80	@ 0x50
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	e72b      	b.n	80084b8 <__gethex+0xf8>
 8008660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1f3      	bne.n	800864e <__gethex+0x28e>
 8008666:	e7e0      	b.n	800862a <__gethex+0x26a>
 8008668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1dd      	bne.n	800862a <__gethex+0x26a>
 800866e:	e7ee      	b.n	800864e <__gethex+0x28e>
 8008670:	0800a20a 	.word	0x0800a20a
 8008674:	0800a417 	.word	0x0800a417
 8008678:	0800a428 	.word	0x0800a428
 800867c:	1e6f      	subs	r7, r5, #1
 800867e:	f1b9 0f00 	cmp.w	r9, #0
 8008682:	d130      	bne.n	80086e6 <__gethex+0x326>
 8008684:	b127      	cbz	r7, 8008690 <__gethex+0x2d0>
 8008686:	4639      	mov	r1, r7
 8008688:	4620      	mov	r0, r4
 800868a:	f000 feb8 	bl	80093fe <__any_on>
 800868e:	4681      	mov	r9, r0
 8008690:	2301      	movs	r3, #1
 8008692:	4629      	mov	r1, r5
 8008694:	1b76      	subs	r6, r6, r5
 8008696:	2502      	movs	r5, #2
 8008698:	117a      	asrs	r2, r7, #5
 800869a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800869e:	f007 071f 	and.w	r7, r7, #31
 80086a2:	40bb      	lsls	r3, r7
 80086a4:	4213      	tst	r3, r2
 80086a6:	4620      	mov	r0, r4
 80086a8:	bf18      	it	ne
 80086aa:	f049 0902 	orrne.w	r9, r9, #2
 80086ae:	f7ff fe1f 	bl	80082f0 <rshift>
 80086b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80086b6:	f1b9 0f00 	cmp.w	r9, #0
 80086ba:	d047      	beq.n	800874c <__gethex+0x38c>
 80086bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d015      	beq.n	80086f0 <__gethex+0x330>
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d017      	beq.n	80086f8 <__gethex+0x338>
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d109      	bne.n	80086e0 <__gethex+0x320>
 80086cc:	f019 0f02 	tst.w	r9, #2
 80086d0:	d006      	beq.n	80086e0 <__gethex+0x320>
 80086d2:	f8da 3000 	ldr.w	r3, [sl]
 80086d6:	ea49 0903 	orr.w	r9, r9, r3
 80086da:	f019 0f01 	tst.w	r9, #1
 80086de:	d10e      	bne.n	80086fe <__gethex+0x33e>
 80086e0:	f045 0510 	orr.w	r5, r5, #16
 80086e4:	e032      	b.n	800874c <__gethex+0x38c>
 80086e6:	f04f 0901 	mov.w	r9, #1
 80086ea:	e7d1      	b.n	8008690 <__gethex+0x2d0>
 80086ec:	2501      	movs	r5, #1
 80086ee:	e7e2      	b.n	80086b6 <__gethex+0x2f6>
 80086f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086f2:	f1c3 0301 	rsb	r3, r3, #1
 80086f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0f0      	beq.n	80086e0 <__gethex+0x320>
 80086fe:	f04f 0c00 	mov.w	ip, #0
 8008702:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008706:	f104 0314 	add.w	r3, r4, #20
 800870a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800870e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008712:	4618      	mov	r0, r3
 8008714:	f853 2b04 	ldr.w	r2, [r3], #4
 8008718:	f1b2 3fff 	cmp.w	r2, #4294967295
 800871c:	d01b      	beq.n	8008756 <__gethex+0x396>
 800871e:	3201      	adds	r2, #1
 8008720:	6002      	str	r2, [r0, #0]
 8008722:	2d02      	cmp	r5, #2
 8008724:	f104 0314 	add.w	r3, r4, #20
 8008728:	d13c      	bne.n	80087a4 <__gethex+0x3e4>
 800872a:	f8d8 2000 	ldr.w	r2, [r8]
 800872e:	3a01      	subs	r2, #1
 8008730:	42b2      	cmp	r2, r6
 8008732:	d109      	bne.n	8008748 <__gethex+0x388>
 8008734:	2201      	movs	r2, #1
 8008736:	1171      	asrs	r1, r6, #5
 8008738:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800873c:	f006 061f 	and.w	r6, r6, #31
 8008740:	fa02 f606 	lsl.w	r6, r2, r6
 8008744:	421e      	tst	r6, r3
 8008746:	d13a      	bne.n	80087be <__gethex+0x3fe>
 8008748:	f045 0520 	orr.w	r5, r5, #32
 800874c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800874e:	601c      	str	r4, [r3, #0]
 8008750:	9b02      	ldr	r3, [sp, #8]
 8008752:	601f      	str	r7, [r3, #0]
 8008754:	e6b0      	b.n	80084b8 <__gethex+0xf8>
 8008756:	4299      	cmp	r1, r3
 8008758:	f843 cc04 	str.w	ip, [r3, #-4]
 800875c:	d8d9      	bhi.n	8008712 <__gethex+0x352>
 800875e:	68a3      	ldr	r3, [r4, #8]
 8008760:	459b      	cmp	fp, r3
 8008762:	db17      	blt.n	8008794 <__gethex+0x3d4>
 8008764:	6861      	ldr	r1, [r4, #4]
 8008766:	9801      	ldr	r0, [sp, #4]
 8008768:	3101      	adds	r1, #1
 800876a:	f000 f9c3 	bl	8008af4 <_Balloc>
 800876e:	4681      	mov	r9, r0
 8008770:	b918      	cbnz	r0, 800877a <__gethex+0x3ba>
 8008772:	4602      	mov	r2, r0
 8008774:	2184      	movs	r1, #132	@ 0x84
 8008776:	4b19      	ldr	r3, [pc, #100]	@ (80087dc <__gethex+0x41c>)
 8008778:	e6c5      	b.n	8008506 <__gethex+0x146>
 800877a:	6922      	ldr	r2, [r4, #16]
 800877c:	f104 010c 	add.w	r1, r4, #12
 8008780:	3202      	adds	r2, #2
 8008782:	0092      	lsls	r2, r2, #2
 8008784:	300c      	adds	r0, #12
 8008786:	f7fe ff06 	bl	8007596 <memcpy>
 800878a:	4621      	mov	r1, r4
 800878c:	9801      	ldr	r0, [sp, #4]
 800878e:	f000 f9f1 	bl	8008b74 <_Bfree>
 8008792:	464c      	mov	r4, r9
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	6122      	str	r2, [r4, #16]
 800879a:	2201      	movs	r2, #1
 800879c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087a0:	615a      	str	r2, [r3, #20]
 80087a2:	e7be      	b.n	8008722 <__gethex+0x362>
 80087a4:	6922      	ldr	r2, [r4, #16]
 80087a6:	455a      	cmp	r2, fp
 80087a8:	dd0b      	ble.n	80087c2 <__gethex+0x402>
 80087aa:	2101      	movs	r1, #1
 80087ac:	4620      	mov	r0, r4
 80087ae:	f7ff fd9f 	bl	80082f0 <rshift>
 80087b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087b6:	3701      	adds	r7, #1
 80087b8:	42bb      	cmp	r3, r7
 80087ba:	f6ff aee0 	blt.w	800857e <__gethex+0x1be>
 80087be:	2501      	movs	r5, #1
 80087c0:	e7c2      	b.n	8008748 <__gethex+0x388>
 80087c2:	f016 061f 	ands.w	r6, r6, #31
 80087c6:	d0fa      	beq.n	80087be <__gethex+0x3fe>
 80087c8:	4453      	add	r3, sl
 80087ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80087ce:	f000 fa83 	bl	8008cd8 <__hi0bits>
 80087d2:	f1c6 0620 	rsb	r6, r6, #32
 80087d6:	42b0      	cmp	r0, r6
 80087d8:	dbe7      	blt.n	80087aa <__gethex+0x3ea>
 80087da:	e7f0      	b.n	80087be <__gethex+0x3fe>
 80087dc:	0800a417 	.word	0x0800a417

080087e0 <L_shift>:
 80087e0:	f1c2 0208 	rsb	r2, r2, #8
 80087e4:	0092      	lsls	r2, r2, #2
 80087e6:	b570      	push	{r4, r5, r6, lr}
 80087e8:	f1c2 0620 	rsb	r6, r2, #32
 80087ec:	6843      	ldr	r3, [r0, #4]
 80087ee:	6804      	ldr	r4, [r0, #0]
 80087f0:	fa03 f506 	lsl.w	r5, r3, r6
 80087f4:	432c      	orrs	r4, r5
 80087f6:	40d3      	lsrs	r3, r2
 80087f8:	6004      	str	r4, [r0, #0]
 80087fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80087fe:	4288      	cmp	r0, r1
 8008800:	d3f4      	bcc.n	80087ec <L_shift+0xc>
 8008802:	bd70      	pop	{r4, r5, r6, pc}

08008804 <__match>:
 8008804:	b530      	push	{r4, r5, lr}
 8008806:	6803      	ldr	r3, [r0, #0]
 8008808:	3301      	adds	r3, #1
 800880a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800880e:	b914      	cbnz	r4, 8008816 <__match+0x12>
 8008810:	6003      	str	r3, [r0, #0]
 8008812:	2001      	movs	r0, #1
 8008814:	bd30      	pop	{r4, r5, pc}
 8008816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800881a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800881e:	2d19      	cmp	r5, #25
 8008820:	bf98      	it	ls
 8008822:	3220      	addls	r2, #32
 8008824:	42a2      	cmp	r2, r4
 8008826:	d0f0      	beq.n	800880a <__match+0x6>
 8008828:	2000      	movs	r0, #0
 800882a:	e7f3      	b.n	8008814 <__match+0x10>

0800882c <__hexnan>:
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	2500      	movs	r5, #0
 8008832:	680b      	ldr	r3, [r1, #0]
 8008834:	4682      	mov	sl, r0
 8008836:	115e      	asrs	r6, r3, #5
 8008838:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800883c:	f013 031f 	ands.w	r3, r3, #31
 8008840:	bf18      	it	ne
 8008842:	3604      	addne	r6, #4
 8008844:	1f37      	subs	r7, r6, #4
 8008846:	4690      	mov	r8, r2
 8008848:	46b9      	mov	r9, r7
 800884a:	463c      	mov	r4, r7
 800884c:	46ab      	mov	fp, r5
 800884e:	b087      	sub	sp, #28
 8008850:	6801      	ldr	r1, [r0, #0]
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	f846 5c04 	str.w	r5, [r6, #-4]
 8008858:	9502      	str	r5, [sp, #8]
 800885a:	784a      	ldrb	r2, [r1, #1]
 800885c:	1c4b      	adds	r3, r1, #1
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	b342      	cbz	r2, 80088b4 <__hexnan+0x88>
 8008862:	4610      	mov	r0, r2
 8008864:	9105      	str	r1, [sp, #20]
 8008866:	9204      	str	r2, [sp, #16]
 8008868:	f7ff fd95 	bl	8008396 <__hexdig_fun>
 800886c:	2800      	cmp	r0, #0
 800886e:	d151      	bne.n	8008914 <__hexnan+0xe8>
 8008870:	9a04      	ldr	r2, [sp, #16]
 8008872:	9905      	ldr	r1, [sp, #20]
 8008874:	2a20      	cmp	r2, #32
 8008876:	d818      	bhi.n	80088aa <__hexnan+0x7e>
 8008878:	9b02      	ldr	r3, [sp, #8]
 800887a:	459b      	cmp	fp, r3
 800887c:	dd13      	ble.n	80088a6 <__hexnan+0x7a>
 800887e:	454c      	cmp	r4, r9
 8008880:	d206      	bcs.n	8008890 <__hexnan+0x64>
 8008882:	2d07      	cmp	r5, #7
 8008884:	dc04      	bgt.n	8008890 <__hexnan+0x64>
 8008886:	462a      	mov	r2, r5
 8008888:	4649      	mov	r1, r9
 800888a:	4620      	mov	r0, r4
 800888c:	f7ff ffa8 	bl	80087e0 <L_shift>
 8008890:	4544      	cmp	r4, r8
 8008892:	d952      	bls.n	800893a <__hexnan+0x10e>
 8008894:	2300      	movs	r3, #0
 8008896:	f1a4 0904 	sub.w	r9, r4, #4
 800889a:	f844 3c04 	str.w	r3, [r4, #-4]
 800889e:	461d      	mov	r5, r3
 80088a0:	464c      	mov	r4, r9
 80088a2:	f8cd b008 	str.w	fp, [sp, #8]
 80088a6:	9903      	ldr	r1, [sp, #12]
 80088a8:	e7d7      	b.n	800885a <__hexnan+0x2e>
 80088aa:	2a29      	cmp	r2, #41	@ 0x29
 80088ac:	d157      	bne.n	800895e <__hexnan+0x132>
 80088ae:	3102      	adds	r1, #2
 80088b0:	f8ca 1000 	str.w	r1, [sl]
 80088b4:	f1bb 0f00 	cmp.w	fp, #0
 80088b8:	d051      	beq.n	800895e <__hexnan+0x132>
 80088ba:	454c      	cmp	r4, r9
 80088bc:	d206      	bcs.n	80088cc <__hexnan+0xa0>
 80088be:	2d07      	cmp	r5, #7
 80088c0:	dc04      	bgt.n	80088cc <__hexnan+0xa0>
 80088c2:	462a      	mov	r2, r5
 80088c4:	4649      	mov	r1, r9
 80088c6:	4620      	mov	r0, r4
 80088c8:	f7ff ff8a 	bl	80087e0 <L_shift>
 80088cc:	4544      	cmp	r4, r8
 80088ce:	d936      	bls.n	800893e <__hexnan+0x112>
 80088d0:	4623      	mov	r3, r4
 80088d2:	f1a8 0204 	sub.w	r2, r8, #4
 80088d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80088da:	429f      	cmp	r7, r3
 80088dc:	f842 1f04 	str.w	r1, [r2, #4]!
 80088e0:	d2f9      	bcs.n	80088d6 <__hexnan+0xaa>
 80088e2:	1b3b      	subs	r3, r7, r4
 80088e4:	f023 0303 	bic.w	r3, r3, #3
 80088e8:	3304      	adds	r3, #4
 80088ea:	3401      	adds	r4, #1
 80088ec:	3e03      	subs	r6, #3
 80088ee:	42b4      	cmp	r4, r6
 80088f0:	bf88      	it	hi
 80088f2:	2304      	movhi	r3, #4
 80088f4:	2200      	movs	r2, #0
 80088f6:	4443      	add	r3, r8
 80088f8:	f843 2b04 	str.w	r2, [r3], #4
 80088fc:	429f      	cmp	r7, r3
 80088fe:	d2fb      	bcs.n	80088f8 <__hexnan+0xcc>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	b91b      	cbnz	r3, 800890c <__hexnan+0xe0>
 8008904:	4547      	cmp	r7, r8
 8008906:	d128      	bne.n	800895a <__hexnan+0x12e>
 8008908:	2301      	movs	r3, #1
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	2005      	movs	r0, #5
 800890e:	b007      	add	sp, #28
 8008910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008914:	3501      	adds	r5, #1
 8008916:	2d08      	cmp	r5, #8
 8008918:	f10b 0b01 	add.w	fp, fp, #1
 800891c:	dd06      	ble.n	800892c <__hexnan+0x100>
 800891e:	4544      	cmp	r4, r8
 8008920:	d9c1      	bls.n	80088a6 <__hexnan+0x7a>
 8008922:	2300      	movs	r3, #0
 8008924:	2501      	movs	r5, #1
 8008926:	f844 3c04 	str.w	r3, [r4, #-4]
 800892a:	3c04      	subs	r4, #4
 800892c:	6822      	ldr	r2, [r4, #0]
 800892e:	f000 000f 	and.w	r0, r0, #15
 8008932:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008936:	6020      	str	r0, [r4, #0]
 8008938:	e7b5      	b.n	80088a6 <__hexnan+0x7a>
 800893a:	2508      	movs	r5, #8
 800893c:	e7b3      	b.n	80088a6 <__hexnan+0x7a>
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0dd      	beq.n	8008900 <__hexnan+0xd4>
 8008944:	f04f 32ff 	mov.w	r2, #4294967295
 8008948:	f1c3 0320 	rsb	r3, r3, #32
 800894c:	40da      	lsrs	r2, r3
 800894e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008952:	4013      	ands	r3, r2
 8008954:	f846 3c04 	str.w	r3, [r6, #-4]
 8008958:	e7d2      	b.n	8008900 <__hexnan+0xd4>
 800895a:	3f04      	subs	r7, #4
 800895c:	e7d0      	b.n	8008900 <__hexnan+0xd4>
 800895e:	2004      	movs	r0, #4
 8008960:	e7d5      	b.n	800890e <__hexnan+0xe2>
	...

08008964 <malloc>:
 8008964:	4b02      	ldr	r3, [pc, #8]	@ (8008970 <malloc+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f000 b825 	b.w	80089b8 <_malloc_r>
 800896e:	bf00      	nop
 8008970:	20000184 	.word	0x20000184

08008974 <sbrk_aligned>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4e0f      	ldr	r6, [pc, #60]	@ (80089b4 <sbrk_aligned+0x40>)
 8008978:	460c      	mov	r4, r1
 800897a:	6831      	ldr	r1, [r6, #0]
 800897c:	4605      	mov	r5, r0
 800897e:	b911      	cbnz	r1, 8008986 <sbrk_aligned+0x12>
 8008980:	f000 ff84 	bl	800988c <_sbrk_r>
 8008984:	6030      	str	r0, [r6, #0]
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f000 ff7f 	bl	800988c <_sbrk_r>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	d103      	bne.n	800899a <sbrk_aligned+0x26>
 8008992:	f04f 34ff 	mov.w	r4, #4294967295
 8008996:	4620      	mov	r0, r4
 8008998:	bd70      	pop	{r4, r5, r6, pc}
 800899a:	1cc4      	adds	r4, r0, #3
 800899c:	f024 0403 	bic.w	r4, r4, #3
 80089a0:	42a0      	cmp	r0, r4
 80089a2:	d0f8      	beq.n	8008996 <sbrk_aligned+0x22>
 80089a4:	1a21      	subs	r1, r4, r0
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 ff70 	bl	800988c <_sbrk_r>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d1f2      	bne.n	8008996 <sbrk_aligned+0x22>
 80089b0:	e7ef      	b.n	8008992 <sbrk_aligned+0x1e>
 80089b2:	bf00      	nop
 80089b4:	200008b8 	.word	0x200008b8

080089b8 <_malloc_r>:
 80089b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089bc:	1ccd      	adds	r5, r1, #3
 80089be:	f025 0503 	bic.w	r5, r5, #3
 80089c2:	3508      	adds	r5, #8
 80089c4:	2d0c      	cmp	r5, #12
 80089c6:	bf38      	it	cc
 80089c8:	250c      	movcc	r5, #12
 80089ca:	2d00      	cmp	r5, #0
 80089cc:	4606      	mov	r6, r0
 80089ce:	db01      	blt.n	80089d4 <_malloc_r+0x1c>
 80089d0:	42a9      	cmp	r1, r5
 80089d2:	d904      	bls.n	80089de <_malloc_r+0x26>
 80089d4:	230c      	movs	r3, #12
 80089d6:	6033      	str	r3, [r6, #0]
 80089d8:	2000      	movs	r0, #0
 80089da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ab4 <_malloc_r+0xfc>
 80089e2:	f000 f87b 	bl	8008adc <__malloc_lock>
 80089e6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ea:	461c      	mov	r4, r3
 80089ec:	bb44      	cbnz	r4, 8008a40 <_malloc_r+0x88>
 80089ee:	4629      	mov	r1, r5
 80089f0:	4630      	mov	r0, r6
 80089f2:	f7ff ffbf 	bl	8008974 <sbrk_aligned>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	4604      	mov	r4, r0
 80089fa:	d158      	bne.n	8008aae <_malloc_r+0xf6>
 80089fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008a00:	4627      	mov	r7, r4
 8008a02:	2f00      	cmp	r7, #0
 8008a04:	d143      	bne.n	8008a8e <_malloc_r+0xd6>
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	d04b      	beq.n	8008aa2 <_malloc_r+0xea>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	4630      	mov	r0, r6
 8008a10:	eb04 0903 	add.w	r9, r4, r3
 8008a14:	f000 ff3a 	bl	800988c <_sbrk_r>
 8008a18:	4581      	cmp	r9, r0
 8008a1a:	d142      	bne.n	8008aa2 <_malloc_r+0xea>
 8008a1c:	6821      	ldr	r1, [r4, #0]
 8008a1e:	4630      	mov	r0, r6
 8008a20:	1a6d      	subs	r5, r5, r1
 8008a22:	4629      	mov	r1, r5
 8008a24:	f7ff ffa6 	bl	8008974 <sbrk_aligned>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d03a      	beq.n	8008aa2 <_malloc_r+0xea>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	442b      	add	r3, r5
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	f8d8 3000 	ldr.w	r3, [r8]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	bb62      	cbnz	r2, 8008a94 <_malloc_r+0xdc>
 8008a3a:	f8c8 7000 	str.w	r7, [r8]
 8008a3e:	e00f      	b.n	8008a60 <_malloc_r+0xa8>
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	1b52      	subs	r2, r2, r5
 8008a44:	d420      	bmi.n	8008a88 <_malloc_r+0xd0>
 8008a46:	2a0b      	cmp	r2, #11
 8008a48:	d917      	bls.n	8008a7a <_malloc_r+0xc2>
 8008a4a:	1961      	adds	r1, r4, r5
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	6025      	str	r5, [r4, #0]
 8008a50:	bf18      	it	ne
 8008a52:	6059      	strne	r1, [r3, #4]
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	bf08      	it	eq
 8008a58:	f8c8 1000 	streq.w	r1, [r8]
 8008a5c:	5162      	str	r2, [r4, r5]
 8008a5e:	604b      	str	r3, [r1, #4]
 8008a60:	4630      	mov	r0, r6
 8008a62:	f000 f841 	bl	8008ae8 <__malloc_unlock>
 8008a66:	f104 000b 	add.w	r0, r4, #11
 8008a6a:	1d23      	adds	r3, r4, #4
 8008a6c:	f020 0007 	bic.w	r0, r0, #7
 8008a70:	1ac2      	subs	r2, r0, r3
 8008a72:	bf1c      	itt	ne
 8008a74:	1a1b      	subne	r3, r3, r0
 8008a76:	50a3      	strne	r3, [r4, r2]
 8008a78:	e7af      	b.n	80089da <_malloc_r+0x22>
 8008a7a:	6862      	ldr	r2, [r4, #4]
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	bf0c      	ite	eq
 8008a80:	f8c8 2000 	streq.w	r2, [r8]
 8008a84:	605a      	strne	r2, [r3, #4]
 8008a86:	e7eb      	b.n	8008a60 <_malloc_r+0xa8>
 8008a88:	4623      	mov	r3, r4
 8008a8a:	6864      	ldr	r4, [r4, #4]
 8008a8c:	e7ae      	b.n	80089ec <_malloc_r+0x34>
 8008a8e:	463c      	mov	r4, r7
 8008a90:	687f      	ldr	r7, [r7, #4]
 8008a92:	e7b6      	b.n	8008a02 <_malloc_r+0x4a>
 8008a94:	461a      	mov	r2, r3
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d1fb      	bne.n	8008a94 <_malloc_r+0xdc>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6053      	str	r3, [r2, #4]
 8008aa0:	e7de      	b.n	8008a60 <_malloc_r+0xa8>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	6033      	str	r3, [r6, #0]
 8008aa8:	f000 f81e 	bl	8008ae8 <__malloc_unlock>
 8008aac:	e794      	b.n	80089d8 <_malloc_r+0x20>
 8008aae:	6005      	str	r5, [r0, #0]
 8008ab0:	e7d6      	b.n	8008a60 <_malloc_r+0xa8>
 8008ab2:	bf00      	nop
 8008ab4:	200008bc 	.word	0x200008bc

08008ab8 <__ascii_mbtowc>:
 8008ab8:	b082      	sub	sp, #8
 8008aba:	b901      	cbnz	r1, 8008abe <__ascii_mbtowc+0x6>
 8008abc:	a901      	add	r1, sp, #4
 8008abe:	b142      	cbz	r2, 8008ad2 <__ascii_mbtowc+0x1a>
 8008ac0:	b14b      	cbz	r3, 8008ad6 <__ascii_mbtowc+0x1e>
 8008ac2:	7813      	ldrb	r3, [r2, #0]
 8008ac4:	600b      	str	r3, [r1, #0]
 8008ac6:	7812      	ldrb	r2, [r2, #0]
 8008ac8:	1e10      	subs	r0, r2, #0
 8008aca:	bf18      	it	ne
 8008acc:	2001      	movne	r0, #1
 8008ace:	b002      	add	sp, #8
 8008ad0:	4770      	bx	lr
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	e7fb      	b.n	8008ace <__ascii_mbtowc+0x16>
 8008ad6:	f06f 0001 	mvn.w	r0, #1
 8008ada:	e7f8      	b.n	8008ace <__ascii_mbtowc+0x16>

08008adc <__malloc_lock>:
 8008adc:	4801      	ldr	r0, [pc, #4]	@ (8008ae4 <__malloc_lock+0x8>)
 8008ade:	f7fe bd42 	b.w	8007566 <__retarget_lock_acquire_recursive>
 8008ae2:	bf00      	nop
 8008ae4:	200008b4 	.word	0x200008b4

08008ae8 <__malloc_unlock>:
 8008ae8:	4801      	ldr	r0, [pc, #4]	@ (8008af0 <__malloc_unlock+0x8>)
 8008aea:	f7fe bd3d 	b.w	8007568 <__retarget_lock_release_recursive>
 8008aee:	bf00      	nop
 8008af0:	200008b4 	.word	0x200008b4

08008af4 <_Balloc>:
 8008af4:	b570      	push	{r4, r5, r6, lr}
 8008af6:	69c6      	ldr	r6, [r0, #28]
 8008af8:	4604      	mov	r4, r0
 8008afa:	460d      	mov	r5, r1
 8008afc:	b976      	cbnz	r6, 8008b1c <_Balloc+0x28>
 8008afe:	2010      	movs	r0, #16
 8008b00:	f7ff ff30 	bl	8008964 <malloc>
 8008b04:	4602      	mov	r2, r0
 8008b06:	61e0      	str	r0, [r4, #28]
 8008b08:	b920      	cbnz	r0, 8008b14 <_Balloc+0x20>
 8008b0a:	216b      	movs	r1, #107	@ 0x6b
 8008b0c:	4b17      	ldr	r3, [pc, #92]	@ (8008b6c <_Balloc+0x78>)
 8008b0e:	4818      	ldr	r0, [pc, #96]	@ (8008b70 <_Balloc+0x7c>)
 8008b10:	f000 fecc 	bl	80098ac <__assert_func>
 8008b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b18:	6006      	str	r6, [r0, #0]
 8008b1a:	60c6      	str	r6, [r0, #12]
 8008b1c:	69e6      	ldr	r6, [r4, #28]
 8008b1e:	68f3      	ldr	r3, [r6, #12]
 8008b20:	b183      	cbz	r3, 8008b44 <_Balloc+0x50>
 8008b22:	69e3      	ldr	r3, [r4, #28]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b2a:	b9b8      	cbnz	r0, 8008b5c <_Balloc+0x68>
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b32:	1d72      	adds	r2, r6, #5
 8008b34:	4620      	mov	r0, r4
 8008b36:	0092      	lsls	r2, r2, #2
 8008b38:	f000 fed6 	bl	80098e8 <_calloc_r>
 8008b3c:	b160      	cbz	r0, 8008b58 <_Balloc+0x64>
 8008b3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b42:	e00e      	b.n	8008b62 <_Balloc+0x6e>
 8008b44:	2221      	movs	r2, #33	@ 0x21
 8008b46:	2104      	movs	r1, #4
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 fecd 	bl	80098e8 <_calloc_r>
 8008b4e:	69e3      	ldr	r3, [r4, #28]
 8008b50:	60f0      	str	r0, [r6, #12]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e4      	bne.n	8008b22 <_Balloc+0x2e>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	6802      	ldr	r2, [r0, #0]
 8008b5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b62:	2300      	movs	r3, #0
 8008b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b68:	e7f7      	b.n	8008b5a <_Balloc+0x66>
 8008b6a:	bf00      	nop
 8008b6c:	0800a3a8 	.word	0x0800a3a8
 8008b70:	0800a488 	.word	0x0800a488

08008b74 <_Bfree>:
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	69c6      	ldr	r6, [r0, #28]
 8008b78:	4605      	mov	r5, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	b976      	cbnz	r6, 8008b9c <_Bfree+0x28>
 8008b7e:	2010      	movs	r0, #16
 8008b80:	f7ff fef0 	bl	8008964 <malloc>
 8008b84:	4602      	mov	r2, r0
 8008b86:	61e8      	str	r0, [r5, #28]
 8008b88:	b920      	cbnz	r0, 8008b94 <_Bfree+0x20>
 8008b8a:	218f      	movs	r1, #143	@ 0x8f
 8008b8c:	4b08      	ldr	r3, [pc, #32]	@ (8008bb0 <_Bfree+0x3c>)
 8008b8e:	4809      	ldr	r0, [pc, #36]	@ (8008bb4 <_Bfree+0x40>)
 8008b90:	f000 fe8c 	bl	80098ac <__assert_func>
 8008b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b98:	6006      	str	r6, [r0, #0]
 8008b9a:	60c6      	str	r6, [r0, #12]
 8008b9c:	b13c      	cbz	r4, 8008bae <_Bfree+0x3a>
 8008b9e:	69eb      	ldr	r3, [r5, #28]
 8008ba0:	6862      	ldr	r2, [r4, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ba8:	6021      	str	r1, [r4, #0]
 8008baa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bae:	bd70      	pop	{r4, r5, r6, pc}
 8008bb0:	0800a3a8 	.word	0x0800a3a8
 8008bb4:	0800a488 	.word	0x0800a488

08008bb8 <__multadd>:
 8008bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbc:	4607      	mov	r7, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	461e      	mov	r6, r3
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	690d      	ldr	r5, [r1, #16]
 8008bc6:	f101 0c14 	add.w	ip, r1, #20
 8008bca:	f8dc 3000 	ldr.w	r3, [ip]
 8008bce:	3001      	adds	r0, #1
 8008bd0:	b299      	uxth	r1, r3
 8008bd2:	fb02 6101 	mla	r1, r2, r1, r6
 8008bd6:	0c1e      	lsrs	r6, r3, #16
 8008bd8:	0c0b      	lsrs	r3, r1, #16
 8008bda:	fb02 3306 	mla	r3, r2, r6, r3
 8008bde:	b289      	uxth	r1, r1
 8008be0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008be4:	4285      	cmp	r5, r0
 8008be6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bea:	f84c 1b04 	str.w	r1, [ip], #4
 8008bee:	dcec      	bgt.n	8008bca <__multadd+0x12>
 8008bf0:	b30e      	cbz	r6, 8008c36 <__multadd+0x7e>
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	42ab      	cmp	r3, r5
 8008bf6:	dc19      	bgt.n	8008c2c <__multadd+0x74>
 8008bf8:	6861      	ldr	r1, [r4, #4]
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	3101      	adds	r1, #1
 8008bfe:	f7ff ff79 	bl	8008af4 <_Balloc>
 8008c02:	4680      	mov	r8, r0
 8008c04:	b928      	cbnz	r0, 8008c12 <__multadd+0x5a>
 8008c06:	4602      	mov	r2, r0
 8008c08:	21ba      	movs	r1, #186	@ 0xba
 8008c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c3c <__multadd+0x84>)
 8008c0c:	480c      	ldr	r0, [pc, #48]	@ (8008c40 <__multadd+0x88>)
 8008c0e:	f000 fe4d 	bl	80098ac <__assert_func>
 8008c12:	6922      	ldr	r2, [r4, #16]
 8008c14:	f104 010c 	add.w	r1, r4, #12
 8008c18:	3202      	adds	r2, #2
 8008c1a:	0092      	lsls	r2, r2, #2
 8008c1c:	300c      	adds	r0, #12
 8008c1e:	f7fe fcba 	bl	8007596 <memcpy>
 8008c22:	4621      	mov	r1, r4
 8008c24:	4638      	mov	r0, r7
 8008c26:	f7ff ffa5 	bl	8008b74 <_Bfree>
 8008c2a:	4644      	mov	r4, r8
 8008c2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c30:	3501      	adds	r5, #1
 8008c32:	615e      	str	r6, [r3, #20]
 8008c34:	6125      	str	r5, [r4, #16]
 8008c36:	4620      	mov	r0, r4
 8008c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c3c:	0800a417 	.word	0x0800a417
 8008c40:	0800a488 	.word	0x0800a488

08008c44 <__s2b>:
 8008c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c48:	4615      	mov	r5, r2
 8008c4a:	2209      	movs	r2, #9
 8008c4c:	461f      	mov	r7, r3
 8008c4e:	3308      	adds	r3, #8
 8008c50:	460c      	mov	r4, r1
 8008c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c56:	4606      	mov	r6, r0
 8008c58:	2201      	movs	r2, #1
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	db09      	blt.n	8008c74 <__s2b+0x30>
 8008c60:	4630      	mov	r0, r6
 8008c62:	f7ff ff47 	bl	8008af4 <_Balloc>
 8008c66:	b940      	cbnz	r0, 8008c7a <__s2b+0x36>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	21d3      	movs	r1, #211	@ 0xd3
 8008c6c:	4b18      	ldr	r3, [pc, #96]	@ (8008cd0 <__s2b+0x8c>)
 8008c6e:	4819      	ldr	r0, [pc, #100]	@ (8008cd4 <__s2b+0x90>)
 8008c70:	f000 fe1c 	bl	80098ac <__assert_func>
 8008c74:	0052      	lsls	r2, r2, #1
 8008c76:	3101      	adds	r1, #1
 8008c78:	e7f0      	b.n	8008c5c <__s2b+0x18>
 8008c7a:	9b08      	ldr	r3, [sp, #32]
 8008c7c:	2d09      	cmp	r5, #9
 8008c7e:	6143      	str	r3, [r0, #20]
 8008c80:	f04f 0301 	mov.w	r3, #1
 8008c84:	6103      	str	r3, [r0, #16]
 8008c86:	dd16      	ble.n	8008cb6 <__s2b+0x72>
 8008c88:	f104 0909 	add.w	r9, r4, #9
 8008c8c:	46c8      	mov	r8, r9
 8008c8e:	442c      	add	r4, r5
 8008c90:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008c94:	4601      	mov	r1, r0
 8008c96:	220a      	movs	r2, #10
 8008c98:	4630      	mov	r0, r6
 8008c9a:	3b30      	subs	r3, #48	@ 0x30
 8008c9c:	f7ff ff8c 	bl	8008bb8 <__multadd>
 8008ca0:	45a0      	cmp	r8, r4
 8008ca2:	d1f5      	bne.n	8008c90 <__s2b+0x4c>
 8008ca4:	f1a5 0408 	sub.w	r4, r5, #8
 8008ca8:	444c      	add	r4, r9
 8008caa:	1b2d      	subs	r5, r5, r4
 8008cac:	1963      	adds	r3, r4, r5
 8008cae:	42bb      	cmp	r3, r7
 8008cb0:	db04      	blt.n	8008cbc <__s2b+0x78>
 8008cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb6:	2509      	movs	r5, #9
 8008cb8:	340a      	adds	r4, #10
 8008cba:	e7f6      	b.n	8008caa <__s2b+0x66>
 8008cbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	220a      	movs	r2, #10
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	3b30      	subs	r3, #48	@ 0x30
 8008cc8:	f7ff ff76 	bl	8008bb8 <__multadd>
 8008ccc:	e7ee      	b.n	8008cac <__s2b+0x68>
 8008cce:	bf00      	nop
 8008cd0:	0800a417 	.word	0x0800a417
 8008cd4:	0800a488 	.word	0x0800a488

08008cd8 <__hi0bits>:
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008cde:	bf3a      	itte	cc
 8008ce0:	0403      	lslcc	r3, r0, #16
 8008ce2:	2010      	movcc	r0, #16
 8008ce4:	2000      	movcs	r0, #0
 8008ce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cea:	bf3c      	itt	cc
 8008cec:	021b      	lslcc	r3, r3, #8
 8008cee:	3008      	addcc	r0, #8
 8008cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cf4:	bf3c      	itt	cc
 8008cf6:	011b      	lslcc	r3, r3, #4
 8008cf8:	3004      	addcc	r0, #4
 8008cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cfe:	bf3c      	itt	cc
 8008d00:	009b      	lslcc	r3, r3, #2
 8008d02:	3002      	addcc	r0, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	db05      	blt.n	8008d14 <__hi0bits+0x3c>
 8008d08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d0c:	f100 0001 	add.w	r0, r0, #1
 8008d10:	bf08      	it	eq
 8008d12:	2020      	moveq	r0, #32
 8008d14:	4770      	bx	lr

08008d16 <__lo0bits>:
 8008d16:	6803      	ldr	r3, [r0, #0]
 8008d18:	4602      	mov	r2, r0
 8008d1a:	f013 0007 	ands.w	r0, r3, #7
 8008d1e:	d00b      	beq.n	8008d38 <__lo0bits+0x22>
 8008d20:	07d9      	lsls	r1, r3, #31
 8008d22:	d421      	bmi.n	8008d68 <__lo0bits+0x52>
 8008d24:	0798      	lsls	r0, r3, #30
 8008d26:	bf49      	itett	mi
 8008d28:	085b      	lsrmi	r3, r3, #1
 8008d2a:	089b      	lsrpl	r3, r3, #2
 8008d2c:	2001      	movmi	r0, #1
 8008d2e:	6013      	strmi	r3, [r2, #0]
 8008d30:	bf5c      	itt	pl
 8008d32:	2002      	movpl	r0, #2
 8008d34:	6013      	strpl	r3, [r2, #0]
 8008d36:	4770      	bx	lr
 8008d38:	b299      	uxth	r1, r3
 8008d3a:	b909      	cbnz	r1, 8008d40 <__lo0bits+0x2a>
 8008d3c:	2010      	movs	r0, #16
 8008d3e:	0c1b      	lsrs	r3, r3, #16
 8008d40:	b2d9      	uxtb	r1, r3
 8008d42:	b909      	cbnz	r1, 8008d48 <__lo0bits+0x32>
 8008d44:	3008      	adds	r0, #8
 8008d46:	0a1b      	lsrs	r3, r3, #8
 8008d48:	0719      	lsls	r1, r3, #28
 8008d4a:	bf04      	itt	eq
 8008d4c:	091b      	lsreq	r3, r3, #4
 8008d4e:	3004      	addeq	r0, #4
 8008d50:	0799      	lsls	r1, r3, #30
 8008d52:	bf04      	itt	eq
 8008d54:	089b      	lsreq	r3, r3, #2
 8008d56:	3002      	addeq	r0, #2
 8008d58:	07d9      	lsls	r1, r3, #31
 8008d5a:	d403      	bmi.n	8008d64 <__lo0bits+0x4e>
 8008d5c:	085b      	lsrs	r3, r3, #1
 8008d5e:	f100 0001 	add.w	r0, r0, #1
 8008d62:	d003      	beq.n	8008d6c <__lo0bits+0x56>
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	4770      	bx	lr
 8008d68:	2000      	movs	r0, #0
 8008d6a:	4770      	bx	lr
 8008d6c:	2020      	movs	r0, #32
 8008d6e:	4770      	bx	lr

08008d70 <__i2b>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	460c      	mov	r4, r1
 8008d74:	2101      	movs	r1, #1
 8008d76:	f7ff febd 	bl	8008af4 <_Balloc>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	b928      	cbnz	r0, 8008d8a <__i2b+0x1a>
 8008d7e:	f240 1145 	movw	r1, #325	@ 0x145
 8008d82:	4b04      	ldr	r3, [pc, #16]	@ (8008d94 <__i2b+0x24>)
 8008d84:	4804      	ldr	r0, [pc, #16]	@ (8008d98 <__i2b+0x28>)
 8008d86:	f000 fd91 	bl	80098ac <__assert_func>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	6144      	str	r4, [r0, #20]
 8008d8e:	6103      	str	r3, [r0, #16]
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	bf00      	nop
 8008d94:	0800a417 	.word	0x0800a417
 8008d98:	0800a488 	.word	0x0800a488

08008d9c <__multiply>:
 8008d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da0:	4614      	mov	r4, r2
 8008da2:	690a      	ldr	r2, [r1, #16]
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	460f      	mov	r7, r1
 8008da8:	429a      	cmp	r2, r3
 8008daa:	bfa2      	ittt	ge
 8008dac:	4623      	movge	r3, r4
 8008dae:	460c      	movge	r4, r1
 8008db0:	461f      	movge	r7, r3
 8008db2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008db6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008dba:	68a3      	ldr	r3, [r4, #8]
 8008dbc:	6861      	ldr	r1, [r4, #4]
 8008dbe:	eb0a 0609 	add.w	r6, sl, r9
 8008dc2:	42b3      	cmp	r3, r6
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	bfb8      	it	lt
 8008dc8:	3101      	addlt	r1, #1
 8008dca:	f7ff fe93 	bl	8008af4 <_Balloc>
 8008dce:	b930      	cbnz	r0, 8008dde <__multiply+0x42>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008dd6:	4b43      	ldr	r3, [pc, #268]	@ (8008ee4 <__multiply+0x148>)
 8008dd8:	4843      	ldr	r0, [pc, #268]	@ (8008ee8 <__multiply+0x14c>)
 8008dda:	f000 fd67 	bl	80098ac <__assert_func>
 8008dde:	f100 0514 	add.w	r5, r0, #20
 8008de2:	462b      	mov	r3, r5
 8008de4:	2200      	movs	r2, #0
 8008de6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008dea:	4543      	cmp	r3, r8
 8008dec:	d321      	bcc.n	8008e32 <__multiply+0x96>
 8008dee:	f107 0114 	add.w	r1, r7, #20
 8008df2:	f104 0214 	add.w	r2, r4, #20
 8008df6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008dfa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008dfe:	9302      	str	r3, [sp, #8]
 8008e00:	1b13      	subs	r3, r2, r4
 8008e02:	3b15      	subs	r3, #21
 8008e04:	f023 0303 	bic.w	r3, r3, #3
 8008e08:	3304      	adds	r3, #4
 8008e0a:	f104 0715 	add.w	r7, r4, #21
 8008e0e:	42ba      	cmp	r2, r7
 8008e10:	bf38      	it	cc
 8008e12:	2304      	movcc	r3, #4
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	9b02      	ldr	r3, [sp, #8]
 8008e18:	9103      	str	r1, [sp, #12]
 8008e1a:	428b      	cmp	r3, r1
 8008e1c:	d80c      	bhi.n	8008e38 <__multiply+0x9c>
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	dd03      	ble.n	8008e2a <__multiply+0x8e>
 8008e22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d05a      	beq.n	8008ee0 <__multiply+0x144>
 8008e2a:	6106      	str	r6, [r0, #16]
 8008e2c:	b005      	add	sp, #20
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	f843 2b04 	str.w	r2, [r3], #4
 8008e36:	e7d8      	b.n	8008dea <__multiply+0x4e>
 8008e38:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e3c:	f1ba 0f00 	cmp.w	sl, #0
 8008e40:	d023      	beq.n	8008e8a <__multiply+0xee>
 8008e42:	46a9      	mov	r9, r5
 8008e44:	f04f 0c00 	mov.w	ip, #0
 8008e48:	f104 0e14 	add.w	lr, r4, #20
 8008e4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e50:	f8d9 3000 	ldr.w	r3, [r9]
 8008e54:	fa1f fb87 	uxth.w	fp, r7
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e5e:	4463      	add	r3, ip
 8008e60:	f8d9 c000 	ldr.w	ip, [r9]
 8008e64:	0c3f      	lsrs	r7, r7, #16
 8008e66:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008e6a:	fb0a c707 	mla	r7, sl, r7, ip
 8008e6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e78:	4572      	cmp	r2, lr
 8008e7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e7e:	f849 3b04 	str.w	r3, [r9], #4
 8008e82:	d8e3      	bhi.n	8008e4c <__multiply+0xb0>
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	f845 c003 	str.w	ip, [r5, r3]
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	3104      	adds	r1, #4
 8008e8e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008e92:	f1b9 0f00 	cmp.w	r9, #0
 8008e96:	d021      	beq.n	8008edc <__multiply+0x140>
 8008e98:	46ae      	mov	lr, r5
 8008e9a:	f04f 0a00 	mov.w	sl, #0
 8008e9e:	682b      	ldr	r3, [r5, #0]
 8008ea0:	f104 0c14 	add.w	ip, r4, #20
 8008ea4:	f8bc b000 	ldrh.w	fp, [ip]
 8008ea8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	fb09 770b 	mla	r7, r9, fp, r7
 8008eb2:	4457      	add	r7, sl
 8008eb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008eb8:	f84e 3b04 	str.w	r3, [lr], #4
 8008ebc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ec0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ec4:	f8be 3000 	ldrh.w	r3, [lr]
 8008ec8:	4562      	cmp	r2, ip
 8008eca:	fb09 330a 	mla	r3, r9, sl, r3
 8008ece:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008ed2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ed6:	d8e5      	bhi.n	8008ea4 <__multiply+0x108>
 8008ed8:	9f01      	ldr	r7, [sp, #4]
 8008eda:	51eb      	str	r3, [r5, r7]
 8008edc:	3504      	adds	r5, #4
 8008ede:	e79a      	b.n	8008e16 <__multiply+0x7a>
 8008ee0:	3e01      	subs	r6, #1
 8008ee2:	e79c      	b.n	8008e1e <__multiply+0x82>
 8008ee4:	0800a417 	.word	0x0800a417
 8008ee8:	0800a488 	.word	0x0800a488

08008eec <__pow5mult>:
 8008eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef0:	4615      	mov	r5, r2
 8008ef2:	f012 0203 	ands.w	r2, r2, #3
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	460e      	mov	r6, r1
 8008efa:	d007      	beq.n	8008f0c <__pow5mult+0x20>
 8008efc:	4c25      	ldr	r4, [pc, #148]	@ (8008f94 <__pow5mult+0xa8>)
 8008efe:	3a01      	subs	r2, #1
 8008f00:	2300      	movs	r3, #0
 8008f02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f06:	f7ff fe57 	bl	8008bb8 <__multadd>
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	10ad      	asrs	r5, r5, #2
 8008f0e:	d03d      	beq.n	8008f8c <__pow5mult+0xa0>
 8008f10:	69fc      	ldr	r4, [r7, #28]
 8008f12:	b97c      	cbnz	r4, 8008f34 <__pow5mult+0x48>
 8008f14:	2010      	movs	r0, #16
 8008f16:	f7ff fd25 	bl	8008964 <malloc>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	61f8      	str	r0, [r7, #28]
 8008f1e:	b928      	cbnz	r0, 8008f2c <__pow5mult+0x40>
 8008f20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f24:	4b1c      	ldr	r3, [pc, #112]	@ (8008f98 <__pow5mult+0xac>)
 8008f26:	481d      	ldr	r0, [pc, #116]	@ (8008f9c <__pow5mult+0xb0>)
 8008f28:	f000 fcc0 	bl	80098ac <__assert_func>
 8008f2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f30:	6004      	str	r4, [r0, #0]
 8008f32:	60c4      	str	r4, [r0, #12]
 8008f34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f3c:	b94c      	cbnz	r4, 8008f52 <__pow5mult+0x66>
 8008f3e:	f240 2171 	movw	r1, #625	@ 0x271
 8008f42:	4638      	mov	r0, r7
 8008f44:	f7ff ff14 	bl	8008d70 <__i2b>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f50:	6003      	str	r3, [r0, #0]
 8008f52:	f04f 0900 	mov.w	r9, #0
 8008f56:	07eb      	lsls	r3, r5, #31
 8008f58:	d50a      	bpl.n	8008f70 <__pow5mult+0x84>
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f7ff ff1c 	bl	8008d9c <__multiply>
 8008f64:	4680      	mov	r8, r0
 8008f66:	4631      	mov	r1, r6
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f7ff fe03 	bl	8008b74 <_Bfree>
 8008f6e:	4646      	mov	r6, r8
 8008f70:	106d      	asrs	r5, r5, #1
 8008f72:	d00b      	beq.n	8008f8c <__pow5mult+0xa0>
 8008f74:	6820      	ldr	r0, [r4, #0]
 8008f76:	b938      	cbnz	r0, 8008f88 <__pow5mult+0x9c>
 8008f78:	4622      	mov	r2, r4
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff ff0d 	bl	8008d9c <__multiply>
 8008f82:	6020      	str	r0, [r4, #0]
 8008f84:	f8c0 9000 	str.w	r9, [r0]
 8008f88:	4604      	mov	r4, r0
 8008f8a:	e7e4      	b.n	8008f56 <__pow5mult+0x6a>
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f92:	bf00      	nop
 8008f94:	0800a4e4 	.word	0x0800a4e4
 8008f98:	0800a3a8 	.word	0x0800a3a8
 8008f9c:	0800a488 	.word	0x0800a488

08008fa0 <__lshift>:
 8008fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	4607      	mov	r7, r0
 8008fa8:	4691      	mov	r9, r2
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	6849      	ldr	r1, [r1, #4]
 8008fae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fb2:	68a3      	ldr	r3, [r4, #8]
 8008fb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fb8:	f108 0601 	add.w	r6, r8, #1
 8008fbc:	42b3      	cmp	r3, r6
 8008fbe:	db0b      	blt.n	8008fd8 <__lshift+0x38>
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	f7ff fd97 	bl	8008af4 <_Balloc>
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	b948      	cbnz	r0, 8008fde <__lshift+0x3e>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008fd0:	4b27      	ldr	r3, [pc, #156]	@ (8009070 <__lshift+0xd0>)
 8008fd2:	4828      	ldr	r0, [pc, #160]	@ (8009074 <__lshift+0xd4>)
 8008fd4:	f000 fc6a 	bl	80098ac <__assert_func>
 8008fd8:	3101      	adds	r1, #1
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	e7ee      	b.n	8008fbc <__lshift+0x1c>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f100 0114 	add.w	r1, r0, #20
 8008fe4:	f100 0210 	add.w	r2, r0, #16
 8008fe8:	4618      	mov	r0, r3
 8008fea:	4553      	cmp	r3, sl
 8008fec:	db33      	blt.n	8009056 <__lshift+0xb6>
 8008fee:	6920      	ldr	r0, [r4, #16]
 8008ff0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ff4:	f104 0314 	add.w	r3, r4, #20
 8008ff8:	f019 091f 	ands.w	r9, r9, #31
 8008ffc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009000:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009004:	d02b      	beq.n	800905e <__lshift+0xbe>
 8009006:	468a      	mov	sl, r1
 8009008:	2200      	movs	r2, #0
 800900a:	f1c9 0e20 	rsb	lr, r9, #32
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	fa00 f009 	lsl.w	r0, r0, r9
 8009014:	4310      	orrs	r0, r2
 8009016:	f84a 0b04 	str.w	r0, [sl], #4
 800901a:	f853 2b04 	ldr.w	r2, [r3], #4
 800901e:	459c      	cmp	ip, r3
 8009020:	fa22 f20e 	lsr.w	r2, r2, lr
 8009024:	d8f3      	bhi.n	800900e <__lshift+0x6e>
 8009026:	ebac 0304 	sub.w	r3, ip, r4
 800902a:	3b15      	subs	r3, #21
 800902c:	f023 0303 	bic.w	r3, r3, #3
 8009030:	3304      	adds	r3, #4
 8009032:	f104 0015 	add.w	r0, r4, #21
 8009036:	4584      	cmp	ip, r0
 8009038:	bf38      	it	cc
 800903a:	2304      	movcc	r3, #4
 800903c:	50ca      	str	r2, [r1, r3]
 800903e:	b10a      	cbz	r2, 8009044 <__lshift+0xa4>
 8009040:	f108 0602 	add.w	r6, r8, #2
 8009044:	3e01      	subs	r6, #1
 8009046:	4638      	mov	r0, r7
 8009048:	4621      	mov	r1, r4
 800904a:	612e      	str	r6, [r5, #16]
 800904c:	f7ff fd92 	bl	8008b74 <_Bfree>
 8009050:	4628      	mov	r0, r5
 8009052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009056:	f842 0f04 	str.w	r0, [r2, #4]!
 800905a:	3301      	adds	r3, #1
 800905c:	e7c5      	b.n	8008fea <__lshift+0x4a>
 800905e:	3904      	subs	r1, #4
 8009060:	f853 2b04 	ldr.w	r2, [r3], #4
 8009064:	459c      	cmp	ip, r3
 8009066:	f841 2f04 	str.w	r2, [r1, #4]!
 800906a:	d8f9      	bhi.n	8009060 <__lshift+0xc0>
 800906c:	e7ea      	b.n	8009044 <__lshift+0xa4>
 800906e:	bf00      	nop
 8009070:	0800a417 	.word	0x0800a417
 8009074:	0800a488 	.word	0x0800a488

08009078 <__mcmp>:
 8009078:	4603      	mov	r3, r0
 800907a:	690a      	ldr	r2, [r1, #16]
 800907c:	6900      	ldr	r0, [r0, #16]
 800907e:	b530      	push	{r4, r5, lr}
 8009080:	1a80      	subs	r0, r0, r2
 8009082:	d10e      	bne.n	80090a2 <__mcmp+0x2a>
 8009084:	3314      	adds	r3, #20
 8009086:	3114      	adds	r1, #20
 8009088:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800908c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009090:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009094:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009098:	4295      	cmp	r5, r2
 800909a:	d003      	beq.n	80090a4 <__mcmp+0x2c>
 800909c:	d205      	bcs.n	80090aa <__mcmp+0x32>
 800909e:	f04f 30ff 	mov.w	r0, #4294967295
 80090a2:	bd30      	pop	{r4, r5, pc}
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	d3f3      	bcc.n	8009090 <__mcmp+0x18>
 80090a8:	e7fb      	b.n	80090a2 <__mcmp+0x2a>
 80090aa:	2001      	movs	r0, #1
 80090ac:	e7f9      	b.n	80090a2 <__mcmp+0x2a>
	...

080090b0 <__mdiff>:
 80090b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	4689      	mov	r9, r1
 80090b6:	4606      	mov	r6, r0
 80090b8:	4611      	mov	r1, r2
 80090ba:	4648      	mov	r0, r9
 80090bc:	4614      	mov	r4, r2
 80090be:	f7ff ffdb 	bl	8009078 <__mcmp>
 80090c2:	1e05      	subs	r5, r0, #0
 80090c4:	d112      	bne.n	80090ec <__mdiff+0x3c>
 80090c6:	4629      	mov	r1, r5
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7ff fd13 	bl	8008af4 <_Balloc>
 80090ce:	4602      	mov	r2, r0
 80090d0:	b928      	cbnz	r0, 80090de <__mdiff+0x2e>
 80090d2:	f240 2137 	movw	r1, #567	@ 0x237
 80090d6:	4b3e      	ldr	r3, [pc, #248]	@ (80091d0 <__mdiff+0x120>)
 80090d8:	483e      	ldr	r0, [pc, #248]	@ (80091d4 <__mdiff+0x124>)
 80090da:	f000 fbe7 	bl	80098ac <__assert_func>
 80090de:	2301      	movs	r3, #1
 80090e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090e4:	4610      	mov	r0, r2
 80090e6:	b003      	add	sp, #12
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	bfbc      	itt	lt
 80090ee:	464b      	movlt	r3, r9
 80090f0:	46a1      	movlt	r9, r4
 80090f2:	4630      	mov	r0, r6
 80090f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80090f8:	bfba      	itte	lt
 80090fa:	461c      	movlt	r4, r3
 80090fc:	2501      	movlt	r5, #1
 80090fe:	2500      	movge	r5, #0
 8009100:	f7ff fcf8 	bl	8008af4 <_Balloc>
 8009104:	4602      	mov	r2, r0
 8009106:	b918      	cbnz	r0, 8009110 <__mdiff+0x60>
 8009108:	f240 2145 	movw	r1, #581	@ 0x245
 800910c:	4b30      	ldr	r3, [pc, #192]	@ (80091d0 <__mdiff+0x120>)
 800910e:	e7e3      	b.n	80090d8 <__mdiff+0x28>
 8009110:	f100 0b14 	add.w	fp, r0, #20
 8009114:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009118:	f109 0310 	add.w	r3, r9, #16
 800911c:	60c5      	str	r5, [r0, #12]
 800911e:	f04f 0c00 	mov.w	ip, #0
 8009122:	f109 0514 	add.w	r5, r9, #20
 8009126:	46d9      	mov	r9, fp
 8009128:	6926      	ldr	r6, [r4, #16]
 800912a:	f104 0e14 	add.w	lr, r4, #20
 800912e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009132:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	9b01      	ldr	r3, [sp, #4]
 800913a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800913e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009142:	b281      	uxth	r1, r0
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	fa1f f38a 	uxth.w	r3, sl
 800914a:	1a5b      	subs	r3, r3, r1
 800914c:	0c00      	lsrs	r0, r0, #16
 800914e:	4463      	add	r3, ip
 8009150:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009154:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009158:	b29b      	uxth	r3, r3
 800915a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800915e:	4576      	cmp	r6, lr
 8009160:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009164:	f849 3b04 	str.w	r3, [r9], #4
 8009168:	d8e6      	bhi.n	8009138 <__mdiff+0x88>
 800916a:	1b33      	subs	r3, r6, r4
 800916c:	3b15      	subs	r3, #21
 800916e:	f023 0303 	bic.w	r3, r3, #3
 8009172:	3415      	adds	r4, #21
 8009174:	3304      	adds	r3, #4
 8009176:	42a6      	cmp	r6, r4
 8009178:	bf38      	it	cc
 800917a:	2304      	movcc	r3, #4
 800917c:	441d      	add	r5, r3
 800917e:	445b      	add	r3, fp
 8009180:	461e      	mov	r6, r3
 8009182:	462c      	mov	r4, r5
 8009184:	4544      	cmp	r4, r8
 8009186:	d30e      	bcc.n	80091a6 <__mdiff+0xf6>
 8009188:	f108 0103 	add.w	r1, r8, #3
 800918c:	1b49      	subs	r1, r1, r5
 800918e:	f021 0103 	bic.w	r1, r1, #3
 8009192:	3d03      	subs	r5, #3
 8009194:	45a8      	cmp	r8, r5
 8009196:	bf38      	it	cc
 8009198:	2100      	movcc	r1, #0
 800919a:	440b      	add	r3, r1
 800919c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091a0:	b199      	cbz	r1, 80091ca <__mdiff+0x11a>
 80091a2:	6117      	str	r7, [r2, #16]
 80091a4:	e79e      	b.n	80090e4 <__mdiff+0x34>
 80091a6:	46e6      	mov	lr, ip
 80091a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80091ac:	fa1f fc81 	uxth.w	ip, r1
 80091b0:	44f4      	add	ip, lr
 80091b2:	0c08      	lsrs	r0, r1, #16
 80091b4:	4471      	add	r1, lr
 80091b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80091ba:	b289      	uxth	r1, r1
 80091bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80091c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091c4:	f846 1b04 	str.w	r1, [r6], #4
 80091c8:	e7dc      	b.n	8009184 <__mdiff+0xd4>
 80091ca:	3f01      	subs	r7, #1
 80091cc:	e7e6      	b.n	800919c <__mdiff+0xec>
 80091ce:	bf00      	nop
 80091d0:	0800a417 	.word	0x0800a417
 80091d4:	0800a488 	.word	0x0800a488

080091d8 <__ulp>:
 80091d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009214 <__ulp+0x3c>)
 80091da:	400b      	ands	r3, r1
 80091dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	dc08      	bgt.n	80091f6 <__ulp+0x1e>
 80091e4:	425b      	negs	r3, r3
 80091e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80091ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80091ee:	da04      	bge.n	80091fa <__ulp+0x22>
 80091f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80091f4:	4113      	asrs	r3, r2
 80091f6:	2200      	movs	r2, #0
 80091f8:	e008      	b.n	800920c <__ulp+0x34>
 80091fa:	f1a2 0314 	sub.w	r3, r2, #20
 80091fe:	2b1e      	cmp	r3, #30
 8009200:	bfd6      	itet	le
 8009202:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009206:	2201      	movgt	r2, #1
 8009208:	40da      	lsrle	r2, r3
 800920a:	2300      	movs	r3, #0
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	7ff00000 	.word	0x7ff00000

08009218 <__b2d>:
 8009218:	6902      	ldr	r2, [r0, #16]
 800921a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921c:	f100 0614 	add.w	r6, r0, #20
 8009220:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009224:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009228:	4f1e      	ldr	r7, [pc, #120]	@ (80092a4 <__b2d+0x8c>)
 800922a:	4620      	mov	r0, r4
 800922c:	f7ff fd54 	bl	8008cd8 <__hi0bits>
 8009230:	4603      	mov	r3, r0
 8009232:	f1c0 0020 	rsb	r0, r0, #32
 8009236:	2b0a      	cmp	r3, #10
 8009238:	f1a2 0504 	sub.w	r5, r2, #4
 800923c:	6008      	str	r0, [r1, #0]
 800923e:	dc12      	bgt.n	8009266 <__b2d+0x4e>
 8009240:	42ae      	cmp	r6, r5
 8009242:	bf2c      	ite	cs
 8009244:	2200      	movcs	r2, #0
 8009246:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800924a:	f1c3 0c0b 	rsb	ip, r3, #11
 800924e:	3315      	adds	r3, #21
 8009250:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009254:	fa04 f303 	lsl.w	r3, r4, r3
 8009258:	fa22 f20c 	lsr.w	r2, r2, ip
 800925c:	ea4e 0107 	orr.w	r1, lr, r7
 8009260:	431a      	orrs	r2, r3
 8009262:	4610      	mov	r0, r2
 8009264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009266:	42ae      	cmp	r6, r5
 8009268:	bf36      	itet	cc
 800926a:	f1a2 0508 	subcc.w	r5, r2, #8
 800926e:	2200      	movcs	r2, #0
 8009270:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009274:	3b0b      	subs	r3, #11
 8009276:	d012      	beq.n	800929e <__b2d+0x86>
 8009278:	f1c3 0720 	rsb	r7, r3, #32
 800927c:	fa22 f107 	lsr.w	r1, r2, r7
 8009280:	409c      	lsls	r4, r3
 8009282:	430c      	orrs	r4, r1
 8009284:	42b5      	cmp	r5, r6
 8009286:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800928a:	bf94      	ite	ls
 800928c:	2400      	movls	r4, #0
 800928e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009292:	409a      	lsls	r2, r3
 8009294:	40fc      	lsrs	r4, r7
 8009296:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800929a:	4322      	orrs	r2, r4
 800929c:	e7e1      	b.n	8009262 <__b2d+0x4a>
 800929e:	ea44 0107 	orr.w	r1, r4, r7
 80092a2:	e7de      	b.n	8009262 <__b2d+0x4a>
 80092a4:	3ff00000 	.word	0x3ff00000

080092a8 <__d2b>:
 80092a8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80092ac:	2101      	movs	r1, #1
 80092ae:	4690      	mov	r8, r2
 80092b0:	4699      	mov	r9, r3
 80092b2:	9e08      	ldr	r6, [sp, #32]
 80092b4:	f7ff fc1e 	bl	8008af4 <_Balloc>
 80092b8:	4604      	mov	r4, r0
 80092ba:	b930      	cbnz	r0, 80092ca <__d2b+0x22>
 80092bc:	4602      	mov	r2, r0
 80092be:	f240 310f 	movw	r1, #783	@ 0x30f
 80092c2:	4b23      	ldr	r3, [pc, #140]	@ (8009350 <__d2b+0xa8>)
 80092c4:	4823      	ldr	r0, [pc, #140]	@ (8009354 <__d2b+0xac>)
 80092c6:	f000 faf1 	bl	80098ac <__assert_func>
 80092ca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092d2:	b10d      	cbz	r5, 80092d8 <__d2b+0x30>
 80092d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	f1b8 0300 	subs.w	r3, r8, #0
 80092de:	d024      	beq.n	800932a <__d2b+0x82>
 80092e0:	4668      	mov	r0, sp
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	f7ff fd17 	bl	8008d16 <__lo0bits>
 80092e8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092ec:	b1d8      	cbz	r0, 8009326 <__d2b+0x7e>
 80092ee:	f1c0 0320 	rsb	r3, r0, #32
 80092f2:	fa02 f303 	lsl.w	r3, r2, r3
 80092f6:	430b      	orrs	r3, r1
 80092f8:	40c2      	lsrs	r2, r0
 80092fa:	6163      	str	r3, [r4, #20]
 80092fc:	9201      	str	r2, [sp, #4]
 80092fe:	9b01      	ldr	r3, [sp, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	bf0c      	ite	eq
 8009304:	2201      	moveq	r2, #1
 8009306:	2202      	movne	r2, #2
 8009308:	61a3      	str	r3, [r4, #24]
 800930a:	6122      	str	r2, [r4, #16]
 800930c:	b1ad      	cbz	r5, 800933a <__d2b+0x92>
 800930e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009312:	4405      	add	r5, r0
 8009314:	6035      	str	r5, [r6, #0]
 8009316:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800931a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800931c:	6018      	str	r0, [r3, #0]
 800931e:	4620      	mov	r0, r4
 8009320:	b002      	add	sp, #8
 8009322:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009326:	6161      	str	r1, [r4, #20]
 8009328:	e7e9      	b.n	80092fe <__d2b+0x56>
 800932a:	a801      	add	r0, sp, #4
 800932c:	f7ff fcf3 	bl	8008d16 <__lo0bits>
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	6163      	str	r3, [r4, #20]
 8009336:	3020      	adds	r0, #32
 8009338:	e7e7      	b.n	800930a <__d2b+0x62>
 800933a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800933e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009342:	6030      	str	r0, [r6, #0]
 8009344:	6918      	ldr	r0, [r3, #16]
 8009346:	f7ff fcc7 	bl	8008cd8 <__hi0bits>
 800934a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800934e:	e7e4      	b.n	800931a <__d2b+0x72>
 8009350:	0800a417 	.word	0x0800a417
 8009354:	0800a488 	.word	0x0800a488

08009358 <__ratio>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	b085      	sub	sp, #20
 800935e:	e9cd 1000 	strd	r1, r0, [sp]
 8009362:	a902      	add	r1, sp, #8
 8009364:	f7ff ff58 	bl	8009218 <__b2d>
 8009368:	468b      	mov	fp, r1
 800936a:	4606      	mov	r6, r0
 800936c:	460f      	mov	r7, r1
 800936e:	9800      	ldr	r0, [sp, #0]
 8009370:	a903      	add	r1, sp, #12
 8009372:	f7ff ff51 	bl	8009218 <__b2d>
 8009376:	460d      	mov	r5, r1
 8009378:	9b01      	ldr	r3, [sp, #4]
 800937a:	4689      	mov	r9, r1
 800937c:	6919      	ldr	r1, [r3, #16]
 800937e:	9b00      	ldr	r3, [sp, #0]
 8009380:	4604      	mov	r4, r0
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	4630      	mov	r0, r6
 8009386:	1ac9      	subs	r1, r1, r3
 8009388:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009392:	2b00      	cmp	r3, #0
 8009394:	bfcd      	iteet	gt
 8009396:	463a      	movgt	r2, r7
 8009398:	462a      	movle	r2, r5
 800939a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800939e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80093a2:	bfd8      	it	le
 80093a4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80093a8:	464b      	mov	r3, r9
 80093aa:	4622      	mov	r2, r4
 80093ac:	4659      	mov	r1, fp
 80093ae:	f7f7 f9bd 	bl	800072c <__aeabi_ddiv>
 80093b2:	b005      	add	sp, #20
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093b8 <__copybits>:
 80093b8:	3901      	subs	r1, #1
 80093ba:	b570      	push	{r4, r5, r6, lr}
 80093bc:	1149      	asrs	r1, r1, #5
 80093be:	6914      	ldr	r4, [r2, #16]
 80093c0:	3101      	adds	r1, #1
 80093c2:	f102 0314 	add.w	r3, r2, #20
 80093c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80093ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80093ce:	1f05      	subs	r5, r0, #4
 80093d0:	42a3      	cmp	r3, r4
 80093d2:	d30c      	bcc.n	80093ee <__copybits+0x36>
 80093d4:	1aa3      	subs	r3, r4, r2
 80093d6:	3b11      	subs	r3, #17
 80093d8:	f023 0303 	bic.w	r3, r3, #3
 80093dc:	3211      	adds	r2, #17
 80093de:	42a2      	cmp	r2, r4
 80093e0:	bf88      	it	hi
 80093e2:	2300      	movhi	r3, #0
 80093e4:	4418      	add	r0, r3
 80093e6:	2300      	movs	r3, #0
 80093e8:	4288      	cmp	r0, r1
 80093ea:	d305      	bcc.n	80093f8 <__copybits+0x40>
 80093ec:	bd70      	pop	{r4, r5, r6, pc}
 80093ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80093f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80093f6:	e7eb      	b.n	80093d0 <__copybits+0x18>
 80093f8:	f840 3b04 	str.w	r3, [r0], #4
 80093fc:	e7f4      	b.n	80093e8 <__copybits+0x30>

080093fe <__any_on>:
 80093fe:	f100 0214 	add.w	r2, r0, #20
 8009402:	6900      	ldr	r0, [r0, #16]
 8009404:	114b      	asrs	r3, r1, #5
 8009406:	4298      	cmp	r0, r3
 8009408:	b510      	push	{r4, lr}
 800940a:	db11      	blt.n	8009430 <__any_on+0x32>
 800940c:	dd0a      	ble.n	8009424 <__any_on+0x26>
 800940e:	f011 011f 	ands.w	r1, r1, #31
 8009412:	d007      	beq.n	8009424 <__any_on+0x26>
 8009414:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009418:	fa24 f001 	lsr.w	r0, r4, r1
 800941c:	fa00 f101 	lsl.w	r1, r0, r1
 8009420:	428c      	cmp	r4, r1
 8009422:	d10b      	bne.n	800943c <__any_on+0x3e>
 8009424:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009428:	4293      	cmp	r3, r2
 800942a:	d803      	bhi.n	8009434 <__any_on+0x36>
 800942c:	2000      	movs	r0, #0
 800942e:	bd10      	pop	{r4, pc}
 8009430:	4603      	mov	r3, r0
 8009432:	e7f7      	b.n	8009424 <__any_on+0x26>
 8009434:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009438:	2900      	cmp	r1, #0
 800943a:	d0f5      	beq.n	8009428 <__any_on+0x2a>
 800943c:	2001      	movs	r0, #1
 800943e:	e7f6      	b.n	800942e <__any_on+0x30>

08009440 <__ascii_wctomb>:
 8009440:	4603      	mov	r3, r0
 8009442:	4608      	mov	r0, r1
 8009444:	b141      	cbz	r1, 8009458 <__ascii_wctomb+0x18>
 8009446:	2aff      	cmp	r2, #255	@ 0xff
 8009448:	d904      	bls.n	8009454 <__ascii_wctomb+0x14>
 800944a:	228a      	movs	r2, #138	@ 0x8a
 800944c:	f04f 30ff 	mov.w	r0, #4294967295
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	4770      	bx	lr
 8009454:	2001      	movs	r0, #1
 8009456:	700a      	strb	r2, [r1, #0]
 8009458:	4770      	bx	lr

0800945a <__ssputs_r>:
 800945a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800945e:	461f      	mov	r7, r3
 8009460:	688e      	ldr	r6, [r1, #8]
 8009462:	4682      	mov	sl, r0
 8009464:	42be      	cmp	r6, r7
 8009466:	460c      	mov	r4, r1
 8009468:	4690      	mov	r8, r2
 800946a:	680b      	ldr	r3, [r1, #0]
 800946c:	d82d      	bhi.n	80094ca <__ssputs_r+0x70>
 800946e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009472:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009476:	d026      	beq.n	80094c6 <__ssputs_r+0x6c>
 8009478:	6965      	ldr	r5, [r4, #20]
 800947a:	6909      	ldr	r1, [r1, #16]
 800947c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009480:	eba3 0901 	sub.w	r9, r3, r1
 8009484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009488:	1c7b      	adds	r3, r7, #1
 800948a:	444b      	add	r3, r9
 800948c:	106d      	asrs	r5, r5, #1
 800948e:	429d      	cmp	r5, r3
 8009490:	bf38      	it	cc
 8009492:	461d      	movcc	r5, r3
 8009494:	0553      	lsls	r3, r2, #21
 8009496:	d527      	bpl.n	80094e8 <__ssputs_r+0x8e>
 8009498:	4629      	mov	r1, r5
 800949a:	f7ff fa8d 	bl	80089b8 <_malloc_r>
 800949e:	4606      	mov	r6, r0
 80094a0:	b360      	cbz	r0, 80094fc <__ssputs_r+0xa2>
 80094a2:	464a      	mov	r2, r9
 80094a4:	6921      	ldr	r1, [r4, #16]
 80094a6:	f7fe f876 	bl	8007596 <memcpy>
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80094b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	6126      	str	r6, [r4, #16]
 80094b8:	444e      	add	r6, r9
 80094ba:	6026      	str	r6, [r4, #0]
 80094bc:	463e      	mov	r6, r7
 80094be:	6165      	str	r5, [r4, #20]
 80094c0:	eba5 0509 	sub.w	r5, r5, r9
 80094c4:	60a5      	str	r5, [r4, #8]
 80094c6:	42be      	cmp	r6, r7
 80094c8:	d900      	bls.n	80094cc <__ssputs_r+0x72>
 80094ca:	463e      	mov	r6, r7
 80094cc:	4632      	mov	r2, r6
 80094ce:	4641      	mov	r1, r8
 80094d0:	6820      	ldr	r0, [r4, #0]
 80094d2:	f000 f9c1 	bl	8009858 <memmove>
 80094d6:	2000      	movs	r0, #0
 80094d8:	68a3      	ldr	r3, [r4, #8]
 80094da:	1b9b      	subs	r3, r3, r6
 80094dc:	60a3      	str	r3, [r4, #8]
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	4433      	add	r3, r6
 80094e2:	6023      	str	r3, [r4, #0]
 80094e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e8:	462a      	mov	r2, r5
 80094ea:	f000 fa11 	bl	8009910 <_realloc_r>
 80094ee:	4606      	mov	r6, r0
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d1e0      	bne.n	80094b6 <__ssputs_r+0x5c>
 80094f4:	4650      	mov	r0, sl
 80094f6:	6921      	ldr	r1, [r4, #16]
 80094f8:	f7fe feb2 	bl	8008260 <_free_r>
 80094fc:	230c      	movs	r3, #12
 80094fe:	f8ca 3000 	str.w	r3, [sl]
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f04f 30ff 	mov.w	r0, #4294967295
 8009508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	e7e9      	b.n	80094e4 <__ssputs_r+0x8a>

08009510 <_svfiprintf_r>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	4698      	mov	r8, r3
 8009516:	898b      	ldrh	r3, [r1, #12]
 8009518:	4607      	mov	r7, r0
 800951a:	061b      	lsls	r3, r3, #24
 800951c:	460d      	mov	r5, r1
 800951e:	4614      	mov	r4, r2
 8009520:	b09d      	sub	sp, #116	@ 0x74
 8009522:	d510      	bpl.n	8009546 <_svfiprintf_r+0x36>
 8009524:	690b      	ldr	r3, [r1, #16]
 8009526:	b973      	cbnz	r3, 8009546 <_svfiprintf_r+0x36>
 8009528:	2140      	movs	r1, #64	@ 0x40
 800952a:	f7ff fa45 	bl	80089b8 <_malloc_r>
 800952e:	6028      	str	r0, [r5, #0]
 8009530:	6128      	str	r0, [r5, #16]
 8009532:	b930      	cbnz	r0, 8009542 <_svfiprintf_r+0x32>
 8009534:	230c      	movs	r3, #12
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	f04f 30ff 	mov.w	r0, #4294967295
 800953c:	b01d      	add	sp, #116	@ 0x74
 800953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009542:	2340      	movs	r3, #64	@ 0x40
 8009544:	616b      	str	r3, [r5, #20]
 8009546:	2300      	movs	r3, #0
 8009548:	9309      	str	r3, [sp, #36]	@ 0x24
 800954a:	2320      	movs	r3, #32
 800954c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009550:	2330      	movs	r3, #48	@ 0x30
 8009552:	f04f 0901 	mov.w	r9, #1
 8009556:	f8cd 800c 	str.w	r8, [sp, #12]
 800955a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80096f4 <_svfiprintf_r+0x1e4>
 800955e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009562:	4623      	mov	r3, r4
 8009564:	469a      	mov	sl, r3
 8009566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800956a:	b10a      	cbz	r2, 8009570 <_svfiprintf_r+0x60>
 800956c:	2a25      	cmp	r2, #37	@ 0x25
 800956e:	d1f9      	bne.n	8009564 <_svfiprintf_r+0x54>
 8009570:	ebba 0b04 	subs.w	fp, sl, r4
 8009574:	d00b      	beq.n	800958e <_svfiprintf_r+0x7e>
 8009576:	465b      	mov	r3, fp
 8009578:	4622      	mov	r2, r4
 800957a:	4629      	mov	r1, r5
 800957c:	4638      	mov	r0, r7
 800957e:	f7ff ff6c 	bl	800945a <__ssputs_r>
 8009582:	3001      	adds	r0, #1
 8009584:	f000 80a7 	beq.w	80096d6 <_svfiprintf_r+0x1c6>
 8009588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800958a:	445a      	add	r2, fp
 800958c:	9209      	str	r2, [sp, #36]	@ 0x24
 800958e:	f89a 3000 	ldrb.w	r3, [sl]
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 809f 	beq.w	80096d6 <_svfiprintf_r+0x1c6>
 8009598:	2300      	movs	r3, #0
 800959a:	f04f 32ff 	mov.w	r2, #4294967295
 800959e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095a2:	f10a 0a01 	add.w	sl, sl, #1
 80095a6:	9304      	str	r3, [sp, #16]
 80095a8:	9307      	str	r3, [sp, #28]
 80095aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80095b0:	4654      	mov	r4, sl
 80095b2:	2205      	movs	r2, #5
 80095b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b8:	484e      	ldr	r0, [pc, #312]	@ (80096f4 <_svfiprintf_r+0x1e4>)
 80095ba:	f7fd ffde 	bl	800757a <memchr>
 80095be:	9a04      	ldr	r2, [sp, #16]
 80095c0:	b9d8      	cbnz	r0, 80095fa <_svfiprintf_r+0xea>
 80095c2:	06d0      	lsls	r0, r2, #27
 80095c4:	bf44      	itt	mi
 80095c6:	2320      	movmi	r3, #32
 80095c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095cc:	0711      	lsls	r1, r2, #28
 80095ce:	bf44      	itt	mi
 80095d0:	232b      	movmi	r3, #43	@ 0x2b
 80095d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095d6:	f89a 3000 	ldrb.w	r3, [sl]
 80095da:	2b2a      	cmp	r3, #42	@ 0x2a
 80095dc:	d015      	beq.n	800960a <_svfiprintf_r+0xfa>
 80095de:	4654      	mov	r4, sl
 80095e0:	2000      	movs	r0, #0
 80095e2:	f04f 0c0a 	mov.w	ip, #10
 80095e6:	9a07      	ldr	r2, [sp, #28]
 80095e8:	4621      	mov	r1, r4
 80095ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ee:	3b30      	subs	r3, #48	@ 0x30
 80095f0:	2b09      	cmp	r3, #9
 80095f2:	d94b      	bls.n	800968c <_svfiprintf_r+0x17c>
 80095f4:	b1b0      	cbz	r0, 8009624 <_svfiprintf_r+0x114>
 80095f6:	9207      	str	r2, [sp, #28]
 80095f8:	e014      	b.n	8009624 <_svfiprintf_r+0x114>
 80095fa:	eba0 0308 	sub.w	r3, r0, r8
 80095fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009602:	4313      	orrs	r3, r2
 8009604:	46a2      	mov	sl, r4
 8009606:	9304      	str	r3, [sp, #16]
 8009608:	e7d2      	b.n	80095b0 <_svfiprintf_r+0xa0>
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	1d19      	adds	r1, r3, #4
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	9103      	str	r1, [sp, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	bfbb      	ittet	lt
 8009616:	425b      	neglt	r3, r3
 8009618:	f042 0202 	orrlt.w	r2, r2, #2
 800961c:	9307      	strge	r3, [sp, #28]
 800961e:	9307      	strlt	r3, [sp, #28]
 8009620:	bfb8      	it	lt
 8009622:	9204      	strlt	r2, [sp, #16]
 8009624:	7823      	ldrb	r3, [r4, #0]
 8009626:	2b2e      	cmp	r3, #46	@ 0x2e
 8009628:	d10a      	bne.n	8009640 <_svfiprintf_r+0x130>
 800962a:	7863      	ldrb	r3, [r4, #1]
 800962c:	2b2a      	cmp	r3, #42	@ 0x2a
 800962e:	d132      	bne.n	8009696 <_svfiprintf_r+0x186>
 8009630:	9b03      	ldr	r3, [sp, #12]
 8009632:	3402      	adds	r4, #2
 8009634:	1d1a      	adds	r2, r3, #4
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	9203      	str	r2, [sp, #12]
 800963a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800963e:	9305      	str	r3, [sp, #20]
 8009640:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80096f8 <_svfiprintf_r+0x1e8>
 8009644:	2203      	movs	r2, #3
 8009646:	4650      	mov	r0, sl
 8009648:	7821      	ldrb	r1, [r4, #0]
 800964a:	f7fd ff96 	bl	800757a <memchr>
 800964e:	b138      	cbz	r0, 8009660 <_svfiprintf_r+0x150>
 8009650:	2240      	movs	r2, #64	@ 0x40
 8009652:	9b04      	ldr	r3, [sp, #16]
 8009654:	eba0 000a 	sub.w	r0, r0, sl
 8009658:	4082      	lsls	r2, r0
 800965a:	4313      	orrs	r3, r2
 800965c:	3401      	adds	r4, #1
 800965e:	9304      	str	r3, [sp, #16]
 8009660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009664:	2206      	movs	r2, #6
 8009666:	4825      	ldr	r0, [pc, #148]	@ (80096fc <_svfiprintf_r+0x1ec>)
 8009668:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800966c:	f7fd ff85 	bl	800757a <memchr>
 8009670:	2800      	cmp	r0, #0
 8009672:	d036      	beq.n	80096e2 <_svfiprintf_r+0x1d2>
 8009674:	4b22      	ldr	r3, [pc, #136]	@ (8009700 <_svfiprintf_r+0x1f0>)
 8009676:	bb1b      	cbnz	r3, 80096c0 <_svfiprintf_r+0x1b0>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	3307      	adds	r3, #7
 800967c:	f023 0307 	bic.w	r3, r3, #7
 8009680:	3308      	adds	r3, #8
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009686:	4433      	add	r3, r6
 8009688:	9309      	str	r3, [sp, #36]	@ 0x24
 800968a:	e76a      	b.n	8009562 <_svfiprintf_r+0x52>
 800968c:	460c      	mov	r4, r1
 800968e:	2001      	movs	r0, #1
 8009690:	fb0c 3202 	mla	r2, ip, r2, r3
 8009694:	e7a8      	b.n	80095e8 <_svfiprintf_r+0xd8>
 8009696:	2300      	movs	r3, #0
 8009698:	f04f 0c0a 	mov.w	ip, #10
 800969c:	4619      	mov	r1, r3
 800969e:	3401      	adds	r4, #1
 80096a0:	9305      	str	r3, [sp, #20]
 80096a2:	4620      	mov	r0, r4
 80096a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a8:	3a30      	subs	r2, #48	@ 0x30
 80096aa:	2a09      	cmp	r2, #9
 80096ac:	d903      	bls.n	80096b6 <_svfiprintf_r+0x1a6>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0c6      	beq.n	8009640 <_svfiprintf_r+0x130>
 80096b2:	9105      	str	r1, [sp, #20]
 80096b4:	e7c4      	b.n	8009640 <_svfiprintf_r+0x130>
 80096b6:	4604      	mov	r4, r0
 80096b8:	2301      	movs	r3, #1
 80096ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80096be:	e7f0      	b.n	80096a2 <_svfiprintf_r+0x192>
 80096c0:	ab03      	add	r3, sp, #12
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	462a      	mov	r2, r5
 80096c6:	4638      	mov	r0, r7
 80096c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009704 <_svfiprintf_r+0x1f4>)
 80096ca:	a904      	add	r1, sp, #16
 80096cc:	f7fd f966 	bl	800699c <_printf_float>
 80096d0:	1c42      	adds	r2, r0, #1
 80096d2:	4606      	mov	r6, r0
 80096d4:	d1d6      	bne.n	8009684 <_svfiprintf_r+0x174>
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	065b      	lsls	r3, r3, #25
 80096da:	f53f af2d 	bmi.w	8009538 <_svfiprintf_r+0x28>
 80096de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096e0:	e72c      	b.n	800953c <_svfiprintf_r+0x2c>
 80096e2:	ab03      	add	r3, sp, #12
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	462a      	mov	r2, r5
 80096e8:	4638      	mov	r0, r7
 80096ea:	4b06      	ldr	r3, [pc, #24]	@ (8009704 <_svfiprintf_r+0x1f4>)
 80096ec:	a904      	add	r1, sp, #16
 80096ee:	f7fd fbf3 	bl	8006ed8 <_printf_i>
 80096f2:	e7ed      	b.n	80096d0 <_svfiprintf_r+0x1c0>
 80096f4:	0800a5e0 	.word	0x0800a5e0
 80096f8:	0800a5e6 	.word	0x0800a5e6
 80096fc:	0800a5ea 	.word	0x0800a5ea
 8009700:	0800699d 	.word	0x0800699d
 8009704:	0800945b 	.word	0x0800945b

08009708 <__sflush_r>:
 8009708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	0716      	lsls	r6, r2, #28
 8009710:	4605      	mov	r5, r0
 8009712:	460c      	mov	r4, r1
 8009714:	d454      	bmi.n	80097c0 <__sflush_r+0xb8>
 8009716:	684b      	ldr	r3, [r1, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	dc02      	bgt.n	8009722 <__sflush_r+0x1a>
 800971c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800971e:	2b00      	cmp	r3, #0
 8009720:	dd48      	ble.n	80097b4 <__sflush_r+0xac>
 8009722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009724:	2e00      	cmp	r6, #0
 8009726:	d045      	beq.n	80097b4 <__sflush_r+0xac>
 8009728:	2300      	movs	r3, #0
 800972a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800972e:	682f      	ldr	r7, [r5, #0]
 8009730:	6a21      	ldr	r1, [r4, #32]
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	d030      	beq.n	8009798 <__sflush_r+0x90>
 8009736:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	0759      	lsls	r1, r3, #29
 800973c:	d505      	bpl.n	800974a <__sflush_r+0x42>
 800973e:	6863      	ldr	r3, [r4, #4]
 8009740:	1ad2      	subs	r2, r2, r3
 8009742:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009744:	b10b      	cbz	r3, 800974a <__sflush_r+0x42>
 8009746:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009748:	1ad2      	subs	r2, r2, r3
 800974a:	2300      	movs	r3, #0
 800974c:	4628      	mov	r0, r5
 800974e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009750:	6a21      	ldr	r1, [r4, #32]
 8009752:	47b0      	blx	r6
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	d106      	bne.n	8009768 <__sflush_r+0x60>
 800975a:	6829      	ldr	r1, [r5, #0]
 800975c:	291d      	cmp	r1, #29
 800975e:	d82b      	bhi.n	80097b8 <__sflush_r+0xb0>
 8009760:	4a28      	ldr	r2, [pc, #160]	@ (8009804 <__sflush_r+0xfc>)
 8009762:	410a      	asrs	r2, r1
 8009764:	07d6      	lsls	r6, r2, #31
 8009766:	d427      	bmi.n	80097b8 <__sflush_r+0xb0>
 8009768:	2200      	movs	r2, #0
 800976a:	6062      	str	r2, [r4, #4]
 800976c:	6922      	ldr	r2, [r4, #16]
 800976e:	04d9      	lsls	r1, r3, #19
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	d504      	bpl.n	800977e <__sflush_r+0x76>
 8009774:	1c42      	adds	r2, r0, #1
 8009776:	d101      	bne.n	800977c <__sflush_r+0x74>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b903      	cbnz	r3, 800977e <__sflush_r+0x76>
 800977c:	6560      	str	r0, [r4, #84]	@ 0x54
 800977e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009780:	602f      	str	r7, [r5, #0]
 8009782:	b1b9      	cbz	r1, 80097b4 <__sflush_r+0xac>
 8009784:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009788:	4299      	cmp	r1, r3
 800978a:	d002      	beq.n	8009792 <__sflush_r+0x8a>
 800978c:	4628      	mov	r0, r5
 800978e:	f7fe fd67 	bl	8008260 <_free_r>
 8009792:	2300      	movs	r3, #0
 8009794:	6363      	str	r3, [r4, #52]	@ 0x34
 8009796:	e00d      	b.n	80097b4 <__sflush_r+0xac>
 8009798:	2301      	movs	r3, #1
 800979a:	4628      	mov	r0, r5
 800979c:	47b0      	blx	r6
 800979e:	4602      	mov	r2, r0
 80097a0:	1c50      	adds	r0, r2, #1
 80097a2:	d1c9      	bne.n	8009738 <__sflush_r+0x30>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0c6      	beq.n	8009738 <__sflush_r+0x30>
 80097aa:	2b1d      	cmp	r3, #29
 80097ac:	d001      	beq.n	80097b2 <__sflush_r+0xaa>
 80097ae:	2b16      	cmp	r3, #22
 80097b0:	d11d      	bne.n	80097ee <__sflush_r+0xe6>
 80097b2:	602f      	str	r7, [r5, #0]
 80097b4:	2000      	movs	r0, #0
 80097b6:	e021      	b.n	80097fc <__sflush_r+0xf4>
 80097b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097bc:	b21b      	sxth	r3, r3
 80097be:	e01a      	b.n	80097f6 <__sflush_r+0xee>
 80097c0:	690f      	ldr	r7, [r1, #16]
 80097c2:	2f00      	cmp	r7, #0
 80097c4:	d0f6      	beq.n	80097b4 <__sflush_r+0xac>
 80097c6:	0793      	lsls	r3, r2, #30
 80097c8:	bf18      	it	ne
 80097ca:	2300      	movne	r3, #0
 80097cc:	680e      	ldr	r6, [r1, #0]
 80097ce:	bf08      	it	eq
 80097d0:	694b      	ldreq	r3, [r1, #20]
 80097d2:	1bf6      	subs	r6, r6, r7
 80097d4:	600f      	str	r7, [r1, #0]
 80097d6:	608b      	str	r3, [r1, #8]
 80097d8:	2e00      	cmp	r6, #0
 80097da:	ddeb      	ble.n	80097b4 <__sflush_r+0xac>
 80097dc:	4633      	mov	r3, r6
 80097de:	463a      	mov	r2, r7
 80097e0:	4628      	mov	r0, r5
 80097e2:	6a21      	ldr	r1, [r4, #32]
 80097e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80097e8:	47e0      	blx	ip
 80097ea:	2800      	cmp	r0, #0
 80097ec:	dc07      	bgt.n	80097fe <__sflush_r+0xf6>
 80097ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	81a3      	strh	r3, [r4, #12]
 80097fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097fe:	4407      	add	r7, r0
 8009800:	1a36      	subs	r6, r6, r0
 8009802:	e7e9      	b.n	80097d8 <__sflush_r+0xd0>
 8009804:	dfbffffe 	.word	0xdfbffffe

08009808 <_fflush_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	690b      	ldr	r3, [r1, #16]
 800980c:	4605      	mov	r5, r0
 800980e:	460c      	mov	r4, r1
 8009810:	b913      	cbnz	r3, 8009818 <_fflush_r+0x10>
 8009812:	2500      	movs	r5, #0
 8009814:	4628      	mov	r0, r5
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	b118      	cbz	r0, 8009822 <_fflush_r+0x1a>
 800981a:	6a03      	ldr	r3, [r0, #32]
 800981c:	b90b      	cbnz	r3, 8009822 <_fflush_r+0x1a>
 800981e:	f7fd fd07 	bl	8007230 <__sinit>
 8009822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0f3      	beq.n	8009812 <_fflush_r+0xa>
 800982a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800982c:	07d0      	lsls	r0, r2, #31
 800982e:	d404      	bmi.n	800983a <_fflush_r+0x32>
 8009830:	0599      	lsls	r1, r3, #22
 8009832:	d402      	bmi.n	800983a <_fflush_r+0x32>
 8009834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009836:	f7fd fe96 	bl	8007566 <__retarget_lock_acquire_recursive>
 800983a:	4628      	mov	r0, r5
 800983c:	4621      	mov	r1, r4
 800983e:	f7ff ff63 	bl	8009708 <__sflush_r>
 8009842:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009844:	4605      	mov	r5, r0
 8009846:	07da      	lsls	r2, r3, #31
 8009848:	d4e4      	bmi.n	8009814 <_fflush_r+0xc>
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	059b      	lsls	r3, r3, #22
 800984e:	d4e1      	bmi.n	8009814 <_fflush_r+0xc>
 8009850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009852:	f7fd fe89 	bl	8007568 <__retarget_lock_release_recursive>
 8009856:	e7dd      	b.n	8009814 <_fflush_r+0xc>

08009858 <memmove>:
 8009858:	4288      	cmp	r0, r1
 800985a:	b510      	push	{r4, lr}
 800985c:	eb01 0402 	add.w	r4, r1, r2
 8009860:	d902      	bls.n	8009868 <memmove+0x10>
 8009862:	4284      	cmp	r4, r0
 8009864:	4623      	mov	r3, r4
 8009866:	d807      	bhi.n	8009878 <memmove+0x20>
 8009868:	1e43      	subs	r3, r0, #1
 800986a:	42a1      	cmp	r1, r4
 800986c:	d008      	beq.n	8009880 <memmove+0x28>
 800986e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009876:	e7f8      	b.n	800986a <memmove+0x12>
 8009878:	4601      	mov	r1, r0
 800987a:	4402      	add	r2, r0
 800987c:	428a      	cmp	r2, r1
 800987e:	d100      	bne.n	8009882 <memmove+0x2a>
 8009880:	bd10      	pop	{r4, pc}
 8009882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800988a:	e7f7      	b.n	800987c <memmove+0x24>

0800988c <_sbrk_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	2300      	movs	r3, #0
 8009890:	4d05      	ldr	r5, [pc, #20]	@ (80098a8 <_sbrk_r+0x1c>)
 8009892:	4604      	mov	r4, r0
 8009894:	4608      	mov	r0, r1
 8009896:	602b      	str	r3, [r5, #0]
 8009898:	f7f9 f800 	bl	800289c <_sbrk>
 800989c:	1c43      	adds	r3, r0, #1
 800989e:	d102      	bne.n	80098a6 <_sbrk_r+0x1a>
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	b103      	cbz	r3, 80098a6 <_sbrk_r+0x1a>
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	200008b0 	.word	0x200008b0

080098ac <__assert_func>:
 80098ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098ae:	4614      	mov	r4, r2
 80098b0:	461a      	mov	r2, r3
 80098b2:	4b09      	ldr	r3, [pc, #36]	@ (80098d8 <__assert_func+0x2c>)
 80098b4:	4605      	mov	r5, r0
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68d8      	ldr	r0, [r3, #12]
 80098ba:	b954      	cbnz	r4, 80098d2 <__assert_func+0x26>
 80098bc:	4b07      	ldr	r3, [pc, #28]	@ (80098dc <__assert_func+0x30>)
 80098be:	461c      	mov	r4, r3
 80098c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098c4:	9100      	str	r1, [sp, #0]
 80098c6:	462b      	mov	r3, r5
 80098c8:	4905      	ldr	r1, [pc, #20]	@ (80098e0 <__assert_func+0x34>)
 80098ca:	f000 f84f 	bl	800996c <fiprintf>
 80098ce:	f000 f85f 	bl	8009990 <abort>
 80098d2:	4b04      	ldr	r3, [pc, #16]	@ (80098e4 <__assert_func+0x38>)
 80098d4:	e7f4      	b.n	80098c0 <__assert_func+0x14>
 80098d6:	bf00      	nop
 80098d8:	20000184 	.word	0x20000184
 80098dc:	0800a09a 	.word	0x0800a09a
 80098e0:	0800a5fe 	.word	0x0800a5fe
 80098e4:	0800a5f1 	.word	0x0800a5f1

080098e8 <_calloc_r>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	fba1 5402 	umull	r5, r4, r1, r2
 80098ee:	b93c      	cbnz	r4, 8009900 <_calloc_r+0x18>
 80098f0:	4629      	mov	r1, r5
 80098f2:	f7ff f861 	bl	80089b8 <_malloc_r>
 80098f6:	4606      	mov	r6, r0
 80098f8:	b928      	cbnz	r0, 8009906 <_calloc_r+0x1e>
 80098fa:	2600      	movs	r6, #0
 80098fc:	4630      	mov	r0, r6
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	220c      	movs	r2, #12
 8009902:	6002      	str	r2, [r0, #0]
 8009904:	e7f9      	b.n	80098fa <_calloc_r+0x12>
 8009906:	462a      	mov	r2, r5
 8009908:	4621      	mov	r1, r4
 800990a:	f7fd fd5e 	bl	80073ca <memset>
 800990e:	e7f5      	b.n	80098fc <_calloc_r+0x14>

08009910 <_realloc_r>:
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	4680      	mov	r8, r0
 8009916:	4615      	mov	r5, r2
 8009918:	460c      	mov	r4, r1
 800991a:	b921      	cbnz	r1, 8009926 <_realloc_r+0x16>
 800991c:	4611      	mov	r1, r2
 800991e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	f7ff b849 	b.w	80089b8 <_malloc_r>
 8009926:	b92a      	cbnz	r2, 8009934 <_realloc_r+0x24>
 8009928:	f7fe fc9a 	bl	8008260 <_free_r>
 800992c:	2400      	movs	r4, #0
 800992e:	4620      	mov	r0, r4
 8009930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009934:	f000 f833 	bl	800999e <_malloc_usable_size_r>
 8009938:	4285      	cmp	r5, r0
 800993a:	4606      	mov	r6, r0
 800993c:	d802      	bhi.n	8009944 <_realloc_r+0x34>
 800993e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009942:	d8f4      	bhi.n	800992e <_realloc_r+0x1e>
 8009944:	4629      	mov	r1, r5
 8009946:	4640      	mov	r0, r8
 8009948:	f7ff f836 	bl	80089b8 <_malloc_r>
 800994c:	4607      	mov	r7, r0
 800994e:	2800      	cmp	r0, #0
 8009950:	d0ec      	beq.n	800992c <_realloc_r+0x1c>
 8009952:	42b5      	cmp	r5, r6
 8009954:	462a      	mov	r2, r5
 8009956:	4621      	mov	r1, r4
 8009958:	bf28      	it	cs
 800995a:	4632      	movcs	r2, r6
 800995c:	f7fd fe1b 	bl	8007596 <memcpy>
 8009960:	4621      	mov	r1, r4
 8009962:	4640      	mov	r0, r8
 8009964:	f7fe fc7c 	bl	8008260 <_free_r>
 8009968:	463c      	mov	r4, r7
 800996a:	e7e0      	b.n	800992e <_realloc_r+0x1e>

0800996c <fiprintf>:
 800996c:	b40e      	push	{r1, r2, r3}
 800996e:	b503      	push	{r0, r1, lr}
 8009970:	4601      	mov	r1, r0
 8009972:	ab03      	add	r3, sp, #12
 8009974:	4805      	ldr	r0, [pc, #20]	@ (800998c <fiprintf+0x20>)
 8009976:	f853 2b04 	ldr.w	r2, [r3], #4
 800997a:	6800      	ldr	r0, [r0, #0]
 800997c:	9301      	str	r3, [sp, #4]
 800997e:	f000 f83d 	bl	80099fc <_vfiprintf_r>
 8009982:	b002      	add	sp, #8
 8009984:	f85d eb04 	ldr.w	lr, [sp], #4
 8009988:	b003      	add	sp, #12
 800998a:	4770      	bx	lr
 800998c:	20000184 	.word	0x20000184

08009990 <abort>:
 8009990:	2006      	movs	r0, #6
 8009992:	b508      	push	{r3, lr}
 8009994:	f000 fa06 	bl	8009da4 <raise>
 8009998:	2001      	movs	r0, #1
 800999a:	f7f8 ff51 	bl	8002840 <_exit>

0800999e <_malloc_usable_size_r>:
 800999e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a2:	1f18      	subs	r0, r3, #4
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	bfbc      	itt	lt
 80099a8:	580b      	ldrlt	r3, [r1, r0]
 80099aa:	18c0      	addlt	r0, r0, r3
 80099ac:	4770      	bx	lr

080099ae <__sfputc_r>:
 80099ae:	6893      	ldr	r3, [r2, #8]
 80099b0:	b410      	push	{r4}
 80099b2:	3b01      	subs	r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	6093      	str	r3, [r2, #8]
 80099b8:	da07      	bge.n	80099ca <__sfputc_r+0x1c>
 80099ba:	6994      	ldr	r4, [r2, #24]
 80099bc:	42a3      	cmp	r3, r4
 80099be:	db01      	blt.n	80099c4 <__sfputc_r+0x16>
 80099c0:	290a      	cmp	r1, #10
 80099c2:	d102      	bne.n	80099ca <__sfputc_r+0x1c>
 80099c4:	bc10      	pop	{r4}
 80099c6:	f000 b931 	b.w	8009c2c <__swbuf_r>
 80099ca:	6813      	ldr	r3, [r2, #0]
 80099cc:	1c58      	adds	r0, r3, #1
 80099ce:	6010      	str	r0, [r2, #0]
 80099d0:	7019      	strb	r1, [r3, #0]
 80099d2:	4608      	mov	r0, r1
 80099d4:	bc10      	pop	{r4}
 80099d6:	4770      	bx	lr

080099d8 <__sfputs_r>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	4606      	mov	r6, r0
 80099dc:	460f      	mov	r7, r1
 80099de:	4614      	mov	r4, r2
 80099e0:	18d5      	adds	r5, r2, r3
 80099e2:	42ac      	cmp	r4, r5
 80099e4:	d101      	bne.n	80099ea <__sfputs_r+0x12>
 80099e6:	2000      	movs	r0, #0
 80099e8:	e007      	b.n	80099fa <__sfputs_r+0x22>
 80099ea:	463a      	mov	r2, r7
 80099ec:	4630      	mov	r0, r6
 80099ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f2:	f7ff ffdc 	bl	80099ae <__sfputc_r>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d1f3      	bne.n	80099e2 <__sfputs_r+0xa>
 80099fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099fc <_vfiprintf_r>:
 80099fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	460d      	mov	r5, r1
 8009a02:	4614      	mov	r4, r2
 8009a04:	4698      	mov	r8, r3
 8009a06:	4606      	mov	r6, r0
 8009a08:	b09d      	sub	sp, #116	@ 0x74
 8009a0a:	b118      	cbz	r0, 8009a14 <_vfiprintf_r+0x18>
 8009a0c:	6a03      	ldr	r3, [r0, #32]
 8009a0e:	b90b      	cbnz	r3, 8009a14 <_vfiprintf_r+0x18>
 8009a10:	f7fd fc0e 	bl	8007230 <__sinit>
 8009a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a16:	07d9      	lsls	r1, r3, #31
 8009a18:	d405      	bmi.n	8009a26 <_vfiprintf_r+0x2a>
 8009a1a:	89ab      	ldrh	r3, [r5, #12]
 8009a1c:	059a      	lsls	r2, r3, #22
 8009a1e:	d402      	bmi.n	8009a26 <_vfiprintf_r+0x2a>
 8009a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a22:	f7fd fda0 	bl	8007566 <__retarget_lock_acquire_recursive>
 8009a26:	89ab      	ldrh	r3, [r5, #12]
 8009a28:	071b      	lsls	r3, r3, #28
 8009a2a:	d501      	bpl.n	8009a30 <_vfiprintf_r+0x34>
 8009a2c:	692b      	ldr	r3, [r5, #16]
 8009a2e:	b99b      	cbnz	r3, 8009a58 <_vfiprintf_r+0x5c>
 8009a30:	4629      	mov	r1, r5
 8009a32:	4630      	mov	r0, r6
 8009a34:	f000 f938 	bl	8009ca8 <__swsetup_r>
 8009a38:	b170      	cbz	r0, 8009a58 <_vfiprintf_r+0x5c>
 8009a3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a3c:	07dc      	lsls	r4, r3, #31
 8009a3e:	d504      	bpl.n	8009a4a <_vfiprintf_r+0x4e>
 8009a40:	f04f 30ff 	mov.w	r0, #4294967295
 8009a44:	b01d      	add	sp, #116	@ 0x74
 8009a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	0598      	lsls	r0, r3, #22
 8009a4e:	d4f7      	bmi.n	8009a40 <_vfiprintf_r+0x44>
 8009a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a52:	f7fd fd89 	bl	8007568 <__retarget_lock_release_recursive>
 8009a56:	e7f3      	b.n	8009a40 <_vfiprintf_r+0x44>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a5c:	2320      	movs	r3, #32
 8009a5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a62:	2330      	movs	r3, #48	@ 0x30
 8009a64:	f04f 0901 	mov.w	r9, #1
 8009a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a6c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009c18 <_vfiprintf_r+0x21c>
 8009a70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a74:	4623      	mov	r3, r4
 8009a76:	469a      	mov	sl, r3
 8009a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a7c:	b10a      	cbz	r2, 8009a82 <_vfiprintf_r+0x86>
 8009a7e:	2a25      	cmp	r2, #37	@ 0x25
 8009a80:	d1f9      	bne.n	8009a76 <_vfiprintf_r+0x7a>
 8009a82:	ebba 0b04 	subs.w	fp, sl, r4
 8009a86:	d00b      	beq.n	8009aa0 <_vfiprintf_r+0xa4>
 8009a88:	465b      	mov	r3, fp
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff ffa2 	bl	80099d8 <__sfputs_r>
 8009a94:	3001      	adds	r0, #1
 8009a96:	f000 80a7 	beq.w	8009be8 <_vfiprintf_r+0x1ec>
 8009a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a9c:	445a      	add	r2, fp
 8009a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 809f 	beq.w	8009be8 <_vfiprintf_r+0x1ec>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ab4:	f10a 0a01 	add.w	sl, sl, #1
 8009ab8:	9304      	str	r3, [sp, #16]
 8009aba:	9307      	str	r3, [sp, #28]
 8009abc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ac2:	4654      	mov	r4, sl
 8009ac4:	2205      	movs	r2, #5
 8009ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aca:	4853      	ldr	r0, [pc, #332]	@ (8009c18 <_vfiprintf_r+0x21c>)
 8009acc:	f7fd fd55 	bl	800757a <memchr>
 8009ad0:	9a04      	ldr	r2, [sp, #16]
 8009ad2:	b9d8      	cbnz	r0, 8009b0c <_vfiprintf_r+0x110>
 8009ad4:	06d1      	lsls	r1, r2, #27
 8009ad6:	bf44      	itt	mi
 8009ad8:	2320      	movmi	r3, #32
 8009ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ade:	0713      	lsls	r3, r2, #28
 8009ae0:	bf44      	itt	mi
 8009ae2:	232b      	movmi	r3, #43	@ 0x2b
 8009ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8009aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aee:	d015      	beq.n	8009b1c <_vfiprintf_r+0x120>
 8009af0:	4654      	mov	r4, sl
 8009af2:	2000      	movs	r0, #0
 8009af4:	f04f 0c0a 	mov.w	ip, #10
 8009af8:	9a07      	ldr	r2, [sp, #28]
 8009afa:	4621      	mov	r1, r4
 8009afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b00:	3b30      	subs	r3, #48	@ 0x30
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	d94b      	bls.n	8009b9e <_vfiprintf_r+0x1a2>
 8009b06:	b1b0      	cbz	r0, 8009b36 <_vfiprintf_r+0x13a>
 8009b08:	9207      	str	r2, [sp, #28]
 8009b0a:	e014      	b.n	8009b36 <_vfiprintf_r+0x13a>
 8009b0c:	eba0 0308 	sub.w	r3, r0, r8
 8009b10:	fa09 f303 	lsl.w	r3, r9, r3
 8009b14:	4313      	orrs	r3, r2
 8009b16:	46a2      	mov	sl, r4
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	e7d2      	b.n	8009ac2 <_vfiprintf_r+0xc6>
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	1d19      	adds	r1, r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	9103      	str	r1, [sp, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfbb      	ittet	lt
 8009b28:	425b      	neglt	r3, r3
 8009b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b2e:	9307      	strge	r3, [sp, #28]
 8009b30:	9307      	strlt	r3, [sp, #28]
 8009b32:	bfb8      	it	lt
 8009b34:	9204      	strlt	r2, [sp, #16]
 8009b36:	7823      	ldrb	r3, [r4, #0]
 8009b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b3a:	d10a      	bne.n	8009b52 <_vfiprintf_r+0x156>
 8009b3c:	7863      	ldrb	r3, [r4, #1]
 8009b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b40:	d132      	bne.n	8009ba8 <_vfiprintf_r+0x1ac>
 8009b42:	9b03      	ldr	r3, [sp, #12]
 8009b44:	3402      	adds	r4, #2
 8009b46:	1d1a      	adds	r2, r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	9203      	str	r2, [sp, #12]
 8009b4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b50:	9305      	str	r3, [sp, #20]
 8009b52:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009c1c <_vfiprintf_r+0x220>
 8009b56:	2203      	movs	r2, #3
 8009b58:	4650      	mov	r0, sl
 8009b5a:	7821      	ldrb	r1, [r4, #0]
 8009b5c:	f7fd fd0d 	bl	800757a <memchr>
 8009b60:	b138      	cbz	r0, 8009b72 <_vfiprintf_r+0x176>
 8009b62:	2240      	movs	r2, #64	@ 0x40
 8009b64:	9b04      	ldr	r3, [sp, #16]
 8009b66:	eba0 000a 	sub.w	r0, r0, sl
 8009b6a:	4082      	lsls	r2, r0
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	3401      	adds	r4, #1
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b76:	2206      	movs	r2, #6
 8009b78:	4829      	ldr	r0, [pc, #164]	@ (8009c20 <_vfiprintf_r+0x224>)
 8009b7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b7e:	f7fd fcfc 	bl	800757a <memchr>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d03f      	beq.n	8009c06 <_vfiprintf_r+0x20a>
 8009b86:	4b27      	ldr	r3, [pc, #156]	@ (8009c24 <_vfiprintf_r+0x228>)
 8009b88:	bb1b      	cbnz	r3, 8009bd2 <_vfiprintf_r+0x1d6>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	3307      	adds	r3, #7
 8009b8e:	f023 0307 	bic.w	r3, r3, #7
 8009b92:	3308      	adds	r3, #8
 8009b94:	9303      	str	r3, [sp, #12]
 8009b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b98:	443b      	add	r3, r7
 8009b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9c:	e76a      	b.n	8009a74 <_vfiprintf_r+0x78>
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	2001      	movs	r0, #1
 8009ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba6:	e7a8      	b.n	8009afa <_vfiprintf_r+0xfe>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f04f 0c0a 	mov.w	ip, #10
 8009bae:	4619      	mov	r1, r3
 8009bb0:	3401      	adds	r4, #1
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bba:	3a30      	subs	r2, #48	@ 0x30
 8009bbc:	2a09      	cmp	r2, #9
 8009bbe:	d903      	bls.n	8009bc8 <_vfiprintf_r+0x1cc>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0c6      	beq.n	8009b52 <_vfiprintf_r+0x156>
 8009bc4:	9105      	str	r1, [sp, #20]
 8009bc6:	e7c4      	b.n	8009b52 <_vfiprintf_r+0x156>
 8009bc8:	4604      	mov	r4, r0
 8009bca:	2301      	movs	r3, #1
 8009bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bd0:	e7f0      	b.n	8009bb4 <_vfiprintf_r+0x1b8>
 8009bd2:	ab03      	add	r3, sp, #12
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	4630      	mov	r0, r6
 8009bda:	4b13      	ldr	r3, [pc, #76]	@ (8009c28 <_vfiprintf_r+0x22c>)
 8009bdc:	a904      	add	r1, sp, #16
 8009bde:	f7fc fedd 	bl	800699c <_printf_float>
 8009be2:	4607      	mov	r7, r0
 8009be4:	1c78      	adds	r0, r7, #1
 8009be6:	d1d6      	bne.n	8009b96 <_vfiprintf_r+0x19a>
 8009be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bea:	07d9      	lsls	r1, r3, #31
 8009bec:	d405      	bmi.n	8009bfa <_vfiprintf_r+0x1fe>
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	059a      	lsls	r2, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_vfiprintf_r+0x1fe>
 8009bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bf6:	f7fd fcb7 	bl	8007568 <__retarget_lock_release_recursive>
 8009bfa:	89ab      	ldrh	r3, [r5, #12]
 8009bfc:	065b      	lsls	r3, r3, #25
 8009bfe:	f53f af1f 	bmi.w	8009a40 <_vfiprintf_r+0x44>
 8009c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c04:	e71e      	b.n	8009a44 <_vfiprintf_r+0x48>
 8009c06:	ab03      	add	r3, sp, #12
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	462a      	mov	r2, r5
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	4b06      	ldr	r3, [pc, #24]	@ (8009c28 <_vfiprintf_r+0x22c>)
 8009c10:	a904      	add	r1, sp, #16
 8009c12:	f7fd f961 	bl	8006ed8 <_printf_i>
 8009c16:	e7e4      	b.n	8009be2 <_vfiprintf_r+0x1e6>
 8009c18:	0800a5e0 	.word	0x0800a5e0
 8009c1c:	0800a5e6 	.word	0x0800a5e6
 8009c20:	0800a5ea 	.word	0x0800a5ea
 8009c24:	0800699d 	.word	0x0800699d
 8009c28:	080099d9 	.word	0x080099d9

08009c2c <__swbuf_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	460e      	mov	r6, r1
 8009c30:	4614      	mov	r4, r2
 8009c32:	4605      	mov	r5, r0
 8009c34:	b118      	cbz	r0, 8009c3e <__swbuf_r+0x12>
 8009c36:	6a03      	ldr	r3, [r0, #32]
 8009c38:	b90b      	cbnz	r3, 8009c3e <__swbuf_r+0x12>
 8009c3a:	f7fd faf9 	bl	8007230 <__sinit>
 8009c3e:	69a3      	ldr	r3, [r4, #24]
 8009c40:	60a3      	str	r3, [r4, #8]
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	071a      	lsls	r2, r3, #28
 8009c46:	d501      	bpl.n	8009c4c <__swbuf_r+0x20>
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	b943      	cbnz	r3, 8009c5e <__swbuf_r+0x32>
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 f82a 	bl	8009ca8 <__swsetup_r>
 8009c54:	b118      	cbz	r0, 8009c5e <__swbuf_r+0x32>
 8009c56:	f04f 37ff 	mov.w	r7, #4294967295
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	6922      	ldr	r2, [r4, #16]
 8009c62:	b2f6      	uxtb	r6, r6
 8009c64:	1a98      	subs	r0, r3, r2
 8009c66:	6963      	ldr	r3, [r4, #20]
 8009c68:	4637      	mov	r7, r6
 8009c6a:	4283      	cmp	r3, r0
 8009c6c:	dc05      	bgt.n	8009c7a <__swbuf_r+0x4e>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4628      	mov	r0, r5
 8009c72:	f7ff fdc9 	bl	8009808 <_fflush_r>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d1ed      	bne.n	8009c56 <__swbuf_r+0x2a>
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	60a3      	str	r3, [r4, #8]
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	6022      	str	r2, [r4, #0]
 8009c86:	701e      	strb	r6, [r3, #0]
 8009c88:	6962      	ldr	r2, [r4, #20]
 8009c8a:	1c43      	adds	r3, r0, #1
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d004      	beq.n	8009c9a <__swbuf_r+0x6e>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	07db      	lsls	r3, r3, #31
 8009c94:	d5e1      	bpl.n	8009c5a <__swbuf_r+0x2e>
 8009c96:	2e0a      	cmp	r6, #10
 8009c98:	d1df      	bne.n	8009c5a <__swbuf_r+0x2e>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f7ff fdb3 	bl	8009808 <_fflush_r>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	d0d9      	beq.n	8009c5a <__swbuf_r+0x2e>
 8009ca6:	e7d6      	b.n	8009c56 <__swbuf_r+0x2a>

08009ca8 <__swsetup_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4b29      	ldr	r3, [pc, #164]	@ (8009d50 <__swsetup_r+0xa8>)
 8009cac:	4605      	mov	r5, r0
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	b118      	cbz	r0, 8009cbc <__swsetup_r+0x14>
 8009cb4:	6a03      	ldr	r3, [r0, #32]
 8009cb6:	b90b      	cbnz	r3, 8009cbc <__swsetup_r+0x14>
 8009cb8:	f7fd faba 	bl	8007230 <__sinit>
 8009cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc0:	0719      	lsls	r1, r3, #28
 8009cc2:	d422      	bmi.n	8009d0a <__swsetup_r+0x62>
 8009cc4:	06da      	lsls	r2, r3, #27
 8009cc6:	d407      	bmi.n	8009cd8 <__swsetup_r+0x30>
 8009cc8:	2209      	movs	r2, #9
 8009cca:	602a      	str	r2, [r5, #0]
 8009ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	e033      	b.n	8009d40 <__swsetup_r+0x98>
 8009cd8:	0758      	lsls	r0, r3, #29
 8009cda:	d512      	bpl.n	8009d02 <__swsetup_r+0x5a>
 8009cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cde:	b141      	cbz	r1, 8009cf2 <__swsetup_r+0x4a>
 8009ce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	d002      	beq.n	8009cee <__swsetup_r+0x46>
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f7fe fab9 	bl	8008260 <_free_r>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	6063      	str	r3, [r4, #4]
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	f043 0308 	orr.w	r3, r3, #8
 8009d08:	81a3      	strh	r3, [r4, #12]
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	b94b      	cbnz	r3, 8009d22 <__swsetup_r+0x7a>
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d18:	d003      	beq.n	8009d22 <__swsetup_r+0x7a>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f000 f882 	bl	8009e26 <__smakebuf_r>
 8009d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d26:	f013 0201 	ands.w	r2, r3, #1
 8009d2a:	d00a      	beq.n	8009d42 <__swsetup_r+0x9a>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	60a2      	str	r2, [r4, #8]
 8009d30:	6962      	ldr	r2, [r4, #20]
 8009d32:	4252      	negs	r2, r2
 8009d34:	61a2      	str	r2, [r4, #24]
 8009d36:	6922      	ldr	r2, [r4, #16]
 8009d38:	b942      	cbnz	r2, 8009d4c <__swsetup_r+0xa4>
 8009d3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d3e:	d1c5      	bne.n	8009ccc <__swsetup_r+0x24>
 8009d40:	bd38      	pop	{r3, r4, r5, pc}
 8009d42:	0799      	lsls	r1, r3, #30
 8009d44:	bf58      	it	pl
 8009d46:	6962      	ldrpl	r2, [r4, #20]
 8009d48:	60a2      	str	r2, [r4, #8]
 8009d4a:	e7f4      	b.n	8009d36 <__swsetup_r+0x8e>
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e7f7      	b.n	8009d40 <__swsetup_r+0x98>
 8009d50:	20000184 	.word	0x20000184

08009d54 <_raise_r>:
 8009d54:	291f      	cmp	r1, #31
 8009d56:	b538      	push	{r3, r4, r5, lr}
 8009d58:	4605      	mov	r5, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	d904      	bls.n	8009d68 <_raise_r+0x14>
 8009d5e:	2316      	movs	r3, #22
 8009d60:	6003      	str	r3, [r0, #0]
 8009d62:	f04f 30ff 	mov.w	r0, #4294967295
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d6a:	b112      	cbz	r2, 8009d72 <_raise_r+0x1e>
 8009d6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d70:	b94b      	cbnz	r3, 8009d86 <_raise_r+0x32>
 8009d72:	4628      	mov	r0, r5
 8009d74:	f000 f830 	bl	8009dd8 <_getpid_r>
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d82:	f000 b817 	b.w	8009db4 <_kill_r>
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d00a      	beq.n	8009da0 <_raise_r+0x4c>
 8009d8a:	1c59      	adds	r1, r3, #1
 8009d8c:	d103      	bne.n	8009d96 <_raise_r+0x42>
 8009d8e:	2316      	movs	r3, #22
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	2001      	movs	r0, #1
 8009d94:	e7e7      	b.n	8009d66 <_raise_r+0x12>
 8009d96:	2100      	movs	r1, #0
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d9e:	4798      	blx	r3
 8009da0:	2000      	movs	r0, #0
 8009da2:	e7e0      	b.n	8009d66 <_raise_r+0x12>

08009da4 <raise>:
 8009da4:	4b02      	ldr	r3, [pc, #8]	@ (8009db0 <raise+0xc>)
 8009da6:	4601      	mov	r1, r0
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	f7ff bfd3 	b.w	8009d54 <_raise_r>
 8009dae:	bf00      	nop
 8009db0:	20000184 	.word	0x20000184

08009db4 <_kill_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	2300      	movs	r3, #0
 8009db8:	4d06      	ldr	r5, [pc, #24]	@ (8009dd4 <_kill_r+0x20>)
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	602b      	str	r3, [r5, #0]
 8009dc2:	f7f8 fd35 	bl	8002830 <_kill>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	d102      	bne.n	8009dd0 <_kill_r+0x1c>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	b103      	cbz	r3, 8009dd0 <_kill_r+0x1c>
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	bd38      	pop	{r3, r4, r5, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200008b0 	.word	0x200008b0

08009dd8 <_getpid_r>:
 8009dd8:	f7f8 bd28 	b.w	800282c <_getpid>

08009ddc <__swhatbuf_r>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	460c      	mov	r4, r1
 8009de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de4:	4615      	mov	r5, r2
 8009de6:	2900      	cmp	r1, #0
 8009de8:	461e      	mov	r6, r3
 8009dea:	b096      	sub	sp, #88	@ 0x58
 8009dec:	da0c      	bge.n	8009e08 <__swhatbuf_r+0x2c>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	2100      	movs	r1, #0
 8009df2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009df6:	bf14      	ite	ne
 8009df8:	2340      	movne	r3, #64	@ 0x40
 8009dfa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009dfe:	2000      	movs	r0, #0
 8009e00:	6031      	str	r1, [r6, #0]
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	b016      	add	sp, #88	@ 0x58
 8009e06:	bd70      	pop	{r4, r5, r6, pc}
 8009e08:	466a      	mov	r2, sp
 8009e0a:	f000 f849 	bl	8009ea0 <_fstat_r>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	dbed      	blt.n	8009dee <__swhatbuf_r+0x12>
 8009e12:	9901      	ldr	r1, [sp, #4]
 8009e14:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e18:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e1c:	4259      	negs	r1, r3
 8009e1e:	4159      	adcs	r1, r3
 8009e20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e24:	e7eb      	b.n	8009dfe <__swhatbuf_r+0x22>

08009e26 <__smakebuf_r>:
 8009e26:	898b      	ldrh	r3, [r1, #12]
 8009e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e2a:	079d      	lsls	r5, r3, #30
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	460c      	mov	r4, r1
 8009e30:	d507      	bpl.n	8009e42 <__smakebuf_r+0x1c>
 8009e32:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	6123      	str	r3, [r4, #16]
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	6163      	str	r3, [r4, #20]
 8009e3e:	b003      	add	sp, #12
 8009e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e42:	466a      	mov	r2, sp
 8009e44:	ab01      	add	r3, sp, #4
 8009e46:	f7ff ffc9 	bl	8009ddc <__swhatbuf_r>
 8009e4a:	9f00      	ldr	r7, [sp, #0]
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	4639      	mov	r1, r7
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7fe fdb1 	bl	80089b8 <_malloc_r>
 8009e56:	b948      	cbnz	r0, 8009e6c <__smakebuf_r+0x46>
 8009e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e5c:	059a      	lsls	r2, r3, #22
 8009e5e:	d4ee      	bmi.n	8009e3e <__smakebuf_r+0x18>
 8009e60:	f023 0303 	bic.w	r3, r3, #3
 8009e64:	f043 0302 	orr.w	r3, r3, #2
 8009e68:	81a3      	strh	r3, [r4, #12]
 8009e6a:	e7e2      	b.n	8009e32 <__smakebuf_r+0xc>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e76:	81a3      	strh	r3, [r4, #12]
 8009e78:	9b01      	ldr	r3, [sp, #4]
 8009e7a:	6020      	str	r0, [r4, #0]
 8009e7c:	b15b      	cbz	r3, 8009e96 <__smakebuf_r+0x70>
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e84:	f000 f81e 	bl	8009ec4 <_isatty_r>
 8009e88:	b128      	cbz	r0, 8009e96 <__smakebuf_r+0x70>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f023 0303 	bic.w	r3, r3, #3
 8009e90:	f043 0301 	orr.w	r3, r3, #1
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	431d      	orrs	r5, r3
 8009e9a:	81a5      	strh	r5, [r4, #12]
 8009e9c:	e7cf      	b.n	8009e3e <__smakebuf_r+0x18>
	...

08009ea0 <_fstat_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4d06      	ldr	r5, [pc, #24]	@ (8009ec0 <_fstat_r+0x20>)
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	4611      	mov	r1, r2
 8009eac:	602b      	str	r3, [r5, #0]
 8009eae:	f7f8 fcec 	bl	800288a <_fstat>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d102      	bne.n	8009ebc <_fstat_r+0x1c>
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	b103      	cbz	r3, 8009ebc <_fstat_r+0x1c>
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	bd38      	pop	{r3, r4, r5, pc}
 8009ebe:	bf00      	nop
 8009ec0:	200008b0 	.word	0x200008b0

08009ec4 <_isatty_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4d05      	ldr	r5, [pc, #20]	@ (8009ee0 <_isatty_r+0x1c>)
 8009eca:	4604      	mov	r4, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	602b      	str	r3, [r5, #0]
 8009ed0:	f7f8 fce0 	bl	8002894 <_isatty>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_isatty_r+0x1a>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_isatty_r+0x1a>
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	200008b0 	.word	0x200008b0

08009ee4 <_init>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr

08009ef0 <_fini>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	bf00      	nop
 8009ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef6:	bc08      	pop	{r3}
 8009ef8:	469e      	mov	lr, r3
 8009efa:	4770      	bx	lr
