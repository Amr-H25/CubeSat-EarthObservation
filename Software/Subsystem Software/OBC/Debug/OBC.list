
OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008da8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08008eb4  08008eb4  00009eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800927c  0800927c  0000b094  2**0
                  CONTENTS
  4 .ARM          00000008  0800927c  0800927c  0000a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009284  08009284  0000b094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009284  08009284  0000a284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009288  08009288  0000a288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800928c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000094  08009320  0000b094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08009320  0000b338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106de  00000000  00000000  0000b0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002abb  00000000  00000000  0001b79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0001e258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc6  00000000  00000000  0001f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000310a  00000000  00000000  0001fd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015094  00000000  00000000  00022e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088081  00000000  00000000  00037ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bff55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004390  00000000  00000000  000bff98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c4328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e9c 	.word	0x08008e9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08008e9c 	.word	0x08008e9c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2110      	movs	r1, #16
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <SELECT+0x18>)
 8000166:	f001 fda9 	bl	8001cbc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800016a:	2001      	movs	r0, #1
 800016c:	f001 fa6a 	bl	8001644 <HAL_Delay>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40010800 	.word	0x40010800

08000178 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	2110      	movs	r1, #16
 8000180:	4803      	ldr	r0, [pc, #12]	@ (8000190 <DESELECT+0x18>)
 8000182:	f001 fd9b 	bl	8001cbc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000186:	2001      	movs	r0, #1
 8000188:	f001 fa5c 	bl	8001644 <HAL_Delay>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800019e:	bf00      	nop
 80001a0:	4b08      	ldr	r3, [pc, #32]	@ (80001c4 <SPI_TxByte+0x30>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	689b      	ldr	r3, [r3, #8]
 80001a6:	f003 0302 	and.w	r3, r3, #2
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d1f8      	bne.n	80001a0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80001ae:	1df9      	adds	r1, r7, #7
 80001b0:	2364      	movs	r3, #100	@ 0x64
 80001b2:	2201      	movs	r2, #1
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <SPI_TxByte+0x30>)
 80001b6:	f004 f857 	bl	8004268 <HAL_SPI_Transmit>
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	20000114 	.word	0x20000114

080001c8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001d4:	bf00      	nop
 80001d6:	4b08      	ldr	r3, [pc, #32]	@ (80001f8 <SPI_TxBuffer+0x30>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	689b      	ldr	r3, [r3, #8]
 80001dc:	f003 0302 	and.w	r3, r3, #2
 80001e0:	2b02      	cmp	r3, #2
 80001e2:	d1f8      	bne.n	80001d6 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80001e4:	887a      	ldrh	r2, [r7, #2]
 80001e6:	2364      	movs	r3, #100	@ 0x64
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <SPI_TxBuffer+0x30>)
 80001ec:	f004 f83c 	bl	8004268 <HAL_SPI_Transmit>
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000114 	.word	0x20000114

080001fc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000202:	23ff      	movs	r3, #255	@ 0xff
 8000204:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000206:	bf00      	nop
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <SPI_RxByte+0x34>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	f003 0302 	and.w	r3, r3, #2
 8000212:	2b02      	cmp	r3, #2
 8000214:	d1f8      	bne.n	8000208 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000216:	1dba      	adds	r2, r7, #6
 8000218:	1df9      	adds	r1, r7, #7
 800021a:	2364      	movs	r3, #100	@ 0x64
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	2301      	movs	r3, #1
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <SPI_RxByte+0x34>)
 8000222:	f004 f965 	bl	80044f0 <HAL_SPI_TransmitReceive>

  return data;
 8000226:	79bb      	ldrb	r3, [r7, #6]
}
 8000228:	4618      	mov	r0, r3
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000114 	.word	0x20000114

08000234 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800023c:	f7ff ffde 	bl	80001fc <SPI_RxByte>
 8000240:	4603      	mov	r3, r0
 8000242:	461a      	mov	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	701a      	strb	r2, [r3, #0]
}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000256:	4b0a      	ldr	r3, [pc, #40]	@ (8000280 <SD_ReadyWait+0x30>)
 8000258:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800025c:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800025e:	f7ff ffcd 	bl	80001fc <SPI_RxByte>
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2bff      	cmp	r3, #255	@ 0xff
 800026a:	d003      	beq.n	8000274 <SD_ReadyWait+0x24>
 800026c:	4b04      	ldr	r3, [pc, #16]	@ (8000280 <SD_ReadyWait+0x30>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f4      	bne.n	800025e <SD_ReadyWait+0xe>

  return res;
 8000274:	79fb      	ldrb	r3, [r7, #7]
}
 8000276:	4618      	mov	r0, r3
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	200000b2 	.word	0x200000b2

08000284 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800028a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800028e:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000290:	f7ff ff72 	bl	8000178 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	e005      	b.n	80002a6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800029a:	20ff      	movs	r0, #255	@ 0xff
 800029c:	f7ff ff7a 	bl	8000194 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	2b09      	cmp	r3, #9
 80002aa:	ddf6      	ble.n	800029a <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80002ac:	f7ff ff56 	bl	800015c <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80002b0:	2340      	movs	r3, #64	@ 0x40
 80002b2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80002c4:	2395      	movs	r3, #149	@ 0x95
 80002c6:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80002c8:	463b      	mov	r3, r7
 80002ca:	2106      	movs	r1, #6
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff7b 	bl	80001c8 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80002d2:	e002      	b.n	80002da <SD_PowerOn+0x56>
  {
    cnt--;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80002da:	f7ff ff8f 	bl	80001fc <SPI_RxByte>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d002      	beq.n	80002ea <SD_PowerOn+0x66>
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d1f4      	bne.n	80002d4 <SD_PowerOn+0x50>
  }

  DESELECT();
 80002ea:	f7ff ff45 	bl	8000178 <DESELECT>
  SPI_TxByte(0XFF);
 80002ee:	20ff      	movs	r0, #255	@ 0xff
 80002f0:	f7ff ff50 	bl	8000194 <SPI_TxByte>

  PowerFlag = 1;
 80002f4:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <SD_PowerOn+0x80>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200000b5 	.word	0x200000b5

08000308 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800030c:	4b03      	ldr	r3, [pc, #12]	@ (800031c <SD_PowerOff+0x14>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	200000b5 	.word	0x200000b5

08000320 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000324:	4b02      	ldr	r3, [pc, #8]	@ (8000330 <SD_CheckPower+0x10>)
 8000326:	781b      	ldrb	r3, [r3, #0]
}
 8000328:	4618      	mov	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	200000b5 	.word	0x200000b5

08000334 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 800033e:	4b13      	ldr	r3, [pc, #76]	@ (800038c <SD_RxDataBlock+0x58>)
 8000340:	22c8      	movs	r2, #200	@ 0xc8
 8000342:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000344:	f7ff ff5a 	bl	80001fc <SPI_RxByte>
 8000348:	4603      	mov	r3, r0
 800034a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	2bff      	cmp	r3, #255	@ 0xff
 8000350:	d103      	bne.n	800035a <SD_RxDataBlock+0x26>
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <SD_RxDataBlock+0x58>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1f4      	bne.n	8000344 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	2bfe      	cmp	r3, #254	@ 0xfe
 800035e:	d001      	beq.n	8000364 <SD_RxDataBlock+0x30>
 8000360:	2300      	movs	r3, #0
 8000362:	e00f      	b.n	8000384 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	1c5a      	adds	r2, r3, #1
 8000368:	607a      	str	r2, [r7, #4]
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff62 	bl	8000234 <SPI_RxBytePtr>
  } while(len--);
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	603a      	str	r2, [r7, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1f4      	bne.n	8000364 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 800037a:	f7ff ff3f 	bl	80001fc <SPI_RxByte>
  SPI_RxByte();
 800037e:	f7ff ff3d 	bl	80001fc <SPI_RxByte>

  return TRUE;
 8000382:	2301      	movs	r3, #1
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200000b0 	.word	0x200000b0

08000390 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80003a0:	f7ff ff56 	bl	8000250 <SD_ReadyWait>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2bff      	cmp	r3, #255	@ 0xff
 80003a8:	d001      	beq.n	80003ae <SD_TxDataBlock+0x1e>
 80003aa:	2300      	movs	r3, #0
 80003ac:	e02f      	b.n	800040e <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff feef 	bl	8000194 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80003b6:	78fb      	ldrb	r3, [r7, #3]
 80003b8:	2bfd      	cmp	r3, #253	@ 0xfd
 80003ba:	d020      	beq.n	80003fe <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80003bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff01 	bl	80001c8 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80003c6:	f7ff ff19 	bl	80001fc <SPI_RxByte>
    SPI_RxByte();
 80003ca:	f7ff ff17 	bl	80001fc <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80003ce:	e00b      	b.n	80003e8 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80003d0:	f7ff ff14 	bl	80001fc <SPI_RxByte>
 80003d4:	4603      	mov	r3, r0
 80003d6:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	f003 031f 	and.w	r3, r3, #31
 80003de:	2b05      	cmp	r3, #5
 80003e0:	d006      	beq.n	80003f0 <SD_TxDataBlock+0x60>
      i++;
 80003e2:	7bbb      	ldrb	r3, [r7, #14]
 80003e4:	3301      	adds	r3, #1
 80003e6:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	2b40      	cmp	r3, #64	@ 0x40
 80003ec:	d9f0      	bls.n	80003d0 <SD_TxDataBlock+0x40>
 80003ee:	e000      	b.n	80003f2 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80003f0:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80003f2:	bf00      	nop
 80003f4:	f7ff ff02 	bl	80001fc <SPI_RxByte>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d0fa      	beq.n	80003f4 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	f003 031f 	and.w	r3, r3, #31
 8000404:	2b05      	cmp	r3, #5
 8000406:	d101      	bne.n	800040c <SD_TxDataBlock+0x7c>
 8000408:	2301      	movs	r3, #1
 800040a:	e000      	b.n	800040e <SD_TxDataBlock+0x7e>

  return FALSE;
 800040c:	2300      	movs	r3, #0
}
 800040e:	4618      	mov	r0, r3
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	4603      	mov	r3, r0
 800041e:	6039      	str	r1, [r7, #0]
 8000420:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000422:	f7ff ff15 	bl	8000250 <SD_ReadyWait>
 8000426:	4603      	mov	r3, r0
 8000428:	2bff      	cmp	r3, #255	@ 0xff
 800042a:	d001      	beq.n	8000430 <SD_SendCmd+0x1a>
 800042c:	23ff      	movs	r3, #255	@ 0xff
 800042e:	e042      	b.n	80004b6 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff feae 	bl	8000194 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	0e1b      	lsrs	r3, r3, #24
 800043c:	b2db      	uxtb	r3, r3
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fea8 	bl	8000194 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fea2 	bl	8000194 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	0a1b      	lsrs	r3, r3, #8
 8000454:	b2db      	uxtb	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff fe9c 	bl	8000194 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fe97 	bl	8000194 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b40      	cmp	r3, #64	@ 0x40
 800046a:	d102      	bne.n	8000472 <SD_SendCmd+0x5c>
 800046c:	2395      	movs	r3, #149	@ 0x95
 800046e:	73fb      	strb	r3, [r7, #15]
 8000470:	e007      	b.n	8000482 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b48      	cmp	r3, #72	@ 0x48
 8000476:	d102      	bne.n	800047e <SD_SendCmd+0x68>
 8000478:	2387      	movs	r3, #135	@ 0x87
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	e001      	b.n	8000482 <SD_SendCmd+0x6c>
  else crc = 1;
 800047e:	2301      	movs	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe85 	bl	8000194 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b4c      	cmp	r3, #76	@ 0x4c
 800048e:	d101      	bne.n	8000494 <SD_SendCmd+0x7e>
 8000490:	f7ff feb4 	bl	80001fc <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000494:	230a      	movs	r3, #10
 8000496:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000498:	f7ff feb0 	bl	80001fc <SPI_RxByte>
 800049c:	4603      	mov	r3, r0
 800049e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80004a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	da05      	bge.n	80004b4 <SD_SendCmd+0x9e>
 80004a8:	7bbb      	ldrb	r3, [r7, #14]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	7bbb      	ldrb	r3, [r7, #14]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d1f1      	bne.n	8000498 <SD_SendCmd+0x82>

  return res;
 80004b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SD_disk_initialize+0x14>
 80004d0:	2301      	movs	r3, #1
 80004d2:	e0d1      	b.n	8000678 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80004d4:	4b6a      	ldr	r3, [pc, #424]	@ (8000680 <SD_disk_initialize+0x1c0>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	f003 0302 	and.w	r3, r3, #2
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d003      	beq.n	80004ea <SD_disk_initialize+0x2a>
 80004e2:	4b67      	ldr	r3, [pc, #412]	@ (8000680 <SD_disk_initialize+0x1c0>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	e0c6      	b.n	8000678 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 80004ea:	f7ff fecb 	bl	8000284 <SD_PowerOn>

  /* slave select */
  SELECT();
 80004ee:	f7ff fe35 	bl	800015c <SELECT>

  /* check disk type */
  type = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80004f6:	2100      	movs	r1, #0
 80004f8:	2040      	movs	r0, #64	@ 0x40
 80004fa:	f7ff ff8c 	bl	8000416 <SD_SendCmd>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b01      	cmp	r3, #1
 8000502:	f040 80a1 	bne.w	8000648 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000506:	4b5f      	ldr	r3, [pc, #380]	@ (8000684 <SD_disk_initialize+0x1c4>)
 8000508:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800050c:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800050e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000512:	2048      	movs	r0, #72	@ 0x48
 8000514:	f7ff ff7f 	bl	8000416 <SD_SendCmd>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d155      	bne.n	80005ca <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800051e:	2300      	movs	r3, #0
 8000520:	73fb      	strb	r3, [r7, #15]
 8000522:	e00c      	b.n	800053e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000524:	7bfc      	ldrb	r4, [r7, #15]
 8000526:	f7ff fe69 	bl	80001fc <SPI_RxByte>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	f104 0310 	add.w	r3, r4, #16
 8000532:	443b      	add	r3, r7
 8000534:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	3301      	adds	r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d9ef      	bls.n	8000524 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000544:	7abb      	ldrb	r3, [r7, #10]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d17e      	bne.n	8000648 <SD_disk_initialize+0x188>
 800054a:	7afb      	ldrb	r3, [r7, #11]
 800054c:	2baa      	cmp	r3, #170	@ 0xaa
 800054e:	d17b      	bne.n	8000648 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000550:	2100      	movs	r1, #0
 8000552:	2077      	movs	r0, #119	@ 0x77
 8000554:	f7ff ff5f 	bl	8000416 <SD_SendCmd>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d807      	bhi.n	800056e <SD_disk_initialize+0xae>
 800055e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000562:	2069      	movs	r0, #105	@ 0x69
 8000564:	f7ff ff57 	bl	8000416 <SD_SendCmd>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d004      	beq.n	8000578 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800056e:	4b45      	ldr	r3, [pc, #276]	@ (8000684 <SD_disk_initialize+0x1c4>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1ec      	bne.n	8000550 <SD_disk_initialize+0x90>
 8000576:	e000      	b.n	800057a <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000578:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800057a:	4b42      	ldr	r3, [pc, #264]	@ (8000684 <SD_disk_initialize+0x1c4>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d062      	beq.n	8000648 <SD_disk_initialize+0x188>
 8000582:	2100      	movs	r1, #0
 8000584:	207a      	movs	r0, #122	@ 0x7a
 8000586:	f7ff ff46 	bl	8000416 <SD_SendCmd>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d15b      	bne.n	8000648 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e00c      	b.n	80005b0 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000596:	7bfc      	ldrb	r4, [r7, #15]
 8000598:	f7ff fe30 	bl	80001fc <SPI_RxByte>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	f104 0310 	add.w	r3, r4, #16
 80005a4:	443b      	add	r3, r7
 80005a6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d9ef      	bls.n	8000596 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80005b6:	7a3b      	ldrb	r3, [r7, #8]
 80005b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SD_disk_initialize+0x104>
 80005c0:	230c      	movs	r3, #12
 80005c2:	e000      	b.n	80005c6 <SD_disk_initialize+0x106>
 80005c4:	2304      	movs	r3, #4
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	e03e      	b.n	8000648 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80005ca:	2100      	movs	r1, #0
 80005cc:	2077      	movs	r0, #119	@ 0x77
 80005ce:	f7ff ff22 	bl	8000416 <SD_SendCmd>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d808      	bhi.n	80005ea <SD_disk_initialize+0x12a>
 80005d8:	2100      	movs	r1, #0
 80005da:	2069      	movs	r0, #105	@ 0x69
 80005dc:	f7ff ff1b 	bl	8000416 <SD_SendCmd>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d801      	bhi.n	80005ea <SD_disk_initialize+0x12a>
 80005e6:	2302      	movs	r3, #2
 80005e8:	e000      	b.n	80005ec <SD_disk_initialize+0x12c>
 80005ea:	2301      	movs	r3, #1
 80005ec:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d10e      	bne.n	8000612 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80005f4:	2100      	movs	r1, #0
 80005f6:	2077      	movs	r0, #119	@ 0x77
 80005f8:	f7ff ff0d 	bl	8000416 <SD_SendCmd>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d80e      	bhi.n	8000620 <SD_disk_initialize+0x160>
 8000602:	2100      	movs	r1, #0
 8000604:	2069      	movs	r0, #105	@ 0x69
 8000606:	f7ff ff06 	bl	8000416 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d107      	bne.n	8000620 <SD_disk_initialize+0x160>
 8000610:	e00c      	b.n	800062c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000612:	2100      	movs	r1, #0
 8000614:	2041      	movs	r0, #65	@ 0x41
 8000616:	f7ff fefe 	bl	8000416 <SD_SendCmd>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d004      	beq.n	800062a <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <SD_disk_initialize+0x1c4>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1e2      	bne.n	80005ee <SD_disk_initialize+0x12e>
 8000628:	e000      	b.n	800062c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800062a:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <SD_disk_initialize+0x1c4>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d007      	beq.n	8000644 <SD_disk_initialize+0x184>
 8000634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000638:	2050      	movs	r0, #80	@ 0x50
 800063a:	f7ff feec 	bl	8000416 <SD_SendCmd>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SD_disk_initialize+0x188>
 8000644:	2300      	movs	r3, #0
 8000646:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000648:	4a0f      	ldr	r2, [pc, #60]	@ (8000688 <SD_disk_initialize+0x1c8>)
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 800064e:	f7ff fd93 	bl	8000178 <DESELECT>
  SPI_RxByte();
 8000652:	f7ff fdd3 	bl	80001fc <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d008      	beq.n	800066e <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <SD_disk_initialize+0x1c0>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <SD_disk_initialize+0x1c0>)
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	e001      	b.n	8000672 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800066e:	f7ff fe4b 	bl	8000308 <SD_PowerOff>
  }

  return Stat;
 8000672:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <SD_disk_initialize+0x1c0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	200000b0 	.word	0x200000b0
 8000688:	200000b4 	.word	0x200000b4

0800068c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SD_disk_status+0x14>
 800069c:	2301      	movs	r3, #1
 800069e:	e002      	b.n	80006a6 <SD_disk_status+0x1a>
  return Stat;
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <SD_disk_status+0x24>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000000 	.word	0x20000000

080006b4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d102      	bne.n	80006d0 <SD_disk_read+0x1c>
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <SD_disk_read+0x20>
 80006d0:	2304      	movs	r3, #4
 80006d2:	e051      	b.n	8000778 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <SD_disk_read+0xcc>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SD_disk_read+0x32>
 80006e2:	2303      	movs	r3, #3
 80006e4:	e048      	b.n	8000778 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80006e6:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <SD_disk_read+0xd0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <SD_disk_read+0x44>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	025b      	lsls	r3, r3, #9
 80006f6:	607b      	str	r3, [r7, #4]

  SELECT();
 80006f8:	f7ff fd30 	bl	800015c <SELECT>

  if (count == 1)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d111      	bne.n	8000726 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2051      	movs	r0, #81	@ 0x51
 8000706:	f7ff fe86 	bl	8000416 <SD_SendCmd>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d129      	bne.n	8000764 <SD_disk_read+0xb0>
 8000710:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	f7ff fe0d 	bl	8000334 <SD_RxDataBlock>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d021      	beq.n	8000764 <SD_disk_read+0xb0>
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	e01e      	b.n	8000764 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	2052      	movs	r0, #82	@ 0x52
 800072a:	f7ff fe74 	bl	8000416 <SD_SendCmd>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d117      	bne.n	8000764 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000734:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000738:	68b8      	ldr	r0, [r7, #8]
 800073a:	f7ff fdfb 	bl	8000334 <SD_RxDataBlock>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00a      	beq.n	800075a <SD_disk_read+0xa6>
        buff += 512;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800074a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3b01      	subs	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1ed      	bne.n	8000734 <SD_disk_read+0x80>
 8000758:	e000      	b.n	800075c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800075a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	204c      	movs	r0, #76	@ 0x4c
 8000760:	f7ff fe59 	bl	8000416 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000764:	f7ff fd08 	bl	8000178 <DESELECT>
  SPI_RxByte();
 8000768:	f7ff fd48 	bl	80001fc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf14      	ite	ne
 8000772:	2301      	movne	r3, #1
 8000774:	2300      	moveq	r3, #0
 8000776:	b2db      	uxtb	r3, r3
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	200000b4 	.word	0x200000b4

08000788 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <SD_disk_write+0x1c>
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d101      	bne.n	80007a8 <SD_disk_write+0x20>
 80007a4:	2304      	movs	r3, #4
 80007a6:	e06b      	b.n	8000880 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80007a8:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <SD_disk_write+0x100>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SD_disk_write+0x32>
 80007b6:	2303      	movs	r3, #3
 80007b8:	e062      	b.n	8000880 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <SD_disk_write+0x100>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SD_disk_write+0x44>
 80007c8:	2302      	movs	r3, #2
 80007ca:	e059      	b.n	8000880 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <SD_disk_write+0x104>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <SD_disk_write+0x56>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	025b      	lsls	r3, r3, #9
 80007dc:	607b      	str	r3, [r7, #4]

  SELECT();
 80007de:	f7ff fcbd 	bl	800015c <SELECT>

  if (count == 1)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d110      	bne.n	800080a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	2058      	movs	r0, #88	@ 0x58
 80007ec:	f7ff fe13 	bl	8000416 <SD_SendCmd>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d13a      	bne.n	800086c <SD_disk_write+0xe4>
 80007f6:	21fe      	movs	r1, #254	@ 0xfe
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	f7ff fdc9 	bl	8000390 <SD_TxDataBlock>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d033      	beq.n	800086c <SD_disk_write+0xe4>
      count = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	e030      	b.n	800086c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <SD_disk_write+0x104>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	2b00      	cmp	r3, #0
 8000814:	d007      	beq.n	8000826 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000816:	2100      	movs	r1, #0
 8000818:	2077      	movs	r0, #119	@ 0x77
 800081a:	f7ff fdfc 	bl	8000416 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	2057      	movs	r0, #87	@ 0x57
 8000822:	f7ff fdf8 	bl	8000416 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	2059      	movs	r0, #89	@ 0x59
 800082a:	f7ff fdf4 	bl	8000416 <SD_SendCmd>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d11b      	bne.n	800086c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000834:	21fc      	movs	r1, #252	@ 0xfc
 8000836:	68b8      	ldr	r0, [r7, #8]
 8000838:	f7ff fdaa 	bl	8000390 <SD_TxDataBlock>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00a      	beq.n	8000858 <SD_disk_write+0xd0>
        buff += 512;
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000848:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	3b01      	subs	r3, #1
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1ee      	bne.n	8000834 <SD_disk_write+0xac>
 8000856:	e000      	b.n	800085a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000858:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800085a:	21fd      	movs	r1, #253	@ 0xfd
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff fd97 	bl	8000390 <SD_TxDataBlock>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <SD_disk_write+0xe4>
      {
        count = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800086c:	f7ff fc84 	bl	8000178 <DESELECT>
  SPI_RxByte();
 8000870:	f7ff fcc4 	bl	80001fc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	bf14      	ite	ne
 800087a:	2301      	movne	r3, #1
 800087c:	2300      	moveq	r3, #0
 800087e:	b2db      	uxtb	r3, r3
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000000 	.word	0x20000000
 800088c:	200000b4 	.word	0x200000b4

08000890 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08b      	sub	sp, #44	@ 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	603a      	str	r2, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	460b      	mov	r3, r1
 800089e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SD_disk_ioctl+0x1e>
 80008aa:	2304      	movs	r3, #4
 80008ac:	e113      	b.n	8000ad6 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d124      	bne.n	8000904 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d012      	beq.n	80008e8 <SD_disk_ioctl+0x58>
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	dc1a      	bgt.n	80008fc <SD_disk_ioctl+0x6c>
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <SD_disk_ioctl+0x40>
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d006      	beq.n	80008dc <SD_disk_ioctl+0x4c>
 80008ce:	e015      	b.n	80008fc <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80008d0:	f7ff fd1a 	bl	8000308 <SD_PowerOff>
      res = RES_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80008da:	e0fa      	b.n	8000ad2 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80008dc:	f7ff fcd2 	bl	8000284 <SD_PowerOn>
      res = RES_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80008e6:	e0f4      	b.n	8000ad2 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	1c5c      	adds	r4, r3, #1
 80008ec:	f7ff fd18 	bl	8000320 <SD_CheckPower>
 80008f0:	4603      	mov	r3, r0
 80008f2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80008fa:	e0ea      	b.n	8000ad2 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80008fc:	2304      	movs	r3, #4
 80008fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000902:	e0e6      	b.n	8000ad2 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000904:	4b76      	ldr	r3, [pc, #472]	@ (8000ae0 <SD_disk_ioctl+0x250>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SD_disk_ioctl+0x86>
 8000912:	2303      	movs	r3, #3
 8000914:	e0df      	b.n	8000ad6 <SD_disk_ioctl+0x246>

    SELECT();
 8000916:	f7ff fc21 	bl	800015c <SELECT>

    switch (ctrl)
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	2b0d      	cmp	r3, #13
 800091e:	f200 80c9 	bhi.w	8000ab4 <SD_disk_ioctl+0x224>
 8000922:	a201      	add	r2, pc, #4	@ (adr r2, 8000928 <SD_disk_ioctl+0x98>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000a1f 	.word	0x08000a1f
 800092c:	08000961 	.word	0x08000961
 8000930:	08000a0f 	.word	0x08000a0f
 8000934:	08000ab5 	.word	0x08000ab5
 8000938:	08000ab5 	.word	0x08000ab5
 800093c:	08000ab5 	.word	0x08000ab5
 8000940:	08000ab5 	.word	0x08000ab5
 8000944:	08000ab5 	.word	0x08000ab5
 8000948:	08000ab5 	.word	0x08000ab5
 800094c:	08000ab5 	.word	0x08000ab5
 8000950:	08000ab5 	.word	0x08000ab5
 8000954:	08000a31 	.word	0x08000a31
 8000958:	08000a55 	.word	0x08000a55
 800095c:	08000a79 	.word	0x08000a79
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000960:	2100      	movs	r1, #0
 8000962:	2049      	movs	r0, #73	@ 0x49
 8000964:	f7ff fd57 	bl	8000416 <SD_SendCmd>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f040 80a6 	bne.w	8000abc <SD_disk_ioctl+0x22c>
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2110      	movs	r1, #16
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fcdc 	bl	8000334 <SD_RxDataBlock>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 809c 	beq.w	8000abc <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	099b      	lsrs	r3, r3, #6
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b01      	cmp	r3, #1
 800098c:	d10d      	bne.n	80009aa <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800098e:	7d7b      	ldrb	r3, [r7, #21]
 8000990:	461a      	mov	r2, r3
 8000992:	7d3b      	ldrb	r3, [r7, #20]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	4413      	add	r3, r2
 800099a:	b29b      	uxth	r3, r3
 800099c:	3301      	adds	r3, #1
 800099e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009a0:	8bfb      	ldrh	r3, [r7, #30]
 80009a2:	029a      	lsls	r2, r3, #10
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	e02d      	b.n	8000a06 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009aa:	7c7b      	ldrb	r3, [r7, #17]
 80009ac:	f003 030f 	and.w	r3, r3, #15
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	7dbb      	ldrb	r3, [r7, #22]
 80009b4:	09db      	lsrs	r3, r3, #7
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4413      	add	r3, r2
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	7d7b      	ldrb	r3, [r7, #21]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	f003 0306 	and.w	r3, r3, #6
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4413      	add	r3, r2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	3302      	adds	r3, #2
 80009ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009d2:	7d3b      	ldrb	r3, [r7, #20]
 80009d4:	099b      	lsrs	r3, r3, #6
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	7cfb      	ldrb	r3, [r7, #19]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	b29b      	uxth	r3, r3
 80009e0:	4413      	add	r3, r2
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	7cbb      	ldrb	r3, [r7, #18]
 80009e6:	029b      	lsls	r3, r3, #10
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4413      	add	r3, r2
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	3301      	adds	r3, #1
 80009f6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80009f8:	8bfa      	ldrh	r2, [r7, #30]
 80009fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80009fe:	3b09      	subs	r3, #9
 8000a00:	409a      	lsls	r2, r3
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000a0c:	e056      	b.n	8000abc <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a14:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000a1c:	e055      	b.n	8000aca <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000a1e:	f7ff fc17 	bl	8000250 <SD_ReadyWait>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2bff      	cmp	r3, #255	@ 0xff
 8000a26:	d14b      	bne.n	8000ac0 <SD_disk_ioctl+0x230>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000a2e:	e047      	b.n	8000ac0 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a30:	2100      	movs	r1, #0
 8000a32:	2049      	movs	r0, #73	@ 0x49
 8000a34:	f7ff fcef 	bl	8000416 <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d142      	bne.n	8000ac4 <SD_disk_ioctl+0x234>
 8000a3e:	2110      	movs	r1, #16
 8000a40:	6a38      	ldr	r0, [r7, #32]
 8000a42:	f7ff fc77 	bl	8000334 <SD_RxDataBlock>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d03b      	beq.n	8000ac4 <SD_disk_ioctl+0x234>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000a52:	e037      	b.n	8000ac4 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a54:	2100      	movs	r1, #0
 8000a56:	204a      	movs	r0, #74	@ 0x4a
 8000a58:	f7ff fcdd 	bl	8000416 <SD_SendCmd>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d132      	bne.n	8000ac8 <SD_disk_ioctl+0x238>
 8000a62:	2110      	movs	r1, #16
 8000a64:	6a38      	ldr	r0, [r7, #32]
 8000a66:	f7ff fc65 	bl	8000334 <SD_RxDataBlock>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d02b      	beq.n	8000ac8 <SD_disk_ioctl+0x238>
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000a76:	e027      	b.n	8000ac8 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	207a      	movs	r0, #122	@ 0x7a
 8000a7c:	f7ff fccb 	bl	8000416 <SD_SendCmd>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d116      	bne.n	8000ab4 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000a8c:	e00b      	b.n	8000aa6 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8000a8e:	6a3c      	ldr	r4, [r7, #32]
 8000a90:	1c63      	adds	r3, r4, #1
 8000a92:	623b      	str	r3, [r7, #32]
 8000a94:	f7ff fbb2 	bl	80001fc <SPI_RxByte>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000a9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000aa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d9ef      	bls.n	8000a8e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000aba:	e006      	b.n	8000aca <SD_disk_ioctl+0x23a>
      break;
 8000abc:	bf00      	nop
 8000abe:	e004      	b.n	8000aca <SD_disk_ioctl+0x23a>
      break;
 8000ac0:	bf00      	nop
 8000ac2:	e002      	b.n	8000aca <SD_disk_ioctl+0x23a>
      break;
 8000ac4:	bf00      	nop
 8000ac6:	e000      	b.n	8000aca <SD_disk_ioctl+0x23a>
      break;
 8000ac8:	bf00      	nop
    }

    DESELECT();
 8000aca:	f7ff fb55 	bl	8000178 <DESELECT>
    SPI_RxByte();
 8000ace:	f7ff fb95 	bl	80001fc <SPI_RxByte>
  }

  return res;
 8000ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	372c      	adds	r7, #44	@ 0x2c
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <Log_Init>:
static uint32_t dummy_timestamp = 0;

// RTC status flag
static bool rtc_available = false;

void Log_Init(UART_HandleTypeDef *huart) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
    _huart = huart;
 8000aec:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <Log_Init+0x20>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
    dummy_timestamp = 0;
 8000af2:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <Log_Init+0x24>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
        } else {
            Log_Write(LOG_INFO, "RTC initialized successfully");
        }
    }
    #endif
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200000b8 	.word	0x200000b8
 8000b08:	200000bc 	.word	0x200000bc

08000b0c <_log_level_to_string>:
    strncpy(log_filename, filename, sizeof(log_filename)-1);
    log_filename[sizeof(log_filename)-1] = '\0';
}

// Convert log level to string
static const char* _log_level_to_string(LogLevel level) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
    switch (level) {
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d817      	bhi.n	8000b4c <_log_level_to_string+0x40>
 8000b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b24 <_log_level_to_string+0x18>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b39 	.word	0x08000b39
 8000b28:	08000b3d 	.word	0x08000b3d
 8000b2c:	08000b41 	.word	0x08000b41
 8000b30:	08000b45 	.word	0x08000b45
 8000b34:	08000b49 	.word	0x08000b49
        case LOG_DEBUG:    return "DEBUG";
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <_log_level_to_string+0x4c>)
 8000b3a:	e008      	b.n	8000b4e <_log_level_to_string+0x42>
        case LOG_INFO:     return "INFO";
 8000b3c:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <_log_level_to_string+0x50>)
 8000b3e:	e006      	b.n	8000b4e <_log_level_to_string+0x42>
        case LOG_WARNING:  return "WARN";
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <_log_level_to_string+0x54>)
 8000b42:	e004      	b.n	8000b4e <_log_level_to_string+0x42>
        case LOG_ERROR:    return "ERROR";
 8000b44:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <_log_level_to_string+0x58>)
 8000b46:	e002      	b.n	8000b4e <_log_level_to_string+0x42>
        case LOG_CRITICAL: return "CRITICAL";
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <_log_level_to_string+0x5c>)
 8000b4a:	e000      	b.n	8000b4e <_log_level_to_string+0x42>
        default:           return "UNKNOWN";
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <_log_level_to_string+0x60>)
    }
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	08008eb4 	.word	0x08008eb4
 8000b5c:	08008ebc 	.word	0x08008ebc
 8000b60:	08008ec4 	.word	0x08008ec4
 8000b64:	08008ecc 	.word	0x08008ecc
 8000b68:	08008ed4 	.word	0x08008ed4
 8000b6c:	08008ee0 	.word	0x08008ee0

08000b70 <_get_timestamp>:

// Get current timestamp (either from RTC or dummy)
static void _get_timestamp(char *timestamp_buf, size_t buf_size) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
        }
    }
    #endif

    // Fallback to dummy timestamp if RTC not available
    uint32_t hours = (dummy_timestamp / 3600) % 24;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <_get_timestamp+0x88>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bfc <_get_timestamp+0x8c>)
 8000b80:	fba2 2303 	umull	r2, r3, r2, r3
 8000b84:	0ada      	lsrs	r2, r3, #11
 8000b86:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <_get_timestamp+0x90>)
 8000b88:	fba3 1302 	umull	r1, r3, r3, r2
 8000b8c:	0919      	lsrs	r1, r3, #4
 8000b8e:	460b      	mov	r3, r1
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	440b      	add	r3, r1
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	617b      	str	r3, [r7, #20]
    uint32_t minutes = (dummy_timestamp / 60) % 60;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <_get_timestamp+0x88>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <_get_timestamp+0x94>)
 8000ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba4:	095a      	lsrs	r2, r3, #5
 8000ba6:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <_get_timestamp+0x94>)
 8000ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bac:	0959      	lsrs	r1, r3, #5
 8000bae:	460b      	mov	r3, r1
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	1a5b      	subs	r3, r3, r1
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	613b      	str	r3, [r7, #16]
    uint32_t seconds = dummy_timestamp % 60;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <_get_timestamp+0x88>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <_get_timestamp+0x94>)
 8000bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc4:	0959      	lsrs	r1, r3, #5
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	1a5b      	subs	r3, r3, r1
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	60fb      	str	r3, [r7, #12]
    dummy_timestamp++;  // Increment for next log
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <_get_timestamp+0x88>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <_get_timestamp+0x88>)
 8000bda:	6013      	str	r3, [r2, #0]

    snprintf(timestamp_buf, buf_size, "DUMMY %02lu:%02lu:%02lu",
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	4a08      	ldr	r2, [pc, #32]	@ (8000c08 <_get_timestamp+0x98>)
 8000be8:	6839      	ldr	r1, [r7, #0]
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f007 fc92 	bl	8008514 <sniprintf>
            hours, minutes, seconds);
}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200000bc 	.word	0x200000bc
 8000bfc:	91a2b3c5 	.word	0x91a2b3c5
 8000c00:	aaaaaaab 	.word	0xaaaaaaab
 8000c04:	88888889 	.word	0x88888889
 8000c08:	08008ee8 	.word	0x08008ee8

08000c0c <Log_Write>:

void Log_Write(LogLevel level, const char *message) {
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	f5ad 5d06 	sub.w	sp, sp, #8576	@ 0x2180
 8000c12:	b087      	sub	sp, #28
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	4602      	mov	r2, r0
 8000c18:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000c1c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000c20:	6019      	str	r1, [r3, #0]
 8000c22:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000c26:	f2a3 1389 	subw	r3, r3, #393	@ 0x189
 8000c2a:	701a      	strb	r2, [r3, #0]
    FRESULT fres;
    char buffer[256];
    char timestamp[32];

    // Get timestamp
    _get_timestamp(timestamp, sizeof(timestamp));
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	2120      	movs	r1, #32
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff9c 	bl	8000b70 <_get_timestamp>

    // Format log message
    snprintf(buffer, sizeof(buffer), "[%s][%s] %s\r\n",
 8000c38:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000c3c:	f2a3 1389 	subw	r3, r3, #393	@ 0x189
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff62 	bl	8000b0c <_log_level_to_string>
 8000c48:	4601      	mov	r1, r0
 8000c4a:	f107 0210 	add.w	r2, r7, #16
 8000c4e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000c52:	3820      	subs	r0, #32
 8000c54:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000c58:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	9100      	str	r1, [sp, #0]
 8000c62:	4613      	mov	r3, r2
 8000c64:	4a5b      	ldr	r2, [pc, #364]	@ (8000dd4 <Log_Write+0x1c8>)
 8000c66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c6a:	f007 fc53 	bl	8008514 <sniprintf>
            timestamp,
            _log_level_to_string(level),
            message);

    // Mount the filesystem
    fres = f_mount(&fs, "", 1);
 8000c6e:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 8000c72:	f103 0310 	add.w	r3, r3, #16
 8000c76:	3b14      	subs	r3, #20
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4957      	ldr	r1, [pc, #348]	@ (8000dd8 <Log_Write+0x1cc>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f006 f9a5 	bl	8006fcc <f_mount>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000c88:	f102 020f 	add.w	r2, r2, #15
 8000c8c:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8000c8e:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8000c92:	f103 030f 	add.w	r3, r3, #15
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00d      	beq.n	8000cb8 <Log_Write+0xac>
        if (_huart) {
 8000c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8000ddc <Log_Write+0x1d0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 8091 	beq.w	8000dc8 <Log_Write+0x1bc>
            HAL_UART_Transmit(_huart, (uint8_t*)"Failed to mount filesystem\r\n",
 8000ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8000ddc <Log_Write+0x1d0>)
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	221c      	movs	r2, #28
 8000cb0:	494b      	ldr	r1, [pc, #300]	@ (8000de0 <Log_Write+0x1d4>)
 8000cb2:	f003 fed0 	bl	8004a56 <HAL_UART_Transmit>
 8000cb6:	e088      	b.n	8000dca <Log_Write+0x1be>
        }
        return;
    }

    // Open or create the log file (append mode)
    fres = f_open(&fil, log_filename, FA_WRITE | FA_OPEN_ALWAYS);
 8000cb8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000cbc:	3b20      	subs	r3, #32
 8000cbe:	2212      	movs	r2, #18
 8000cc0:	4948      	ldr	r1, [pc, #288]	@ (8000de4 <Log_Write+0x1d8>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f006 f9cc 	bl	8007060 <f_open>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000cce:	f102 020f 	add.w	r2, r2, #15
 8000cd2:	7013      	strb	r3, [r2, #0]
    if (fres == FR_OK) {
 8000cd4:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8000cd8:	f103 030f 	add.w	r3, r3, #15
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14a      	bne.n	8000d78 <Log_Write+0x16c>
        // Seek to end of file for appending
        f_lseek(&fil, f_size(&fil));
 8000ce2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000ce6:	f8d3 2fac 	ldr.w	r2, [r3, #4012]	@ 0xfac
 8000cea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000cee:	3b20      	subs	r3, #32
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f006 ffe8 	bl	8007cc8 <f_lseek>

        // Write the log message
        UINT bytes_written;
        fres = f_write(&fil, buffer, strlen(buffer), &bytes_written);
 8000cf8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000cfc:	3b20      	subs	r3, #32
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fa24 	bl	800014c <strlen>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000d10:	3920      	subs	r1, #32
 8000d12:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8000d16:	3820      	subs	r0, #32
 8000d18:	f006 fca4 	bl	8007664 <f_write>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f507 5206 	add.w	r2, r7, #8576	@ 0x2180
 8000d22:	f102 020f 	add.w	r2, r2, #15
 8000d26:	7013      	strb	r3, [r2, #0]
        if (fres != FR_OK || bytes_written != strlen(buffer)) {
 8000d28:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 8000d2c:	f103 030f 	add.w	r3, r3, #15
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10d      	bne.n	8000d52 <Log_Write+0x146>
 8000d36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d3a:	3b20      	subs	r3, #32
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fa05 	bl	800014c <strlen>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000d48:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d00b      	beq.n	8000d6a <Log_Write+0x15e>
            if (_huart) {
 8000d52:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <Log_Write+0x1d0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <Log_Write+0x15e>
                HAL_UART_Transmit(_huart, (uint8_t*)"Failed to write to log file\r\n",
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <Log_Write+0x1d0>)
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	221d      	movs	r2, #29
 8000d64:	4920      	ldr	r1, [pc, #128]	@ (8000de8 <Log_Write+0x1dc>)
 8000d66:	f003 fe76 	bl	8004a56 <HAL_UART_Transmit>
                                 strlen("Failed to write to log file\r\n"), HAL_MAX_DELAY);
            }
        }

        // Close the file
        f_close(&fil);
 8000d6a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000d6e:	3b20      	subs	r3, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f006 ff7e 	bl	8007c72 <f_close>
 8000d76:	e00b      	b.n	8000d90 <Log_Write+0x184>
    } else {
        if (_huart) {
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <Log_Write+0x1d0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d007      	beq.n	8000d90 <Log_Write+0x184>
            HAL_UART_Transmit(_huart, (uint8_t*)"Failed to open log file\r\n",
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <Log_Write+0x1d0>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	2219      	movs	r2, #25
 8000d8a:	4918      	ldr	r1, [pc, #96]	@ (8000dec <Log_Write+0x1e0>)
 8000d8c:	f003 fe63 	bl	8004a56 <HAL_UART_Transmit>
                             strlen("Failed to open log file\r\n"), HAL_MAX_DELAY);
        }
    }

    // Unmount
    f_mount(NULL, "", 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	4911      	ldr	r1, [pc, #68]	@ (8000dd8 <Log_Write+0x1cc>)
 8000d94:	2000      	movs	r0, #0
 8000d96:	f006 f919 	bl	8006fcc <f_mount>

    // Also output to UART for debugging
    if (_huart) {
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <Log_Write+0x1d0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d013      	beq.n	8000dca <Log_Write+0x1be>
        HAL_UART_Transmit(_huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <Log_Write+0x1d0>)
 8000da4:	681c      	ldr	r4, [r3, #0]
 8000da6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000daa:	3b20      	subs	r3, #32
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff f9cd 	bl	800014c <strlen>
 8000db2:	4603      	mov	r3, r0
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000dba:	3920      	subs	r1, #32
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f003 fe48 	bl	8004a56 <HAL_UART_Transmit>
 8000dc6:	e000      	b.n	8000dca <Log_Write+0x1be>
        return;
 8000dc8:	bf00      	nop
    }
}
 8000dca:	f507 5706 	add.w	r7, r7, #8576	@ 0x2180
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd90      	pop	{r4, r7, pc}
 8000dd4:	08008f00 	.word	0x08008f00
 8000dd8:	08008f10 	.word	0x08008f10
 8000ddc:	200000b8 	.word	0x200000b8
 8000de0:	08008f14 	.word	0x08008f14
 8000de4:	20000004 	.word	0x20000004
 8000de8:	08008f34 	.word	0x08008f34
 8000dec:	08008f54 	.word	0x08008f54

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fbc4 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f830 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 f8f8 	bl	8000ff0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e00:	f000 f8cc 	bl	8000f9c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000e04:	f000 f894 	bl	8000f30 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000e08:	f003 fffa 	bl	8004e00 <MX_FATFS_Init>
  MX_I2C1_Init();
 8000e0c:	f000 f862 	bl	8000ed4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  Log_Init(&huart1);
 8000e10:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <main+0x58>)
 8000e12:	f7ff fe67 	bl	8000ae4 <Log_Init>

  // Test logging
  Log_Write(LOG_INFO, "System initialized (Proteus test mode)");
 8000e16:	490d      	ldr	r1, [pc, #52]	@ (8000e4c <main+0x5c>)
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fef7 	bl	8000c0c <Log_Write>
  Log_Write(LOG_INFO, "Starting SD card operations");
 8000e1e:	490c      	ldr	r1, [pc, #48]	@ (8000e50 <main+0x60>)
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff fef3 	bl	8000c0c <Log_Write>

  process_SD_card();
 8000e26:	f000 f921 	bl	800106c <process_SD_card>

  Log_Write(LOG_INFO, "SD card operations completed");
 8000e2a:	490a      	ldr	r1, [pc, #40]	@ (8000e54 <main+0x64>)
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff feed 	bl	8000c0c <Log_Write>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
        // Example of periodic logging
        Log_Write(LOG_DEBUG, "System running in Proteus");
 8000e32:	4909      	ldr	r1, [pc, #36]	@ (8000e58 <main+0x68>)
 8000e34:	2000      	movs	r0, #0
 8000e36:	f7ff fee9 	bl	8000c0c <Log_Write>
        HAL_Delay(5000);
 8000e3a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000e3e:	f000 fc01 	bl	8001644 <HAL_Delay>
        Log_Write(LOG_DEBUG, "System running in Proteus");
 8000e42:	bf00      	nop
 8000e44:	e7f5      	b.n	8000e32 <main+0x42>
 8000e46:	bf00      	nop
 8000e48:	2000016c 	.word	0x2000016c
 8000e4c:	08008f70 	.word	0x08008f70
 8000e50:	08008f98 	.word	0x08008f98
 8000e54:	08008fb4 	.word	0x08008fb4
 8000e58:	08008fd4 	.word	0x08008fd4

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b090      	sub	sp, #64	@ 0x40
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	2228      	movs	r2, #40	@ 0x28
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f007 fb86 	bl	800857c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e82:	2301      	movs	r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e86:	2310      	movs	r3, #16
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fd54 	bl	8003940 <HAL_RCC_OscConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e9e:	f000 f9b1 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 ffc2 	bl	8003e44 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ec6:	f000 f99d 	bl	8001204 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3740      	adds	r7, #64	@ 0x40
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <MX_I2C1_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_I2C1_Init+0x58>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f12:	f000 feeb 	bl	8001cec <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 f972 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000c0 	.word	0x200000c0
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	000186a0 	.word	0x000186a0

08000f30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f34:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f36:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <MX_SPI1_Init+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MX_SPI1_Init+0x64>)
 8000f82:	f003 f8ed 	bl	8004160 <HAL_SPI_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f8c:	f000 f93a 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000114 	.word	0x20000114
 8000f98:	40013000 	.word	0x40013000

08000f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <MX_USART1_UART_Init+0x50>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fa8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	f003 fcef 	bl	80049b6 <HAL_UART_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fde:	f000 f911 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000016c 	.word	0x2000016c
 8000fec:	40013800 	.word	0x40013800

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <MX_GPIO_Init+0x74>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a16      	ldr	r2, [pc, #88]	@ (8001064 <MX_GPIO_Init+0x74>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_GPIO_Init+0x74>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_GPIO_Init+0x74>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <MX_GPIO_Init+0x74>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_GPIO_Init+0x74>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2110      	movs	r1, #16
 8001038:	480b      	ldr	r0, [pc, #44]	@ (8001068 <MX_GPIO_Init+0x78>)
 800103a:	f000 fe3f 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800103e:	2310      	movs	r3, #16
 8001040:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2302      	movs	r3, #2
 800104c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	4804      	ldr	r0, [pc, #16]	@ (8001068 <MX_GPIO_Init+0x78>)
 8001056:	f000 fcad 	bl	80019b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	40010800 	.word	0x40010800

0800106c <process_SD_card>:
 Timer1--;
 if(Timer2 > 0)
 Timer2--;
 }*/

void process_SD_card(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	f5ad 5d84 	sub.w	sp, sp, #4224	@ 0x1080
 8001072:	b082      	sub	sp, #8
 8001074:	af02      	add	r7, sp, #8
    FATFS FatFs;
    FRESULT fres;
    uint8_t retry_count = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800107c:	f102 021f 	add.w	r2, r2, #31
 8001080:	7013      	strb	r3, [r2, #0]
    const uint8_t max_retries = 3;
 8001082:	2303      	movs	r3, #3
 8001084:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001088:	f102 021e 	add.w	r2, r2, #30
 800108c:	7013      	strb	r3, [r2, #0]
    char status_msg[60];

    while(retry_count < max_retries) {
 800108e:	e08f      	b.n	80011b0 <process_SD_card+0x144>
        fres = f_mount(&FatFs, "", 1); // 1=Mount now
 8001090:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001094:	3b18      	subs	r3, #24
 8001096:	2201      	movs	r2, #1
 8001098:	4956      	ldr	r1, [pc, #344]	@ (80011f4 <process_SD_card+0x188>)
 800109a:	4618      	mov	r0, r3
 800109c:	f005 ff96 	bl	8006fcc <f_mount>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80010a6:	f102 021d 	add.w	r2, r2, #29
 80010aa:	7013      	strb	r3, [r2, #0]

        if(fres == FR_OK) {
 80010ac:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80010b0:	f103 031d 	add.w	r3, r3, #29
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d150      	bne.n	800115c <process_SD_card+0xf0>
            uint32_t total, free;
            FATFS* fs;
            if(f_getfree("", &free, &fs) == FR_OK) {
 80010ba:	f107 0220 	add.w	r2, r7, #32
 80010be:	3a1c      	subs	r2, #28
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	3b18      	subs	r3, #24
 80010c6:	4619      	mov	r1, r3
 80010c8:	484a      	ldr	r0, [pc, #296]	@ (80011f4 <process_SD_card+0x188>)
 80010ca:	f007 f8ee 	bl	80082aa <f_getfree>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d143      	bne.n	800115c <process_SD_card+0xf0>
                total = (fs->n_fatent - 2) * fs->csize / 2; // Total KB
 80010d4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80010d8:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80010dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	3b02      	subs	r3, #2
 80010e4:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80010e8:	f852 2c7c 	ldr.w	r2, [r2, #-124]
 80010ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010f0:	7892      	ldrb	r2, [r2, #2]
 80010f2:	fb02 f303 	mul.w	r3, r2, r3
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80010fc:	f102 0218 	add.w	r2, r2, #24
 8001100:	6013      	str	r3, [r2, #0]
                free = free * fs->csize / 2; // Free KB
 8001102:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001106:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800110a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800110e:	789b      	ldrb	r3, [r3, #2]
 8001110:	461a      	mov	r2, r3
 8001112:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001116:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	085b      	lsrs	r3, r3, #1
 8001120:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001124:	f842 3c78 	str.w	r3, [r2, #-120]
                snprintf(status_msg, sizeof(status_msg),
 8001128:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800112c:	f853 2c78 	ldr.w	r2, [r3, #-120]
 8001130:	f107 0020 	add.w	r0, r7, #32
 8001134:	3814      	subs	r0, #20
 8001136:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800113a:	f103 0318 	add.w	r3, r3, #24
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	4613      	mov	r3, r2
 8001144:	4a2c      	ldr	r2, [pc, #176]	@ (80011f8 <process_SD_card+0x18c>)
 8001146:	213c      	movs	r1, #60	@ 0x3c
 8001148:	f007 f9e4 	bl	8008514 <sniprintf>
                    "SD mounted (Free: %lukB/%lukB)", free, total);
                Log_Write(LOG_INFO, status_msg);
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	3b14      	subs	r3, #20
 8001152:	4619      	mov	r1, r3
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff fd59 	bl	8000c0c <Log_Write>
 800115a:	e036      	b.n	80011ca <process_SD_card+0x15e>
                break;
            }
        }

        snprintf(status_msg, sizeof(status_msg),
 800115c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001160:	f103 031f 	add.w	r3, r3, #31
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800116c:	f103 031e 	add.w	r3, r3, #30
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f107 0020 	add.w	r0, r7, #32
 8001176:	3814      	subs	r0, #20
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	4613      	mov	r3, r2
 800117c:	4a1f      	ldr	r2, [pc, #124]	@ (80011fc <process_SD_card+0x190>)
 800117e:	213c      	movs	r1, #60	@ 0x3c
 8001180:	f007 f9c8 	bl	8008514 <sniprintf>
            "Mount failed (Attempt %d/%d)", retry_count+1, max_retries);
        Log_Write(LOG_WARNING, status_msg);
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	3b14      	subs	r3, #20
 800118a:	4619      	mov	r1, r3
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff fd3d 	bl	8000c0c <Log_Write>
        HAL_Delay(500);
 8001192:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001196:	f000 fa55 	bl	8001644 <HAL_Delay>
        retry_count++;
 800119a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800119e:	f103 031f 	add.w	r3, r3, #31
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80011aa:	f102 021f 	add.w	r2, r2, #31
 80011ae:	7013      	strb	r3, [r2, #0]
    while(retry_count < max_retries) {
 80011b0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80011b4:	f103 031f 	add.w	r3, r3, #31
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80011be:	f103 031e 	add.w	r3, r3, #30
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f4ff af63 	bcc.w	8001090 <process_SD_card+0x24>
    }

    if(retry_count >= max_retries) {
 80011ca:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80011ce:	f103 031f 	add.w	r3, r3, #31
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80011d8:	f103 031e 	add.w	r3, r3, #30
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d303      	bcc.n	80011ea <process_SD_card+0x17e>
        Log_Write(LOG_CRITICAL, "SD mount failed permanently");
 80011e2:	4907      	ldr	r1, [pc, #28]	@ (8001200 <process_SD_card+0x194>)
 80011e4:	2004      	movs	r0, #4
 80011e6:	f7ff fd11 	bl	8000c0c <Log_Write>
        return;
    }

    /* ... rest of SD operations ... */
}
 80011ea:	f507 5784 	add.w	r7, r7, #4224	@ 0x1080
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	08008ff0 	.word	0x08008ff0
 80011f8:	08008ff4 	.word	0x08008ff4
 80011fc:	08009014 	.word	0x08009014
 8001200:	08009034 	.word	0x08009034

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <Error_Handler+0x8>

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a14      	ldr	r2, [pc, #80]	@ (800126c <HAL_MspInit+0x5c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_MspInit+0x5c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0e      	ldr	r2, [pc, #56]	@ (800126c <HAL_MspInit+0x5c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_MspInit+0x5c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_MspInit+0x60>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_MspInit+0x60>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000

08001274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <HAL_I2C_MspInit+0x90>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d133      	bne.n	80012fc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <HAL_I2C_MspInit+0x94>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a1b      	ldr	r2, [pc, #108]	@ (8001308 <HAL_I2C_MspInit+0x94>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <HAL_I2C_MspInit+0x94>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ac:	23c0      	movs	r3, #192	@ 0xc0
 80012ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4813      	ldr	r0, [pc, #76]	@ (800130c <HAL_I2C_MspInit+0x98>)
 80012c0:	f000 fb78 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <HAL_I2C_MspInit+0x94>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_I2C_MspInit+0x94>)
 80012ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ce:	61d3      	str	r3, [r2, #28]
 80012d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <HAL_I2C_MspInit+0x94>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	201f      	movs	r0, #31
 80012e2:	f000 faaa 	bl	800183a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012e6:	201f      	movs	r0, #31
 80012e8:	f000 fac3 	bl	8001872 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2020      	movs	r0, #32
 80012f2:	f000 faa2 	bl	800183a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012f6:	2020      	movs	r0, #32
 80012f8:	f000 fabb 	bl	8001872 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40005400 	.word	0x40005400
 8001308:	40021000 	.word	0x40021000
 800130c:	40010c00 	.word	0x40010c00

08001310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1b      	ldr	r2, [pc, #108]	@ (8001398 <HAL_SPI_MspInit+0x88>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d12f      	bne.n	8001390 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001330:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a19      	ldr	r2, [pc, #100]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b17      	ldr	r3, [pc, #92]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a13      	ldr	r2, [pc, #76]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001360:	23a0      	movs	r3, #160	@ 0xa0
 8001362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <HAL_SPI_MspInit+0x90>)
 8001374:	f000 fb1e 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001378:	2340      	movs	r3, #64	@ 0x40
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <HAL_SPI_MspInit+0x90>)
 800138c:	f000 fb12 	bl	80019b4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40013000 	.word	0x40013000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1c      	ldr	r2, [pc, #112]	@ (8001430 <HAL_UART_MspInit+0x8c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d131      	bne.n	8001428 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <HAL_UART_MspInit+0x90>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001434 <HAL_UART_MspInit+0x90>)
 80013ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <HAL_UART_MspInit+0x90>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_UART_MspInit+0x90>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <HAL_UART_MspInit+0x90>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <HAL_UART_MspInit+0x90>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480b      	ldr	r0, [pc, #44]	@ (8001438 <HAL_UART_MspInit+0x94>)
 800140a:	f000 fad3 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800140e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <HAL_UART_MspInit+0x94>)
 8001424:	f000 fac6 	bl	80019b4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001428:	bf00      	nop
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40013800 	.word	0x40013800
 8001434:	40021000 	.word	0x40021000
 8001438:	40010800 	.word	0x40010800

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <NMI_Handler+0x4>

08001444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <MemManage_Handler+0x4>

08001454 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <UsageFault_Handler+0x4>

08001464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f8be 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <I2C1_EV_IRQHandler+0x10>)
 800149a:	f000 fd7f 	bl	8001f9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000c0 	.word	0x200000c0

080014a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <I2C1_ER_IRQHandler+0x10>)
 80014ae:	f000 fec8 	bl	8002242 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200000c0 	.word	0x200000c0

080014bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <_sbrk+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <_sbrk+0x60>)
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <_sbrk+0x64>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <_sbrk+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d207      	bcs.n	80014fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ec:	f007 f84e 	bl	800858c <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e009      	b.n	8001510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <_sbrk+0x64>)
 800150c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20005000 	.word	0x20005000
 800151c:	00000400 	.word	0x00000400
 8001520:	200001b4 	.word	0x200001b4
 8001524:	20000338 	.word	0x20000338

08001528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001534:	f7ff fff8 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	@ (8001568 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800153a:	490c      	ldr	r1, [pc, #48]	@ (800156c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800153c:	4a0c      	ldr	r2, [pc, #48]	@ (8001570 <LoopFillZerobss+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001550:	4c09      	ldr	r4, [pc, #36]	@ (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f007 f81b 	bl	8008598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001562:	f7ff fc45 	bl	8000df0 <main>
  bx lr
 8001566:	4770      	bx	lr
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001570:	0800928c 	.word	0x0800928c
  ldr r2, =_sbss
 8001574:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001578:	20000338 	.word	0x20000338

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <HAL_Init+0x28>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	@ (80015a8 <HAL_Init+0x28>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f947 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	200f      	movs	r0, #15
 8001598:	f000 f808 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fe38 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40022000 	.word	0x40022000

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f95f 	bl	800188e <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f927 	bl	800183a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000024 	.word	0x20000024
 8001604:	2000002c 	.word	0x2000002c
 8001608:	20000028 	.word	0x20000028

0800160c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <HAL_IncTick+0x1c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_IncTick+0x20>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a03      	ldr	r2, [pc, #12]	@ (800162c <HAL_IncTick+0x20>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	2000002c 	.word	0x2000002c
 800162c:	200001b8 	.word	0x200001b8

08001630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b02      	ldr	r3, [pc, #8]	@ (8001640 <HAL_GetTick+0x10>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	200001b8 	.word	0x200001b8

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff fff0 	bl	8001630 <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffe0 	bl	8001630 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000002c 	.word	0x2000002c

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4906      	ldr	r1, [pc, #24]	@ (8001724 <__NVIC_EnableIRQ+0x34>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	@ (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	@ (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	@ 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	@ 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff90 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff2d 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184c:	f7ff ff42 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7ff ff90 	bl	800177c <NVIC_EncodePriority>
 800185c:	4602      	mov	r2, r0
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5f 	bl	8001728 <__NVIC_SetPriority>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff35 	bl	80016f0 <__NVIC_EnableIRQ>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffa2 	bl	80017e0 <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d005      	beq.n	80018cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2204      	movs	r2, #4
 80018c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	e051      	b.n	8001970 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 020e 	bic.w	r2, r2, #14
 80018da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	@ (800197c <HAL_DMA_Abort_IT+0xd4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d029      	beq.n	800194a <HAL_DMA_Abort_IT+0xa2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a21      	ldr	r2, [pc, #132]	@ (8001980 <HAL_DMA_Abort_IT+0xd8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d022      	beq.n	8001946 <HAL_DMA_Abort_IT+0x9e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1f      	ldr	r2, [pc, #124]	@ (8001984 <HAL_DMA_Abort_IT+0xdc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01a      	beq.n	8001940 <HAL_DMA_Abort_IT+0x98>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1e      	ldr	r2, [pc, #120]	@ (8001988 <HAL_DMA_Abort_IT+0xe0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d012      	beq.n	800193a <HAL_DMA_Abort_IT+0x92>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <HAL_DMA_Abort_IT+0xe4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00a      	beq.n	8001934 <HAL_DMA_Abort_IT+0x8c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1b      	ldr	r2, [pc, #108]	@ (8001990 <HAL_DMA_Abort_IT+0xe8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d102      	bne.n	800192e <HAL_DMA_Abort_IT+0x86>
 8001928:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800192c:	e00e      	b.n	800194c <HAL_DMA_Abort_IT+0xa4>
 800192e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001932:	e00b      	b.n	800194c <HAL_DMA_Abort_IT+0xa4>
 8001934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001938:	e008      	b.n	800194c <HAL_DMA_Abort_IT+0xa4>
 800193a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193e:	e005      	b.n	800194c <HAL_DMA_Abort_IT+0xa4>
 8001940:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001944:	e002      	b.n	800194c <HAL_DMA_Abort_IT+0xa4>
 8001946:	2310      	movs	r3, #16
 8001948:	e000      	b.n	800194c <HAL_DMA_Abort_IT+0xa4>
 800194a:	2301      	movs	r3, #1
 800194c:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <HAL_DMA_Abort_IT+0xec>)
 800194e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
    } 
  }
  return status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40020008 	.word	0x40020008
 8001980:	4002001c 	.word	0x4002001c
 8001984:	40020030 	.word	0x40020030
 8001988:	40020044 	.word	0x40020044
 800198c:	40020058 	.word	0x40020058
 8001990:	4002006c 	.word	0x4002006c
 8001994:	40020000 	.word	0x40020000

08001998 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b08b      	sub	sp, #44	@ 0x2c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	e169      	b.n	8001c9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019c8:	2201      	movs	r2, #1
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8158 	bne.w	8001c96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a9a      	ldr	r2, [pc, #616]	@ (8001c54 <HAL_GPIO_Init+0x2a0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d05e      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 80019f0:	4a98      	ldr	r2, [pc, #608]	@ (8001c54 <HAL_GPIO_Init+0x2a0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d875      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 80019f6:	4a98      	ldr	r2, [pc, #608]	@ (8001c58 <HAL_GPIO_Init+0x2a4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d058      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 80019fc:	4a96      	ldr	r2, [pc, #600]	@ (8001c58 <HAL_GPIO_Init+0x2a4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d86f      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a02:	4a96      	ldr	r2, [pc, #600]	@ (8001c5c <HAL_GPIO_Init+0x2a8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d052      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 8001a08:	4a94      	ldr	r2, [pc, #592]	@ (8001c5c <HAL_GPIO_Init+0x2a8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d869      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a0e:	4a94      	ldr	r2, [pc, #592]	@ (8001c60 <HAL_GPIO_Init+0x2ac>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d04c      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 8001a14:	4a92      	ldr	r2, [pc, #584]	@ (8001c60 <HAL_GPIO_Init+0x2ac>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d863      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a1a:	4a92      	ldr	r2, [pc, #584]	@ (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d046      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
 8001a20:	4a90      	ldr	r2, [pc, #576]	@ (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d85d      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d82a      	bhi.n	8001a80 <HAL_GPIO_Init+0xcc>
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d859      	bhi.n	8001ae2 <HAL_GPIO_Init+0x12e>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <HAL_GPIO_Init+0x80>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001a89 	.word	0x08001a89
 8001a3c:	08001a9b 	.word	0x08001a9b
 8001a40:	08001add 	.word	0x08001add
 8001a44:	08001ae3 	.word	0x08001ae3
 8001a48:	08001ae3 	.word	0x08001ae3
 8001a4c:	08001ae3 	.word	0x08001ae3
 8001a50:	08001ae3 	.word	0x08001ae3
 8001a54:	08001ae3 	.word	0x08001ae3
 8001a58:	08001ae3 	.word	0x08001ae3
 8001a5c:	08001ae3 	.word	0x08001ae3
 8001a60:	08001ae3 	.word	0x08001ae3
 8001a64:	08001ae3 	.word	0x08001ae3
 8001a68:	08001ae3 	.word	0x08001ae3
 8001a6c:	08001ae3 	.word	0x08001ae3
 8001a70:	08001ae3 	.word	0x08001ae3
 8001a74:	08001ae3 	.word	0x08001ae3
 8001a78:	08001a91 	.word	0x08001a91
 8001a7c:	08001aa5 	.word	0x08001aa5
 8001a80:	4a79      	ldr	r2, [pc, #484]	@ (8001c68 <HAL_GPIO_Init+0x2b4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a86:	e02c      	b.n	8001ae2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	623b      	str	r3, [r7, #32]
          break;
 8001a8e:	e029      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	3304      	adds	r3, #4
 8001a96:	623b      	str	r3, [r7, #32]
          break;
 8001a98:	e024      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	623b      	str	r3, [r7, #32]
          break;
 8001aa2:	e01f      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e01a      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e013      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	611a      	str	r2, [r3, #16]
          break;
 8001ace:	e009      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	615a      	str	r2, [r3, #20]
          break;
 8001ada:	e003      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
          break;
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x130>
          break;
 8001ae2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2bff      	cmp	r3, #255	@ 0xff
 8001ae8:	d801      	bhi.n	8001aee <HAL_GPIO_Init+0x13a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	e001      	b.n	8001af2 <HAL_GPIO_Init+0x13e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3304      	adds	r3, #4
 8001af2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2bff      	cmp	r3, #255	@ 0xff
 8001af8:	d802      	bhi.n	8001b00 <HAL_GPIO_Init+0x14c>
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	e002      	b.n	8001b06 <HAL_GPIO_Init+0x152>
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	3b08      	subs	r3, #8
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	6a39      	ldr	r1, [r7, #32]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	431a      	orrs	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80b1 	beq.w	8001c96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b34:	4b4d      	ldr	r3, [pc, #308]	@ (8001c6c <HAL_GPIO_Init+0x2b8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	@ (8001c6c <HAL_GPIO_Init+0x2b8>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b4a      	ldr	r3, [pc, #296]	@ (8001c6c <HAL_GPIO_Init+0x2b8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b4c:	4a48      	ldr	r2, [pc, #288]	@ (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a40      	ldr	r2, [pc, #256]	@ (8001c74 <HAL_GPIO_Init+0x2c0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <HAL_GPIO_Init+0x1ec>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c78 <HAL_GPIO_Init+0x2c4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_GPIO_Init+0x1e8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3e      	ldr	r2, [pc, #248]	@ (8001c7c <HAL_GPIO_Init+0x2c8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x1e4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_GPIO_Init+0x1e0>
 8001b90:	2303      	movs	r3, #3
 8001b92:	e006      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e004      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_GPIO_Init+0x1ee>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba4:	f002 0203 	and.w	r2, r2, #3
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bb2:	492f      	ldr	r1, [pc, #188]	@ (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d006      	beq.n	8001bda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	492c      	ldr	r1, [pc, #176]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bda:	4b2a      	ldr	r3, [pc, #168]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4928      	ldr	r1, [pc, #160]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf4:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4922      	ldr	r1, [pc, #136]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	491e      	ldr	r1, [pc, #120]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4918      	ldr	r1, [pc, #96]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c2a:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4914      	ldr	r1, [pc, #80]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d021      	beq.n	8001c88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	490e      	ldr	r1, [pc, #56]	@ (8001c84 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e021      	b.n	8001c96 <HAL_GPIO_Init+0x2e2>
 8001c52:	bf00      	nop
 8001c54:	10320000 	.word	0x10320000
 8001c58:	10310000 	.word	0x10310000
 8001c5c:	10220000 	.word	0x10220000
 8001c60:	10210000 	.word	0x10210000
 8001c64:	10120000 	.word	0x10120000
 8001c68:	10110000 	.word	0x10110000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40010800 	.word	0x40010800
 8001c78:	40010c00 	.word	0x40010c00
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	40011400 	.word	0x40011400
 8001c84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	4909      	ldr	r1, [pc, #36]	@ (8001cb8 <HAL_GPIO_Init+0x304>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	3301      	adds	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f47f ae8e 	bne.w	80019c8 <HAL_GPIO_Init+0x14>
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	372c      	adds	r7, #44	@ 0x2c
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd8:	e003      	b.n	8001ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	611a      	str	r2, [r3, #16]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e12b      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff faae 	bl	8001274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2224      	movs	r2, #36	@ 0x24
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d50:	f002 f9c0 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a81      	ldr	r2, [pc, #516]	@ (8001f60 <HAL_I2C_Init+0x274>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d807      	bhi.n	8001d70 <HAL_I2C_Init+0x84>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a80      	ldr	r2, [pc, #512]	@ (8001f64 <HAL_I2C_Init+0x278>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	bf94      	ite	ls
 8001d68:	2301      	movls	r3, #1
 8001d6a:	2300      	movhi	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e006      	b.n	8001d7e <HAL_I2C_Init+0x92>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a7d      	ldr	r2, [pc, #500]	@ (8001f68 <HAL_I2C_Init+0x27c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf94      	ite	ls
 8001d78:	2301      	movls	r3, #1
 8001d7a:	2300      	movhi	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0e7      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a78      	ldr	r2, [pc, #480]	@ (8001f6c <HAL_I2C_Init+0x280>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9b      	lsrs	r3, r3, #18
 8001d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	@ (8001f60 <HAL_I2C_Init+0x274>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d802      	bhi.n	8001dc0 <HAL_I2C_Init+0xd4>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	e009      	b.n	8001dd4 <HAL_I2C_Init+0xe8>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	4a69      	ldr	r2, [pc, #420]	@ (8001f70 <HAL_I2C_Init+0x284>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001de6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	495c      	ldr	r1, [pc, #368]	@ (8001f60 <HAL_I2C_Init+0x274>)
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d819      	bhi.n	8001e28 <HAL_I2C_Init+0x13c>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e59      	subs	r1, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e08:	400b      	ands	r3, r1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_I2C_Init+0x138>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e59      	subs	r1, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e22:	e051      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e04f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d111      	bne.n	8001e54 <HAL_I2C_Init+0x168>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e58      	subs	r0, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	440b      	add	r3, r1
 8001e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e012      	b.n	8001e7a <HAL_I2C_Init+0x18e>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	0099      	lsls	r1, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Init+0x196>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e022      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10e      	bne.n	8001ea8 <HAL_I2C_Init+0x1bc>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e58      	subs	r0, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	440b      	add	r3, r1
 8001e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ea6:	e00f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6809      	ldr	r1, [r1, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ef6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6911      	ldr	r1, [r2, #16]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	000186a0 	.word	0x000186a0
 8001f64:	001e847f 	.word	0x001e847f
 8001f68:	003d08ff 	.word	0x003d08ff
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	10624dd3 	.word	0x10624dd3

08001f74 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f86:	2b80      	cmp	r3, #128	@ 0x80
 8001f88:	d103      	bne.n	8001f92 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fbc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fc4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d003      	beq.n	8001fd4 <HAL_I2C_EV_IRQHandler+0x38>
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b40      	cmp	r3, #64	@ 0x40
 8001fd0:	f040 80b1 	bne.w	8002136 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10d      	bne.n	800200a <HAL_I2C_EV_IRQHandler+0x6e>
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001ff4:	d003      	beq.n	8001ffe <HAL_I2C_EV_IRQHandler+0x62>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001ffc:	d101      	bne.n	8002002 <HAL_I2C_EV_IRQHandler+0x66>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_I2C_EV_IRQHandler+0x68>
 8002002:	2300      	movs	r3, #0
 8002004:	2b01      	cmp	r3, #1
 8002006:	f000 8114 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <HAL_I2C_EV_IRQHandler+0x90>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800201a:	2b00      	cmp	r3, #0
 800201c:	d006      	beq.n	800202c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f001 fc74 	bl	800390c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fd74 	bl	8002b12 <I2C_Master_SB>
 800202a:	e083      	b.n	8002134 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_I2C_EV_IRQHandler+0xac>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fdeb 	bl	8002c1c <I2C_Master_ADD10>
 8002046:	e075      	b.n	8002134 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_I2C_EV_IRQHandler+0xc8>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fe06 	bl	8002c6e <I2C_Master_ADDR>
 8002062:	e067      	b.n	8002134 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d036      	beq.n	80020dc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800207c:	f000 80db 	beq.w	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0x10a>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0x10a>
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d103      	bne.n	80020a6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f9d4 	bl	800244c <I2C_MasterTransmit_TXE>
 80020a4:	e046      	b.n	8002134 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80c2 	beq.w	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80bc 	beq.w	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80020be:	7bbb      	ldrb	r3, [r7, #14]
 80020c0:	2b21      	cmp	r3, #33	@ 0x21
 80020c2:	d103      	bne.n	80020cc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fa5d 	bl	8002584 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ca:	e0b4      	b.n	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2b40      	cmp	r3, #64	@ 0x40
 80020d0:	f040 80b1 	bne.w	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 facb 	bl	8002670 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020da:	e0ac      	b.n	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ea:	f000 80a4 	beq.w	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <HAL_I2C_EV_IRQHandler+0x178>
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <HAL_I2C_EV_IRQHandler+0x178>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d103      	bne.n	8002114 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fb47 	bl	80027a0 <I2C_MasterReceive_RXNE>
 8002112:	e00f      	b.n	8002134 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 808b 	beq.w	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8085 	beq.w	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fbff 	bl	8002930 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002132:	e080      	b.n	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
 8002134:	e07f      	b.n	8002236 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e007      	b.n	8002158 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d011      	beq.n	8002186 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800217c:	69b9      	ldr	r1, [r7, #24]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 ffcc 	bl	800311c <I2C_Slave_ADDR>
 8002184:	e05a      	b.n	800223c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_I2C_EV_IRQHandler+0x206>
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f001 f806 	bl	80031ac <I2C_Slave_STOPF>
 80021a0:	e04c      	b.n	800223c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	2b21      	cmp	r3, #33	@ 0x21
 80021a6:	d002      	beq.n	80021ae <HAL_I2C_EV_IRQHandler+0x212>
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	2b29      	cmp	r3, #41	@ 0x29
 80021ac:	d120      	bne.n	80021f0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00d      	beq.n	80021d4 <HAL_I2C_EV_IRQHandler+0x238>
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_I2C_EV_IRQHandler+0x238>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d103      	bne.n	80021d4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fee9 	bl	8002fa4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021d2:	e032      	b.n	800223a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d02d      	beq.n	800223a <HAL_I2C_EV_IRQHandler+0x29e>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d028      	beq.n	800223a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 ff18 	bl	800301e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021ee:	e024      	b.n	800223a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <HAL_I2C_EV_IRQHandler+0x27a>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_I2C_EV_IRQHandler+0x27a>
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 ff25 	bl	800305e <I2C_SlaveReceive_RXNE>
 8002214:	e012      	b.n	800223c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <HAL_I2C_EV_IRQHandler+0x2a0>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 ff55 	bl	80030da <I2C_SlaveReceive_BTF>
 8002230:	e004      	b.n	800223c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002232:	bf00      	nop
 8002234:	e002      	b.n	800223c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002236:	bf00      	nop
 8002238:	e000      	b.n	800223c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800223a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b08a      	sub	sp, #40	@ 0x28
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002264:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <HAL_I2C_ER_IRQHandler+0x5a>
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800228a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800229a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00d      	beq.n	80022c2 <HAL_I2C_ER_IRQHandler+0x80>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80022c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d03e      	beq.n	800234a <HAL_I2C_ER_IRQHandler+0x108>
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d039      	beq.n	800234a <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80022d6:	7efb      	ldrb	r3, [r7, #27]
 80022d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80022f0:	7ebb      	ldrb	r3, [r7, #26]
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d112      	bne.n	800231c <HAL_I2C_ER_IRQHandler+0xda>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10f      	bne.n	800231c <HAL_I2C_ER_IRQHandler+0xda>
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	2b21      	cmp	r3, #33	@ 0x21
 8002300:	d008      	beq.n	8002314 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b29      	cmp	r3, #41	@ 0x29
 8002306:	d005      	beq.n	8002314 <HAL_I2C_ER_IRQHandler+0xd2>
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	2b28      	cmp	r3, #40	@ 0x28
 800230c:	d106      	bne.n	800231c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b21      	cmp	r3, #33	@ 0x21
 8002312:	d103      	bne.n	800231c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f001 f879 	bl	800340c <I2C_Slave_AF>
 800231a:	e016      	b.n	800234a <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002324:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800232e:	7efb      	ldrb	r3, [r7, #27]
 8002330:	2b10      	cmp	r3, #16
 8002332:	d002      	beq.n	800233a <HAL_I2C_ER_IRQHandler+0xf8>
 8002334:	7efb      	ldrb	r3, [r7, #27]
 8002336:	2b40      	cmp	r3, #64	@ 0x40
 8002338:	d107      	bne.n	800234a <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002348:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_I2C_ER_IRQHandler+0x12e>
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	f043 0308 	orr.w	r3, r3, #8
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800236e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f001 f8b6 	bl	80034f4 <I2C_ITError>
  }
}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	@ 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
 80023e4:	4613      	mov	r3, r2
 80023e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002462:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002468:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d150      	bne.n	8002514 <I2C_MasterTransmit_TXE+0xc8>
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b21      	cmp	r3, #33	@ 0x21
 8002476:	d14d      	bne.n	8002514 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b08      	cmp	r3, #8
 800247c:	d01d      	beq.n	80024ba <I2C_MasterTransmit_TXE+0x6e>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b20      	cmp	r3, #32
 8002482:	d01a      	beq.n	80024ba <I2C_MasterTransmit_TXE+0x6e>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800248a:	d016      	beq.n	80024ba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800249a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2211      	movs	r2, #17
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff6c 	bl	8002390 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024b8:	e060      	b.n	800257c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024c8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d107      	bne.n	8002504 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff81 	bl	8002404 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002502:	e03b      	b.n	800257c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff3f 	bl	8002390 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002512:	e033      	b.n	800257c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b21      	cmp	r3, #33	@ 0x21
 8002518:	d005      	beq.n	8002526 <I2C_MasterTransmit_TXE+0xda>
 800251a:	7bbb      	ldrb	r3, [r7, #14]
 800251c:	2b40      	cmp	r3, #64	@ 0x40
 800251e:	d12d      	bne.n	800257c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b22      	cmp	r3, #34	@ 0x22
 8002524:	d12a      	bne.n	800257c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d108      	bne.n	8002542 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800253e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002540:	e01c      	b.n	800257c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b40      	cmp	r3, #64	@ 0x40
 800254c:	d103      	bne.n	8002556 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f88e 	bl	8002670 <I2C_MemoryTransmit_TXE_BTF>
}
 8002554:	e012      	b.n	800257c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800257a:	e7ff      	b.n	800257c <I2C_MasterTransmit_TXE+0x130>
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b21      	cmp	r3, #33	@ 0x21
 800259c:	d164      	bne.n	8002668 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d012      	beq.n	80025ce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025cc:	e04c      	b.n	8002668 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d01d      	beq.n	8002610 <I2C_MasterTransmit_BTF+0x8c>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d01a      	beq.n	8002610 <I2C_MasterTransmit_BTF+0x8c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025e0:	d016      	beq.n	8002610 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025f0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2211      	movs	r2, #17
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fec1 	bl	8002390 <HAL_I2C_MasterTxCpltCallback>
}
 800260e:	e02b      	b.n	8002668 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800261e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b40      	cmp	r3, #64	@ 0x40
 8002648:	d107      	bne.n	800265a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fed6 	bl	8002404 <HAL_I2C_MemTxCpltCallback>
}
 8002658:	e006      	b.n	8002668 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fe94 	bl	8002390 <HAL_I2C_MasterTxCpltCallback>
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800267e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11d      	bne.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10b      	bne.n	80026a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002694:	b2da      	uxtb	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80026a6:	e077      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	121b      	asrs	r3, r3, #8
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80026c2:	e069      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d10b      	bne.n	80026e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80026e2:	e059      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d152      	bne.n	8002792 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b22      	cmp	r3, #34	@ 0x22
 80026f0:	d10d      	bne.n	800270e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002700:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800270c:	e044      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d015      	beq.n	8002744 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b21      	cmp	r3, #33	@ 0x21
 800271c:	d112      	bne.n	8002744 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002742:	e029      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d124      	bne.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b21      	cmp	r3, #33	@ 0x21
 8002752:	d121      	bne.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002762:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002772:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fe3a 	bl	8002404 <HAL_I2C_MemTxCpltCallback>
}
 8002790:	e002      	b.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fbee 	bl	8001f74 <I2C_Flush_DR>
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b22      	cmp	r3, #34	@ 0x22
 80027b2:	f040 80b9 	bne.w	8002928 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d921      	bls.n	800280e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	f040 8096 	bne.w	8002928 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800280c:	e08c      	b.n	8002928 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	2b02      	cmp	r3, #2
 8002814:	d07f      	beq.n	8002916 <I2C_MasterReceive_RXNE+0x176>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d002      	beq.n	8002822 <I2C_MasterReceive_RXNE+0x82>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d179      	bne.n	8002916 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f001 f840 	bl	80038a8 <I2C_WaitOnSTOPRequestThroughIT>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d14c      	bne.n	80028c8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800283c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800284c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b40      	cmp	r3, #64	@ 0x40
 8002886:	d10a      	bne.n	800289e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fdbd 	bl	8002416 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800289c:	e044      	b.n	8002928 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d002      	beq.n	80028b2 <I2C_MasterReceive_RXNE+0x112>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d103      	bne.n	80028ba <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b8:	e002      	b.n	80028c0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2212      	movs	r2, #18
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff fd6e 	bl	80023a2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028c6:	e02f      	b.n	8002928 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fd8a 	bl	8002428 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002914:	e008      	b.n	8002928 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002924:	605a      	str	r2, [r3, #4]
}
 8002926:	e7ff      	b.n	8002928 <I2C_MasterReceive_RXNE+0x188>
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b04      	cmp	r3, #4
 8002946:	d11b      	bne.n	8002980 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002956:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800297e:	e0c4      	b.n	8002b0a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b03      	cmp	r3, #3
 8002988:	d129      	bne.n	80029de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002998:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d00a      	beq.n	80029b6 <I2C_MasterReceive_BTF+0x86>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d007      	beq.n	80029b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80029dc:	e095      	b.n	8002b0a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d17d      	bne.n	8002ae4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d002      	beq.n	80029f4 <I2C_MasterReceive_BTF+0xc4>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d108      	bne.n	8002a06 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e016      	b.n	8002a34 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d002      	beq.n	8002a12 <I2C_MasterReceive_BTF+0xe2>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d108      	bne.n	8002a24 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e007      	b.n	8002a34 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a8e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b40      	cmp	r3, #64	@ 0x40
 8002aa2:	d10a      	bne.n	8002aba <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fcaf 	bl	8002416 <HAL_I2C_MemRxCpltCallback>
}
 8002ab8:	e027      	b.n	8002b0a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d002      	beq.n	8002ace <I2C_MasterReceive_BTF+0x19e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d103      	bne.n	8002ad6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ad4:	e002      	b.n	8002adc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2212      	movs	r2, #18
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fc60 	bl	80023a2 <HAL_I2C_MasterRxCpltCallback>
}
 8002ae2:	e012      	b.n	8002b0a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b40      	cmp	r3, #64	@ 0x40
 8002b24:	d117      	bne.n	8002b56 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b3e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b40:	e067      	b.n	8002c12 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]
}
 8002b54:	e05d      	b.n	8002c12 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b5e:	d133      	bne.n	8002bc8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b21      	cmp	r3, #33	@ 0x21
 8002b6a:	d109      	bne.n	8002b80 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	e008      	b.n	8002b92 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <I2C_Master_SB+0x92>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d108      	bne.n	8002bb6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d032      	beq.n	8002c12 <I2C_Master_SB+0x100>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d02d      	beq.n	8002c12 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bc4:	605a      	str	r2, [r3, #4]
}
 8002bc6:	e024      	b.n	8002c12 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10e      	bne.n	8002bee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	11db      	asrs	r3, r3, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f063 030f 	orn	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]
}
 8002bec:	e011      	b.n	8002c12 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10d      	bne.n	8002c12 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	11db      	asrs	r3, r3, #7
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f003 0306 	and.w	r3, r3, #6
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f063 030e 	orn	r3, r3, #14
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	611a      	str	r2, [r3, #16]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <I2C_Master_ADD10+0x26>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00c      	beq.n	8002c64 <I2C_Master_ADD10+0x48>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c62:	605a      	str	r2, [r3, #4]
  }
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b091      	sub	sp, #68	@ 0x44
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b22      	cmp	r3, #34	@ 0x22
 8002c96:	f040 8174 	bne.w	8002f82 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <I2C_Master_ADDR+0x54>
 8002ca2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ca6:	2b40      	cmp	r3, #64	@ 0x40
 8002ca8:	d10b      	bne.n	8002cc2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002caa:	2300      	movs	r3, #0
 8002cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	e16b      	b.n	8002f9a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11d      	bne.n	8002d06 <I2C_Master_ADDR+0x98>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002cd2:	d118      	bne.n	8002d06 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cf8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d04:	e149      	b.n	8002f9a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d113      	bne.n	8002d38 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d10:	2300      	movs	r3, #0
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e120      	b.n	8002f7a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	f040 808a 	bne.w	8002e58 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d4a:	d137      	bne.n	8002dbc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d5a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d6a:	d113      	bne.n	8002d94 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	e0f2      	b.n	8002f7a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e0de      	b.n	8002f7a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d02e      	beq.n	8002e20 <I2C_Master_ADDR+0x1b2>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d02b      	beq.n	8002e20 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dca:	2b12      	cmp	r3, #18
 8002dcc:	d102      	bne.n	8002dd4 <I2C_Master_ADDR+0x166>
 8002dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d125      	bne.n	8002e20 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00e      	beq.n	8002df8 <I2C_Master_ADDR+0x18a>
 8002dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d00b      	beq.n	8002df8 <I2C_Master_ADDR+0x18a>
 8002de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d008      	beq.n	8002df8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e007      	b.n	8002e08 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e06:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	e0ac      	b.n	8002f7a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e090      	b.n	8002f7a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d158      	bne.n	8002f14 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d021      	beq.n	8002eac <I2C_Master_ADDR+0x23e>
 8002e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d01e      	beq.n	8002eac <I2C_Master_ADDR+0x23e>
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d01b      	beq.n	8002eac <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e82:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e012      	b.n	8002ed2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002eba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ee0:	d14b      	bne.n	8002f7a <I2C_Master_ADDR+0x30c>
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ee8:	d00b      	beq.n	8002f02 <I2C_Master_ADDR+0x294>
 8002eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d008      	beq.n	8002f02 <I2C_Master_ADDR+0x294>
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d005      	beq.n	8002f02 <I2C_Master_ADDR+0x294>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d002      	beq.n	8002f02 <I2C_Master_ADDR+0x294>
 8002efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d13b      	bne.n	8002f7a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e032      	b.n	8002f7a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f22:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f32:	d117      	bne.n	8002f64 <I2C_Master_ADDR+0x2f6>
 8002f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f3a:	d00b      	beq.n	8002f54 <I2C_Master_ADDR+0x2e6>
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d008      	beq.n	8002f54 <I2C_Master_ADDR+0x2e6>
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d005      	beq.n	8002f54 <I2C_Master_ADDR+0x2e6>
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d002      	beq.n	8002f54 <I2C_Master_ADDR+0x2e6>
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d107      	bne.n	8002f64 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f62:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f80:	e00b      	b.n	8002f9a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
}
 8002f98:	e7ff      	b.n	8002f9a <I2C_Master_ADDR+0x32c>
 8002f9a:	bf00      	nop
 8002f9c:	3744      	adds	r7, #68	@ 0x44
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d02b      	beq.n	8003016 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d114      	bne.n	8003016 <I2C_SlaveTransmit_TXE+0x72>
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b29      	cmp	r3, #41	@ 0x29
 8002ff0:	d111      	bne.n	8003016 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003000:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2221      	movs	r2, #33	@ 0x21
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2228      	movs	r2, #40	@ 0x28
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff f9cf 	bl	80023b4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d011      	beq.n	8003054 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800306c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02c      	beq.n	80030d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d114      	bne.n	80030d2 <I2C_SlaveReceive_RXNE+0x74>
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80030ac:	d111      	bne.n	80030d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2222      	movs	r2, #34	@ 0x22
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2228      	movs	r2, #40	@ 0x28
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff f97a 	bl	80023c6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d012      	beq.n	8003112 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003136:	2b28      	cmp	r3, #40	@ 0x28
 8003138:	d125      	bne.n	8003186 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003148:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	81bb      	strh	r3, [r7, #12]
 8003168:	e002      	b.n	8003170 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003178:	89ba      	ldrh	r2, [r7, #12]
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff f92a 	bl	80023d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003184:	e00e      	b.n	80031a4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003208:	d172      	bne.n	80032f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b22      	cmp	r3, #34	@ 0x22
 800320e:	d002      	beq.n	8003216 <I2C_Slave_STOPF+0x6a>
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b2a      	cmp	r3, #42	@ 0x2a
 8003214:	d135      	bne.n	8003282 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	f043 0204 	orr.w	r2, r3, #4
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003248:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fba2 	bl	8001998 <HAL_DMA_GetState>
 8003254:	4603      	mov	r3, r0
 8003256:	2b01      	cmp	r3, #1
 8003258:	d049      	beq.n	80032ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325e:	4a69      	ldr	r2, [pc, #420]	@ (8003404 <I2C_Slave_STOPF+0x258>)
 8003260:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fb1e 	bl	80018a8 <HAL_DMA_Abort_IT>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d03d      	beq.n	80032ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800327c:	4610      	mov	r0, r2
 800327e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003280:	e035      	b.n	80032ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f043 0204 	orr.w	r2, r3, #4
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fb6c 	bl	8001998 <HAL_DMA_GetState>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d014      	beq.n	80032f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ca:	4a4e      	ldr	r2, [pc, #312]	@ (8003404 <I2C_Slave_STOPF+0x258>)
 80032cc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fae8 	bl	80018a8 <HAL_DMA_Abort_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032e8:	4610      	mov	r0, r2
 80032ea:	4798      	blx	r3
 80032ec:	e000      	b.n	80032f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d03e      	beq.n	8003378 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b04      	cmp	r3, #4
 8003306:	d112      	bne.n	800332e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d112      	bne.n	8003362 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	f043 0204 	orr.w	r2, r3, #4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f8b7 	bl	80034f4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003386:	e039      	b.n	80033fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b2a      	cmp	r3, #42	@ 0x2a
 800338c:	d109      	bne.n	80033a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2228      	movs	r2, #40	@ 0x28
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff f812 	bl	80023c6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b28      	cmp	r3, #40	@ 0x28
 80033ac:	d111      	bne.n	80033d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a15      	ldr	r2, [pc, #84]	@ (8003408 <I2C_Slave_STOPF+0x25c>)
 80033b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff f811 	bl	80023f2 <HAL_I2C_ListenCpltCallback>
}
 80033d0:	e014      	b.n	80033fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	2b22      	cmp	r3, #34	@ 0x22
 80033d8:	d002      	beq.n	80033e0 <I2C_Slave_STOPF+0x234>
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b22      	cmp	r3, #34	@ 0x22
 80033de:	d10d      	bne.n	80033fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe ffe5 	bl	80023c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	08003759 	.word	0x08003759
 8003408:	ffff0000 	.word	0xffff0000

0800340c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d002      	beq.n	800342e <I2C_Slave_AF+0x22>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b20      	cmp	r3, #32
 800342c:	d129      	bne.n	8003482 <I2C_Slave_AF+0x76>
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b28      	cmp	r3, #40	@ 0x28
 8003432:	d126      	bne.n	8003482 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a2e      	ldr	r2, [pc, #184]	@ (80034f0 <I2C_Slave_AF+0xe4>)
 8003438:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003448:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003452:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003462:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fe ffb9 	bl	80023f2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003480:	e031      	b.n	80034e6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b21      	cmp	r3, #33	@ 0x21
 8003486:	d129      	bne.n	80034dc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <I2C_Slave_AF+0xe4>)
 800348c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2221      	movs	r2, #33	@ 0x21
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034b2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034bc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034cc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe fd50 	bl	8001f74 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fe ff6d 	bl	80023b4 <HAL_I2C_SlaveTxCpltCallback>
}
 80034da:	e004      	b.n	80034e6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034e4:	615a      	str	r2, [r3, #20]
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	ffff0000 	.word	0xffff0000

080034f4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003502:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800350a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800350c:	7bbb      	ldrb	r3, [r7, #14]
 800350e:	2b10      	cmp	r3, #16
 8003510:	d002      	beq.n	8003518 <I2C_ITError+0x24>
 8003512:	7bbb      	ldrb	r3, [r7, #14]
 8003514:	2b40      	cmp	r3, #64	@ 0x40
 8003516:	d10a      	bne.n	800352e <I2C_ITError+0x3a>
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b22      	cmp	r3, #34	@ 0x22
 800351c:	d107      	bne.n	800352e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800352c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003534:	2b28      	cmp	r3, #40	@ 0x28
 8003536:	d107      	bne.n	8003548 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2228      	movs	r2, #40	@ 0x28
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003546:	e015      	b.n	8003574 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003556:	d00a      	beq.n	800356e <I2C_ITError+0x7a>
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b60      	cmp	r3, #96	@ 0x60
 800355c:	d007      	beq.n	800356e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800357e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003582:	d162      	bne.n	800364a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003592:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003598:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d020      	beq.n	80035e4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003750 <I2C_ITError+0x25c>)
 80035a8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe f97a 	bl	80018a8 <HAL_DMA_Abort_IT>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8089 	beq.w	80036ce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035de:	4610      	mov	r0, r2
 80035e0:	4798      	blx	r3
 80035e2:	e074      	b.n	80036ce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e8:	4a59      	ldr	r2, [pc, #356]	@ (8003750 <I2C_ITError+0x25c>)
 80035ea:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe f959 	bl	80018a8 <HAL_DMA_Abort_IT>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d068      	beq.n	80036ce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003606:	2b40      	cmp	r3, #64	@ 0x40
 8003608:	d10b      	bne.n	8003622 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003644:	4610      	mov	r0, r2
 8003646:	4798      	blx	r3
 8003648:	e041      	b.n	80036ce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b60      	cmp	r3, #96	@ 0x60
 8003654:	d125      	bne.n	80036a2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d10b      	bne.n	800368a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fecd 	bl	800243a <HAL_I2C_AbortCpltCallback>
 80036a0:	e015      	b.n	80036ce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b40      	cmp	r3, #64	@ 0x40
 80036ae:	d10b      	bne.n	80036c8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fe fead 	bl	8002428 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800370a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003712:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d113      	bne.n	8003748 <I2C_ITError+0x254>
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b28      	cmp	r3, #40	@ 0x28
 8003724:	d110      	bne.n	8003748 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <I2C_ITError+0x260>)
 800372a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fe fe55 	bl	80023f2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	08003759 	.word	0x08003759
 8003754:	ffff0000 	.word	0xffff0000

08003758 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003770:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003772:	4b4b      	ldr	r3, [pc, #300]	@ (80038a0 <I2C_DMAAbort+0x148>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	08db      	lsrs	r3, r3, #3
 8003778:	4a4a      	ldr	r2, [pc, #296]	@ (80038a4 <I2C_DMAAbort+0x14c>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0a1a      	lsrs	r2, r3, #8
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00da      	lsls	r2, r3, #3
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800379e:	e00a      	b.n	80037b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037b4:	d0ea      	beq.n	800378c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c2:	2200      	movs	r2, #0
 80037c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d2:	2200      	movs	r2, #0
 80037d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f8:	2200      	movs	r2, #0
 80037fa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	2200      	movs	r2, #0
 800380a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b60      	cmp	r3, #96	@ 0x60
 8003826:	d10e      	bne.n	8003846 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7fe fdfb 	bl	800243a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003844:	e027      	b.n	8003896 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800384c:	2b28      	cmp	r3, #40	@ 0x28
 800384e:	d117      	bne.n	8003880 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800386e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2228      	movs	r2, #40	@ 0x28
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800387e:	e007      	b.n	8003890 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003890:	6978      	ldr	r0, [r7, #20]
 8003892:	f7fe fdc9 	bl	8002428 <HAL_I2C_ErrorCallback>
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000024 	.word	0x20000024
 80038a4:	14f8b589 	.word	0x14f8b589

080038a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038b4:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	08db      	lsrs	r3, r3, #3
 80038ba:	4a13      	ldr	r2, [pc, #76]	@ (8003908 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	0a1a      	lsrs	r2, r3, #8
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e008      	b.n	80038f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038f4:	d0e9      	beq.n	80038ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000024 	.word	0x20000024
 8003908:	14f8b589 	.word	0x14f8b589

0800390c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800391c:	d103      	bne.n	8003926 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003924:	e007      	b.n	8003936 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800392e:	d102      	bne.n	8003936 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2208      	movs	r2, #8
 8003934:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e272      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8087 	beq.w	8003a6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003960:	4b92      	ldr	r3, [pc, #584]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b04      	cmp	r3, #4
 800396a:	d00c      	beq.n	8003986 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800396c:	4b8f      	ldr	r3, [pc, #572]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b08      	cmp	r3, #8
 8003976:	d112      	bne.n	800399e <HAL_RCC_OscConfig+0x5e>
 8003978:	4b8c      	ldr	r3, [pc, #560]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003984:	d10b      	bne.n	800399e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003986:	4b89      	ldr	r3, [pc, #548]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d06c      	beq.n	8003a6c <HAL_RCC_OscConfig+0x12c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d168      	bne.n	8003a6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e24c      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a6:	d106      	bne.n	80039b6 <HAL_RCC_OscConfig+0x76>
 80039a8:	4b80      	ldr	r3, [pc, #512]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a7f      	ldr	r2, [pc, #508]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	e02e      	b.n	8003a14 <HAL_RCC_OscConfig+0xd4>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x98>
 80039be:	4b7b      	ldr	r3, [pc, #492]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7a      	ldr	r2, [pc, #488]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b78      	ldr	r3, [pc, #480]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a77      	ldr	r2, [pc, #476]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e01d      	b.n	8003a14 <HAL_RCC_OscConfig+0xd4>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0xbc>
 80039e2:	4b72      	ldr	r3, [pc, #456]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a71      	ldr	r2, [pc, #452]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b6f      	ldr	r3, [pc, #444]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6e      	ldr	r2, [pc, #440]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0xd4>
 80039fc:	4b6b      	ldr	r3, [pc, #428]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a6a      	ldr	r2, [pc, #424]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b68      	ldr	r3, [pc, #416]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a67      	ldr	r2, [pc, #412]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fe08 	bl	8001630 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fd fe04 	bl	8001630 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e200      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b5d      	ldr	r3, [pc, #372]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0xe4>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fd fdf4 	bl	8001630 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fd fdf0 	bl	8001630 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	@ 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e1ec      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	4b53      	ldr	r3, [pc, #332]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x10c>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d063      	beq.n	8003b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a86:	4b49      	ldr	r3, [pc, #292]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11c      	bne.n	8003acc <HAL_RCC_OscConfig+0x18c>
 8003a92:	4b46      	ldr	r3, [pc, #280]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d116      	bne.n	8003acc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9e:	4b43      	ldr	r3, [pc, #268]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x176>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1c0      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4939      	ldr	r1, [pc, #228]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	e03a      	b.n	8003b42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad4:	4b36      	ldr	r3, [pc, #216]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fd fda9 	bl	8001630 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae2:	f7fd fda5 	bl	8001630 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e1a1      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af4:	4b2d      	ldr	r3, [pc, #180]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b00:	4b2a      	ldr	r3, [pc, #168]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4927      	ldr	r1, [pc, #156]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]
 8003b14:	e015      	b.n	8003b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b16:	4b26      	ldr	r3, [pc, #152]	@ (8003bb0 <HAL_RCC_OscConfig+0x270>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fd88 	bl	8001630 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b24:	f7fd fd84 	bl	8001630 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e180      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d03a      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d019      	beq.n	8003b8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b56:	4b17      	ldr	r3, [pc, #92]	@ (8003bb4 <HAL_RCC_OscConfig+0x274>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5c:	f7fd fd68 	bl	8001630 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b64:	f7fd fd64 	bl	8001630 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e160      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <HAL_RCC_OscConfig+0x26c>)
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b82:	2001      	movs	r0, #1
 8003b84:	f000 face 	bl	8004124 <RCC_Delay>
 8003b88:	e01c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb4 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7fd fd4e 	bl	8001630 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b96:	e00f      	b.n	8003bb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fd fd4a 	bl	8001630 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d908      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e146      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	42420000 	.word	0x42420000
 8003bb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b92      	ldr	r3, [pc, #584]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e9      	bne.n	8003b98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a6 	beq.w	8003d1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b8b      	ldr	r3, [pc, #556]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	4b88      	ldr	r3, [pc, #544]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4a87      	ldr	r2, [pc, #540]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	61d3      	str	r3, [r2, #28]
 8003bee:	4b85      	ldr	r3, [pc, #532]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b82      	ldr	r3, [pc, #520]	@ (8003e08 <HAL_RCC_OscConfig+0x4c8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d118      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e08 <HAL_RCC_OscConfig+0x4c8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e08 <HAL_RCC_OscConfig+0x4c8>)
 8003c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c16:	f7fd fd0b 	bl	8001630 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1e:	f7fd fd07 	bl	8001630 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b64      	cmp	r3, #100	@ 0x64
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e103      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b75      	ldr	r3, [pc, #468]	@ (8003e08 <HAL_RCC_OscConfig+0x4c8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x312>
 8003c44:	4b6f      	ldr	r3, [pc, #444]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a6e      	ldr	r2, [pc, #440]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6213      	str	r3, [r2, #32]
 8003c50:	e02d      	b.n	8003cae <HAL_RCC_OscConfig+0x36e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x334>
 8003c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4a69      	ldr	r2, [pc, #420]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6213      	str	r3, [r2, #32]
 8003c66:	4b67      	ldr	r3, [pc, #412]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4a66      	ldr	r2, [pc, #408]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	f023 0304 	bic.w	r3, r3, #4
 8003c70:	6213      	str	r3, [r2, #32]
 8003c72:	e01c      	b.n	8003cae <HAL_RCC_OscConfig+0x36e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d10c      	bne.n	8003c96 <HAL_RCC_OscConfig+0x356>
 8003c7c:	4b61      	ldr	r3, [pc, #388]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	4a60      	ldr	r2, [pc, #384]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	f043 0304 	orr.w	r3, r3, #4
 8003c86:	6213      	str	r3, [r2, #32]
 8003c88:	4b5e      	ldr	r3, [pc, #376]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6213      	str	r3, [r2, #32]
 8003c94:	e00b      	b.n	8003cae <HAL_RCC_OscConfig+0x36e>
 8003c96:	4b5b      	ldr	r3, [pc, #364]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4a5a      	ldr	r2, [pc, #360]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	6213      	str	r3, [r2, #32]
 8003ca2:	4b58      	ldr	r3, [pc, #352]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a57      	ldr	r2, [pc, #348]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	f023 0304 	bic.w	r3, r3, #4
 8003cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d015      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fcbb 	bl	8001630 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fd fcb7 	bl	8001630 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e0b1      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ee      	beq.n	8003cbe <HAL_RCC_OscConfig+0x37e>
 8003ce0:	e014      	b.n	8003d0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce2:	f7fd fca5 	bl	8001630 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fd fca1 	bl	8001630 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e09b      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d00:	4b40      	ldr	r3, [pc, #256]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ee      	bne.n	8003cea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d12:	4b3c      	ldr	r3, [pc, #240]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4a3b      	ldr	r2, [pc, #236]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8087 	beq.w	8003e36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d28:	4b36      	ldr	r3, [pc, #216]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d061      	beq.n	8003df8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d146      	bne.n	8003dca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3c:	4b33      	ldr	r3, [pc, #204]	@ (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fd fc75 	bl	8001630 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fd fc71 	bl	8001630 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e06d      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5c:	4b29      	ldr	r3, [pc, #164]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d70:	d108      	bne.n	8003d84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d72:	4b24      	ldr	r3, [pc, #144]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	4921      	ldr	r1, [pc, #132]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d84:	4b1f      	ldr	r3, [pc, #124]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a19      	ldr	r1, [r3, #32]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	430b      	orrs	r3, r1
 8003d96:	491b      	ldr	r1, [pc, #108]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd fc45 	bl	8001630 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fd fc41 	bl	8001630 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e03d      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dbc:	4b11      	ldr	r3, [pc, #68]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x46a>
 8003dc8:	e035      	b.n	8003e36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fc2e 	bl	8001630 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fd fc2a 	bl	8001630 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e026      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x498>
 8003df6:	e01e      	b.n	8003e36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e019      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e10:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <HAL_RCC_OscConfig+0x500>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0d0      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b6a      	ldr	r3, [pc, #424]	@ (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d910      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b67      	ldr	r3, [pc, #412]	@ (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 0207 	bic.w	r2, r3, #7
 8003e6e:	4965      	ldr	r1, [pc, #404]	@ (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b63      	ldr	r3, [pc, #396]	@ (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b8      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea0:	4b59      	ldr	r3, [pc, #356]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a58      	ldr	r2, [pc, #352]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb8:	4b53      	ldr	r3, [pc, #332]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec4:	4b50      	ldr	r3, [pc, #320]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	494d      	ldr	r1, [pc, #308]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d040      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b47      	ldr	r3, [pc, #284]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d115      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e07f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e073      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b3d      	ldr	r3, [pc, #244]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e06b      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b39      	ldr	r3, [pc, #228]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4936      	ldr	r1, [pc, #216]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f34:	f7fd fb7c 	bl	8001630 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fd fb78 	bl	8001630 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e053      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b2d      	ldr	r3, [pc, #180]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b27      	ldr	r3, [pc, #156]	@ (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d210      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b24      	ldr	r3, [pc, #144]	@ (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 0207 	bic.w	r2, r3, #7
 8003f7a:	4922      	ldr	r1, [pc, #136]	@ (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b20      	ldr	r3, [pc, #128]	@ (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e032      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa0:	4b19      	ldr	r3, [pc, #100]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4916      	ldr	r1, [pc, #88]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fbe:	4b12      	ldr	r3, [pc, #72]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	490e      	ldr	r1, [pc, #56]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fd2:	f000 f821 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	490a      	ldr	r1, [pc, #40]	@ (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe4:	5ccb      	ldrb	r3, [r1, r3]
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	4a09      	ldr	r2, [pc, #36]	@ (8004010 <HAL_RCC_ClockConfig+0x1cc>)
 8003fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fee:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <HAL_RCC_ClockConfig+0x1d0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fada 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40022000 	.word	0x40022000
 8004008:	40021000 	.word	0x40021000
 800400c:	0800919c 	.word	0x0800919c
 8004010:	20000024 	.word	0x20000024
 8004014:	20000028 	.word	0x20000028

08004018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004032:	4b1e      	ldr	r3, [pc, #120]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b04      	cmp	r3, #4
 8004040:	d002      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x30>
 8004042:	2b08      	cmp	r3, #8
 8004044:	d003      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x36>
 8004046:	e027      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004048:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800404a:	613b      	str	r3, [r7, #16]
      break;
 800404c:	e027      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	0c9b      	lsrs	r3, r3, #18
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	4a17      	ldr	r2, [pc, #92]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004058:	5cd3      	ldrb	r3, [r2, r3]
 800405a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004066:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0c5b      	lsrs	r3, r3, #17
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	4a11      	ldr	r2, [pc, #68]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004072:	5cd3      	ldrb	r3, [r2, r3]
 8004074:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a0d      	ldr	r2, [pc, #52]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800407a:	fb03 f202 	mul.w	r2, r3, r2
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	e004      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a0c      	ldr	r2, [pc, #48]	@ (80040bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	613b      	str	r3, [r7, #16]
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800409a:	613b      	str	r3, [r7, #16]
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	693b      	ldr	r3, [r7, #16]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	007a1200 	.word	0x007a1200
 80040b4:	080091b4 	.word	0x080091b4
 80040b8:	080091c4 	.word	0x080091c4
 80040bc:	003d0900 	.word	0x003d0900

080040c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c4:	4b02      	ldr	r3, [pc, #8]	@ (80040d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	20000024 	.word	0x20000024

080040d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040d8:	f7ff fff2 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4903      	ldr	r1, [pc, #12]	@ (80040f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000
 80040f8:	080091ac 	.word	0x080091ac

080040fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004100:	f7ff ffde 	bl	80040c0 <HAL_RCC_GetHCLKFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b05      	ldr	r3, [pc, #20]	@ (800411c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	0adb      	lsrs	r3, r3, #11
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	4903      	ldr	r1, [pc, #12]	@ (8004120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	080091ac 	.word	0x080091ac

08004124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800412c:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <RCC_Delay+0x34>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0a      	ldr	r2, [pc, #40]	@ (800415c <RCC_Delay+0x38>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	0a5b      	lsrs	r3, r3, #9
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004140:	bf00      	nop
  }
  while (Delay --);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1e5a      	subs	r2, r3, #1
 8004146:	60fa      	str	r2, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f9      	bne.n	8004140 <RCC_Delay+0x1c>
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	20000024 	.word	0x20000024
 800415c:	10624dd3 	.word	0x10624dd3

08004160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e076      	b.n	8004260 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d108      	bne.n	800418c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004182:	d009      	beq.n	8004198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	61da      	str	r2, [r3, #28]
 800418a:	e005      	b.n	8004198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd f8ac 	bl	8001310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	0c1a      	lsrs	r2, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f002 0204 	and.w	r2, r2, #4
 800423e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800424e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004278:	f7fd f9da 	bl	8001630 <HAL_GetTick>
 800427c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d001      	beq.n	8004292 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
 8004290:	e12a      	b.n	80044e8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SPI_Transmit+0x36>
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e122      	b.n	80044e8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_SPI_Transmit+0x48>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e11b      	b.n	80044e8 <HAL_SPI_Transmit+0x280>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2203      	movs	r2, #3
 80042bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	88fa      	ldrh	r2, [r7, #6]
 80042d6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042fe:	d10f      	bne.n	8004320 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800430e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800431e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432a:	2b40      	cmp	r3, #64	@ 0x40
 800432c:	d007      	beq.n	800433e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004346:	d152      	bne.n	80043ee <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_SPI_Transmit+0xee>
 8004350:	8b7b      	ldrh	r3, [r7, #26]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d145      	bne.n	80043e2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	1c9a      	adds	r2, r3, #2
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800437a:	e032      	b.n	80043e2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b02      	cmp	r3, #2
 8004388:	d112      	bne.n	80043b0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	881a      	ldrh	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043ae:	e018      	b.n	80043e2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b0:	f7fd f93e 	bl	8001630 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d803      	bhi.n	80043c8 <HAL_SPI_Transmit+0x160>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d102      	bne.n	80043ce <HAL_SPI_Transmit+0x166>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e082      	b.n	80044e8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1c7      	bne.n	800437c <HAL_SPI_Transmit+0x114>
 80043ec:	e053      	b.n	8004496 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_SPI_Transmit+0x194>
 80043f6:	8b7b      	ldrh	r3, [r7, #26]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d147      	bne.n	800448c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004422:	e033      	b.n	800448c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d113      	bne.n	800445a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004458:	e018      	b.n	800448c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800445a:	f7fd f8e9 	bl	8001630 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d803      	bhi.n	8004472 <HAL_SPI_Transmit+0x20a>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d102      	bne.n	8004478 <HAL_SPI_Transmit+0x210>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e02d      	b.n	80044e8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1c6      	bne.n	8004424 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fa5a 	bl	8004954 <SPI_EndRxTxTransaction>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80044e6:	2300      	movs	r3, #0
  }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	@ 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044fe:	2301      	movs	r3, #1
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004502:	f7fd f895 	bl	8001630 <HAL_GetTick>
 8004506:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800450e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800451a:	7ffb      	ldrb	r3, [r7, #31]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d00c      	beq.n	800453a <HAL_SPI_TransmitReceive+0x4a>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004526:	d106      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x46>
 8004530:	7ffb      	ldrb	r3, [r7, #31]
 8004532:	2b04      	cmp	r3, #4
 8004534:	d001      	beq.n	800453a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
 8004538:	e17f      	b.n	800483a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_SPI_TransmitReceive+0x5c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_SPI_TransmitReceive+0x5c>
 8004546:	887b      	ldrh	r3, [r7, #2]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e174      	b.n	800483a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_SPI_TransmitReceive+0x6e>
 800455a:	2302      	movs	r3, #2
 800455c:	e16d      	b.n	800483a <HAL_SPI_TransmitReceive+0x34a>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b04      	cmp	r3, #4
 8004570:	d003      	beq.n	800457a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2205      	movs	r2, #5
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	887a      	ldrh	r2, [r7, #2]
 80045a2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b40      	cmp	r3, #64	@ 0x40
 80045bc:	d007      	beq.n	80045ce <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d6:	d17e      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0xf6>
 80045e0:	8afb      	ldrh	r3, [r7, #22]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d16c      	bne.n	80046c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	1c9a      	adds	r2, r3, #2
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460a:	e059      	b.n	80046c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b02      	cmp	r3, #2
 8004618:	d11b      	bne.n	8004652 <HAL_SPI_TransmitReceive+0x162>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d016      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x162>
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	2b01      	cmp	r3, #1
 8004628:	d113      	bne.n	8004652 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	881a      	ldrh	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463a:	1c9a      	adds	r2, r3, #2
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b01      	cmp	r3, #1
 800465e:	d119      	bne.n	8004694 <HAL_SPI_TransmitReceive+0x1a4>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d014      	beq.n	8004694 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	b292      	uxth	r2, r2
 8004676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	1c9a      	adds	r2, r3, #2
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004690:	2301      	movs	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004694:	f7fc ffcc 	bl	8001630 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d80d      	bhi.n	80046c0 <HAL_SPI_TransmitReceive+0x1d0>
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d009      	beq.n	80046c0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0bc      	b.n	800483a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1a0      	bne.n	800460c <HAL_SPI_TransmitReceive+0x11c>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d19b      	bne.n	800460c <HAL_SPI_TransmitReceive+0x11c>
 80046d4:	e082      	b.n	80047dc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x1f4>
 80046de:	8afb      	ldrh	r3, [r7, #22]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d171      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	7812      	ldrb	r2, [r2, #0]
 80046f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800470a:	e05d      	b.n	80047c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b02      	cmp	r3, #2
 8004718:	d11c      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x264>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d017      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x264>
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	2b01      	cmp	r3, #1
 8004728:	d114      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d119      	bne.n	8004796 <HAL_SPI_TransmitReceive+0x2a6>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d014      	beq.n	8004796 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004792:	2301      	movs	r3, #1
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004796:	f7fc ff4b 	bl	8001630 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d803      	bhi.n	80047ae <HAL_SPI_TransmitReceive+0x2be>
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d102      	bne.n	80047b4 <HAL_SPI_TransmitReceive+0x2c4>
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e038      	b.n	800483a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d19c      	bne.n	800470c <HAL_SPI_TransmitReceive+0x21c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d197      	bne.n	800470c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f8b7 	bl	8004954 <SPI_EndRxTxTransaction>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e01d      	b.n	800483a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004838:	2300      	movs	r3, #0
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3728      	adds	r7, #40	@ 0x28
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004854:	f7fc feec 	bl	8001630 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	4413      	add	r3, r2
 8004862:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004864:	f7fc fee4 	bl	8001630 <HAL_GetTick>
 8004868:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800486a:	4b39      	ldr	r3, [pc, #228]	@ (8004950 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	015b      	lsls	r3, r3, #5
 8004870:	0d1b      	lsrs	r3, r3, #20
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	fb02 f303 	mul.w	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800487a:	e054      	b.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d050      	beq.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004884:	f7fc fed4 	bl	8001630 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	429a      	cmp	r2, r3
 8004892:	d902      	bls.n	800489a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d13d      	bne.n	8004916 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048b2:	d111      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048bc:	d004      	beq.n	80048c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c6:	d107      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e0:	d10f      	bne.n	8004902 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e017      	b.n	8004946 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3b01      	subs	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4013      	ands	r3, r2
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	429a      	cmp	r2, r3
 8004942:	d19b      	bne.n	800487c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000024 	.word	0x20000024

08004954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2201      	movs	r2, #1
 8004968:	2102      	movs	r1, #2
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff ff6a 	bl	8004844 <SPI_WaitFlagStateUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e013      	b.n	80049ae <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	@ 0x80
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7ff ff57 	bl	8004844 <SPI_WaitFlagStateUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e000      	b.n	80049ae <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e042      	b.n	8004a4e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fc fce1 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2224      	movs	r2, #36	@ 0x24
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f972 	bl	8004ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b08a      	sub	sp, #40	@ 0x28
 8004a5a:	af02      	add	r7, sp, #8
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d175      	bne.n	8004b62 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <HAL_UART_Transmit+0x2c>
 8004a7c:	88fb      	ldrh	r3, [r7, #6]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e06e      	b.n	8004b64 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2221      	movs	r2, #33	@ 0x21
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a94:	f7fc fdcc 	bl	8001630 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aae:	d108      	bne.n	8004ac2 <HAL_UART_Transmit+0x6c>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	e003      	b.n	8004aca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aca:	e02e      	b.n	8004b2a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2180      	movs	r1, #128	@ 0x80
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f848 	bl	8004b6c <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e03a      	b.n	8004b64 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b02:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	3302      	adds	r3, #2
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e007      	b.n	8004b1c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	781a      	ldrb	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1cb      	bne.n	8004acc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2140      	movs	r1, #64	@ 0x40
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f814 	bl	8004b6c <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e006      	b.n	8004b64 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7c:	e03b      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d037      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fc fd53 	bl	8001630 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	6a3a      	ldr	r2, [r7, #32]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e03a      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d023      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b80      	cmp	r3, #128	@ 0x80
 8004bb2:	d020      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b40      	cmp	r3, #64	@ 0x40
 8004bb8:	d01d      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d116      	bne.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f81d 	bl	8004c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2208      	movs	r2, #8
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e00f      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d0b4      	beq.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b095      	sub	sp, #84	@ 0x54
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c46:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e5      	bne.n	8004c26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e5      	bne.n	8004c5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d119      	bne.n	8004cca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f023 0310 	bic.w	r3, r3, #16
 8004cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cb6:	61ba      	str	r2, [r7, #24]
 8004cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6979      	ldr	r1, [r7, #20]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e5      	bne.n	8004c96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004cd8:	bf00      	nop
 8004cda:	3754      	adds	r7, #84	@ 0x54
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
	...

08004ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004d1e:	f023 030c 	bic.w	r3, r3, #12
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2c      	ldr	r2, [pc, #176]	@ (8004df8 <UART_SetConfig+0x114>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d103      	bne.n	8004d54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d4c:	f7ff f9d6 	bl	80040fc <HAL_RCC_GetPCLK2Freq>
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	e002      	b.n	8004d5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7ff f9be 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8004d58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009a      	lsls	r2, r3, #2
 8004d64:	441a      	add	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	4a22      	ldr	r2, [pc, #136]	@ (8004dfc <UART_SetConfig+0x118>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	0119      	lsls	r1, r3, #4
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009a      	lsls	r2, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d90:	4b1a      	ldr	r3, [pc, #104]	@ (8004dfc <UART_SetConfig+0x118>)
 8004d92:	fba3 0302 	umull	r0, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2064      	movs	r0, #100	@ 0x64
 8004d9a:	fb00 f303 	mul.w	r3, r0, r3
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	3332      	adds	r3, #50	@ 0x32
 8004da4:	4a15      	ldr	r2, [pc, #84]	@ (8004dfc <UART_SetConfig+0x118>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004db0:	4419      	add	r1, r3
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	009a      	lsls	r2, r3, #2
 8004dbc:	441a      	add	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <UART_SetConfig+0x118>)
 8004dca:	fba3 0302 	umull	r0, r3, r3, r2
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	2064      	movs	r0, #100	@ 0x64
 8004dd2:	fb00 f303 	mul.w	r3, r0, r3
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	3332      	adds	r3, #50	@ 0x32
 8004ddc:	4a07      	ldr	r2, [pc, #28]	@ (8004dfc <UART_SetConfig+0x118>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	f003 020f 	and.w	r2, r3, #15
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	440a      	add	r2, r1
 8004dee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40013800 	.word	0x40013800
 8004dfc:	51eb851f 	.word	0x51eb851f

08004e00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004e04:	4904      	ldr	r1, [pc, #16]	@ (8004e18 <MX_FATFS_Init+0x18>)
 8004e06:	4805      	ldr	r0, [pc, #20]	@ (8004e1c <MX_FATFS_Init+0x1c>)
 8004e08:	f003 fb74 	bl	80084f4 <FATFS_LinkDriver>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4b03      	ldr	r3, [pc, #12]	@ (8004e20 <MX_FATFS_Init+0x20>)
 8004e12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e14:	bf00      	nop
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200001c0 	.word	0x200001c0
 8004e1c:	20000030 	.word	0x20000030
 8004e20:	200001bc 	.word	0x200001bc

08004e24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004e28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	4603      	mov	r3, r0
 8004e3a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fb fb3e 	bl	80004c0 <SD_disk_initialize>
 8004e44:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	4603      	mov	r3, r0
 8004e56:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb fc16 	bl	800068c <SD_disk_status>
 8004e60:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	4603      	mov	r3, r0
 8004e78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004e7a:	7bf8      	ldrb	r0, [r7, #15]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	f7fb fc17 	bl	80006b4 <SD_disk_read>
 8004e86:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004ea0:	7bf8      	ldrb	r0, [r7, #15]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	f7fb fc6e 	bl	8000788 <SD_disk_write>
 8004eac:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	603a      	str	r2, [r7, #0]
 8004ec0:	71fb      	strb	r3, [r7, #7]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004ec6:	79b9      	ldrb	r1, [r7, #6]
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fb fcdf 	bl	8000890 <SD_disk_ioctl>
 8004ed2:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	4a08      	ldr	r2, [pc, #32]	@ (8004f0c <disk_status+0x30>)
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	79fa      	ldrb	r2, [r7, #7]
 8004ef4:	4905      	ldr	r1, [pc, #20]	@ (8004f0c <disk_status+0x30>)
 8004ef6:	440a      	add	r2, r1
 8004ef8:	7a12      	ldrb	r2, [r2, #8]
 8004efa:	4610      	mov	r0, r2
 8004efc:	4798      	blx	r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	200001e4 	.word	0x200001e4

08004f10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	4a0d      	ldr	r2, [pc, #52]	@ (8004f58 <disk_initialize+0x48>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d111      	bne.n	8004f4c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8004f58 <disk_initialize+0x48>)
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	4a09      	ldr	r2, [pc, #36]	@ (8004f58 <disk_initialize+0x48>)
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	79fa      	ldrb	r2, [r7, #7]
 8004f3e:	4906      	ldr	r1, [pc, #24]	@ (8004f58 <disk_initialize+0x48>)
 8004f40:	440a      	add	r2, r1
 8004f42:	7a12      	ldrb	r2, [r2, #8]
 8004f44:	4610      	mov	r0, r2
 8004f46:	4798      	blx	r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	200001e4 	.word	0x200001e4

08004f5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4603      	mov	r3, r0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f98 <disk_read+0x3c>)
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	689c      	ldr	r4, [r3, #8]
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	4a07      	ldr	r2, [pc, #28]	@ (8004f98 <disk_read+0x3c>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	7a18      	ldrb	r0, [r3, #8]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	47a0      	blx	r4
 8004f88:	4603      	mov	r3, r0
 8004f8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200001e4 	.word	0x200001e4

08004f9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd8 <disk_write+0x3c>)
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	68dc      	ldr	r4, [r3, #12]
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	4a07      	ldr	r2, [pc, #28]	@ (8004fd8 <disk_write+0x3c>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	7a18      	ldrb	r0, [r3, #8]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	47a0      	blx	r4
 8004fc8:	4603      	mov	r3, r0
 8004fca:	75fb      	strb	r3, [r7, #23]
  return res;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd90      	pop	{r4, r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200001e4 	.word	0x200001e4

08004fdc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	603a      	str	r2, [r7, #0]
 8004fe6:	71fb      	strb	r3, [r7, #7]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	4a09      	ldr	r2, [pc, #36]	@ (8005014 <disk_ioctl+0x38>)
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	79fa      	ldrb	r2, [r7, #7]
 8004ffa:	4906      	ldr	r1, [pc, #24]	@ (8005014 <disk_ioctl+0x38>)
 8004ffc:	440a      	add	r2, r1
 8004ffe:	7a10      	ldrb	r0, [r2, #8]
 8005000:	79b9      	ldrb	r1, [r7, #6]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	4798      	blx	r3
 8005006:	4603      	mov	r3, r0
 8005008:	73fb      	strb	r3, [r7, #15]
  return res;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	200001e4 	.word	0x200001e4

08005018 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800502c:	e007      	b.n	800503e <mem_cpy+0x26>
		*d++ = *s++;
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	1c53      	adds	r3, r2, #1
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1c59      	adds	r1, r3, #1
 8005038:	6179      	str	r1, [r7, #20]
 800503a:	7812      	ldrb	r2, [r2, #0]
 800503c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	1e5a      	subs	r2, r3, #1
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f2      	bne.n	800502e <mem_cpy+0x16>
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr

08005054 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005064:	e005      	b.n	8005072 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	617a      	str	r2, [r7, #20]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f4      	bne.n	8005066 <mem_set+0x12>
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	@ 0x24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80050a0:	bf00      	nop
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	1e5a      	subs	r2, r3, #1
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <mem_cmp+0x40>
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	61fa      	str	r2, [r7, #28]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	4619      	mov	r1, r3
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	61ba      	str	r2, [r7, #24]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	1acb      	subs	r3, r1, r3
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ec      	beq.n	80050a2 <mem_cmp+0x1a>
	return r;
 80050c8:	697b      	ldr	r3, [r7, #20]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3724      	adds	r7, #36	@ 0x24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80050de:	e002      	b.n	80050e6 <chk_chr+0x12>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3301      	adds	r3, #1
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <chk_chr+0x26>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d1f2      	bne.n	80050e0 <chk_chr+0xc>
	return *str;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	781b      	ldrb	r3, [r3, #0]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e03b      	b.n	8005194 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800511c:	4931      	ldr	r1, [pc, #196]	@ (80051e4 <chk_lock+0xdc>)
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4613      	mov	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02c      	beq.n	800518a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005130:	492c      	ldr	r1, [pc, #176]	@ (80051e4 <chk_lock+0xdc>)
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4613      	mov	r3, r2
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d120      	bne.n	800518e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800514c:	4925      	ldr	r1, [pc, #148]	@ (80051e4 <chk_lock+0xdc>)
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4613      	mov	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3304      	adds	r3, #4
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005164:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005166:	429a      	cmp	r2, r3
 8005168:	d111      	bne.n	800518e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800516a:	491e      	ldr	r1, [pc, #120]	@ (80051e4 <chk_lock+0xdc>)
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4613      	mov	r3, r2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	3308      	adds	r3, #8
 800517a:	881a      	ldrh	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005182:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005184:	429a      	cmp	r2, r3
 8005186:	d102      	bne.n	800518e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005188:	e007      	b.n	800519a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3301      	adds	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d9c0      	bls.n	800511c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d109      	bne.n	80051b4 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <chk_lock+0xa4>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d101      	bne.n	80051b0 <chk_lock+0xa8>
 80051ac:	2300      	movs	r3, #0
 80051ae:	e013      	b.n	80051d8 <chk_lock+0xd0>
 80051b0:	2312      	movs	r3, #18
 80051b2:	e011      	b.n	80051d8 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <chk_lock+0xca>
 80051ba:	490a      	ldr	r1, [pc, #40]	@ (80051e4 <chk_lock+0xdc>)
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4613      	mov	r3, r2
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	330a      	adds	r3, #10
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051d0:	d101      	bne.n	80051d6 <chk_lock+0xce>
 80051d2:	2310      	movs	r3, #16
 80051d4:	e000      	b.n	80051d8 <chk_lock+0xd0>
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	200001cc 	.word	0x200001cc

080051e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	e002      	b.n	80051fa <enq_lock+0x12>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3301      	adds	r3, #1
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d809      	bhi.n	8005214 <enq_lock+0x2c>
 8005200:	490a      	ldr	r1, [pc, #40]	@ (800522c <enq_lock+0x44>)
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ef      	bne.n	80051f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b02      	cmp	r3, #2
 8005218:	bf14      	ite	ne
 800521a:	2301      	movne	r3, #1
 800521c:	2300      	moveq	r3, #0
 800521e:	b2db      	uxtb	r3, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	200001cc 	.word	0x200001cc

08005230 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	e02e      	b.n	800529e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8005240:	4958      	ldr	r1, [pc, #352]	@ (80053a4 <inc_lock+0x174>)
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4613      	mov	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d11d      	bne.n	8005298 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800525c:	4951      	ldr	r1, [pc, #324]	@ (80053a4 <inc_lock+0x174>)
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4613      	mov	r3, r2
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	3304      	adds	r3, #4
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005274:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005276:	429a      	cmp	r2, r3
 8005278:	d10e      	bne.n	8005298 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800527a:	494a      	ldr	r1, [pc, #296]	@ (80053a4 <inc_lock+0x174>)
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	3308      	adds	r3, #8
 800528a:	881a      	ldrh	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005292:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005294:	429a      	cmp	r2, r3
 8005296:	d006      	beq.n	80052a6 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3301      	adds	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d9cd      	bls.n	8005240 <inc_lock+0x10>
 80052a4:	e000      	b.n	80052a8 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80052a6:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d148      	bne.n	8005340 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e002      	b.n	80052ba <inc_lock+0x8a>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3301      	adds	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d809      	bhi.n	80052d4 <inc_lock+0xa4>
 80052c0:	4938      	ldr	r1, [pc, #224]	@ (80053a4 <inc_lock+0x174>)
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1ef      	bne.n	80052b4 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d101      	bne.n	80052de <inc_lock+0xae>
 80052da:	2300      	movs	r3, #0
 80052dc:	e05d      	b.n	800539a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	482f      	ldr	r0, [pc, #188]	@ (80053a4 <inc_lock+0x174>)
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4613      	mov	r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4403      	add	r3, r0
 80052f4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052fc:	6899      	ldr	r1, [r3, #8]
 80052fe:	4829      	ldr	r0, [pc, #164]	@ (80053a4 <inc_lock+0x174>)
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4613      	mov	r3, r2
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4403      	add	r3, r0
 800530c:	3304      	adds	r3, #4
 800530e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005316:	88d8      	ldrh	r0, [r3, #6]
 8005318:	4922      	ldr	r1, [pc, #136]	@ (80053a4 <inc_lock+0x174>)
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	3308      	adds	r3, #8
 8005328:	4602      	mov	r2, r0
 800532a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800532c:	491d      	ldr	r1, [pc, #116]	@ (80053a4 <inc_lock+0x174>)
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4613      	mov	r3, r2
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	330a      	adds	r3, #10
 800533c:	2200      	movs	r2, #0
 800533e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <inc_lock+0x130>
 8005346:	4917      	ldr	r1, [pc, #92]	@ (80053a4 <inc_lock+0x174>)
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	330a      	adds	r3, #10
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <inc_lock+0x130>
 800535c:	2300      	movs	r3, #0
 800535e:	e01c      	b.n	800539a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10b      	bne.n	800537e <inc_lock+0x14e>
 8005366:	490f      	ldr	r1, [pc, #60]	@ (80053a4 <inc_lock+0x174>)
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4613      	mov	r3, r2
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	330a      	adds	r3, #10
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	3301      	adds	r3, #1
 800537a:	b299      	uxth	r1, r3
 800537c:	e001      	b.n	8005382 <inc_lock+0x152>
 800537e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005382:	4808      	ldr	r0, [pc, #32]	@ (80053a4 <inc_lock+0x174>)
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4613      	mov	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4403      	add	r3, r0
 8005390:	330a      	adds	r3, #10
 8005392:	460a      	mov	r2, r1
 8005394:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3301      	adds	r3, #1
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr
 80053a4:	200001cc 	.word	0x200001cc

080053a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d82e      	bhi.n	800541a <dec_lock+0x72>
		n = Files[i].ctr;
 80053bc:	491b      	ldr	r1, [pc, #108]	@ (800542c <dec_lock+0x84>)
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	330a      	adds	r3, #10
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80053d0:	89fb      	ldrh	r3, [r7, #14]
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d6:	d101      	bne.n	80053dc <dec_lock+0x34>
 80053d8:	2300      	movs	r3, #0
 80053da:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80053dc:	89fb      	ldrh	r3, [r7, #14]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <dec_lock+0x40>
 80053e2:	89fb      	ldrh	r3, [r7, #14]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80053e8:	4910      	ldr	r1, [pc, #64]	@ (800542c <dec_lock+0x84>)
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	330a      	adds	r3, #10
 80053f8:	89fa      	ldrh	r2, [r7, #14]
 80053fa:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80053fc:	89fb      	ldrh	r3, [r7, #14]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d108      	bne.n	8005414 <dec_lock+0x6c>
 8005402:	490a      	ldr	r1, [pc, #40]	@ (800542c <dec_lock+0x84>)
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	737b      	strb	r3, [r7, #13]
 8005418:	e001      	b.n	800541e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800541a:	2302      	movs	r3, #2
 800541c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800541e:	7b7b      	ldrb	r3, [r7, #13]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	200001cc 	.word	0x200001cc

08005430 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e016      	b.n	800546c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800543e:	4910      	ldr	r1, [pc, #64]	@ (8005480 <clear_lock+0x50>)
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d108      	bne.n	8005466 <clear_lock+0x36>
 8005454:	490a      	ldr	r1, [pc, #40]	@ (8005480 <clear_lock+0x50>)
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4613      	mov	r3, r2
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d9e5      	bls.n	800543e <clear_lock+0xe>
	}
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	200001cc 	.word	0x200001cc

08005484 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005496:	791b      	ldrb	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d040      	beq.n	800551e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ac:	7858      	ldrb	r0, [r3, #1]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	2301      	movs	r3, #1
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	f7ff fd72 	bl	8004f9c <disk_write>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <sync_window+0x40>
			res = FR_DISK_ERR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
 80054c2:	e02c      	b.n	800551e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ca:	2200      	movs	r2, #0
 80054cc:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	1ad2      	subs	r2, r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d21b      	bcs.n	800551e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ec:	78db      	ldrb	r3, [r3, #3]
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	e012      	b.n	8005518 <sync_window+0x94>
					wsect += fs->fsize;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005506:	7858      	ldrb	r0, [r3, #1]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	2301      	movs	r3, #1
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	f7ff fd45 	bl	8004f9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3b01      	subs	r3, #1
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d8e9      	bhi.n	80054f2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800553c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d01e      	beq.n	8005582 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff9d 	bl	8005484 <sync_window>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d116      	bne.n	8005582 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800555a:	7858      	ldrb	r0, [r3, #1]
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	2301      	movs	r3, #1
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	f7ff fcfb 	bl	8004f5c <disk_read>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d004      	beq.n	8005576 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800557c:	461a      	mov	r2, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8005582:	7bfb      	ldrb	r3, [r7, #15]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff ff75 	bl	8005484 <sync_window>
 800559a:	4603      	mov	r3, r0
 800559c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 80ad 	bne.w	8005700 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	f040 8098 	bne.w	80056e4 <sync_fs+0x158>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ba:	795b      	ldrb	r3, [r3, #5]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f040 8091 	bne.w	80056e4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ca:	895b      	ldrh	r3, [r3, #10]
 80055cc:	461a      	mov	r2, r3
 80055ce:	2100      	movs	r1, #0
 80055d0:	f7ff fd40 	bl	8005054 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2255      	movs	r2, #85	@ 0x55
 80055d8:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	22aa      	movs	r2, #170	@ 0xaa
 80055e0:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2252      	movs	r2, #82	@ 0x52
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2252      	movs	r2, #82	@ 0x52
 80055ee:	705a      	strb	r2, [r3, #1]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2261      	movs	r2, #97	@ 0x61
 80055f4:	709a      	strb	r2, [r3, #2]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2241      	movs	r2, #65	@ 0x41
 80055fa:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2272      	movs	r2, #114	@ 0x72
 8005600:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2272      	movs	r2, #114	@ 0x72
 8005608:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2241      	movs	r2, #65	@ 0x41
 8005610:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2261      	movs	r2, #97	@ 0x61
 8005618:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	b29b      	uxth	r3, r3
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	b29b      	uxth	r3, r3
 800563a:	b2da      	uxtb	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	b2da      	uxtb	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	0e1b      	lsrs	r3, r3, #24
 800565e:	b2da      	uxtb	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	b29b      	uxth	r3, r3
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	b29b      	uxth	r3, r3
 8005684:	b2da      	uxtb	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	b2da      	uxtb	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	0e1b      	lsrs	r3, r3, #24
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	3301      	adds	r3, #1
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80056c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056c8:	7858      	ldrb	r0, [r3, #1]
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d4:	2301      	movs	r3, #1
 80056d6:	f7ff fc61 	bl	8004f9c <disk_write>
			fs->fsi_flag = 0;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056e0:	2200      	movs	r2, #0
 80056e2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fc73 	bl	8004fdc <disk_ioctl>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	3b02      	subs	r3, #2
 8005718:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	3b02      	subs	r3, #2
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d301      	bcc.n	800572e <clust2sect+0x24>
 800572a:	2300      	movs	r3, #0
 800572c:	e00c      	b.n	8005748 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005734:	789b      	ldrb	r3, [r3, #2]
 8005736:	461a      	mov	r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	fb03 f202 	mul.w	r2, r3, r2
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	4413      	add	r3, r2
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr

08005752 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d906      	bls.n	8005770 <get_fat+0x1e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <get_fat+0x24>
		val = 1;	/* Internal error */
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e0e3      	b.n	800593e <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005776:	f04f 33ff 	mov.w	r3, #4294967295
 800577a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b03      	cmp	r3, #3
 8005786:	f000 8097 	beq.w	80058b8 <get_fat+0x166>
 800578a:	2b03      	cmp	r3, #3
 800578c:	f300 80cd 	bgt.w	800592a <get_fat+0x1d8>
 8005790:	2b01      	cmp	r3, #1
 8005792:	d002      	beq.n	800579a <get_fat+0x48>
 8005794:	2b02      	cmp	r3, #2
 8005796:	d05e      	beq.n	8005856 <get_fat+0x104>
 8005798:	e0c7      	b.n	800592a <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ae:	6a1a      	ldr	r2, [r3, #32]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057b6:	895b      	ldrh	r3, [r3, #10]
 80057b8:	4619      	mov	r1, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80057c0:	4413      	add	r3, r2
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff feaf 	bl	8005528 <move_window>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 80af 	bne.w	8005930 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	60fa      	str	r2, [r7, #12]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057de:	8952      	ldrh	r2, [r2, #10]
 80057e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80057e4:	fb01 f202 	mul.w	r2, r1, r2
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	5cd3      	ldrb	r3, [r2, r3]
 80057ee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057f6:	6a1a      	ldr	r2, [r3, #32]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057fe:	895b      	ldrh	r3, [r3, #10]
 8005800:	4619      	mov	r1, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	fbb3 f3f1 	udiv	r3, r3, r1
 8005808:	4413      	add	r3, r2
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff fe8b 	bl	8005528 <move_window>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	f040 808d 	bne.w	8005934 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005820:	895b      	ldrh	r3, [r3, #10]
 8005822:	461a      	mov	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	fbb3 f1f2 	udiv	r1, r3, r2
 800582a:	fb01 f202 	mul.w	r2, r1, r2
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	5cd3      	ldrb	r3, [r2, r3]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4313      	orrs	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <get_fat+0xfa>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	091b      	lsrs	r3, r3, #4
 800584a:	e002      	b.n	8005852 <get_fat+0x100>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005852:	617b      	str	r3, [r7, #20]
			break;
 8005854:	e073      	b.n	800593e <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005864:	895b      	ldrh	r3, [r3, #10]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	4619      	mov	r1, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005872:	4413      	add	r3, r2
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff fe56 	bl	8005528 <move_window>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d15a      	bne.n	8005938 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800588c:	8952      	ldrh	r2, [r2, #10]
 800588e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005892:	fb01 f202 	mul.w	r2, r1, r2
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	4413      	add	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3301      	adds	r3, #1
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	b21a      	sxth	r2, r3
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	4313      	orrs	r3, r2
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	617b      	str	r3, [r7, #20]
			break;
 80058b6:	e042      	b.n	800593e <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058be:	6a1a      	ldr	r2, [r3, #32]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058c6:	895b      	ldrh	r3, [r3, #10]
 80058c8:	089b      	lsrs	r3, r3, #2
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	4619      	mov	r1, r3
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80058d4:	4413      	add	r3, r2
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff fe25 	bl	8005528 <move_window>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d12b      	bne.n	800593c <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058ee:	8952      	ldrh	r2, [r2, #10]
 80058f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80058f4:	fb01 f202 	mul.w	r2, r1, r2
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4413      	add	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	3303      	adds	r3, #3
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	061a      	lsls	r2, r3, #24
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	3302      	adds	r3, #2
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	041b      	lsls	r3, r3, #16
 8005910:	431a      	orrs	r2, r3
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3301      	adds	r3, #1
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	4313      	orrs	r3, r2
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	7812      	ldrb	r2, [r2, #0]
 8005920:	4313      	orrs	r3, r2
 8005922:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005926:	617b      	str	r3, [r7, #20]
			break;
 8005928:	e009      	b.n	800593e <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 800592a:	2301      	movs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	e006      	b.n	800593e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005930:	bf00      	nop
 8005932:	e004      	b.n	800593e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005934:	bf00      	nop
 8005936:	e002      	b.n	800593e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800593c:	bf00      	nop
		}
	}

	return val;
 800593e:	697b      	ldr	r3, [r7, #20]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d906      	bls.n	8005968 <put_fat+0x20>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	429a      	cmp	r2, r3
 8005966:	d302      	bcc.n	800596e <put_fat+0x26>
		res = FR_INT_ERR;
 8005968:	2302      	movs	r3, #2
 800596a:	77fb      	strb	r3, [r7, #31]
 800596c:	e13a      	b.n	8005be4 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b03      	cmp	r3, #3
 8005978:	f000 80d0 	beq.w	8005b1c <put_fat+0x1d4>
 800597c:	2b03      	cmp	r3, #3
 800597e:	f300 8127 	bgt.w	8005bd0 <put_fat+0x288>
 8005982:	2b01      	cmp	r3, #1
 8005984:	d003      	beq.n	800598e <put_fat+0x46>
 8005986:	2b02      	cmp	r3, #2
 8005988:	f000 808f 	beq.w	8005aaa <put_fat+0x162>
 800598c:	e120      	b.n	8005bd0 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4413      	add	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059aa:	895b      	ldrh	r3, [r3, #10]
 80059ac:	4619      	mov	r1, r3
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80059b4:	4413      	add	r3, r2
 80059b6:	4619      	mov	r1, r3
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff fdb5 	bl	8005528 <move_window>
 80059be:	4603      	mov	r3, r0
 80059c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059c2:	7ffb      	ldrb	r3, [r7, #31]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f040 8106 	bne.w	8005bd6 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	617a      	str	r2, [r7, #20]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059d6:	8952      	ldrh	r2, [r2, #10]
 80059d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80059dc:	fb01 f202 	mul.w	r2, r1, r2
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00d      	beq.n	8005a0e <put_fat+0xc6>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b25b      	sxtb	r3, r3
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	b25a      	sxtb	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	b25b      	sxtb	r3, r3
 8005a06:	4313      	orrs	r3, r2
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	e001      	b.n	8005a12 <put_fat+0xca>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a2e:	895b      	ldrh	r3, [r3, #10]
 8005a30:	4619      	mov	r1, r3
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a38:	4413      	add	r3, r2
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff fd73 	bl	8005528 <move_window>
 8005a42:	4603      	mov	r3, r0
 8005a44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 80c6 	bne.w	8005bda <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a54:	895b      	ldrh	r3, [r3, #10]
 8005a56:	461a      	mov	r2, r3
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a5e:	fb01 f202 	mul.w	r2, r1, r2
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <put_fat+0x134>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e00e      	b.n	8005a9a <put_fat+0x152>
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	b25b      	sxtb	r3, r3
 8005a82:	f023 030f 	bic.w	r3, r3, #15
 8005a86:	b25a      	sxtb	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	b25b      	sxtb	r3, r3
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	b25b      	sxtb	r3, r3
 8005a94:	4313      	orrs	r3, r2
 8005a96:	b25b      	sxtb	r3, r3
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	711a      	strb	r2, [r3, #4]
			break;
 8005aa8:	e09c      	b.n	8005be4 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ab8:	895b      	ldrh	r3, [r3, #10]
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ac6:	4413      	add	r3, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff fd2c 	bl	8005528 <move_window>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ad4:	7ffb      	ldrb	r3, [r7, #31]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f040 8081 	bne.w	8005bde <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ae6:	8952      	ldrh	r2, [r2, #10]
 8005ae8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005aec:	fb01 f202 	mul.w	r2, r1, r2
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	0a1b      	lsrs	r3, r3, #8
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b16:	2201      	movs	r2, #1
 8005b18:	711a      	strb	r2, [r3, #4]
			break;
 8005b1a:	e063      	b.n	8005be4 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b2a:	895b      	ldrh	r3, [r3, #10]
 8005b2c:	089b      	lsrs	r3, r3, #2
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	4619      	mov	r1, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b38:	4413      	add	r3, r2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff fcf3 	bl	8005528 <move_window>
 8005b42:	4603      	mov	r3, r0
 8005b44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b46:	7ffb      	ldrb	r3, [r7, #31]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d14a      	bne.n	8005be2 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b56:	8952      	ldrh	r2, [r2, #10]
 8005b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b5c:	fb01 f202 	mul.w	r2, r1, r2
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	3303      	adds	r3, #3
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	061a      	lsls	r2, r3, #24
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	3302      	adds	r3, #2
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	4313      	orrs	r3, r2
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	7812      	ldrb	r2, [r2, #0]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	0c1a      	lsrs	r2, r3, #16
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0e1a      	lsrs	r2, r3, #24
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	3303      	adds	r3, #3
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bca:	2201      	movs	r2, #1
 8005bcc:	711a      	strb	r2, [r3, #4]
			break;
 8005bce:	e009      	b.n	8005be4 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e006      	b.n	8005be4 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005bd6:	bf00      	nop
 8005bd8:	e004      	b.n	8005be4 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005bda:	bf00      	nop
 8005bdc:	e002      	b.n	8005be4 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005be2:	bf00      	nop
		}
	}

	return res;
 8005be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d906      	bls.n	8005c0c <remove_chain+0x1e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d302      	bcc.n	8005c12 <remove_chain+0x24>
		res = FR_INT_ERR;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	73fb      	strb	r3, [r7, #15]
 8005c10:	e049      	b.n	8005ca6 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005c16:	e03b      	b.n	8005c90 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fd99 	bl	8005752 <get_fat>
 8005c20:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d03b      	beq.n	8005ca0 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d102      	bne.n	8005c34 <remove_chain+0x46>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	73fb      	strb	r3, [r7, #15]
 8005c32:	e038      	b.n	8005ca6 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d102      	bne.n	8005c42 <remove_chain+0x54>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
 8005c40:	e031      	b.n	8005ca6 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005c42:	2200      	movs	r2, #0
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff fe7e 	bl	8005948 <put_fat>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d126      	bne.n	8005ca4 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d013      	beq.n	8005c8c <remove_chain+0x9e>
				fs->free_clust++;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c74:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c7c:	795b      	ldrb	r3, [r3, #5]
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c8a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d3bc      	bcc.n	8005c18 <remove_chain+0x2a>
 8005c9e:	e002      	b.n	8005ca6 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8005ca0:	bf00      	nop
 8005ca2:	e000      	b.n	8005ca6 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8005ca4:	bf00      	nop
		}
	}

	return res;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d111      	bne.n	8005ce4 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d006      	beq.n	8005cde <create_chain+0x2e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d31d      	bcc.n	8005d1a <create_chain+0x6a>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	e01a      	b.n	8005d1a <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fd33 	bl	8005752 <get_fat>
 8005cec:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d801      	bhi.n	8005cf8 <create_chain+0x48>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e07f      	b.n	8005df8 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d101      	bne.n	8005d04 <create_chain+0x54>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	e079      	b.n	8005df8 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d201      	bcs.n	8005d16 <create_chain+0x66>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	e070      	b.n	8005df8 <create_chain+0x148>
		scl = clst;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	3301      	adds	r3, #1
 8005d22:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d307      	bcc.n	8005d42 <create_chain+0x92>
			ncl = 2;
 8005d32:	2302      	movs	r3, #2
 8005d34:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d901      	bls.n	8005d42 <create_chain+0x92>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e05a      	b.n	8005df8 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005d42:	6979      	ldr	r1, [r7, #20]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff fd04 	bl	8005752 <get_fat>
 8005d4a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00e      	beq.n	8005d70 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d002      	beq.n	8005d60 <create_chain+0xb0>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <create_chain+0xb4>
			return cs;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	e049      	b.n	8005df8 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d1d8      	bne.n	8005d1e <create_chain+0x6e>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e043      	b.n	8005df8 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005d70:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005d72:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8005d76:	6979      	ldr	r1, [r7, #20]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fde5 	bl	8005948 <put_fat>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <create_chain+0xec>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d006      	beq.n	8005d9c <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fdd8 	bl	8005948 <put_fat>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d121      	bne.n	8005de6 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005da8:	461a      	mov	r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d01c      	beq.n	8005df6 <create_chain+0x146>
			fs->free_clust--;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005dcc:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dd4:	795b      	ldrb	r3, [r3, #5]
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005de2:	715a      	strb	r2, [r3, #5]
 8005de4:	e007      	b.n	8005df6 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d102      	bne.n	8005df2 <create_chain+0x142>
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295
 8005df0:	e000      	b.n	8005df4 <create_chain+0x144>
 8005df2:	2301      	movs	r3, #1
 8005df4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005df6:	697b      	ldr	r3, [r7, #20]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	3304      	adds	r3, #4
 8005e14:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e22:	895b      	ldrh	r3, [r3, #10]
 8005e24:	461a      	mov	r2, r3
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e38:	7892      	ldrb	r2, [r2, #2]
 8005e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1d1a      	adds	r2, r3, #4
 8005e44:	613a      	str	r2, [r7, #16]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <clmt_clust+0x54>
 8005e50:	2300      	movs	r3, #0
 8005e52:	e010      	b.n	8005e76 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d307      	bcc.n	8005e6c <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	3304      	adds	r3, #4
 8005e68:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e6a:	e7e9      	b.n	8005e40 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8005e6c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e94:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d009      	beq.n	8005eba <dir_sdi+0x3a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d301      	bcc.n	8005ebe <dir_sdi+0x3e>
		return FR_INT_ERR;
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e0aa      	b.n	8006014 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d110      	bne.n	8005ee6 <dir_sdi+0x66>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d107      	bne.n	8005ee6 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d115      	bne.n	8005f18 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ef8:	891b      	ldrh	r3, [r3, #8]
 8005efa:	461a      	mov	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d301      	bcc.n	8005f06 <dir_sdi+0x86>
			return FR_INT_ERR;
 8005f02:	2302      	movs	r3, #2
 8005f04:	e086      	b.n	8006014 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	e043      	b.n	8005fa0 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f24:	895b      	ldrh	r3, [r3, #10]
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f38:	789b      	ldrb	r3, [r3, #2]
 8005f3a:	fb02 f303 	mul.w	r3, r2, r3
 8005f3e:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005f40:	e021      	b.n	8005f86 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fc00 	bl	8005752 <get_fat>
 8005f52:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d101      	bne.n	8005f60 <dir_sdi+0xe0>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e059      	b.n	8006014 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d909      	bls.n	8005f7a <dir_sdi+0xfa>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d301      	bcc.n	8005f7e <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e04a      	b.n	8006014 <dir_sdi+0x194>
			idx -= ic;
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d2d9      	bcs.n	8005f42 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6979      	ldr	r1, [r7, #20]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fbb6 	bl	800570a <clust2sect>
 8005f9e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <dir_sdi+0x136>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e02e      	b.n	8006014 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fc2:	895b      	ldrh	r3, [r3, #10]
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005fda:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ff2:	895b      	ldrh	r3, [r3, #10]
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006000:	fb01 f202 	mul.w	r2, r1, r2
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	015b      	lsls	r3, r3, #5
 8006008:	4403      	add	r3, r0
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006010:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800602c:	88db      	ldrh	r3, [r3, #6]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <dir_next+0x2a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <dir_next+0x2e>
		return FR_NO_FILE;
 8006046:	2304      	movs	r3, #4
 8006048:	e12e      	b.n	80062a8 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006056:	895b      	ldrh	r3, [r3, #10]
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	fbb3 f1f2 	udiv	r1, r3, r2
 8006064:	fb01 f202 	mul.w	r2, r1, r2
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	2b00      	cmp	r3, #0
 800606c:	f040 80fa 	bne.w	8006264 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	3301      	adds	r3, #1
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006080:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10d      	bne.n	80060aa <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800609a:	891b      	ldrh	r3, [r3, #8]
 800609c:	461a      	mov	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	f0c0 80df 	bcc.w	8006264 <dir_next+0x248>
				return FR_NO_FILE;
 80060a6:	2304      	movs	r3, #4
 80060a8:	e0fe      	b.n	80062a8 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060b6:	895b      	ldrh	r3, [r3, #10]
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80060d0:	7892      	ldrb	r2, [r2, #2]
 80060d2:	3a01      	subs	r2, #1
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f040 80c4 	bne.w	8006264 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	4619      	mov	r1, r3
 80060ee:	4610      	mov	r0, r2
 80060f0:	f7ff fb2f 	bl	8005752 <get_fat>
 80060f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d801      	bhi.n	8006100 <dir_next+0xe4>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e0d3      	b.n	80062a8 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d101      	bne.n	800610c <dir_next+0xf0>
 8006108:	2301      	movs	r3, #1
 800610a:	e0cd      	b.n	80062a8 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	f0c0 808e 	bcc.w	800623e <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <dir_next+0x110>
 8006128:	2304      	movs	r3, #4
 800612a:	e0bd      	b.n	80062a8 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7ff fdb6 	bl	8005cb0 <create_chain>
 8006144:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <dir_next+0x134>
 800614c:	2307      	movs	r3, #7
 800614e:	e0ab      	b.n	80062a8 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <dir_next+0x13e>
 8006156:	2302      	movs	r3, #2
 8006158:	e0a6      	b.n	80062a8 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d101      	bne.n	8006166 <dir_next+0x14a>
 8006162:	2301      	movs	r3, #1
 8006164:	e0a0      	b.n	80062a8 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff f988 	bl	8005484 <sync_window>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <dir_next+0x162>
 800617a:	2301      	movs	r3, #1
 800617c:	e094      	b.n	80062a8 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006194:	895b      	ldrh	r3, [r3, #10]
 8006196:	461a      	mov	r2, r3
 8006198:	2100      	movs	r1, #0
 800619a:	f7fe ff5b 	bl	8005054 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ac:	681c      	ldr	r4, [r3, #0]
 80061ae:	6979      	ldr	r1, [r7, #20]
 80061b0:	4610      	mov	r0, r2
 80061b2:	f7ff faaa 	bl	800570a <clust2sect>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 80061bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	e021      	b.n	8006208 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061d0:	2201      	movs	r2, #1
 80061d2:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff f951 	bl	8005484 <sync_window>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <dir_next+0x1d0>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e05d      	b.n	80062a8 <dir_next+0x28c>
						dp->fs->winsect++;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80061f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061fa:	3201      	adds	r2, #1
 80061fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006200:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	3301      	adds	r3, #1
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006214:	789b      	ldrb	r3, [r3, #2]
 8006216:	461a      	mov	r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4293      	cmp	r3, r2
 800621c:	d3d2      	bcc.n	80061c4 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800622a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1acb      	subs	r3, r1, r3
 8006238:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800623c:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006244:	461a      	mov	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fa58 	bl	800570a <clust2sect>
 800625a:	4602      	mov	r2, r0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006262:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	b29a      	uxth	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800626e:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4618      	mov	r0, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006286:	895b      	ldrh	r3, [r3, #10]
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	b29b      	uxth	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	fbb3 f1f2 	udiv	r1, r3, r2
 8006294:	fb01 f202 	mul.w	r2, r1, r2
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	015b      	lsls	r3, r3, #5
 800629c:	4403      	add	r3, r0
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80062a4:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd90      	pop	{r4, r7, pc}

080062b0 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80062ba:	2100      	movs	r1, #0
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fddf 	bl	8005e80 <dir_sdi>
 80062c2:	4603      	mov	r3, r0
 80062c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d135      	bne.n	8006338 <dir_alloc+0x88>
		n = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	4619      	mov	r1, r3
 80062e2:	4610      	mov	r0, r2
 80062e4:	f7ff f920 	bl	8005528 <move_window>
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d121      	bne.n	8006336 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2be5      	cmp	r3, #229	@ 0xe5
 80062fe:	d006      	beq.n	800630e <dir_alloc+0x5e>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d107      	bne.n	800631e <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	3301      	adds	r3, #1
 8006312:	60bb      	str	r3, [r7, #8]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d102      	bne.n	8006322 <dir_alloc+0x72>
 800631c:	e00c      	b.n	8006338 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006322:	2101      	movs	r1, #1
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fe79 	bl	800601c <dir_next>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0cd      	beq.n	80062d0 <dir_alloc+0x20>
 8006334:	e000      	b.n	8006338 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006336:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b04      	cmp	r3, #4
 800633c:	d101      	bne.n	8006342 <dir_alloc+0x92>
 800633e:	2307      	movs	r3, #7
 8006340:	73fb      	strb	r3, [r7, #15]
	return res;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	331b      	adds	r3, #27
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	b21a      	sxth	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	331a      	adds	r3, #26
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	b21b      	sxth	r3, r3
 8006368:	4313      	orrs	r3, r2
 800636a:	b21b      	sxth	r3, r3
 800636c:	b29b      	uxth	r3, r3
 800636e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d10f      	bne.n	800639c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	3315      	adds	r3, #21
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	b21a      	sxth	r2, r3
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	3314      	adds	r3, #20
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	b21b      	sxth	r3, r3
 800638e:	4313      	orrs	r3, r2
 8006390:	b21b      	sxth	r3, r3
 8006392:	b29b      	uxth	r3, r3
 8006394:	041b      	lsls	r3, r3, #16
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

	return cl;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	331a      	adds	r3, #26
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	331b      	adds	r3, #27
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	0c1a      	lsrs	r2, r3, #16
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3314      	adds	r3, #20
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	0c1b      	lsrs	r3, r3, #16
 80063dc:	b29b      	uxth	r3, r3
 80063de:	0a1b      	lsrs	r3, r3, #8
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3315      	adds	r3, #21
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr

080063f4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80063fc:	2100      	movs	r1, #0
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff fd3e 	bl	8005e80 <dir_sdi>
 8006404:	4603      	mov	r3, r0
 8006406:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <dir_find+0x1e>
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	e03f      	b.n	8006492 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f7ff f87f 	bl	8005528 <move_window>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d12a      	bne.n	800648a <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <dir_find+0x5c>
 800644a:	2304      	movs	r3, #4
 800644c:	75fb      	strb	r3, [r7, #23]
 800644e:	e01f      	b.n	8006490 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	330b      	adds	r3, #11
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10b      	bne.n	8006476 <dir_find+0x82>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	220b      	movs	r2, #11
 8006468:	4619      	mov	r1, r3
 800646a:	6938      	ldr	r0, [r7, #16]
 800646c:	f7fe fe0c 	bl	8005088 <mem_cmp>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00b      	beq.n	800648e <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006476:	2100      	movs	r1, #0
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fdcf 	bl	800601c <dir_next>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0c4      	beq.n	8006412 <dir_find+0x1e>
 8006488:	e002      	b.n	8006490 <dir_find+0x9c>
		if (res != FR_OK) break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <dir_find+0x9c>
			break;
 800648e:	bf00      	nop

	return res;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80064a2:	2101      	movs	r1, #1
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff03 	bl	80062b0 <dir_alloc>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d12d      	bne.n	8006510 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f7ff f82e 	bl	8005528 <move_window>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d11c      	bne.n	8006510 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	2220      	movs	r2, #32
 80064e0:	2100      	movs	r1, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fdb6 	bl	8005054 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ee:	6958      	ldr	r0, [r3, #20]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	220b      	movs	r2, #11
 80064fa:	4619      	mov	r1, r3
 80064fc:	f7fe fd8c 	bl	8005018 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800650c:	2201      	movs	r2, #1
 800650e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e002      	b.n	8006534 <create_name+0x18>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3301      	adds	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b2f      	cmp	r3, #47	@ 0x2f
 800653a:	d0f8      	beq.n	800652e <create_name+0x12>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b5c      	cmp	r3, #92	@ 0x5c
 8006542:	d0f4      	beq.n	800652e <create_name+0x12>
	sfn = dp->fn;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800654e:	220b      	movs	r2, #11
 8006550:	2120      	movs	r1, #32
 8006552:	68b8      	ldr	r0, [r7, #8]
 8006554:	f7fe fd7e 	bl	8005054 <mem_set>
	si = i = b = 0; ni = 8;
 8006558:	2300      	movs	r3, #0
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	2300      	movs	r3, #0
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	2308      	movs	r3, #8
 8006566:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	617a      	str	r2, [r7, #20]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006576:	7fbb      	ldrb	r3, [r7, #30]
 8006578:	2b20      	cmp	r3, #32
 800657a:	d953      	bls.n	8006624 <create_name+0x108>
 800657c:	7fbb      	ldrb	r3, [r7, #30]
 800657e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006580:	d050      	beq.n	8006624 <create_name+0x108>
 8006582:	7fbb      	ldrb	r3, [r7, #30]
 8006584:	2b5c      	cmp	r3, #92	@ 0x5c
 8006586:	d04d      	beq.n	8006624 <create_name+0x108>
		if (c == '.' || i >= ni) {
 8006588:	7fbb      	ldrb	r3, [r7, #30]
 800658a:	2b2e      	cmp	r3, #46	@ 0x2e
 800658c:	d003      	beq.n	8006596 <create_name+0x7a>
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	429a      	cmp	r2, r3
 8006594:	d30f      	bcc.n	80065b6 <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d102      	bne.n	80065a2 <create_name+0x86>
 800659c:	7fbb      	ldrb	r3, [r7, #30]
 800659e:	2b2e      	cmp	r3, #46	@ 0x2e
 80065a0:	d001      	beq.n	80065a6 <create_name+0x8a>
 80065a2:	2306      	movs	r3, #6
 80065a4:	e073      	b.n	800668e <create_name+0x172>
			i = 8; ni = 11;
 80065a6:	2308      	movs	r3, #8
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	230b      	movs	r3, #11
 80065ac:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80065ae:	7ffb      	ldrb	r3, [r7, #31]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e035      	b.n	8006622 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 80065b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	da08      	bge.n	80065d0 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 80065be:	7ffb      	ldrb	r3, [r7, #31]
 80065c0:	f043 0303 	orr.w	r3, r3, #3
 80065c4:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80065c6:	7fbb      	ldrb	r3, [r7, #30]
 80065c8:	3b80      	subs	r3, #128	@ 0x80
 80065ca:	4a33      	ldr	r2, [pc, #204]	@ (8006698 <create_name+0x17c>)
 80065cc:	5cd3      	ldrb	r3, [r2, r3]
 80065ce:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80065d0:	7fbb      	ldrb	r3, [r7, #30]
 80065d2:	4619      	mov	r1, r3
 80065d4:	4831      	ldr	r0, [pc, #196]	@ (800669c <create_name+0x180>)
 80065d6:	f7fe fd7d 	bl	80050d4 <chk_chr>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <create_name+0xc8>
				return FR_INVALID_NAME;
 80065e0:	2306      	movs	r3, #6
 80065e2:	e054      	b.n	800668e <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80065e4:	7fbb      	ldrb	r3, [r7, #30]
 80065e6:	2b40      	cmp	r3, #64	@ 0x40
 80065e8:	d907      	bls.n	80065fa <create_name+0xde>
 80065ea:	7fbb      	ldrb	r3, [r7, #30]
 80065ec:	2b5a      	cmp	r3, #90	@ 0x5a
 80065ee:	d804      	bhi.n	80065fa <create_name+0xde>
				b |= 2;
 80065f0:	7ffb      	ldrb	r3, [r7, #31]
 80065f2:	f043 0302 	orr.w	r3, r3, #2
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e00c      	b.n	8006614 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80065fa:	7fbb      	ldrb	r3, [r7, #30]
 80065fc:	2b60      	cmp	r3, #96	@ 0x60
 80065fe:	d909      	bls.n	8006614 <create_name+0xf8>
 8006600:	7fbb      	ldrb	r3, [r7, #30]
 8006602:	2b7a      	cmp	r3, #122	@ 0x7a
 8006604:	d806      	bhi.n	8006614 <create_name+0xf8>
					b |= 1; c -= 0x20;
 8006606:	7ffb      	ldrb	r3, [r7, #31]
 8006608:	f043 0301 	orr.w	r3, r3, #1
 800660c:	77fb      	strb	r3, [r7, #31]
 800660e:	7fbb      	ldrb	r3, [r7, #30]
 8006610:	3b20      	subs	r3, #32
 8006612:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	613a      	str	r2, [r7, #16]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	4413      	add	r3, r2
 800661e:	7fba      	ldrb	r2, [r7, #30]
 8006620:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006622:	e7a1      	b.n	8006568 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	441a      	add	r2, r3
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800662e:	7fbb      	ldrb	r3, [r7, #30]
 8006630:	2b20      	cmp	r3, #32
 8006632:	d801      	bhi.n	8006638 <create_name+0x11c>
 8006634:	2304      	movs	r3, #4
 8006636:	e000      	b.n	800663a <create_name+0x11e>
 8006638:	2300      	movs	r3, #0
 800663a:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <create_name+0x12a>
 8006642:	2306      	movs	r3, #6
 8006644:	e023      	b.n	800668e <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2be5      	cmp	r3, #229	@ 0xe5
 800664c:	d102      	bne.n	8006654 <create_name+0x138>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2205      	movs	r2, #5
 8006652:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b08      	cmp	r3, #8
 8006658:	d102      	bne.n	8006660 <create_name+0x144>
 800665a:	7ffb      	ldrb	r3, [r7, #31]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006660:	7ffb      	ldrb	r3, [r7, #31]
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	2b01      	cmp	r3, #1
 8006668:	d103      	bne.n	8006672 <create_name+0x156>
 800666a:	7fbb      	ldrb	r3, [r7, #30]
 800666c:	f043 0310 	orr.w	r3, r3, #16
 8006670:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006672:	7ffb      	ldrb	r3, [r7, #31]
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b04      	cmp	r3, #4
 800667a:	d103      	bne.n	8006684 <create_name+0x168>
 800667c:	7fbb      	ldrb	r3, [r7, #30]
 800667e:	f043 0308 	orr.w	r3, r3, #8
 8006682:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	330b      	adds	r3, #11
 8006688:	7fba      	ldrb	r2, [r7, #30]
 800668a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800668c:	2300      	movs	r3, #0
#endif
}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	080091c8 	.word	0x080091c8
 800669c:	08009158 	.word	0x08009158

080066a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80066b0:	d003      	beq.n	80066ba <follow_path+0x1a>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80066b8:	d102      	bne.n	80066c0 <follow_path+0x20>
		path++;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066c6:	461a      	mov	r2, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b1f      	cmp	r3, #31
 80066d2:	d80c      	bhi.n	80066ee <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80066d4:	2100      	movs	r1, #0
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff fbd2 	bl	8005e80 <dir_sdi>
 80066dc:	4603      	mov	r3, r0
 80066de:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e6:	461a      	mov	r2, r3
 80066e8:	2300      	movs	r3, #0
 80066ea:	6153      	str	r3, [r2, #20]
 80066ec:	e049      	b.n	8006782 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066ee:	463b      	mov	r3, r7
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff ff12 	bl	800651c <create_name>
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d13a      	bne.n	8006778 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fe76 	bl	80063f4 <dir_find>
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	7adb      	ldrb	r3, [r3, #11]
 8006716:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	2b04      	cmp	r3, #4
 8006722:	d12b      	bne.n	800677c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d126      	bne.n	800677c <follow_path+0xdc>
 800672e:	2305      	movs	r3, #5
 8006730:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006732:	e023      	b.n	800677c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d120      	bne.n	8006780 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	330b      	adds	r3, #11
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	f003 0310 	and.w	r3, r3, #16
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006756:	2305      	movs	r3, #5
 8006758:	73fb      	strb	r3, [r7, #15]
 800675a:	e012      	b.n	8006782 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fdf0 	bl	800634c <ld_clust>
 800676c:	4602      	mov	r2, r0
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006774:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006776:	e7ba      	b.n	80066ee <follow_path+0x4e>
			if (res != FR_OK) break;
 8006778:	bf00      	nop
 800677a:	e002      	b.n	8006782 <follow_path+0xe2>
				break;
 800677c:	bf00      	nop
 800677e:	e000      	b.n	8006782 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006780:	bf00      	nop
		}
	}

	return res;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006794:	f04f 33ff 	mov.w	r3, #4294967295
 8006798:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d031      	beq.n	8006806 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e002      	b.n	80067b0 <get_ldnumber+0x24>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	3301      	adds	r3, #1
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d903      	bls.n	80067c0 <get_ldnumber+0x34>
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80067be:	d1f4      	bne.n	80067aa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80067c6:	d11c      	bne.n	8006802 <get_ldnumber+0x76>
			tp = *path;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	60fa      	str	r2, [r7, #12]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	3b30      	subs	r3, #48	@ 0x30
 80067d8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b09      	cmp	r3, #9
 80067de:	d80e      	bhi.n	80067fe <get_ldnumber+0x72>
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d10a      	bne.n	80067fe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d107      	bne.n	80067fe <get_ldnumber+0x72>
					vol = (int)i;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	3301      	adds	r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	e002      	b.n	8006808 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006802:	2300      	movs	r3, #0
 8006804:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006806:	693b      	ldr	r3, [r7, #16]
}
 8006808:	4618      	mov	r0, r3
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr
	...

08006814 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006824:	2200      	movs	r2, #0
 8006826:	711a      	strb	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800682e:	461a      	mov	r2, r3
 8006830:	f04f 33ff 	mov.w	r3, #4294967295
 8006834:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fe fe75 	bl	8005528 <move_window>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <check_fs+0x34>
		return 3;
 8006844:	2303      	movs	r3, #3
 8006846:	e04a      	b.n	80068de <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800684e:	3301      	adds	r3, #1
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	b21a      	sxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800685c:	b21b      	sxth	r3, r3
 800685e:	4313      	orrs	r3, r2
 8006860:	b21b      	sxth	r3, r3
 8006862:	4a21      	ldr	r2, [pc, #132]	@ (80068e8 <check_fs+0xd4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d001      	beq.n	800686c <check_fs+0x58>
		return 2;
 8006868:	2302      	movs	r3, #2
 800686a:	e038      	b.n	80068de <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3336      	adds	r3, #54	@ 0x36
 8006870:	3303      	adds	r3, #3
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	061a      	lsls	r2, r3, #24
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3336      	adds	r3, #54	@ 0x36
 800687a:	3302      	adds	r3, #2
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3336      	adds	r3, #54	@ 0x36
 8006886:	3301      	adds	r3, #1
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	4313      	orrs	r3, r2
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8006894:	4313      	orrs	r3, r2
 8006896:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800689a:	4a14      	ldr	r2, [pc, #80]	@ (80068ec <check_fs+0xd8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d101      	bne.n	80068a4 <check_fs+0x90>
		return 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e01c      	b.n	80068de <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3352      	adds	r3, #82	@ 0x52
 80068a8:	3303      	adds	r3, #3
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	061a      	lsls	r2, r3, #24
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3352      	adds	r3, #82	@ 0x52
 80068b2:	3302      	adds	r3, #2
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	041b      	lsls	r3, r3, #16
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3352      	adds	r3, #82	@ 0x52
 80068be:	3301      	adds	r3, #1
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	4313      	orrs	r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80068d2:	4a06      	ldr	r2, [pc, #24]	@ (80068ec <check_fs+0xd8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d101      	bne.n	80068dc <check_fs+0xc8>
		return 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <check_fs+0xca>

	return 1;
 80068dc:	2301      	movs	r3, #1
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	ffffaa55 	.word	0xffffaa55
 80068ec:	00544146 	.word	0x00544146

080068f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b096      	sub	sp, #88	@ 0x58
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	4613      	mov	r3, r2
 80068fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006904:	68b8      	ldr	r0, [r7, #8]
 8006906:	f7ff ff41 	bl	800678c <get_ldnumber>
 800690a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800690c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800690e:	2b00      	cmp	r3, #0
 8006910:	da01      	bge.n	8006916 <find_volume+0x26>
 8006912:	230b      	movs	r3, #11
 8006914:	e311      	b.n	8006f3a <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006916:	4a98      	ldr	r2, [pc, #608]	@ (8006b78 <find_volume+0x288>)
 8006918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800691a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <find_volume+0x3a>
 8006926:	230c      	movs	r3, #12
 8006928:	e307      	b.n	8006f3a <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800692e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01c      	beq.n	8006976 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fac9 	bl	8004edc <disk_status>
 800694a:	4603      	mov	r3, r0
 800694c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006950:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10c      	bne.n	8006976 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <find_volume+0x82>
 8006962:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800696e:	230a      	movs	r3, #10
 8006970:	e2e3      	b.n	8006f3a <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8006972:	2300      	movs	r3, #0
 8006974:	e2e1      	b.n	8006f3a <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006982:	b2da      	uxtb	r2, r3
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800698a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800698c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fabb 	bl	8004f10 <disk_initialize>
 800699a:	4603      	mov	r3, r0
 800699c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80069a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80069ac:	2303      	movs	r3, #3
 80069ae:	e2c4      	b.n	8006f3a <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <find_volume+0xd6>
 80069b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069ba:	f003 0304 	and.w	r3, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80069c2:	230a      	movs	r3, #10
 80069c4:	e2b9      	b.n	8006f3a <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80069c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069cc:	7858      	ldrb	r0, [r3, #1]
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069d4:	330a      	adds	r3, #10
 80069d6:	461a      	mov	r2, r3
 80069d8:	2102      	movs	r1, #2
 80069da:	f7fe faff 	bl	8004fdc <disk_ioctl>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10d      	bne.n	8006a00 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80069e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ea:	895b      	ldrh	r3, [r3, #10]
 80069ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f0:	d306      	bcc.n	8006a00 <find_volume+0x110>
 80069f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f8:	895b      	ldrh	r3, [r3, #10]
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069fe:	d901      	bls.n	8006a04 <find_volume+0x114>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e29a      	b.n	8006f3a <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006a08:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a0c:	f7ff ff02 	bl	8006814 <check_fs>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006a16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d153      	bne.n	8006ac6 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006a1e:	2300      	movs	r3, #0
 8006a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a22:	e028      	b.n	8006a76 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006a24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006a2e:	4413      	add	r3, r2
 8006a30:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	3304      	adds	r3, #4
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d012      	beq.n	8006a62 <find_volume+0x172>
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3e:	330b      	adds	r3, #11
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	061a      	lsls	r2, r3, #24
 8006a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a46:	330a      	adds	r3, #10
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	041b      	lsls	r3, r3, #16
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	3309      	adds	r3, #9
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	4313      	orrs	r3, r2
 8006a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a5a:	3208      	adds	r2, #8
 8006a5c:	7812      	ldrb	r2, [r2, #0]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	e000      	b.n	8006a64 <find_volume+0x174>
 8006a62:	2200      	movs	r2, #0
 8006a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	3358      	adds	r3, #88	@ 0x58
 8006a6a:	443b      	add	r3, r7
 8006a6c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a72:	3301      	adds	r3, #1
 8006a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d9d3      	bls.n	8006a24 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <find_volume+0x19c>
 8006a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	3358      	adds	r3, #88	@ 0x58
 8006a92:	443b      	add	r3, r7
 8006a94:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006a98:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <find_volume+0x1bc>
 8006aa0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006aa2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006aa4:	f7ff feb6 	bl	8006814 <check_fs>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	e000      	b.n	8006aae <find_volume+0x1be>
 8006aac:	2302      	movs	r3, #2
 8006aae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <find_volume+0x1d6>
 8006aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006abc:	3301      	adds	r3, #1
 8006abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d9e2      	bls.n	8006a8c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ac6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d101      	bne.n	8006ad2 <find_volume+0x1e2>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e233      	b.n	8006f3a <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006ad2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <find_volume+0x1ee>
 8006ada:	230d      	movs	r3, #13
 8006adc:	e22d      	b.n	8006f3a <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	7b1b      	ldrb	r3, [r3, #12]
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	b21a      	sxth	r2, r3
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae8:	7adb      	ldrb	r3, [r3, #11]
 8006aea:	b21b      	sxth	r3, r3
 8006aec:	4313      	orrs	r3, r2
 8006aee:	b21a      	sxth	r2, r3
 8006af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af6:	895b      	ldrh	r3, [r3, #10]
 8006af8:	b21b      	sxth	r3, r3
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d001      	beq.n	8006b02 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8006afe:	230d      	movs	r3, #13
 8006b00:	e21b      	b.n	8006f3a <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b04:	7ddb      	ldrb	r3, [r3, #23]
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	b21a      	sxth	r2, r3
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	7d9b      	ldrb	r3, [r3, #22]
 8006b0e:	b21b      	sxth	r3, r3
 8006b10:	4313      	orrs	r3, r2
 8006b12:	b21b      	sxth	r3, r3
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d112      	bne.n	8006b44 <find_volume+0x254>
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b20:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006b24:	061a      	lsls	r2, r3, #24
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006b2c:	041b      	lsls	r3, r3, #16
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b3c:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8006b40:	4313      	orrs	r3, r2
 8006b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b4e:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b52:	7c1a      	ldrb	r2, [r3, #16]
 8006b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b5a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b62:	78db      	ldrb	r3, [r3, #3]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d009      	beq.n	8006b7c <find_volume+0x28c>
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b6e:	78db      	ldrb	r3, [r3, #3]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d003      	beq.n	8006b7c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8006b74:	230d      	movs	r3, #13
 8006b76:	e1e0      	b.n	8006f3a <find_volume+0x64a>
 8006b78:	200001c4 	.word	0x200001c4
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b82:	78db      	ldrb	r3, [r3, #3]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b88:	fb02 f303 	mul.w	r3, r2, r3
 8006b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b90:	7b5a      	ldrb	r2, [r3, #13]
 8006b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b98:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ba0:	789b      	ldrb	r3, [r3, #2]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <find_volume+0x2d0>
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bac:	789b      	ldrb	r3, [r3, #2]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bb6:	789b      	ldrb	r3, [r3, #2]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8006bc0:	230d      	movs	r3, #13
 8006bc2:	e1ba      	b.n	8006f3a <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	7c9b      	ldrb	r3, [r3, #18]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	b21a      	sxth	r2, r3
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	7c5b      	ldrb	r3, [r3, #17]
 8006bd0:	b21b      	sxth	r3, r3
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b21b      	sxth	r3, r3
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bde:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be6:	891b      	ldrh	r3, [r3, #8]
 8006be8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006bee:	8952      	ldrh	r2, [r2, #10]
 8006bf0:	0952      	lsrs	r2, r2, #5
 8006bf2:	b292      	uxth	r2, r2
 8006bf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bf8:	fb01 f202 	mul.w	r2, r1, r2
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8006c04:	230d      	movs	r3, #13
 8006c06:	e198      	b.n	8006f3a <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0a:	7d1b      	ldrb	r3, [r3, #20]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	b21a      	sxth	r2, r3
 8006c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c12:	7cdb      	ldrb	r3, [r3, #19]
 8006c14:	b21b      	sxth	r3, r3
 8006c16:	4313      	orrs	r3, r2
 8006c18:	b21b      	sxth	r3, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d112      	bne.n	8006c4a <find_volume+0x35a>
 8006c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c26:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006c2a:	061a      	lsls	r2, r3, #24
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006c32:	041b      	lsls	r3, r3, #16
 8006c34:	431a      	orrs	r2, r3
 8006c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4c:	7bdb      	ldrb	r3, [r3, #15]
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	b21a      	sxth	r2, r3
 8006c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c54:	7b9b      	ldrb	r3, [r3, #14]
 8006c56:	b21b      	sxth	r3, r3
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	b21b      	sxth	r3, r3
 8006c5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006c5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <find_volume+0x378>
 8006c64:	230d      	movs	r3, #13
 8006c66:	e168      	b.n	8006f3a <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006c68:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c6c:	4413      	add	r3, r2
 8006c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c74:	8911      	ldrh	r1, [r2, #8]
 8006c76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c7c:	8952      	ldrh	r2, [r2, #10]
 8006c7e:	0952      	lsrs	r2, r2, #5
 8006c80:	b292      	uxth	r2, r2
 8006c82:	fbb1 f2f2 	udiv	r2, r1, r2
 8006c86:	b292      	uxth	r2, r2
 8006c88:	4413      	add	r3, r2
 8006c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d201      	bcs.n	8006c98 <find_volume+0x3a8>
 8006c94:	230d      	movs	r3, #13
 8006c96:	e150      	b.n	8006f3a <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006c98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ca0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ca4:	7892      	ldrb	r2, [r2, #2]
 8006ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006caa:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <find_volume+0x3c6>
 8006cb2:	230d      	movs	r3, #13
 8006cb4:	e141      	b.n	8006f3a <find_volume+0x64a>
	fmt = FS_FAT12;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d902      	bls.n	8006ccc <find_volume+0x3dc>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d902      	bls.n	8006cdc <find_volume+0x3ec>
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	3302      	adds	r3, #2
 8006ce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ce2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ce6:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cf2:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006cf4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cf8:	4413      	add	r3, r2
 8006cfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d00:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8006d02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d06:	4413      	add	r3, r2
 8006d08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d0e:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8006d10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d124      	bne.n	8006d62 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d1e:	891b      	ldrh	r3, [r3, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <find_volume+0x438>
 8006d24:	230d      	movs	r3, #13
 8006d26:	e108      	b.n	8006f3a <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006d2e:	061a      	lsls	r2, r3, #24
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	4313      	orrs	r3, r2
 8006d44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d46:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d52:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d60:	e02b      	b.n	8006dba <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d68:	891b      	ldrh	r3, [r3, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <find_volume+0x482>
 8006d6e:	230d      	movs	r3, #13
 8006d70:	e0e3      	b.n	8006f3a <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d78:	6a1a      	ldr	r2, [r3, #32]
 8006d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d7c:	4413      	add	r3, r2
 8006d7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d84:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006d86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d105      	bne.n	8006d9a <find_volume+0x4aa>
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	e00e      	b.n	8006db8 <find_volume+0x4c8>
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da0:	695a      	ldr	r2, [r3, #20]
 8006da2:	4613      	mov	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	085a      	lsrs	r2, r3, #1
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006db8:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc8:	895b      	ldrh	r3, [r3, #10]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dce:	440b      	add	r3, r1
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006dd4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8006dd8:	8949      	ldrh	r1, [r1, #10]
 8006dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d201      	bcs.n	8006de6 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8006de2:	230d      	movs	r3, #13
 8006de4:	e0a9      	b.n	8006f3a <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dec:	461a      	mov	r2, r3
 8006dee:	f04f 33ff 	mov.w	r3, #4294967295
 8006df2:	6113      	str	r3, [r2, #16]
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e02:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e0a:	2280      	movs	r2, #128	@ 0x80
 8006e0c:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006e0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d17a      	bne.n	8006f0c <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	b21a      	sxth	r2, r3
 8006e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e26:	b21b      	sxth	r3, r3
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	b21b      	sxth	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d16d      	bne.n	8006f0c <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e32:	3301      	adds	r3, #1
 8006e34:	4619      	mov	r1, r3
 8006e36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e38:	f7fe fb76 	bl	8005528 <move_window>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d164      	bne.n	8006f0c <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8006e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e48:	2200      	movs	r2, #0
 8006e4a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	b21a      	sxth	r2, r3
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8006e5c:	b21b      	sxth	r3, r3
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	b21b      	sxth	r3, r3
 8006e62:	4a38      	ldr	r2, [pc, #224]	@ (8006f44 <find_volume+0x654>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d151      	bne.n	8006f0c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6a:	78db      	ldrb	r3, [r3, #3]
 8006e6c:	061a      	lsls	r2, r3, #24
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e70:	789b      	ldrb	r3, [r3, #2]
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	431a      	orrs	r2, r3
 8006e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e80:	7812      	ldrb	r2, [r2, #0]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	4a30      	ldr	r2, [pc, #192]	@ (8006f48 <find_volume+0x658>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d140      	bne.n	8006f0c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8c:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8006e90:	061a      	lsls	r2, r3, #24
 8006e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e94:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8006e98:	041b      	lsls	r3, r3, #16
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9e:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ea8:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8006eac:	4313      	orrs	r3, r2
 8006eae:	4a27      	ldr	r2, [pc, #156]	@ (8006f4c <find_volume+0x65c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d12b      	bne.n	8006f0c <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb6:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8006eba:	061a      	lsls	r2, r3, #24
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec8:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ed2:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ede:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee2:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8006ee6:	061a      	lsls	r2, r3, #24
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eea:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	4313      	orrs	r3, r2
 8006efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006efe:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8006f02:	4313      	orrs	r3, r2
 8006f04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f0a:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f12:	461a      	mov	r2, r3
 8006f14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f18:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <find_volume+0x660>)
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <find_volume+0x660>)
 8006f24:	801a      	strh	r2, [r3, #0]
 8006f26:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <find_volume+0x660>)
 8006f28:	881a      	ldrh	r2, [r3, #0]
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f30:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006f32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f34:	f7fe fa7c 	bl	8005430 <clear_lock>
#endif

	return FR_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3758      	adds	r7, #88	@ 0x58
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	ffffaa55 	.word	0xffffaa55
 8006f48:	41615252 	.word	0x41615252
 8006f4c:	61417272 	.word	0x61417272
 8006f50:	200001c8 	.word	0x200001c8

08006f54 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d02a      	beq.n	8006fbc <validate+0x68>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d024      	beq.n	8006fbc <validate+0x68>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01b      	beq.n	8006fbc <validate+0x68>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f90:	88da      	ldrh	r2, [r3, #6]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f98:	889b      	ldrh	r3, [r3, #4]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d10e      	bne.n	8006fbc <validate+0x68>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fd ff95 	bl	8004edc <disk_status>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8006fbc:	2309      	movs	r3, #9
 8006fbe:	e000      	b.n	8006fc2 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006fde:	f107 0310 	add.w	r3, r7, #16
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff fbd2 	bl	800678c <get_ldnumber>
 8006fe8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da01      	bge.n	8006ff4 <f_mount+0x28>
 8006ff0:	230b      	movs	r3, #11
 8006ff2:	e02f      	b.n	8007054 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ff4:	4a19      	ldr	r2, [pc, #100]	@ (800705c <f_mount+0x90>)
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ffc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007004:	69b8      	ldr	r0, [r7, #24]
 8007006:	f7fe fa13 	bl	8005430 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	490d      	ldr	r1, [pc, #52]	@ (800705c <f_mount+0x90>)
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <f_mount+0x6e>
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d001      	beq.n	800703e <f_mount+0x72>
 800703a:	2300      	movs	r3, #0
 800703c:	e00a      	b.n	8007054 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800703e:	f107 0108 	add.w	r1, r7, #8
 8007042:	f107 030c 	add.w	r3, r7, #12
 8007046:	2200      	movs	r2, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff fc51 	bl	80068f0 <find_volume>
 800704e:	4603      	mov	r3, r0
 8007050:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007052:	7dfb      	ldrb	r3, [r7, #23]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	200001c4 	.word	0x200001c4

08007060 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800706e:	f843 0c44 	str.w	r0, [r3, #-68]
 8007072:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007076:	f843 1c48 	str.w	r1, [r3, #-72]
 800707a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800707e:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007082:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007086:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <f_open+0x32>
 800708e:	2309      	movs	r3, #9
 8007090:	e2e2      	b.n	8007658 <f_open+0x5f8>
	fp->fs = 0;			/* Clear file object */
 8007092:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007096:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800709a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800709e:	461a      	mov	r2, r3
 80070a0:	2300      	movs	r3, #0
 80070a2:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80070a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80070a8:	461a      	mov	r2, r3
 80070aa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80070ae:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80070b2:	f003 031f 	and.w	r3, r3, #31
 80070b6:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80070ba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80070be:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80070c2:	f023 0301 	bic.w	r3, r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	f107 0110 	add.w	r1, r7, #16
 80070cc:	3908      	subs	r1, #8
 80070ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80070d2:	3b10      	subs	r3, #16
 80070d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff fc09 	bl	80068f0 <find_volume>
 80070de:	4603      	mov	r3, r0
 80070e0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80070e4:	f102 020f 	add.w	r2, r2, #15
 80070e8:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80070ea:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80070ee:	f103 030f 	add.w	r3, r3, #15
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f040 82aa 	bne.w	800764e <f_open+0x5ee>
		INIT_BUF(dj);
 80070fa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80070fe:	461a      	mov	r2, r3
 8007100:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007104:	3b1c      	subs	r3, #28
 8007106:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800710a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800710e:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8007112:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007116:	3b10      	subs	r3, #16
 8007118:	4611      	mov	r1, r2
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fac0 	bl	80066a0 <follow_path>
 8007120:	4603      	mov	r3, r0
 8007122:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007126:	f102 020f 	add.w	r2, r2, #15
 800712a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800712c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007130:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8007134:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007138:	f102 0208 	add.w	r2, r2, #8
 800713c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800713e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007142:	f103 030f 	add.w	r3, r3, #15
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d124      	bne.n	8007196 <f_open+0x136>
			if (!dir)	/* Default directory itself */
 800714c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007150:	f103 0308 	add.w	r3, r3, #8
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <f_open+0x108>
				res = FR_INVALID_NAME;
 800715a:	2306      	movs	r3, #6
 800715c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007160:	f102 020f 	add.w	r2, r2, #15
 8007164:	7013      	strb	r3, [r2, #0]
 8007166:	e016      	b.n	8007196 <f_open+0x136>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007168:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800716c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007170:	2b01      	cmp	r3, #1
 8007172:	bf8c      	ite	hi
 8007174:	2301      	movhi	r3, #1
 8007176:	2300      	movls	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007180:	3b10      	subs	r3, #16
 8007182:	4611      	mov	r1, r2
 8007184:	4618      	mov	r0, r3
 8007186:	f7fd ffbf 	bl	8005108 <chk_lock>
 800718a:	4603      	mov	r3, r0
 800718c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007190:	f102 020f 	add.w	r2, r2, #15
 8007194:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007196:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800719a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800719e:	f003 031c 	and.w	r3, r3, #28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 8134 	beq.w	8007410 <f_open+0x3b0>
			if (res != FR_OK) {					/* No file, create new */
 80071a8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80071ac:	f103 030f 	add.w	r3, r3, #15
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d02e      	beq.n	8007214 <f_open+0x1b4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80071b6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80071ba:	f103 030f 	add.w	r3, r3, #15
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d112      	bne.n	80071ea <f_open+0x18a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80071c4:	f7fe f810 	bl	80051e8 <enq_lock>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <f_open+0x17e>
 80071ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80071d2:	3b10      	subs	r3, #16
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff f960 	bl	800649a <dir_register>
 80071da:	4603      	mov	r3, r0
 80071dc:	e000      	b.n	80071e0 <f_open+0x180>
 80071de:	2312      	movs	r3, #18
 80071e0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80071e4:	f102 020f 	add.w	r2, r2, #15
 80071e8:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80071ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80071ee:	461a      	mov	r2, r3
 80071f0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80071f4:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80071f8:	f043 0308 	orr.w	r3, r3, #8
 80071fc:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8007200:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007204:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8007208:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800720c:	f102 0208 	add.w	r2, r2, #8
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	e01f      	b.n	8007254 <f_open+0x1f4>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007214:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007218:	f103 0308 	add.w	r3, r3, #8
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	330b      	adds	r3, #11
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	f003 0311 	and.w	r3, r3, #17
 8007226:	2b00      	cmp	r3, #0
 8007228:	d006      	beq.n	8007238 <f_open+0x1d8>
					res = FR_DENIED;
 800722a:	2307      	movs	r3, #7
 800722c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007230:	f102 020f 	add.w	r2, r2, #15
 8007234:	7013      	strb	r3, [r2, #0]
 8007236:	e00d      	b.n	8007254 <f_open+0x1f4>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007238:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800723c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <f_open+0x1f4>
						res = FR_EXIST;
 8007248:	2308      	movs	r3, #8
 800724a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800724e:	f102 020f 	add.w	r2, r2, #15
 8007252:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007254:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007258:	f103 030f 	add.w	r3, r3, #15
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f040 8108 	bne.w	8007474 <f_open+0x414>
 8007264:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007268:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 80ff 	beq.w	8007474 <f_open+0x414>
				dw = GET_FATTIME();				/* Created time */
 8007276:	f7fd fdd5 	bl	8004e24 <get_fattime>
 800727a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800727e:	f103 0304 	add.w	r3, r3, #4
 8007282:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007284:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007288:	f103 0308 	add.w	r3, r3, #8
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330e      	adds	r3, #14
 8007290:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007294:	f102 0204 	add.w	r2, r2, #4
 8007298:	6812      	ldr	r2, [r2, #0]
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80072a2:	f103 0304 	add.w	r3, r3, #4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80072b2:	f103 0308 	add.w	r3, r3, #8
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330f      	adds	r3, #15
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80072c2:	f103 0304 	add.w	r3, r3, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	0c1a      	lsrs	r2, r3, #16
 80072ca:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80072ce:	f103 0308 	add.w	r3, r3, #8
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3310      	adds	r3, #16
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80072de:	f103 0304 	add.w	r3, r3, #4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	0e1a      	lsrs	r2, r3, #24
 80072e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80072ea:	f103 0308 	add.w	r3, r3, #8
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3311      	adds	r3, #17
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80072f6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80072fa:	f103 0308 	add.w	r3, r3, #8
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	330b      	adds	r3, #11
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007306:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800730a:	f103 0308 	add.w	r3, r3, #8
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	331c      	adds	r3, #28
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800731a:	f103 0308 	add.w	r3, r3, #8
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	331d      	adds	r3, #29
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800732a:	f103 0308 	add.w	r3, r3, #8
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	331e      	adds	r3, #30
 8007332:	2200      	movs	r2, #0
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800733a:	f103 0308 	add.w	r3, r3, #8
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	331f      	adds	r3, #31
 8007342:	2200      	movs	r2, #0
 8007344:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007346:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800734a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800734e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007352:	f102 0208 	add.w	r2, r2, #8
 8007356:	6811      	ldr	r1, [r2, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe fff7 	bl	800634c <ld_clust>
 800735e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007362:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007364:	2100      	movs	r1, #0
 8007366:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800736a:	f103 0308 	add.w	r3, r3, #8
 800736e:	6818      	ldr	r0, [r3, #0]
 8007370:	f7ff f81a 	bl	80063a8 <st_clust>
				dj.fs->wflag = 1;
 8007374:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007378:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800737c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007380:	2201      	movs	r2, #1
 8007382:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007384:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d072      	beq.n	8007474 <f_open+0x414>
					dw = dj.fs->winsect;
 800738e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007392:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 8007396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80073a0:	f102 0204 	add.w	r2, r2, #4
 80073a4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80073a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80073aa:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 80073ae:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80073b2:	6811      	ldr	r1, [r2, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fc1a 	bl	8005bee <remove_chain>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80073c0:	f102 020f 	add.w	r2, r2, #15
 80073c4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80073c6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80073ca:	f103 030f 	add.w	r3, r3, #15
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d14f      	bne.n	8007474 <f_open+0x414>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80073d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80073d8:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	@ 0xfd0
 80073dc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80073e8:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80073ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80073ee:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 80073f2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80073f6:	f102 0204 	add.w	r2, r2, #4
 80073fa:	6811      	ldr	r1, [r2, #0]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe f893 	bl	8005528 <move_window>
 8007402:	4603      	mov	r3, r0
 8007404:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007408:	f102 020f 	add.w	r2, r2, #15
 800740c:	7013      	strb	r3, [r2, #0]
 800740e:	e031      	b.n	8007474 <f_open+0x414>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007410:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007414:	f103 030f 	add.w	r3, r3, #15
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d12a      	bne.n	8007474 <f_open+0x414>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800741e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007422:	f103 0308 	add.w	r3, r3, #8
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330b      	adds	r3, #11
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	d006      	beq.n	8007442 <f_open+0x3e2>
					res = FR_NO_FILE;
 8007434:	2304      	movs	r3, #4
 8007436:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800743a:	f102 020f 	add.w	r2, r2, #15
 800743e:	7013      	strb	r3, [r2, #0]
 8007440:	e018      	b.n	8007474 <f_open+0x414>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007442:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007446:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d010      	beq.n	8007474 <f_open+0x414>
 8007452:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007456:	f103 0308 	add.w	r3, r3, #8
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330b      	adds	r3, #11
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <f_open+0x414>
						res = FR_DENIED;
 8007468:	2307      	movs	r3, #7
 800746a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800746e:	f102 020f 	add.w	r2, r2, #15
 8007472:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007474:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007478:	f103 030f 	add.w	r3, r3, #15
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d155      	bne.n	800752e <f_open+0x4ce>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007482:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007486:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <f_open+0x448>
				mode |= FA__WRITTEN;
 8007492:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007496:	461a      	mov	r2, r3
 8007498:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800749c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80074a0:	f043 0320 	orr.w	r3, r3, #32
 80074a4:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80074a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80074ac:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 80074b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80074ba:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80074be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80074c2:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80074c4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80074c8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80074cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074d0:	461a      	mov	r2, r3
 80074d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80074d6:	f103 0308 	add.w	r3, r3, #8
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80074e2:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	bf8c      	ite	hi
 80074ea:	2301      	movhi	r3, #1
 80074ec:	2300      	movls	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80074f6:	3b10      	subs	r3, #16
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fd fe98 	bl	8005230 <inc_lock>
 8007500:	4602      	mov	r2, r0
 8007502:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007506:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800750a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800750e:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007510:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007514:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007518:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800751c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <f_open+0x4ce>
 8007522:	2302      	movs	r3, #2
 8007524:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007528:	f102 020f 	add.w	r2, r2, #15
 800752c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800752e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007532:	f103 030f 	add.w	r3, r3, #15
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f040 8088 	bne.w	800764e <f_open+0x5ee>
			fp->flag = mode;					/* File access mode */
 800753e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007542:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800754a:	461a      	mov	r2, r3
 800754c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007550:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007554:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007556:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800755a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800755e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007562:	2200      	movs	r2, #0
 8007564:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007566:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800756a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800756e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007572:	f102 0208 	add.w	r2, r2, #8
 8007576:	6811      	ldr	r1, [r2, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fee7 	bl	800634c <ld_clust>
 800757e:	4602      	mov	r2, r0
 8007580:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007584:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800758c:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800758e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007592:	f103 0308 	add.w	r3, r3, #8
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	331f      	adds	r3, #31
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	061a      	lsls	r2, r3, #24
 800759e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80075a2:	f103 0308 	add.w	r3, r3, #8
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	331e      	adds	r3, #30
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	041b      	lsls	r3, r3, #16
 80075ae:	431a      	orrs	r2, r3
 80075b0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80075b4:	f103 0308 	add.w	r3, r3, #8
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	331d      	adds	r3, #29
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80075c6:	f102 0208 	add.w	r2, r2, #8
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	321c      	adds	r2, #28
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80075d6:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80075da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075de:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80075e0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80075e4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80075f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80075f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075fe:	461a      	mov	r2, r3
 8007600:	2300      	movs	r3, #0
 8007602:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007604:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007608:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800760c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007610:	461a      	mov	r2, r3
 8007612:	2300      	movs	r3, #0
 8007614:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007616:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800761a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800761e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8007622:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8007626:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800762a:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800762c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007630:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800763e:	88da      	ldrh	r2, [r3, #6]
 8007640:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007644:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800764c:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800764e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007652:	f103 030f 	add.w	r3, r3, #15
 8007656:	781b      	ldrb	r3, [r3, #0]
}
 8007658:	4618      	mov	r0, r3
 800765a:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	@ 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fc69 	bl	8006f54 <validate>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <f_write+0x2c>
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	e21e      	b.n	8007ace <f_write+0x46a>
	if (fp->err)							/* Check error */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007696:	79db      	ldrb	r3, [r3, #7]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076a2:	79db      	ldrb	r3, [r3, #7]
 80076a4:	e213      	b.n	8007ace <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ac:	799b      	ldrb	r3, [r3, #6]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80076b6:	2307      	movs	r3, #7
 80076b8:	e209      	b.n	8007ace <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076c0:	689a      	ldr	r2, [r3, #8]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	441a      	add	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	f080 81d9 	bcs.w	8007a86 <f_write+0x422>
 80076d4:	2300      	movs	r3, #0
 80076d6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80076d8:	e1d5      	b.n	8007a86 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80076ee:	8952      	ldrh	r2, [r2, #10]
 80076f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80076f4:	fb01 f202 	mul.w	r2, r1, r2
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f040 8169 	bne.w	80079d2 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007714:	8952      	ldrh	r2, [r2, #10]
 8007716:	fbb3 f3f2 	udiv	r3, r3, r2
 800771a:	b2da      	uxtb	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007728:	789b      	ldrb	r3, [r3, #2]
 800772a:	3b01      	subs	r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	4013      	ands	r3, r2
 8007730:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007732:	7dbb      	ldrb	r3, [r7, #22]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d15f      	bne.n	80077f8 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d111      	bne.n	8007768 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d126      	bne.n	80077a2 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2100      	movs	r1, #0
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe faa6 	bl	8005cb0 <create_chain>
 8007764:	6278      	str	r0, [r7, #36]	@ 0x24
 8007766:	e01c      	b.n	80077a2 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d009      	beq.n	8007788 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	4619      	mov	r1, r3
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7fe fb3e 	bl	8005e00 <clmt_clust>
 8007784:	6278      	str	r0, [r7, #36]	@ 0x24
 8007786:	e00c      	b.n	80077a2 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7fe fa88 	bl	8005cb0 <create_chain>
 80077a0:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8173 	beq.w	8007a90 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d106      	bne.n	80077be <f_write+0x15a>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077b6:	2202      	movs	r2, #2
 80077b8:	71da      	strb	r2, [r3, #7]
 80077ba:	2302      	movs	r3, #2
 80077bc:	e187      	b.n	8007ace <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d106      	bne.n	80077d4 <f_write+0x170>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077cc:	2201      	movs	r2, #1
 80077ce:	71da      	strb	r2, [r3, #7]
 80077d0:	2301      	movs	r3, #1
 80077d2:	e17c      	b.n	8007ace <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077da:	461a      	mov	r2, r3
 80077dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077de:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d105      	bne.n	80077f8 <f_write+0x194>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077f2:	461a      	mov	r2, r3
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077fe:	799b      	ldrb	r3, [r3, #6]
 8007800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d023      	beq.n	8007850 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007814:	7858      	ldrb	r0, [r3, #1]
 8007816:	68f9      	ldr	r1, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800781e:	699a      	ldr	r2, [r3, #24]
 8007820:	2301      	movs	r3, #1
 8007822:	f7fd fbbb 	bl	8004f9c <disk_write>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d006      	beq.n	800783a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007832:	2201      	movs	r2, #1
 8007834:	71da      	strb	r2, [r3, #7]
 8007836:	2301      	movs	r3, #1
 8007838:	e149      	b.n	8007ace <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007840:	799b      	ldrb	r3, [r3, #6]
 8007842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007846:	b2da      	uxtb	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800784e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f7fd ff51 	bl	800570a <clust2sect>
 8007868:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d106      	bne.n	800787e <f_write+0x21a>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007876:	2202      	movs	r2, #2
 8007878:	71da      	strb	r2, [r3, #7]
 800787a:	2302      	movs	r3, #2
 800787c:	e127      	b.n	8007ace <f_write+0x46a>
			sect += csect;
 800787e:	7dbb      	ldrb	r3, [r7, #22]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007892:	895b      	ldrh	r3, [r3, #10]
 8007894:	461a      	mov	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	fbb3 f3f2 	udiv	r3, r3, r2
 800789c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d069      	beq.n	8007978 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80078a4:	7dba      	ldrb	r2, [r7, #22]
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	4413      	add	r3, r2
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078b6:	7892      	ldrb	r2, [r2, #2]
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d90a      	bls.n	80078d2 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078c8:	789b      	ldrb	r3, [r3, #2]
 80078ca:	461a      	mov	r2, r3
 80078cc:	7dbb      	ldrb	r3, [r7, #22]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078de:	7858      	ldrb	r0, [r3, #1]
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	69b9      	ldr	r1, [r7, #24]
 80078e6:	f7fd fb59 	bl	8004f9c <disk_write>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d006      	beq.n	80078fe <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078f6:	2201      	movs	r2, #1
 80078f8:	71da      	strb	r2, [r3, #7]
 80078fa:	2301      	movs	r3, #1
 80078fc:	e0e7      	b.n	8007ace <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	429a      	cmp	r2, r3
 800790e:	d926      	bls.n	800795e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800792a:	8952      	ldrh	r2, [r2, #10]
 800792c:	fb02 f303 	mul.w	r3, r2, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	18d1      	adds	r1, r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007940:	895b      	ldrh	r3, [r3, #10]
 8007942:	461a      	mov	r2, r3
 8007944:	f7fd fb68 	bl	8005018 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800794e:	799b      	ldrb	r3, [r3, #6]
 8007950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007954:	b2da      	uxtb	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800795c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800796a:	895b      	ldrh	r3, [r3, #10]
 800796c:	461a      	mov	r2, r3
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	fb02 f303 	mul.w	r3, r2, r3
 8007974:	623b      	str	r3, [r7, #32]
				continue;
 8007976:	e06e      	b.n	8007a56 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	429a      	cmp	r2, r3
 8007984:	d01f      	beq.n	80079c6 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	429a      	cmp	r2, r3
 8007998:	d215      	bcs.n	80079c6 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079a6:	7858      	ldrb	r0, [r3, #1]
 80079a8:	68f9      	ldr	r1, [r7, #12]
 80079aa:	2301      	movs	r3, #1
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	f7fd fad5 	bl	8004f5c <disk_read>
 80079b2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d006      	beq.n	80079c6 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079be:	2201      	movs	r2, #1
 80079c0:	71da      	strb	r2, [r3, #7]
 80079c2:	2301      	movs	r3, #1
 80079c4:	e083      	b.n	8007ace <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079cc:	461a      	mov	r2, r3
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079de:	895b      	ldrh	r3, [r3, #10]
 80079e0:	4618      	mov	r0, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079f6:	8952      	ldrh	r2, [r2, #10]
 80079f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80079fc:	fb01 f202 	mul.w	r2, r1, r2
 8007a00:	1a9b      	subs	r3, r3, r2
 8007a02:	1ac3      	subs	r3, r0, r3
 8007a04:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007a06:	6a3a      	ldr	r2, [r7, #32]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d901      	bls.n	8007a12 <f_write+0x3ae>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a26:	8952      	ldrh	r2, [r2, #10]
 8007a28:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a2c:	fb01 f202 	mul.w	r2, r1, r2
 8007a30:	1a9b      	subs	r3, r3, r2
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	6a3a      	ldr	r2, [r7, #32]
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fd faec 	bl	8005018 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a46:	799b      	ldrb	r3, [r3, #6]
 8007a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a54:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	4413      	add	r3, r2
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a70:	6093      	str	r3, [r2, #8]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	441a      	add	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f47f ae26 	bne.w	80076da <f_write+0x76>
 8007a8e:	e000      	b.n	8007a92 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a90:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d907      	bls.n	8007ab6 <f_write+0x452>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ab4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007abc:	799b      	ldrb	r3, [r3, #6]
 8007abe:	f043 0320 	orr.w	r3, r3, #32
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aca:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3728      	adds	r7, #40	@ 0x28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b086      	sub	sp, #24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff fa38 	bl	8006f54 <validate>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 80bc 	bne.w	8007c68 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007af6:	799b      	ldrb	r3, [r3, #6]
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80b3 	beq.w	8007c68 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b08:	799b      	ldrb	r3, [r3, #6]
 8007b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d01e      	beq.n	8007b50 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b1e:	7858      	ldrb	r0, [r3, #1]
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f7fd fa36 	bl	8004f9c <disk_write>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007b36:	2301      	movs	r3, #1
 8007b38:	e097      	b.n	8007c6a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b40:	799b      	ldrb	r3, [r3, #6]
 8007b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b4e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f7fd fce0 	bl	8005528 <move_window>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d17a      	bne.n	8007c68 <f_sync+0x192>
				dir = fp->dir_ptr;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	330b      	adds	r3, #11
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	330b      	adds	r3, #11
 8007b86:	f042 0220 	orr.w	r2, r2, #32
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	331c      	adds	r3, #28
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	0a1b      	lsrs	r3, r3, #8
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	331d      	adds	r3, #29
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	0c1a      	lsrs	r2, r3, #16
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	331e      	adds	r3, #30
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	0e1a      	lsrs	r2, r3, #24
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	331f      	adds	r3, #31
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	4619      	mov	r1, r3
 8007be2:	6938      	ldr	r0, [r7, #16]
 8007be4:	f7fe fbe0 	bl	80063a8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007be8:	f7fd f91c 	bl	8004e24 <get_fattime>
 8007bec:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	3316      	adds	r3, #22
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	0a1b      	lsrs	r3, r3, #8
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	3317      	adds	r3, #23
 8007c04:	b2d2      	uxtb	r2, r2
 8007c06:	701a      	strb	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	0c1a      	lsrs	r2, r3, #16
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	3318      	adds	r3, #24
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	0e1a      	lsrs	r2, r3, #24
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	3319      	adds	r3, #25
 8007c1c:	b2d2      	uxtb	r2, r2
 8007c1e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3312      	adds	r3, #18
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	3313      	adds	r3, #19
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c36:	799b      	ldrb	r3, [r3, #6]
 8007c38:	f023 0320 	bic.w	r3, r3, #32
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c44:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c52:	2201      	movs	r2, #1
 8007c54:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fd fc94 	bl	800558c <sync_fs>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff ff2b 	bl	8007ad6 <f_sync>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d119      	bne.n	8007cbe <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff f962 	bl	8006f54 <validate>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d111      	bne.n	8007cbe <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fd fb80 	bl	80053a8 <dec_lock>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d105      	bne.n	8007cbe <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cb8:	461a      	mov	r2, r3
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b090      	sub	sp, #64	@ 0x40
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff f93e 	bl	8006f54 <validate>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007cde:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <f_lseek+0x24>
 8007ce6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007cea:	e2da      	b.n	80082a2 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cf2:	79db      	ldrb	r3, [r3, #7]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d004      	beq.n	8007d02 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cfe:	79db      	ldrb	r3, [r3, #7]
 8007d00:	e2cf      	b.n	80082a2 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 8124 	beq.w	8007f58 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d16:	d16c      	bne.n	8007df2 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d20:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	1d1a      	adds	r2, r3, #4
 8007d26:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d046      	beq.n	8007dce <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	613b      	str	r3, [r7, #16]
 8007d44:	2300      	movs	r3, #0
 8007d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	3302      	adds	r3, #2
 8007d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	3301      	adds	r3, #1
 8007d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fd fcf5 	bl	8005752 <get_fat>
 8007d68:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d806      	bhi.n	8007d7e <f_lseek+0xb6>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d76:	2202      	movs	r2, #2
 8007d78:	71da      	strb	r2, [r3, #7]
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	e291      	b.n	80082a2 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d84:	d106      	bne.n	8007d94 <f_lseek+0xcc>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	71da      	strb	r2, [r3, #7]
 8007d90:	2301      	movs	r3, #1
 8007d92:	e286      	b.n	80082a2 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3301      	adds	r3, #1
 8007d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d0d7      	beq.n	8007d4e <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007d9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d809      	bhi.n	8007dba <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	1d1a      	adds	r2, r3, #4
 8007daa:	627a      	str	r2, [r7, #36]	@ 0x24
 8007dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	1d1a      	adds	r2, r3, #4
 8007db4:	627a      	str	r2, [r7, #36]	@ 0x24
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d3b8      	bcc.n	8007d40 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dd8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d803      	bhi.n	8007dea <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	e259      	b.n	800829e <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007dea:	2311      	movs	r3, #17
 8007dec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007df0:	e255      	b.n	800829e <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d904      	bls.n	8007e0a <f_lseek+0x142>
				ofs = fp->fsize;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e10:	461a      	mov	r2, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8240 	beq.w	800829e <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7fd ffeb 	bl	8005e00 <clmt_clust>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e32:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	4619      	mov	r1, r3
 8007e46:	4610      	mov	r0, r2
 8007e48:	f7fd fc5f 	bl	800570a <clust2sect>
 8007e4c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d106      	bne.n	8007e62 <f_lseek+0x19a>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	71da      	strb	r2, [r3, #7]
 8007e5e:	2302      	movs	r3, #2
 8007e60:	e21f      	b.n	80082a2 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e6c:	6812      	ldr	r2, [r2, #0]
 8007e6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e72:	8952      	ldrh	r2, [r2, #10]
 8007e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e7e:	6812      	ldr	r2, [r2, #0]
 8007e80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e84:	7892      	ldrb	r2, [r2, #2]
 8007e86:	3a01      	subs	r2, #1
 8007e88:	4013      	ands	r3, r2
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ea4:	8952      	ldrh	r2, [r2, #10]
 8007ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eaa:	fb01 f202 	mul.w	r2, r1, r2
 8007eae:	1a9b      	subs	r3, r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 81f4 	beq.w	800829e <f_lseek+0x5d6>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	f000 81ec 	beq.w	800829e <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ecc:	799b      	ldrb	r3, [r3, #6]
 8007ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d023      	beq.n	8007f1e <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ee2:	7858      	ldrb	r0, [r3, #1]
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f7fd f854 	bl	8004f9c <disk_write>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f00:	2201      	movs	r2, #1
 8007f02:	71da      	strb	r2, [r3, #7]
 8007f04:	2301      	movs	r3, #1
 8007f06:	e1cc      	b.n	80082a2 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f0e:	799b      	ldrb	r3, [r3, #6]
 8007f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f1c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f2a:	7858      	ldrb	r0, [r3, #1]
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	2301      	movs	r3, #1
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	f7fd f813 	bl	8004f5c <disk_read>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d006      	beq.n	8007f4a <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f42:	2201      	movs	r2, #1
 8007f44:	71da      	strb	r2, [r3, #7]
 8007f46:	2301      	movs	r3, #1
 8007f48:	e1ab      	b.n	80082a2 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f50:	461a      	mov	r2, r3
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	6193      	str	r3, [r2, #24]
 8007f56:	e1a2      	b.n	800829e <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d90c      	bls.n	8007f80 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f6c:	799b      	ldrb	r3, [r3, #6]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f94:	461a      	mov	r2, r3
 8007f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f98:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8100 	beq.w	80081a2 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fae:	789b      	ldrb	r3, [r3, #2]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fbe:	895b      	ldrh	r3, [r3, #10]
 8007fc0:	fb02 f303 	mul.w	r3, r2, r3
 8007fc4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d021      	beq.n	8008010 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	1e5a      	subs	r2, r3, #1
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	1e59      	subs	r1, r3, #1
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d315      	bcc.n	8008010 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	1e5a      	subs	r2, r3, #1
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	425b      	negs	r3, r3
 8007fec:	4013      	ands	r3, r2
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ff4:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800800e:	e031      	b.n	8008074 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800801a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801c:	2b00      	cmp	r3, #0
 800801e:	d123      	bne.n	8008068 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2100      	movs	r1, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f7fd fe40 	bl	8005cb0 <create_chain>
 8008030:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008034:	2b01      	cmp	r3, #1
 8008036:	d106      	bne.n	8008046 <f_lseek+0x37e>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800803e:	2202      	movs	r2, #2
 8008040:	71da      	strb	r2, [r3, #7]
 8008042:	2302      	movs	r3, #2
 8008044:	e12d      	b.n	80082a2 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d106      	bne.n	800805c <f_lseek+0x394>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008054:	2201      	movs	r2, #1
 8008056:	71da      	strb	r2, [r3, #7]
 8008058:	2301      	movs	r3, #1
 800805a:	e122      	b.n	80082a2 <f_lseek+0x5da>
					fp->sclust = clst;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008062:	461a      	mov	r2, r3
 8008064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008066:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800806e:	461a      	mov	r2, r3
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 8093 	beq.w	80081a2 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800807c:	e052      	b.n	8008124 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008084:	799b      	ldrb	r3, [r3, #6]
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00e      	beq.n	80080ac <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008098:	4618      	mov	r0, r3
 800809a:	f7fd fe09 	bl	8005cb0 <create_chain>
 800809e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10b      	bne.n	80080be <f_lseek+0x3f6>
							ofs = bcs; break;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	e03f      	b.n	800812c <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fd fb4b 	bl	8005752 <get_fat>
 80080bc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80080be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c4:	d106      	bne.n	80080d4 <f_lseek+0x40c>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080cc:	2201      	movs	r2, #1
 80080ce:	71da      	strb	r2, [r3, #7]
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0e6      	b.n	80082a2 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80080d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d909      	bls.n	80080ee <f_lseek+0x426>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d306      	bcc.n	80080fc <f_lseek+0x434>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080f4:	2202      	movs	r2, #2
 80080f6:	71da      	strb	r2, [r3, #7]
 80080f8:	2302      	movs	r3, #2
 80080fa:	e0d2      	b.n	80082a2 <f_lseek+0x5da>
					fp->clust = clst;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008102:	461a      	mov	r2, r3
 8008104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008106:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800811a:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	429a      	cmp	r2, r3
 800812a:	d8a8      	bhi.n	800807e <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	4413      	add	r3, r2
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800813e:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800814c:	895b      	ldrh	r3, [r3, #10]
 800814e:	461a      	mov	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	fbb3 f1f2 	udiv	r1, r3, r2
 8008156:	fb01 f202 	mul.w	r2, r1, r2
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d020      	beq.n	80081a2 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800816a:	4618      	mov	r0, r3
 800816c:	f7fd facd 	bl	800570a <clust2sect>
 8008170:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <f_lseek+0x4be>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800817e:	2202      	movs	r2, #2
 8008180:	71da      	strb	r2, [r3, #7]
 8008182:	2302      	movs	r3, #2
 8008184:	e08d      	b.n	80082a2 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008192:	895b      	ldrh	r3, [r3, #10]
 8008194:	461a      	mov	r2, r3
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	fbb3 f3f2 	udiv	r3, r3, r2
 800819c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800819e:	4413      	add	r3, r2
 80081a0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081b6:	8952      	ldrh	r2, [r2, #10]
 80081b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80081bc:	fb01 f202 	mul.w	r2, r1, r2
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d04e      	beq.n	8008264 <f_lseek+0x59c>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d047      	beq.n	8008264 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081da:	799b      	ldrb	r3, [r3, #6]
 80081dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d023      	beq.n	800822c <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f0:	7858      	ldrb	r0, [r3, #1]
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	2301      	movs	r3, #1
 80081fe:	f7fc fecd 	bl	8004f9c <disk_write>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d006      	beq.n	8008216 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800820e:	2201      	movs	r2, #1
 8008210:	71da      	strb	r2, [r3, #7]
 8008212:	2301      	movs	r3, #1
 8008214:	e045      	b.n	80082a2 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800821c:	799b      	ldrb	r3, [r3, #6]
 800821e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008222:	b2da      	uxtb	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800822a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008238:	7858      	ldrb	r0, [r3, #1]
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	2301      	movs	r3, #1
 800823e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008240:	f7fc fe8c 	bl	8004f5c <disk_read>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d006      	beq.n	8008258 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008250:	2201      	movs	r2, #1
 8008252:	71da      	strb	r2, [r3, #7]
 8008254:	2301      	movs	r3, #1
 8008256:	e024      	b.n	80082a2 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800825e:	461a      	mov	r2, r3
 8008260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008262:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	429a      	cmp	r2, r3
 8008276:	d912      	bls.n	800829e <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008286:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800828e:	799b      	ldrb	r3, [r3, #6]
 8008290:	f043 0320 	orr.w	r3, r3, #32
 8008294:	b2da      	uxtb	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800829c:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800829e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3740      	adds	r7, #64	@ 0x40
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b08e      	sub	sp, #56	@ 0x38
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80082b6:	f107 030c 	add.w	r3, r7, #12
 80082ba:	2200      	movs	r2, #0
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fe fb16 	bl	80068f0 <find_volume>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80082d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f040 80bc 	bne.w	8008452 <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082e0:	691a      	ldr	r2, [r3, #16]
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	3b02      	subs	r3, #2
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d806      	bhi.n	80082fe <f_getfree+0x54>
			*nclst = fs->free_clust;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082f6:	691a      	ldr	r2, [r3, #16]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	e0a9      	b.n	8008452 <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 800830c:	7efb      	ldrb	r3, [r7, #27]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d126      	bne.n	8008360 <f_getfree+0xb6>
				clst = 2;
 8008312:	2302      	movs	r3, #2
 8008314:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8008316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008318:	69f8      	ldr	r0, [r7, #28]
 800831a:	f7fd fa1a 	bl	8005752 <get_fat>
 800831e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008326:	d103      	bne.n	8008330 <f_getfree+0x86>
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800832e:	e07c      	b.n	800842a <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d103      	bne.n	800833e <f_getfree+0x94>
 8008336:	2302      	movs	r3, #2
 8008338:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800833c:	e075      	b.n	800842a <f_getfree+0x180>
					if (stat == 0) n++;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d102      	bne.n	800834a <f_getfree+0xa0>
 8008344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008346:	3301      	adds	r3, #1
 8008348:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 800834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834c:	3301      	adds	r3, #1
 800834e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800835a:	429a      	cmp	r2, r3
 800835c:	d3db      	bcc.n	8008316 <f_getfree+0x6c>
 800835e:	e064      	b.n	800842a <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	627b      	str	r3, [r7, #36]	@ 0x24
 8008378:	2300      	movs	r3, #0
 800837a:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	2b00      	cmp	r3, #0
 8008380:	d114      	bne.n	80083ac <f_getfree+0x102>
						res = move_window(fs, sect++);
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008388:	4619      	mov	r1, r3
 800838a:	69f8      	ldr	r0, [r7, #28]
 800838c:	f7fd f8cc 	bl	8005528 <move_window>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 8008396:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800839a:	2b00      	cmp	r3, #0
 800839c:	d144      	bne.n	8008428 <f_getfree+0x17e>
						p = fs->win.d8;
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083a8:	895b      	ldrh	r3, [r3, #10]
 80083aa:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 80083ac:	7efb      	ldrb	r3, [r7, #27]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d115      	bne.n	80083de <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	3301      	adds	r3, #1
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	b21a      	sxth	r2, r3
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b21b      	sxth	r3, r3
 80083c2:	4313      	orrs	r3, r2
 80083c4:	b21b      	sxth	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <f_getfree+0x126>
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	3301      	adds	r3, #1
 80083ce:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	3302      	adds	r3, #2
 80083d4:	623b      	str	r3, [r7, #32]
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	3b02      	subs	r3, #2
 80083da:	627b      	str	r3, [r7, #36]	@ 0x24
 80083dc:	e01d      	b.n	800841a <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	3303      	adds	r3, #3
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	061a      	lsls	r2, r3, #24
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	3302      	adds	r3, #2
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	041b      	lsls	r3, r3, #16
 80083ee:	431a      	orrs	r2, r3
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	3301      	adds	r3, #1
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	021b      	lsls	r3, r3, #8
 80083f8:	4313      	orrs	r3, r2
 80083fa:	6a3a      	ldr	r2, [r7, #32]
 80083fc:	7812      	ldrb	r2, [r2, #0]
 80083fe:	4313      	orrs	r3, r2
 8008400:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d102      	bne.n	800840e <f_getfree+0x164>
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	3301      	adds	r3, #1
 800840c:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	3304      	adds	r3, #4
 8008412:	623b      	str	r3, [r7, #32]
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	3b04      	subs	r3, #4
 8008418:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 800841a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841c:	3b01      	subs	r3, #1
 800841e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1aa      	bne.n	800837c <f_getfree+0xd2>
 8008426:	e000      	b.n	800842a <f_getfree+0x180>
						if (res != FR_OK) break;
 8008428:	bf00      	nop
			}
			fs->free_clust = n;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008430:	461a      	mov	r2, r3
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800843c:	795b      	ldrb	r3, [r3, #5]
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800844a:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008450:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8008452:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8008456:	4618      	mov	r0, r3
 8008458:	3738      	adds	r7, #56	@ 0x38
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800846e:	2301      	movs	r3, #1
 8008470:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008476:	4b1e      	ldr	r3, [pc, #120]	@ (80084f0 <FATFS_LinkDriverEx+0x90>)
 8008478:	7a5b      	ldrb	r3, [r3, #9]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	d831      	bhi.n	80084e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008480:	4b1b      	ldr	r3, [pc, #108]	@ (80084f0 <FATFS_LinkDriverEx+0x90>)
 8008482:	7a5b      	ldrb	r3, [r3, #9]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	461a      	mov	r2, r3
 8008488:	4b19      	ldr	r3, [pc, #100]	@ (80084f0 <FATFS_LinkDriverEx+0x90>)
 800848a:	2100      	movs	r1, #0
 800848c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800848e:	4b18      	ldr	r3, [pc, #96]	@ (80084f0 <FATFS_LinkDriverEx+0x90>)
 8008490:	7a5b      	ldrb	r3, [r3, #9]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	4a16      	ldr	r2, [pc, #88]	@ (80084f0 <FATFS_LinkDriverEx+0x90>)
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800849e:	4b14      	ldr	r3, [pc, #80]	@ (80084f0 <FATFS_LinkDriverEx+0x90>)
 80084a0:	7a5b      	ldrb	r3, [r3, #9]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	461a      	mov	r2, r3
 80084a6:	4b12      	ldr	r3, [pc, #72]	@ (80084f0 <FATFS_LinkDriverEx+0x90>)
 80084a8:	4413      	add	r3, r2
 80084aa:	79fa      	ldrb	r2, [r7, #7]
 80084ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084ae:	4b10      	ldr	r3, [pc, #64]	@ (80084f0 <FATFS_LinkDriverEx+0x90>)
 80084b0:	7a5b      	ldrb	r3, [r3, #9]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	b2d1      	uxtb	r1, r2
 80084b8:	4a0d      	ldr	r2, [pc, #52]	@ (80084f0 <FATFS_LinkDriverEx+0x90>)
 80084ba:	7251      	strb	r1, [r2, #9]
 80084bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084be:	7dbb      	ldrb	r3, [r7, #22]
 80084c0:	3330      	adds	r3, #48	@ 0x30
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	3301      	adds	r3, #1
 80084cc:	223a      	movs	r2, #58	@ 0x3a
 80084ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3302      	adds	r3, #2
 80084d4:	222f      	movs	r2, #47	@ 0x2f
 80084d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	3303      	adds	r3, #3
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr
 80084f0:	200001e4 	.word	0x200001e4

080084f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80084fe:	2200      	movs	r2, #0
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff ffac 	bl	8008460 <FATFS_LinkDriverEx>
 8008508:	4603      	mov	r3, r0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <sniprintf>:
 8008514:	b40c      	push	{r2, r3}
 8008516:	b530      	push	{r4, r5, lr}
 8008518:	4b17      	ldr	r3, [pc, #92]	@ (8008578 <sniprintf+0x64>)
 800851a:	1e0c      	subs	r4, r1, #0
 800851c:	681d      	ldr	r5, [r3, #0]
 800851e:	b09d      	sub	sp, #116	@ 0x74
 8008520:	da08      	bge.n	8008534 <sniprintf+0x20>
 8008522:	238b      	movs	r3, #139	@ 0x8b
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	602b      	str	r3, [r5, #0]
 800852a:	b01d      	add	sp, #116	@ 0x74
 800852c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008530:	b002      	add	sp, #8
 8008532:	4770      	bx	lr
 8008534:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008538:	f8ad 3014 	strh.w	r3, [sp, #20]
 800853c:	bf0c      	ite	eq
 800853e:	4623      	moveq	r3, r4
 8008540:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	9307      	str	r3, [sp, #28]
 8008548:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800854c:	9002      	str	r0, [sp, #8]
 800854e:	9006      	str	r0, [sp, #24]
 8008550:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008554:	4628      	mov	r0, r5
 8008556:	ab21      	add	r3, sp, #132	@ 0x84
 8008558:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800855a:	a902      	add	r1, sp, #8
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	f000 f993 	bl	8008888 <_svfiprintf_r>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	bfbc      	itt	lt
 8008566:	238b      	movlt	r3, #139	@ 0x8b
 8008568:	602b      	strlt	r3, [r5, #0]
 800856a:	2c00      	cmp	r4, #0
 800856c:	d0dd      	beq.n	800852a <sniprintf+0x16>
 800856e:	2200      	movs	r2, #0
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	701a      	strb	r2, [r3, #0]
 8008574:	e7d9      	b.n	800852a <sniprintf+0x16>
 8008576:	bf00      	nop
 8008578:	20000044 	.word	0x20000044

0800857c <memset>:
 800857c:	4603      	mov	r3, r0
 800857e:	4402      	add	r2, r0
 8008580:	4293      	cmp	r3, r2
 8008582:	d100      	bne.n	8008586 <memset+0xa>
 8008584:	4770      	bx	lr
 8008586:	f803 1b01 	strb.w	r1, [r3], #1
 800858a:	e7f9      	b.n	8008580 <memset+0x4>

0800858c <__errno>:
 800858c:	4b01      	ldr	r3, [pc, #4]	@ (8008594 <__errno+0x8>)
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	20000044 	.word	0x20000044

08008598 <__libc_init_array>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	2600      	movs	r6, #0
 800859c:	4d0c      	ldr	r5, [pc, #48]	@ (80085d0 <__libc_init_array+0x38>)
 800859e:	4c0d      	ldr	r4, [pc, #52]	@ (80085d4 <__libc_init_array+0x3c>)
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	42a6      	cmp	r6, r4
 80085a6:	d109      	bne.n	80085bc <__libc_init_array+0x24>
 80085a8:	f000 fc78 	bl	8008e9c <_init>
 80085ac:	2600      	movs	r6, #0
 80085ae:	4d0a      	ldr	r5, [pc, #40]	@ (80085d8 <__libc_init_array+0x40>)
 80085b0:	4c0a      	ldr	r4, [pc, #40]	@ (80085dc <__libc_init_array+0x44>)
 80085b2:	1b64      	subs	r4, r4, r5
 80085b4:	10a4      	asrs	r4, r4, #2
 80085b6:	42a6      	cmp	r6, r4
 80085b8:	d105      	bne.n	80085c6 <__libc_init_array+0x2e>
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c0:	4798      	blx	r3
 80085c2:	3601      	adds	r6, #1
 80085c4:	e7ee      	b.n	80085a4 <__libc_init_array+0xc>
 80085c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ca:	4798      	blx	r3
 80085cc:	3601      	adds	r6, #1
 80085ce:	e7f2      	b.n	80085b6 <__libc_init_array+0x1e>
 80085d0:	08009284 	.word	0x08009284
 80085d4:	08009284 	.word	0x08009284
 80085d8:	08009284 	.word	0x08009284
 80085dc:	08009288 	.word	0x08009288

080085e0 <__retarget_lock_acquire_recursive>:
 80085e0:	4770      	bx	lr

080085e2 <__retarget_lock_release_recursive>:
 80085e2:	4770      	bx	lr

080085e4 <_free_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4605      	mov	r5, r0
 80085e8:	2900      	cmp	r1, #0
 80085ea:	d040      	beq.n	800866e <_free_r+0x8a>
 80085ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f0:	1f0c      	subs	r4, r1, #4
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	bfb8      	it	lt
 80085f6:	18e4      	addlt	r4, r4, r3
 80085f8:	f000 f8de 	bl	80087b8 <__malloc_lock>
 80085fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008670 <_free_r+0x8c>)
 80085fe:	6813      	ldr	r3, [r2, #0]
 8008600:	b933      	cbnz	r3, 8008610 <_free_r+0x2c>
 8008602:	6063      	str	r3, [r4, #4]
 8008604:	6014      	str	r4, [r2, #0]
 8008606:	4628      	mov	r0, r5
 8008608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800860c:	f000 b8da 	b.w	80087c4 <__malloc_unlock>
 8008610:	42a3      	cmp	r3, r4
 8008612:	d908      	bls.n	8008626 <_free_r+0x42>
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	1821      	adds	r1, r4, r0
 8008618:	428b      	cmp	r3, r1
 800861a:	bf01      	itttt	eq
 800861c:	6819      	ldreq	r1, [r3, #0]
 800861e:	685b      	ldreq	r3, [r3, #4]
 8008620:	1809      	addeq	r1, r1, r0
 8008622:	6021      	streq	r1, [r4, #0]
 8008624:	e7ed      	b.n	8008602 <_free_r+0x1e>
 8008626:	461a      	mov	r2, r3
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	b10b      	cbz	r3, 8008630 <_free_r+0x4c>
 800862c:	42a3      	cmp	r3, r4
 800862e:	d9fa      	bls.n	8008626 <_free_r+0x42>
 8008630:	6811      	ldr	r1, [r2, #0]
 8008632:	1850      	adds	r0, r2, r1
 8008634:	42a0      	cmp	r0, r4
 8008636:	d10b      	bne.n	8008650 <_free_r+0x6c>
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	4401      	add	r1, r0
 800863c:	1850      	adds	r0, r2, r1
 800863e:	4283      	cmp	r3, r0
 8008640:	6011      	str	r1, [r2, #0]
 8008642:	d1e0      	bne.n	8008606 <_free_r+0x22>
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	4408      	add	r0, r1
 800864a:	6010      	str	r0, [r2, #0]
 800864c:	6053      	str	r3, [r2, #4]
 800864e:	e7da      	b.n	8008606 <_free_r+0x22>
 8008650:	d902      	bls.n	8008658 <_free_r+0x74>
 8008652:	230c      	movs	r3, #12
 8008654:	602b      	str	r3, [r5, #0]
 8008656:	e7d6      	b.n	8008606 <_free_r+0x22>
 8008658:	6820      	ldr	r0, [r4, #0]
 800865a:	1821      	adds	r1, r4, r0
 800865c:	428b      	cmp	r3, r1
 800865e:	bf01      	itttt	eq
 8008660:	6819      	ldreq	r1, [r3, #0]
 8008662:	685b      	ldreq	r3, [r3, #4]
 8008664:	1809      	addeq	r1, r1, r0
 8008666:	6021      	streq	r1, [r4, #0]
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	6054      	str	r4, [r2, #4]
 800866c:	e7cb      	b.n	8008606 <_free_r+0x22>
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	20000334 	.word	0x20000334

08008674 <sbrk_aligned>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	4e0f      	ldr	r6, [pc, #60]	@ (80086b4 <sbrk_aligned+0x40>)
 8008678:	460c      	mov	r4, r1
 800867a:	6831      	ldr	r1, [r6, #0]
 800867c:	4605      	mov	r5, r0
 800867e:	b911      	cbnz	r1, 8008686 <sbrk_aligned+0x12>
 8008680:	f000 fbaa 	bl	8008dd8 <_sbrk_r>
 8008684:	6030      	str	r0, [r6, #0]
 8008686:	4621      	mov	r1, r4
 8008688:	4628      	mov	r0, r5
 800868a:	f000 fba5 	bl	8008dd8 <_sbrk_r>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d103      	bne.n	800869a <sbrk_aligned+0x26>
 8008692:	f04f 34ff 	mov.w	r4, #4294967295
 8008696:	4620      	mov	r0, r4
 8008698:	bd70      	pop	{r4, r5, r6, pc}
 800869a:	1cc4      	adds	r4, r0, #3
 800869c:	f024 0403 	bic.w	r4, r4, #3
 80086a0:	42a0      	cmp	r0, r4
 80086a2:	d0f8      	beq.n	8008696 <sbrk_aligned+0x22>
 80086a4:	1a21      	subs	r1, r4, r0
 80086a6:	4628      	mov	r0, r5
 80086a8:	f000 fb96 	bl	8008dd8 <_sbrk_r>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d1f2      	bne.n	8008696 <sbrk_aligned+0x22>
 80086b0:	e7ef      	b.n	8008692 <sbrk_aligned+0x1e>
 80086b2:	bf00      	nop
 80086b4:	20000330 	.word	0x20000330

080086b8 <_malloc_r>:
 80086b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086bc:	1ccd      	adds	r5, r1, #3
 80086be:	f025 0503 	bic.w	r5, r5, #3
 80086c2:	3508      	adds	r5, #8
 80086c4:	2d0c      	cmp	r5, #12
 80086c6:	bf38      	it	cc
 80086c8:	250c      	movcc	r5, #12
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	4606      	mov	r6, r0
 80086ce:	db01      	blt.n	80086d4 <_malloc_r+0x1c>
 80086d0:	42a9      	cmp	r1, r5
 80086d2:	d904      	bls.n	80086de <_malloc_r+0x26>
 80086d4:	230c      	movs	r3, #12
 80086d6:	6033      	str	r3, [r6, #0]
 80086d8:	2000      	movs	r0, #0
 80086da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087b4 <_malloc_r+0xfc>
 80086e2:	f000 f869 	bl	80087b8 <__malloc_lock>
 80086e6:	f8d8 3000 	ldr.w	r3, [r8]
 80086ea:	461c      	mov	r4, r3
 80086ec:	bb44      	cbnz	r4, 8008740 <_malloc_r+0x88>
 80086ee:	4629      	mov	r1, r5
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7ff ffbf 	bl	8008674 <sbrk_aligned>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	4604      	mov	r4, r0
 80086fa:	d158      	bne.n	80087ae <_malloc_r+0xf6>
 80086fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008700:	4627      	mov	r7, r4
 8008702:	2f00      	cmp	r7, #0
 8008704:	d143      	bne.n	800878e <_malloc_r+0xd6>
 8008706:	2c00      	cmp	r4, #0
 8008708:	d04b      	beq.n	80087a2 <_malloc_r+0xea>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	4639      	mov	r1, r7
 800870e:	4630      	mov	r0, r6
 8008710:	eb04 0903 	add.w	r9, r4, r3
 8008714:	f000 fb60 	bl	8008dd8 <_sbrk_r>
 8008718:	4581      	cmp	r9, r0
 800871a:	d142      	bne.n	80087a2 <_malloc_r+0xea>
 800871c:	6821      	ldr	r1, [r4, #0]
 800871e:	4630      	mov	r0, r6
 8008720:	1a6d      	subs	r5, r5, r1
 8008722:	4629      	mov	r1, r5
 8008724:	f7ff ffa6 	bl	8008674 <sbrk_aligned>
 8008728:	3001      	adds	r0, #1
 800872a:	d03a      	beq.n	80087a2 <_malloc_r+0xea>
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	442b      	add	r3, r5
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	f8d8 3000 	ldr.w	r3, [r8]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	bb62      	cbnz	r2, 8008794 <_malloc_r+0xdc>
 800873a:	f8c8 7000 	str.w	r7, [r8]
 800873e:	e00f      	b.n	8008760 <_malloc_r+0xa8>
 8008740:	6822      	ldr	r2, [r4, #0]
 8008742:	1b52      	subs	r2, r2, r5
 8008744:	d420      	bmi.n	8008788 <_malloc_r+0xd0>
 8008746:	2a0b      	cmp	r2, #11
 8008748:	d917      	bls.n	800877a <_malloc_r+0xc2>
 800874a:	1961      	adds	r1, r4, r5
 800874c:	42a3      	cmp	r3, r4
 800874e:	6025      	str	r5, [r4, #0]
 8008750:	bf18      	it	ne
 8008752:	6059      	strne	r1, [r3, #4]
 8008754:	6863      	ldr	r3, [r4, #4]
 8008756:	bf08      	it	eq
 8008758:	f8c8 1000 	streq.w	r1, [r8]
 800875c:	5162      	str	r2, [r4, r5]
 800875e:	604b      	str	r3, [r1, #4]
 8008760:	4630      	mov	r0, r6
 8008762:	f000 f82f 	bl	80087c4 <__malloc_unlock>
 8008766:	f104 000b 	add.w	r0, r4, #11
 800876a:	1d23      	adds	r3, r4, #4
 800876c:	f020 0007 	bic.w	r0, r0, #7
 8008770:	1ac2      	subs	r2, r0, r3
 8008772:	bf1c      	itt	ne
 8008774:	1a1b      	subne	r3, r3, r0
 8008776:	50a3      	strne	r3, [r4, r2]
 8008778:	e7af      	b.n	80086da <_malloc_r+0x22>
 800877a:	6862      	ldr	r2, [r4, #4]
 800877c:	42a3      	cmp	r3, r4
 800877e:	bf0c      	ite	eq
 8008780:	f8c8 2000 	streq.w	r2, [r8]
 8008784:	605a      	strne	r2, [r3, #4]
 8008786:	e7eb      	b.n	8008760 <_malloc_r+0xa8>
 8008788:	4623      	mov	r3, r4
 800878a:	6864      	ldr	r4, [r4, #4]
 800878c:	e7ae      	b.n	80086ec <_malloc_r+0x34>
 800878e:	463c      	mov	r4, r7
 8008790:	687f      	ldr	r7, [r7, #4]
 8008792:	e7b6      	b.n	8008702 <_malloc_r+0x4a>
 8008794:	461a      	mov	r2, r3
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	42a3      	cmp	r3, r4
 800879a:	d1fb      	bne.n	8008794 <_malloc_r+0xdc>
 800879c:	2300      	movs	r3, #0
 800879e:	6053      	str	r3, [r2, #4]
 80087a0:	e7de      	b.n	8008760 <_malloc_r+0xa8>
 80087a2:	230c      	movs	r3, #12
 80087a4:	4630      	mov	r0, r6
 80087a6:	6033      	str	r3, [r6, #0]
 80087a8:	f000 f80c 	bl	80087c4 <__malloc_unlock>
 80087ac:	e794      	b.n	80086d8 <_malloc_r+0x20>
 80087ae:	6005      	str	r5, [r0, #0]
 80087b0:	e7d6      	b.n	8008760 <_malloc_r+0xa8>
 80087b2:	bf00      	nop
 80087b4:	20000334 	.word	0x20000334

080087b8 <__malloc_lock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	@ (80087c0 <__malloc_lock+0x8>)
 80087ba:	f7ff bf11 	b.w	80085e0 <__retarget_lock_acquire_recursive>
 80087be:	bf00      	nop
 80087c0:	2000032c 	.word	0x2000032c

080087c4 <__malloc_unlock>:
 80087c4:	4801      	ldr	r0, [pc, #4]	@ (80087cc <__malloc_unlock+0x8>)
 80087c6:	f7ff bf0c 	b.w	80085e2 <__retarget_lock_release_recursive>
 80087ca:	bf00      	nop
 80087cc:	2000032c 	.word	0x2000032c

080087d0 <__ssputs_r>:
 80087d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d4:	461f      	mov	r7, r3
 80087d6:	688e      	ldr	r6, [r1, #8]
 80087d8:	4682      	mov	sl, r0
 80087da:	42be      	cmp	r6, r7
 80087dc:	460c      	mov	r4, r1
 80087de:	4690      	mov	r8, r2
 80087e0:	680b      	ldr	r3, [r1, #0]
 80087e2:	d82d      	bhi.n	8008840 <__ssputs_r+0x70>
 80087e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087ec:	d026      	beq.n	800883c <__ssputs_r+0x6c>
 80087ee:	6965      	ldr	r5, [r4, #20]
 80087f0:	6909      	ldr	r1, [r1, #16]
 80087f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087f6:	eba3 0901 	sub.w	r9, r3, r1
 80087fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087fe:	1c7b      	adds	r3, r7, #1
 8008800:	444b      	add	r3, r9
 8008802:	106d      	asrs	r5, r5, #1
 8008804:	429d      	cmp	r5, r3
 8008806:	bf38      	it	cc
 8008808:	461d      	movcc	r5, r3
 800880a:	0553      	lsls	r3, r2, #21
 800880c:	d527      	bpl.n	800885e <__ssputs_r+0x8e>
 800880e:	4629      	mov	r1, r5
 8008810:	f7ff ff52 	bl	80086b8 <_malloc_r>
 8008814:	4606      	mov	r6, r0
 8008816:	b360      	cbz	r0, 8008872 <__ssputs_r+0xa2>
 8008818:	464a      	mov	r2, r9
 800881a:	6921      	ldr	r1, [r4, #16]
 800881c:	f000 fafa 	bl	8008e14 <memcpy>
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	6126      	str	r6, [r4, #16]
 800882e:	444e      	add	r6, r9
 8008830:	6026      	str	r6, [r4, #0]
 8008832:	463e      	mov	r6, r7
 8008834:	6165      	str	r5, [r4, #20]
 8008836:	eba5 0509 	sub.w	r5, r5, r9
 800883a:	60a5      	str	r5, [r4, #8]
 800883c:	42be      	cmp	r6, r7
 800883e:	d900      	bls.n	8008842 <__ssputs_r+0x72>
 8008840:	463e      	mov	r6, r7
 8008842:	4632      	mov	r2, r6
 8008844:	4641      	mov	r1, r8
 8008846:	6820      	ldr	r0, [r4, #0]
 8008848:	f000 faac 	bl	8008da4 <memmove>
 800884c:	2000      	movs	r0, #0
 800884e:	68a3      	ldr	r3, [r4, #8]
 8008850:	1b9b      	subs	r3, r3, r6
 8008852:	60a3      	str	r3, [r4, #8]
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	4433      	add	r3, r6
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885e:	462a      	mov	r2, r5
 8008860:	f000 fae6 	bl	8008e30 <_realloc_r>
 8008864:	4606      	mov	r6, r0
 8008866:	2800      	cmp	r0, #0
 8008868:	d1e0      	bne.n	800882c <__ssputs_r+0x5c>
 800886a:	4650      	mov	r0, sl
 800886c:	6921      	ldr	r1, [r4, #16]
 800886e:	f7ff feb9 	bl	80085e4 <_free_r>
 8008872:	230c      	movs	r3, #12
 8008874:	f8ca 3000 	str.w	r3, [sl]
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f04f 30ff 	mov.w	r0, #4294967295
 800887e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	e7e9      	b.n	800885a <__ssputs_r+0x8a>
	...

08008888 <_svfiprintf_r>:
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	4698      	mov	r8, r3
 800888e:	898b      	ldrh	r3, [r1, #12]
 8008890:	4607      	mov	r7, r0
 8008892:	061b      	lsls	r3, r3, #24
 8008894:	460d      	mov	r5, r1
 8008896:	4614      	mov	r4, r2
 8008898:	b09d      	sub	sp, #116	@ 0x74
 800889a:	d510      	bpl.n	80088be <_svfiprintf_r+0x36>
 800889c:	690b      	ldr	r3, [r1, #16]
 800889e:	b973      	cbnz	r3, 80088be <_svfiprintf_r+0x36>
 80088a0:	2140      	movs	r1, #64	@ 0x40
 80088a2:	f7ff ff09 	bl	80086b8 <_malloc_r>
 80088a6:	6028      	str	r0, [r5, #0]
 80088a8:	6128      	str	r0, [r5, #16]
 80088aa:	b930      	cbnz	r0, 80088ba <_svfiprintf_r+0x32>
 80088ac:	230c      	movs	r3, #12
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	b01d      	add	sp, #116	@ 0x74
 80088b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ba:	2340      	movs	r3, #64	@ 0x40
 80088bc:	616b      	str	r3, [r5, #20]
 80088be:	2300      	movs	r3, #0
 80088c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80088c2:	2320      	movs	r3, #32
 80088c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088c8:	2330      	movs	r3, #48	@ 0x30
 80088ca:	f04f 0901 	mov.w	r9, #1
 80088ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80088d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008a6c <_svfiprintf_r+0x1e4>
 80088d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088da:	4623      	mov	r3, r4
 80088dc:	469a      	mov	sl, r3
 80088de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088e2:	b10a      	cbz	r2, 80088e8 <_svfiprintf_r+0x60>
 80088e4:	2a25      	cmp	r2, #37	@ 0x25
 80088e6:	d1f9      	bne.n	80088dc <_svfiprintf_r+0x54>
 80088e8:	ebba 0b04 	subs.w	fp, sl, r4
 80088ec:	d00b      	beq.n	8008906 <_svfiprintf_r+0x7e>
 80088ee:	465b      	mov	r3, fp
 80088f0:	4622      	mov	r2, r4
 80088f2:	4629      	mov	r1, r5
 80088f4:	4638      	mov	r0, r7
 80088f6:	f7ff ff6b 	bl	80087d0 <__ssputs_r>
 80088fa:	3001      	adds	r0, #1
 80088fc:	f000 80a7 	beq.w	8008a4e <_svfiprintf_r+0x1c6>
 8008900:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008902:	445a      	add	r2, fp
 8008904:	9209      	str	r2, [sp, #36]	@ 0x24
 8008906:	f89a 3000 	ldrb.w	r3, [sl]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 809f 	beq.w	8008a4e <_svfiprintf_r+0x1c6>
 8008910:	2300      	movs	r3, #0
 8008912:	f04f 32ff 	mov.w	r2, #4294967295
 8008916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800891a:	f10a 0a01 	add.w	sl, sl, #1
 800891e:	9304      	str	r3, [sp, #16]
 8008920:	9307      	str	r3, [sp, #28]
 8008922:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008926:	931a      	str	r3, [sp, #104]	@ 0x68
 8008928:	4654      	mov	r4, sl
 800892a:	2205      	movs	r2, #5
 800892c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008930:	484e      	ldr	r0, [pc, #312]	@ (8008a6c <_svfiprintf_r+0x1e4>)
 8008932:	f000 fa61 	bl	8008df8 <memchr>
 8008936:	9a04      	ldr	r2, [sp, #16]
 8008938:	b9d8      	cbnz	r0, 8008972 <_svfiprintf_r+0xea>
 800893a:	06d0      	lsls	r0, r2, #27
 800893c:	bf44      	itt	mi
 800893e:	2320      	movmi	r3, #32
 8008940:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008944:	0711      	lsls	r1, r2, #28
 8008946:	bf44      	itt	mi
 8008948:	232b      	movmi	r3, #43	@ 0x2b
 800894a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800894e:	f89a 3000 	ldrb.w	r3, [sl]
 8008952:	2b2a      	cmp	r3, #42	@ 0x2a
 8008954:	d015      	beq.n	8008982 <_svfiprintf_r+0xfa>
 8008956:	4654      	mov	r4, sl
 8008958:	2000      	movs	r0, #0
 800895a:	f04f 0c0a 	mov.w	ip, #10
 800895e:	9a07      	ldr	r2, [sp, #28]
 8008960:	4621      	mov	r1, r4
 8008962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008966:	3b30      	subs	r3, #48	@ 0x30
 8008968:	2b09      	cmp	r3, #9
 800896a:	d94b      	bls.n	8008a04 <_svfiprintf_r+0x17c>
 800896c:	b1b0      	cbz	r0, 800899c <_svfiprintf_r+0x114>
 800896e:	9207      	str	r2, [sp, #28]
 8008970:	e014      	b.n	800899c <_svfiprintf_r+0x114>
 8008972:	eba0 0308 	sub.w	r3, r0, r8
 8008976:	fa09 f303 	lsl.w	r3, r9, r3
 800897a:	4313      	orrs	r3, r2
 800897c:	46a2      	mov	sl, r4
 800897e:	9304      	str	r3, [sp, #16]
 8008980:	e7d2      	b.n	8008928 <_svfiprintf_r+0xa0>
 8008982:	9b03      	ldr	r3, [sp, #12]
 8008984:	1d19      	adds	r1, r3, #4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	9103      	str	r1, [sp, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	bfbb      	ittet	lt
 800898e:	425b      	neglt	r3, r3
 8008990:	f042 0202 	orrlt.w	r2, r2, #2
 8008994:	9307      	strge	r3, [sp, #28]
 8008996:	9307      	strlt	r3, [sp, #28]
 8008998:	bfb8      	it	lt
 800899a:	9204      	strlt	r2, [sp, #16]
 800899c:	7823      	ldrb	r3, [r4, #0]
 800899e:	2b2e      	cmp	r3, #46	@ 0x2e
 80089a0:	d10a      	bne.n	80089b8 <_svfiprintf_r+0x130>
 80089a2:	7863      	ldrb	r3, [r4, #1]
 80089a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80089a6:	d132      	bne.n	8008a0e <_svfiprintf_r+0x186>
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	3402      	adds	r4, #2
 80089ac:	1d1a      	adds	r2, r3, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	9203      	str	r2, [sp, #12]
 80089b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089b6:	9305      	str	r3, [sp, #20]
 80089b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008a70 <_svfiprintf_r+0x1e8>
 80089bc:	2203      	movs	r2, #3
 80089be:	4650      	mov	r0, sl
 80089c0:	7821      	ldrb	r1, [r4, #0]
 80089c2:	f000 fa19 	bl	8008df8 <memchr>
 80089c6:	b138      	cbz	r0, 80089d8 <_svfiprintf_r+0x150>
 80089c8:	2240      	movs	r2, #64	@ 0x40
 80089ca:	9b04      	ldr	r3, [sp, #16]
 80089cc:	eba0 000a 	sub.w	r0, r0, sl
 80089d0:	4082      	lsls	r2, r0
 80089d2:	4313      	orrs	r3, r2
 80089d4:	3401      	adds	r4, #1
 80089d6:	9304      	str	r3, [sp, #16]
 80089d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089dc:	2206      	movs	r2, #6
 80089de:	4825      	ldr	r0, [pc, #148]	@ (8008a74 <_svfiprintf_r+0x1ec>)
 80089e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089e4:	f000 fa08 	bl	8008df8 <memchr>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d036      	beq.n	8008a5a <_svfiprintf_r+0x1d2>
 80089ec:	4b22      	ldr	r3, [pc, #136]	@ (8008a78 <_svfiprintf_r+0x1f0>)
 80089ee:	bb1b      	cbnz	r3, 8008a38 <_svfiprintf_r+0x1b0>
 80089f0:	9b03      	ldr	r3, [sp, #12]
 80089f2:	3307      	adds	r3, #7
 80089f4:	f023 0307 	bic.w	r3, r3, #7
 80089f8:	3308      	adds	r3, #8
 80089fa:	9303      	str	r3, [sp, #12]
 80089fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089fe:	4433      	add	r3, r6
 8008a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a02:	e76a      	b.n	80088da <_svfiprintf_r+0x52>
 8008a04:	460c      	mov	r4, r1
 8008a06:	2001      	movs	r0, #1
 8008a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a0c:	e7a8      	b.n	8008960 <_svfiprintf_r+0xd8>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f04f 0c0a 	mov.w	ip, #10
 8008a14:	4619      	mov	r1, r3
 8008a16:	3401      	adds	r4, #1
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a20:	3a30      	subs	r2, #48	@ 0x30
 8008a22:	2a09      	cmp	r2, #9
 8008a24:	d903      	bls.n	8008a2e <_svfiprintf_r+0x1a6>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0c6      	beq.n	80089b8 <_svfiprintf_r+0x130>
 8008a2a:	9105      	str	r1, [sp, #20]
 8008a2c:	e7c4      	b.n	80089b8 <_svfiprintf_r+0x130>
 8008a2e:	4604      	mov	r4, r0
 8008a30:	2301      	movs	r3, #1
 8008a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a36:	e7f0      	b.n	8008a1a <_svfiprintf_r+0x192>
 8008a38:	ab03      	add	r3, sp, #12
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4638      	mov	r0, r7
 8008a40:	4b0e      	ldr	r3, [pc, #56]	@ (8008a7c <_svfiprintf_r+0x1f4>)
 8008a42:	a904      	add	r1, sp, #16
 8008a44:	f3af 8000 	nop.w
 8008a48:	1c42      	adds	r2, r0, #1
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	d1d6      	bne.n	80089fc <_svfiprintf_r+0x174>
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	065b      	lsls	r3, r3, #25
 8008a52:	f53f af2d 	bmi.w	80088b0 <_svfiprintf_r+0x28>
 8008a56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a58:	e72c      	b.n	80088b4 <_svfiprintf_r+0x2c>
 8008a5a:	ab03      	add	r3, sp, #12
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	462a      	mov	r2, r5
 8008a60:	4638      	mov	r0, r7
 8008a62:	4b06      	ldr	r3, [pc, #24]	@ (8008a7c <_svfiprintf_r+0x1f4>)
 8008a64:	a904      	add	r1, sp, #16
 8008a66:	f000 f87d 	bl	8008b64 <_printf_i>
 8008a6a:	e7ed      	b.n	8008a48 <_svfiprintf_r+0x1c0>
 8008a6c:	08009248 	.word	0x08009248
 8008a70:	0800924e 	.word	0x0800924e
 8008a74:	08009252 	.word	0x08009252
 8008a78:	00000000 	.word	0x00000000
 8008a7c:	080087d1 	.word	0x080087d1

08008a80 <_printf_common>:
 8008a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	4616      	mov	r6, r2
 8008a86:	4698      	mov	r8, r3
 8008a88:	688a      	ldr	r2, [r1, #8]
 8008a8a:	690b      	ldr	r3, [r1, #16]
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	bfb8      	it	lt
 8008a92:	4613      	movlt	r3, r2
 8008a94:	6033      	str	r3, [r6, #0]
 8008a96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008aa0:	b10a      	cbz	r2, 8008aa6 <_printf_common+0x26>
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	6033      	str	r3, [r6, #0]
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	0699      	lsls	r1, r3, #26
 8008aaa:	bf42      	ittt	mi
 8008aac:	6833      	ldrmi	r3, [r6, #0]
 8008aae:	3302      	addmi	r3, #2
 8008ab0:	6033      	strmi	r3, [r6, #0]
 8008ab2:	6825      	ldr	r5, [r4, #0]
 8008ab4:	f015 0506 	ands.w	r5, r5, #6
 8008ab8:	d106      	bne.n	8008ac8 <_printf_common+0x48>
 8008aba:	f104 0a19 	add.w	sl, r4, #25
 8008abe:	68e3      	ldr	r3, [r4, #12]
 8008ac0:	6832      	ldr	r2, [r6, #0]
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	42ab      	cmp	r3, r5
 8008ac6:	dc2b      	bgt.n	8008b20 <_printf_common+0xa0>
 8008ac8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008acc:	6822      	ldr	r2, [r4, #0]
 8008ace:	3b00      	subs	r3, #0
 8008ad0:	bf18      	it	ne
 8008ad2:	2301      	movne	r3, #1
 8008ad4:	0692      	lsls	r2, r2, #26
 8008ad6:	d430      	bmi.n	8008b3a <_printf_common+0xba>
 8008ad8:	4641      	mov	r1, r8
 8008ada:	4638      	mov	r0, r7
 8008adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ae0:	47c8      	blx	r9
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	d023      	beq.n	8008b2e <_printf_common+0xae>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	6922      	ldr	r2, [r4, #16]
 8008aea:	f003 0306 	and.w	r3, r3, #6
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	bf14      	ite	ne
 8008af2:	2500      	movne	r5, #0
 8008af4:	6833      	ldreq	r3, [r6, #0]
 8008af6:	f04f 0600 	mov.w	r6, #0
 8008afa:	bf08      	it	eq
 8008afc:	68e5      	ldreq	r5, [r4, #12]
 8008afe:	f104 041a 	add.w	r4, r4, #26
 8008b02:	bf08      	it	eq
 8008b04:	1aed      	subeq	r5, r5, r3
 8008b06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008b0a:	bf08      	it	eq
 8008b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b10:	4293      	cmp	r3, r2
 8008b12:	bfc4      	itt	gt
 8008b14:	1a9b      	subgt	r3, r3, r2
 8008b16:	18ed      	addgt	r5, r5, r3
 8008b18:	42b5      	cmp	r5, r6
 8008b1a:	d11a      	bne.n	8008b52 <_printf_common+0xd2>
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	e008      	b.n	8008b32 <_printf_common+0xb2>
 8008b20:	2301      	movs	r3, #1
 8008b22:	4652      	mov	r2, sl
 8008b24:	4641      	mov	r1, r8
 8008b26:	4638      	mov	r0, r7
 8008b28:	47c8      	blx	r9
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d103      	bne.n	8008b36 <_printf_common+0xb6>
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b36:	3501      	adds	r5, #1
 8008b38:	e7c1      	b.n	8008abe <_printf_common+0x3e>
 8008b3a:	2030      	movs	r0, #48	@ 0x30
 8008b3c:	18e1      	adds	r1, r4, r3
 8008b3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b48:	4422      	add	r2, r4
 8008b4a:	3302      	adds	r3, #2
 8008b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b50:	e7c2      	b.n	8008ad8 <_printf_common+0x58>
 8008b52:	2301      	movs	r3, #1
 8008b54:	4622      	mov	r2, r4
 8008b56:	4641      	mov	r1, r8
 8008b58:	4638      	mov	r0, r7
 8008b5a:	47c8      	blx	r9
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d0e6      	beq.n	8008b2e <_printf_common+0xae>
 8008b60:	3601      	adds	r6, #1
 8008b62:	e7d9      	b.n	8008b18 <_printf_common+0x98>

08008b64 <_printf_i>:
 8008b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b68:	7e0f      	ldrb	r7, [r1, #24]
 8008b6a:	4691      	mov	r9, r2
 8008b6c:	2f78      	cmp	r7, #120	@ 0x78
 8008b6e:	4680      	mov	r8, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	469a      	mov	sl, r3
 8008b74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b7a:	d807      	bhi.n	8008b8c <_printf_i+0x28>
 8008b7c:	2f62      	cmp	r7, #98	@ 0x62
 8008b7e:	d80a      	bhi.n	8008b96 <_printf_i+0x32>
 8008b80:	2f00      	cmp	r7, #0
 8008b82:	f000 80d3 	beq.w	8008d2c <_printf_i+0x1c8>
 8008b86:	2f58      	cmp	r7, #88	@ 0x58
 8008b88:	f000 80ba 	beq.w	8008d00 <_printf_i+0x19c>
 8008b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b94:	e03a      	b.n	8008c0c <_printf_i+0xa8>
 8008b96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b9a:	2b15      	cmp	r3, #21
 8008b9c:	d8f6      	bhi.n	8008b8c <_printf_i+0x28>
 8008b9e:	a101      	add	r1, pc, #4	@ (adr r1, 8008ba4 <_printf_i+0x40>)
 8008ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba4:	08008bfd 	.word	0x08008bfd
 8008ba8:	08008c11 	.word	0x08008c11
 8008bac:	08008b8d 	.word	0x08008b8d
 8008bb0:	08008b8d 	.word	0x08008b8d
 8008bb4:	08008b8d 	.word	0x08008b8d
 8008bb8:	08008b8d 	.word	0x08008b8d
 8008bbc:	08008c11 	.word	0x08008c11
 8008bc0:	08008b8d 	.word	0x08008b8d
 8008bc4:	08008b8d 	.word	0x08008b8d
 8008bc8:	08008b8d 	.word	0x08008b8d
 8008bcc:	08008b8d 	.word	0x08008b8d
 8008bd0:	08008d13 	.word	0x08008d13
 8008bd4:	08008c3b 	.word	0x08008c3b
 8008bd8:	08008ccd 	.word	0x08008ccd
 8008bdc:	08008b8d 	.word	0x08008b8d
 8008be0:	08008b8d 	.word	0x08008b8d
 8008be4:	08008d35 	.word	0x08008d35
 8008be8:	08008b8d 	.word	0x08008b8d
 8008bec:	08008c3b 	.word	0x08008c3b
 8008bf0:	08008b8d 	.word	0x08008b8d
 8008bf4:	08008b8d 	.word	0x08008b8d
 8008bf8:	08008cd5 	.word	0x08008cd5
 8008bfc:	6833      	ldr	r3, [r6, #0]
 8008bfe:	1d1a      	adds	r2, r3, #4
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6032      	str	r2, [r6, #0]
 8008c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e09e      	b.n	8008d4e <_printf_i+0x1ea>
 8008c10:	6833      	ldr	r3, [r6, #0]
 8008c12:	6820      	ldr	r0, [r4, #0]
 8008c14:	1d19      	adds	r1, r3, #4
 8008c16:	6031      	str	r1, [r6, #0]
 8008c18:	0606      	lsls	r6, r0, #24
 8008c1a:	d501      	bpl.n	8008c20 <_printf_i+0xbc>
 8008c1c:	681d      	ldr	r5, [r3, #0]
 8008c1e:	e003      	b.n	8008c28 <_printf_i+0xc4>
 8008c20:	0645      	lsls	r5, r0, #25
 8008c22:	d5fb      	bpl.n	8008c1c <_printf_i+0xb8>
 8008c24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c28:	2d00      	cmp	r5, #0
 8008c2a:	da03      	bge.n	8008c34 <_printf_i+0xd0>
 8008c2c:	232d      	movs	r3, #45	@ 0x2d
 8008c2e:	426d      	negs	r5, r5
 8008c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c34:	230a      	movs	r3, #10
 8008c36:	4859      	ldr	r0, [pc, #356]	@ (8008d9c <_printf_i+0x238>)
 8008c38:	e011      	b.n	8008c5e <_printf_i+0xfa>
 8008c3a:	6821      	ldr	r1, [r4, #0]
 8008c3c:	6833      	ldr	r3, [r6, #0]
 8008c3e:	0608      	lsls	r0, r1, #24
 8008c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c44:	d402      	bmi.n	8008c4c <_printf_i+0xe8>
 8008c46:	0649      	lsls	r1, r1, #25
 8008c48:	bf48      	it	mi
 8008c4a:	b2ad      	uxthmi	r5, r5
 8008c4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c4e:	6033      	str	r3, [r6, #0]
 8008c50:	bf14      	ite	ne
 8008c52:	230a      	movne	r3, #10
 8008c54:	2308      	moveq	r3, #8
 8008c56:	4851      	ldr	r0, [pc, #324]	@ (8008d9c <_printf_i+0x238>)
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c5e:	6866      	ldr	r6, [r4, #4]
 8008c60:	2e00      	cmp	r6, #0
 8008c62:	bfa8      	it	ge
 8008c64:	6821      	ldrge	r1, [r4, #0]
 8008c66:	60a6      	str	r6, [r4, #8]
 8008c68:	bfa4      	itt	ge
 8008c6a:	f021 0104 	bicge.w	r1, r1, #4
 8008c6e:	6021      	strge	r1, [r4, #0]
 8008c70:	b90d      	cbnz	r5, 8008c76 <_printf_i+0x112>
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	d04b      	beq.n	8008d0e <_printf_i+0x1aa>
 8008c76:	4616      	mov	r6, r2
 8008c78:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c7c:	fb03 5711 	mls	r7, r3, r1, r5
 8008c80:	5dc7      	ldrb	r7, [r0, r7]
 8008c82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c86:	462f      	mov	r7, r5
 8008c88:	42bb      	cmp	r3, r7
 8008c8a:	460d      	mov	r5, r1
 8008c8c:	d9f4      	bls.n	8008c78 <_printf_i+0x114>
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	d10b      	bne.n	8008caa <_printf_i+0x146>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	07df      	lsls	r7, r3, #31
 8008c96:	d508      	bpl.n	8008caa <_printf_i+0x146>
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	6861      	ldr	r1, [r4, #4]
 8008c9c:	4299      	cmp	r1, r3
 8008c9e:	bfde      	ittt	le
 8008ca0:	2330      	movle	r3, #48	@ 0x30
 8008ca2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ca6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008caa:	1b92      	subs	r2, r2, r6
 8008cac:	6122      	str	r2, [r4, #16]
 8008cae:	464b      	mov	r3, r9
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	f8cd a000 	str.w	sl, [sp]
 8008cb8:	aa03      	add	r2, sp, #12
 8008cba:	f7ff fee1 	bl	8008a80 <_printf_common>
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d14a      	bne.n	8008d58 <_printf_i+0x1f4>
 8008cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc6:	b004      	add	sp, #16
 8008cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	f043 0320 	orr.w	r3, r3, #32
 8008cd2:	6023      	str	r3, [r4, #0]
 8008cd4:	2778      	movs	r7, #120	@ 0x78
 8008cd6:	4832      	ldr	r0, [pc, #200]	@ (8008da0 <_printf_i+0x23c>)
 8008cd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	6831      	ldr	r1, [r6, #0]
 8008ce0:	061f      	lsls	r7, r3, #24
 8008ce2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ce6:	d402      	bmi.n	8008cee <_printf_i+0x18a>
 8008ce8:	065f      	lsls	r7, r3, #25
 8008cea:	bf48      	it	mi
 8008cec:	b2ad      	uxthmi	r5, r5
 8008cee:	6031      	str	r1, [r6, #0]
 8008cf0:	07d9      	lsls	r1, r3, #31
 8008cf2:	bf44      	itt	mi
 8008cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8008cf8:	6023      	strmi	r3, [r4, #0]
 8008cfa:	b11d      	cbz	r5, 8008d04 <_printf_i+0x1a0>
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	e7ab      	b.n	8008c58 <_printf_i+0xf4>
 8008d00:	4826      	ldr	r0, [pc, #152]	@ (8008d9c <_printf_i+0x238>)
 8008d02:	e7e9      	b.n	8008cd8 <_printf_i+0x174>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	f023 0320 	bic.w	r3, r3, #32
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	e7f6      	b.n	8008cfc <_printf_i+0x198>
 8008d0e:	4616      	mov	r6, r2
 8008d10:	e7bd      	b.n	8008c8e <_printf_i+0x12a>
 8008d12:	6833      	ldr	r3, [r6, #0]
 8008d14:	6825      	ldr	r5, [r4, #0]
 8008d16:	1d18      	adds	r0, r3, #4
 8008d18:	6961      	ldr	r1, [r4, #20]
 8008d1a:	6030      	str	r0, [r6, #0]
 8008d1c:	062e      	lsls	r6, r5, #24
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	d501      	bpl.n	8008d26 <_printf_i+0x1c2>
 8008d22:	6019      	str	r1, [r3, #0]
 8008d24:	e002      	b.n	8008d2c <_printf_i+0x1c8>
 8008d26:	0668      	lsls	r0, r5, #25
 8008d28:	d5fb      	bpl.n	8008d22 <_printf_i+0x1be>
 8008d2a:	8019      	strh	r1, [r3, #0]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4616      	mov	r6, r2
 8008d30:	6123      	str	r3, [r4, #16]
 8008d32:	e7bc      	b.n	8008cae <_printf_i+0x14a>
 8008d34:	6833      	ldr	r3, [r6, #0]
 8008d36:	2100      	movs	r1, #0
 8008d38:	1d1a      	adds	r2, r3, #4
 8008d3a:	6032      	str	r2, [r6, #0]
 8008d3c:	681e      	ldr	r6, [r3, #0]
 8008d3e:	6862      	ldr	r2, [r4, #4]
 8008d40:	4630      	mov	r0, r6
 8008d42:	f000 f859 	bl	8008df8 <memchr>
 8008d46:	b108      	cbz	r0, 8008d4c <_printf_i+0x1e8>
 8008d48:	1b80      	subs	r0, r0, r6
 8008d4a:	6060      	str	r0, [r4, #4]
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	6123      	str	r3, [r4, #16]
 8008d50:	2300      	movs	r3, #0
 8008d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d56:	e7aa      	b.n	8008cae <_printf_i+0x14a>
 8008d58:	4632      	mov	r2, r6
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	47d0      	blx	sl
 8008d62:	3001      	adds	r0, #1
 8008d64:	d0ad      	beq.n	8008cc2 <_printf_i+0x15e>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	079b      	lsls	r3, r3, #30
 8008d6a:	d413      	bmi.n	8008d94 <_printf_i+0x230>
 8008d6c:	68e0      	ldr	r0, [r4, #12]
 8008d6e:	9b03      	ldr	r3, [sp, #12]
 8008d70:	4298      	cmp	r0, r3
 8008d72:	bfb8      	it	lt
 8008d74:	4618      	movlt	r0, r3
 8008d76:	e7a6      	b.n	8008cc6 <_printf_i+0x162>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	4640      	mov	r0, r8
 8008d80:	47d0      	blx	sl
 8008d82:	3001      	adds	r0, #1
 8008d84:	d09d      	beq.n	8008cc2 <_printf_i+0x15e>
 8008d86:	3501      	adds	r5, #1
 8008d88:	68e3      	ldr	r3, [r4, #12]
 8008d8a:	9903      	ldr	r1, [sp, #12]
 8008d8c:	1a5b      	subs	r3, r3, r1
 8008d8e:	42ab      	cmp	r3, r5
 8008d90:	dcf2      	bgt.n	8008d78 <_printf_i+0x214>
 8008d92:	e7eb      	b.n	8008d6c <_printf_i+0x208>
 8008d94:	2500      	movs	r5, #0
 8008d96:	f104 0619 	add.w	r6, r4, #25
 8008d9a:	e7f5      	b.n	8008d88 <_printf_i+0x224>
 8008d9c:	08009259 	.word	0x08009259
 8008da0:	0800926a 	.word	0x0800926a

08008da4 <memmove>:
 8008da4:	4288      	cmp	r0, r1
 8008da6:	b510      	push	{r4, lr}
 8008da8:	eb01 0402 	add.w	r4, r1, r2
 8008dac:	d902      	bls.n	8008db4 <memmove+0x10>
 8008dae:	4284      	cmp	r4, r0
 8008db0:	4623      	mov	r3, r4
 8008db2:	d807      	bhi.n	8008dc4 <memmove+0x20>
 8008db4:	1e43      	subs	r3, r0, #1
 8008db6:	42a1      	cmp	r1, r4
 8008db8:	d008      	beq.n	8008dcc <memmove+0x28>
 8008dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dc2:	e7f8      	b.n	8008db6 <memmove+0x12>
 8008dc4:	4601      	mov	r1, r0
 8008dc6:	4402      	add	r2, r0
 8008dc8:	428a      	cmp	r2, r1
 8008dca:	d100      	bne.n	8008dce <memmove+0x2a>
 8008dcc:	bd10      	pop	{r4, pc}
 8008dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dd6:	e7f7      	b.n	8008dc8 <memmove+0x24>

08008dd8 <_sbrk_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4d05      	ldr	r5, [pc, #20]	@ (8008df4 <_sbrk_r+0x1c>)
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7f8 fb6a 	bl	80014bc <_sbrk>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_sbrk_r+0x1a>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_sbrk_r+0x1a>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	20000328 	.word	0x20000328

08008df8 <memchr>:
 8008df8:	4603      	mov	r3, r0
 8008dfa:	b510      	push	{r4, lr}
 8008dfc:	b2c9      	uxtb	r1, r1
 8008dfe:	4402      	add	r2, r0
 8008e00:	4293      	cmp	r3, r2
 8008e02:	4618      	mov	r0, r3
 8008e04:	d101      	bne.n	8008e0a <memchr+0x12>
 8008e06:	2000      	movs	r0, #0
 8008e08:	e003      	b.n	8008e12 <memchr+0x1a>
 8008e0a:	7804      	ldrb	r4, [r0, #0]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	428c      	cmp	r4, r1
 8008e10:	d1f6      	bne.n	8008e00 <memchr+0x8>
 8008e12:	bd10      	pop	{r4, pc}

08008e14 <memcpy>:
 8008e14:	440a      	add	r2, r1
 8008e16:	4291      	cmp	r1, r2
 8008e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e1c:	d100      	bne.n	8008e20 <memcpy+0xc>
 8008e1e:	4770      	bx	lr
 8008e20:	b510      	push	{r4, lr}
 8008e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e26:	4291      	cmp	r1, r2
 8008e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e2c:	d1f9      	bne.n	8008e22 <memcpy+0xe>
 8008e2e:	bd10      	pop	{r4, pc}

08008e30 <_realloc_r>:
 8008e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e34:	4680      	mov	r8, r0
 8008e36:	4615      	mov	r5, r2
 8008e38:	460c      	mov	r4, r1
 8008e3a:	b921      	cbnz	r1, 8008e46 <_realloc_r+0x16>
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e42:	f7ff bc39 	b.w	80086b8 <_malloc_r>
 8008e46:	b92a      	cbnz	r2, 8008e54 <_realloc_r+0x24>
 8008e48:	f7ff fbcc 	bl	80085e4 <_free_r>
 8008e4c:	2400      	movs	r4, #0
 8008e4e:	4620      	mov	r0, r4
 8008e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e54:	f000 f81a 	bl	8008e8c <_malloc_usable_size_r>
 8008e58:	4285      	cmp	r5, r0
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	d802      	bhi.n	8008e64 <_realloc_r+0x34>
 8008e5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e62:	d8f4      	bhi.n	8008e4e <_realloc_r+0x1e>
 8008e64:	4629      	mov	r1, r5
 8008e66:	4640      	mov	r0, r8
 8008e68:	f7ff fc26 	bl	80086b8 <_malloc_r>
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d0ec      	beq.n	8008e4c <_realloc_r+0x1c>
 8008e72:	42b5      	cmp	r5, r6
 8008e74:	462a      	mov	r2, r5
 8008e76:	4621      	mov	r1, r4
 8008e78:	bf28      	it	cs
 8008e7a:	4632      	movcs	r2, r6
 8008e7c:	f7ff ffca 	bl	8008e14 <memcpy>
 8008e80:	4621      	mov	r1, r4
 8008e82:	4640      	mov	r0, r8
 8008e84:	f7ff fbae 	bl	80085e4 <_free_r>
 8008e88:	463c      	mov	r4, r7
 8008e8a:	e7e0      	b.n	8008e4e <_realloc_r+0x1e>

08008e8c <_malloc_usable_size_r>:
 8008e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e90:	1f18      	subs	r0, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bfbc      	itt	lt
 8008e96:	580b      	ldrlt	r3, [r1, r0]
 8008e98:	18c0      	addlt	r0, r0, r3
 8008e9a:	4770      	bx	lr

08008e9c <_init>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	bf00      	nop
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr

08008ea8 <_fini>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr
